
flightController_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000175e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  08017770  08017770  00027770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017f4c  08017f4c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08017f4c  08017f4c  00027f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017f54  08017f54  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08017f54  08017f54  00027f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000014  08017f68  08017f68  00027f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08017f7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          0000d7d8  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000d850  2000d850  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000aa17e  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c537  00000000  00000000  000da226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037d0  00000000  00000000  000e6760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000035f8  00000000  00000000  000e9f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fd2e  00000000  00000000  000ed528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a0bd  00000000  00000000  0011d256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010d071  00000000  00000000  00157313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00264384  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011660  00000000  00000000  002643d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017758 	.word	0x08017758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08017758 	.word	0x08017758

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f805 	bl	8000ee2 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
    }
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f941 	bl	80011a0 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZN30FlightControllorImplementation14getNvmInstanceEv>:
 */

#include "FlightControllerImplementation.hpp"

nvm& FlightControllorImplementation::getNvmInstance()
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	return this->nvmInstance;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3324      	adds	r3, #36	; 0x24
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_ZN30FlightControllorImplementation18getRollPidInstanceEv>:

PID_Control& FlightControllorImplementation::getRollPidInstance()
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	return this->roll_pid;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f203 5314 	addw	r3, r3, #1300	; 0x514
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>:

PID_Control& FlightControllorImplementation::getPitchPidInstance()
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	return this->pitch_pid;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_ZN30FlightControllorImplementation17getYawPidInstanceEv>:

PID_Control& FlightControllorImplementation::getYawPidInstance()
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	return this->yaw_pid;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f203 536c 	addw	r3, r3, #1388	; 0x56c
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>:

LIS3MDLTR& FlightControllorImplementation::getLIS3MDLTRinstance()
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	return this->lis;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3340      	adds	r3, #64	; 0x40
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>:

Buzzer& FlightControllorImplementation::getBuzzerinstance()
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	return this->buzz;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3328      	adds	r3, #40	; 0x28
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_ZN30FlightControllorImplementation17getBMP390instanceEv>:

BMP390& FlightControllorImplementation::getBMP390instance()
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	return this->bmp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	33b0      	adds	r3, #176	; 0xb0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>:

ICM42688P& FlightControllorImplementation::getICM42688Pinstance()
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	return this->icm;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_ZN30FlightControllorImplementation15getHC05instanceEv>:

HC05& FlightControllorImplementation::getHC05instance()
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	return this->bt;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f503 7320 	add.w	r3, r3, #640	; 0x280
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>:

PMW3901UY& FlightControllorImplementation::getPMW3901UYinstance()
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	return this->pmw;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f503 7344 	add.w	r3, r3, #784	; 0x310
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>:

FrSkyRX& FlightControllorImplementation::getFrSkyRXinstance()
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	return this->remote_rx;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_ZN30FlightControllorImplementation17getMB1043instanceEv>:

MB1043& FlightControllorImplementation::getMB1043instance()
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	return this->sonar;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f503 6390 	add.w	r3, r3, #1152	; 0x480
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>:

BatteryManagement& FlightControllorImplementation::getBatteryManagementinstance()
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	return this->battMgmt;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getFaultsCheckHandlerPtr()
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	return &this->_faultsCheckHandler;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f203 539c 	addw	r3, r3, #1436	; 0x59c
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getSensorsDataReadHandlerPtr()
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	return &this->_sensorsDataReadHandler;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getDynamicsProcessHandlerPtr()
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	return &this->_dynamicsProcessHandler;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>:

FaultsStatus FlightControllorImplementation::getCurrentFaultsStatus() const
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	return this->_currentFaultsStatus;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>:

void FlightControllorImplementation::setCurrentFaultsStatus(FaultsStatus faultsStatus)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
	this->_currentFaultsStatus = faultsStatus;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f862 	bl	80011ca <_ZN9__gnu_cxx13new_allocatorISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEC1Ev>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f861 	bl	80011e0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEED1Ev>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>:
      map(initializer_list<value_type> __l,
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	1d38      	adds	r0, r7, #4
 8001132:	e880 0006 	stmia.w	r0, {r1, r2}
 8001136:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8001138:	68fc      	ldr	r4, [r7, #12]
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f858 	bl	80011f6 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEEC1ERKS5_>
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	461a      	mov	r2, r3
 800114c:	6839      	ldr	r1, [r7, #0]
 800114e:	4620      	mov	r0, r4
 8001150:	f000 f85f 	bl	8001212 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ffd9 	bl	8001110 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800115e:	68fc      	ldr	r4, [r7, #12]
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f873 	bl	800124e <_ZNKSt16initializer_listISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE5beginEv>
 8001168:	4605      	mov	r5, r0
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f87a 	bl	8001266 <_ZNKSt16initializer_listISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE3endEv>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4629      	mov	r1, r5
 8001178:	4620      	mov	r0, r4
 800117a:	f000 f889 	bl	8001290 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}

08001188 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f8a9 	bl	80012e8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEED1Ev>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f8c8 	bl	800133e <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f8a4 	bl	8001300 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffe4 	bl	8001188 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_ZN9__gnu_cxx13new_allocatorISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f8a7 	bl	8001356 <_ZN9__gnu_cxx13new_allocatorISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEC1ERKS7_>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 8001212:	b590      	push	{r4, r7, lr}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800121e:	68fc      	ldr	r4, [r7, #12]
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f8a1 	bl	800136e <_ZNSaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEEC1IS5_EERKSaIT_E>
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	461a      	mov	r2, r3
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	4620      	mov	r0, r4
 8001236:	f000 f8a7 	bl	8001388 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f852 	bl	80012e8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEED1Ev>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4618      	mov	r0, r3
 8001248:	371c      	adds	r7, #28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}

0800124e <_ZNKSt16initializer_listISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_ZNKSt16initializer_listISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001266:	b590      	push	{r4, r7, lr}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffed 	bl	800124e <_ZNKSt16initializer_listISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE5beginEv>
 8001274:	4604      	mov	r4, r0
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f8a3 	bl	80013c2 <_ZNKSt16initializer_listISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE4sizeEv>
 800127c:	4602      	mov	r2, r0
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4423      	add	r3, r4
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bd90      	pop	{r4, r7, pc}

08001290 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	68f9      	ldr	r1, [r7, #12]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f899 	bl	80013da <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d017      	beq.n	80012e0 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 f8a1 	bl	80013f8 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 80012b6:	4603      	mov	r3, r0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	f107 021c 	add.w	r2, r7, #28
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f8a8 	bl	800141a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	69b9      	ldr	r1, [r7, #24]
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 f8b1 	bl	800143a <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	330c      	adds	r3, #12
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	e7e3      	b.n	80012a8 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f8d5 	bl	80014a0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEED1Ev>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d012      	beq.n	8001336 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8001310:	6838      	ldr	r0, [r7, #0]
 8001312:	f000 f8d0 	bl	80014b6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001316:	4603      	mov	r3, r0
 8001318:	4619      	mov	r1, r3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fff0 	bl	8001300 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f000 f8d4 	bl	80014ce <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001326:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001328:	6839      	ldr	r1, [r7, #0]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f8db 	bl	80014e6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001334:	e7e9      	b.n	800130a <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
	}
    }
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_ZN9__gnu_cxx13new_allocatorISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_ZNSaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEEC1IS5_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8c5 	bl	8001508 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEEC1Ev>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f8c2 	bl	800151e <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 800139a:	4603      	mov	r3, r0
 800139c:	4619      	mov	r1, r3
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f000 f8c8 	bl	8001534 <_ZNSaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEEC1ERKS7_>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f8d1 	bl	8001550 <_ZNSt20_Rb_tree_key_compareISt4lessI16MemoryDescriptorEEC1ERKS2_>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3304      	adds	r3, #4
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fd86 	bl	8000ec4 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_ZNKSt16initializer_listISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE4sizeEv>:
      size() const noexcept { return _M_len; }
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	1d1a      	adds	r2, r3, #4
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f8ac 	bl	8001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
    template<typename _Arg, typename _NodeGen>
#else
    template<typename _NodeGen>
#endif
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800143a:	b5b0      	push	{r4, r5, r7, lr}
 800143c:	b08a      	sub	sp, #40	; 0x28
 800143e:	af02      	add	r7, sp, #8
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	603b      	str	r3, [r7, #0]
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f9bc 	bl	80017cc <_ZNKSt10_Select1stISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEclERKS5_>
 8001454:	4603      	mov	r3, r0
 8001456:	f107 0010 	add.w	r0, r7, #16
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	f000 f892 	bl	8001586 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>

      if (__res.second)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00f      	beq.n	8001488 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8001468:	693c      	ldr	r4, [r7, #16]
 800146a:	697d      	ldr	r5, [r7, #20]
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f9b9 	bl	80017e4 <_ZSt7forwardIRKSt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001472:	4602      	mov	r2, r0
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	462a      	mov	r2, r5
 800147c:	4621      	mov	r1, r4
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f9bb 	bl	80017fa <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 8001484:	4603      	mov	r3, r0
			  _GLIBCXX_FORWARD(_Arg, __v),
			  __node_gen);
 8001486:	e007      	b.n	8001498 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f869 	bl	8001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>
 8001496:	69fb      	ldr	r3, [r7, #28]
    }
 8001498:	4618      	mov	r0, r3
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bdb0      	pop	{r4, r5, r7, pc}

080014a0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80014f0:	6839      	ldr	r1, [r7, #0]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f9ca 	bl	800188c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f9db 	bl	80018b6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_ZNSaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800153e:	6839      	ldr	r1, [r7, #0]
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f9ca 	bl	80018da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEEC1ERKS9_>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_ZNSt20_Rb_tree_key_compareISt4lessI16MemoryDescriptorEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
      { }
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001586:	b590      	push	{r4, r7, lr}
 8001588:	b08d      	sub	sp, #52	; 0x34
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f9ab 	bl	80018f2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE13_M_const_castEv>
 800159c:	4603      	mov	r3, r0
 800159e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80015a0:	69bc      	ldr	r4, [r7, #24]
 80015a2:	68b8      	ldr	r0, [r7, #8]
 80015a4:	f000 f9b6 	bl	8001914 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80015a8:	4603      	mov	r3, r0
 80015aa:	429c      	cmp	r4, r3
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d030      	beq.n	800161a <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f000 f9b7 	bl	800192c <_ZNKSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 80015be:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 80015c4:	68bc      	ldr	r4, [r7, #8]
 80015c6:	68b8      	ldr	r0, [r7, #8]
 80015c8:	f000 f9bc 	bl	8001944 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f9c3 	bl	800195c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015d6:	4603      	mov	r3, r0
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	4620      	mov	r0, r4
 80015de:	f000 f9c9 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 80015ec:	2300      	movs	r3, #0
	  if (size() > 0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00c      	beq.n	800160c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	68b8      	ldr	r0, [r7, #8]
 80015f8:	f000 f9a4 	bl	8001944 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f9ca 	bl	800199e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800160a:	e0db      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f9d9 	bl	80019ca <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8001618:	e0d4      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800161a:	68bc      	ldr	r4, [r7, #8]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f99c 	bl	800195c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	6839      	ldr	r1, [r7, #0]
 800162a:	4620      	mov	r0, r4
 800162c:	f000 f9a2 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d057      	beq.n	80016e6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800163a:	69bc      	ldr	r4, [r7, #24]
 800163c:	68b8      	ldr	r0, [r7, #8]
 800163e:	f000 fa49 	bl	8001ad4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8001642:	4603      	mov	r3, r0
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	429c      	cmp	r4, r3
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00d      	beq.n	8001670 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f000 fa3d 	bl	8001ad4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 800165a:	4604      	mov	r4, r0
 800165c:	68b8      	ldr	r0, [r7, #8]
 800165e:	f000 fa39 	bl	8001ad4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	4621      	mov	r1, r4
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 fa3f 	bl	8001aec <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800166e:	e0a9      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001670:	68bc      	ldr	r4, [r7, #8]
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fa51 	bl	8001b1e <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEmmEv>
 800167c:	4603      	mov	r3, r0
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f96b 	bl	800195c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001686:	4603      	mov	r3, r0
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	4620      	mov	r0, r4
 800168e:	f000 f971 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01f      	beq.n	80016d8 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff0b 	bl	80014b6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bf0c      	ite	eq
 80016a6:	2301      	moveq	r3, #1
 80016a8:	2300      	movne	r3, #0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00a      	beq.n	80016c6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	f107 0214 	add.w	r2, r7, #20
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4619      	mov	r1, r3
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f96d 	bl	800199e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80016c4:	e07e      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80016c6:	f107 0218 	add.w	r2, r7, #24
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	4619      	mov	r1, r3
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fa0b 	bl	8001aec <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80016d6:	e075      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f973 	bl	80019ca <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80016e4:	e06e      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80016e6:	68bc      	ldr	r4, [r7, #8]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f936 	bl	800195c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80016f0:	4603      	mov	r3, r0
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4620      	mov	r0, r4
 80016f8:	f000 f93c 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d056      	beq.n	80017b0 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001706:	69bc      	ldr	r4, [r7, #24]
 8001708:	68b8      	ldr	r0, [r7, #8]
 800170a:	f000 f91b 	bl	8001944 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800170e:	4603      	mov	r3, r0
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	429c      	cmp	r4, r3
 8001714:	bf0c      	ite	eq
 8001716:	2301      	moveq	r3, #1
 8001718:	2300      	movne	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00c      	beq.n	800173a <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f000 f90d 	bl	8001944 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 800172a:	4602      	mov	r2, r0
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f933 	bl	800199e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001738:	e044      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800173a:	68bc      	ldr	r4, [r7, #8]
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4618      	mov	r0, r3
 8001742:	f000 f9fd 	bl	8001b40 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEppEv>
 8001746:	4603      	mov	r3, r0
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f906 	bl	800195c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	6839      	ldr	r1, [r7, #0]
 8001756:	4620      	mov	r0, r4
 8001758:	f000 f90c 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01f      	beq.n	80017a2 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fea6 	bl	80014b6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00a      	beq.n	8001790 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
 800177e:	f107 0218 	add.w	r2, r7, #24
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	4619      	mov	r1, r3
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f908 	bl	800199e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800178e:	e019      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8001790:	f107 0210 	add.w	r2, r7, #16
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 f9a6 	bl	8001aec <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80017a0:	e010      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f90e 	bl	80019ca <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80017ae:	e009      	b.n	80017c4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80017b8:	f107 0318 	add.w	r3, r7, #24
 80017bc:	4619      	mov	r1, r3
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f9cf 	bl	8001b62 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	3734      	adds	r7, #52	; 0x34
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}

080017cc <_ZNKSt10_Select1stISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEclERKS5_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_ZSt7forwardIRKSt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80017fa:	b5b0      	push	{r4, r5, r7, lr}
 80017fc:	b088      	sub	sp, #32
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d11a      	bne.n	8001844 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f880 	bl	8001914 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8001814:	4602      	mov	r2, r0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800181c:	68fc      	ldr	r4, [r7, #12]
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	6839      	ldr	r1, [r7, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ffd1 	bl	80017cc <_ZNKSt10_Select1stISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEclERKS5_>
 800182a:	4605      	mov	r5, r0
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f895 	bl	800195c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4629      	mov	r1, r5
 8001838:	4620      	mov	r0, r4
 800183a:	f000 f89b 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8001848:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800184a:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800184c:	6838      	ldr	r0, [r7, #0]
 800184e:	f7ff ffc9 	bl	80017e4 <_ZSt7forwardIRKSt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001858:	f000 f999 	bl	8001b8e <_ZNKSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 800185c:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001862:	7ff8      	ldrb	r0, [r7, #31]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	f013 fe18 	bl	801549c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	69b9      	ldr	r1, [r7, #24]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fe73 	bl	8001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>
 8001882:	697b      	ldr	r3, [r7, #20]
      }
 8001884:	4618      	mov	r0, r3
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bdb0      	pop	{r4, r5, r7, pc}

0800188c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f98d 	bl	8001bb6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800189c:	4604      	mov	r4, r0
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f000 f994 	bl	8001bcc <_ZNSt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE9_M_valptrEv>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4620      	mov	r0, r4
 80018aa:	f000 f99d 	bl	8001be8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE7destroyIS6_EEvRS8_PT_>
      }
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd90      	pop	{r4, r7, pc}

080018b6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f978 	bl	8001bb6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2201      	movs	r2, #1
 80018ca:	6839      	ldr	r1, [r7, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f998 	bl	8001c02 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE10deallocateERS8_PS7_j>
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEEC1ERKS9_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fe2f 	bl	8001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_ZNKSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3310      	adds	r3, #16
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f95b 	bl	8001c20 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800196a:	4603      	mov	r3, r0
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	bf34      	ite	cc
 800198c:	2301      	movcc	r3, #1
 800198e:	2300      	movcs	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f947 	bl	8001c46 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80019b8:	4603      	mov	r3, r0
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80019ca:	b590      	push	{r4, r7, lr}
 80019cc:	b08b      	sub	sp, #44	; 0x2c
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f7ff fcb1 	bl	800133e <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 80019dc:	4603      	mov	r3, r0
 80019de:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80019e0:	68b8      	ldr	r0, [r7, #8]
 80019e2:	f7ff ff97 	bl	8001914 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80019e6:	4603      	mov	r3, r0
 80019e8:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d020      	beq.n	8001a38 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80019fa:	68bc      	ldr	r4, [r7, #8]
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f90e 	bl	8001c20 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff ffb2 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fd54 	bl	80014ce <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001a26:	4603      	mov	r3, r0
 8001a28:	e004      	b.n	8001a34 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fd42 	bl	80014b6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a32:	4603      	mov	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001a36:	e7db      	b.n	80019f0 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	f107 0310 	add.w	r3, r7, #16
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fd91 	bl	8001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01d      	beq.n	8001a8a <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 f904 	bl	8001c5c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8001a54:	4603      	mov	r3, r0
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	f107 021c 	add.w	r2, r7, #28
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f90b 	bl	8001c7e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEES8_>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8001a6e:	f107 0214 	add.w	r2, r7, #20
 8001a72:	f107 0318 	add.w	r3, r7, #24
 8001a76:	4619      	mov	r1, r3
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 f914 	bl	8001ca6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK16MemoryDescriptorS_Im14MemoryDataTypeEEERS1_Lb1EEEOT_OT0_>
 8001a7e:	e025      	b.n	8001acc <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f84a 	bl	8001b1e <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001a8a:	68bc      	ldr	r4, [r7, #8]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff64 	bl	800195c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a94:	4603      	mov	r3, r0
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f7ff ff6a 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8001aa6:	f107 0214 	add.w	r2, r7, #20
 8001aaa:	f107 0318 	add.w	r3, r7, #24
 8001aae:	4619      	mov	r1, r3
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f8f8 	bl	8001ca6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK16MemoryDescriptorS_Im14MemoryDataTypeEEERS1_Lb1EEEOT_OT0_>
 8001ab6:	e009      	b.n	8001acc <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	f107 0220 	add.w	r2, r7, #32
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f84b 	bl	8001b62 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	372c      	adds	r7, #44	; 0x2c
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	330c      	adds	r3, #12
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001af8:	68b8      	ldr	r0, [r7, #8]
 8001afa:	f000 f8a4 	bl	8001c46 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001afe:	4603      	mov	r3, r0
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f89d 	bl	8001c46 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f013 fcb4 	bl	8015498 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8001b30:	4602      	mov	r2, r0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	601a      	str	r2, [r3, #0]
	return *this;
 8001b36:	687b      	ldr	r3, [r7, #4]
      }
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f013 fca1 	bl	8015494 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8001b52:	4602      	mov	r2, r0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	601a      	str	r2, [r3, #0]
	return *this;
 8001b58:	687b      	ldr	r3, [r7, #4]
      }
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8001b6e:	68b8      	ldr	r0, [r7, #8]
 8001b70:	f000 f869 	bl	8001c46 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001b74:	4603      	mov	r3, r0
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_ZNKSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 8001b8e:	b590      	push	{r4, r7, lr}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681c      	ldr	r4, [r3, #0]
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f7ff fe21 	bl	80017e4 <_ZSt7forwardIRKSt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f000 f896 	bl	8001cd8 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd90      	pop	{r4, r7, pc}

08001bb6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_ZNSt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE9_M_valptrEv>:
      _M_valptr()
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3310      	adds	r3, #16
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f894 	bl	8001d06 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEE6_M_ptrEv>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE7destroyIS6_EEvRS8_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001bf2:	6839      	ldr	r1, [r7, #0]
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f892 	bl	8001d1e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE7destroyIS7_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f88e 	bl	8001d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE10deallocateEPS8_j>
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f896 	bl	8001d5a <_ZNKSt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE9_M_valptrEv>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fdc8 	bl	80017cc <_ZNKSt10_Select1stISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEclERKS5_>
 8001c3c:	4603      	mov	r3, r0
      }
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fc7a 	bl	8001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK16MemoryDescriptorS_Im14MemoryDataTypeEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001cb2:	68b8      	ldr	r0, [r7, #8]
 8001cb4:	f000 f85f 	bl	8001d76 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ffc0 	bl	8001c46 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f852 	bl	8001d8c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8001ce8:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fd7a 	bl	80017e4 <_ZSt7forwardIRKSt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f859 	bl	8001dae <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
	}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f86d 	bl	8001dee <_ZN9__gnu_cxx16__aligned_membufISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEE7_M_addrEv>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE7destroyIS7_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	68b8      	ldr	r0, [r7, #8]
 8001d4e:	f013 fb35 	bl	80153bc <_ZdlPvj>
      }
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_ZNKSt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE9_M_valptrEv>:
      _M_valptr() const
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3310      	adds	r3, #16
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f84c 	bl	8001e04 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEE6_M_ptrEv>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff0e 	bl	8001bb6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f83c 	bl	8001e1c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE8allocateERS8_j>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001dae:	b5b0      	push	{r4, r5, r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	201c      	movs	r0, #28
 8001dc0:	f7ff f874 	bl	8000eac <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7ff fef6 	bl	8001bb6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	68b8      	ldr	r0, [r7, #8]
 8001dce:	f7ff fefd 	bl	8001bcc <_ZNSt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE9_M_valptrEv>
 8001dd2:	4605      	mov	r5, r0
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fd05 	bl	80017e4 <_ZSt7forwardIRKSt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4629      	mov	r1, r5
 8001de0:	4620      	mov	r0, r4
 8001de2:	f000 f82a 	bl	8001e3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdb0      	pop	{r4, r5, r7, pc}

08001dee <_ZN9__gnu_cxx16__aligned_membufISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEE7_M_addrEv>:
      _M_addr() noexcept
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f827 	bl	8001e60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEE7_M_addrEv>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001e26:	2200      	movs	r2, #0
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f823 	bl	8001e76 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE8allocateEjPKv>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fccc 	bl	80017e4 <_ZSt7forwardIRKSt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f830 	bl	8001eb8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE9constructIS7_JRKS7_EEEvPT_DpOT0_>
	}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEE7_M_addrEv>:
      _M_addr() const noexcept
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f830 	bl	8001ee8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE11_M_max_sizeEv>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf8c      	ite	hi
 8001e90:	2301      	movhi	r3, #1
 8001e92:	2300      	movls	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001e9a:	f013 fb5a 	bl	8015552 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f013 fa89 	bl	80153c0 <_Znwj>
 8001eae:	4603      	mov	r3, r0
      }
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE9constructIS7_JRKS7_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff fc8d 	bl	80017e4 <_ZSt7forwardIRKSt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	200c      	movs	r0, #12
 8001ed2:	f7fe ffeb 	bl	8000eac <_ZnwjPv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4622      	mov	r2, r4
 8001eda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001edc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}

08001ee8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	04924924 	.word	0x04924924

08001f04 <_Z41__static_initialization_and_destruction_0ii>:
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b092      	sub	sp, #72	; 0x48
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d129      	bne.n	8001f68 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d124      	bne.n	8001f68 <_Z41__static_initialization_and_destruction_0ii+0x64>
	PID_YAW_P,
	PID_YAW_I,
	PID_YAW_D
};

static std::map<MemoryDescriptor, std::pair<uint32_t,MemoryDataType>> memoryMapp =
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001f20:	f107 0414 	add.w	r4, r7, #20
 8001f24:	461d      	mov	r5, r3
 8001f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2e:	682b      	ldr	r3, [r5, #0]
 8001f30:	6023      	str	r3, [r4, #0]
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	2303      	movs	r3, #3
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f8d9 	bl	80010f8 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEEC1Ev>
 8001f46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	f107 020c 	add.w	r2, r7, #12
 8001f56:	ca06      	ldmia	r2, {r1, r2}
 8001f58:	480c      	ldr	r0, [pc, #48]	; (8001f8c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001f5a:	f7ff f8e5 	bl	8001128 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>
 8001f5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f8d4 	bl	8001110 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEED1Ev>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d107      	bne.n	8001f7e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d102      	bne.n	8001f7e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8001f78:	4804      	ldr	r0, [pc, #16]	; (8001f8c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001f7a:	f7fe ffc8 	bl	8000f0e <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEED1Ev>
 8001f7e:	bf00      	nop
 8001f80:	3740      	adds	r7, #64	; 0x40
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdb0      	pop	{r4, r5, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	08017770 	.word	0x08017770
 8001f8c:	20000094 	.word	0x20000094

08001f90 <_GLOBAL__sub_I__ZN30FlightControllorImplementation14getNvmInstanceEv>:
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7ff ffb3 	bl	8001f04 <_Z41__static_initialization_and_destruction_0ii>
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_GLOBAL__sub_D__ZN30FlightControllorImplementation14getNvmInstanceEv>:
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ffab 	bl	8001f04 <_Z41__static_initialization_and_destruction_0ii>
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZN11PID_ControlC1ERfS0_fff>:
	float &signal;
	float &reference;
	float error = 0;
	float last_signal = 0;
public:
	PID_Control(float &signal, float &reference,float Kp,float Ki,float Kd):
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6178      	str	r0, [r7, #20]
 8001fb8:	6139      	str	r1, [r7, #16]
 8001fba:	60fa      	str	r2, [r7, #12]
 8001fbc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fc0:	edc7 0a01 	vstr	s1, [r7, #4]
 8001fc4:	ed87 1a00 	vstr	s2, [r7]
		signal(signal),
		reference(reference),
		Kp(Kp),
		Ki(Ki),
		Kd(Kd)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	61da      	str	r2, [r3, #28]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	621a      	str	r2, [r3, #32]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
	{
		last_signal = signal;
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
	};
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	4618      	mov	r0, r3
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>:
	ADC_HandleTypeDef *adc_port;

	uint16_t msToTick(uint16_t ms);
	void toPercentage();
public:
	BatteryManagement(ADC_HandleTypeDef *adc_port,Buzzer *buzz,uint16_t frequency_ms):
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	807b      	strh	r3, [r7, #2]
		adc_port(adc_port),buzz(buzz)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f640 3222 	movw	r2, #2850	; 0xb22
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002048:	805a      	strh	r2, [r3, #2]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	811a      	strh	r2, [r3, #8]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	61da      	str	r2, [r3, #28]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	621a      	str	r2, [r3, #32]
	{
		frequency_tick = msToTick(frequency_ms);
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4619      	mov	r1, r3
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f003 fbcf 	bl	8005828 <_ZN17BatteryManagement8msToTickEt>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	811a      	strh	r2, [r3, #8]
	}
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_ZN6BuzzerC1Ev>:
#ifndef LIBS_BUZZER_LIB_BUZZER_HPP_
#define LIBS_BUZZER_LIB_BUZZER_HPP_

#include "stm32f4xx_hal.h"

class Buzzer
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2210      	movs	r2, #16
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <_ZN6BuzzerC1Ev+0x50>)
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	819a      	strh	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	81da      	strh	r2, [r3, #14]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	821a      	strh	r2, [r3, #16]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	825a      	strh	r2, [r3, #18]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	829a      	strh	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	759a      	strb	r2, [r3, #22]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40020000 	.word	0x40020000

080020f0 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_>:
	TaskHandle_t _faultsCheckHandler = NULL;
	TaskHandle_t _sensorsDataReadHandler = NULL;
	TaskHandle_t _dynamicsProcessHandler = NULL;
public:

	FlightControllorImplementation (
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
	  sonar (huart4,hdma_uart4_rx,255U),
	  battMgmt (hadc1,&buzz,1000U),
	  roll_pid(icm.getEulerYref(),remote_rx.target_roll,0,0,0),
	  pitch_pid(icm.getEulerXref(),remote_rx.target_pitch,0,0,0),
	  yaw_pid(icm.getEulerZref(),remote_rx.target_yaw,0,0,0),
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a3a      	ldr	r2, [r7, #32]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211a:	611a      	str	r2, [r3, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002120:	615a      	str	r2, [r3, #20]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002126:	619a      	str	r2, [r3, #24]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212c:	61da      	str	r2, [r3, #28]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002132:	621a      	str	r2, [r3, #32]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3328      	adds	r3, #40	; 0x28
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffaf 	bl	800209c <_ZN6BuzzerC1Ev>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3340      	adds	r3, #64	; 0x40
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f005 ffcf 	bl	80080e8 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	33b0      	adds	r3, #176	; 0xb0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fa1f 	bl	8004594 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3328      	adds	r3, #40	; 0x28
 8002160:	461a      	mov	r2, r3
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	f005 f954 	bl	8007410 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f004 f891 	bl	8006298 <_ZN4HC05C1EP20__UART_HandleTypeDef>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f503 7044 	add.w	r0, r3, #784	; 0x310
	  pmw (huart2, hdma_usart2_rx, 255U, icm),
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	23ff      	movs	r3, #255	; 0xff
 8002186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002188:	6a39      	ldr	r1, [r7, #32]
 800218a:	f006 fb11 	bl	80087b0 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688P>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3328      	adds	r3, #40	; 0x28
 8002198:	2201      	movs	r2, #1
 800219a:	9200      	str	r2, [sp, #0]
 800219c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800219e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a0:	f003 fc65 	bl	8005a6e <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80021aa:	23ff      	movs	r3, #255	; 0xff
 80021ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b0:	f006 f9ca 	bl	8008548 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f503 609e 	add.w	r0, r3, #1264	; 0x4f0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80021c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	f7ff ff31 	bl	800202c <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f203 5414 	addw	r4, r3, #1300	; 0x514
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f005 ff16 	bl	8008008 <_ZN9ICM42688P12getEulerYrefEv>
 80021dc:	4601      	mov	r1, r0
	  roll_pid(icm.getEulerYref(),remote_rx.target_roll,0,0,0),
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f203 4364 	addw	r3, r3, #1124	; 0x464
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80021e4:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8002280 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_+0x190>
 80021e8:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002280 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_+0x190>
 80021ec:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002280 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_+0x190>
 80021f0:	461a      	mov	r2, r3
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff fedc 	bl	8001fb0 <_ZN11PID_ControlC1ERfS0_fff>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f503 64a8 	add.w	r4, r3, #1344	; 0x540
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8002204:	4618      	mov	r0, r3
 8002206:	f005 fee3 	bl	8007fd0 <_ZN9ICM42688P12getEulerXrefEv>
 800220a:	4601      	mov	r1, r0
	  pitch_pid(icm.getEulerXref(),remote_rx.target_pitch,0,0,0),
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8002212:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8002280 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_+0x190>
 8002216:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8002280 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_+0x190>
 800221a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8002280 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_+0x190>
 800221e:	461a      	mov	r2, r3
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff fec5 	bl	8001fb0 <_ZN11PID_ControlC1ERfS0_fff>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8002232:	4618      	mov	r0, r3
 8002234:	f005 fef4 	bl	8008020 <_ZN9ICM42688P12getEulerZrefEv>
 8002238:	4601      	mov	r1, r0
	  yaw_pid(icm.getEulerZref(),remote_rx.target_yaw,0,0,0),
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f203 436c 	addw	r3, r3, #1132	; 0x46c
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 8002240:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8002280 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_+0x190>
 8002244:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002280 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_+0x190>
 8002248:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002280 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_+0x190>
 800224c:	461a      	mov	r2, r3
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff feae 	bl	8001fb0 <_ZN11PID_ControlC1ERfS0_fff>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
	{

	}
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
 800227e:	bf00      	nop
 8002280:	00000000 	.word	0x00000000

08002284 <_ZN30FlightControllorImplementation11getInstanceEv>:
		&hdma_usart2_rx,
		&hdma_usart3_rx,
		&hdma_uart4_rx);

FlightControllorImplementation *FlightControllorImplementation::getInstance()
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
	return globalflightController;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <_ZN30FlightControllorImplementation11getInstanceEv+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200000c4 	.word	0x200000c4

0800229c <_Z41__static_initialization_and_destruction_0ii>:
 800229c:	b5b0      	push	{r4, r5, r7, lr}
 800229e:	b096      	sub	sp, #88	; 0x58
 80022a0:	af06      	add	r7, sp, #24
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d143      	bne.n	8002334 <_Z41__static_initialization_and_destruction_0ii+0x98>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d13e      	bne.n	8002334 <_Z41__static_initialization_and_destruction_0ii+0x98>
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80022b8:	f107 0414 	add.w	r4, r7, #20
 80022bc:	461d      	mov	r5, r3
 80022be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c6:	682b      	ldr	r3, [r5, #0]
 80022c8:	6023      	str	r3, [r4, #0]
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	2303      	movs	r3, #3
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe ff0d 	bl	80010f8 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEEC1Ev>
 80022de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	f107 020c 	add.w	r2, r7, #12
 80022ee:	ca06      	ldmia	r2, {r1, r2}
 80022f0:	4819      	ldr	r0, [pc, #100]	; (8002358 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80022f2:	f7fe ff19 	bl	8001128 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>
 80022f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe ff08 	bl	8001110 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEED1Ev>
		&hdma_uart4_rx);
 8002300:	f44f 60b5 	mov.w	r0, #1448	; 0x5a8
 8002304:	f013 f85c 	bl	80153c0 <_Znwj>
 8002308:	4603      	mov	r3, r0
 800230a:	461c      	mov	r4, r3
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800230e:	9305      	str	r3, [sp, #20]
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002312:	9304      	str	r3, [sp, #16]
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002316:	9303      	str	r3, [sp, #12]
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800231a:	9302      	str	r3, [sp, #8]
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002328:	4914      	ldr	r1, [pc, #80]	; (800237c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800232a:	4620      	mov	r0, r4
 800232c:	f7ff fee0 	bl	80020f0 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_>
static FlightControllorImplementation *globalflightController = new FlightControllorImplementation(
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002332:	601c      	str	r4, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d107      	bne.n	800234a <_Z41__static_initialization_and_destruction_0ii+0xae>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002340:	4293      	cmp	r3, r2
 8002342:	d102      	bne.n	800234a <_Z41__static_initialization_and_destruction_0ii+0xae>
 8002344:	4804      	ldr	r0, [pc, #16]	; (8002358 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002346:	f7fe fde2 	bl	8000f0e <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEED1Ev>
}
 800234a:	bf00      	nop
 800234c:	3740      	adds	r7, #64	; 0x40
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
 8002352:	bf00      	nop
 8002354:	08017794 	.word	0x08017794
 8002358:	200000ac 	.word	0x200000ac
 800235c:	2000075c 	.word	0x2000075c
 8002360:	2000087c 	.word	0x2000087c
 8002364:	2000081c 	.word	0x2000081c
 8002368:	20000608 	.word	0x20000608
 800236c:	200006d4 	.word	0x200006d4
 8002370:	20000690 	.word	0x20000690
 8002374:	2000064c 	.word	0x2000064c
 8002378:	20000460 	.word	0x20000460
 800237c:	20000334 	.word	0x20000334
 8002380:	200000c4 	.word	0x200000c4

08002384 <_GLOBAL__sub_I__ZN30FlightControllorImplementation11getInstanceEv>:
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
 8002388:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800238c:	2001      	movs	r0, #1
 800238e:	f7ff ff85 	bl	800229c <_Z41__static_initialization_and_destruction_0ii>
 8002392:	bd80      	pop	{r7, pc}

08002394 <_GLOBAL__sub_D__ZN30FlightControllorImplementation11getInstanceEv>:
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
 8002398:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff ff7d 	bl	800229c <_Z41__static_initialization_and_destruction_0ii>
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80023b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <vApplicationGetIdleTaskMemory+0x30>)
 80023ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200000c8 	.word	0x200000c8
 80023d4:	2000011c 	.word	0x2000011c

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <_ZN12CallsCounter25incrementInterruptCounterEv>:
};

class CallsCounter
{
public:
	void incrementInterruptCounter()
 8002420:	b4b0      	push	{r4, r5, r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	{
		this->interruptCounter++;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	1c54      	adds	r4, r2, #1
 8002430:	f143 0500 	adc.w	r5, r3, #0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	e9c3 4500 	strd	r4, r5, [r3]
	}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bcb0      	pop	{r4, r5, r7}
 8002442:	4770      	bx	lr

08002444 <_ZN12CallsCounter20incrementTaskCounterEv>:

	void incrementTaskCounter()
 8002444:	b4b0      	push	{r4, r5, r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	{
		this->taskCounter++;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002452:	1c54      	adds	r4, r2, #1
 8002454:	f143 0500 	adc.w	r5, r3, #0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	e9c3 4502 	strd	r4, r5, [r3, #8]
	}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bcb0      	pop	{r4, r5, r7}
 8002466:	4770      	bx	lr

08002468 <_ZN7Timeout23incrementTimeoutCounterEv>:
	void resetTimeoutCounter()
	{
		timeout_counter=0;
	}

	void incrementTimeoutCounter()
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	{
		timeout_counter++;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	3301      	adds	r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	705a      	strb	r2, [r3, #1]

		if (timeout_counter>timeout_value)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	785a      	ldrb	r2, [r3, #1]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	789b      	ldrb	r3, [r3, #2]
 8002484:	429a      	cmp	r2, r3
 8002486:	d902      	bls.n	800248e <_ZN7Timeout23incrementTimeoutCounterEv+0x26>
			status = Status::Timeout;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
	}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <_Z19DynamicsProcessTaskPv>:
#define SRC_IMPLEMENTATION_TASKS_DYNAMICPROCESSTASK_HPP_

#include "FlightControllerImplementation.hpp"

void DynamicsProcessTask(void *pvParameters)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08e      	sub	sp, #56	; 0x38
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 80024a4:	f7ff feee 	bl	8002284 <_ZN30FlightControllorImplementation11getInstanceEv>
 80024a8:	6378      	str	r0, [r7, #52]	; 0x34

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30

	xLastWakeTime = xTaskGetTickCount();
 80024ae:	f011 fdab 	bl	8014008 <xTaskGetTickCount>
 80024b2:	4603      	mov	r3, r0
 80024b4:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 80024b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024b8:	f7fe fe02 	bl	80010c0 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 80024bc:	62f8      	str	r0, [r7, #44]	; 0x2c
		float rollPidOutput = flightControllerInstance->getRollPidInstance().out();
 80024be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024c0:	f7fe fd3e 	bl	8000f40 <_ZN30FlightControllorImplementation18getRollPidInstanceEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f006 fca6 	bl	8008e18 <_ZN11PID_Control3outEv>
 80024cc:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
		float pitchPidOutput = flightControllerInstance->getPitchPidInstance().out();
 80024d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024d2:	f7fe fd42 	bl	8000f5a <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4618      	mov	r0, r3
 80024da:	f006 fc9d 	bl	8008e18 <_ZN11PID_Control3outEv>
 80024de:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		float yawPidOutput = flightControllerInstance->getYawPidInstance().out();
 80024e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024e4:	f7fe fd46 	bl	8000f74 <_ZN30FlightControllorImplementation17getYawPidInstanceEv>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f006 fc94 	bl	8008e18 <_ZN11PID_Control3outEv>
 80024f0:	ed87 0a08 	vstr	s0, [r7, #32]

		//timCounter++;

		if (currentFaultsStatus == FaultsStatus::OKAY)
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 80b8 	bne.w	800266c <_Z19DynamicsProcessTaskPv+0x1d0>
		{

			float CCR1_value = 3000 + flightControllerInstance->getFrSkyRXinstance().throttle + rollPidOutput + pitchPidOutput - yawPidOutput;
 80024fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024fe:	f7fe fd91 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002502:	4603      	mov	r3, r0
 8002504:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002508:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800267c <_Z19DynamicsProcessTaskPv+0x1e0>
 800250c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002510:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002518:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800251c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002520:	edd7 7a08 	vldr	s15, [r7, #32]
 8002524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002528:	edc7 7a07 	vstr	s15, [r7, #28]
			float CCR2_value = 3000 + flightControllerInstance->getFrSkyRXinstance().throttle + rollPidOutput - pitchPidOutput + yawPidOutput;
 800252c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800252e:	f7fe fd79 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002532:	4603      	mov	r3, r0
 8002534:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002538:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800267c <_Z19DynamicsProcessTaskPv+0x1e0>
 800253c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002540:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002548:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800254c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002550:	ed97 7a08 	vldr	s14, [r7, #32]
 8002554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002558:	edc7 7a06 	vstr	s15, [r7, #24]
			float CCR3_value = 3000 + flightControllerInstance->getFrSkyRXinstance().throttle - rollPidOutput + pitchPidOutput + yawPidOutput;
 800255c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800255e:	f7fe fd61 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002562:	4603      	mov	r3, r0
 8002564:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002568:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800267c <_Z19DynamicsProcessTaskPv+0x1e0>
 800256c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002570:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002574:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002578:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	ed97 7a08 	vldr	s14, [r7, #32]
 8002584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002588:	edc7 7a05 	vstr	s15, [r7, #20]
			float CCR4_value = 3000 + flightControllerInstance->getFrSkyRXinstance().throttle - rollPidOutput - pitchPidOutput - yawPidOutput;
 800258c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800258e:	f7fe fd49 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002592:	4603      	mov	r3, r0
 8002594:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002598:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800267c <_Z19DynamicsProcessTaskPv+0x1e0>
 800259c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80025a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80025b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b8:	edc7 7a04 	vstr	s15, [r7, #16]

			if (CCR1_value<3300)
 80025bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002680 <_Z19DynamicsProcessTaskPv+0x1e4>
 80025c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	d504      	bpl.n	80025d8 <_Z19DynamicsProcessTaskPv+0x13c>
				TIM3 -> CCR1 = 3300;
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <_Z19DynamicsProcessTaskPv+0x1e8>)
 80025d0:	f640 42e4 	movw	r2, #3300	; 0xce4
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
 80025d6:	e007      	b.n	80025e8 <_Z19DynamicsProcessTaskPv+0x14c>
			else
				TIM3 -> CCR1 = CCR1_value;
 80025d8:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <_Z19DynamicsProcessTaskPv+0x1e8>)
 80025da:	edd7 7a07 	vldr	s15, [r7, #28]
 80025de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e2:	ee17 2a90 	vmov	r2, s15
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34

			if (CCR2_value<3300)
 80025e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ec:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002680 <_Z19DynamicsProcessTaskPv+0x1e4>
 80025f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	d504      	bpl.n	8002604 <_Z19DynamicsProcessTaskPv+0x168>
				TIM3 -> CCR2 = 3300;
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <_Z19DynamicsProcessTaskPv+0x1e8>)
 80025fc:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002600:	639a      	str	r2, [r3, #56]	; 0x38
 8002602:	e007      	b.n	8002614 <_Z19DynamicsProcessTaskPv+0x178>
			else
				TIM3 -> CCR2 = CCR2_value;
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <_Z19DynamicsProcessTaskPv+0x1e8>)
 8002606:	edd7 7a06 	vldr	s15, [r7, #24]
 800260a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260e:	ee17 2a90 	vmov	r2, s15
 8002612:	639a      	str	r2, [r3, #56]	; 0x38

			if (CCR3_value<3300)
 8002614:	edd7 7a05 	vldr	s15, [r7, #20]
 8002618:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002680 <_Z19DynamicsProcessTaskPv+0x1e4>
 800261c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	d504      	bpl.n	8002630 <_Z19DynamicsProcessTaskPv+0x194>
				TIM3 -> CCR3 = 3300;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <_Z19DynamicsProcessTaskPv+0x1e8>)
 8002628:	f640 42e4 	movw	r2, #3300	; 0xce4
 800262c:	63da      	str	r2, [r3, #60]	; 0x3c
 800262e:	e007      	b.n	8002640 <_Z19DynamicsProcessTaskPv+0x1a4>
			else
				TIM3 -> CCR3 = CCR3_value;
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <_Z19DynamicsProcessTaskPv+0x1e8>)
 8002632:	edd7 7a05 	vldr	s15, [r7, #20]
 8002636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263a:	ee17 2a90 	vmov	r2, s15
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c

			if (CCR4_value<3300)
 8002640:	edd7 7a04 	vldr	s15, [r7, #16]
 8002644:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002680 <_Z19DynamicsProcessTaskPv+0x1e4>
 8002648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	d504      	bpl.n	800265c <_Z19DynamicsProcessTaskPv+0x1c0>
				TIM3 -> CCR4 = 3300;
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <_Z19DynamicsProcessTaskPv+0x1e8>)
 8002654:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
 800265a:	e007      	b.n	800266c <_Z19DynamicsProcessTaskPv+0x1d0>
			else
				TIM3 -> CCR4 = CCR4_value;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <_Z19DynamicsProcessTaskPv+0x1e8>)
 800265e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002666:	ee17 2a90 	vmov	r2, s15
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
		{

		}


		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f011 fb40 	bl	8013cf8 <vTaskDelayUntil>
	}
 8002678:	e71d      	b.n	80024b6 <_Z19DynamicsProcessTaskPv+0x1a>
 800267a:	bf00      	nop
 800267c:	453b8000 	.word	0x453b8000
 8002680:	454e4000 	.word	0x454e4000
 8002684:	40000400 	.word	0x40000400

08002688 <_Z15FaultsCheckTaskPv>:
#define SRC_IMPLEMENTATION_TASKS_FAULTSCHECKTASK_HPP_

#include "FlightControllerImplementation.hpp"

void FaultsCheckTask(void *pvParameters)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002690:	f7ff fdf8 	bl	8002284 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002694:	6178      	str	r0, [r7, #20]

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1;
 8002696:	2301      	movs	r3, #1
 8002698:	613b      	str	r3, [r7, #16]

	xLastWakeTime = xTaskGetTickCount();
 800269a:	f011 fcb5 	bl	8014008 <xTaskGetTickCount>
 800269e:	4603      	mov	r3, r0
 80026a0:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		flightControllerInstance->getPMW3901UYinstance().incrementTimeoutCounter();
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7fe fcb1 	bl	800100a <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 80026a8:	4603      	mov	r3, r0
 80026aa:	3336      	adds	r3, #54	; 0x36
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fedb 	bl	8002468 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getFrSkyRXinstance().incrementTimeoutCounter();
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7fe fcb6 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fed4 	bl	8002468 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getMB1043instance().incrementTimeoutCounter();
 80026c0:	6978      	ldr	r0, [r7, #20]
 80026c2:	f7fe fcbc 	bl	800103e <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 80026c6:	4603      	mov	r3, r0
 80026c8:	3336      	adds	r3, #54	; 0x36
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fecc 	bl	8002468 <_ZN7Timeout23incrementTimeoutCounterEv>

		flightControllerInstance->getBuzzerinstance().run();
 80026d0:	6978      	ldr	r0, [r7, #20]
 80026d2:	f7fe fc68 	bl	8000fa6 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 f91a 	bl	8005912 <_ZN6Buzzer3runEv>
		flightControllerInstance->getBatteryManagementinstance().run();
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7fe fcba 	bl	8001058 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f002 ffc8 	bl	800567c <_ZN17BatteryManagement3runEv>

		if (flightControllerInstance->getFrSkyRXinstance().getCurrentState() == FrSkyRXState::READY)
 80026ec:	6978      	ldr	r0, [r7, #20]
 80026ee:	f7fe fc99 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fb79 	bl	8005dec <_ZNK7FrSkyRX15getCurrentStateEv>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <_Z15FaultsCheckTaskPv+0x8a>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::OKAY);
 800270a:	2100      	movs	r1, #0
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f7fe fce4 	bl	80010da <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	2101      	movs	r1, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f011 faed 	bl	8013cf8 <vTaskDelayUntil>
		flightControllerInstance->getPMW3901UYinstance().incrementTimeoutCounter();
 800271e:	e7c0      	b.n	80026a2 <_Z15FaultsCheckTaskPv+0x1a>

08002720 <_Z19sensorsDataReadTaskPv>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;

void sensorsDataReadTask(void *pvParameters)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002728:	f7ff fdac 	bl	8002284 <_ZN30FlightControllorImplementation11getInstanceEv>
 800272c:	6178      	str	r0, [r7, #20]

	HAL_TIM_Base_Start_IT(&htim4);
 800272e:	4893      	ldr	r0, [pc, #588]	; (800297c <_Z19sensorsDataReadTaskPv+0x25c>)
 8002730:	f00c f812 	bl	800e758 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002734:	2200      	movs	r2, #0
 8002736:	2105      	movs	r1, #5
 8002738:	2008      	movs	r0, #8
 800273a:	f007 fe37 	bl	800a3ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800273e:	2008      	movs	r0, #8
 8002740:	f007 fe50 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2105      	movs	r1, #5
 8002748:	200a      	movs	r0, #10
 800274a:	f007 fe2f 	bl	800a3ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800274e:	200a      	movs	r0, #10
 8002750:	f007 fe48 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2105      	movs	r1, #5
 8002758:	2017      	movs	r0, #23
 800275a:	f007 fe27 	bl	800a3ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800275e:	2017      	movs	r0, #23
 8002760:	f007 fe40 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
	NVIC_SetPriorityGrouping(0);
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff fe37 	bl	80023d8 <__NVIC_SetPriorityGrouping>

	bool startup;
	if(!flightControllerInstance->getLIS3MDLTRinstance().defaultInit())
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7fe fc0f 	bl	8000f8e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 8002770:	4603      	mov	r3, r0
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fe24 	bl	80083c0 <_ZN9LIS3MDLTR11defaultInitEv>
 8002778:	4603      	mov	r3, r0
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <_Z19sensorsDataReadTaskPv+0x68>
	  startup = false;
 8002784:	2300      	movs	r3, #0
 8002786:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getLIS3MDLTRinstance().update();
 8002788:	6978      	ldr	r0, [r7, #20]
 800278a:	f7fe fc00 	bl	8000f8e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 800278e:	4603      	mov	r3, r0
 8002790:	4618      	mov	r0, r3
 8002792:	f005 fcdf 	bl	8008154 <_ZN9LIS3MDLTR6updateEv>

	if (!flightControllerInstance->getICM42688Pinstance().defaultInit())
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7fe fc1d 	bl	8000fd6 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 800279c:	4603      	mov	r3, r0
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 fef8 	bl	8007594 <_ZN9ICM42688P11defaultInitEv>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f083 0301 	eor.w	r3, r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <_Z19sensorsDataReadTaskPv+0x94>
	  startup = false;
 80027b0:	2300      	movs	r3, #0
 80027b2:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getICM42688Pinstance().update();
 80027b4:	6978      	ldr	r0, [r7, #20]
 80027b6:	f7fe fc0e 	bl	8000fd6 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 f943 	bl	8007a48 <_ZN9ICM42688P6updateEv>

	if (!flightControllerInstance->getBMP390instance().defaultInit())
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7fe fbfb 	bl	8000fbe <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 ff38 	bl	8004640 <_ZN6BMP39011defaultInitEv>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f083 0301 	eor.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <_Z19sensorsDataReadTaskPv+0xc0>
	  startup = false;
 80027dc:	2300      	movs	r3, #0
 80027de:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getBMP390instance().update();
 80027e0:	6978      	ldr	r0, [r7, #20]
 80027e2:	f7fe fbec 	bl	8000fbe <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 ffe4 	bl	80047b6 <_ZN6BMP3906updateEv>

	flightControllerInstance->getFrSkyRXinstance().begin();
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7fe fc18 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 f96f 	bl	8005ada <_ZN7FrSkyRX5beginEv>
	flightControllerInstance->getMB1043instance().begin();
 80027fc:	6978      	ldr	r0, [r7, #20]
 80027fe:	f7fe fc1e 	bl	800103e <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 8002802:	4603      	mov	r3, r0
 8002804:	4618      	mov	r0, r3
 8002806:	f005 fed7 	bl	80085b8 <_ZN6MB10435beginEv>
	flightControllerInstance->getPMW3901UYinstance().begin();
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7fe fbfd 	bl	800100a <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8002810:	4603      	mov	r3, r0
 8002812:	4618      	mov	r0, r3
 8002814:	f006 f814 	bl	8008840 <_ZN9PMW3901UY5beginEv>

	uint32_t currentSensor = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
	xTaskCreate(DynamicsProcessTask,"DynamicsProcessTask",256,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getDynamicsProcessHandlerPtr());
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f7fe fc42 	bl	80010a6 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>
 8002822:	4603      	mov	r3, r0
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	2302      	movs	r3, #2
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2300      	movs	r3, #0
 800282c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002830:	4953      	ldr	r1, [pc, #332]	; (8002980 <_Z19sensorsDataReadTaskPv+0x260>)
 8002832:	4854      	ldr	r0, [pc, #336]	; (8002984 <_Z19sensorsDataReadTaskPv+0x264>)
 8002834:	f011 f92a 	bl	8013a8c <xTaskCreate>
	xTaskCreate(FaultsCheckTask,"FaultsCheckTask",256,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getFaultsCheckHandlerPtr());
 8002838:	6978      	ldr	r0, [r7, #20]
 800283a:	f7fe fc1a 	bl	8001072 <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>
 800283e:	4603      	mov	r3, r0
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	2302      	movs	r3, #2
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2300      	movs	r3, #0
 8002848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284c:	494e      	ldr	r1, [pc, #312]	; (8002988 <_Z19sensorsDataReadTaskPv+0x268>)
 800284e:	484f      	ldr	r0, [pc, #316]	; (800298c <_Z19sensorsDataReadTaskPv+0x26c>)
 8002850:	f011 f91c 	bl	8013a8c <xTaskCreate>

	while (1)
	{
		if (xTaskNotifyWait(0x00, 0xFFFFFFFFUL, &currentSensor, portMAX_DELAY) == pdTRUE)
 8002854:	f107 020c 	add.w	r2, r7, #12
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	2000      	movs	r0, #0
 8002862:	f011 fdcb 	bl	80143fc <xTaskNotifyWait>
 8002866:	4603      	mov	r3, r0
 8002868:	2b01      	cmp	r3, #1
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ee      	beq.n	8002854 <_Z19sensorsDataReadTaskPv+0x134>
		{
			if (currentSensor & EnumSensorsInterrupt::ICM42688P_t)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00e      	beq.n	800289e <_Z19sensorsDataReadTaskPv+0x17e>
			{
				flightControllerInstance->getICM42688Pinstance().update();
 8002880:	6978      	ldr	r0, [r7, #20]
 8002882:	f7fe fba8 	bl	8000fd6 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 8002886:	4603      	mov	r3, r0
 8002888:	4618      	mov	r0, r3
 800288a:	f005 f8dd 	bl	8007a48 <_ZN9ICM42688P6updateEv>
				flightControllerInstance->getICM42688Pinstance().incrementTaskCounter();
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7fe fba1 	bl	8000fd6 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 8002894:	4603      	mov	r3, r0
 8002896:	3340      	adds	r3, #64	; 0x40
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fdd3 	bl	8002444 <_ZN12CallsCounter20incrementTaskCounterEv>
				if (testt==duplicates)
					duplicatesCounter++;
				duplicates = testt;*/
			}

			if (currentSensor & EnumSensorsInterrupt::BMP390_t)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <_Z19sensorsDataReadTaskPv+0x1a6>
			{
				flightControllerInstance->getBMP390instance().update();
 80028a8:	6978      	ldr	r0, [r7, #20]
 80028aa:	f7fe fb88 	bl	8000fbe <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 ff80 	bl	80047b6 <_ZN6BMP3906updateEv>
				flightControllerInstance->getBMP390instance().incrementTaskCounter();
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7fe fb81 	bl	8000fbe <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80028bc:	4603      	mov	r3, r0
 80028be:	3340      	adds	r3, #64	; 0x40
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fdbf 	bl	8002444 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::LIS3MDLTR_t)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <_Z19sensorsDataReadTaskPv+0x1ce>
			{
				flightControllerInstance->getLIS3MDLTRinstance().update();
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	f7fe fb5c 	bl	8000f8e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4618      	mov	r0, r3
 80028da:	f005 fc3b 	bl	8008154 <_ZN9LIS3MDLTR6updateEv>
				flightControllerInstance->getLIS3MDLTRinstance().incrementTaskCounter();
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7fe fb55 	bl	8000f8e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80028e4:	4603      	mov	r3, r0
 80028e6:	3340      	adds	r3, #64	; 0x40
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fdab 	bl	8002444 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::PMW_t)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d011      	beq.n	800291c <_Z19sensorsDataReadTaskPv+0x1fc>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart2);
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <_Z19sensorsDataReadTaskPv+0x270>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
				flightControllerInstance->getPMW3901UYinstance().update();
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7fe fb83 	bl	800100a <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8002904:	4603      	mov	r3, r0
 8002906:	4618      	mov	r0, r3
 8002908:	f005 ffaa 	bl	8008860 <_ZN9PMW3901UY6updateEv>
				flightControllerInstance->getPMW3901UYinstance().incrementTaskCounter();
 800290c:	6978      	ldr	r0, [r7, #20]
 800290e:	f7fe fb7c 	bl	800100a <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8002912:	4603      	mov	r3, r0
 8002914:	3340      	adds	r3, #64	; 0x40
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fd94 	bl	8002444 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::REMOTERX_t)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <_Z19sensorsDataReadTaskPv+0x22a>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart3);
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <_Z19sensorsDataReadTaskPv+0x274>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
				flightControllerInstance->getFrSkyRXinstance().update();
 800292c:	6978      	ldr	r0, [r7, #20]
 800292e:	f7fe fb79 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002932:	4603      	mov	r3, r0
 8002934:	4618      	mov	r0, r3
 8002936:	f003 f8e0 	bl	8005afa <_ZN7FrSkyRX6updateEv>
				flightControllerInstance->getFrSkyRXinstance().incrementTaskCounter();
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7fe fb72 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002940:	4603      	mov	r3, r0
 8002942:	3308      	adds	r3, #8
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd7d 	bl	8002444 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::SONAR_t)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	f43f af7f 	beq.w	8002854 <_Z19sensorsDataReadTaskPv+0x134>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart4);
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <_Z19sensorsDataReadTaskPv+0x278>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getMB1043instance().update();
 800295c:	6978      	ldr	r0, [r7, #20]
 800295e:	f7fe fb6e 	bl	800103e <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 8002962:	4603      	mov	r3, r0
 8002964:	4618      	mov	r0, r3
 8002966:	f005 fe37 	bl	80085d8 <_ZN6MB10436updateEv>
			   flightControllerInstance->getMB1043instance().incrementTaskCounter();
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7fe fb67 	bl	800103e <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 8002970:	4603      	mov	r3, r0
 8002972:	3340      	adds	r3, #64	; 0x40
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fd65 	bl	8002444 <_ZN12CallsCounter20incrementTaskCounterEv>
		if (xTaskNotifyWait(0x00, 0xFFFFFFFFUL, &currentSensor, portMAX_DELAY) == pdTRUE)
 800297a:	e76b      	b.n	8002854 <_Z19sensorsDataReadTaskPv+0x134>
 800297c:	200005c0 	.word	0x200005c0
 8002980:	080177b8 	.word	0x080177b8
 8002984:	0800249d 	.word	0x0800249d
 8002988:	080177cc 	.word	0x080177cc
 800298c:	08002689 	.word	0x08002689
 8002990:	20000690 	.word	0x20000690
 8002994:	200006d4 	.word	0x200006d4
 8002998:	20000608 	.word	0x20000608

0800299c <HAL_UART_TxCpltCallback>:

#include "stm32f4xx_hal.h"
#include "FlightControllerImplementation.hpp"

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 80029a4:	f7ff fc6e 	bl	8002284 <_ZN30FlightControllorImplementation11getInstanceEv>
 80029a8:	60f8      	str	r0, [r7, #12]
    if (huart->Instance == USART1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_UART_TxCpltCallback+0x30>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d106      	bne.n	80029c2 <HAL_UART_TxCpltCallback+0x26>
    {
    	//tick1++;

    	flightControllerInstance->getHC05instance().printfSensorsValues();
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7fe fb1b 	bl	8000ff0 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 fcb1 	bl	8006324 <_ZN4HC0519printfSensorsValuesEv>
    }
}
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40011000 	.word	0x40011000

080029d0 <HAL_TIM_PeriodElapsedCallback>:

int timCounter2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029e2:	f006 ffd5 	bl	8009990 <HAL_IncTick>

  if (htim->Instance == TIM4)
  {
	  //timCounter2++;
  }
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000

080029f4 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002a02:	f7ff fc3f 	bl	8002284 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002a06:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 8002a08:	6978      	ldr	r0, [r7, #20]
 8002a0a:	f7fe fb3f 	bl	800108c <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 8002a0e:	6138      	str	r0, [r7, #16]

	switch (GPIO_Pin)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a16:	d024      	beq.n	8002a62 <HAL_GPIO_EXTI_Callback+0x6e>
 8002a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1c:	dc60      	bgt.n	8002ae0 <HAL_GPIO_EXTI_Callback+0xec>
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d040      	beq.n	8002aa4 <HAL_GPIO_EXTI_Callback+0xb0>
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d15c      	bne.n	8002ae0 <HAL_GPIO_EXTI_Callback+0xec>
	{
	case (GPIO_PIN_4):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::ICM42688P_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2300      	movs	r3, #0
 8002a32:	2201      	movs	r2, #1
 8002a34:	2101      	movs	r1, #1
 8002a36:	f011 fd3b 	bl	80144b0 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <HAL_GPIO_EXTI_Callback+0x5c>
 8002a40:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getICM42688Pinstance().incrementInterruptCounter();
 8002a50:	6978      	ldr	r0, [r7, #20]
 8002a52:	f7fe fac0 	bl	8000fd6 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 8002a56:	4603      	mov	r3, r0
 8002a58:	3340      	adds	r3, #64	; 0x40
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fce0 	bl	8002420 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 8002a60:	e03e      	b.n	8002ae0 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_8):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::BMP390_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	f107 030c 	add.w	r3, r7, #12
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2102      	movs	r1, #2
 8002a72:	f011 fd1d 	bl	80144b0 <xTaskGenericNotifyFromISR>
		if (pxHigherPriorityTaskWoken)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_GPIO_EXTI_Callback+0x9e>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_GPIO_EXTI_Callback+0x9e>
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getBMP390instance().incrementInterruptCounter();
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7fe fa93 	bl	8000fbe <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	3340      	adds	r3, #64	; 0x40
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fcbf 	bl	8002420 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 8002aa2:	e01d      	b.n	8002ae0 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_2):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::LIS3MDLTR_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	2104      	movs	r1, #4
 8002ab4:	f011 fcfc 	bl	80144b0 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_GPIO_EXTI_Callback+0xda>
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getLIS3MDLTRinstance().incrementInterruptCounter();
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7fe fa5d 	bl	8000f8e <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	3340      	adds	r3, #64	; 0x40
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fca1 	bl	8002420 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 8002ade:	bf00      	nop
	}
}
 8002ae0:	bf00      	nop
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002af8:	f7ff fbc4 	bl	8002284 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002afc:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f7fe fac4 	bl	800108c <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 8002b04:	6138      	str	r0, [r7, #16]

	if (huart->Instance == USART2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a35      	ldr	r2, [pc, #212]	; (8002be0 <HAL_UART_RxCpltCallback+0xf4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d11d      	bne.n	8002b4c <HAL_UART_RxCpltCallback+0x60>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::PMW_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2108      	movs	r1, #8
 8002b20:	f011 fcc6 	bl	80144b0 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_UART_RxCpltCallback+0x4e>
 8002b2a:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_UART_RxCpltCallback+0xf8>)
 8002b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getPMW3901UYinstance().incrementInterruptCounter();
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7fe fa65 	bl	800100a <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	3340      	adds	r3, #64	; 0x40
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fc6b 	bl	8002420 <_ZN12CallsCounter25incrementInterruptCounterEv>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
		flightControllerInstance->getMB1043instance().incrementInterruptCounter();
	}
}
 8002b4a:	e044      	b.n	8002bd6 <HAL_UART_RxCpltCallback+0xea>
	} else if (huart->Instance == USART3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <HAL_UART_RxCpltCallback+0xfc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d11d      	bne.n	8002b92 <HAL_UART_RxCpltCallback+0xa6>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::REMOTERX_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2300      	movs	r3, #0
 8002b62:	2201      	movs	r2, #1
 8002b64:	2110      	movs	r1, #16
 8002b66:	f011 fca3 	bl	80144b0 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_UART_RxCpltCallback+0x94>
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HAL_UART_RxCpltCallback+0xf8>)
 8002b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getFrSkyRXinstance().incrementInterruptCounter();
 8002b80:	6978      	ldr	r0, [r7, #20]
 8002b82:	f7fe fa4f 	bl	8001024 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002b86:	4603      	mov	r3, r0
 8002b88:	3308      	adds	r3, #8
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fc48 	bl	8002420 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 8002b90:	e021      	b.n	8002bd6 <HAL_UART_RxCpltCallback+0xea>
	} else if (huart->Instance == UART4)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a15      	ldr	r2, [pc, #84]	; (8002bec <HAL_UART_RxCpltCallback+0x100>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d11c      	bne.n	8002bd6 <HAL_UART_RxCpltCallback+0xea>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2120      	movs	r1, #32
 8002bac:	f011 fc80 	bl	80144b0 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_UART_RxCpltCallback+0xda>
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_UART_RxCpltCallback+0xf8>)
 8002bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getMB1043instance().incrementInterruptCounter();
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7fe fa39 	bl	800103e <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	3340      	adds	r3, #64	; 0x40
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fc25 	bl	8002420 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40004400 	.word	0x40004400
 8002be4:	e000ed04 	.word	0xe000ed04
 8002be8:	40004800 	.word	0x40004800
 8002bec:	40004c00 	.word	0x40004c00

08002bf0 <main>:
static void MX_USART6_UART_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM3_Init();

int main(void)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af02      	add	r7, sp, #8
  HAL_Init();
 8002bf6:	f006 fea9 	bl	800994c <HAL_Init>
  SystemClock_Config();
 8002bfa:	f000 f88f 	bl	8002d1c <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 8002bfe:	f000 fc3f 	bl	8003480 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002c02:	f000 fbd7 	bl	80033b4 <_ZL11MX_DMA_Initv>
  MX_SPI2_Init();
 8002c06:	f000 f993 	bl	8002f30 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 8002c0a:	f000 fb17 	bl	800323c <_ZL19MX_USART1_UART_Initv>
  MX_SDIO_SD_Init();
 8002c0e:	f000 f955 	bl	8002ebc <_ZL15MX_SDIO_SD_Initv>
  MX_USART3_UART_Init();
 8002c12:	f000 fb6f 	bl	80032f4 <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 8002c16:	f000 f8f5 	bl	8002e04 <_ZL12MX_ADC1_Initv>
  MX_UART4_Init();
 8002c1a:	f000 fae1 	bl	80031e0 <_ZL13MX_UART4_Initv>
  MX_USART2_UART_Init();
 8002c1e:	f000 fb3b 	bl	8003298 <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 8002c22:	f000 fb99 	bl	8003358 <_ZL19MX_USART6_UART_Initv>
  MX_TIM4_Init();
 8002c26:	f000 fa7f 	bl	8003128 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8002c2a:	f000 f9bd 	bl	8002fa8 <_ZL12MX_TIM3_Initv>

  FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002c2e:	f7ff fb29 	bl	8002284 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002c32:	6178      	str	r0, [r7, #20]
  nvm nvmInstance = flightControllerInstance->getNvmInstance();
 8002c34:	6978      	ldr	r0, [r7, #20]
 8002c36:	f7fe f977 	bl	8000f28 <_ZN30FlightControllorImplementation14getNvmInstanceEv>
  float RxVal;
  float RxVal1;
  int val = 32001;
 8002c3a:	f647 5301 	movw	r3, #32001	; 0x7d01
 8002c3e:	613b      	str	r3, [r7, #16]
  float val1 = 5.1;
 8002c40:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <main+0x114>)
 8002c42:	60fb      	str	r3, [r7, #12]

  nvmInstance.massEraseSector(0x080E0000);
 8002c44:	1d3b      	adds	r3, r7, #4
 8002c46:	4930      	ldr	r1, [pc, #192]	; (8002d08 <main+0x118>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f006 faa3 	bl	8009194 <_ZN3nvm15massEraseSectorEm>
  nvmInstance.write(MemoryDescriptor::PID_ROLL_P, val);
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f006 fa31 	bl	80090bc <_ZN3nvm5writeE16MemoryDescriptori>
  RxVal = nvmInstance.Flash_Read_NUM(0x080E0000);
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	492a      	ldr	r1, [pc, #168]	; (8002d08 <main+0x118>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f006 fa0f 	bl	8009082 <_ZN3nvm14Flash_Read_NUMEm>
 8002c64:	ed87 0a02 	vstr	s0, [r7, #8]

  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getBMP390instance());
 8002c68:	6978      	ldr	r0, [r7, #20]
 8002c6a:	f7fe f9c1 	bl	8000ff0 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002c6e:	4604      	mov	r4, r0
 8002c70:	6978      	ldr	r0, [r7, #20]
 8002c72:	f7fe f9a4 	bl	8000fbe <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <main+0x90>
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	e000      	b.n	8002c82 <main+0x92>
 8002c80:	2300      	movs	r3, #0
 8002c82:	4619      	mov	r1, r3
 8002c84:	4620      	mov	r0, r4
 8002c86:	f003 fb3d 	bl	8006304 <_ZN4HC059addSensorEP15PrintableSensor>
  //flightController->getHC05instance().addSensor(&lis);
  //flightController->getHC05instance().addSensor(&sonar);
  //flightController->getHC05instance().addSensor(&pmw);
  //flightController->getHC05instance().addSensor(&icm);

  flightControllerInstance->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS);
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7fe f9b0 	bl	8000ff0 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	210f      	movs	r1, #15
 8002c94:	4618      	mov	r0, r3
 8002c96:	f003 fb8f 	bl	80063b8 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  flightControllerInstance->getHC05instance().printfSensorsValues();
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7fe f9a8 	bl	8000ff0 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f003 fb3e 	bl	8006324 <_ZN4HC0519printfSensorsValuesEv>

  TIM3 -> CCR1 = 0;
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <main+0x11c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3 -> CCR2 = 0;
 8002cae:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <main+0x11c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3 -> CCR3 = 0;
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <main+0x11c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3 -> CCR4 = 0;
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <main+0x11c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4813      	ldr	r0, [pc, #76]	; (8002d10 <main+0x120>)
 8002cc4:	f00b fe12 	bl	800e8ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002cc8:	2104      	movs	r1, #4
 8002cca:	4811      	ldr	r0, [pc, #68]	; (8002d10 <main+0x120>)
 8002ccc:	f00b fe0e 	bl	800e8ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002cd0:	2108      	movs	r1, #8
 8002cd2:	480f      	ldr	r0, [pc, #60]	; (8002d10 <main+0x120>)
 8002cd4:	f00b fe0a 	bl	800e8ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002cd8:	210c      	movs	r1, #12
 8002cda:	480d      	ldr	r0, [pc, #52]	; (8002d10 <main+0x120>)
 8002cdc:	f00b fe06 	bl	800e8ec <HAL_TIM_PWM_Start>

  xTaskCreate(sensorsDataReadTask,"SensorsDataReadTask",1024,NULL,tskIDLE_PRIORITY+3, flightControllerInstance->getSensorsDataReadHandlerPtr());
 8002ce0:	6978      	ldr	r0, [r7, #20]
 8002ce2:	f7fe f9d3 	bl	800108c <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2303      	movs	r3, #3
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf4:	4907      	ldr	r1, [pc, #28]	; (8002d14 <main+0x124>)
 8002cf6:	4808      	ldr	r0, [pc, #32]	; (8002d18 <main+0x128>)
 8002cf8:	f010 fec8 	bl	8013a8c <xTaskCreate>
  vTaskStartScheduler();
 8002cfc:	f011 f87a 	bl	8013df4 <vTaskStartScheduler>

  while (1)
 8002d00:	e7fe      	b.n	8002d00 <main+0x110>
 8002d02:	bf00      	nop
 8002d04:	40a33333 	.word	0x40a33333
 8002d08:	080e0000 	.word	0x080e0000
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	20000578 	.word	0x20000578
 8002d14:	080177dc 	.word	0x080177dc
 8002d18:	08002721 	.word	0x08002721

08002d1c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b094      	sub	sp, #80	; 0x50
 8002d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d22:	f107 0320 	add.w	r3, r7, #32
 8002d26:	2230      	movs	r2, #48	; 0x30
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f014 fb2e 	bl	801738c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <_Z18SystemClock_Configv+0xe0>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <_Z18SystemClock_Configv+0xe0>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <_Z18SystemClock_Configv+0xe0>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <_Z18SystemClock_Configv+0xe4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <_Z18SystemClock_Configv+0xe4>)
 8002d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <_Z18SystemClock_Configv+0xe4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d82:	2302      	movs	r3, #2
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002d90:	2390      	movs	r3, #144	; 0x90
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d94:	2302      	movs	r3, #2
 8002d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002d98:	2306      	movs	r3, #6
 8002d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d9c:	f107 0320 	add.w	r3, r7, #32
 8002da0:	4618      	mov	r0, r3
 8002da2:	f009 fc55 	bl	800c650 <HAL_RCC_OscConfig>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002db6:	f000 fc23 	bl	8003600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dba:	230f      	movs	r3, #15
 8002dbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f009 feb1 	bl	800cb40 <HAL_RCC_ClockConfig>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002dee:	f000 fc07 	bl	8003600 <Error_Handler>
  }
}
 8002df2:	bf00      	nop
 8002df4:	3750      	adds	r7, #80	; 0x50
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40007000 	.word	0x40007000

08002e04 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e0a:	463b      	mov	r3, r7
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e18:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <_ZL12MX_ADC1_Initv+0xb0>)
 8002e1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e22:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002e28:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <_ZL12MX_ADC1_Initv+0xb4>)
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e62:	4813      	ldr	r0, [pc, #76]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e64:	f006 fdd8 	bl	8009a18 <HAL_ADC_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8002e78:	f000 fbc2 	bl	8003600 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002e7c:	230a      	movs	r3, #10
 8002e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002e80:	2301      	movs	r3, #1
 8002e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e88:	463b      	mov	r3, r7
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <_ZL12MX_ADC1_Initv+0xac>)
 8002e8e:	f006 ff35 	bl	8009cfc <HAL_ADC_ConfigChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8002ea2:	f000 fbad 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000334 	.word	0x20000334
 8002eb4:	40012000 	.word	0x40012000
 8002eb8:	0f000001 	.word	0x0f000001

08002ebc <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <_ZL15MX_SDIO_SD_Initv+0x70>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8002eea:	480f      	ldr	r0, [pc, #60]	; (8002f28 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002eec:	f00a f878 	bl	800cfe0 <HAL_SD_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 8002f00:	f000 fb7e 	bl	8003600 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8002f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f08:	4807      	ldr	r0, [pc, #28]	; (8002f28 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002f0a:	f00a fabd 	bl	800d488 <HAL_SD_ConfigWideBusOperation>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 8002f1e:	f000 fb6f 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200003dc 	.word	0x200003dc
 8002f2c:	40012c00 	.word	0x40012c00

08002f30 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f36:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <_ZL12MX_SPI2_Initv+0x74>)
 8002f38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f3a:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f42:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f48:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f7c:	220a      	movs	r2, #10
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f80:	4807      	ldr	r0, [pc, #28]	; (8002fa0 <_ZL12MX_SPI2_Initv+0x70>)
 8002f82:	f00a fde0 	bl	800db46 <HAL_SPI_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8002f96:	f000 fb33 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000460 	.word	0x20000460
 8002fa4:	40003800 	.word	0x40003800

08002fa8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	; 0x38
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fbc:	f107 0320 	add.w	r3, r7, #32
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
 8002fd4:	615a      	str	r2, [r3, #20]
 8002fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fd8:	4b51      	ldr	r3, [pc, #324]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8002fda:	4a52      	ldr	r2, [pc, #328]	; (8003124 <_ZL12MX_TIM3_Initv+0x17c>)
 8002fdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe4:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 8002fea:	4b4d      	ldr	r3, [pc, #308]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8002fec:	f241 726f 	movw	r2, #5999	; 0x176f
 8002ff0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff2:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff8:	4b49      	ldr	r3, [pc, #292]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ffe:	4848      	ldr	r0, [pc, #288]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8003000:	f00b fb5a 	bl	800e6b8 <HAL_TIM_Base_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8003014:	f000 faf4 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800301e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003022:	4619      	mov	r1, r3
 8003024:	483e      	ldr	r0, [pc, #248]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8003026:	f00b fef3 	bl	800ee10 <HAL_TIM_ConfigClockSource>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 800303a:	f000 fae1 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800303e:	4838      	ldr	r0, [pc, #224]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8003040:	f00b fbfa 	bl	800e838 <HAL_TIM_PWM_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8003054:	f000 fad4 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003060:	f107 0320 	add.w	r3, r7, #32
 8003064:	4619      	mov	r1, r3
 8003066:	482e      	ldr	r0, [pc, #184]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8003068:	f00c fad2 	bl	800f610 <HAL_TIMEx_MasterConfigSynchronization>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	bf14      	ite	ne
 8003072:	2301      	movne	r3, #1
 8003074:	2300      	moveq	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 800307c:	f000 fac0 	bl	8003600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003080:	2360      	movs	r3, #96	; 0x60
 8003082:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	2200      	movs	r2, #0
 8003094:	4619      	mov	r1, r3
 8003096:	4822      	ldr	r0, [pc, #136]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8003098:	f00b fdf8 	bl	800ec8c <HAL_TIM_PWM_ConfigChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 80030ac:	f000 faa8 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	2204      	movs	r2, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	481a      	ldr	r0, [pc, #104]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 80030b8:	f00b fde8 	bl	800ec8c <HAL_TIM_PWM_ConfigChannel>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 80030cc:	f000 fa98 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	2208      	movs	r2, #8
 80030d4:	4619      	mov	r1, r3
 80030d6:	4812      	ldr	r0, [pc, #72]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 80030d8:	f00b fdd8 	bl	800ec8c <HAL_TIM_PWM_ConfigChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 80030ec:	f000 fa88 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	220c      	movs	r2, #12
 80030f4:	4619      	mov	r1, r3
 80030f6:	480a      	ldr	r0, [pc, #40]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 80030f8:	f00b fdc8 	bl	800ec8c <HAL_TIM_PWM_ConfigChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 800310c:	f000 fa78 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003110:	4803      	ldr	r0, [pc, #12]	; (8003120 <_ZL12MX_TIM3_Initv+0x178>)
 8003112:	f000 fcc5 	bl	8003aa0 <HAL_TIM_MspPostInit>

}
 8003116:	bf00      	nop
 8003118:	3738      	adds	r7, #56	; 0x38
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000578 	.word	0x20000578
 8003124:	40000400 	.word	0x40000400

08003128 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800312e:	f107 0308 	add.w	r3, r7, #8
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800313c:	463b      	mov	r3, r7
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <_ZL12MX_TIM4_Initv+0xb0>)
 8003146:	4a25      	ldr	r2, [pc, #148]	; (80031dc <_ZL12MX_TIM4_Initv+0xb4>)
 8003148:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 800314a:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <_ZL12MX_TIM4_Initv+0xb0>)
 800314c:	228f      	movs	r2, #143	; 0x8f
 800314e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <_ZL12MX_TIM4_Initv+0xb0>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <_ZL12MX_TIM4_Initv+0xb0>)
 8003158:	f240 12f3 	movw	r2, #499	; 0x1f3
 800315c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <_ZL12MX_TIM4_Initv+0xb0>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <_ZL12MX_TIM4_Initv+0xb0>)
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800316a:	481b      	ldr	r0, [pc, #108]	; (80031d8 <_ZL12MX_TIM4_Initv+0xb0>)
 800316c:	f00b faa4 	bl	800e6b8 <HAL_TIM_Base_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8003180:	f000 fa3e 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800318a:	f107 0308 	add.w	r3, r7, #8
 800318e:	4619      	mov	r1, r3
 8003190:	4811      	ldr	r0, [pc, #68]	; (80031d8 <_ZL12MX_TIM4_Initv+0xb0>)
 8003192:	f00b fe3d 	bl	800ee10 <HAL_TIM_ConfigClockSource>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 80031a6:	f000 fa2b 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031b2:	463b      	mov	r3, r7
 80031b4:	4619      	mov	r1, r3
 80031b6:	4808      	ldr	r0, [pc, #32]	; (80031d8 <_ZL12MX_TIM4_Initv+0xb0>)
 80031b8:	f00c fa2a 	bl	800f610 <HAL_TIMEx_MasterConfigSynchronization>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf14      	ite	ne
 80031c2:	2301      	movne	r3, #1
 80031c4:	2300      	moveq	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 80031cc:	f000 fa18 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200005c0 	.word	0x200005c0
 80031dc:	40000800 	.word	0x40000800

080031e0 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <_ZL13MX_UART4_Initv+0x54>)
 80031e6:	4a14      	ldr	r2, [pc, #80]	; (8003238 <_ZL13MX_UART4_Initv+0x58>)
 80031e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <_ZL13MX_UART4_Initv+0x54>)
 80031ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <_ZL13MX_UART4_Initv+0x54>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <_ZL13MX_UART4_Initv+0x54>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <_ZL13MX_UART4_Initv+0x54>)
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <_ZL13MX_UART4_Initv+0x54>)
 8003206:	220c      	movs	r2, #12
 8003208:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <_ZL13MX_UART4_Initv+0x54>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <_ZL13MX_UART4_Initv+0x54>)
 8003212:	2200      	movs	r2, #0
 8003214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003216:	4807      	ldr	r0, [pc, #28]	; (8003234 <_ZL13MX_UART4_Initv+0x54>)
 8003218:	f00c fa8a 	bl	800f730 <HAL_UART_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf14      	ite	ne
 8003222:	2301      	movne	r3, #1
 8003224:	2300      	moveq	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 800322c:	f000 f9e8 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000608 	.word	0x20000608
 8003238:	40004c00 	.word	0x40004c00

0800323c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003242:	4a14      	ldr	r2, [pc, #80]	; (8003294 <_ZL19MX_USART1_UART_Initv+0x58>)
 8003244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800324c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003254:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <_ZL19MX_USART1_UART_Initv+0x54>)
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003262:	220c      	movs	r2, #12
 8003264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <_ZL19MX_USART1_UART_Initv+0x54>)
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003272:	4807      	ldr	r0, [pc, #28]	; (8003290 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003274:	f00c fa5c 	bl	800f730 <HAL_UART_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003288:	f000 f9ba 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}
 8003290:	2000064c 	.word	0x2000064c
 8003294:	40011000 	.word	0x40011000

08003298 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <_ZL19MX_USART2_UART_Initv+0x54>)
 800329e:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80032a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80032a4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80032a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80032be:	220c      	movs	r2, #12
 80032c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032ce:	4807      	ldr	r0, [pc, #28]	; (80032ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80032d0:	f00c fa2e 	bl	800f730 <HAL_UART_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bf14      	ite	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	2300      	moveq	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80032e4:	f000 f98c 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032e8:	bf00      	nop
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000690 	.word	0x20000690
 80032f0:	40004400 	.word	0x40004400

080032f4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <_ZL19MX_USART3_UART_Initv+0x58>)
 80032fa:	4a15      	ldr	r2, [pc, #84]	; (8003350 <_ZL19MX_USART3_UART_Initv+0x5c>)
 80032fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <_ZL19MX_USART3_UART_Initv+0x58>)
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <_ZL19MX_USART3_UART_Initv+0x60>)
 8003302:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <_ZL19MX_USART3_UART_Initv+0x58>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <_ZL19MX_USART3_UART_Initv+0x58>)
 800330c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003310:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <_ZL19MX_USART3_UART_Initv+0x58>)
 8003314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003318:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <_ZL19MX_USART3_UART_Initv+0x58>)
 800331c:	220c      	movs	r2, #12
 800331e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <_ZL19MX_USART3_UART_Initv+0x58>)
 8003322:	2200      	movs	r2, #0
 8003324:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003326:	4b09      	ldr	r3, [pc, #36]	; (800334c <_ZL19MX_USART3_UART_Initv+0x58>)
 8003328:	2200      	movs	r2, #0
 800332a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800332c:	4807      	ldr	r0, [pc, #28]	; (800334c <_ZL19MX_USART3_UART_Initv+0x58>)
 800332e:	f00c f9ff 	bl	800f730 <HAL_UART_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <_ZL19MX_USART3_UART_Initv+0x52>
  {
    Error_Handler();
 8003342:	f000 f95d 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200006d4 	.word	0x200006d4
 8003350:	40004800 	.word	0x40004800
 8003354:	000186a0 	.word	0x000186a0

08003358 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <_ZL19MX_USART6_UART_Initv+0x54>)
 800335e:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <_ZL19MX_USART6_UART_Initv+0x58>)
 8003360:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <_ZL19MX_USART6_UART_Initv+0x54>)
 8003364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003368:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <_ZL19MX_USART6_UART_Initv+0x54>)
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <_ZL19MX_USART6_UART_Initv+0x54>)
 8003372:	2200      	movs	r2, #0
 8003374:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <_ZL19MX_USART6_UART_Initv+0x54>)
 8003378:	2200      	movs	r2, #0
 800337a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <_ZL19MX_USART6_UART_Initv+0x54>)
 800337e:	220c      	movs	r2, #12
 8003380:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <_ZL19MX_USART6_UART_Initv+0x54>)
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <_ZL19MX_USART6_UART_Initv+0x54>)
 800338a:	2200      	movs	r2, #0
 800338c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800338e:	4807      	ldr	r0, [pc, #28]	; (80033ac <_ZL19MX_USART6_UART_Initv+0x54>)
 8003390:	f00c f9ce 	bl	800f730 <HAL_UART_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf14      	ite	ne
 800339a:	2301      	movne	r3, #1
 800339c:	2300      	moveq	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 80033a4:	f000 f92c 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000718 	.word	0x20000718
 80033b0:	40011400 	.word	0x40011400

080033b4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	4b2f      	ldr	r3, [pc, #188]	; (800347c <_ZL11MX_DMA_Initv+0xc8>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a2e      	ldr	r2, [pc, #184]	; (800347c <_ZL11MX_DMA_Initv+0xc8>)
 80033c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b2c      	ldr	r3, [pc, #176]	; (800347c <_ZL11MX_DMA_Initv+0xc8>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	4b28      	ldr	r3, [pc, #160]	; (800347c <_ZL11MX_DMA_Initv+0xc8>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a27      	ldr	r2, [pc, #156]	; (800347c <_ZL11MX_DMA_Initv+0xc8>)
 80033e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <_ZL11MX_DMA_Initv+0xc8>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80033f2:	2200      	movs	r2, #0
 80033f4:	2105      	movs	r1, #5
 80033f6:	200c      	movs	r0, #12
 80033f8:	f006 ffd8 	bl	800a3ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80033fc:	200c      	movs	r0, #12
 80033fe:	f006 fff1 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	2105      	movs	r1, #5
 8003406:	200d      	movs	r0, #13
 8003408:	f006 ffd0 	bl	800a3ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800340c:	200d      	movs	r0, #13
 800340e:	f006 ffe9 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	2105      	movs	r1, #5
 8003416:	200e      	movs	r0, #14
 8003418:	f006 ffc8 	bl	800a3ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800341c:	200e      	movs	r0, #14
 800341e:	f006 ffe1 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2105      	movs	r1, #5
 8003426:	200f      	movs	r0, #15
 8003428:	f006 ffc0 	bl	800a3ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800342c:	200f      	movs	r0, #15
 800342e:	f006 ffd9 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2105      	movs	r1, #5
 8003436:	2010      	movs	r0, #16
 8003438:	f006 ffb8 	bl	800a3ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800343c:	2010      	movs	r0, #16
 800343e:	f006 ffd1 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2105      	movs	r1, #5
 8003446:	2038      	movs	r0, #56	; 0x38
 8003448:	f006 ffb0 	bl	800a3ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800344c:	2038      	movs	r0, #56	; 0x38
 800344e:	f006 ffc9 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2105      	movs	r1, #5
 8003456:	2039      	movs	r0, #57	; 0x39
 8003458:	f006 ffa8 	bl	800a3ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800345c:	2039      	movs	r0, #57	; 0x39
 800345e:	f006 ffc1 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8003462:	2200      	movs	r2, #0
 8003464:	2105      	movs	r1, #5
 8003466:	2046      	movs	r0, #70	; 0x46
 8003468:	f006 ffa0 	bl	800a3ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800346c:	2046      	movs	r0, #70	; 0x46
 800346e:	f006 ffb9 	bl	800a3e4 <HAL_NVIC_EnableIRQ>

}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800

08003480 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003486:	f107 0314 	add.w	r3, r7, #20
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	60da      	str	r2, [r3, #12]
 8003494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	4b55      	ldr	r3, [pc, #340]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a54      	ldr	r2, [pc, #336]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b52      	ldr	r3, [pc, #328]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a4d      	ldr	r2, [pc, #308]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a46      	ldr	r2, [pc, #280]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b44      	ldr	r3, [pc, #272]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a3f      	ldr	r2, [pc, #252]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a38      	ldr	r2, [pc, #224]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 8003510:	f043 0308 	orr.w	r3, r3, #8
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <_ZL12MX_GPIO_Initv+0x170>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003522:	2200      	movs	r2, #0
 8003524:	2130      	movs	r1, #48	; 0x30
 8003526:	4833      	ldr	r0, [pc, #204]	; (80035f4 <_ZL12MX_GPIO_Initv+0x174>)
 8003528:	f007 ffec 	bl	800b504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800352c:	2200      	movs	r2, #0
 800352e:	2120      	movs	r1, #32
 8003530:	4831      	ldr	r0, [pc, #196]	; (80035f8 <_ZL12MX_GPIO_Initv+0x178>)
 8003532:	f007 ffe7 	bl	800b504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003536:	2200      	movs	r2, #0
 8003538:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800353c:	482f      	ldr	r0, [pc, #188]	; (80035fc <_ZL12MX_GPIO_Initv+0x17c>)
 800353e:	f007 ffe1 	bl	800b504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003542:	2330      	movs	r3, #48	; 0x30
 8003544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003546:	2301      	movs	r3, #1
 8003548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354e:	2300      	movs	r3, #0
 8003550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	4826      	ldr	r0, [pc, #152]	; (80035f4 <_ZL12MX_GPIO_Initv+0x174>)
 800355a:	f007 fe37 	bl	800b1cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800355e:	2310      	movs	r3, #16
 8003560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003562:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	4619      	mov	r1, r3
 8003572:	4821      	ldr	r0, [pc, #132]	; (80035f8 <_ZL12MX_GPIO_Initv+0x178>)
 8003574:	f007 fe2a 	bl	800b1cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003578:	2320      	movs	r3, #32
 800357a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800357c:	2301      	movs	r3, #1
 800357e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003584:	2300      	movs	r3, #0
 8003586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	481a      	ldr	r0, [pc, #104]	; (80035f8 <_ZL12MX_GPIO_Initv+0x178>)
 8003590:	f007 fe1c 	bl	800b1cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003594:	2304      	movs	r3, #4
 8003596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003598:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800359c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	4814      	ldr	r0, [pc, #80]	; (80035fc <_ZL12MX_GPIO_Initv+0x17c>)
 80035aa:	f007 fe0f 	bl	800b1cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80035ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b4:	2301      	movs	r3, #1
 80035b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035bc:	2300      	movs	r3, #0
 80035be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4619      	mov	r1, r3
 80035c6:	480d      	ldr	r0, [pc, #52]	; (80035fc <_ZL12MX_GPIO_Initv+0x17c>)
 80035c8:	f007 fe00 	bl	800b1cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80035d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	4619      	mov	r1, r3
 80035e2:	4804      	ldr	r0, [pc, #16]	; (80035f4 <_ZL12MX_GPIO_Initv+0x174>)
 80035e4:	f007 fdf2 	bl	800b1cc <HAL_GPIO_Init>
}
 80035e8:	bf00      	nop
 80035ea:	3728      	adds	r7, #40	; 0x28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40020000 	.word	0x40020000
 80035f8:	40020800 	.word	0x40020800
 80035fc:	40020400 	.word	0x40020400

08003600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003604:	b672      	cpsid	i
}
 8003606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003608:	e7fe      	b.n	8003608 <Error_Handler+0x8>
	...

0800360c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800360c:	b5b0      	push	{r4, r5, r7, lr}
 800360e:	b092      	sub	sp, #72	; 0x48
 8003610:	af02      	add	r7, sp, #8
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d129      	bne.n	8003670 <_Z41__static_initialization_and_destruction_0ii+0x64>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003622:	4293      	cmp	r3, r2
 8003624:	d124      	bne.n	8003670 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003628:	f107 0414 	add.w	r4, r7, #20
 800362c:	461d      	mov	r5, r3
 800362e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003636:	682b      	ldr	r3, [r5, #0]
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	2303      	movs	r3, #3
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fd55 	bl	80010f8 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEEC1Ev>
 800364e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003652:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	f107 020c 	add.w	r2, r7, #12
 800365e:	ca06      	ldmia	r2, {r1, r2}
 8003660:	480c      	ldr	r0, [pc, #48]	; (8003694 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003662:	f7fd fd61 	bl	8001128 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>
 8003666:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fd50 	bl	8001110 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEED1Ev>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800367c:	4293      	cmp	r3, r2
 800367e:	d102      	bne.n	8003686 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003680:	4804      	ldr	r0, [pc, #16]	; (8003694 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003682:	f7fd fc44 	bl	8000f0e <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEED1Ev>
 8003686:	bf00      	nop
 8003688:	3740      	adds	r7, #64	; 0x40
 800368a:	46bd      	mov	sp, r7
 800368c:	bdb0      	pop	{r4, r5, r7, pc}
 800368e:	bf00      	nop
 8003690:	080177f0 	.word	0x080177f0
 8003694:	2000031c 	.word	0x2000031c

08003698 <_GLOBAL__sub_I__Z19DynamicsProcessTaskPv>:
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
 800369c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036a0:	2001      	movs	r0, #1
 80036a2:	f7ff ffb3 	bl	800360c <_Z41__static_initialization_and_destruction_0ii>
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_GLOBAL__sub_D__Z19DynamicsProcessTaskPv>:
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036b0:	2000      	movs	r0, #0
 80036b2:	f7ff ffab 	bl	800360c <_Z41__static_initialization_and_destruction_0ii>
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_MspInit+0x54>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4a11      	ldr	r2, [pc, #68]	; (800370c <HAL_MspInit+0x54>)
 80036c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036cc:	6453      	str	r3, [r2, #68]	; 0x44
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_MspInit+0x54>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_MspInit+0x54>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <HAL_MspInit+0x54>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <HAL_MspInit+0x54>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036f6:	2200      	movs	r2, #0
 80036f8:	210f      	movs	r1, #15
 80036fa:	f06f 0001 	mvn.w	r0, #1
 80036fe:	f006 fe55 	bl	800a3ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800

08003710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2e      	ldr	r2, [pc, #184]	; (80037e8 <HAL_ADC_MspInit+0xd8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d156      	bne.n	80037e0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_ADC_MspInit+0xdc>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <HAL_ADC_MspInit+0xdc>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <HAL_ADC_MspInit+0xdc>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <HAL_ADC_MspInit+0xdc>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a25      	ldr	r2, [pc, #148]	; (80037ec <HAL_ADC_MspInit+0xdc>)
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_ADC_MspInit+0xdc>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800376a:	2301      	movs	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800376e:	2303      	movs	r3, #3
 8003770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	4619      	mov	r1, r3
 800377c:	481c      	ldr	r0, [pc, #112]	; (80037f0 <HAL_ADC_MspInit+0xe0>)
 800377e:	f007 fd25 	bl	800b1cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003782:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 8003784:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_ADC_MspInit+0xe8>)
 8003786:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003788:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 800378a:	2200      	movs	r2, #0
 800378c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800378e:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003794:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 8003796:	2200      	movs	r2, #0
 8003798:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800379a:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 800379c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 80037a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 80037ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80037c4:	480b      	ldr	r0, [pc, #44]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 80037c6:	f006 fe1b 	bl	800a400 <HAL_DMA_Init>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80037d0:	f7ff ff16 	bl	8003600 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
 80037da:	4a06      	ldr	r2, [pc, #24]	; (80037f4 <HAL_ADC_MspInit+0xe4>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037e0:	bf00      	nop
 80037e2:	3728      	adds	r7, #40	; 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40012000 	.word	0x40012000
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40020800 	.word	0x40020800
 80037f4:	2000037c 	.word	0x2000037c
 80037f8:	40026410 	.word	0x40026410

080037fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a28      	ldr	r2, [pc, #160]	; (80038bc <HAL_SD_MspInit+0xc0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d14a      	bne.n	80038b4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <HAL_SD_MspInit+0xc4>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	4a26      	ldr	r2, [pc, #152]	; (80038c0 <HAL_SD_MspInit+0xc4>)
 8003828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800382c:	6453      	str	r3, [r2, #68]	; 0x44
 800382e:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <HAL_SD_MspInit+0xc4>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_SD_MspInit+0xc4>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <HAL_SD_MspInit+0xc4>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_SD_MspInit+0xc4>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_SD_MspInit+0xc4>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_SD_MspInit+0xc4>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <HAL_SD_MspInit+0xc4>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003872:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003876:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003878:	2302      	movs	r3, #2
 800387a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003880:	2303      	movs	r3, #3
 8003882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003884:	230c      	movs	r3, #12
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	4619      	mov	r1, r3
 800388e:	480d      	ldr	r0, [pc, #52]	; (80038c4 <HAL_SD_MspInit+0xc8>)
 8003890:	f007 fc9c 	bl	800b1cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003894:	2304      	movs	r3, #4
 8003896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003898:	2302      	movs	r3, #2
 800389a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a0:	2303      	movs	r3, #3
 80038a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80038a4:	230c      	movs	r3, #12
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4619      	mov	r1, r3
 80038ae:	4806      	ldr	r0, [pc, #24]	; (80038c8 <HAL_SD_MspInit+0xcc>)
 80038b0:	f007 fc8c 	bl	800b1cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80038b4:	bf00      	nop
 80038b6:	3728      	adds	r7, #40	; 0x28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40012c00 	.word	0x40012c00
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020c00 	.word	0x40020c00

080038cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a47      	ldr	r2, [pc, #284]	; (8003a08 <HAL_SPI_MspInit+0x13c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	f040 8087 	bne.w	80039fe <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	4b45      	ldr	r3, [pc, #276]	; (8003a0c <HAL_SPI_MspInit+0x140>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4a44      	ldr	r2, [pc, #272]	; (8003a0c <HAL_SPI_MspInit+0x140>)
 80038fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	4b42      	ldr	r3, [pc, #264]	; (8003a0c <HAL_SPI_MspInit+0x140>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <HAL_SPI_MspInit+0x140>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	4a3d      	ldr	r2, [pc, #244]	; (8003a0c <HAL_SPI_MspInit+0x140>)
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	6313      	str	r3, [r2, #48]	; 0x30
 800391c:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <HAL_SPI_MspInit+0x140>)
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003928:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800392c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392e:	2302      	movs	r3, #2
 8003930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003936:	2303      	movs	r3, #3
 8003938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800393a:	2305      	movs	r3, #5
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393e:	f107 0314 	add.w	r3, r7, #20
 8003942:	4619      	mov	r1, r3
 8003944:	4832      	ldr	r0, [pc, #200]	; (8003a10 <HAL_SPI_MspInit+0x144>)
 8003946:	f007 fc41 	bl	800b1cc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800394a:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 800394c:	4a32      	ldr	r2, [pc, #200]	; (8003a18 <HAL_SPI_MspInit+0x14c>)
 800394e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003950:	4b30      	ldr	r3, [pc, #192]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 8003952:	2200      	movs	r2, #0
 8003954:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003956:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800395c:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003962:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 8003964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003968:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800396a:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003970:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 8003972:	2200      	movs	r2, #0
 8003974:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003976:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 8003978:	2200      	movs	r2, #0
 800397a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800397c:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 800397e:	2200      	movs	r2, #0
 8003980:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 8003984:	2200      	movs	r2, #0
 8003986:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003988:	4822      	ldr	r0, [pc, #136]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 800398a:	f006 fd39 	bl	800a400 <HAL_DMA_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003994:	f7ff fe34 	bl	8003600 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 800399c:	64da      	str	r2, [r3, #76]	; 0x4c
 800399e:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <HAL_SPI_MspInit+0x148>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80039a4:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039a6:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <HAL_SPI_MspInit+0x154>)
 80039a8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80039aa:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b6:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039bc:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039c4:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ca:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80039d0:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039d8:	2200      	movs	r2, #0
 80039da:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039dc:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80039e2:	480e      	ldr	r0, [pc, #56]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039e4:	f006 fd0c 	bl	800a400 <HAL_DMA_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 80039ee:	f7ff fe07 	bl	8003600 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039f6:	649a      	str	r2, [r3, #72]	; 0x48
 80039f8:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <HAL_SPI_MspInit+0x150>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80039fe:	bf00      	nop
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40003800 	.word	0x40003800
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020400 	.word	0x40020400
 8003a14:	200004b8 	.word	0x200004b8
 8003a18:	40026058 	.word	0x40026058
 8003a1c:	20000518 	.word	0x20000518
 8003a20:	40026070 	.word	0x40026070

08003a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_TIM_Base_MspInit+0x70>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10e      	bne.n	8003a54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_TIM_Base_MspInit+0x74>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_TIM_Base_MspInit+0x74>)
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_TIM_Base_MspInit+0x74>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a52:	e01a      	b.n	8003a8a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <HAL_TIM_Base_MspInit+0x78>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d115      	bne.n	8003a8a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_TIM_Base_MspInit+0x74>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <HAL_TIM_Base_MspInit+0x74>)
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_TIM_Base_MspInit+0x74>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2105      	movs	r1, #5
 8003a7e:	201e      	movs	r0, #30
 8003a80:	f006 fc94 	bl	800a3ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a84:	201e      	movs	r0, #30
 8003a86:	f006 fcad 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40000800 	.word	0x40000800

08003aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a21      	ldr	r2, [pc, #132]	; (8003b44 <HAL_TIM_MspPostInit+0xa4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d13b      	bne.n	8003b3a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_TIM_MspPostInit+0xa8>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <HAL_TIM_MspPostInit+0xa8>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_TIM_MspPostInit+0xa8>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <HAL_TIM_MspPostInit+0xa8>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <HAL_TIM_MspPostInit+0xa8>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <HAL_TIM_MspPostInit+0xa8>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003afa:	23c0      	movs	r3, #192	; 0xc0
 8003afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	2300      	movs	r3, #0
 8003b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0e:	f107 0314 	add.w	r3, r7, #20
 8003b12:	4619      	mov	r1, r3
 8003b14:	480d      	ldr	r0, [pc, #52]	; (8003b4c <HAL_TIM_MspPostInit+0xac>)
 8003b16:	f007 fb59 	bl	800b1cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b26:	2300      	movs	r3, #0
 8003b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	4619      	mov	r1, r3
 8003b34:	4806      	ldr	r0, [pc, #24]	; (8003b50 <HAL_TIM_MspPostInit+0xb0>)
 8003b36:	f007 fb49 	bl	800b1cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b3a:	bf00      	nop
 8003b3c:	3728      	adds	r7, #40	; 0x28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40020000 	.word	0x40020000
 8003b50:	40020400 	.word	0x40020400

08003b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b092      	sub	sp, #72	; 0x48
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a93      	ldr	r2, [pc, #588]	; (8003dc0 <HAL_UART_MspInit+0x26c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d15a      	bne.n	8003c2c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7a:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a91      	ldr	r2, [pc, #580]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003b80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b8f      	ldr	r3, [pc, #572]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	4b8b      	ldr	r3, [pc, #556]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a8a      	ldr	r2, [pc, #552]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	487f      	ldr	r0, [pc, #508]	; (8003dc8 <HAL_UART_MspInit+0x274>)
 8003bca:	f007 faff 	bl	800b1cc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003bce:	4b7f      	ldr	r3, [pc, #508]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003bd0:	4a7f      	ldr	r2, [pc, #508]	; (8003dd0 <HAL_UART_MspInit+0x27c>)
 8003bd2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003bd4:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bda:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bdc:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003be2:	4b7a      	ldr	r3, [pc, #488]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003be8:	4b78      	ldr	r3, [pc, #480]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bee:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bf0:	4b76      	ldr	r3, [pc, #472]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bf6:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003bfc:	4b73      	ldr	r3, [pc, #460]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c02:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c08:	4b70      	ldr	r3, [pc, #448]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003c0e:	486f      	ldr	r0, [pc, #444]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003c10:	f006 fbf6 	bl	800a400 <HAL_DMA_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003c1a:	f7ff fcf1 	bl	8003600 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a6a      	ldr	r2, [pc, #424]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
 8003c24:	4a69      	ldr	r2, [pc, #420]	; (8003dcc <HAL_UART_MspInit+0x278>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003c2a:	e19f      	b.n	8003f6c <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_UART_MspInit+0x280>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d163      	bne.n	8003cfe <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3a:	4b62      	ldr	r3, [pc, #392]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a61      	ldr	r2, [pc, #388]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003c40:	f043 0310 	orr.w	r3, r3, #16
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	4b5b      	ldr	r3, [pc, #364]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a5a      	ldr	r2, [pc, #360]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b58      	ldr	r3, [pc, #352]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c80:	2307      	movs	r3, #7
 8003c82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c88:	4619      	mov	r1, r3
 8003c8a:	484f      	ldr	r0, [pc, #316]	; (8003dc8 <HAL_UART_MspInit+0x274>)
 8003c8c:	f007 fa9e 	bl	800b1cc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003c90:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003c92:	4a52      	ldr	r2, [pc, #328]	; (8003ddc <HAL_UART_MspInit+0x288>)
 8003c94:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003c96:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003c98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c9e:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003ca0:	2240      	movs	r2, #64	; 0x40
 8003ca2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003caa:	4b4b      	ldr	r3, [pc, #300]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cb2:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cb8:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003cbe:	4b46      	ldr	r3, [pc, #280]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cc4:	4b44      	ldr	r3, [pc, #272]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cca:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003cd0:	4841      	ldr	r0, [pc, #260]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003cd2:	f006 fb95 	bl	800a400 <HAL_DMA_Init>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8003cdc:	f7ff fc90 	bl	8003600 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3d      	ldr	r2, [pc, #244]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ce6:	4a3c      	ldr	r2, [pc, #240]	; (8003dd8 <HAL_UART_MspInit+0x284>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003cec:	2200      	movs	r2, #0
 8003cee:	2105      	movs	r1, #5
 8003cf0:	2025      	movs	r0, #37	; 0x25
 8003cf2:	f006 fb5b 	bl	800a3ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cf6:	2025      	movs	r0, #37	; 0x25
 8003cf8:	f006 fb74 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
}
 8003cfc:	e136      	b.n	8003f6c <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a37      	ldr	r2, [pc, #220]	; (8003de0 <HAL_UART_MspInit+0x28c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d171      	bne.n	8003dec <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d08:	2300      	movs	r3, #0
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	4a2c      	ldr	r2, [pc, #176]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d16:	6413      	str	r3, [r2, #64]	; 0x40
 8003d18:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6313      	str	r3, [r2, #48]	; 0x30
 8003d34:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <HAL_UART_MspInit+0x270>)
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d40:	230c      	movs	r3, #12
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d50:	2307      	movs	r3, #7
 8003d52:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d58:	4619      	mov	r1, r3
 8003d5a:	481b      	ldr	r0, [pc, #108]	; (8003dc8 <HAL_UART_MspInit+0x274>)
 8003d5c:	f007 fa36 	bl	800b1cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d62:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <HAL_UART_MspInit+0x294>)
 8003d64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003d66:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d80:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d82:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003da0:	4810      	ldr	r0, [pc, #64]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003da2:	f006 fb2d 	bl	800a400 <HAL_DMA_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8003dac:	f7ff fc28 	bl	8003600 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
 8003db6:	4a0b      	ldr	r2, [pc, #44]	; (8003de4 <HAL_UART_MspInit+0x290>)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003dbc:	e0d6      	b.n	8003f6c <HAL_UART_MspInit+0x418>
 8003dbe:	bf00      	nop
 8003dc0:	40004c00 	.word	0x40004c00
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40020000 	.word	0x40020000
 8003dcc:	2000075c 	.word	0x2000075c
 8003dd0:	40026040 	.word	0x40026040
 8003dd4:	40011000 	.word	0x40011000
 8003dd8:	200007bc 	.word	0x200007bc
 8003ddc:	400264b8 	.word	0x400264b8
 8003de0:	40004400 	.word	0x40004400
 8003de4:	2000081c 	.word	0x2000081c
 8003de8:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a60      	ldr	r2, [pc, #384]	; (8003f74 <HAL_UART_MspInit+0x420>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d15b      	bne.n	8003eae <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	4b5f      	ldr	r3, [pc, #380]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	4a5e      	ldr	r2, [pc, #376]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e04:	6413      	str	r3, [r2, #64]	; 0x40
 8003e06:	4b5c      	ldr	r3, [pc, #368]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	4b58      	ldr	r3, [pc, #352]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	4a57      	ldr	r2, [pc, #348]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	6313      	str	r3, [r2, #48]	; 0x30
 8003e22:	4b55      	ldr	r3, [pc, #340]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	2302      	movs	r3, #2
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e40:	2307      	movs	r3, #7
 8003e42:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e48:	4619      	mov	r1, r3
 8003e4a:	484c      	ldr	r0, [pc, #304]	; (8003f7c <HAL_UART_MspInit+0x428>)
 8003e4c:	f007 f9be 	bl	800b1cc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003e50:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e52:	4a4c      	ldr	r2, [pc, #304]	; (8003f84 <HAL_UART_MspInit+0x430>)
 8003e54:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003e56:	4b4a      	ldr	r3, [pc, #296]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e5c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e5e:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e64:	4b46      	ldr	r3, [pc, #280]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e6a:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e70:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e72:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e78:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003e7e:	4b40      	ldr	r3, [pc, #256]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e84:	4b3e      	ldr	r3, [pc, #248]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e8a:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003e90:	483b      	ldr	r0, [pc, #236]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003e92:	f006 fab5 	bl	800a400 <HAL_DMA_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8003e9c:	f7ff fbb0 	bl	8003600 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a37      	ldr	r2, [pc, #220]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ea6:	4a36      	ldr	r2, [pc, #216]	; (8003f80 <HAL_UART_MspInit+0x42c>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003eac:	e05e      	b.n	8003f6c <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART6)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <HAL_UART_MspInit+0x434>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d159      	bne.n	8003f6c <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	4a2d      	ldr	r2, [pc, #180]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003ec2:	f043 0320 	orr.w	r3, r3, #32
 8003ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee4:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_UART_MspInit+0x424>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ef0:	23c0      	movs	r3, #192	; 0xc0
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efc:	2303      	movs	r3, #3
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003f00:	2308      	movs	r3, #8
 8003f02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4820      	ldr	r0, [pc, #128]	; (8003f8c <HAL_UART_MspInit+0x438>)
 8003f0c:	f007 f95e 	bl	800b1cc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003f10:	4b1f      	ldr	r3, [pc, #124]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f12:	4a20      	ldr	r2, [pc, #128]	; (8003f94 <HAL_UART_MspInit+0x440>)
 8003f14:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003f16:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f18:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003f1c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f1e:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f24:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f2a:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f30:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f38:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003f50:	480f      	ldr	r0, [pc, #60]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f52:	f006 fa55 	bl	800a400 <HAL_DMA_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8003f5c:	f7ff fb50 	bl	8003600 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <HAL_UART_MspInit+0x43c>)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f6c:	bf00      	nop
 8003f6e:	3748      	adds	r7, #72	; 0x48
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40004800 	.word	0x40004800
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40020400 	.word	0x40020400
 8003f80:	2000087c 	.word	0x2000087c
 8003f84:	40026028 	.word	0x40026028
 8003f88:	40011400 	.word	0x40011400
 8003f8c:	40020800 	.word	0x40020800
 8003f90:	200008dc 	.word	0x200008dc
 8003f94:	40026428 	.word	0x40026428

08003f98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	; 0x30
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	4b2f      	ldr	r3, [pc, #188]	; (800406c <HAL_InitTick+0xd4>)
 8003fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb0:	4a2e      	ldr	r2, [pc, #184]	; (800406c <HAL_InitTick+0xd4>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	; (800406c <HAL_InitTick+0xd4>)
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fc4:	f107 020c 	add.w	r2, r7, #12
 8003fc8:	f107 0310 	add.w	r3, r7, #16
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f008 ffd4 	bl	800cf7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003fd4:	f008 ffbe 	bl	800cf54 <HAL_RCC_GetPCLK2Freq>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	4a23      	ldr	r2, [pc, #140]	; (8004070 <HAL_InitTick+0xd8>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0c9b      	lsrs	r3, r3, #18
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003fec:	4b21      	ldr	r3, [pc, #132]	; (8004074 <HAL_InitTick+0xdc>)
 8003fee:	4a22      	ldr	r2, [pc, #136]	; (8004078 <HAL_InitTick+0xe0>)
 8003ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_InitTick+0xdc>)
 8003ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ff8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <HAL_InitTick+0xdc>)
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004000:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <HAL_InitTick+0xdc>)
 8004002:	2200      	movs	r2, #0
 8004004:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004006:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <HAL_InitTick+0xdc>)
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400c:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_InitTick+0xdc>)
 800400e:	2200      	movs	r2, #0
 8004010:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004012:	4818      	ldr	r0, [pc, #96]	; (8004074 <HAL_InitTick+0xdc>)
 8004014:	f00a fb50 	bl	800e6b8 <HAL_TIM_Base_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800401e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11b      	bne.n	800405e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004026:	4813      	ldr	r0, [pc, #76]	; (8004074 <HAL_InitTick+0xdc>)
 8004028:	f00a fb96 	bl	800e758 <HAL_TIM_Base_Start_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004036:	2b00      	cmp	r3, #0
 8004038:	d111      	bne.n	800405e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800403a:	2019      	movs	r0, #25
 800403c:	f006 f9d2 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b0f      	cmp	r3, #15
 8004044:	d808      	bhi.n	8004058 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004046:	2200      	movs	r2, #0
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	2019      	movs	r0, #25
 800404c:	f006 f9ae 	bl	800a3ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004050:	4a0a      	ldr	r2, [pc, #40]	; (800407c <HAL_InitTick+0xe4>)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e002      	b.n	800405e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800405e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004062:	4618      	mov	r0, r3
 8004064:	3730      	adds	r7, #48	; 0x30
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	431bde83 	.word	0x431bde83
 8004074:	2000093c 	.word	0x2000093c
 8004078:	40010000 	.word	0x40010000
 800407c:	20000004 	.word	0x20000004

08004080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004084:	e7fe      	b.n	8004084 <NMI_Handler+0x4>

08004086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800408a:	e7fe      	b.n	800408a <HardFault_Handler+0x4>

0800408c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004090:	e7fe      	b.n	8004090 <MemManage_Handler+0x4>

08004092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004096:	e7fe      	b.n	8004096 <BusFault_Handler+0x4>

08004098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800409c:	e7fe      	b.n	800409c <UsageFault_Handler+0x4>

0800409e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80040b0:	2004      	movs	r0, #4
 80040b2:	f007 fa41 	bl	800b538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}

080040ba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80040be:	2010      	movs	r0, #16
 80040c0:	f007 fa3a 	bl	800b538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80040cc:	4802      	ldr	r0, [pc, #8]	; (80040d8 <DMA1_Stream1_IRQHandler+0x10>)
 80040ce:	f006 fb2f 	bl	800a730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	2000087c 	.word	0x2000087c

080040dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <DMA1_Stream2_IRQHandler+0x10>)
 80040e2:	f006 fb25 	bl	800a730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2000075c 	.word	0x2000075c

080040f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <DMA1_Stream3_IRQHandler+0x10>)
 80040f6:	f006 fb1b 	bl	800a730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200004b8 	.word	0x200004b8

08004104 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004108:	4802      	ldr	r0, [pc, #8]	; (8004114 <DMA1_Stream4_IRQHandler+0x10>)
 800410a:	f006 fb11 	bl	800a730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000518 	.word	0x20000518

08004118 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <DMA1_Stream5_IRQHandler+0x10>)
 800411e:	f006 fb07 	bl	800a730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	2000081c 	.word	0x2000081c

0800412c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004130:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004134:	f007 fa00 	bl	800b538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}

0800413c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004140:	4802      	ldr	r0, [pc, #8]	; (800414c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004142:	f00a fc9b 	bl	800ea7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004146:	bf00      	nop
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	2000093c 	.word	0x2000093c

08004150 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004154:	4802      	ldr	r0, [pc, #8]	; (8004160 <TIM4_IRQHandler+0x10>)
 8004156:	f00a fc91 	bl	800ea7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	200005c0 	.word	0x200005c0

08004164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004168:	4802      	ldr	r0, [pc, #8]	; (8004174 <USART1_IRQHandler+0x10>)
 800416a:	f00b fbdd 	bl	800f928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	2000064c 	.word	0x2000064c

08004178 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800417c:	4802      	ldr	r0, [pc, #8]	; (8004188 <DMA2_Stream0_IRQHandler+0x10>)
 800417e:	f006 fad7 	bl	800a730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	2000037c 	.word	0x2000037c

0800418c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004190:	4802      	ldr	r0, [pc, #8]	; (800419c <DMA2_Stream1_IRQHandler+0x10>)
 8004192:	f006 facd 	bl	800a730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	200008dc 	.word	0x200008dc

080041a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80041a4:	4802      	ldr	r0, [pc, #8]	; (80041b0 <OTG_FS_IRQHandler+0x10>)
 80041a6:	f007 f9df 	bl	800b568 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000d330 	.word	0x2000d330

080041b4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80041b8:	4802      	ldr	r0, [pc, #8]	; (80041c4 <DMA2_Stream7_IRQHandler+0x10>)
 80041ba:	f006 fab9 	bl	800a730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200007bc 	.word	0x200007bc

080041c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
	return 1;
 80041cc:	2301      	movs	r3, #1
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <_kill>:

int _kill(int pid, int sig)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041e2:	f013 f87f 	bl	80172e4 <__errno>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2216      	movs	r2, #22
 80041ea:	601a      	str	r2, [r3, #0]
	return -1;
 80041ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_exit>:

void _exit (int status)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004200:	f04f 31ff 	mov.w	r1, #4294967295
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ffe7 	bl	80041d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800420a:	e7fe      	b.n	800420a <_exit+0x12>

0800420c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <_sbrk+0x5c>)
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <_sbrk+0x60>)
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004220:	4b13      	ldr	r3, [pc, #76]	; (8004270 <_sbrk+0x64>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <_sbrk+0x64>)
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <_sbrk+0x68>)
 800422c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <_sbrk+0x64>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	429a      	cmp	r2, r3
 800423a:	d207      	bcs.n	800424c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800423c:	f013 f852 	bl	80172e4 <__errno>
 8004240:	4603      	mov	r3, r0
 8004242:	220c      	movs	r2, #12
 8004244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295
 800424a:	e009      	b.n	8004260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <_sbrk+0x64>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <_sbrk+0x64>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	4a05      	ldr	r2, [pc, #20]	; (8004270 <_sbrk+0x64>)
 800425c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800425e:	68fb      	ldr	r3, [r7, #12]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20020000 	.word	0x20020000
 800426c:	00000400 	.word	0x00000400
 8004270:	20000984 	.word	0x20000984
 8004274:	2000d850 	.word	0x2000d850

08004278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <SystemInit+0x20>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	4a05      	ldr	r2, [pc, #20]	; (8004298 <SystemInit+0x20>)
 8004284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800429c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042a0:	480d      	ldr	r0, [pc, #52]	; (80042d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042a2:	490e      	ldr	r1, [pc, #56]	; (80042dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042a4:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042a8:	e002      	b.n	80042b0 <LoopCopyDataInit>

080042aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ae:	3304      	adds	r3, #4

080042b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042b4:	d3f9      	bcc.n	80042aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042b6:	4a0b      	ldr	r2, [pc, #44]	; (80042e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042b8:	4c0b      	ldr	r4, [pc, #44]	; (80042e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042bc:	e001      	b.n	80042c2 <LoopFillZerobss>

080042be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042c0:	3204      	adds	r2, #4

080042c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042c4:	d3fb      	bcc.n	80042be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042c6:	f7ff ffd7 	bl	8004278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ca:	f013 f811 	bl	80172f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ce:	f7fe fc8f 	bl	8002bf0 <main>
  bx  lr    
 80042d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80042e0:	08017f7c 	.word	0x08017f7c
  ldr r2, =_sbss
 80042e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80042e8:	2000d850 	.word	0x2000d850

080042ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042ec:	e7fe      	b.n	80042ec <ADC_IRQHandler>

080042ee <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 80042ee:	b590      	push	{r4, r7, lr}
 80042f0:	b087      	sub	sp, #28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	0fdb      	lsrs	r3, r3, #31
 80042fc:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <_ZNSt7__cxx119to_stringEi+0x1c>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	425b      	negs	r3, r3
 8004308:	e000      	b.n	800430c <_ZNSt7__cxx119to_stringEi+0x1e>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 800430e:	210a      	movs	r1, #10
 8004310:	6938      	ldr	r0, [r7, #16]
 8004312:	f000 ff7d 	bl	8005210 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8004316:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8004318:	7dfa      	ldrb	r2, [r7, #23]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	18d4      	adds	r4, r2, r3
 800431e:	f107 0308 	add.w	r3, r7, #8
 8004322:	4618      	mov	r0, r3
 8004324:	f011 f860 	bl	80153e8 <_ZNSaIcEC1Ev>
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	222d      	movs	r2, #45	; 0x2d
 800432e:	4621      	mov	r1, r4
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f011 f96a 	bl	801560a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8004336:	f107 0308 	add.w	r3, r7, #8
 800433a:	4618      	mov	r0, r3
 800433c:	f011 f855 	bl	80153ea <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	4619      	mov	r1, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f011 f96f 	bl	8015628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800434a:	4603      	mov	r3, r0
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 ff9d 	bl	8005290 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8004356:	bf00      	nop
  }
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd90      	pop	{r4, r7, pc}

08004360 <_ZN15PrintableSensor11toCharArrayEi>:
	char packet[50]={};

public:
	virtual const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList) = 0;

	const char* toCharArray(int value)
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b089      	sub	sp, #36	; 0x24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	{
		return std::to_string(value).c_str();
 800436a:	f107 0308 	add.w	r3, r7, #8
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ffbc 	bl	80042ee <_ZNSt7__cxx119to_stringEi>
 8004376:	f107 0308 	add.w	r3, r7, #8
 800437a:	4618      	mov	r0, r3
 800437c:	f011 f957 	bl	801562e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004380:	4604      	mov	r4, r0
 8004382:	bf00      	nop
 8004384:	f107 0308 	add.w	r3, r7, #8
 8004388:	4618      	mov	r0, r3
 800438a:	f011 f947 	bl	801561c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800438e:	4623      	mov	r3, r4
	}
 8004390:	4618      	mov	r0, r3
 8004392:	3724      	adds	r7, #36	; 0x24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd90      	pop	{r4, r7, pc}

08004398 <_ZN5drone5utils9functionsL11concatBytesEhh>:
	}*/

	namespace functions
	{
		static int16_t concatBytes(uint8_t msb, uint8_t lsb)
		{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	460a      	mov	r2, r1
 80043a2:	71fb      	strb	r3, [r7, #7]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71bb      	strb	r3, [r7, #6]
			return (((int16_t)msb << 8) | (int16_t)lsb);
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	b21a      	sxth	r2, r3
 80043ae:	79bb      	ldrb	r3, [r7, #6]
 80043b0:	b21b      	sxth	r3, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b21b      	sxth	r3, r3
		}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <_ZN8SPI_ConnC1Ev>:
class SPI_Conn
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <_ZN8SPI_ConnC1Ev+0x1c>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	0801798c 	.word	0x0801798c

080043e4 <_ZN15PrintableSensorC1Ev>:
class PrintableSensor
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	4a07      	ldr	r2, [pc, #28]	; (800440c <_ZN15PrintableSensorC1Ev+0x28>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2232      	movs	r2, #50	; 0x32
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f012 ffc6 	bl	801738c <memset>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	08017980 	.word	0x08017980

08004410 <_ZN12CallsCounterC1Ev>:
	uint64_t getTaskCounterValue()
	{
		return this->interruptCounter;
	}
protected:
	CallsCounter() = default;
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	e9c1 2300 	strd	r2, r3, [r1]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <_ZN6BMP39010calib_coefC1Ev>:
	SPI_HandleTypeDef *spi_port;

	uint8_t spiTxBuff[2]={0,0};
	uint8_t spiRxBuff[2]={0,0};

	struct calib_coef
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	805a      	strh	r2, [r3, #2]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	711a      	strb	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	80da      	strh	r2, [r3, #6]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	811a      	strh	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	729a      	strb	r2, [r3, #10]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	72da      	strb	r2, [r3, #11]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	819a      	strh	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	81da      	strh	r2, [r3, #14]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	741a      	strb	r2, [r3, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	745a      	strb	r2, [r3, #17]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	825a      	strh	r2, [r3, #18]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	751a      	strb	r2, [r3, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	755a      	strb	r2, [r3, #21]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <_ZN6BMP39020quantized_calib_dataC1Ev>:
		int16_t par_p9 = 0;
		int8_t par_p10 = 0;
		int8_t par_p11 = 0;
	} calibCoef;

	struct quantized_calib_data
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	e9c1 2300 	strd	r2, r3, [r1]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_ZN6BMP390C1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "BMP390.hpp"

BMP390::BMP390(SPI_HandleTypeDef *spi_port)
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
: spi_port {spi_port}
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff0f 	bl	80043c4 <_ZN8SPI_ConnC1Ev>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff1a 	bl	80043e4 <_ZN15PrintableSensorC1Ev>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3340      	adds	r3, #64	; 0x40
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff ff2b 	bl	8004410 <_ZN12CallsCounterC1Ev>
 80045ba:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa4>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	4a1e      	ldr	r2, [pc, #120]	; (800463c <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa8>)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	651a      	str	r2, [r3, #80]	; 0x50
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3358      	adds	r3, #88	; 0x58
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff26 	bl	8004442 <_ZN6BMP39010calib_coefC1Ev>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3370      	adds	r3, #112	; 0x70
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff56 	bl	80044ac <_ZN6BMP39020quantized_calib_dataC1Ev>
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
{
}
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	08017960 	.word	0x08017960
 800463c:	08017974 	.word	0x08017974

08004640 <_ZN6BMP39011defaultInitEv>:

bool BMP390::defaultInit()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af02      	add	r7, sp, #8
 8004646:	6078      	str	r0, [r7, #4]
	this->SPI_write(CMD,CMD_SOFTRESET);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	22b6      	movs	r2, #182	; 0xb6
 8004650:	217e      	movs	r1, #126	; 0x7e
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
	HAL_Delay(20);
 8004656:	2014      	movs	r0, #20
 8004658:	f005 f9ba 	bl	80099d0 <HAL_Delay>

	int debug = SPI_read(STATUS);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3304      	adds	r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2103      	movs	r1, #3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
 800466a:	4603      	mov	r3, r0
 800466c:	60fb      	str	r3, [r7, #12]
	while ((debug= SPI_read(STATUS))==0)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3304      	adds	r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2103      	movs	r1, #3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
 800467c:	4603      	mov	r3, r0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <_ZN6BMP39011defaultInitEv+0x58>
		HAL_Delay(50);
 8004690:	2032      	movs	r0, #50	; 0x32
 8004692:	f005 f99d 	bl	80099d0 <HAL_Delay>
	while ((debug= SPI_read(STATUS))==0)
 8004696:	e7ea      	b.n	800466e <_ZN6BMP39011defaultInitEv+0x2e>

	if (!this->initAndCheck(OSR,OSR_OSR_P_X16|OSR_OSR_T_X2,10))
 8004698:	2300      	movs	r3, #0
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	230a      	movs	r3, #10
 800469e:	220c      	movs	r2, #12
 80046a0:	211c      	movs	r1, #28
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f84d 	bl	8004742 <_ZN6BMP39012initAndCheckEhhhb>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f083 0301 	eor.w	r3, r3, #1
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <_ZN6BMP39011defaultInitEv+0x78>
		return false;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e040      	b.n	800473a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(CONFIG,CONFIG_COEF_3,10))
 80046b8:	2300      	movs	r3, #0
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	230a      	movs	r3, #10
 80046be:	2202      	movs	r2, #2
 80046c0:	211f      	movs	r1, #31
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f83d 	bl	8004742 <_ZN6BMP39012initAndCheckEhhhb>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f083 0301 	eor.w	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <_ZN6BMP39011defaultInitEv+0x98>
		return false;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e030      	b.n	800473a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(ODR,ODR_ODR_25,10))
 80046d8:	2300      	movs	r3, #0
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	230a      	movs	r3, #10
 80046de:	2203      	movs	r2, #3
 80046e0:	211d      	movs	r1, #29
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f82d 	bl	8004742 <_ZN6BMP39012initAndCheckEhhhb>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f083 0301 	eor.w	r3, r3, #1
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <_ZN6BMP39011defaultInitEv+0xb8>
		return false;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e020      	b.n	800473a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(INT_CTRL,INT_CTRL_DRDY_EN|INT_CTRL_INT_LEVEL,10))
 80046f8:	2300      	movs	r3, #0
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	230a      	movs	r3, #10
 80046fe:	2242      	movs	r2, #66	; 0x42
 8004700:	2119      	movs	r1, #25
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f81d 	bl	8004742 <_ZN6BMP39012initAndCheckEhhhb>
 8004708:	4603      	mov	r3, r0
 800470a:	f083 0301 	eor.w	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <_ZN6BMP39011defaultInitEv+0xd8>
		return false;
 8004714:	2300      	movs	r3, #0
 8004716:	e010      	b.n	800473a <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(PWR_CTRL,PWR_CTRL_PRESS_EN|PWR_CTRL_TEMP_EN|PWR_CTRL_MODE_NORMAL,10))
 8004718:	2300      	movs	r3, #0
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	230a      	movs	r3, #10
 800471e:	2233      	movs	r2, #51	; 0x33
 8004720:	211b      	movs	r1, #27
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f80d 	bl	8004742 <_ZN6BMP39012initAndCheckEhhhb>
 8004728:	4603      	mov	r3, r0
 800472a:	f083 0301 	eor.w	r3, r3, #1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <_ZN6BMP39011defaultInitEv+0xf8>
		return false;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <_ZN6BMP39011defaultInitEv+0xfa>

	return true;
 8004738:	2301      	movs	r3, #1
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <_ZN6BMP39012initAndCheckEhhhb>:

bool BMP390::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	4608      	mov	r0, r1
 800474c:	4611      	mov	r1, r2
 800474e:	461a      	mov	r2, r3
 8004750:	4603      	mov	r3, r0
 8004752:	70fb      	strb	r3, [r7, #3]
 8004754:	460b      	mov	r3, r1
 8004756:	70bb      	strb	r3, [r7, #2]
 8004758:	4613      	mov	r3, r2
 800475a:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	787b      	ldrb	r3, [r7, #1]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	da21      	bge.n	80047ac <_ZN6BMP39012initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8004768:	7e3b      	ldrb	r3, [r7, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <_ZN6BMP39012initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	78ba      	ldrb	r2, [r7, #2]
 8004776:	78f9      	ldrb	r1, [r7, #3]
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	4798      	blx	r3

		if (SPI_read(addr)==val)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3304      	adds	r3, #4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	78fa      	ldrb	r2, [r7, #3]
 8004786:	4611      	mov	r1, r2
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
 800478c:	4603      	mov	r3, r0
 800478e:	461a      	mov	r2, r3
 8004790:	78bb      	ldrb	r3, [r7, #2]
 8004792:	4293      	cmp	r3, r2
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <_ZN6BMP39012initAndCheckEhhhb+0x62>
			return true;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e004      	b.n	80047ae <_ZN6BMP39012initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e7d9      	b.n	8004760 <_ZN6BMP39012initAndCheckEhhhb+0x1e>
	}
	return false;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <_ZN6BMP3906updateEv>:

void BMP390::update()
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
	uint8_t DATA0=SPI_read(DATA_0);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3304      	adds	r3, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2104      	movs	r1, #4
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4798      	blx	r3
 80047cc:	4603      	mov	r3, r0
 80047ce:	73fb      	strb	r3, [r7, #15]
	uint8_t DATA1=SPI_read(DATA_1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3304      	adds	r3, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2105      	movs	r1, #5
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
 80047de:	4603      	mov	r3, r0
 80047e0:	73bb      	strb	r3, [r7, #14]
	uint8_t DATA2=SPI_read(DATA_2);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3304      	adds	r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2106      	movs	r1, #6
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
 80047f0:	4603      	mov	r3, r0
 80047f2:	737b      	strb	r3, [r7, #13]

	uint8_t TEMP0=SPI_read(DATA_3);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3304      	adds	r3, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2107      	movs	r1, #7
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	4798      	blx	r3
 8004802:	4603      	mov	r3, r0
 8004804:	733b      	strb	r3, [r7, #12]
	uint8_t TEMP1=SPI_read(DATA_4);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3304      	adds	r3, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2108      	movs	r1, #8
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
 8004814:	4603      	mov	r3, r0
 8004816:	72fb      	strb	r3, [r7, #11]
	uint8_t TEMP2=SPI_read(DATA_5);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3304      	adds	r3, #4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2109      	movs	r1, #9
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	4798      	blx	r3
 8004826:	4603      	mov	r3, r0
 8004828:	72bb      	strb	r3, [r7, #10]

	this->raw_pressure = ((uint32_t)DATA2<<16)|((uint16_t)DATA1<<8)|DATA0;
 800482a:	7b7b      	ldrb	r3, [r7, #13]
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	7bba      	ldrb	r2, [r7, #14]
 8004830:	0212      	lsls	r2, r2, #8
 8004832:	431a      	orrs	r2, r3
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	this->raw_temp = ((uint32_t)TEMP2<<16)|((uint16_t)TEMP1<<8)|TEMP0;
 800483e:	7abb      	ldrb	r3, [r7, #10]
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	7afa      	ldrb	r2, [r7, #11]
 8004844:	0212      	lsls	r2, r2, #8
 8004846:	431a      	orrs	r2, r3
 8004848:	7b3b      	ldrb	r3, [r7, #12]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	this->read_calib_data();
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa6e 	bl	8004d34 <_ZN6BMP39015read_calib_dataEv>
	this->compensate_data();
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f804 	bl	8004866 <_ZN6BMP39015compensate_dataEv>
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <_ZN6BMP39015compensate_dataEv>:

void BMP390::compensate_data()
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
	this->read_calib_data();
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa60 	bl	8004d34 <_ZN6BMP39015read_calib_dataEv>
	this->compensate_temperature();
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f807 	bl	8004888 <_ZN6BMP39022compensate_temperatureEv>
	this->compensate_pressure();
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f854 	bl	8004928 <_ZN6BMP39019compensate_pressureEv>
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <_ZN6BMP39022compensate_temperatureEv>:

void BMP390::compensate_temperature()
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
    double partial_data1 = 0;
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double partial_data2 = 0;
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    partial_data1 = static_cast<double>(this->raw_temp) - quantizedCalibCoef.par_t1;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb fdd8 	bl	8000464 <__aeabi_ui2d>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80048ba:	f7fb fc95 	bl	80001e8 <__aeabi_dsub>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = partial_data1 * quantizedCalibCoef.par_t2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80048cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048d0:	f7fb fe42 	bl	8000558 <__aeabi_dmul>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->quantizedCalibCoef.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantizedCalibCoef.par_t3;
 80048dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048e4:	f7fb fe38 	bl	8000558 <__aeabi_dmul>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4610      	mov	r0, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80048f6:	f7fb fe2f 	bl	8000558 <__aeabi_dmul>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004906:	f7fb fc71 	bl	80001ec <__adddf3>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0

    this->temp = static_cast<double>(quantizedCalibCoef.t_lin);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
}
 8004920:	bf00      	nop
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <_ZN6BMP39019compensate_pressureEv>:

void BMP390::compensate_pressure()
{
 8004928:	b5b0      	push	{r4, r5, r7, lr}
 800492a:	b08e      	sub	sp, #56	; 0x38
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = this->quantizedCalibCoef.par_p6 * this->quantizedCalibCoef.t_lin;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800493c:	f7fb fe0c 	bl	8000558 <__aeabi_dmul>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p7 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800495a:	f7fb fdfd 	bl	8000558 <__aeabi_dmul>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4620      	mov	r0, r4
 8004964:	4629      	mov	r1, r5
 8004966:	f7fb fdf7 	bl	8000558 <__aeabi_dmul>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p8 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8004984:	f7fb fde8 	bl	8000558 <__aeabi_dmul>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8004996:	f7fb fddf 	bl	8000558 <__aeabi_dmul>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4620      	mov	r0, r4
 80049a0:	4629      	mov	r1, r5
 80049a2:	f7fb fdd9 	bl	8000558 <__aeabi_dmul>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out1 = this->quantizedCalibCoef.par_p5 + partial_data1 + partial_data2 + partial_data3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80049b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80049b8:	f7fb fc18 	bl	80001ec <__adddf3>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4610      	mov	r0, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049c8:	f7fb fc10 	bl	80001ec <__adddf3>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80049d4:	f7fb fc0a 	bl	80001ec <__adddf3>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    partial_data1 = this->quantizedCalibCoef.par_p2 * this->quantizedCalibCoef.t_lin;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 80049ec:	f7fb fdb4 	bl	8000558 <__aeabi_dmul>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p3 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8004a0a:	f7fb fda5 	bl	8000558 <__aeabi_dmul>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4620      	mov	r0, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7fb fd9f 	bl	8000558 <__aeabi_dmul>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p4 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8004a34:	f7fb fd90 	bl	8000558 <__aeabi_dmul>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8004a46:	f7fb fd87 	bl	8000558 <__aeabi_dmul>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f7fb fd81 	bl	8000558 <__aeabi_dmul>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out2 = static_cast<double>(this->raw_pressure) * (this->quantizedCalibCoef.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fb fcfd 	bl	8000464 <__aeabi_ui2d>
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	460d      	mov	r5, r1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8004a74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a78:	f7fb fbb8 	bl	80001ec <__adddf3>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a88:	f7fb fbb0 	bl	80001ec <__adddf3>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a98:	f7fb fba8 	bl	80001ec <__adddf3>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	f7fb fd58 	bl	8000558 <__aeabi_dmul>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	e9c7 2304 	strd	r2, r3, [r7, #16]

    partial_data1 = static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fb fcd4 	bl	8000464 <__aeabi_ui2d>
 8004abc:	4604      	mov	r4, r0
 8004abe:	460d      	mov	r5, r1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fb fccc 	bl	8000464 <__aeabi_ui2d>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	f7fb fd40 	bl	8000558 <__aeabi_dmul>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p9 + this->quantizedCalibCoef.par_p10 * this->quantizedCalibCoef.t_lin;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8004af2:	f7fb fd31 	bl	8000558 <__aeabi_dmul>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4620      	mov	r0, r4
 8004afc:	4629      	mov	r1, r5
 8004afe:	f7fb fb75 	bl	80001ec <__adddf3>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = partial_data1 * partial_data2;
 8004b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b12:	f7fb fd21 	bl	8000558 <__aeabi_dmul>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data4 = partial_data3 + (static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure)) * this->quantizedCalibCoef.par_p11;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fb fc9d 	bl	8000464 <__aeabi_ui2d>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	460d      	mov	r5, r1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fb fc95 	bl	8000464 <__aeabi_ui2d>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4629      	mov	r1, r5
 8004b42:	f7fb fd09 	bl	8000558 <__aeabi_dmul>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4614      	mov	r4, r2
 8004b4c:	461d      	mov	r5, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fb fc85 	bl	8000464 <__aeabi_ui2d>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4629      	mov	r1, r5
 8004b62:	f7fb fcf9 	bl	8000558 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004b74:	f7fb fcf0 	bl	8000558 <__aeabi_dmul>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b80:	f7fb fb34 	bl	80001ec <__adddf3>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->pressure = (partial_out1 + partial_out2 + partial_data4) / 100.0f;
 8004b8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b94:	f7fb fb2a 	bl	80001ec <__adddf3>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba4:	f7fb fb22 	bl	80001ec <__adddf3>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <_ZN6BMP39019compensate_pressureEv+0x2a4>)
 8004bb6:	f7fb fdf9 	bl	80007ac <__aeabi_ddiv>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
}
 8004bc4:	bf00      	nop
 8004bc6:	3738      	adds	r7, #56	; 0x38
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bdb0      	pop	{r4, r5, r7, pc}
 8004bcc:	40590000 	.word	0x40590000

08004bd0 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* BMP390::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8004bd0:	b5b0      	push	{r4, r5, r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3308      	adds	r3, #8
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS)!=senorsList.end())
 8004be2:	230f      	movs	r3, #15
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	f107 0310 	add.w	r3, r7, #16
 8004bea:	4619      	mov	r1, r3
 8004bec:	6838      	ldr	r0, [r7, #0]
 8004bee:	f000 fba5 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	6838      	ldr	r0, [r7, #0]
 8004bf8:	f000 fbb9 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	f107 0214 	add.w	r2, r7, #20
 8004c04:	f107 030c 	add.w	r3, r7, #12
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fbbc 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d022      	beq.n	8004c5c <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x8c>
	{
		strcat(packet,toCharArray(pressure));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f103 0408 	add.w	r4, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	1d1d      	adds	r5, r3, #4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f7fb ff45 	bl	8000ab8 <__aeabi_d2iz>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4619      	mov	r1, r3
 8004c32:	4628      	mov	r0, r5
 8004c34:	f7ff fb94 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f012 fce1 	bl	8017604 <strcat>
		strcat(packet,",");
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f103 0408 	add.w	r4, r3, #8
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7fb fac1 	bl	80001d0 <strlen>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4423      	add	r3, r4
 8004c52:	4905      	ldr	r1, [pc, #20]	; (8004c68 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x98>)
 8004c54:	461a      	mov	r2, r3
 8004c56:	460b      	mov	r3, r1
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3308      	adds	r3, #8
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bdb0      	pop	{r4, r5, r7, pc}
 8004c68:	08017814 	.word	0x08017814

08004c6c <_ZThn4_N6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	bool defaultInit();
	void update();
	int32_t getPressure();
	int32_t getTemp();
	uint8_t getChipID();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8004c6c:	f1a0 0004 	sub.w	r0, r0, #4
 8004c70:	f7ff bfae 	b.w	8004bd0 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08004c74 <_ZN6BMP3909SPI_writeEhh>:
{
	return this->SPI_read(CHIP_ID);
}

void BMP390::SPI_write(uint8_t reg,uint8_t data)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
 8004c80:	4613      	mov	r3, r2
 8004c82:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_RESET);
 8004c84:	2200      	movs	r2, #0
 8004c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c8a:	480e      	ldr	r0, [pc, #56]	; (8004cc4 <_ZN6BMP3909SPI_writeEhh+0x50>)
 8004c8c:	f006 fc3a 	bl	800b504 <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	this->spiTxBuff[1] = data;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	78ba      	ldrb	r2, [r7, #2]
 8004c9c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3354      	adds	r3, #84	; 0x54
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4619      	mov	r1, r3
 8004cac:	f008 ffd4 	bl	800dc58 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_SET);
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004cb6:	4803      	ldr	r0, [pc, #12]	; (8004cc4 <_ZN6BMP3909SPI_writeEhh+0x50>)
 8004cb8:	f006 fc24 	bl	800b504 <HAL_GPIO_WritePin>
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40020400 	.word	0x40020400

08004cc8 <_ZN6BMP3908SPI_readEh>:

uint8_t BMP390::SPI_read(uint8_t reg)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_RESET);
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004cda:	4815      	ldr	r0, [pc, #84]	; (8004d30 <_ZN6BMP3908SPI_readEh+0x68>)
 8004cdc:	f006 fc12 	bl	800b504 <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	this->spiTxBuff[1]=0x00;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 2);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3354      	adds	r3, #84	; 0x54
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4619      	mov	r1, r3
 8004d02:	f008 ffa9 	bl	800dc58 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3356      	adds	r3, #86	; 0x56
 8004d0e:	2201      	movs	r2, #1
 8004d10:	4619      	mov	r1, r3
 8004d12:	f009 f857 	bl	800ddc4 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_SET);
 8004d16:	2201      	movs	r2, #1
 8004d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d1c:	4804      	ldr	r0, [pc, #16]	; (8004d30 <_ZN6BMP3908SPI_readEh+0x68>)
 8004d1e:	f006 fbf1 	bl	800b504 <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40020400 	.word	0x40020400

08004d34 <_ZN6BMP39015read_calib_dataEv>:

void BMP390::read_calib_data()
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	; 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	double temp_var = 0;
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uint8_t NVM_PAR_T1_1_value = this->SPI_read(NVM_PAR_T1_1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2131      	movs	r1, #49	; 0x31
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
 8004d56:	4603      	mov	r3, r0
 8004d58:	77fb      	strb	r3, [r7, #31]
	uint8_t NVM_PAR_T1_2_value = this->SPI_read(NVM_PAR_T1_2);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2132      	movs	r1, #50	; 0x32
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
 8004d68:	4603      	mov	r3, r0
 8004d6a:	77bb      	strb	r3, [r7, #30]
	uint8_t NVM_PAR_T2_1_value = this->SPI_read(NVM_PAR_T2_1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3304      	adds	r3, #4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2133      	movs	r1, #51	; 0x33
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	777b      	strb	r3, [r7, #29]
	uint8_t NVM_PAR_T2_2_value = this->SPI_read(NVM_PAR_T2_2);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3304      	adds	r3, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2134      	movs	r1, #52	; 0x34
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4798      	blx	r3
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	773b      	strb	r3, [r7, #28]
	uint8_t NVM_PAR_T3_value = this->SPI_read(NVM_PAR_T3);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3304      	adds	r3, #4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2135      	movs	r1, #53	; 0x35
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	4798      	blx	r3
 8004d9e:	4603      	mov	r3, r0
 8004da0:	76fb      	strb	r3, [r7, #27]
	uint8_t NVM_PAR_P1_1_value = this->SPI_read(NVM_PAR_P1_1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3304      	adds	r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2136      	movs	r1, #54	; 0x36
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	4798      	blx	r3
 8004db0:	4603      	mov	r3, r0
 8004db2:	76bb      	strb	r3, [r7, #26]
	uint8_t NVM_PAR_P1_2_value = this->SPI_read(NVM_PAR_P1_2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3304      	adds	r3, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2137      	movs	r1, #55	; 0x37
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	767b      	strb	r3, [r7, #25]
	uint8_t NVM_PAR_P2_1_value = this->SPI_read(NVM_PAR_P2_1);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2138      	movs	r1, #56	; 0x38
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	763b      	strb	r3, [r7, #24]
	uint8_t NVM_PAR_P2_2_value = this->SPI_read(NVM_PAR_P2_2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2139      	movs	r1, #57	; 0x39
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]
	uint8_t NVM_PAR_P3_value = this->SPI_read(NVM_PAR_P3);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3304      	adds	r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	213a      	movs	r1, #58	; 0x3a
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
 8004df8:	4603      	mov	r3, r0
 8004dfa:	75bb      	strb	r3, [r7, #22]
	uint8_t NVM_PAR_P4_value = this->SPI_read(NVM_PAR_P4);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3304      	adds	r3, #4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	213b      	movs	r1, #59	; 0x3b
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	757b      	strb	r3, [r7, #21]
	uint8_t NVM_PAR_P5_1_value = this->SPI_read(NVM_PAR_P5_1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3304      	adds	r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	213c      	movs	r1, #60	; 0x3c
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	753b      	strb	r3, [r7, #20]
	uint8_t NVM_PAR_P5_2_value = this->SPI_read(NVM_PAR_P5_2);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3304      	adds	r3, #4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	213d      	movs	r1, #61	; 0x3d
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	74fb      	strb	r3, [r7, #19]
	uint8_t NVM_PAR_P6_1_value = this->SPI_read(NVM_PAR_P6_1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3304      	adds	r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	213e      	movs	r1, #62	; 0x3e
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
 8004e40:	4603      	mov	r3, r0
 8004e42:	74bb      	strb	r3, [r7, #18]
	uint8_t NVM_PAR_P6_2_value = this->SPI_read(NVM_PAR_P6_2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	213f      	movs	r1, #63	; 0x3f
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	747b      	strb	r3, [r7, #17]
	uint8_t NVM_PAR_P7_value = this->SPI_read(NVM_PAR_P7);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2140      	movs	r1, #64	; 0x40
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
 8004e64:	4603      	mov	r3, r0
 8004e66:	743b      	strb	r3, [r7, #16]
	uint8_t NVM_PAR_P8_value = this->SPI_read(NVM_PAR_P8);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2141      	movs	r1, #65	; 0x41
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	73fb      	strb	r3, [r7, #15]
	uint8_t NVM_PAR_P9_1_value = this->SPI_read(NVM_PAR_P9_1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2142      	movs	r1, #66	; 0x42
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73bb      	strb	r3, [r7, #14]
	uint8_t NVM_PAR_P9_2_value = this->SPI_read(NVM_PAR_P9_2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3304      	adds	r3, #4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2143      	movs	r1, #67	; 0x43
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	737b      	strb	r3, [r7, #13]
	uint8_t NVM_PAR_P10_value = this->SPI_read(NVM_PAR_P10);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2144      	movs	r1, #68	; 0x44
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
 8004eac:	4603      	mov	r3, r0
 8004eae:	733b      	strb	r3, [r7, #12]
	uint8_t NVM_PAR_P11_value = this->SPI_read(NVM_PAR_P11);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2145      	movs	r1, #69	; 0x45
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	72fb      	strb	r3, [r7, #11]

    this->calibCoef.par_t1 = drone::utils::functions::concatBytes(NVM_PAR_T1_2_value, NVM_PAR_T1_1_value);
 8004ec2:	7ffa      	ldrb	r2, [r7, #31]
 8004ec4:	7fbb      	ldrb	r3, [r7, #30]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fa65 	bl	8004398 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    this->calibCoef.par_t2 = drone::utils::functions::concatBytes(NVM_PAR_T2_2_value, NVM_PAR_T2_1_value);
 8004ed8:	7f7a      	ldrb	r2, [r7, #29]
 8004eda:	7f3b      	ldrb	r3, [r7, #28]
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fa5a 	bl	8004398 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    this->calibCoef.par_t3 = static_cast<int8_t>(NVM_PAR_T3_value);
 8004eee:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    this->calibCoef.par_p1 = drone::utils::functions::concatBytes(NVM_PAR_P1_2_value, NVM_PAR_P1_1_value);
 8004ef8:	7eba      	ldrb	r2, [r7, #26]
 8004efa:	7e7b      	ldrb	r3, [r7, #25]
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fa4a 	bl	8004398 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004f04:	4603      	mov	r3, r0
 8004f06:	461a      	mov	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    this->calibCoef.par_p2 = drone::utils::functions::concatBytes(NVM_PAR_P2_2_value, NVM_PAR_P2_1_value);
 8004f0e:	7e3a      	ldrb	r2, [r7, #24]
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fa3f 	bl	8004398 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    this->calibCoef.par_p3 = static_cast<int8_t>(NVM_PAR_P3_value);
 8004f24:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    this->calibCoef.par_p4 = static_cast<int8_t>(NVM_PAR_P4_value);
 8004f2e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    this->calibCoef.par_p5 = drone::utils::functions::concatBytes(NVM_PAR_P5_2_value, NVM_PAR_P5_1_value);
 8004f38:	7d3a      	ldrb	r2, [r7, #20]
 8004f3a:	7cfb      	ldrb	r3, [r7, #19]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fa2a 	bl	8004398 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004f44:	4603      	mov	r3, r0
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    this->calibCoef.par_p6 = drone::utils::functions::concatBytes(NVM_PAR_P6_2_value, NVM_PAR_P6_1_value);
 8004f4e:	7cba      	ldrb	r2, [r7, #18]
 8004f50:	7c7b      	ldrb	r3, [r7, #17]
 8004f52:	4611      	mov	r1, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fa1f 	bl	8004398 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    this->calibCoef.par_p7 = static_cast<int8_t>(NVM_PAR_P7_value);
 8004f64:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    this->calibCoef.par_p8 = static_cast<int8_t>(NVM_PAR_P8_value);
 8004f6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    this->calibCoef.par_p9 = drone::utils::functions::concatBytes(NVM_PAR_P9_2_value, NVM_PAR_P9_1_value);
 8004f78:	7bba      	ldrb	r2, [r7, #14]
 8004f7a:	7b7b      	ldrb	r3, [r7, #13]
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fa0a 	bl	8004398 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    this->calibCoef.par_p10 = static_cast<int8_t>(NVM_PAR_P10_value);
 8004f8e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    this->calibCoef.par_p11 = static_cast<int8_t>(NVM_PAR_P11_value);
 8004f98:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

    temp_var = 0.00390625f;
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	4b90      	ldr	r3, [pc, #576]	; (80051e8 <_ZN6BMP39015read_calib_dataEv+0x4b4>)
 8004fa8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t1 = static_cast<double>(this->calibCoef.par_t1) / temp_var;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fb fa56 	bl	8000464 <__aeabi_ui2d>
 8004fb8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fbc:	f7fb fbf6 	bl	80007ac <__aeabi_ddiv>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    temp_var = 1073741824.0f;
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	4b87      	ldr	r3, [pc, #540]	; (80051ec <_ZN6BMP39015read_calib_dataEv+0x4b8>)
 8004fd0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t2 = static_cast<double>(this->calibCoef.par_t2) / temp_var;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb fa42 	bl	8000464 <__aeabi_ui2d>
 8004fe0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fe4:	f7fb fbe2 	bl	80007ac <__aeabi_ddiv>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    temp_var = 281474976710656.0f;
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	4b7e      	ldr	r3, [pc, #504]	; (80051f0 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004ff8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t3 = static_cast<double>(this->calibCoef.par_t3) / temp_var;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb fa3e 	bl	8000484 <__aeabi_i2d>
 8005008:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800500c:	f7fb fbce 	bl	80007ac <__aeabi_ddiv>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    temp_var = 1048576.0f;
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	4b75      	ldr	r3, [pc, #468]	; (80051f4 <_ZN6BMP39015read_calib_dataEv+0x4c0>)
 8005020:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p1 = static_cast<double>(this->calibCoef.par_p1 - 16384) / temp_var;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 800502a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800502e:	4618      	mov	r0, r3
 8005030:	f7fb fa28 	bl	8000484 <__aeabi_i2d>
 8005034:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005038:	f7fb fbb8 	bl	80007ac <__aeabi_ddiv>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    temp_var = 536870912.0f;
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	4b6b      	ldr	r3, [pc, #428]	; (80051f8 <_ZN6BMP39015read_calib_dataEv+0x4c4>)
 800504c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p2 = static_cast<double>(this->calibCoef.par_p2 - 16384) / temp_var;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8005056:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800505a:	4618      	mov	r0, r3
 800505c:	f7fb fa12 	bl	8000484 <__aeabi_i2d>
 8005060:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005064:	f7fb fba2 	bl	80007ac <__aeabi_ddiv>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    temp_var = 4294967296.0f;
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	4b61      	ldr	r3, [pc, #388]	; (80051fc <_ZN6BMP39015read_calib_dataEv+0x4c8>)
 8005078:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p3 = static_cast<double>(this->calibCoef.par_p3) / temp_var;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f993 3062 	ldrsb.w	r3, [r3, #98]	; 0x62
 8005082:	4618      	mov	r0, r3
 8005084:	f7fb f9fe 	bl	8000484 <__aeabi_i2d>
 8005088:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800508c:	f7fb fb8e 	bl	80007ac <__aeabi_ddiv>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    temp_var = 137438953472.0f;
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	4b58      	ldr	r3, [pc, #352]	; (8005200 <_ZN6BMP39015read_calib_dataEv+0x4cc>)
 80050a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p4 = static_cast<double>(this->calibCoef.par_p4) / temp_var;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fb f9ea 	bl	8000484 <__aeabi_i2d>
 80050b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050b4:	f7fb fb7a 	bl	80007ac <__aeabi_ddiv>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    temp_var = 0.125f;
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80050ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p5 = static_cast<double>(this->calibCoef.par_p5) / temp_var;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fb f9c5 	bl	8000464 <__aeabi_ui2d>
 80050da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050de:	f7fb fb65 	bl	80007ac <__aeabi_ddiv>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    temp_var = 64.0f;
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	4b44      	ldr	r3, [pc, #272]	; (8005204 <_ZN6BMP39015read_calib_dataEv+0x4d0>)
 80050f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p6 = static_cast<double>(this->calibCoef.par_p6) / temp_var;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fb f9b1 	bl	8000464 <__aeabi_ui2d>
 8005102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005106:	f7fb fb51 	bl	80007ac <__aeabi_ddiv>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    temp_var = 256.0f;
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <_ZN6BMP39015read_calib_dataEv+0x4d4>)
 800511a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p7 = static_cast<double>(this->calibCoef.par_p7) / temp_var;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f993 3068 	ldrsb.w	r3, [r3, #104]	; 0x68
 8005124:	4618      	mov	r0, r3
 8005126:	f7fb f9ad 	bl	8000484 <__aeabi_i2d>
 800512a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800512e:	f7fb fb3d 	bl	80007ac <__aeabi_ddiv>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    temp_var = 32768.0f;
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	4b32      	ldr	r3, [pc, #200]	; (800520c <_ZN6BMP39015read_calib_dataEv+0x4d8>)
 8005142:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p8 = static_cast<double>(this->calibCoef.par_p8) / temp_var;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800514c:	4618      	mov	r0, r3
 800514e:	f7fb f999 	bl	8000484 <__aeabi_i2d>
 8005152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005156:	f7fb fb29 	bl	80007ac <__aeabi_ddiv>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    temp_var = 281474976710656.0f;
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	4b21      	ldr	r3, [pc, #132]	; (80051f0 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 800516a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p9 = static_cast<double>(this->calibCoef.par_p9) / temp_var;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8005174:	4618      	mov	r0, r3
 8005176:	f7fb f985 	bl	8000484 <__aeabi_i2d>
 800517a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800517e:	f7fb fb15 	bl	80007ac <__aeabi_ddiv>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    temp_var = 281474976710656.0f;
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8005192:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p10 = static_cast<double>(this->calibCoef.par_p10) / temp_var;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 800519c:	4618      	mov	r0, r3
 800519e:	f7fb f971 	bl	8000484 <__aeabi_i2d>
 80051a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051a6:	f7fb fb01 	bl	80007ac <__aeabi_ddiv>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    temp_var = 36893488147419103232.0f;
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80051bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p11 = static_cast<double>(this->calibCoef.par_p11) / temp_var;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fb f95c 	bl	8000484 <__aeabi_i2d>
 80051cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051d0:	f7fb faec 	bl	80007ac <__aeabi_ddiv>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
}
 80051de:	bf00      	nop
 80051e0:	3728      	adds	r7, #40	; 0x28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	3f700000 	.word	0x3f700000
 80051ec:	41d00000 	.word	0x41d00000
 80051f0:	42f00000 	.word	0x42f00000
 80051f4:	41300000 	.word	0x41300000
 80051f8:	41c00000 	.word	0x41c00000
 80051fc:	41f00000 	.word	0x41f00000
 8005200:	42400000 	.word	0x42400000
 8005204:	40500000 	.word	0x40500000
 8005208:	40700000 	.word	0x40700000
 800520c:	40e00000 	.word	0x40e00000

08005210 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 800521a:	2301      	movs	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	fb03 f303 	mul.w	r3, r3, r3
 8005224:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	429a      	cmp	r2, r3
 8005240:	d201      	bcs.n	8005246 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	e01d      	b.n	8005282 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	429a      	cmp	r2, r3
 800524c:	d202      	bcs.n	8005254 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	3301      	adds	r3, #1
 8005252:	e016      	b.n	8005282 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	429a      	cmp	r2, r3
 800525a:	d202      	bcs.n	8005262 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3302      	adds	r3, #2
 8005260:	e00f      	b.n	8005282 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	429a      	cmp	r2, r3
 8005268:	d202      	bcs.n	8005270 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	3303      	adds	r3, #3
 800526e:	e008      	b.n	8005282 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	3304      	adds	r3, #4
 800527e:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8005280:	e7db      	b.n	800523a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8005282:	4618      	mov	r0, r3
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8005290:	b480      	push	{r7}
 8005292:	b089      	sub	sp, #36	; 0x24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	3b01      	subs	r3, #1
 80052a0:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b63      	cmp	r3, #99	; 0x63
 80052a6:	d925      	bls.n	80052f4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80052ac:	fba3 1302 	umull	r1, r3, r3, r2
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	2164      	movs	r1, #100	; 0x64
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	440b      	add	r3, r1
 80052d4:	4918      	ldr	r1, [pc, #96]	; (8005338 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80052d6:	5c8a      	ldrb	r2, [r1, r2]
 80052d8:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3b01      	subs	r3, #1
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	4915      	ldr	r1, [pc, #84]	; (8005338 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	440a      	add	r2, r1
 80052e8:	7812      	ldrb	r2, [r2, #0]
 80052ea:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3b02      	subs	r3, #2
 80052f0:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80052f2:	e7d6      	b.n	80052a2 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b09      	cmp	r3, #9
 80052f8:	d910      	bls.n	800531c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	490b      	ldr	r1, [pc, #44]	; (8005338 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800530a:	5c8a      	ldrb	r2, [r1, r2]
 800530c:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 800530e:	4a0a      	ldr	r2, [pc, #40]	; (8005338 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 800531a:	e005      	b.n	8005328 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	3330      	adds	r3, #48	; 0x30
 8005322:	b2da      	uxtb	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	701a      	strb	r2, [r3, #0]
    }
 8005328:	bf00      	nop
 800532a:	3724      	adds	r7, #36	; 0x24
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	51eb851f 	.word	0x51eb851f
 8005338:	0801788c 	.word	0x0801788c

0800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 f830 	bl	80053b0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005350:	4603      	mov	r3, r0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	f107 020c 	add.w	r2, r7, #12
 8005358:	f107 0308 	add.w	r3, r7, #8
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f862 	bl	8005428 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4618      	mov	r0, r3
 800537a:	f000 f865 	bl	8005448 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 800537e:	4603      	mov	r3, r0
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f855 	bl	800546a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 80053c0:	4604      	mov	r4, r0
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f85d 	bl	8005482 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 80053c8:	4602      	mov	r2, r0
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	4621      	mov	r1, r4
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f863 	bl	800549a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>
 80053d4:	4603      	mov	r3, r0
 80053d6:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f88f 	bl	80054fc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 80053de:	4603      	mov	r3, r0
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	f107 020c 	add.w	r2, r7, #12
 80053e6:	f107 0308 	add.w	r3, r7, #8
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f896 	bl	800551e <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80053f2:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10d      	bne.n	8005414 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 80053f8:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 80053fa:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f8a2 	bl	8005546 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	4620      	mov	r0, r4
 800540a:	f000 f8a8 	bl	800555e <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d004      	beq.n	800541e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f871 	bl	80054fc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 800541a:	4603      	mov	r3, r0
 800541c:	e000      	b.n	8005420 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x70>
 800541e:	68bb      	ldr	r3, [r7, #8]
    }
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	bd90      	pop	{r4, r7, pc}

08005428 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	1d1a      	adds	r2, r3, #4
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f894 	bl	8005588 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800549a:	b590      	push	{r4, r7, lr}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01b      	beq.n	80054e6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80054ae:	68fc      	ldr	r4, [r7, #12]
 80054b0:	68b8      	ldr	r0, [r7, #8]
 80054b2:	f000 f878 	bl	80055a6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 80054b6:	4603      	mov	r3, r0
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 f84e 	bl	800555e <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f083 0301 	eor.w	r3, r3, #1
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d006      	beq.n	80054dc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	607b      	str	r3, [r7, #4]
 80054d2:	68b8      	ldr	r0, [r7, #8]
 80054d4:	f000 f87a 	bl	80055cc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 80054d8:	60b8      	str	r0, [r7, #8]
 80054da:	e7e5      	b.n	80054a8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
	  __x = _S_right(__x);
 80054dc:	68b8      	ldr	r0, [r7, #8]
 80054de:	f000 f881 	bl	80055e4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 80054e2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80054e4:	e7e0      	b.n	80054a8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
      return iterator(__y);
 80054e6:	f107 0314 	add.w	r3, r7, #20
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 f885 	bl	80055fc <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 80054f2:	697b      	ldr	r3, [r7, #20]
    }
 80054f4:	4618      	mov	r0, r3
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd90      	pop	{r4, r7, pc}

080054fc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	1d1a      	adds	r2, r3, #4
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f874 	bl	80055fc <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f829 	bl	80055a6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8005554:	4603      	mov	r3, r0
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	bfb4      	ite	lt
 8005576:	2301      	movlt	r3, #1
 8005578:	2300      	movge	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>:
      _S_key(_Const_Link_type __x)
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f833 	bl	800561a <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 80055b4:	4602      	mov	r2, r0
 80055b6:	f107 030c 	add.w	r3, r7, #12
 80055ba:	4611      	mov	r1, r2
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f83a 	bl	8005636 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 80055c2:	4603      	mov	r3, r0
      }
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr() const
 800561a:	b580      	push	{r7, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3310      	adds	r3, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f811 	bl	800564e <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 800562c:	4603      	mov	r3, r0
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>:
      operator()(const _Tp& __x) const
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
      { return __x; }
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _M_ptr() const noexcept
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f805 	bl	8005666 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 800565c:	4603      	mov	r3, r0
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() const noexcept
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <_ZN17BatteryManagement3runEv>:
//#include "../BatteryManagement_lib/BaterryManagement.hpp"

#include "BatteryManagement.hpp"

void BatteryManagement::run()
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	tick_counter++;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60da      	str	r2, [r3, #12]
	toPercentage();
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f816 	bl	80056c0 <_ZN17BatteryManagement12toPercentageEv>

	if (tick_counter>=frequency_tick)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	8912      	ldrh	r2, [r2, #8]
 800569c:	4293      	cmp	r3, r2
 800569e:	d30a      	bcc.n	80056b6 <_ZN17BatteryManagement3runEv+0x3a>
	{
		HAL_ADC_Start_DMA(adc_port, &batteryVal,1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a18      	ldr	r0, [r3, #32]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3310      	adds	r3, #16
 80056a8:	2201      	movs	r2, #1
 80056aa:	4619      	mov	r1, r3
 80056ac:	f004 f9f8 	bl	8009aa0 <HAL_ADC_Start_DMA>
		if (batteryVal<=BATERRY_MIN_3V2)
		{
			//buzz->beep(100,1,1,100);
		}

		tick_counter = 0;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	60da      	str	r2, [r3, #12]
	}
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <_ZN17BatteryManagement12toPercentageEv>:

void BatteryManagement::toPercentage()
{
 80056c0:	b5b0      	push	{r4, r5, r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
	if(batteryVal>BATERRY_MAX_4V2)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	8812      	ldrh	r2, [r2, #0]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d906      	bls.n	80056e2 <_ZN17BatteryManagement12toPercentageEv+0x22>
	{
		batteryPercentage = 100;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a50      	ldr	r2, [pc, #320]	; (8005818 <_ZN17BatteryManagement12toPercentageEv+0x158>)
 80056d8:	615a      	str	r2, [r3, #20]
		batteryVoltage = 4.2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a4f      	ldr	r2, [pc, #316]	; (800581c <_ZN17BatteryManagement12toPercentageEv+0x15c>)
 80056de:	619a      	str	r2, [r3, #24]
	else
	{
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
	}
}
 80056e0:	e081      	b.n	80057e6 <_ZN17BatteryManagement12toPercentageEv+0x126>
	else if(batteryVal<BATERRY_MIN_3V2)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	8852      	ldrh	r2, [r2, #2]
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d207      	bcs.n	80056fe <_ZN17BatteryManagement12toPercentageEv+0x3e>
		batteryPercentage = 0;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	615a      	str	r2, [r3, #20]
		batteryVoltage = 3.2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a49      	ldr	r2, [pc, #292]	; (8005820 <_ZN17BatteryManagement12toPercentageEv+0x160>)
 80056fa:	619a      	str	r2, [r3, #24]
}
 80056fc:	e073      	b.n	80057e6 <_ZN17BatteryManagement12toPercentageEv+0x126>
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	4618      	mov	r0, r3
 800570c:	f7fa feaa 	bl	8000464 <__aeabi_ui2d>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	a136      	add	r1, pc, #216	; (adr r1, 80057f0 <_ZN17BatteryManagement12toPercentageEv+0x130>)
 8005716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800571a:	f7fa fd65 	bl	80001e8 <__aeabi_dsub>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4614      	mov	r4, r2
 8005724:	461d      	mov	r5, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	885b      	ldrh	r3, [r3, #2]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	4618      	mov	r0, r3
 8005734:	f7fa fea6 	bl	8000484 <__aeabi_i2d>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	f7fb f834 	bl	80007ac <__aeabi_ddiv>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4610      	mov	r0, r2
 800574a:	4619      	mov	r1, r3
 800574c:	a32a      	add	r3, pc, #168	; (adr r3, 80057f8 <_ZN17BatteryManagement12toPercentageEv+0x138>)
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa fd4b 	bl	80001ec <__adddf3>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4610      	mov	r0, r2
 800575c:	4619      	mov	r1, r3
 800575e:	f7fb f9d3 	bl	8000b08 <__aeabi_d2f>
 8005762:	4602      	mov	r2, r0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	619a      	str	r2, [r3, #24]
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	4618      	mov	r0, r3
 800576e:	f7fa fe9b 	bl	80004a8 <__aeabi_f2d>
 8005772:	a323      	add	r3, pc, #140	; (adr r3, 8005800 <_ZN17BatteryManagement12toPercentageEv+0x140>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fb f818 	bl	80007ac <__aeabi_ddiv>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	ec43 2b17 	vmov	d7, r2, r3
 8005784:	2050      	movs	r0, #80	; 0x50
 8005786:	eeb0 0a47 	vmov.f32	s0, s14
 800578a:	eef0 0a67 	vmov.f32	s1, s15
 800578e:	f000 f866 	bl	800585e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005792:	ec51 0b10 	vmov	r0, r1, d0
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	4b22      	ldr	r3, [pc, #136]	; (8005824 <_ZN17BatteryManagement12toPercentageEv+0x164>)
 800579c:	f7fa fd26 	bl	80001ec <__adddf3>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	ec43 2b17 	vmov	d7, r2, r3
 80057a8:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8005808 <_ZN17BatteryManagement12toPercentageEv+0x148>
 80057ac:	eeb0 0a47 	vmov.f32	s0, s14
 80057b0:	eef0 0a67 	vmov.f32	s1, s15
 80057b4:	f00f ff86 	bl	80156c4 <pow>
 80057b8:	ec53 2b10 	vmov	r2, r3, d0
 80057bc:	a114      	add	r1, pc, #80	; (adr r1, 8005810 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 80057be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057c2:	f7fa fff3 	bl	80007ac <__aeabi_ddiv>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	a111      	add	r1, pc, #68	; (adr r1, 8005810 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 80057cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057d0:	f7fa fd0a 	bl	80001e8 <__aeabi_dsub>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	f7fb f994 	bl	8000b08 <__aeabi_d2f>
 80057e0:	4602      	mov	r2, r0
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	615a      	str	r2, [r3, #20]
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bdb0      	pop	{r4, r5, r7, pc}
 80057ee:	bf00      	nop
 80057f0:	00000000 	.word	0x00000000
 80057f4:	407c2000 	.word	0x407c2000
 80057f8:	9999999a 	.word	0x9999999a
 80057fc:	40099999 	.word	0x40099999
 8005800:	9999999a 	.word	0x9999999a
 8005804:	400d9999 	.word	0x400d9999
 8005808:	51eb851f 	.word	0x51eb851f
 800580c:	3fc51eb8 	.word	0x3fc51eb8
 8005810:	00000000 	.word	0x00000000
 8005814:	405ec000 	.word	0x405ec000
 8005818:	42c80000 	.word	0x42c80000
 800581c:	40866666 	.word	0x40866666
 8005820:	404ccccd 	.word	0x404ccccd
 8005824:	3ff00000 	.word	0x3ff00000

08005828 <_ZN17BatteryManagement8msToTickEt>:
{
	return batteryPercentage;
}

uint16_t BatteryManagement::msToTick(uint16_t ms)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 8005834:	887b      	ldrh	r3, [r7, #2]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	ed93 7a01 	vldr	s14, [r3, #4]
 8005844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800584c:	ee17 3a90 	vmov	r3, s15
 8005850:	b29b      	uxth	r3, r3
}
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	ed87 0b02 	vstr	d0, [r7, #8]
 8005868:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fa fe0a 	bl	8000484 <__aeabi_i2d>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	ec43 2b11 	vmov	d1, r2, r3
 8005878:	ed97 0b02 	vldr	d0, [r7, #8]
 800587c:	f00f ff22 	bl	80156c4 <pow>
 8005880:	eeb0 7a40 	vmov.f32	s14, s0
 8005884:	eef0 7a60 	vmov.f32	s15, s1
    }
 8005888:	eeb0 0a47 	vmov.f32	s0, s14
 800588c:	eef0 0a67 	vmov.f32	s1, s15
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <_ZN6Buzzer4beepEiii>:
 */

#include "Buzzer.hpp"

bool Buzzer::beep(int duration_ms,int freq_ms,int repetition_count)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	603b      	str	r3, [r7, #0]
	if (!this->busy)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	7d9b      	ldrb	r3, [r3, #22]
 80058a8:	f083 0301 	eor.w	r3, r3, #1
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d029      	beq.n	8005906 <_ZN6Buzzer4beepEiii+0x70>
	{
		this->busy = true;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	759a      	strb	r2, [r3, #22]

		this->counterEnd = this->msToTick(duration_ms);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	4619      	mov	r1, r3
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f877 	bl	80059b2 <_ZN6Buzzer8msToTickEt>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	825a      	strh	r2, [r3, #18]
		this->freqTick = this->msToTick(freq_ms);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f86d 	bl	80059b2 <_ZN6Buzzer8msToTickEt>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	819a      	strh	r2, [r3, #12]
		this->repetitions = this->freqTick * repetition_count * 2U - 1U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	899a      	ldrh	r2, [r3, #12]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	fb12 f303 	smulbb	r3, r2, r3
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	829a      	strh	r2, [r3, #20]

		Buzz_on();
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f874 	bl	80059e8 <_ZN6Buzzer7Buzz_onEv>

		return busy;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	7d9b      	ldrb	r3, [r3, #22]
 8005904:	e001      	b.n	800590a <_ZN6Buzzer4beepEiii+0x74>
	}

	return busy;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	7d9b      	ldrb	r3, [r3, #22]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <_ZN6Buzzer3runEv>:

void Buzzer::run()
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
	if (this->busy)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	7d9b      	ldrb	r3, [r3, #22]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d032      	beq.n	8005988 <_ZN6Buzzer3runEv+0x76>
	{
		this->counterStart++;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8a1b      	ldrh	r3, [r3, #16]
 8005926:	3301      	adds	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	821a      	strh	r2, [r3, #16]

		if ((this->repetitions > 0U) && (this->freqTick!=0U))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8a9b      	ldrh	r3, [r3, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01c      	beq.n	8005970 <_ZN6Buzzer3runEv+0x5e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	899b      	ldrh	r3, [r3, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d018      	beq.n	8005970 <_ZN6Buzzer3runEv+0x5e>
		{
			if (!((this->counterStart/this->freqTick) % 2U))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8a1a      	ldrh	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	899b      	ldrh	r3, [r3, #12]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	b29b      	uxth	r3, r3
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d103      	bne.n	800595c <_ZN6Buzzer3runEv+0x4a>
			{
				this->Buzz_on();
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f847 	bl	80059e8 <_ZN6Buzzer7Buzz_onEv>
 800595a:	e002      	b.n	8005962 <_ZN6Buzzer3runEv+0x50>
			}
			else
			{
				this->Buzz_off();
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f853 	bl	8005a08 <_ZN6Buzzer8Buzz_offEv>
			}
			this->repetitions--;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8a9b      	ldrh	r3, [r3, #20]
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	829a      	strh	r2, [r3, #20]
 800596e:	e002      	b.n	8005976 <_ZN6Buzzer3runEv+0x64>
		} else
		{
			this->Buzz_off();
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f849 	bl	8005a08 <_ZN6Buzzer8Buzz_offEv>
		}

		if (this->counterStart >= this->counterEnd)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8a1a      	ldrh	r2, [r3, #16]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8a5b      	ldrh	r3, [r3, #18]
 800597e:	429a      	cmp	r2, r3
 8005980:	d302      	bcc.n	8005988 <_ZN6Buzzer3runEv+0x76>
		{
			this->stop();
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f804 	bl	8005990 <_ZN6Buzzer4stopEv>
		}
	}
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <_ZN6Buzzer4stopEv>:

void Buzzer::stop()
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	this->busy = false;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	759a      	strb	r2, [r3, #22]
	this->counterStart = 0U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	821a      	strh	r2, [r3, #16]
	this->Buzz_off();
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f82f 	bl	8005a08 <_ZN6Buzzer8Buzz_offEv>
}
 80059aa:	bf00      	nop
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <_ZN6Buzzer8msToTickEt>:
{
	return busy;
}

uint16_t Buzzer::msToTick(uint16_t ms)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	ee07 3a90 	vmov	s15, r3
 80059c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80059ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059d6:	ee17 3a90 	vmov	r3, s15
 80059da:	b29b      	uxth	r3, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <_ZN6Buzzer7Buzz_onEv>:

void Buzzer::Buzz_on()
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
//#if DISABLE_ALL_BEEPS == 5
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80059f0:	2201      	movs	r2, #1
 80059f2:	2110      	movs	r1, #16
 80059f4:	4803      	ldr	r0, [pc, #12]	; (8005a04 <_ZN6Buzzer7Buzz_onEv+0x1c>)
 80059f6:	f005 fd85 	bl	800b504 <HAL_GPIO_WritePin>
//#endif
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40020000 	.word	0x40020000

08005a08 <_ZN6Buzzer8Buzz_offEv>:

void Buzzer::Buzz_off()
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8005a10:	2200      	movs	r2, #0
 8005a12:	2110      	movs	r1, #16
 8005a14:	4803      	ldr	r0, [pc, #12]	; (8005a24 <_ZN6Buzzer8Buzz_offEv+0x1c>)
 8005a16:	f005 fd75 	bl	800b504 <HAL_GPIO_WritePin>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40020000 	.word	0x40020000

08005a28 <_ZN7Timeout15setTimeoutValueEh>:
	uint8_t* getTimeoutCounter()
	{
		return &timeout_counter;
	}

	void setTimeoutValue(uint8_t value)
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
	{
		timeout_value = value;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	709a      	strb	r2, [r3, #2]
	}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <_ZN7TimeoutC1Ev>:
class Timeout
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	705a      	strb	r2, [r3, #1]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	709a      	strb	r2, [r3, #2]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>:
 *      Author: DragosDarie
 */

#include "FrSkyRX.hpp"

FrSkyRX::FrSkyRX(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,Buzzer *buzz,uint8_t timeout):
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	603b      	str	r3, [r7, #0]
	currentState {FrSkyRXState::NOT_CONNECTED}
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff ffe1 	bl	8005a46 <_ZN7TimeoutC1Ev>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3308      	adds	r3, #8
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fcc1 	bl	8004410 <_ZN12CallsCounterC1Ev>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	220f      	movs	r2, #15
 8005a92:	761a      	strb	r2, [r3, #24]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	765a      	strb	r2, [r3, #25]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
{
	FrSkyRX::uart_port = uart_port;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	61da      	str	r2, [r3, #28]
	FrSkyRX::uart_port_dma=uart_port_dma;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]
	FrSkyRX::buzz=buzz;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24

	setTimeoutValue(timeout);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	7e3a      	ldrb	r2, [r7, #24]
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff ffac 	bl	8005a28 <_ZN7Timeout15setTimeoutValueEh>
}
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <_ZN7FrSkyRX5beginEv>:

void FrSkyRX::begin()
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69d8      	ldr	r0, [r3, #28]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3328      	adds	r3, #40	; 0x28
 8005aea:	2219      	movs	r2, #25
 8005aec:	4619      	mov	r1, r3
 8005aee:	f009 feeb 	bl	800f8c8 <HAL_UART_Receive_DMA>
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <_ZN7FrSkyRX6updateEv>:

void FrSkyRX::update()
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[24]==this->END_BIT);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7e1b      	ldrb	r3, [r3, #24]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d108      	bne.n	8005b22 <_ZN7FrSkyRX6updateEv+0x28>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7e5b      	ldrb	r3, [r3, #25]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d101      	bne.n	8005b22 <_ZN7FrSkyRX6updateEv+0x28>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <_ZN7FrSkyRX6updateEv+0x2a>
 8005b22:	2300      	movs	r3, #0
 8005b24:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <_ZN7FrSkyRX6updateEv+0x54>
	{
		this->updateValues();
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f96a 	bl	8005e06 <_ZN7FrSkyRX12updateValuesEv>
		this->processStateMachine();
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f85c 	bl	8005bf0 <_ZN7FrSkyRX19processStateMachineEv>

		if (this->isDisconnected())
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fb37 	bl	80061ac <_ZNK7FrSkyRX14isDisconnectedEv>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d036      	beq.n	8005bb2 <_ZN7FrSkyRX6updateEv+0xb8>
			this->currentState = FrSkyRXState::TIMEOUT;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2204      	movs	r2, #4
 8005b48:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8005b4c:	e031      	b.n	8005bb2 <_ZN7FrSkyRX6updateEv+0xb8>
	}
	else if (this->wrongDataReceived==false)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d12c      	bne.n	8005bb2 <_ZN7FrSkyRX6updateEv+0xb8>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	73fb      	strb	r3, [r7, #15]
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b17      	cmp	r3, #23
 8005b60:	d827      	bhi.n	8005bb2 <_ZN7FrSkyRX6updateEv+0xb8>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	4413      	add	r3, r2
 8005b68:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	7e5b      	ldrb	r3, [r3, #25]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d11a      	bne.n	8005baa <_ZN7FrSkyRX6updateEv+0xb0>
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	3301      	adds	r3, #1
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7e1b      	ldrb	r3, [r3, #24]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d110      	bne.n	8005baa <_ZN7FrSkyRX6updateEv+0xb0>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69d8      	ldr	r0, [r3, #28]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	331a      	adds	r3, #26
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f009 fe94 	bl	800f8c8 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				return;
 8005ba8:	e01e      	b.n	8005be8 <_ZN7FrSkyRX6updateEv+0xee>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	3301      	adds	r3, #1
 8005bae:	73fb      	strb	r3, [r7, #15]
 8005bb0:	e7d4      	b.n	8005b5c <_ZN7FrSkyRX6updateEv+0x62>
			}
		}
	}

	if (this->wrongDataReceived == true)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d103      	bne.n	8005bc4 <_ZN7FrSkyRX6updateEv+0xca>
		this->wrongDataReceived = false;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69d8      	ldr	r0, [r3, #28]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3328      	adds	r3, #40	; 0x28
 8005bcc:	2219      	movs	r2, #25
 8005bce:	4619      	mov	r1, r3
 8005bd0:	f009 fe7a 	bl	800f8c8 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0208 	bic.w	r2, r2, #8
 8005be6:	601a      	str	r2, [r3, #0]
}
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <_ZN7FrSkyRX19processStateMachineEv>:

void FrSkyRX::processStateMachine()
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	switch (this->currentState)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	f200 80e7 	bhi.w	8005dd2 <_ZN7FrSkyRX19processStateMachineEv+0x1e2>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <_ZN7FrSkyRX19processStateMachineEv+0x1c>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c21 	.word	0x08005c21
 8005c10:	08005c75 	.word	0x08005c75
 8005c14:	08005cab 	.word	0x08005cab
 8005c18:	08005cef 	.word	0x08005cef
 8005c1c:	08005dc9 	.word	0x08005dc9
	{
	case FrSkyRXState::NOT_CONNECTED:
		if ((this->lu == 0U) && (this->throttle < 300U))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d11b      	bne.n	8005c62 <_ZN7FrSkyRX19processStateMachineEv+0x72>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8005c30:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8005ddc <_ZN7FrSkyRX19processStateMachineEv+0x1ec>
 8005c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3c:	d511      	bpl.n	8005c62 <_ZN7FrSkyRX19processStateMachineEv+0x72>
		{
			this->currentState = FrSkyRXState::CONNECTED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			buzz->stop();
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fea0 	bl	8005990 <_ZN6Buzzer4stopEv>
			buzz->beep(600U,100U,3U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005c54:	2303      	movs	r3, #3
 8005c56:	2264      	movs	r2, #100	; 0x64
 8005c58:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005c5c:	f7ff fe1b 	bl	8005896 <_ZN6Buzzer4beepEiii>
		}
		else
		{
			buzz->beep(3000U,100U,2U);
		}
		break;
 8005c60:	e0b7      	b.n	8005dd2 <_ZN7FrSkyRX19processStateMachineEv+0x1e2>
			buzz->beep(3000U,100U,2U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005c66:	2302      	movs	r3, #2
 8005c68:	2264      	movs	r2, #100	; 0x64
 8005c6a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8005c6e:	f7ff fe12 	bl	8005896 <_ZN6Buzzer4beepEiii>
		break;
 8005c72:	e0ae      	b.n	8005dd2 <_ZN7FrSkyRX19processStateMachineEv+0x1e2>
	case FrSkyRXState::CONNECTED:
		if (this->lu == 1U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	f040 80a6 	bne.w	8005dcc <_ZN7FrSkyRX19processStateMachineEv+0x1dc>
		{
			TIM3 -> CCR1 = 3000;
 8005c80:	4b57      	ldr	r3, [pc, #348]	; (8005de0 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>)
 8005c82:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005c86:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3000;
 8005c88:	4b55      	ldr	r3, [pc, #340]	; (8005de0 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>)
 8005c8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3000;
 8005c90:	4b53      	ldr	r3, [pc, #332]	; (8005de0 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>)
 8005c92:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005c96:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3000;
 8005c98:	4b51      	ldr	r3, [pc, #324]	; (8005de0 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>)
 8005c9a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40
			this->currentState = FrSkyRXState::ARMED;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		}
		break;
 8005ca8:	e090      	b.n	8005dcc <_ZN7FrSkyRX19processStateMachineEv+0x1dc>
	case FrSkyRXState::ARMED:
		if (this->lu == 2U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	f040 808d 	bne.w	8005dd0 <_ZN7FrSkyRX19processStateMachineEv+0x1e0>
		{
			TIM3 -> CCR1 = 3300;
 8005cb6:	4b4a      	ldr	r3, [pc, #296]	; (8005de0 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>)
 8005cb8:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005cbc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3300;
 8005cbe:	4b48      	ldr	r3, [pc, #288]	; (8005de0 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>)
 8005cc0:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3300;
 8005cc6:	4b46      	ldr	r3, [pc, #280]	; (8005de0 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>)
 8005cc8:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005ccc:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3300;
 8005cce:	4b44      	ldr	r3, [pc, #272]	; (8005de0 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>)
 8005cd0:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
			buzz->beep(200U,100U,1U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005cda:	2301      	movs	r3, #1
 8005cdc:	2264      	movs	r2, #100	; 0x64
 8005cde:	21c8      	movs	r1, #200	; 0xc8
 8005ce0:	f7ff fdd9 	bl	8005896 <_ZN6Buzzer4beepEiii>
			this->currentState = FrSkyRXState::READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		}
		break;
 8005cec:	e070      	b.n	8005dd0 <_ZN7FrSkyRX19processStateMachineEv+0x1e0>
	case FrSkyRXState::READY:
		target_roll = -static_cast<float>(mid_position - raw_roll) * roll_scaleFactor;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8005cf4:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005cf8:	ee07 3a90 	vmov	s15, r3
 8005cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d00:	eef1 7a67 	vneg.f32	s15, s15
 8005d04:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005de4 <_ZN7FrSkyRX19processStateMachineEv+0x1f4>
 8005d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		target_pitch = static_cast<float>(mid_position - raw_pitch) * pitch_scaleFactor;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8005d18:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d24:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005de4 <_ZN7FrSkyRX19processStateMachineEv+0x1f4>
 8005d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		target_yaw = static_cast<float>(mid_position - raw_yaw) * yaw_scaleFactor;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8005d38:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d44:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005de8 <_ZN7FrSkyRX19processStateMachineEv+0x1f8>
 8005d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		target_roll = ((target_roll > 2.0F) || (target_roll < -2.0F)) ? target_roll : 0.0F;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8005d58:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d64:	dc09      	bgt.n	8005d7a <_ZN7FrSkyRX19processStateMachineEv+0x18a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8005d6c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8005d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d78:	d503      	bpl.n	8005d82 <_ZN7FrSkyRX19processStateMachineEv+0x192>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d80:	e001      	b.n	8005d86 <_ZN7FrSkyRX19processStateMachineEv+0x196>
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		target_pitch = ((target_pitch > 2.0F) || (target_pitch < -2.0F)) ? target_pitch : 0.0F;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005d92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d9e:	dc09      	bgt.n	8005db4 <_ZN7FrSkyRX19processStateMachineEv+0x1c4>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005da6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8005daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db2:	d503      	bpl.n	8005dbc <_ZN7FrSkyRX19processStateMachineEv+0x1cc>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	e001      	b.n	8005dc0 <_ZN7FrSkyRX19processStateMachineEv+0x1d0>
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		break;
 8005dc6:	e004      	b.n	8005dd2 <_ZN7FrSkyRX19processStateMachineEv+0x1e2>
	case FrSkyRXState::TIMEOUT:
		break;
 8005dc8:	bf00      	nop
 8005dca:	e002      	b.n	8005dd2 <_ZN7FrSkyRX19processStateMachineEv+0x1e2>
		break;
 8005dcc:	bf00      	nop
 8005dce:	e000      	b.n	8005dd2 <_ZN7FrSkyRX19processStateMachineEv+0x1e2>
		break;
 8005dd0:	bf00      	nop
	}
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	43960000 	.word	0x43960000
 8005de0:	40000400 	.word	0x40000400
 8005de4:	3c23d70a 	.word	0x3c23d70a
 8005de8:	3a83126f 	.word	0x3a83126f

08005dec <_ZNK7FrSkyRX15getCurrentStateEv>:

FrSkyRXState FrSkyRX::getCurrentState() const
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	return this->currentState;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <_ZN7FrSkyRX12updateValuesEv>:

void FrSkyRX::updateValues()
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
	this->channels[0]  = static_cast<int16_t>(rx_buff[1] | (rx_buff[2] << 8 & 0x07FF));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005e14:	b21a      	sxth	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	b21b      	sxth	r3, r3
 8005e20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e24:	b21b      	sxth	r3, r3
 8005e26:	4313      	orrs	r3, r2
 8005e28:	b21b      	sxth	r3, r3
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	this->channels[1]  = static_cast<int16_t>(rx_buff[2] >> 3 | (rx_buff[3] << 5 & 0x07FF));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005e38:	08db      	lsrs	r3, r3, #3
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	b21a      	sxth	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005e44:	015b      	lsls	r3, r3, #5
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e4c:	b21b      	sxth	r3, r3
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	this->channels[2]  = static_cast<int16_t>(rx_buff[3] >> 6 | (rx_buff[4] << 2 | (rx_buff[5] << 10 & 0x07FF)));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005e60:	099b      	lsrs	r3, r3, #6
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	b21a      	sxth	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	b219      	sxth	r1, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	b21b      	sxth	r3, r3
 8005e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e7e:	b21b      	sxth	r3, r3
 8005e80:	430b      	orrs	r3, r1
 8005e82:	b21b      	sxth	r3, r3
 8005e84:	4313      	orrs	r3, r2
 8005e86:	b21b      	sxth	r3, r3
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	this->channels[3]  = static_cast<int16_t>(rx_buff[5] >> 1 | (rx_buff[6] << 7 & 0x07FF));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	b21a      	sxth	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005ea2:	01db      	lsls	r3, r3, #7
 8005ea4:	b21b      	sxth	r3, r3
 8005ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eaa:	b21b      	sxth	r3, r3
 8005eac:	4313      	orrs	r3, r2
 8005eae:	b21b      	sxth	r3, r3
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	this->channels[4]  = static_cast<int16_t>(rx_buff[6] >> 4 | (rx_buff[7] << 4 & 0x07FF));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005ebe:	091b      	lsrs	r3, r3, #4
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	b21a      	sxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	b21b      	sxth	r3, r3
 8005ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed2:	b21b      	sxth	r3, r3
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	b21b      	sxth	r3, r3
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	this->channels[5]  = static_cast<int16_t>(rx_buff[7] >> 7 | (rx_buff[8] << 1 | (rx_buff[9] << 9 & 0x07FF)));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005ee6:	09db      	lsrs	r3, r3, #7
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	b21a      	sxth	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	b219      	sxth	r1, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005efc:	025b      	lsls	r3, r3, #9
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f04:	b21b      	sxth	r3, r3
 8005f06:	430b      	orrs	r3, r1
 8005f08:	b21b      	sxth	r3, r3
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	this->channels[6]  = static_cast<int16_t>(rx_buff[9] >> 2 | (rx_buff[10] << 6 & 0x07FF));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f1c:	089b      	lsrs	r3, r3, #2
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	b21a      	sxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f28:	019b      	lsls	r3, r3, #6
 8005f2a:	b21b      	sxth	r3, r3
 8005f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f30:	b21b      	sxth	r3, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	this->channels[7]  = static_cast<int16_t>(rx_buff[10] >> 5 | (rx_buff[11] << 3 & 0x07FF));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	b21a      	sxth	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	b21b      	sxth	r3, r3
 8005f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f58:	b21b      	sxth	r3, r3
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	this->channels[8]  = static_cast<int16_t>(rx_buff[12] | (rx_buff[13] << 8 & 0x07FF));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f6c:	b21a      	sxth	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	b21b      	sxth	r3, r3
 8005f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	b21b      	sxth	r3, r3
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	this->channels[9]  = static_cast<int16_t>(rx_buff[13] >> 3 | (rx_buff[14] << 5 & 0x07FF));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f90:	08db      	lsrs	r3, r3, #3
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	b21a      	sxth	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005f9c:	015b      	lsls	r3, r3, #5
 8005f9e:	b21b      	sxth	r3, r3
 8005fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fa4:	b21b      	sxth	r3, r3
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	this->channels[10] = static_cast<int16_t>(rx_buff[14] >> 6 | (rx_buff[15] << 2 | (rx_buff[16] << 10 & 0x07FF)));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005fb8:	099b      	lsrs	r3, r3, #6
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	b21a      	sxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	b219      	sxth	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fce:	029b      	lsls	r3, r3, #10
 8005fd0:	b21b      	sxth	r3, r3
 8005fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fd6:	b21b      	sxth	r3, r3
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	b21b      	sxth	r3, r3
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	b21b      	sxth	r3, r3
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	this->channels[11] = static_cast<int16_t>(rx_buff[16] >> 1 | (rx_buff[17] << 7 & 0x07FF));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	b21a      	sxth	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ffa:	01db      	lsls	r3, r3, #7
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006002:	b21b      	sxth	r3, r3
 8006004:	4313      	orrs	r3, r2
 8006006:	b21b      	sxth	r3, r3
 8006008:	b29a      	uxth	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	this->channels[12] = static_cast<int16_t>(rx_buff[17] >> 4 | (rx_buff[18] << 4 & 0x07FF));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	b2db      	uxtb	r3, r3
 800601a:	b21a      	sxth	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	b21b      	sxth	r3, r3
 8006026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800602a:	b21b      	sxth	r3, r3
 800602c:	4313      	orrs	r3, r2
 800602e:	b21b      	sxth	r3, r3
 8006030:	b29a      	uxth	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	this->channels[13] = static_cast<int16_t>(rx_buff[18] >> 7 | (rx_buff[19] << 1 | (rx_buff[20] << 9 & 0x07FF)));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800603e:	09db      	lsrs	r3, r3, #7
 8006040:	b2db      	uxtb	r3, r3
 8006042:	b21a      	sxth	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	b219      	sxth	r1, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006054:	025b      	lsls	r3, r3, #9
 8006056:	b21b      	sxth	r3, r3
 8006058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800605c:	b21b      	sxth	r3, r3
 800605e:	430b      	orrs	r3, r1
 8006060:	b21b      	sxth	r3, r3
 8006062:	4313      	orrs	r3, r2
 8006064:	b21b      	sxth	r3, r3
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	this->channels[14] = static_cast<int16_t>(rx_buff[20] >> 2 | (rx_buff[21] << 6 & 0x07FF));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006074:	089b      	lsrs	r3, r3, #2
 8006076:	b2db      	uxtb	r3, r3
 8006078:	b21a      	sxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006080:	019b      	lsls	r3, r3, #6
 8006082:	b21b      	sxth	r3, r3
 8006084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006088:	b21b      	sxth	r3, r3
 800608a:	4313      	orrs	r3, r2
 800608c:	b21b      	sxth	r3, r3
 800608e:	b29a      	uxth	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	this->channels[15] = static_cast<int16_t>(rx_buff[21] >> 5 | (rx_buff[22] << 3 & 0x07FF));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	b21a      	sxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	b21b      	sxth	r3, r3
 80060ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060b0:	b21b      	sxth	r3, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	b21b      	sxth	r3, r3
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

	this->throttle = static_cast<float>(channels[2]);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	this->raw_roll = this->channels[0];
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	this->raw_pitch = this->channels[1];
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	this->raw_yaw = this->channels[3];
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	if (this->channels[4]<1000)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80060fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006100:	d204      	bcs.n	800610c <_ZN7FrSkyRX12updateValuesEv+0x306>
		this->lb=0;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 800610a:	e003      	b.n	8006114 <_ZN7FrSkyRX12updateValuesEv+0x30e>
	else
		this->lb=1;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

	if (this->channels[7]<1000)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800611a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800611e:	d204      	bcs.n	800612a <_ZN7FrSkyRX12updateValuesEv+0x324>
		this->rb=0;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8006128:	e003      	b.n	8006132 <_ZN7FrSkyRX12updateValuesEv+0x32c>
	else
		this->rb=1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

	if (this->channels[5]<500)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006138:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800613c:	d204      	bcs.n	8006148 <_ZN7FrSkyRX12updateValuesEv+0x342>
		this->lu = 0;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8006146:	e00f      	b.n	8006168 <_ZN7FrSkyRX12updateValuesEv+0x362>
	else if(this->channels[5]<1500)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800614e:	f240 52db 	movw	r2, #1499	; 0x5db
 8006152:	4293      	cmp	r3, r2
 8006154:	d804      	bhi.n	8006160 <_ZN7FrSkyRX12updateValuesEv+0x35a>
		this->lu = 1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 800615e:	e003      	b.n	8006168 <_ZN7FrSkyRX12updateValuesEv+0x362>
	else
		this->lu = 2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

	if (this->channels[6]<500)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800616e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006172:	d204      	bcs.n	800617e <_ZN7FrSkyRX12updateValuesEv+0x378>
		this->ru = 0;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	else if(this->channels[6]<1500)
		this->ru = 1;
	else
		this->ru = 2;
}
 800617c:	e00f      	b.n	800619e <_ZN7FrSkyRX12updateValuesEv+0x398>
	else if(this->channels[6]<1500)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006184:	f240 52db 	movw	r2, #1499	; 0x5db
 8006188:	4293      	cmp	r3, r2
 800618a:	d804      	bhi.n	8006196 <_ZN7FrSkyRX12updateValuesEv+0x390>
		this->ru = 1;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
}
 8006194:	e003      	b.n	800619e <_ZN7FrSkyRX12updateValuesEv+0x398>
		this->ru = 2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <_ZNK7FrSkyRX14isDisconnectedEv>:

bool FrSkyRX::isDisconnected() const
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	const bool failsafe =
			(this->rb == 0) &&
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
			(this->ru == 0) &&
			(this->lb == 0) &&
			(this->lu == 0) &&
			(this->throttle > 1800) &&
			(this->raw_roll > 1800) &&
			(this->raw_pitch > 1800) &&
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d12c      	bne.n	8006218 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->ru == 0) &&
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
			(this->rb == 0) &&
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d127      	bne.n	8006218 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lb == 0) &&
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
			(this->ru == 0) &&
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d122      	bne.n	8006218 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lu == 0) &&
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
			(this->lb == 0) &&
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d11d      	bne.n	8006218 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->throttle > 1800) &&
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
			(this->lu == 0) &&
 80061e2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800622c <_ZNK7FrSkyRX14isDisconnectedEv+0x80>
 80061e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ee:	dd13      	ble.n	8006218 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_roll > 1800) &&
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
			(this->throttle > 1800) &&
 80061f6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80061fa:	d90d      	bls.n	8006218 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_pitch > 1800) &&
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
			(this->raw_roll > 1800) &&
 8006202:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8006206:	d907      	bls.n	8006218 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_yaw > 1800);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
			(this->raw_pitch > 1800) &&
 800620e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8006212:	d901      	bls.n	8006218 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <_ZNK7FrSkyRX14isDisconnectedEv+0x6e>
 8006218:	2300      	movs	r3, #0
	const bool failsafe =
 800621a:	73fb      	strb	r3, [r7, #15]

	return failsafe;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	44e10000 	.word	0x44e10000

08006230 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>:
      _Rb_tree() = default;
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f8cc 	bl	80063d8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>:
      set() = default;
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff ffeb 	bl	8006230 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 f8c7 	bl	8006402 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff ffeb 	bl	8006264 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <_ZN4HC05C1EP20__UART_HandleTypeDef>:
 *      Author: DragosDarie
 */

#include "HC05.hpp"

HC05::HC05(UART_HandleTypeDef *uart_port)
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff ffd0 	bl	800624a <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	331c      	adds	r3, #28
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff ffe5 	bl	800627e <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3328      	adds	r3, #40	; 0x28
 80062b8:	2264      	movs	r2, #100	; 0x64
 80062ba:	2100      	movs	r1, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	f011 f865 	bl	801738c <memset>
{
	HC05::uart_port = uart_port;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	619a      	str	r2, [r3, #24]
}
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <_ZN4HC054sendEv>:

void HC05::send()
{
 80062d2:	b5b0      	push	{r4, r5, r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)USART1_TxBuffer, strlen(USART1_TxBuffer));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699c      	ldr	r4, [r3, #24]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3328      	adds	r3, #40	; 0x28
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7f9 ff71 	bl	80001d0 <strlen>
 80062ee:	4603      	mov	r3, r0
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	4629      	mov	r1, r5
 80062f6:	4620      	mov	r0, r4
 80062f8:	f009 fa68 	bl	800f7cc <HAL_UART_Transmit_DMA>
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bdb0      	pop	{r4, r5, r7, pc}

08006304 <_ZN4HC059addSensorEP15PrintableSensor>:
{
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)data, len);
}

void HC05::addSensor(PrintableSensor* sen)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
	senList.push_back(sen);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	331c      	adds	r3, #28
 8006312:	463a      	mov	r2, r7
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f883 	bl	8006422 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <_ZN4HC0519printfSensorsValuesEv>:

void HC05::printfSensorsValues()
{
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	strcpy(USART1_TxBuffer,"");
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3328      	adds	r3, #40	; 0x28
 8006330:	2200      	movs	r2, #0
 8006332:	701a      	strb	r2, [r3, #0]

	for (int i=0;i<(int)senList.size();i++)
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	331c      	adds	r3, #28
 800633c:	4618      	mov	r0, r3
 800633e:	f000 f895 	bl	800646c <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006342:	4603      	mov	r3, r0
 8006344:	461a      	mov	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4293      	cmp	r3, r2
 800634a:	bfb4      	ite	lt
 800634c:	2301      	movlt	r3, #1
 800634e:	2300      	movge	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d019      	beq.n	800638a <_ZN4HC0519printfSensorsValuesEv+0x66>
	{
		strcat(USART1_TxBuffer,senList[i]->getSensorValues_str(senorsList));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	331c      	adds	r3, #28
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f000 f891 	bl	800648c <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>
 800636a:	4603      	mov	r3, r0
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	4790      	blx	r2
 8006378:	4603      	mov	r3, r0
 800637a:	4619      	mov	r1, r3
 800637c:	4620      	mov	r0, r4
 800637e:	f011 f941 	bl	8017604 <strcat>
	for (int i=0;i<(int)senList.size();i++)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e7d6      	b.n	8006338 <_ZN4HC0519printfSensorsValuesEv+0x14>
	}

	strcat(USART1_TxBuffer,"\n\r");
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8006390:	4620      	mov	r0, r4
 8006392:	f7f9 ff1d 	bl	80001d0 <strlen>
 8006396:	4603      	mov	r3, r0
 8006398:	4423      	add	r3, r4
 800639a:	4a06      	ldr	r2, [pc, #24]	; (80063b4 <_ZN4HC0519printfSensorsValuesEv+0x90>)
 800639c:	8811      	ldrh	r1, [r2, #0]
 800639e:	7892      	ldrb	r2, [r2, #2]
 80063a0:	8019      	strh	r1, [r3, #0]
 80063a2:	709a      	strb	r2, [r3, #2]

	send();
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff ff94 	bl	80062d2 <_ZN4HC054sendEv>
}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}
 80063b2:	bf00      	nop
 80063b4:	08017818 	.word	0x08017818

080063b8 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>:

void HC05::addSensorParameter(HC05::SENSOR_DATA_PARAMETER sen)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
 	this->senorsList.insert(sen);
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	f107 0308 	add.w	r3, r7, #8
 80063c8:	463a      	mov	r2, r7
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f86e 	bl	80064ac <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>
}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f87d 	bl	80064e0 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 f885 	bl	80064f8 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fa fd66 	bl	8000ec4 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f87f 	bl	800650e <_ZNSaIP15PrintableSensorEC1Ev>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 f887 	bl	8006526 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	429a      	cmp	r2, r3
 8006436:	d00c      	beq.n	8006452 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	4619      	mov	r1, r3
 8006442:	f000 f8b0 	bl	80065a6 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8006450:	e008      	b.n	8006464 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f8ba 	bl	80065cc <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>
 8006458:	4603      	mov	r3, r0
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f8dc 	bl	800661c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	109b      	asrs	r3, r3, #2
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
      }
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>:
      insert(const value_type& __x)
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
	  _M_t._M_insert_unique(__x);
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	f107 0310 	add.w	r3, r7, #16
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 f967 	bl	8006794 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>
	return std::pair<iterator, bool>(__p.first, __p.second);
 80064c6:	f107 0310 	add.w	r3, r7, #16
 80064ca:	1d1a      	adds	r2, r3, #4
 80064cc:	f107 0310 	add.w	r3, r7, #16
 80064d0:	4619      	mov	r1, r3
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 f9ad 	bl	8006832 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>
      }
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f9bd 	bl	8006868 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      _Rb_tree_key_compare()
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
      { }
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <_ZNSaIP15PrintableSensorEC1Ev>:
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f9b1 	bl	800687e <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	605a      	str	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	609a      	str	r2, [r3, #8]
	{ }
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
	if (__p)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f994 	bl	8006894 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>
      }
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f98a 	bl	80068b2 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>
    }
 800659e:	bf00      	nop
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f98a 	bl	80068cc <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 80065b8:	4603      	mov	r3, r0
 80065ba:	461a      	mov	r2, r3
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f98f 	bl	80068e2 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	1d1a      	adds	r2, r3, #4
 80065d8:	f107 030c 	add.w	r3, r7, #12
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f995 	bl	800690e <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f805 	bl	8006604 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80065fa:	4603      	mov	r3, r0
      }
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800660c:	2301      	movs	r3, #1
      }
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800661c:	b5b0      	push	{r4, r5, r7, lr}
 800661e:	b08c      	sub	sp, #48	; 0x30
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006628:	4a59      	ldr	r2, [pc, #356]	; (8006790 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800662a:	2101      	movs	r1, #1
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f97e 	bl	800692e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>
 8006632:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f9bb 	bl	80069bc <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>
 8006646:	4603      	mov	r3, r0
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	f107 0214 	add.w	r2, r7, #20
 800664e:	f107 0308 	add.w	r3, r7, #8
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f9c1 	bl	80069dc <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800665a:	4603      	mov	r3, r0
 800665c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006662:	4618      	mov	r0, r3
 8006664:	f000 f9cf 	bl	8006a06 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>
 8006668:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800666e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	18d5      	adds	r5, r2, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f927 	bl	80068cc <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	4629      	mov	r1, r5
 8006684:	4620      	mov	r0, r4
 8006686:	f7ff ff8e 	bl	80065a6 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800668a:	2300      	movs	r3, #0
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800668e:	f7ff ffae 	bl	80065ee <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d027      	beq.n	80066e8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006698:	f107 0308 	add.w	r3, r7, #8
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f9da 	bl	8006a56 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80066a2:	4603      	mov	r3, r0
 80066a4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff ff63 	bl	8006574 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80066ae:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	4621      	mov	r1, r4
 80066b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066b6:	f000 f9ba 	bl	8006a2e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80066ba:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	3304      	adds	r3, #4
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80066c2:	f107 0308 	add.w	r3, r7, #8
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f9c5 	bl	8006a56 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80066cc:	4603      	mov	r3, r0
 80066ce:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff ff4e 	bl	8006574 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80066d8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80066da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066dc:	6a39      	ldr	r1, [r7, #32]
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 f9a5 	bl	8006a2e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80066e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80066e6:	e026      	b.n	8006736 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80066e8:	f107 0308 	add.w	r3, r7, #8
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 f9b2 	bl	8006a56 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80066f2:	4603      	mov	r3, r0
 80066f4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff ff3b 	bl	8006574 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80066fe:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	4621      	mov	r1, r4
 8006704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006706:	f000 f9b1 	bl	8006a6c <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 800670a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	3304      	adds	r3, #4
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8006712:	f107 0308 	add.w	r3, r7, #8
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f99d 	bl	8006a56 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800671c:	4603      	mov	r3, r0
 800671e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff ff26 	bl	8006574 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006728:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800672a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672c:	6a39      	ldr	r1, [r7, #32]
 800672e:	4620      	mov	r0, r4
 8006730:	f000 f99c 	bl	8006a6c <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006734:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006736:	f7ff ff5a 	bl	80065ee <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 800673a:	4603      	mov	r3, r0
 800673c:	f083 0301 	eor.w	r3, r3, #1
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff ff13 	bl	8006574 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800674e:	4603      	mov	r3, r0
 8006750:	461a      	mov	r2, r3
 8006752:	6a39      	ldr	r1, [r7, #32]
 8006754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006756:	f7ff ff18 	bl	800658a <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800675a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006766:	461a      	mov	r2, r3
 8006768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800676a:	f7ff fef0 	bl	800654e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006778:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	609a      	str	r2, [r3, #8]
    }
 8006786:	bf00      	nop
 8006788:	3730      	adds	r7, #48	; 0x30
 800678a:	46bd      	mov	sp, r7
 800678c:	bdb0      	pop	{r4, r5, r7, pc}
 800678e:	bf00      	nop
 8006790:	0801781c 	.word	0x0801781c

08006794 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006794:	b5b0      	push	{r4, r5, r7, lr}
 8006796:	b08e      	sub	sp, #56	; 0x38
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 80067a0:	f107 031c 	add.w	r3, r7, #28
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe ff45 	bl	8005636 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 80067ac:	4602      	mov	r2, r0
 80067ae:	f107 0314 	add.w	r3, r7, #20
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 f972 	bl	8006a9e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>
      if (__res.second)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d022      	beq.n	8006806 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 80067c0:	f107 0310 	add.w	r3, r7, #16
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 f9ee 	bl	8006ba8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>
	  return _Res(_M_insert_(__res.first, __res.second,
 80067cc:	697c      	ldr	r4, [r7, #20]
 80067ce:	69bd      	ldr	r5, [r7, #24]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f9f8 	bl	8006bc6 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80067d6:	4602      	mov	r2, r0
 80067d8:	f107 0310 	add.w	r3, r7, #16
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	4613      	mov	r3, r2
 80067e0:	462a      	mov	r2, r5
 80067e2:	4621      	mov	r1, r4
 80067e4:	68b8      	ldr	r0, [r7, #8]
 80067e6:	f000 f9f9 	bl	8006bdc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>
 80067ea:	4603      	mov	r3, r0
 80067ec:	623b      	str	r3, [r7, #32]
		      true);
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80067f4:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80067f8:	f107 0320 	add.w	r3, r7, #32
 80067fc:	4619      	mov	r1, r3
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fa35 	bl	8006c6e <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 8006804:	e011      	b.n	800682a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800680c:	4611      	mov	r1, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fef4 	bl	80055fc <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006814:	2300      	movs	r3, #0
 8006816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800681a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 800681e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006822:	4619      	mov	r1, r3
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 fa22 	bl	8006c6e <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	3730      	adds	r7, #48	; 0x30
 800682e:	46bd      	mov	sp, r7
 8006830:	bdb0      	pop	{r4, r5, r7, pc}

08006832 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8006832:	b590      	push	{r4, r7, lr}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800683e:	68fc      	ldr	r4, [r7, #12]
 8006840:	68b8      	ldr	r0, [r7, #8]
 8006842:	f000 fa2d 	bl	8006ca0 <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006846:	4603      	mov	r3, r0
 8006848:	4619      	mov	r1, r3
 800684a:	4620      	mov	r0, r4
 800684c:	f7fe fdec 	bl	8005428 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fa30 	bl	8006cb6 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8006856:	4603      	mov	r3, r0
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	711a      	strb	r2, [r3, #4]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	bd90      	pop	{r4, r7, pc}

08006868 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>:
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fa11 	bl	8006ccc <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa14 	bl	8006cec <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>
    }
 80068c4:	bf00      	nop
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80068e2:	b590      	push	{r4, r7, lr}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff ffec 	bl	80068cc <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 80068f4:	4603      	mov	r3, r0
 80068f6:	681c      	ldr	r4, [r3, #0]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4619      	mov	r1, r3
 80068fc:	2004      	movs	r0, #4
 80068fe:	f7fa fad5 	bl	8000eac <_ZnwjPv>
 8006902:	4603      	mov	r3, r0
 8006904:	601c      	str	r4, [r3, #0]
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bd90      	pop	{r4, r7, pc}

0800690e <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800692e:	b590      	push	{r4, r7, lr}
 8006930:	b087      	sub	sp, #28
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f9e1 	bl	8006d02 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 8006940:	4604      	mov	r4, r0
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff fd92 	bl	800646c <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006948:	4603      	mov	r3, r0
 800694a:	1ae2      	subs	r2, r4, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	bf34      	ite	cc
 8006952:	2301      	movcc	r3, #1
 8006954:	2300      	movcs	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f00e fdfb 	bl	8015558 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff fd82 	bl	800646c <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006968:	4604      	mov	r4, r0
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7ff fd7e 	bl	800646c <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006970:	4603      	mov	r3, r0
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	f107 0208 	add.w	r2, r7, #8
 8006978:	f107 0310 	add.w	r3, r7, #16
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f000 f9d0 	bl	8006d24 <_ZSt3maxIjERKT_S2_S2_>
 8006984:	4603      	mov	r3, r0
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4423      	add	r3, r4
 800698a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fd6d 	bl	800646c <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006992:	4602      	mov	r2, r0
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4293      	cmp	r3, r2
 8006998:	d306      	bcc.n	80069a8 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f9b1 	bl	8006d02 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 80069a0:	4602      	mov	r2, r0
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d904      	bls.n	80069b2 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f9aa 	bl	8006d02 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 80069ae:	4603      	mov	r3, r0
 80069b0:	e000      	b.n	80069b4 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 80069b2:	697b      	ldr	r3, [r7, #20]
      }
 80069b4:	4618      	mov	r0, r3
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd90      	pop	{r4, r7, pc}

080069bc <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	f107 030c 	add.w	r3, r7, #12
 80069ca:	4611      	mov	r1, r2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff ff9e 	bl	800690e <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80069dc:	b590      	push	{r4, r7, lr}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f835 	bl	8006a56 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80069ec:	4603      	mov	r3, r0
 80069ee:	681c      	ldr	r4, [r3, #0]
 80069f0:	6838      	ldr	r0, [r7, #0]
 80069f2:	f000 f830 	bl	8006a56 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80069f6:	4603      	mov	r3, r0
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	1ae3      	subs	r3, r4, r3
 80069fc:	109b      	asrs	r3, r3, #2
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd90      	pop	{r4, r7, pc}

08006a06 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d006      	beq.n	8006a24 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x1e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 f996 	bl	8006d4c <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>
 8006a20:	4603      	mov	r3, r0
 8006a22:	e000      	b.n	8006a26 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x20>
 8006a24:	2300      	movs	r3, #0
      }
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006a2e:	b590      	push	{r4, r7, lr}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af02      	add	r7, sp, #8
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006a3c:	f88d 4000 	strb.w	r4, [sp]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 f98f 	bl	8006d6a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8006a4c:	4603      	mov	r3, r0
      }
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd90      	pop	{r4, r7, pc}

08006a56 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006a6c:	b590      	push	{r4, r7, lr}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f987 	bl	8006d8e <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 8006a80:	4604      	mov	r4, r0
 8006a82:	68b8      	ldr	r0, [r7, #8]
 8006a84:	f000 f983 	bl	8006d8e <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 8006a88:	4601      	mov	r1, r0
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 f98c 	bl	8006dac <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8006a94:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd90      	pop	{r4, r7, pc}

08006a9e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006a9e:	b590      	push	{r4, r7, lr}
 8006aa0:	b08b      	sub	sp, #44	; 0x2c
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8006aaa:	68b8      	ldr	r0, [r7, #8]
 8006aac:	f7fe fcdd 	bl	800546a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8006ab4:	68b8      	ldr	r0, [r7, #8]
 8006ab6:	f7fe fce4 	bl	8005482 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8006aba:	4603      	mov	r3, r0
 8006abc:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d020      	beq.n	8006b0c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6e>
	  __y = __x;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8006ace:	68bc      	ldr	r4, [r7, #8]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fd67 	bl	80055a6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	461a      	mov	r2, r3
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7fe fd3d 	bl	800555e <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8006aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x60>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fe fd69 	bl	80055cc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8006afa:	4603      	mov	r3, r0
 8006afc:	e004      	b.n	8006b08 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6a>
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe fd6f 	bl	80055e4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006b06:	4603      	mov	r3, r0
 8006b08:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8006b0a:	e7db      	b.n	8006ac4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x26>
      iterator __j = iterator(__y);
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	f107 0310 	add.w	r3, r7, #16
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fe fd71 	bl	80055fc <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8006b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d01d      	beq.n	8006b5e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xc0>
	  if (__j == begin())
 8006b22:	68b8      	ldr	r0, [r7, #8]
 8006b24:	f000 f953 	bl	8006dce <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	61fb      	str	r3, [r7, #28]
 8006b2c:	f107 021c 	add.w	r2, r7, #28
 8006b30:	f107 0310 	add.w	r3, r7, #16
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe fcf1 	bl	800551e <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xb6>
	    return _Res(__x, __y);
 8006b42:	f107 0214 	add.w	r2, r7, #20
 8006b46:	f107 0318 	add.w	r3, r7, #24
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f94f 	bl	8006df0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 8006b52:	e025      	b.n	8006ba0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
	    --__j;
 8006b54:	f107 0310 	add.w	r3, r7, #16
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 f962 	bl	8006e22 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8006b5e:	68bc      	ldr	r4, [r7, #8]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fcef 	bl	8005546 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f7fe fcf5 	bl	800555e <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xee>
	return _Res(__x, __y);
 8006b7a:	f107 0214 	add.w	r2, r7, #20
 8006b7e:	f107 0318 	add.w	r3, r7, #24
 8006b82:	4619      	mov	r1, r3
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f933 	bl	8006df0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 8006b8a:	e009      	b.n	8006ba0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
      return _Res(__j._M_node, 0);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	623b      	str	r3, [r7, #32]
 8006b90:	f107 0220 	add.w	r2, r7, #32
 8006b94:	f107 0310 	add.w	r3, r7, #16
 8006b98:	4619      	mov	r1, r3
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7fa ffe1 	bl	8001b62 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	372c      	adds	r7, #44	; 0x2c
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd90      	pop	{r4, r7, pc}

08006ba8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>:
	_Alloc_node(_Rb_tree& __t)
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006bdc:	b5b0      	push	{r4, r5, r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11a      	bne.n	8006c26 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7fe fc46 	bl	8005482 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006bfe:	68fc      	ldr	r4, [r7, #12]
 8006c00:	f107 0310 	add.w	r3, r7, #16
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe fd15 	bl	8005636 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fe fc99 	bl	8005546 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f7fe fc9f 	bl	800555e <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4e>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x50>
 8006c2a:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006c2c:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8006c2e:	6838      	ldr	r0, [r7, #0]
 8006c30:	f7ff ffc9 	bl	8006bc6 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006c34:	4603      	mov	r3, r0
 8006c36:	4619      	mov	r1, r3
 8006c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c3a:	f000 f903 	bl	8006e44 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>
 8006c3e:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8006c44:	7ff8      	ldrb	r0, [r7, #31]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	f00e fc27 	bl	801549c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8006c58:	f107 0314 	add.w	r3, r7, #20
 8006c5c:	69b9      	ldr	r1, [r7, #24]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fccc 	bl	80055fc <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006c64:	697b      	ldr	r3, [r7, #20]
      }
 8006c66:	4618      	mov	r0, r3
 8006c68:	3720      	adds	r7, #32
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bdb0      	pop	{r4, r5, r7, pc}

08006c6e <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006c7a:	68b8      	ldr	r0, [r7, #8]
 8006c7c:	f000 f8f6 	bl	8006e6c <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006c80:	4602      	mov	r2, r0
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f8fa 	bl	8006e82 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	711a      	strb	r2, [r3, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4619      	mov	r1, r3
 8006cde:	68b8      	ldr	r0, [r7, #8]
 8006ce0:	f00e fb6c 	bl	80153bc <_ZdlPvj>
      }
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f8f6 	bl	8006efe <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006d12:	4603      	mov	r3, r0
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 f8d8 	bl	8006eca <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d201      	bcs.n	8006d3e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	e000      	b.n	8006d40 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006d3e:	687b      	ldr	r3, [r7, #4]
    }
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006d56:	2200      	movs	r2, #0
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8da 	bl	8006f14 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>
 8006d60:	4603      	mov	r3, r0
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
 8006d76:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f8e6 	bl	8006f50 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006d84:	4603      	mov	r3, r0
      }
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006d96:	f107 030c 	add.w	r3, r7, #12
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 f8f4 	bl	8006f8a <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 f8f5 	bl	8006fae <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	f107 030c 	add.w	r3, r7, #12
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fc0b 	bl	80055fc <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006dfc:	68b8      	ldr	r0, [r7, #8]
 8006dfe:	f000 f8e8 	bl	8006fd2 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006e02:	4603      	mov	r3, r0
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fa ff1b 	bl	8001c46 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8006e10:	4603      	mov	r3, r0
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f00e fb32 	bl	8015498 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8006e34:	4602      	mov	r2, r0
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	601a      	str	r2, [r3, #0]
	return *this;
 8006e3a:	687b      	ldr	r3, [r7, #4]
      }
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>:
	  operator()(_Arg&& __arg) const
 8006e44:	b590      	push	{r4, r7, lr}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681c      	ldr	r4, [r3, #0]
 8006e52:	6838      	ldr	r0, [r7, #0]
 8006e54:	f7ff feb7 	bl	8006bc6 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f000 f8c3 	bl	8006fe8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>
 8006e62:	4603      	mov	r3, r0
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd90      	pop	{r4, r7, pc}

08006e6c <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4618      	mov	r0, r3
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr()
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3310      	adds	r3, #16
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f8ab 	bl	8007016 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006ed2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006ed6:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f8a8 	bl	800702e <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006ee2:	f107 0208 	add.w	r2, r7, #8
 8006ee6:	f107 030c 	add.w	r3, r7, #12
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 f8aa 	bl	8007046 <_ZSt3minIjERKT_S2_S2_>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	681b      	ldr	r3, [r3, #0]
      }
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f8a4 	bl	800706e <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8006f26:	4602      	mov	r2, r0
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	bf8c      	ite	hi
 8006f2e:	2301      	movhi	r3, #1
 8006f30:	2300      	movls	r3, #0
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006f38:	f00e fb0b 	bl	8015552 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f00e fa3d 	bl	80153c0 <_Znwj>
 8006f46:	4603      	mov	r3, r0
      }
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006f50:	b5b0      	push	{r4, r5, r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f891 	bl	8007086 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006f64:	4604      	mov	r4, r0
 8006f66:	68b8      	ldr	r0, [r7, #8]
 8006f68:	f000 f88d 	bl	8007086 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f889 	bl	8007086 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006f74:	4602      	mov	r2, r0
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 f88e 	bl	800709c <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8006f80:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bdb0      	pop	{r4, r5, r7, pc}

08006f8a <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006f94:	463b      	mov	r3, r7
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f89e 	bl	80070d8 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f893 	bl	80070ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>
 8006fc8:	4603      	mov	r3, r0
    }
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006fd2:	b480      	push	{r7}
 8006fd4:	b083      	sub	sp, #12
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f88b 	bl	800710e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>
 8006ff8:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006ffa:	6838      	ldr	r0, [r7, #0]
 8006ffc:	f7ff fde3 	bl	8006bc6 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8007000:	4603      	mov	r3, r0
 8007002:	461a      	mov	r2, r3
 8007004:	68f9      	ldr	r1, [r7, #12]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f892 	bl	8007130 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>
	  return __tmp;
 800700c:	68fb      	ldr	r3, [r7, #12]
	}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _M_ptr() noexcept
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f8a6 	bl	8007170 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8007024:	4603      	mov	r3, r0
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f8a5 	bl	8007186 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>
 800703c:	4603      	mov	r3, r0
      }
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d201      	bcs.n	8007060 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	e000      	b.n	8007062 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007060:	687b      	ldr	r3, [r7, #4]
    }
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007076:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	109b      	asrs	r3, r3, #2
 80070b2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	dd06      	ble.n	80070c8 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	461a      	mov	r2, r3
 80070c0:	68f9      	ldr	r1, [r7, #12]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f010 f948 	bl	8017358 <memmove>
      return __result + __count;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	4413      	add	r3, r2
    }
 80070d0:	4618      	mov	r0, r3
 80070d2:	3718      	adds	r7, #24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f84d 	bl	800719e <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8007104:	4603      	mov	r3, r0
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff febe 	bl	8006e98 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 800711c:	4603      	mov	r3, r0
 800711e:	2101      	movs	r1, #1
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f854 	bl	80071ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>
 8007126:	4603      	mov	r3, r0
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8007130:	b5b0      	push	{r4, r5, r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4619      	mov	r1, r3
 8007140:	2014      	movs	r0, #20
 8007142:	f7f9 feb3 	bl	8000eac <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff fea6 	bl	8006e98 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 800714c:	4604      	mov	r4, r0
 800714e:	68b8      	ldr	r0, [r7, #8]
 8007150:	f7ff fead 	bl	8006eae <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8007154:	4605      	mov	r5, r0
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fd35 	bl	8006bc6 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 800715c:	4603      	mov	r3, r0
 800715e:	461a      	mov	r2, r3
 8007160:	4629      	mov	r1, r5
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f842 	bl	80071ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bdb0      	pop	{r4, r5, r7, pc}

08007170 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() noexcept
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff ff6d 	bl	800706e <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8007194:	4603      	mov	r3, r0
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800719e:	b590      	push	{r4, r7, lr}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f831 	bl	8007212 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80071b0:	4604      	mov	r4, r0
 80071b2:	68b8      	ldr	r0, [r7, #8]
 80071b4:	f000 f82d 	bl	8007212 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80071b8:	4603      	mov	r3, r0
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	4619      	mov	r1, r3
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 f838 	bl	8007234 <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 80071c4:	4603      	mov	r3, r0
    }
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd90      	pop	{r4, r7, pc}

080071ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80071d8:	2200      	movs	r2, #0
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f84c 	bl	800727a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>
 80071e2:	4603      	mov	r3, r0
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fce4 	bl	8006bc6 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80071fe:	4603      	mov	r3, r0
 8007200:	461a      	mov	r2, r3
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f859 	bl	80072bc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800721a:	1d3b      	adds	r3, r7, #4
 800721c:	4618      	mov	r0, r3
 800721e:	f000 f863 	bl	80072e8 <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>
 8007222:	4603      	mov	r3, r0
 8007224:	4618      	mov	r0, r3
 8007226:	f000 f86b 	bl	8007300 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>
 800722a:	4603      	mov	r3, r0
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007234:	b5b0      	push	{r4, r5, r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff ff20 	bl	8007086 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8007246:	4604      	mov	r4, r0
 8007248:	68b8      	ldr	r0, [r7, #8]
 800724a:	f7ff ff1c 	bl	8007086 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 800724e:	4605      	mov	r5, r0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff ff17 	bl	8007086 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	4629      	mov	r1, r5
 800725e:	4620      	mov	r0, r4
 8007260:	f000 f859 	bl	8007316 <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8007264:	4602      	mov	r2, r0
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f863 	bl	8007336 <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>
 8007270:	4603      	mov	r3, r0
    }
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bdb0      	pop	{r4, r5, r7, pc}

0800727a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f862 	bl	8007350 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>
 800728c:	4602      	mov	r2, r0
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4293      	cmp	r3, r2
 8007292:	bf8c      	ite	hi
 8007294:	2301      	movhi	r3, #1
 8007296:	2300      	movls	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800729e:	f00e f958 	bl	8015552 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f00e f887 	bl	80153c0 <_Znwj>
 80072b2:	4603      	mov	r3, r0
      }
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80072bc:	b590      	push	{r4, r7, lr}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff fc7c 	bl	8006bc6 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80072ce:	4603      	mov	r3, r0
 80072d0:	681c      	ldr	r4, [r3, #0]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4619      	mov	r1, r3
 80072d6:	2004      	movs	r0, #4
 80072d8:	f7f9 fde8 	bl	8000eac <_ZnwjPv>
 80072dc:	4603      	mov	r3, r0
 80072de:	601c      	str	r4, [r3, #0]
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd90      	pop	{r4, r7, pc}

080072e8 <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>:
      base() const
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f820 	bl	800736c <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 800732c:	4603      	mov	r3, r0
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
	...

08007350 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007358:	4b03      	ldr	r3, [pc, #12]	; (8007368 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv+0x18>)
      }
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	06666666 	.word	0x06666666

0800736c <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 f805 	bl	800738c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>
 8007382:	4603      	mov	r3, r0
    }
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	109b      	asrs	r3, r3, #2
 80073a0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d006      	beq.n	80073b6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	461a      	mov	r2, r3
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f00f ffd1 	bl	8017358 <memmove>
	  return __result + _Num;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
	}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	ed87 0a01 	vstr	s0, [r7, #4]
 80073d0:	edc7 0a00 	vstr	s1, [r7]
 80073d4:	edd7 0a00 	vldr	s1, [r7]
 80073d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80073dc:	f00e f9e2 	bl	80157a4 <atan2f>
 80073e0:	eef0 7a40 	vmov.f32	s15, s0
 80073e4:	eeb0 0a67 	vmov.f32	s0, s15
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	ed87 0a01 	vstr	s0, [r7, #4]
 80073f8:	ed97 0a01 	vldr	s0, [r7, #4]
 80073fc:	f00e f9d4 	bl	80157a8 <sqrtf>
 8007400:	eef0 7a40 	vmov.f32	s15, s0
 8007404:	eeb0 0a67 	vmov.f32	s0, s15
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer>:
 *      Author: Asus
 */

#include "ICM42688P.hpp"

ICM42688P::ICM42688P(SPI_HandleTypeDef *spi_port, Buzzer *buzz)
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4618      	mov	r0, r3
 8007420:	f7fc ffd0 	bl	80043c4 <_ZN8SPI_ConnC1Ev>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3304      	adds	r3, #4
 8007428:	4618      	mov	r0, r3
 800742a:	f7fc ffdb 	bl	80043e4 <_ZN15PrintableSensorC1Ev>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3340      	adds	r3, #64	; 0x40
 8007432:	4618      	mov	r0, r3
 8007434:	f7fc ffec 	bl	8004410 <_ZN12CallsCounterC1Ev>
 8007438:	4a4b      	ldr	r2, [pc, #300]	; (8007568 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x158>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	4a4b      	ldr	r2, [pc, #300]	; (800756c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x15c>)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	605a      	str	r2, [r3, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4a42      	ldr	r2, [pc, #264]	; (8007570 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x160>)
 8007468:	65da      	str	r2, [r3, #92]	; 0x5c
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4a41      	ldr	r2, [pc, #260]	; (8007574 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x164>)
 800746e:	661a      	str	r2, [r3, #96]	; 0x60
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4a41      	ldr	r2, [pc, #260]	; (8007578 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x168>)
 8007474:	665a      	str	r2, [r3, #100]	; 0x64
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	669a      	str	r2, [r3, #104]	; 0x68
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	66da      	str	r2, [r3, #108]	; 0x6c
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	671a      	str	r2, [r3, #112]	; 0x70
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	675a      	str	r2, [r3, #116]	; 0x74
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	679a      	str	r2, [r3, #120]	; 0x78
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4a1b      	ldr	r2, [pc, #108]	; (800757c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x16c>)
 800750e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4a1a      	ldr	r2, [pc, #104]	; (8007580 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x170>)
 8007516:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4a19      	ldr	r2, [pc, #100]	; (8007584 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x174>)
 800751e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4a18      	ldr	r2, [pc, #96]	; (8007588 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x178>)
 8007526:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4a17      	ldr	r2, [pc, #92]	; (800758c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x17c>)
 800752e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4a16      	ldr	r2, [pc, #88]	; (8007590 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6Buzzer+0x180>)
 8007536:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007540:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800754a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007554:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
{
	ICM42688P::spi_port = spi_port;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	0801799c 	.word	0x0801799c
 800756c:	080179b0 	.word	0x080179b0
 8007570:	42652ee1 	.word	0x42652ee1
 8007574:	4183126f 	.word	0x4183126f
 8007578:	3a83126f 	.word	0x3a83126f
 800757c:	c114cccd 	.word	0xc114cccd
 8007580:	c134cccd 	.word	0xc134cccd
 8007584:	40f5c28f 	.word	0x40f5c28f
 8007588:	45057000 	.word	0x45057000
 800758c:	c4548000 	.word	0xc4548000
 8007590:	4520a000 	.word	0x4520a000

08007594 <_ZN9ICM42688P11defaultInitEv>:

bool ICM42688P::defaultInit()
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af02      	add	r7, sp, #8
 800759a:	6078      	str	r0, [r7, #4]
	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 800759c:	2300      	movs	r3, #0
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	230a      	movs	r3, #10
 80075a2:	2200      	movs	r2, #0
 80075a4:	214d      	movs	r1, #77	; 0x4d
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f89a 	bl	80076e0 <_ZN9ICM42688P12initAndCheckEhhhb>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f083 0301 	eor.w	r3, r3, #1
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <_ZN9ICM42688P11defaultInitEv+0x28>
		return false;
 80075b8:	2300      	movs	r3, #0
 80075ba:	e08d      	b.n	80076d8 <_ZN9ICM42688P11defaultInitEv+0x144>

	SPI_write(DEVICE_CONFIG,DEVICE_CONFIG_SOFT_RESET_CONFIG);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2201      	movs	r2, #1
 80075c4:	2111      	movs	r1, #17
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4798      	blx	r3
	HAL_Delay(20);
 80075ca:	2014      	movs	r0, #20
 80075cc:	f002 fa00 	bl	80099d0 <HAL_Delay>

	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 80075d0:	2300      	movs	r3, #0
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	230a      	movs	r3, #10
 80075d6:	2200      	movs	r2, #0
 80075d8:	214d      	movs	r1, #77	; 0x4d
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f880 	bl	80076e0 <_ZN9ICM42688P12initAndCheckEhhhb>
 80075e0:	4603      	mov	r3, r0
 80075e2:	f083 0301 	eor.w	r3, r3, #1
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <_ZN9ICM42688P11defaultInitEv+0x5c>
		return false;
 80075ec:	2300      	movs	r3, #0
 80075ee:	e073      	b.n	80076d8 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_CONFIG0,INT_CONFIG0_UI_DRDY_INT_CLEAR_ONSENSORREGREAD,10))
 80075f0:	2300      	movs	r3, #0
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	230a      	movs	r3, #10
 80075f6:	2220      	movs	r2, #32
 80075f8:	2163      	movs	r1, #99	; 0x63
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f870 	bl	80076e0 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007600:	4603      	mov	r3, r0
 8007602:	f083 0301 	eor.w	r3, r3, #1
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <_ZN9ICM42688P11defaultInitEv+0x7c>
		return false;
 800760c:	2300      	movs	r3, #0
 800760e:	e063      	b.n	80076d8 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_CONFIG,INT_CONFIG_INT1_POLARITY_ACTIVE_HIGH|INT_CONFIG_INT1_DRIVE_CIRCUIT_PUSH_PULL,10))
 8007610:	2300      	movs	r3, #0
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	230a      	movs	r3, #10
 8007616:	2203      	movs	r2, #3
 8007618:	2114      	movs	r1, #20
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f860 	bl	80076e0 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007620:	4603      	mov	r3, r0
 8007622:	f083 0301 	eor.w	r3, r3, #1
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <_ZN9ICM42688P11defaultInitEv+0x9c>
		return false;
 800762c:	2300      	movs	r3, #0
 800762e:	e053      	b.n	80076d8 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_SOURCE0,INT_SOURCE0_UI_DRDY_INT1_EN,10))
 8007630:	2300      	movs	r3, #0
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	230a      	movs	r3, #10
 8007636:	2208      	movs	r2, #8
 8007638:	2165      	movs	r1, #101	; 0x65
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f850 	bl	80076e0 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007640:	4603      	mov	r3, r0
 8007642:	f083 0301 	eor.w	r3, r3, #1
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <_ZN9ICM42688P11defaultInitEv+0xbc>
		return false;
 800764c:	2300      	movs	r3, #0
 800764e:	e043      	b.n	80076d8 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(GYRO_CONFIG_STATIC2,0b11,10))
 8007650:	2300      	movs	r3, #0
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	230a      	movs	r3, #10
 8007656:	2203      	movs	r2, #3
 8007658:	210b      	movs	r1, #11
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f840 	bl	80076e0 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007660:	4603      	mov	r3, r0
 8007662:	f083 0301 	eor.w	r3, r3, #1
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <_ZN9ICM42688P11defaultInitEv+0xdc>
		return false;
 800766c:	2300      	movs	r3, #0
 800766e:	e033      	b.n	80076d8 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(GYRO_CONFIG0,GYRO_CONFIG0_GYRO_ODR_1KHZ|GYRO_CONFIG0_GYRO_FS_SEL_2000DPS,10))
 8007670:	2300      	movs	r3, #0
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	230a      	movs	r3, #10
 8007676:	2206      	movs	r2, #6
 8007678:	214f      	movs	r1, #79	; 0x4f
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f830 	bl	80076e0 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007680:	4603      	mov	r3, r0
 8007682:	f083 0301 	eor.w	r3, r3, #1
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <_ZN9ICM42688P11defaultInitEv+0xfc>
		return false;
 800768c:	2300      	movs	r3, #0
 800768e:	e023      	b.n	80076d8 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(ACCEL_CONFIG0,ACCEL_CONFIG0_ACCEL_ODR_1KHZ|ACCEL_CONFIG0_ACCEL_FS_SEL_2G,10))
 8007690:	2300      	movs	r3, #0
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	230a      	movs	r3, #10
 8007696:	2266      	movs	r2, #102	; 0x66
 8007698:	2150      	movs	r1, #80	; 0x50
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f820 	bl	80076e0 <_ZN9ICM42688P12initAndCheckEhhhb>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f083 0301 	eor.w	r3, r3, #1
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <_ZN9ICM42688P11defaultInitEv+0x11c>
		return false;
 80076ac:	2300      	movs	r3, #0
 80076ae:	e013      	b.n	80076d8 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(PWR_MGMT0,0x0F,10))
 80076b0:	2300      	movs	r3, #0
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	230a      	movs	r3, #10
 80076b6:	220f      	movs	r2, #15
 80076b8:	214e      	movs	r1, #78	; 0x4e
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f810 	bl	80076e0 <_ZN9ICM42688P12initAndCheckEhhhb>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f083 0301 	eor.w	r3, r3, #1
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <_ZN9ICM42688P11defaultInitEv+0x13c>
		return false;
 80076cc:	2300      	movs	r3, #0
 80076ce:	e003      	b.n	80076d8 <_ZN9ICM42688P11defaultInitEv+0x144>

	HAL_Delay(50);
 80076d0:	2032      	movs	r0, #50	; 0x32
 80076d2:	f002 f97d 	bl	80099d0 <HAL_Delay>

	//computeGyroDrift(1000);

	return true;
 80076d6:	2301      	movs	r3, #1
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <_ZN9ICM42688P12initAndCheckEhhhb>:

bool ICM42688P::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	4608      	mov	r0, r1
 80076ea:	4611      	mov	r1, r2
 80076ec:	461a      	mov	r2, r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	70fb      	strb	r3, [r7, #3]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70bb      	strb	r3, [r7, #2]
 80076f6:	4613      	mov	r3, r2
 80076f8:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	787b      	ldrb	r3, [r7, #1]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	429a      	cmp	r2, r3
 8007704:	da21      	bge.n	800774a <_ZN9ICM42688P12initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8007706:	7e3b      	ldrb	r3, [r7, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <_ZN9ICM42688P12initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	78ba      	ldrb	r2, [r7, #2]
 8007714:	78f9      	ldrb	r1, [r7, #3]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
		if (SPI_read(addr)==val)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3304      	adds	r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	4611      	mov	r1, r2
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
 800772a:	4603      	mov	r3, r0
 800772c:	461a      	mov	r2, r3
 800772e:	78bb      	ldrb	r3, [r7, #2]
 8007730:	4293      	cmp	r3, r2
 8007732:	bf0c      	ite	eq
 8007734:	2301      	moveq	r3, #1
 8007736:	2300      	movne	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <_ZN9ICM42688P12initAndCheckEhhhb+0x62>
			return true;
 800773e:	2301      	movs	r3, #1
 8007740:	e004      	b.n	800774c <_ZN9ICM42688P12initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	e7d9      	b.n	80076fe <_ZN9ICM42688P12initAndCheckEhhhb+0x1e>
	}
	return false;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* ICM42688P::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	b095      	sub	sp, #84	; 0x54
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3308      	adds	r3, #8
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GX)!=senorsList.end())
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	f107 030c 	add.w	r3, r7, #12
 800776e:	4619      	mov	r1, r3
 8007770:	6838      	ldr	r0, [r7, #0]
 8007772:	f7fd fde3 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007776:	4603      	mov	r3, r0
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	6838      	ldr	r0, [r7, #0]
 800777c:	f7fd fdf7 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8007780:	4603      	mov	r3, r0
 8007782:	613b      	str	r3, [r7, #16]
 8007784:	f107 0210 	add.w	r2, r7, #16
 8007788:	f107 0308 	add.w	r3, r7, #8
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f7fd fdfa 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d020      	beq.n	80077dc <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>
	{
		strcat(packet,toCharArray(euler_x));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f103 0408 	add.w	r4, r3, #8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	1d1a      	adds	r2, r3, #4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80077aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077ae:	ee17 1a90 	vmov	r1, s15
 80077b2:	4610      	mov	r0, r2
 80077b4:	f7fc fdd4 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 80077b8:	4603      	mov	r3, r0
 80077ba:	4619      	mov	r1, r3
 80077bc:	4620      	mov	r0, r4
 80077be:	f00f ff21 	bl	8017604 <strcat>
		strcat(packet,",");
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f103 0408 	add.w	r4, r3, #8
 80077c8:	4620      	mov	r0, r4
 80077ca:	f7f8 fd01 	bl	80001d0 <strlen>
 80077ce:	4603      	mov	r3, r0
 80077d0:	4423      	add	r3, r4
 80077d2:	499a      	ldr	r1, [pc, #616]	; (8007a3c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 80077d4:	461a      	mov	r2, r3
 80077d6:	460b      	mov	r3, r1
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GY)!=senorsList.end())
 80077dc:	2301      	movs	r3, #1
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	f107 0318 	add.w	r3, r7, #24
 80077e4:	4619      	mov	r1, r3
 80077e6:	6838      	ldr	r0, [r7, #0]
 80077e8:	f7fd fda8 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80077ec:	4603      	mov	r3, r0
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	6838      	ldr	r0, [r7, #0]
 80077f2:	f7fd fdbc 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80077f6:	4603      	mov	r3, r0
 80077f8:	61fb      	str	r3, [r7, #28]
 80077fa:	f107 021c 	add.w	r2, r7, #28
 80077fe:	f107 0314 	add.w	r3, r7, #20
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f7fd fdbf 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d020      	beq.n	8007852 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xfe>
	{
		strcat(packet,toCharArray(euler_y));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f103 0408 	add.w	r4, r3, #8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	1d1a      	adds	r2, r3, #4
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8007820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007824:	ee17 1a90 	vmov	r1, s15
 8007828:	4610      	mov	r0, r2
 800782a:	f7fc fd99 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 800782e:	4603      	mov	r3, r0
 8007830:	4619      	mov	r1, r3
 8007832:	4620      	mov	r0, r4
 8007834:	f00f fee6 	bl	8017604 <strcat>
		strcat(packet,",");
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f103 0408 	add.w	r4, r3, #8
 800783e:	4620      	mov	r0, r4
 8007840:	f7f8 fcc6 	bl	80001d0 <strlen>
 8007844:	4603      	mov	r3, r0
 8007846:	4423      	add	r3, r4
 8007848:	497c      	ldr	r1, [pc, #496]	; (8007a3c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 800784a:	461a      	mov	r2, r3
 800784c:	460b      	mov	r3, r1
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GZ)!=senorsList.end())
 8007852:	2302      	movs	r3, #2
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
 8007856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800785a:	4619      	mov	r1, r3
 800785c:	6838      	ldr	r0, [r7, #0]
 800785e:	f7fd fd6d 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007862:	4603      	mov	r3, r0
 8007864:	623b      	str	r3, [r7, #32]
 8007866:	6838      	ldr	r0, [r7, #0]
 8007868:	f7fd fd81 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800786c:	4603      	mov	r3, r0
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007870:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007874:	f107 0320 	add.w	r3, r7, #32
 8007878:	4611      	mov	r1, r2
 800787a:	4618      	mov	r0, r3
 800787c:	f7fd fd84 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d020      	beq.n	80078c8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x174>
	{
		strcat(packet,toCharArray(euler_z));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f103 0408 	add.w	r4, r3, #8
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	1d1a      	adds	r2, r3, #4
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8007896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800789a:	ee17 1a90 	vmov	r1, s15
 800789e:	4610      	mov	r0, r2
 80078a0:	f7fc fd5e 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 80078a4:	4603      	mov	r3, r0
 80078a6:	4619      	mov	r1, r3
 80078a8:	4620      	mov	r0, r4
 80078aa:	f00f feab 	bl	8017604 <strcat>
		strcat(packet,",");
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f103 0408 	add.w	r4, r3, #8
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7f8 fc8b 	bl	80001d0 <strlen>
 80078ba:	4603      	mov	r3, r0
 80078bc:	4423      	add	r3, r4
 80078be:	495f      	ldr	r1, [pc, #380]	; (8007a3c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 80078c0:	461a      	mov	r2, r3
 80078c2:	460b      	mov	r3, r1
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AX)!=senorsList.end())
 80078c8:	2306      	movs	r3, #6
 80078ca:	633b      	str	r3, [r7, #48]	; 0x30
 80078cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078d0:	4619      	mov	r1, r3
 80078d2:	6838      	ldr	r0, [r7, #0]
 80078d4:	f7fd fd32 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80078d8:	4603      	mov	r3, r0
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078dc:	6838      	ldr	r0, [r7, #0]
 80078de:	f7fd fd46 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80078e2:	4603      	mov	r3, r0
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
 80078e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80078ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fd fd49 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d022      	beq.n	8007942 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ee>
	{
		strcat(packet,toCharArray(-ax));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f103 0408 	add.w	r4, r3, #8
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	1d1a      	adds	r2, r3, #4
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800790c:	eef1 7a67 	vneg.f32	s15, s15
 8007910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007914:	ee17 1a90 	vmov	r1, s15
 8007918:	4610      	mov	r0, r2
 800791a:	f7fc fd21 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 800791e:	4603      	mov	r3, r0
 8007920:	4619      	mov	r1, r3
 8007922:	4620      	mov	r0, r4
 8007924:	f00f fe6e 	bl	8017604 <strcat>
		strcat(packet,",");
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f103 0408 	add.w	r4, r3, #8
 800792e:	4620      	mov	r0, r4
 8007930:	f7f8 fc4e 	bl	80001d0 <strlen>
 8007934:	4603      	mov	r3, r0
 8007936:	4423      	add	r3, r4
 8007938:	4940      	ldr	r1, [pc, #256]	; (8007a3c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 800793a:	461a      	mov	r2, r3
 800793c:	460b      	mov	r3, r1
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AY)!=senorsList.end())
 8007942:	2307      	movs	r3, #7
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007946:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800794a:	4619      	mov	r1, r3
 800794c:	6838      	ldr	r0, [r7, #0]
 800794e:	f7fd fcf5 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8007952:	4603      	mov	r3, r0
 8007954:	63bb      	str	r3, [r7, #56]	; 0x38
 8007956:	6838      	ldr	r0, [r7, #0]
 8007958:	f7fd fd09 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800795c:	4603      	mov	r3, r0
 800795e:	643b      	str	r3, [r7, #64]	; 0x40
 8007960:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007968:	4611      	mov	r1, r2
 800796a:	4618      	mov	r0, r3
 800796c:	f7fd fd0c 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d020      	beq.n	80079b8 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x264>
	{
		strcat(packet,toCharArray(ay));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f103 0408 	add.w	r4, r3, #8
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1d1a      	adds	r2, r3, #4
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8007986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800798a:	ee17 1a90 	vmov	r1, s15
 800798e:	4610      	mov	r0, r2
 8007990:	f7fc fce6 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 8007994:	4603      	mov	r3, r0
 8007996:	4619      	mov	r1, r3
 8007998:	4620      	mov	r0, r4
 800799a:	f00f fe33 	bl	8017604 <strcat>
		strcat(packet,",");
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f103 0408 	add.w	r4, r3, #8
 80079a4:	4620      	mov	r0, r4
 80079a6:	f7f8 fc13 	bl	80001d0 <strlen>
 80079aa:	4603      	mov	r3, r0
 80079ac:	4423      	add	r3, r4
 80079ae:	4923      	ldr	r1, [pc, #140]	; (8007a3c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 80079b0:	461a      	mov	r2, r3
 80079b2:	460b      	mov	r3, r1
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AZ)!=senorsList.end())
 80079b8:	2308      	movs	r3, #8
 80079ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80079bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80079c0:	4619      	mov	r1, r3
 80079c2:	6838      	ldr	r0, [r7, #0]
 80079c4:	f7fd fcba 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80079c8:	4603      	mov	r3, r0
 80079ca:	647b      	str	r3, [r7, #68]	; 0x44
 80079cc:	6838      	ldr	r0, [r7, #0]
 80079ce:	f7fd fcce 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80079d2:	4603      	mov	r3, r0
 80079d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80079da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fd fcd1 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d020      	beq.n	8007a2e <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2da>
	{
		strcat(packet,toCharArray(az));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f103 0408 	add.w	r4, r3, #8
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	1d1a      	adds	r2, r3, #4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80079fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a00:	ee17 1a90 	vmov	r1, s15
 8007a04:	4610      	mov	r0, r2
 8007a06:	f7fc fcab 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f00f fdf8 	bl	8017604 <strcat>
		strcat(packet,",");
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f103 0408 	add.w	r4, r3, #8
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7f8 fbd8 	bl	80001d0 <strlen>
 8007a20:	4603      	mov	r3, r0
 8007a22:	4423      	add	r3, r4
 8007a24:	4905      	ldr	r1, [pc, #20]	; (8007a3c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8007a26:	461a      	mov	r2, r3
 8007a28:	460b      	mov	r3, r1
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3308      	adds	r3, #8
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3754      	adds	r7, #84	; 0x54
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd90      	pop	{r4, r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08017838 	.word	0x08017838

08007a40 <_ZThn4_N9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	float ayScale = 2.0F;
	float azScale = 2.0F;
public:

	void SPI_write(uint8_t reg,uint8_t data);
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8007a40:	f1a0 0004 	sub.w	r0, r0, #4
 8007a44:	f7ff be86 	b.w	8007754 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08007a48 <_ZN9ICM42688P6updateEv>:

void ICM42688P::update()
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	uint8_t axL = SPI_read(ACCEL_DATA_X0);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3304      	adds	r3, #4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2120      	movs	r1, #32
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]
	uint8_t axH = SPI_read(ACCEL_DATA_X1);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3304      	adds	r3, #4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	211f      	movs	r1, #31
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
 8007a70:	4603      	mov	r3, r0
 8007a72:	75bb      	strb	r3, [r7, #22]
	uint8_t ayL = SPI_read(ACCEL_DATA_Y0);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2122      	movs	r1, #34	; 0x22
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	757b      	strb	r3, [r7, #21]
	uint8_t ayH = SPI_read(ACCEL_DATA_Y1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2121      	movs	r1, #33	; 0x21
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	4798      	blx	r3
 8007a94:	4603      	mov	r3, r0
 8007a96:	753b      	strb	r3, [r7, #20]
	uint8_t azL = SPI_read(ACCEL_DATA_Z0);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2124      	movs	r1, #36	; 0x24
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	74fb      	strb	r3, [r7, #19]
	uint8_t azH = SPI_read(ACCEL_DATA_Z1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2123      	movs	r1, #35	; 0x23
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	4798      	blx	r3
 8007ab8:	4603      	mov	r3, r0
 8007aba:	74bb      	strb	r3, [r7, #18]

	uint8_t gxL = SPI_read(GYRO_DATA_X0);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2126      	movs	r1, #38	; 0x26
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
 8007aca:	4603      	mov	r3, r0
 8007acc:	747b      	strb	r3, [r7, #17]
	uint8_t gxH = SPI_read(GYRO_DATA_X1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2125      	movs	r1, #37	; 0x25
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	4798      	blx	r3
 8007adc:	4603      	mov	r3, r0
 8007ade:	743b      	strb	r3, [r7, #16]
	uint8_t gyL = SPI_read(GYRO_DATA_Y0);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2128      	movs	r1, #40	; 0x28
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	4798      	blx	r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	73fb      	strb	r3, [r7, #15]
	uint8_t gyH = SPI_read(GYRO_DATA_Y1);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3304      	adds	r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2127      	movs	r1, #39	; 0x27
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	4798      	blx	r3
 8007b00:	4603      	mov	r3, r0
 8007b02:	73bb      	strb	r3, [r7, #14]
	uint8_t gzL = SPI_read(GYRO_DATA_Z0);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	212a      	movs	r1, #42	; 0x2a
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	737b      	strb	r3, [r7, #13]
	uint8_t gzH = SPI_read(GYRO_DATA_Z1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2129      	movs	r1, #41	; 0x29
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
 8007b24:	4603      	mov	r3, r0
 8007b26:	733b      	strb	r3, [r7, #12]

	uint8_t tempL = SPI_read(TEMP_DATA0);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	211e      	movs	r1, #30
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
 8007b36:	4603      	mov	r3, r0
 8007b38:	72fb      	strb	r3, [r7, #11]
	uint8_t tempH = SPI_read(TEMP_DATA1);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	211d      	movs	r1, #29
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
 8007b48:	4603      	mov	r3, r0
 8007b4a:	72bb      	strb	r3, [r7, #10]

	this->raw_ax = (static_cast<float>(((int16_t)(((int16_t)axH<<8) | axL))) - this->axOffset) * this->axScale;
 8007b4c:	7dbb      	ldrb	r3, [r7, #22]
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	b21a      	sxth	r2, r3
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	b21b      	sxth	r3, r3
 8007b56:	4313      	orrs	r3, r2
 8007b58:	b21b      	sxth	r3, r3
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8007b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8007b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	this->raw_ay = (static_cast<float>(((int16_t)(((int16_t)ayH<<8) | ayL))) - this->ayOffset) * this->ayScale;
 8007b7c:	7d3b      	ldrb	r3, [r7, #20]
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	b21a      	sxth	r2, r3
 8007b82:	7d7b      	ldrb	r3, [r7, #21]
 8007b84:	b21b      	sxth	r3, r3
 8007b86:	4313      	orrs	r3, r2
 8007b88:	b21b      	sxth	r3, r3
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8007b98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8007ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	this->raw_az = (static_cast<float>(((int16_t)(((int16_t)azH<<8) | azL))) - this->azOffset) * this->azScale;
 8007bac:	7cbb      	ldrb	r3, [r7, #18]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	b21a      	sxth	r2, r3
 8007bb2:	7cfb      	ldrb	r3, [r7, #19]
 8007bb4:	b21b      	sxth	r3, r3
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	b21b      	sxth	r3, r3
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8007bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8007bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	this->raw_gx = static_cast<float>((int16_t)(((int16_t)gxH<<8) | gxL)) - this->gxDrift;
 8007bdc:	7c3b      	ldrb	r3, [r7, #16]
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	b21a      	sxth	r2, r3
 8007be2:	7c7b      	ldrb	r3, [r7, #17]
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	4313      	orrs	r3, r2
 8007be8:	b21b      	sxth	r3, r3
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8007bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	this->raw_gy = static_cast<float>((int16_t)(((int16_t)gyH<<8) | gyL)) - this->gyDrift;
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	b21a      	sxth	r2, r3
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	b21b      	sxth	r3, r3
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	b21b      	sxth	r3, r3
 8007c10:	ee07 3a90 	vmov	s15, r3
 8007c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8007c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	this->raw_gz = static_cast<float>((int16_t)(((int16_t)gzH<<8) | gzL)) - this->gzDrift;
 8007c28:	7b3b      	ldrb	r3, [r7, #12]
 8007c2a:	021b      	lsls	r3, r3, #8
 8007c2c:	b21a      	sxth	r2, r3
 8007c2e:	7b7b      	ldrb	r3, [r7, #13]
 8007c30:	b21b      	sxth	r3, r3
 8007c32:	4313      	orrs	r3, r2
 8007c34:	b21b      	sxth	r3, r3
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8007c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	this->temp = static_cast<float>((int16_t)(((int16_t)tempH<<8) | tempL)) / 132.48F + 25.0F;
 8007c4e:	7abb      	ldrb	r3, [r7, #10]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	b21a      	sxth	r2, r3
 8007c54:	7afb      	ldrb	r3, [r7, #11]
 8007c56:	b21b      	sxth	r3, r3
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	b21b      	sxth	r3, r3
 8007c5c:	ee07 3a90 	vmov	s15, r3
 8007c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c64:	eddf 6a08 	vldr	s13, [pc, #32]	; 8007c88 <_ZN9ICM42688P6updateEv+0x240>
 8007c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c6c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007c70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

	this->toEuler();
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f808 	bl	8007c90 <_ZN9ICM42688P7toEulerEv>
	//this->SPI_read(INT_STATUS);
}
 8007c80:	bf00      	nop
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	43047ae1 	.word	0x43047ae1
 8007c8c:	00000000 	.word	0x00000000

08007c90 <_ZN9ICM42688P7toEulerEv>:

void ICM42688P::toEuler()
{
 8007c90:	b5b0      	push	{r4, r5, r7, lr}
 8007c92:	ed2d 8b02 	vpush	{d8}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	this->gx = this->gx + this->raw_gx*(DT/GYRO_FULLSCALE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	edd3 5a19 	vldr	s11, [r3, #100]	; 0x64
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8007cb4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	this->gy = this->gy + this->raw_gy*(DT/GYRO_FULLSCALE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	edd3 5a19 	vldr	s11, [r3, #100]	; 0x64
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8007cde:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	this->gz = this->gz + this->raw_gz*(DT/GYRO_FULLSCALE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	edd3 5a19 	vldr	s11, [r3, #100]	; 0x64
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8007d08:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	this->euler_x = this->euler_x + this->raw_gx*(DT/GYRO_FULLSCALE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	edd3 5a19 	vldr	s11, [r3, #100]	; 0x64
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8007d32:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	this->euler_y = this->euler_y + this->raw_gy*(DT/GYRO_FULLSCALE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	edd3 5a19 	vldr	s11, [r3, #100]	; 0x64
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8007d5c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->euler_z = this->euler_z + this->raw_gz*(DT/GYRO_FULLSCALE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	edd3 5a19 	vldr	s11, [r3, #100]	; 0x64
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8007d86:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

	this->ax = atan2(this->raw_ax,sqrt(this->raw_ay*this->raw_ay + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	ed93 8a23 	vldr	s16, [r3, #140]	; 0x8c
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8007daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8007dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc6:	f7ff fb12 	bl	80073ee <_ZSt4sqrtf>
 8007dca:	eef0 7a40 	vmov.f32	s15, s0
 8007dce:	eef0 0a67 	vmov.f32	s1, s15
 8007dd2:	eeb0 0a48 	vmov.f32	s0, s16
 8007dd6:	f7ff faf6 	bl	80073c6 <_ZSt5atan2ff>
 8007dda:	eeb0 7a40 	vmov.f32	s14, s0
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	this->ay = atan2(this->raw_ay,sqrt(this->raw_ax*this->raw_ax + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	ed93 8a24 	vldr	s16, [r3, #144]	; 0x90
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8007e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8007e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e18:	eeb0 0a67 	vmov.f32	s0, s15
 8007e1c:	f7ff fae7 	bl	80073ee <_ZSt4sqrtf>
 8007e20:	eef0 7a40 	vmov.f32	s15, s0
 8007e24:	eef0 0a67 	vmov.f32	s1, s15
 8007e28:	eeb0 0a48 	vmov.f32	s0, s16
 8007e2c:	f7ff facb 	bl	80073c6 <_ZSt5atan2ff>
 8007e30:	eeb0 7a40 	vmov.f32	s14, s0
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	this->az = atan2(this->raw_az,sqrt(this->raw_ax*this->raw_ax + this->raw_ay*this->raw_ay))*RADIANS_TO_DEGREES;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	ed93 8a25 	vldr	s16, [r3, #148]	; 0x94
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8007e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8007e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e72:	f7ff fabc 	bl	80073ee <_ZSt4sqrtf>
 8007e76:	eef0 7a40 	vmov.f32	s15, s0
 8007e7a:	eef0 0a67 	vmov.f32	s1, s15
 8007e7e:	eeb0 0a48 	vmov.f32	s0, s16
 8007e82:	f7ff faa0 	bl	80073c6 <_ZSt5atan2ff>
 8007e86:	eeb0 7a40 	vmov.f32	s14, s0
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

	this->euler_x = this->euler_x*0.9999+this->ay*0.0001;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7f8 fb01 	bl	80004a8 <__aeabi_f2d>
 8007ea6:	a33e      	add	r3, pc, #248	; (adr r3, 8007fa0 <_ZN9ICM42688P7toEulerEv+0x310>)
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f7f8 fb54 	bl	8000558 <__aeabi_dmul>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f8 faf3 	bl	80004a8 <__aeabi_f2d>
 8007ec2:	a339      	add	r3, pc, #228	; (adr r3, 8007fa8 <_ZN9ICM42688P7toEulerEv+0x318>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 fb46 	bl	8000558 <__aeabi_dmul>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 f98a 	bl	80001ec <__adddf3>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4610      	mov	r0, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f7f8 fe12 	bl	8000b08 <__aeabi_d2f>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	this->euler_y = this->euler_y*0.9999-this->ax*0.0001;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7f8 fad8 	bl	80004a8 <__aeabi_f2d>
 8007ef8:	a329      	add	r3, pc, #164	; (adr r3, 8007fa0 <_ZN9ICM42688P7toEulerEv+0x310>)
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	f7f8 fb2b 	bl	8000558 <__aeabi_dmul>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4614      	mov	r4, r2
 8007f08:	461d      	mov	r5, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7f8 faca 	bl	80004a8 <__aeabi_f2d>
 8007f14:	a324      	add	r3, pc, #144	; (adr r3, 8007fa8 <_ZN9ICM42688P7toEulerEv+0x318>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 fb1d 	bl	8000558 <__aeabi_dmul>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4620      	mov	r0, r4
 8007f24:	4629      	mov	r1, r5
 8007f26:	f7f8 f95f 	bl	80001e8 <__aeabi_dsub>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4619      	mov	r1, r3
 8007f32:	f7f8 fde9 	bl	8000b08 <__aeabi_d2f>
 8007f36:	4602      	mov	r2, r0
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	this->euler_z = this->euler_z*0.9999+this->az*0.0001;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7f8 faaf 	bl	80004a8 <__aeabi_f2d>
 8007f4a:	a315      	add	r3, pc, #84	; (adr r3, 8007fa0 <_ZN9ICM42688P7toEulerEv+0x310>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 fb02 	bl	8000558 <__aeabi_dmul>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4614      	mov	r4, r2
 8007f5a:	461d      	mov	r5, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7f8 faa1 	bl	80004a8 <__aeabi_f2d>
 8007f66:	a310      	add	r3, pc, #64	; (adr r3, 8007fa8 <_ZN9ICM42688P7toEulerEv+0x318>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	f7f8 faf4 	bl	8000558 <__aeabi_dmul>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4620      	mov	r0, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7f8 f938 	bl	80001ec <__adddf3>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4610      	mov	r0, r2
 8007f82:	4619      	mov	r1, r3
 8007f84:	f7f8 fdc0 	bl	8000b08 <__aeabi_d2f>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	ecbd 8b02 	vpop	{d8}
 8007f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8007f9c:	f3af 8000 	nop.w
 8007fa0:	48e8a71e 	.word	0x48e8a71e
 8007fa4:	3fefff2e 	.word	0x3fefff2e
 8007fa8:	eb1c432d 	.word	0xeb1c432d
 8007fac:	3f1a36e2 	.word	0x3f1a36e2

08007fb0 <_ZN9ICM42688P9getEulerXEv>:
	this->computeAccOffset(count);
	this->buzz->beep(200U,100U,1U);
}

float ICM42688P::getEulerX()
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
	return this->euler_x;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fbe:	ee07 3a90 	vmov	s15, r3
}
 8007fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <_ZN9ICM42688P12getEulerXrefEv>:

float& ICM42688P::getEulerXref()
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	return this->euler_x;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	339c      	adds	r3, #156	; 0x9c
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <_ZN9ICM42688P9getEulerYEv>:

float ICM42688P::getEulerY()
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	return this->euler_y;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ff6:	ee07 3a90 	vmov	s15, r3
}
 8007ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <_ZN9ICM42688P12getEulerYrefEv>:

float& ICM42688P::getEulerYref()
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
	return this->euler_y;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	33a0      	adds	r3, #160	; 0xa0
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <_ZN9ICM42688P12getEulerZrefEv>:
{
	return this->euler_z;
}

float& ICM42688P::getEulerZref()
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	return this->euler_z;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	33a4      	adds	r3, #164	; 0xa4
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <_ZN9ICM42688P9SPI_writeEhh>:
{
	return this->SPI_read(INT_STATUS);
}

void ICM42688P::SPI_write(uint8_t reg,uint8_t data)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
 8008044:	4613      	mov	r3, r2
 8008046:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_RESET);
 8008048:	2200      	movs	r2, #0
 800804a:	2120      	movs	r1, #32
 800804c:	480d      	ldr	r0, [pc, #52]	; (8008084 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 800804e:	f003 fa59 	bl	800b504 <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	this->spiTxBuff[1] = data;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	78ba      	ldrb	r2, [r7, #2]
 800805e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3358      	adds	r3, #88	; 0x58
 800806a:	2202      	movs	r2, #2
 800806c:	4619      	mov	r1, r3
 800806e:	f005 fdf3 	bl	800dc58 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_SET);
 8008072:	2201      	movs	r2, #1
 8008074:	2120      	movs	r1, #32
 8008076:	4803      	ldr	r0, [pc, #12]	; (8008084 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 8008078:	f003 fa44 	bl	800b504 <HAL_GPIO_WritePin>
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	40020800 	.word	0x40020800

08008088 <_ZN9ICM42688P8SPI_readEh>:

uint8_t ICM42688P::SPI_read(uint8_t reg)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_RESET);
 8008094:	2200      	movs	r2, #0
 8008096:	2120      	movs	r1, #32
 8008098:	4812      	ldr	r0, [pc, #72]	; (80080e4 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 800809a:	f003 fa33 	bl	800b504 <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	HAL_SPI_Transmit_DMA(this->spi_port, (uint8_t*)spiTxBuff, 1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3358      	adds	r3, #88	; 0x58
 80080b4:	2201      	movs	r2, #1
 80080b6:	4619      	mov	r1, r3
 80080b8:	f005 fdce 	bl	800dc58 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(this->spi_port, (uint8_t*)spiRxBuff, 1);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	335a      	adds	r3, #90	; 0x5a
 80080c4:	2201      	movs	r2, #1
 80080c6:	4619      	mov	r1, r3
 80080c8:	f005 fe7c 	bl	800ddc4 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_SET);
 80080cc:	2201      	movs	r2, #1
 80080ce:	2120      	movs	r1, #32
 80080d0:	4804      	ldr	r0, [pc, #16]	; (80080e4 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 80080d2:	f003 fa17 	bl	800b504 <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40020800 	.word	0x40020800

080080e8 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "LIS3MDLTR.hpp"

LIS3MDLTR::LIS3MDLTR(SPI_HandleTypeDef *spi_port)
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fc f965 	bl	80043c4 <_ZN8SPI_ConnC1Ev>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fc f970 	bl	80043e4 <_ZN15PrintableSensorC1Ev>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3340      	adds	r3, #64	; 0x40
 8008108:	4618      	mov	r0, r3
 800810a:	f7fc f981 	bl	8004410 <_ZN12CallsCounterC1Ev>
 800810e:	4a0f      	ldr	r2, [pc, #60]	; (800814c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0x64>)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	4a0e      	ldr	r2, [pc, #56]	; (8008150 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0x68>)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	605a      	str	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
{
	LIS3MDLTR::spi_port = spi_port;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	080179bc 	.word	0x080179bc
 8008150:	080179d0 	.word	0x080179d0

08008154 <_ZN9LIS3MDLTR6updateEv>:
{
	return SPI_read(LIS_WHO_AM_I);
}

void LIS3MDLTR::update()
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
	uint8_t x_high=SPI_read(OUT_X_H);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3304      	adds	r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2129      	movs	r1, #41	; 0x29
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
 800816a:	4603      	mov	r3, r0
 800816c:	73fb      	strb	r3, [r7, #15]
	uint8_t x_low=SPI_read(OUT_X_L);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3304      	adds	r3, #4
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2128      	movs	r1, #40	; 0x28
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
 800817c:	4603      	mov	r3, r0
 800817e:	73bb      	strb	r3, [r7, #14]
	uint8_t y_high=SPI_read(OUT_Y_H);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3304      	adds	r3, #4
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	212b      	movs	r1, #43	; 0x2b
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
 800818e:	4603      	mov	r3, r0
 8008190:	737b      	strb	r3, [r7, #13]
	uint8_t y_low=SPI_read(OUT_Y_L);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3304      	adds	r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	212a      	movs	r1, #42	; 0x2a
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
 80081a0:	4603      	mov	r3, r0
 80081a2:	733b      	strb	r3, [r7, #12]
	uint8_t z_high=SPI_read(OUT_Z_H);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3304      	adds	r3, #4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	212d      	movs	r1, #45	; 0x2d
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
 80081b2:	4603      	mov	r3, r0
 80081b4:	72fb      	strb	r3, [r7, #11]
	uint8_t z_low=SPI_read(OUT_Z_L);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3304      	adds	r3, #4
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	212c      	movs	r1, #44	; 0x2c
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	4798      	blx	r3
 80081c4:	4603      	mov	r3, r0
 80081c6:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_high=SPI_read(TEMP_OUT_H);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3304      	adds	r3, #4
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	212f      	movs	r1, #47	; 0x2f
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	4798      	blx	r3
 80081d6:	4603      	mov	r3, r0
 80081d8:	727b      	strb	r3, [r7, #9]
	uint8_t temp_low=SPI_read(TEMP_OUT_L);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3304      	adds	r3, #4
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	212e      	movs	r1, #46	; 0x2e
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
 80081e8:	4603      	mov	r3, r0
 80081ea:	723b      	strb	r3, [r7, #8]

	x_raw = ((int16_t)x_high)<<8 | x_low;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	b21a      	sxth	r2, r3
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	b21b      	sxth	r3, r3
 80081f6:	4313      	orrs	r3, r2
 80081f8:	b21a      	sxth	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	y_raw = ((int16_t)y_high)<<8 | y_low;
 8008200:	7b7b      	ldrb	r3, [r7, #13]
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	b21a      	sxth	r2, r3
 8008206:	7b3b      	ldrb	r3, [r7, #12]
 8008208:	b21b      	sxth	r3, r3
 800820a:	4313      	orrs	r3, r2
 800820c:	b21a      	sxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	z_raw = ((int16_t)z_high)<<8 | z_low;
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	b21a      	sxth	r2, r3
 800821a:	7abb      	ldrb	r3, [r7, #10]
 800821c:	b21b      	sxth	r3, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	b21a      	sxth	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	TEMP_val = ((int16_t)temp_high)<<8 | temp_low;
 8008228:	7a7b      	ldrb	r3, [r7, #9]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	b21a      	sxth	r2, r3
 800822e:	7a3b      	ldrb	r3, [r7, #8]
 8008230:	b21b      	sxth	r3, r3
 8008232:	4313      	orrs	r3, r2
 8008234:	b21a      	sxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* LIS3MDLTR::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8008244:	b590      	push	{r4, r7, lr}
 8008246:	b08d      	sub	sp, #52	; 0x34
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3308      	adds	r3, #8
 8008252:	2200      	movs	r2, #0
 8008254:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_X)!=senorsList.end())
 8008256:	2310      	movs	r3, #16
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	f107 0310 	add.w	r3, r7, #16
 800825e:	4619      	mov	r1, r3
 8008260:	6838      	ldr	r0, [r7, #0]
 8008262:	f7fd f86b 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008266:	4603      	mov	r3, r0
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	6838      	ldr	r0, [r7, #0]
 800826c:	f7fd f87f 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008270:	4603      	mov	r3, r0
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	f107 0214 	add.w	r2, r7, #20
 8008278:	f107 030c 	add.w	r3, r7, #12
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7fd f882 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01d      	beq.n	80082c6 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(x_raw));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f103 0408 	add.w	r4, r3, #8
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	1d1a      	adds	r2, r3, #4
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 800829a:	4619      	mov	r1, r3
 800829c:	4610      	mov	r0, r2
 800829e:	f7fc f85f 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 80082a2:	4603      	mov	r3, r0
 80082a4:	4619      	mov	r1, r3
 80082a6:	4620      	mov	r0, r4
 80082a8:	f00f f9ac 	bl	8017604 <strcat>
		strcat(packet,",");
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f103 0408 	add.w	r4, r3, #8
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7f7 ff8c 	bl	80001d0 <strlen>
 80082b8:	4603      	mov	r3, r0
 80082ba:	4423      	add	r3, r4
 80082bc:	493d      	ldr	r1, [pc, #244]	; (80083b4 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 80082be:	461a      	mov	r2, r3
 80082c0:	460b      	mov	r3, r1
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Y)!=senorsList.end())
 80082c6:	2311      	movs	r3, #17
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	f107 031c 	add.w	r3, r7, #28
 80082ce:	4619      	mov	r1, r3
 80082d0:	6838      	ldr	r0, [r7, #0]
 80082d2:	f7fd f833 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80082d6:	4603      	mov	r3, r0
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	6838      	ldr	r0, [r7, #0]
 80082dc:	f7fd f847 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80082e0:	4603      	mov	r3, r0
 80082e2:	623b      	str	r3, [r7, #32]
 80082e4:	f107 0220 	add.w	r2, r7, #32
 80082e8:	f107 0318 	add.w	r3, r7, #24
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fd f84a 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d01d      	beq.n	8008336 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(y_raw));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f103 0408 	add.w	r4, r3, #8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	1d1a      	adds	r2, r3, #4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f7fc f827 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 8008312:	4603      	mov	r3, r0
 8008314:	4619      	mov	r1, r3
 8008316:	4620      	mov	r0, r4
 8008318:	f00f f974 	bl	8017604 <strcat>
		strcat(packet,",");
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f103 0408 	add.w	r4, r3, #8
 8008322:	4620      	mov	r0, r4
 8008324:	f7f7 ff54 	bl	80001d0 <strlen>
 8008328:	4603      	mov	r3, r0
 800832a:	4423      	add	r3, r4
 800832c:	4921      	ldr	r1, [pc, #132]	; (80083b4 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 800832e:	461a      	mov	r2, r3
 8008330:	460b      	mov	r3, r1
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Z)!=senorsList.end())
 8008336:	2312      	movs	r3, #18
 8008338:	62bb      	str	r3, [r7, #40]	; 0x28
 800833a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800833e:	4619      	mov	r1, r3
 8008340:	6838      	ldr	r0, [r7, #0]
 8008342:	f7fc fffb 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008346:	4603      	mov	r3, r0
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
 800834a:	6838      	ldr	r0, [r7, #0]
 800834c:	f7fd f80f 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008350:	4603      	mov	r3, r0
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008354:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800835c:	4611      	mov	r1, r2
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd f812 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d01d      	beq.n	80083a6 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x162>
	{
		strcat(packet,toCharArray(z_raw));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f103 0408 	add.w	r4, r3, #8
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800837a:	4619      	mov	r1, r3
 800837c:	4610      	mov	r0, r2
 800837e:	f7fb ffef 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 8008382:	4603      	mov	r3, r0
 8008384:	4619      	mov	r1, r3
 8008386:	4620      	mov	r0, r4
 8008388:	f00f f93c 	bl	8017604 <strcat>
		strcat(packet,",");
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f103 0408 	add.w	r4, r3, #8
 8008392:	4620      	mov	r0, r4
 8008394:	f7f7 ff1c 	bl	80001d0 <strlen>
 8008398:	4603      	mov	r3, r0
 800839a:	4423      	add	r3, r4
 800839c:	4905      	ldr	r1, [pc, #20]	; (80083b4 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 800839e:	461a      	mov	r2, r3
 80083a0:	460b      	mov	r3, r1
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	8013      	strh	r3, [r2, #0]
	}


	return packet;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3308      	adds	r3, #8
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3734      	adds	r7, #52	; 0x34
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd90      	pop	{r4, r7, pc}
 80083b2:	bf00      	nop
 80083b4:	0801783c 	.word	0x0801783c

080083b8 <_ZThn4_N9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void update();
	int16_t getX();
	int16_t getY();
	int16_t getZ();
	int16_t getTEMP();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 80083b8:	f1a0 0004 	sub.w	r0, r0, #4
 80083bc:	f7ff bf42 	b.w	8008244 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

080083c0 <_ZN9LIS3MDLTR11defaultInitEv>:

bool LIS3MDLTR::defaultInit()
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	  this->SPI_write(CTRL_REG1,0b11111100);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	22fc      	movs	r2, #252	; 0xfc
 80083d0:	2120      	movs	r1, #32
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	4798      	blx	r3
	  uint8_t ctrl1 = this->SPI_read(CTRL_REG1);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3304      	adds	r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2120      	movs	r1, #32
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	4798      	blx	r3
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]

	  SPI_write(CTRL_REG2,0b01100000);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2260      	movs	r2, #96	; 0x60
 80083f0:	2121      	movs	r1, #33	; 0x21
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
	  uint8_t ctrl2 = SPI_read(CTRL_REG2);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3304      	adds	r3, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2121      	movs	r1, #33	; 0x21
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	4798      	blx	r3
 8008404:	4603      	mov	r3, r0
 8008406:	73bb      	strb	r3, [r7, #14]

	  SPI_write(CTRL_REG3,0b00000000);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2200      	movs	r2, #0
 8008410:	2122      	movs	r1, #34	; 0x22
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
	  uint8_t ctrl3 = SPI_read(CTRL_REG3);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3304      	adds	r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2122      	movs	r1, #34	; 0x22
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	4798      	blx	r3
 8008424:	4603      	mov	r3, r0
 8008426:	737b      	strb	r3, [r7, #13]

	  SPI_write(CTRL_REG4,0b00001100);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	220c      	movs	r2, #12
 8008430:	2123      	movs	r1, #35	; 0x23
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
	  uint8_t ctrl4 = SPI_read(CTRL_REG4);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3304      	adds	r3, #4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2123      	movs	r1, #35	; 0x23
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
 8008444:	4603      	mov	r3, r0
 8008446:	733b      	strb	r3, [r7, #12]

	  SPI_write(CTRL_REG5,0b00000000);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2200      	movs	r2, #0
 8008450:	2124      	movs	r1, #36	; 0x24
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	4798      	blx	r3
	  uint8_t ctrl5 = SPI_read(CTRL_REG5);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3304      	adds	r3, #4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2124      	movs	r1, #36	; 0x24
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
 8008464:	4603      	mov	r3, r0
 8008466:	72fb      	strb	r3, [r7, #11]
		return false;

	if (!initAndCheck(CTRL_REG5,0b00000000,10))
		return false;*/

	return true;
 8008468:	2301      	movs	r3, #1
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <_ZN9LIS3MDLTR9SPI_writeEhh>:
	}
	return false;
}

void LIS3MDLTR::SPI_write(uint8_t reg,uint8_t data)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
 8008480:	4613      	mov	r3, r2
 8008482:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_RESET);
 8008484:	2200      	movs	r2, #0
 8008486:	2120      	movs	r1, #32
 8008488:	480f      	ldr	r0, [pc, #60]	; (80084c8 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 800848a:	f003 f83b 	bl	800b504 <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg & 0x7f;
 800848e:	78fb      	ldrb	r3, [r7, #3]
 8008490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008494:	b2da      	uxtb	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	spiTxBuff[1] = data;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	78ba      	ldrb	r2, [r7, #2]
 80084a0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3354      	adds	r3, #84	; 0x54
 80084ac:	2202      	movs	r2, #2
 80084ae:	4619      	mov	r1, r3
 80084b0:	f005 fbd2 	bl	800dc58 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_SET);
 80084b4:	2201      	movs	r2, #1
 80084b6:	2120      	movs	r1, #32
 80084b8:	4803      	ldr	r0, [pc, #12]	; (80084c8 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 80084ba:	f003 f823 	bl	800b504 <HAL_GPIO_WritePin>
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	40020000 	.word	0x40020000

080084cc <_ZN9LIS3MDLTR8SPI_readEh>:

uint8_t LIS3MDLTR::SPI_read(uint8_t reg)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_RESET);
 80084d8:	2200      	movs	r2, #0
 80084da:	2120      	movs	r1, #32
 80084dc:	4812      	ldr	r0, [pc, #72]	; (8008528 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 80084de:	f003 f811 	bl	800b504 <HAL_GPIO_WritePin>
	spiTxBuff[0]=(reg & 0x3f)|0x80|0x40;
 80084e2:	78fb      	ldrb	r3, [r7, #3]
 80084e4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 1);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3354      	adds	r3, #84	; 0x54
 80084f8:	2201      	movs	r2, #1
 80084fa:	4619      	mov	r1, r3
 80084fc:	f005 fbac 	bl	800dc58 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3356      	adds	r3, #86	; 0x56
 8008508:	2201      	movs	r2, #1
 800850a:	4619      	mov	r1, r3
 800850c:	f005 fc5a 	bl	800ddc4 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_SET);
 8008510:	2201      	movs	r2, #1
 8008512:	2120      	movs	r1, #32
 8008514:	4804      	ldr	r0, [pc, #16]	; (8008528 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 8008516:	f002 fff5 	bl	800b504 <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	40020000 	.word	0x40020000

0800852c <_ZN7Timeout19resetTimeoutCounterEv>:
	void resetTimeoutCounter()
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
		timeout_counter=0;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	705a      	strb	r2, [r3, #1]
	}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 */

#include "MB1043.hpp"
#include <stdlib.h>

MB1043::MB1043(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,uint8_t timeout)
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	70fb      	strb	r3, [r7, #3]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3336      	adds	r3, #54	; 0x36
 800855a:	4618      	mov	r0, r3
 800855c:	f7fd fa73 	bl	8005a46 <_ZN7TimeoutC1Ev>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4618      	mov	r0, r3
 8008564:	f7fb ff3e 	bl	80043e4 <_ZN15PrintableSensorC1Ev>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3340      	adds	r3, #64	; 0x40
 800856c:	4618      	mov	r0, r3
 800856e:	f7fb ff4f 	bl	8004410 <_ZN12CallsCounterC1Ev>
 8008572:	4a10      	ldr	r2, [pc, #64]	; (80085b4 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x6c>)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2252      	movs	r2, #82	; 0x52
 800857c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	220d      	movs	r2, #13
 8008584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
{
	MB1043::uart_port = uart_port;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	655a      	str	r2, [r3, #84]	; 0x54
	MB1043::uart_port_dma=uart_port_dma;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	659a      	str	r2, [r3, #88]	; 0x58

	setTimeoutValue(timeout);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3336      	adds	r3, #54	; 0x36
 80085a0:	78fa      	ldrb	r2, [r7, #3]
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fd fa3f 	bl	8005a28 <_ZN7Timeout15setTimeoutValueEh>
}
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	080179dc 	.word	0x080179dc

080085b8 <_ZN6MB10435beginEv>:

void MB1043::begin()
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	335d      	adds	r3, #93	; 0x5d
 80085c8:	2206      	movs	r2, #6
 80085ca:	4619      	mov	r1, r3
 80085cc:	f007 f97c 	bl	800f8c8 <HAL_UART_Receive_DMA>
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <_ZN6MB10436updateEv>:

void MB1043::update()
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[5]==this->END_BIT);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d109      	bne.n	8008604 <_ZN6MB10436updateEv+0x2c>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d101      	bne.n	8008604 <_ZN6MB10436updateEv+0x2c>
 8008600:	2301      	movs	r3, #1
 8008602:	e000      	b.n	8008606 <_ZN6MB10436updateEv+0x2e>
 8008604:	2300      	movs	r3, #0
 8008606:	73bb      	strb	r3, [r7, #14]

	if (isPacketOk)
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d027      	beq.n	800865e <_ZN6MB10436updateEv+0x86>
	{
		distance_str[0]=rx_buff[1];
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		distance_str[1]=rx_buff[2],
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		distance_str[2]=rx_buff[3],
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
		distance_str[3]=rx_buff[4];
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

		distance = atoi(distance_str);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3369      	adds	r3, #105	; 0x69
 8008642:	4618      	mov	r0, r3
 8008644:	f00e fe49 	bl	80172da <atoi>
 8008648:	4603      	mov	r3, r0
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		resetTimeoutCounter();
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3336      	adds	r3, #54	; 0x36
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff ff68 	bl	800852c <_ZN7Timeout19resetTimeoutCounterEv>
 800865c:	e033      	b.n	80086c6 <_ZN6MB10436updateEv+0xee>
	}
	else if (this->wrongDataReceived==false)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008664:	2b00      	cmp	r3, #0
 8008666:	d12e      	bne.n	80086c6 <_ZN6MB10436updateEv+0xee>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	2b04      	cmp	r3, #4
 8008670:	d829      	bhi.n	80086c6 <_ZN6MB10436updateEv+0xee>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	4413      	add	r3, r2
 8008678:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008682:	429a      	cmp	r2, r3
 8008684:	d11b      	bne.n	80086be <_ZN6MB10436updateEv+0xe6>
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	3301      	adds	r3, #1
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	4413      	add	r3, r2
 800868e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008698:	429a      	cmp	r2, r3
 800869a:	d110      	bne.n	80086be <_ZN6MB10436updateEv+0xe6>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f103 015d 	add.w	r1, r3, #93	; 0x5d
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	3307      	adds	r3, #7
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	f007 f90a 	bl	800f8c8 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				return;
 80086bc:	e01e      	b.n	80086fc <_ZN6MB10436updateEv+0x124>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	3301      	adds	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]
 80086c4:	e7d2      	b.n	800866c <_ZN6MB10436updateEv+0x94>
			}
		}
	}

	if (this->wrongDataReceived == true)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d103      	bne.n	80086d8 <_ZN6MB10436updateEv+0x100>
		this->wrongDataReceived = false;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	335d      	adds	r3, #93	; 0x5d
 80086e0:	2206      	movs	r2, #6
 80086e2:	4619      	mov	r1, r3
 80086e4:	f007 f8f0 	bl	800f8c8 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0208 	bic.w	r2, r2, #8
 80086fa:	601a      	str	r2, [r3, #0]
}
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* MB1043::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8008704:	b590      	push	{r4, r7, lr}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3304      	adds	r3, #4
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::SONAR_DISTANCE)!=senorsList.end())
 8008716:	2313      	movs	r3, #19
 8008718:	613b      	str	r3, [r7, #16]
 800871a:	f107 0310 	add.w	r3, r7, #16
 800871e:	4619      	mov	r1, r3
 8008720:	6838      	ldr	r0, [r7, #0]
 8008722:	f7fc fe0b 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008726:	4603      	mov	r3, r0
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	6838      	ldr	r0, [r7, #0]
 800872c:	f7fc fe1f 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008730:	4603      	mov	r3, r0
 8008732:	617b      	str	r3, [r7, #20]
 8008734:	f107 0214 	add.w	r2, r7, #20
 8008738:	f107 030c 	add.w	r3, r7, #12
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f7fc fe22 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01a      	beq.n	8008780 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(distance));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	1d1c      	adds	r4, r3, #4
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8008756:	4619      	mov	r1, r3
 8008758:	4610      	mov	r0, r2
 800875a:	f7fb fe01 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 800875e:	4603      	mov	r3, r0
 8008760:	4619      	mov	r1, r3
 8008762:	4620      	mov	r0, r4
 8008764:	f00e ff4e 	bl	8017604 <strcat>
		strcat(packet,",");
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	1d1c      	adds	r4, r3, #4
 800876c:	4620      	mov	r0, r4
 800876e:	f7f7 fd2f 	bl	80001d0 <strlen>
 8008772:	4603      	mov	r3, r0
 8008774:	4423      	add	r3, r4
 8008776:	4905      	ldr	r1, [pc, #20]	; (800878c <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>)
 8008778:	461a      	mov	r2, r3
 800877a:	460b      	mov	r3, r1
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3304      	adds	r3, #4
}
 8008784:	4618      	mov	r0, r3
 8008786:	371c      	adds	r7, #28
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}
 800878c:	08017840 	.word	0x08017840

08008790 <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	ed87 0a01 	vstr	s0, [r7, #4]
 800879a:	ed97 0a01 	vldr	s0, [r7, #4]
 800879e:	f00c ff65 	bl	801566c <tanf>
 80087a2:	eef0 7a40 	vmov.f32	s15, s0
 80087a6:	eeb0 0a67 	vmov.f32	s0, s15
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688P>:
 */

#include "PMW3901UY.hpp"
//#include "utils_functions.hpp"

PMW3901UY::PMW3901UY(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,uint8_t timeout,ICM42688P& icm):
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	70fb      	strb	r3, [r7, #3]
	icm(icm)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3336      	adds	r3, #54	; 0x36
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fd f93f 	bl	8005a46 <_ZN7TimeoutC1Ev>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fb fe0a 	bl	80043e4 <_ZN15PrintableSensorC1Ev>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3340      	adds	r3, #64	; 0x40
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fb fe1b 	bl	8004410 <_ZN12CallsCounterC1Ev>
 80087da:	4a18      	ldr	r2, [pc, #96]	; (800883c <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688P+0x8c>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	22fe      	movs	r2, #254	; 0xfe
 80087e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2204      	movs	r2, #4
 80087ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	22aa      	movs	r2, #170	; 0xaa
 80087f4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
{
	PMW3901UY::uart_port = uart_port;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	655a      	str	r2, [r3, #84]	; 0x54
	PMW3901UY::uart_port_dma=uart_port_dma;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	659a      	str	r2, [r3, #88]	; 0x58

	setTimeoutValue(timeout);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3336      	adds	r3, #54	; 0x36
 8008826:	78fa      	ldrb	r2, [r7, #3]
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f7fd f8fc 	bl	8005a28 <_ZN7Timeout15setTimeoutValueEh>
}
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	080179e8 	.word	0x080179e8

08008840 <_ZN9PMW3901UY5beginEv>:

void PMW3901UY::begin()
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart_port, rx_buff, packet_length);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3360      	adds	r3, #96	; 0x60
 8008850:	2209      	movs	r2, #9
 8008852:	4619      	mov	r1, r3
 8008854:	f007 f838 	bl	800f8c8 <HAL_UART_Receive_DMA>
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <_ZN9PMW3901UY6updateEv>:

void PMW3901UY::update()
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0]==this->BEGIN_BIT && this->rx_buff[1]==this->DATA_LEN_BIT && this->rx_buff[8]==this->END_BIT);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008874:	429a      	cmp	r2, r3
 8008876:	d111      	bne.n	800889c <_ZN9PMW3901UY6updateEv+0x3c>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008884:	429a      	cmp	r2, r3
 8008886:	d109      	bne.n	800889c <_ZN9PMW3901UY6updateEv+0x3c>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008894:	429a      	cmp	r2, r3
 8008896:	d101      	bne.n	800889c <_ZN9PMW3901UY6updateEv+0x3c>
 8008898:	2301      	movs	r3, #1
 800889a:	e000      	b.n	800889e <_ZN9PMW3901UY6updateEv+0x3e>
 800889c:	2300      	movs	r3, #0
 800889e:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d046      	beq.n	8008934 <_ZN9PMW3901UY6updateEv+0xd4>
	{
		this->flow_x = (int16_t)(this->rx_buff[3]<<8 | this->rx_buff[2]);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	b21a      	sxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80088b6:	b21b      	sxth	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b21a      	sxth	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		this->flow_y = (int16_t)(this->rx_buff[5]<<8 | this->rx_buff[4]);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80088c8:	021b      	lsls	r3, r3, #8
 80088ca:	b21a      	sxth	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80088d2:	b21b      	sxth	r3, r3
 80088d4:	4313      	orrs	r3, r2
 80088d6:	b21a      	sxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		this->quality = this->rx_buff[7];
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		this->x_pos += this->flow_x;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	4413      	add	r3, r2
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	b21a      	sxth	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		this->y_pos += this->flow_y;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800890c:	b29a      	uxth	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8008914:	b29b      	uxth	r3, r3
 8008916:	4413      	add	r3, r2
 8008918:	b29b      	uxth	r3, r3
 800891a:	b21a      	sxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

		this->process();
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f858 	bl	80089d8 <_ZN9PMW3901UY7processEv>
		this->resetTimeoutCounter();
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3336      	adds	r3, #54	; 0x36
 800892c:	4618      	mov	r0, r3
 800892e:	f7ff fdfd 	bl	800852c <_ZN7Timeout19resetTimeoutCounterEv>
 8008932:	e033      	b.n	800899c <_ZN9PMW3901UY6updateEv+0x13c>
	}
	else if (this->wrongDataReceived==false)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800893a:	2b00      	cmp	r3, #0
 800893c:	d12e      	bne.n	800899c <_ZN9PMW3901UY6updateEv+0x13c>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
 8008942:	7bfb      	ldrb	r3, [r7, #15]
 8008944:	2b07      	cmp	r3, #7
 8008946:	d829      	bhi.n	800899c <_ZN9PMW3901UY6updateEv+0x13c>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008958:	429a      	cmp	r2, r3
 800895a:	d11b      	bne.n	8008994 <_ZN9PMW3901UY6updateEv+0x134>
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	3301      	adds	r3, #1
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	4413      	add	r3, r2
 8008964:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800896e:	429a      	cmp	r2, r3
 8008970:	d110      	bne.n	8008994 <_ZN9PMW3901UY6updateEv+0x134>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	b29b      	uxth	r3, r3
 8008980:	330a      	adds	r3, #10
 8008982:	b29b      	uxth	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	f006 ff9f 	bl	800f8c8 <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				return;
 8008992:	e01e      	b.n	80089d2 <_ZN9PMW3901UY6updateEv+0x172>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	3301      	adds	r3, #1
 8008998:	73fb      	strb	r3, [r7, #15]
 800899a:	e7d2      	b.n	8008942 <_ZN9PMW3901UY6updateEv+0xe2>
			}
		}
	}

	if (this->wrongDataReceived == true)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d103      	bne.n	80089ae <_ZN9PMW3901UY6updateEv+0x14e>
		this->wrongDataReceived = false;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3360      	adds	r3, #96	; 0x60
 80089b6:	2209      	movs	r2, #9
 80089b8:	4619      	mov	r1, r3
 80089ba:	f006 ff85 	bl	800f8c8 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 0208 	bic.w	r2, r2, #8
 80089d0:	601a      	str	r2, [r3, #0]
}
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <_ZN9PMW3901UY7processEv>:

void PMW3901UY::process()
{
 80089d8:	b5b0      	push	{r4, r5, r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	_mini.flow_x = static_cast<float>(this->flow_x);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	_mini.flow_x = static_cast<float>(this->flow_y);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	_mini.flow_x_i += _mini.flow_x;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8008a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	_mini.flow_y_i += _mini.flow_y;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8008a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	_pixel_flow.fix_x_i += (_mini.flow_x_i - _pixel_flow.fix_x_i) * 0.2F;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8008a46:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008a4a:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8008c40 <_ZN9PMW3901UY7processEv+0x268>
 8008a4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	_pixel_flow.fix_y_i += (_mini.flow_y_i - _pixel_flow.fix_y_i) * 0.2F;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8008a6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008a72:	eddf 6a73 	vldr	s13, [pc, #460]	; 8008c40 <_ZN9PMW3901UY7processEv+0x268>
 8008a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	_pixel_flow.ang_x += (600.0F * tan(icm.getEulerX()*0.0174F) - _pixel_flow.ang_x) * 0.2F;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff fa91 	bl	8007fb0 <_ZN9ICM42688P9getEulerXEv>
 8008a8e:	eef0 7a40 	vmov.f32	s15, s0
 8008a92:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8008c44 <_ZN9PMW3901UY7processEv+0x26c>
 8008a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a9e:	f7ff fe77 	bl	8008790 <_ZSt3tanf>
 8008aa2:	eef0 7a40 	vmov.f32	s15, s0
 8008aa6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8008c48 <_ZN9PMW3901UY7processEv+0x270>
 8008aaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8008ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ab8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8008c40 <_ZN9PMW3901UY7processEv+0x268>
 8008abc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8008ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	_pixel_flow.ang_y += (600.0F * tan(icm.getEulerY()*0.0174F) - _pixel_flow.ang_y) * 0.2F;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff fa87 	bl	8007fe8 <_ZN9ICM42688P9getEulerYEv>
 8008ada:	eef0 7a40 	vmov.f32	s15, s0
 8008ade:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8008c44 <_ZN9PMW3901UY7processEv+0x26c>
 8008ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8008aea:	f7ff fe51 	bl	8008790 <_ZSt3tanf>
 8008aee:	eef0 7a40 	vmov.f32	s15, s0
 8008af2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8008c48 <_ZN9PMW3901UY7processEv+0x270>
 8008af6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8008b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b04:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8008c40 <_ZN9PMW3901UY7processEv+0x268>
 8008b08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8008b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

	_pixel_flow.out_x_i = _pixel_flow.fix_x_i - _pixel_flow.ang_x;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8008b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	_pixel_flow.out_x_i = _pixel_flow.fix_y_i - _pixel_flow.ang_y;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8008b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

	_pixel_flow.x = (_pixel_flow.out_x_i - _pixel_flow.out_x_i_o);// / dT;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8008b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	_pixel_flow.out_x_i_o = _pixel_flow.out_x_i;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	_pixel_flow.y = (_pixel_flow.out_y_i - _pixel_flow.out_y_i_o);// / dT;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8008b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
	_pixel_flow.out_y_i_o = _pixel_flow.out_y_i;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	_pixel_flow.fit_x += (_pixel_flow.x - _pixel_flow.fix_x) * 0.1;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f7 fc88 	bl	80004a8 <__aeabi_f2d>
 8008b98:	4604      	mov	r4, r0
 8008b9a:	460d      	mov	r5, r1
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8008ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bac:	ee17 0a90 	vmov	r0, s15
 8008bb0:	f7f7 fc7a 	bl	80004a8 <__aeabi_f2d>
 8008bb4:	a320      	add	r3, pc, #128	; (adr r3, 8008c38 <_ZN9PMW3901UY7processEv+0x260>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fccd 	bl	8000558 <__aeabi_dmul>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f7f7 fb11 	bl	80001ec <__adddf3>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4610      	mov	r0, r2
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f7f7 ff99 	bl	8000b08 <__aeabi_d2f>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	_pixel_flow.fit_y += (_pixel_flow.y - _pixel_flow.fix_y) * 0.1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7f7 fc5f 	bl	80004a8 <__aeabi_f2d>
 8008bea:	4604      	mov	r4, r0
 8008bec:	460d      	mov	r5, r1
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8008bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bfe:	ee17 0a90 	vmov	r0, s15
 8008c02:	f7f7 fc51 	bl	80004a8 <__aeabi_f2d>
 8008c06:	a30c      	add	r3, pc, #48	; (adr r3, 8008c38 <_ZN9PMW3901UY7processEv+0x260>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 fca4 	bl	8000558 <__aeabi_dmul>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4620      	mov	r0, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f7 fae8 	bl	80001ec <__adddf3>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4610      	mov	r0, r2
 8008c22:	4619      	mov	r1, r3
 8008c24:	f7f7 ff70 	bl	8000b08 <__aeabi_d2f>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bdb0      	pop	{r4, r5, r7, pc}
 8008c38:	9999999a 	.word	0x9999999a
 8008c3c:	3fb99999 	.word	0x3fb99999
 8008c40:	3e4ccccd 	.word	0x3e4ccccd
 8008c44:	3c8e8a72 	.word	0x3c8e8a72
 8008c48:	44160000 	.word	0x44160000

08008c4c <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* PMW3901UY::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8008c4c:	b590      	push	{r4, r7, lr}
 8008c4e:	b08f      	sub	sp, #60	; 0x3c
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	3304      	adds	r3, #4
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_X)!=senorsList.end())
 8008c5e:	2314      	movs	r3, #20
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	f107 030c 	add.w	r3, r7, #12
 8008c66:	4619      	mov	r1, r3
 8008c68:	6838      	ldr	r0, [r7, #0]
 8008c6a:	f7fc fb67 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	60bb      	str	r3, [r7, #8]
 8008c72:	6838      	ldr	r0, [r7, #0]
 8008c74:	f7fc fb7b 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	f107 0210 	add.w	r2, r7, #16
 8008c80:	f107 0308 	add.w	r3, r7, #8
 8008c84:	4611      	mov	r1, r2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fc fb7e 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d01a      	beq.n	8008cc8 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(x_pos));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	1d1c      	adds	r4, r3, #4
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	f7fb fb5d 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4620      	mov	r0, r4
 8008cac:	f00e fcaa 	bl	8017604 <strcat>
		strcat(packet,",");
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	1d1c      	adds	r4, r3, #4
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f7f7 fa8b 	bl	80001d0 <strlen>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4423      	add	r3, r4
 8008cbe:	4955      	ldr	r1, [pc, #340]	; (8008e14 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_Y)!=senorsList.end())
 8008cc8:	2315      	movs	r3, #21
 8008cca:	61bb      	str	r3, [r7, #24]
 8008ccc:	f107 0318 	add.w	r3, r7, #24
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6838      	ldr	r0, [r7, #0]
 8008cd4:	f7fc fb32 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	617b      	str	r3, [r7, #20]
 8008cdc:	6838      	ldr	r0, [r7, #0]
 8008cde:	f7fc fb46 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	f107 021c 	add.w	r2, r7, #28
 8008cea:	f107 0314 	add.w	r3, r7, #20
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fc fb49 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d01a      	beq.n	8008d32 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xe6>
	{
		strcat(packet,toCharArray(y_pos));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	1d1c      	adds	r4, r3, #4
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f7fb fb28 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 8008d10:	4603      	mov	r3, r0
 8008d12:	4619      	mov	r1, r3
 8008d14:	4620      	mov	r0, r4
 8008d16:	f00e fc75 	bl	8017604 <strcat>
		strcat(packet,",");
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	1d1c      	adds	r4, r3, #4
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7f7 fa56 	bl	80001d0 <strlen>
 8008d24:	4603      	mov	r3, r0
 8008d26:	4423      	add	r3, r4
 8008d28:	493a      	ldr	r1, [pc, #232]	; (8008e14 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_X)!=senorsList.end())
 8008d32:	2316      	movs	r3, #22
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
 8008d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6838      	ldr	r0, [r7, #0]
 8008d3e:	f7fc fafd 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008d42:	4603      	mov	r3, r0
 8008d44:	623b      	str	r3, [r7, #32]
 8008d46:	6838      	ldr	r0, [r7, #0]
 8008d48:	f7fc fb11 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008d54:	f107 0320 	add.w	r3, r7, #32
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fc fb14 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01a      	beq.n	8008d9c <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x150>
	{
		strcat(packet,toCharArray(flow_x));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	1d1c      	adds	r4, r3, #4
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8008d72:	4619      	mov	r1, r3
 8008d74:	4610      	mov	r0, r2
 8008d76:	f7fb faf3 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f00e fc40 	bl	8017604 <strcat>
		strcat(packet,",");
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	1d1c      	adds	r4, r3, #4
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7f7 fa21 	bl	80001d0 <strlen>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4423      	add	r3, r4
 8008d92:	4920      	ldr	r1, [pc, #128]	; (8008e14 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8008d94:	461a      	mov	r2, r3
 8008d96:	460b      	mov	r3, r1
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_Y)!=senorsList.end())
 8008d9c:	2317      	movs	r3, #23
 8008d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8008da0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008da4:	4619      	mov	r1, r3
 8008da6:	6838      	ldr	r0, [r7, #0]
 8008da8:	f7fc fac8 	bl	800533c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8008dac:	4603      	mov	r3, r0
 8008dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008db0:	6838      	ldr	r0, [r7, #0]
 8008db2:	f7fc fadc 	bl	800536e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8008db6:	4603      	mov	r3, r0
 8008db8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fc fadf 	bl	8005388 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01a      	beq.n	8008e06 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ba>
	{
		strcat(packet,toCharArray(flow_y));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	1d1c      	adds	r4, r3, #4
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4610      	mov	r0, r2
 8008de0:	f7fb fabe 	bl	8004360 <_ZN15PrintableSensor11toCharArrayEi>
 8008de4:	4603      	mov	r3, r0
 8008de6:	4619      	mov	r1, r3
 8008de8:	4620      	mov	r0, r4
 8008dea:	f00e fc0b 	bl	8017604 <strcat>
		strcat(packet,",");
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	1d1c      	adds	r4, r3, #4
 8008df2:	4620      	mov	r0, r4
 8008df4:	f7f7 f9ec 	bl	80001d0 <strlen>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	4423      	add	r3, r4
 8008dfc:	4905      	ldr	r1, [pc, #20]	; (8008e14 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8008dfe:	461a      	mov	r2, r3
 8008e00:	460b      	mov	r3, r1
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3304      	adds	r3, #4
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	373c      	adds	r7, #60	; 0x3c
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd90      	pop	{r4, r7, pc}
 8008e12:	bf00      	nop
 8008e14:	08017844 	.word	0x08017844

08008e18 <_ZN11PID_Control3outEv>:
 */

#include "PID_Control.hpp"

float PID_Control::out()
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
	error = reference - signal;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	ed93 7a00 	vldr	s14, [r3]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	edd3 7a00 	vldr	s15, [r3]
 8008e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	pid_p = error;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	60da      	str	r2, [r3, #12]
	pid_i = pid_i + error;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	ed93 7a04 	vldr	s14, [r3, #16]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	edc3 7a04 	vstr	s15, [r3, #16]
	pid_d = -(signal-last_signal);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	ed93 7a00 	vldr	s14, [r3]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e6a:	eef1 7a67 	vneg.f32	s15, s15
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	edc3 7a05 	vstr	s15, [r3, #20]

	last_signal = signal;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	629a      	str	r2, [r3, #40]	; 0x28

	return Kp*pid_p + Ki*pid_i + Kd*pid_d;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	ed93 7a00 	vldr	s14, [r3]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	edd3 6a01 	vldr	s13, [r3, #4]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	edd3 7a04 	vldr	s15, [r3, #16]
 8008e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	edd3 6a02 	vldr	s13, [r3, #8]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	edd3 7a05 	vldr	s15, [r3, #20]
 8008eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8008eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <_ZSt7forwardI16MemoryDescriptorEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
	...

08008edc <_ZL9GetSectorm>:
#include "stm32f4xx_hal.h"
#include "string.h"
#include "stdio.h"

static uint32_t GetSector(uint32_t Address)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]

  if((Address >= SECTOR0_BEGIN) && (Address < SECTOR0_END))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eee:	d306      	bcc.n	8008efe <_ZL9GetSectorm+0x22>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a42      	ldr	r2, [pc, #264]	; (8008ffc <_ZL9GetSectorm+0x120>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d802      	bhi.n	8008efe <_ZL9GetSectorm+0x22>
  {
    sector = FLASH_SECTOR_0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e077      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR1_BEGIN) && (Address < SECTOR1_END))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a3f      	ldr	r2, [pc, #252]	; (8009000 <_ZL9GetSectorm+0x124>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d306      	bcc.n	8008f14 <_ZL9GetSectorm+0x38>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a3e      	ldr	r2, [pc, #248]	; (8009004 <_ZL9GetSectorm+0x128>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d802      	bhi.n	8008f14 <_ZL9GetSectorm+0x38>
  {
    sector = FLASH_SECTOR_1;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	e06c      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR2_BEGIN) && (Address < SECTOR2_END))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a3c      	ldr	r2, [pc, #240]	; (8009008 <_ZL9GetSectorm+0x12c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d306      	bcc.n	8008f2a <_ZL9GetSectorm+0x4e>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a3b      	ldr	r2, [pc, #236]	; (800900c <_ZL9GetSectorm+0x130>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d802      	bhi.n	8008f2a <_ZL9GetSectorm+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8008f24:	2302      	movs	r3, #2
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	e061      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR3_BEGIN) && (Address < SECTOR3_END))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a38      	ldr	r2, [pc, #224]	; (8009010 <_ZL9GetSectorm+0x134>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d306      	bcc.n	8008f40 <_ZL9GetSectorm+0x64>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a37      	ldr	r2, [pc, #220]	; (8009014 <_ZL9GetSectorm+0x138>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d202      	bcs.n	8008f40 <_ZL9GetSectorm+0x64>
  {
    sector = FLASH_SECTOR_3;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	e056      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR4_BEGIN) && (Address < SECTOR4_END))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a34      	ldr	r2, [pc, #208]	; (8009014 <_ZL9GetSectorm+0x138>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d906      	bls.n	8008f56 <_ZL9GetSectorm+0x7a>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a33      	ldr	r2, [pc, #204]	; (8009018 <_ZL9GetSectorm+0x13c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d202      	bcs.n	8008f56 <_ZL9GetSectorm+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8008f50:	2304      	movs	r3, #4
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e04b      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR5_BEGIN) && (Address < SECTOR5_END))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a2f      	ldr	r2, [pc, #188]	; (8009018 <_ZL9GetSectorm+0x13c>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d906      	bls.n	8008f6c <_ZL9GetSectorm+0x90>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a2e      	ldr	r2, [pc, #184]	; (800901c <_ZL9GetSectorm+0x140>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d202      	bcs.n	8008f6c <_ZL9GetSectorm+0x90>
  {
    sector = FLASH_SECTOR_5;
 8008f66:	2305      	movs	r3, #5
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e040      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR6_BEGIN) && (Address < SECTOR6_END))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a2b      	ldr	r2, [pc, #172]	; (800901c <_ZL9GetSectorm+0x140>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d906      	bls.n	8008f82 <_ZL9GetSectorm+0xa6>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a2a      	ldr	r2, [pc, #168]	; (8009020 <_ZL9GetSectorm+0x144>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d202      	bcs.n	8008f82 <_ZL9GetSectorm+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8008f7c:	2306      	movs	r3, #6
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	e035      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR7_BEGIN) && (Address < SECTOR7_END))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a26      	ldr	r2, [pc, #152]	; (8009020 <_ZL9GetSectorm+0x144>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d906      	bls.n	8008f98 <_ZL9GetSectorm+0xbc>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a25      	ldr	r2, [pc, #148]	; (8009024 <_ZL9GetSectorm+0x148>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d202      	bcs.n	8008f98 <_ZL9GetSectorm+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8008f92:	2307      	movs	r3, #7
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	e02a      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR8_BEGIN) && (Address < SECTOR8_END))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a22      	ldr	r2, [pc, #136]	; (8009024 <_ZL9GetSectorm+0x148>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d906      	bls.n	8008fae <_ZL9GetSectorm+0xd2>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a21      	ldr	r2, [pc, #132]	; (8009028 <_ZL9GetSectorm+0x14c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d202      	bcs.n	8008fae <_ZL9GetSectorm+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8008fa8:	2308      	movs	r3, #8
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	e01f      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR9_BEGIN) && (Address < SECTOR9_END))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a1d      	ldr	r2, [pc, #116]	; (8009028 <_ZL9GetSectorm+0x14c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d906      	bls.n	8008fc4 <_ZL9GetSectorm+0xe8>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a1c      	ldr	r2, [pc, #112]	; (800902c <_ZL9GetSectorm+0x150>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d202      	bcs.n	8008fc4 <_ZL9GetSectorm+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8008fbe:	2309      	movs	r3, #9
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	e014      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR10_BEGIN) && (Address < SECTOR10_END))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a19      	ldr	r2, [pc, #100]	; (800902c <_ZL9GetSectorm+0x150>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d906      	bls.n	8008fda <_ZL9GetSectorm+0xfe>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a18      	ldr	r2, [pc, #96]	; (8009030 <_ZL9GetSectorm+0x154>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d802      	bhi.n	8008fda <_ZL9GetSectorm+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8008fd4:	230a      	movs	r3, #10
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e009      	b.n	8008fee <_ZL9GetSectorm+0x112>
  }
  else if((Address >= SECTOR11_BEGIN) && (Address < SECTOR11_END))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a15      	ldr	r2, [pc, #84]	; (8009034 <_ZL9GetSectorm+0x158>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d905      	bls.n	8008fee <_ZL9GetSectorm+0x112>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a14      	ldr	r2, [pc, #80]	; (8009038 <_ZL9GetSectorm+0x15c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d801      	bhi.n	8008fee <_ZL9GetSectorm+0x112>
  {
    sector = FLASH_SECTOR_11;
 8008fea:	230b      	movs	r3, #11
 8008fec:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8008fee:	68fb      	ldr	r3, [r7, #12]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	08003ffe 	.word	0x08003ffe
 8009000:	08004000 	.word	0x08004000
 8009004:	08007ffe 	.word	0x08007ffe
 8009008:	08008000 	.word	0x08008000
 800900c:	0800bffe 	.word	0x0800bffe
 8009010:	0800c000 	.word	0x0800c000
 8009014:	0800ffff 	.word	0x0800ffff
 8009018:	0801ffff 	.word	0x0801ffff
 800901c:	0803ffff 	.word	0x0803ffff
 8009020:	0805ffff 	.word	0x0805ffff
 8009024:	0807ffff 	.word	0x0807ffff
 8009028:	0809ffff 	.word	0x0809ffff
 800902c:	080bffff 	.word	0x080bffff
 8009030:	080dfffe 	.word	0x080dfffe
 8009034:	080dffff 	.word	0x080dffff
 8009038:	080ffffe 	.word	0x080ffffe

0800903c <_ZN3nvm15Flash_Read_DataEmPmt>:

void nvm::Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	807b      	strh	r3, [r7, #2]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	3304      	adds	r3, #4
 8009056:	60bb      	str	r3, [r7, #8]
		RxBuf++;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3304      	adds	r3, #4
 800905c:	607b      	str	r3, [r7, #4]
		if (!(numberofwords--)) break;
 800905e:	887b      	ldrh	r3, [r7, #2]
 8009060:	1e5a      	subs	r2, r3, #1
 8009062:	807a      	strh	r2, [r7, #2]
 8009064:	2b00      	cmp	r3, #0
 8009066:	bf0c      	ite	eq
 8009068:	2301      	moveq	r3, #1
 800906a:	2300      	movne	r3, #0
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d100      	bne.n	8009074 <_ZN3nvm15Flash_Read_DataEmPmt+0x38>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8009072:	e7ea      	b.n	800904a <_ZN3nvm15Flash_Read_DataEmPmt+0xe>
		if (!(numberofwords--)) break;
 8009074:	bf00      	nop
	}
}
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <_ZN3nvm14Flash_Read_NUMEm>:

float nvm::Flash_Read_NUM (uint32_t StartSectorAddress)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
	uint8_t buffer[4];
	int value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 800908c:	f107 0208 	add.w	r2, r7, #8
 8009090:	2301      	movs	r3, #1
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff ffd1 	bl	800903c <_ZN3nvm15Flash_Read_DataEmPmt>
	value = bytes2DataType<int>(buffer);
 800909a:	f107 0308 	add.w	r3, r7, #8
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 f8aa 	bl	80091f8 <_Z14bytes2DataTypeIiET_PKh>
 80090a4:	60f8      	str	r0, [r7, #12]
	return value;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80090b0:	eeb0 0a67 	vmov.f32	s0, s15
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <_ZN3nvm5writeE16MemoryDescriptori>:

uint32_t nvm::write(MemoryDescriptor memDes,int value)
{
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	b08b      	sub	sp, #44	; 0x2c
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	460b      	mov	r3, r1
 80090c8:	607a      	str	r2, [r7, #4]
 80090ca:	72fb      	strb	r3, [r7, #11]
    	return HAL_FLASH_GetError ();
    }

	HAL_FLASH_Lock();

	return 0;
 80090cc:	466b      	mov	r3, sp
 80090ce:	461e      	mov	r6, r3
	uint32_t adress=memoryMapp[MemoryDescriptor::PID_ROLL_P].first;
 80090d0:	2300      	movs	r3, #0
 80090d2:	75fb      	strb	r3, [r7, #23]
 80090d4:	f107 0317 	add.w	r3, r7, #23
 80090d8:	4619      	mov	r1, r3
 80090da:	482d      	ldr	r0, [pc, #180]	; (8009190 <_ZN3nvm5writeE16MemoryDescriptori+0xd4>)
 80090dc:	f000 f8ac 	bl	8009238 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEixEOS0_>
 80090e0:	4603      	mov	r3, r0
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t dataSize = sizeof(value);
 80090e6:	2304      	movs	r3, #4
 80090e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t buffer[dataSize];
 80090ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090f0:	1e59      	subs	r1, r3, #1
 80090f2:	61f9      	str	r1, [r7, #28]
 80090f4:	460b      	mov	r3, r1
 80090f6:	3301      	adds	r3, #1
 80090f8:	2200      	movs	r2, #0
 80090fa:	4698      	mov	r8, r3
 80090fc:	4691      	mov	r9, r2
 80090fe:	f04f 0200 	mov.w	r2, #0
 8009102:	f04f 0300 	mov.w	r3, #0
 8009106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800910a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800910e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009112:	460b      	mov	r3, r1
 8009114:	3301      	adds	r3, #1
 8009116:	2200      	movs	r2, #0
 8009118:	461c      	mov	r4, r3
 800911a:	4615      	mov	r5, r2
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	f04f 0300 	mov.w	r3, #0
 8009124:	00eb      	lsls	r3, r5, #3
 8009126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800912a:	00e2      	lsls	r2, r4, #3
 800912c:	460b      	mov	r3, r1
 800912e:	3301      	adds	r3, #1
 8009130:	3307      	adds	r3, #7
 8009132:	08db      	lsrs	r3, r3, #3
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	ebad 0d03 	sub.w	sp, sp, r3
 800913a:	466b      	mov	r3, sp
 800913c:	3300      	adds	r3, #0
 800913e:	61bb      	str	r3, [r7, #24]
	dataType2Bytes(buffer, value);
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	69b8      	ldr	r0, [r7, #24]
 8009144:	f000 f8d8 	bl	80092f8 <_Z14dataType2BytesIiEvPhT_>
	HAL_FLASH_Unlock();
 8009148:	f001 fdb0 	bl	800acac <HAL_FLASH_Unlock>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, adress, buffer[0]) != HAL_OK)
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2200      	movs	r2, #0
 8009154:	469a      	mov	sl, r3
 8009156:	4693      	mov	fp, r2
 8009158:	4652      	mov	r2, sl
 800915a:	465b      	mov	r3, fp
 800915c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800915e:	2002      	movs	r0, #2
 8009160:	f001 fd50 	bl	800ac04 <HAL_FLASH_Program>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	bf14      	ite	ne
 800916a:	2301      	movne	r3, #1
 800916c:	2300      	moveq	r3, #0
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <_ZN3nvm5writeE16MemoryDescriptori+0xc0>
    	return HAL_FLASH_GetError ();
 8009174:	f001 fdcc 	bl	800ad10 <HAL_FLASH_GetError>
 8009178:	4603      	mov	r3, r0
 800917a:	e002      	b.n	8009182 <_ZN3nvm5writeE16MemoryDescriptori+0xc6>
	HAL_FLASH_Lock();
 800917c:	f001 fdb8 	bl	800acf0 <HAL_FLASH_Lock>
	return 0;
 8009180:	2300      	movs	r3, #0
 8009182:	46b5      	mov	sp, r6
}
 8009184:	4618      	mov	r0, r3
 8009186:	372c      	adds	r7, #44	; 0x2c
 8009188:	46bd      	mov	sp, r7
 800918a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918e:	bf00      	nop
 8009190:	20000988 	.word	0x20000988

08009194 <_ZN3nvm15massEraseSectorEm>:

uint32_t nvm::massEraseSector(uint32_t sectorAdress)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
	static FLASH_EraseInitTypeDef eraseInitStruct;
	uint32_t sectorError;

	HAL_FLASH_Unlock();
 800919e:	f001 fd85 	bl	800acac <HAL_FLASH_Unlock>

	uint32_t sector = GetSector(sectorAdress);
 80091a2:	6838      	ldr	r0, [r7, #0]
 80091a4:	f7ff fe9a 	bl	8008edc <_ZL9GetSectorm>
 80091a8:	60f8      	str	r0, [r7, #12]

	eraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80091aa:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <_ZN3nvm15massEraseSectorEm+0x60>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]
	eraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80091b0:	4b10      	ldr	r3, [pc, #64]	; (80091f4 <_ZN3nvm15massEraseSectorEm+0x60>)
 80091b2:	2202      	movs	r2, #2
 80091b4:	611a      	str	r2, [r3, #16]
	eraseInitStruct.Sector        = sector;
 80091b6:	4a0f      	ldr	r2, [pc, #60]	; (80091f4 <_ZN3nvm15massEraseSectorEm+0x60>)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6093      	str	r3, [r2, #8]
	eraseInitStruct.NbSectors     = 1U;
 80091bc:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <_ZN3nvm15massEraseSectorEm+0x60>)
 80091be:	2201      	movs	r2, #1
 80091c0:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) != HAL_OK)
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	4619      	mov	r1, r3
 80091c8:	480a      	ldr	r0, [pc, #40]	; (80091f4 <_ZN3nvm15massEraseSectorEm+0x60>)
 80091ca:	f001 fedd 	bl	800af88 <HAL_FLASHEx_Erase>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	bf14      	ite	ne
 80091d4:	2301      	movne	r3, #1
 80091d6:	2300      	moveq	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <_ZN3nvm15massEraseSectorEm+0x52>
	{
		return HAL_FLASH_GetError ();
 80091de:	f001 fd97 	bl	800ad10 <HAL_FLASH_GetError>
 80091e2:	4603      	mov	r3, r0
 80091e4:	e002      	b.n	80091ec <_ZN3nvm15massEraseSectorEm+0x58>
	}

	HAL_FLASH_Lock();
 80091e6:	f001 fd83 	bl	800acf0 <HAL_FLASH_Lock>

	return 0;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	200009a0 	.word	0x200009a0

080091f8 <_Z14bytes2DataTypeIiET_PKh>:
    }
}


template <typename dataType>
static dataType bytes2DataType(const uint8_t bytes[])
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
{
	const uint8_t dataSize = sizeof(dataType);
 8009200:	2304      	movs	r3, #4
 8009202:	73bb      	strb	r3, [r7, #14]
    union {
      dataType obj;
      uint8_t bytes[dataSize];
    } dataObj;

    for (uint8_t i = 0; i < dataSize; i++) {
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	2b03      	cmp	r3, #3
 800920c:	d80c      	bhi.n	8009228 <_Z14bytes2DataTypeIiET_PKh+0x30>
    	dataObj.bytes[i] = bytes[i];
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	441a      	add	r2, r3
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	7812      	ldrb	r2, [r2, #0]
 8009218:	3310      	adds	r3, #16
 800921a:	443b      	add	r3, r7
 800921c:	f803 2c08 	strb.w	r2, [r3, #-8]
    for (uint8_t i = 0; i < dataSize; i++) {
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	3301      	adds	r3, #1
 8009224:	73fb      	strb	r3, [r7, #15]
 8009226:	e7ef      	b.n	8009208 <_Z14bytes2DataTypeIiET_PKh+0x10>
    }

   return dataObj.obj;
 8009228:	68bb      	ldr	r3, [r7, #8]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
	...

08009238 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 8009238:	b590      	push	{r4, r7, lr}
 800923a:	b08b      	sub	sp, #44	; 0x2c
 800923c:	af02      	add	r7, sp, #8
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f878 	bl	800933a <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEE11lower_boundERS6_>
 800924a:	4603      	mov	r3, r0
 800924c:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f882 	bl	8009358 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEE3endEv>
 8009254:	4603      	mov	r3, r0
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	f107 020c 	add.w	r2, r7, #12
 800925c:	f107 0308 	add.w	r3, r7, #8
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f7f8 fd0b 	bl	8001c7e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEES8_>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d112      	bne.n	8009294 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEixEOS0_+0x5c>
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f87f 	bl	8009372 <_ZNKSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEE8key_compEv>
 8009274:	f107 0308 	add.w	r3, r7, #8
 8009278:	4618      	mov	r0, r3
 800927a:	f000 f887 	bl	800938c <_ZNKSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEdeEv>
 800927e:	4603      	mov	r3, r0
 8009280:	461a      	mov	r2, r3
 8009282:	f107 0310 	add.w	r3, r7, #16
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	f7f8 fb73 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEixEOS0_+0x60>
 8009294:	2301      	movs	r3, #1
 8009296:	e000      	b.n	800929a <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEixEOS0_+0x62>
 8009298:	2300      	movs	r3, #0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d01f      	beq.n	80092de <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEixEOS0_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800929e:	687c      	ldr	r4, [r7, #4]
 80092a0:	f107 0208 	add.w	r2, r7, #8
 80092a4:	f107 0314 	add.w	r3, r7, #20
 80092a8:	4611      	mov	r1, r2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7f8 f8b5 	bl	800141a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					std::forward_as_tuple(std::move(__k)),
 80092b0:	6838      	ldr	r0, [r7, #0]
 80092b2:	f000 f879 	bl	80093a8 <_ZSt4moveIR16MemoryDescriptorEONSt16remove_referenceIT_E4typeEOS3_>
 80092b6:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80092b8:	f107 0318 	add.w	r3, r7, #24
 80092bc:	4611      	mov	r1, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f88d 	bl	80093de <_ZSt16forward_as_tupleIJ16MemoryDescriptorEESt5tupleIJDpOT_EES4_>
 80092c4:	f107 0218 	add.w	r2, r7, #24
 80092c8:	f107 031c 	add.w	r3, r7, #28
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	4613      	mov	r3, r2
 80092d0:	4a08      	ldr	r2, [pc, #32]	; (80092f4 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEixEOS0_+0xbc>)
 80092d2:	6979      	ldr	r1, [r7, #20]
 80092d4:	4620      	mov	r0, r4
 80092d6:	f000 f893 	bl	8009400 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 80092da:	4603      	mov	r3, r0
 80092dc:	60bb      	str	r3, [r7, #8]
					std::tuple<>());
	return (*__i).second;
 80092de:	f107 0308 	add.w	r3, r7, #8
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f852 	bl	800938c <_ZNKSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEdeEv>
 80092e8:	4603      	mov	r3, r0
 80092ea:	3304      	adds	r3, #4
      }
 80092ec:	4618      	mov	r0, r3
 80092ee:	3724      	adds	r7, #36	; 0x24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd90      	pop	{r4, r7, pc}
 80092f4:	080179ec 	.word	0x080179ec

080092f8 <_Z14dataType2BytesIiEvPhT_>:
static void dataType2Bytes(uint8_t* buffer, dataType data)
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
	const uint8_t dataSize = sizeof(dataType);
 8009302:	2304      	movs	r3, #4
 8009304:	73bb      	strb	r3, [r7, #14]
    dataObj.obj = data;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	60bb      	str	r3, [r7, #8]
    for (uint8_t i = 0; i < dataSize; i++) {
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	2b03      	cmp	r3, #3
 8009312:	d80c      	bhi.n	800932e <_Z14dataType2BytesIiEvPhT_+0x36>
      buffer[i] = dataObj.bytes[i];
 8009314:	7bfa      	ldrb	r2, [r7, #15]
 8009316:	7bfb      	ldrb	r3, [r7, #15]
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	440b      	add	r3, r1
 800931c:	3210      	adds	r2, #16
 800931e:	443a      	add	r2, r7
 8009320:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8009324:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < dataSize; i++) {
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	3301      	adds	r3, #1
 800932a:	73fb      	strb	r3, [r7, #15]
 800932c:	e7ef      	b.n	800930e <_Z14dataType2BytesIiEvPhT_+0x16>
}
 800932e:	bf00      	nop
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEE11lower_boundERS6_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f000 f897 	bl	800947c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>
 800934e:	4603      	mov	r3, r0
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4618      	mov	r0, r3
 8009364:	f7f8 f848 	bl	80013f8 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8009368:	4603      	mov	r3, r0
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <_ZNKSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEE8key_compEv>:
      key_comp() const
 8009372:	b590      	push	{r4, r7, lr}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4618      	mov	r0, r3
 800937e:	f000 f894 	bl	80094aa <_ZNKSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>
 8009382:	bf00      	nop
 8009384:	4620      	mov	r0, r4
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	bd90      	pop	{r4, r7, pc}

0800938c <_ZNKSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f7f8 fc17 	bl	8001bcc <_ZNSt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE9_M_valptrEv>
 800939e:	4603      	mov	r3, r0
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <_ZSt4moveIR16MemoryDescriptorEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <_ZNSt5tupleIJO16MemoryDescriptorEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	4611      	mov	r1, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 f889 	bl	80094e6 <_ZNSt11_Tuple_implILj0EJO16MemoryDescriptorEEC1EOS2_>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <_ZSt16forward_as_tupleIJ16MemoryDescriptorEESt5tupleIJDpOT_EES4_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 80093e8:	6838      	ldr	r0, [r7, #0]
 80093ea:	f7ff fd6b 	bl	8008ec4 <_ZSt7forwardI16MemoryDescriptorEOT_RNSt16remove_referenceIS1_E4typeE>
 80093ee:	4603      	mov	r3, r0
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f864 	bl	80094c0 <_ZNSt5tupleIJO16MemoryDescriptorEEC1IJS0_ELb1ELb1EEEDpOT_>
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009400:	b5b0      	push	{r4, r5, r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f880 	bl	8009514 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009414:	4604      	mov	r4, r0
 8009416:	6838      	ldr	r0, [r7, #0]
 8009418:	f000 f887 	bl	800952a <_ZSt7forwardISt5tupleIJO16MemoryDescriptorEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800941c:	4605      	mov	r5, r0
 800941e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009420:	f000 f88e 	bl	8009540 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009424:	4603      	mov	r3, r0
 8009426:	462a      	mov	r2, r5
 8009428:	4621      	mov	r1, r4
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 f893 	bl	8009556 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8009430:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8009432:	69f8      	ldr	r0, [r7, #28]
 8009434:	f7f8 fbf4 	bl	8001c20 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8009438:	4603      	mov	r3, r0
 800943a:	f107 0010 	add.w	r0, r7, #16
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	68f9      	ldr	r1, [r7, #12]
 8009442:	f7f8 f8a0 	bl	8001586 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
	    if (__res.second)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d007      	beq.n	800945c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 800944c:	6939      	ldr	r1, [r7, #16]
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 f8a2 	bl	800959c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8009458:	4603      	mov	r3, r0
 800945a:	e00b      	b.n	8009474 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>
	    _M_drop_node(__z);
 800945c:	69f9      	ldr	r1, [r7, #28]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f7f8 f841 	bl	80014e6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	f107 0318 	add.w	r3, r7, #24
 800946a:	4611      	mov	r1, r2
 800946c:	4618      	mov	r0, r3
 800946e:	f7f8 f87b 	bl	8001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>
 8009472:	69bb      	ldr	r3, [r7, #24]
      }
 8009474:	4618      	mov	r0, r3
 8009476:	3720      	adds	r7, #32
 8009478:	46bd      	mov	sp, r7
 800947a:	bdb0      	pop	{r4, r5, r7, pc}

0800947c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 800947c:	b590      	push	{r4, r7, lr}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7f7 ff59 	bl	800133e <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 800948c:	4604      	mov	r4, r0
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7f8 fa40 	bl	8001914 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8009494:	4602      	mov	r2, r0
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	4621      	mov	r1, r4
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8bb 	bl	8009616 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4618      	mov	r0, r3
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd90      	pop	{r4, r7, pc}

080094aa <_ZNKSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>:
      key_comp() const
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80094b2:	bf00      	nop
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <_ZNSt5tupleIJO16MemoryDescriptorEEC1IJS0_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 80094c0:	b590      	push	{r4, r7, lr}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 80094ca:	687c      	ldr	r4, [r7, #4]
 80094cc:	6838      	ldr	r0, [r7, #0]
 80094ce:	f7ff fcf9 	bl	8008ec4 <_ZSt7forwardI16MemoryDescriptorEOT_RNSt16remove_referenceIS1_E4typeE>
 80094d2:	4603      	mov	r3, r0
 80094d4:	4619      	mov	r1, r3
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 f8ce 	bl	8009678 <_ZNSt11_Tuple_implILj0EJO16MemoryDescriptorEEC1IS0_EEOT_>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd90      	pop	{r4, r7, pc}

080094e6 <_ZNSt11_Tuple_implILj0EJO16MemoryDescriptorEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80094e6:	b590      	push	{r4, r7, lr}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80094f0:	687c      	ldr	r4, [r7, #4]
 80094f2:	6838      	ldr	r0, [r7, #0]
 80094f4:	f000 f8d3 	bl	800969e <_ZNSt11_Tuple_implILj0EJO16MemoryDescriptorEE7_M_headERS2_>
 80094f8:	4603      	mov	r3, r0
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f8dc 	bl	80096b8 <_ZSt7forwardIO16MemoryDescriptorEOT_RNSt16remove_referenceIS2_E4typeE>
 8009500:	4603      	mov	r3, r0
 8009502:	4619      	mov	r1, r3
 8009504:	4620      	mov	r0, r4
 8009506:	f000 f8e2 	bl	80096ce <_ZNSt10_Head_baseILj0EO16MemoryDescriptorLb0EEC1IS0_EEOT_>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	bd90      	pop	{r4, r7, pc}

08009514 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <_ZSt7forwardISt5tupleIJO16MemoryDescriptorEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8009556:	b5b0      	push	{r4, r5, r7, lr}
 8009558:	b088      	sub	sp, #32
 800955a:	af02      	add	r7, sp, #8
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
 8009562:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7f8 fc11 	bl	8001d8c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 800956a:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800956c:	68b8      	ldr	r0, [r7, #8]
 800956e:	f7ff ffd1 	bl	8009514 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009572:	4604      	mov	r4, r0
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff ffd8 	bl	800952a <_ZSt7forwardISt5tupleIJO16MemoryDescriptorEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800957a:	4605      	mov	r5, r0
 800957c:	6838      	ldr	r0, [r7, #0]
 800957e:	f7ff ffdf 	bl	8009540 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009582:	4603      	mov	r3, r0
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	462b      	mov	r3, r5
 8009588:	4622      	mov	r2, r4
 800958a:	6979      	ldr	r1, [r7, #20]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f8ae 	bl	80096ee <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8009592:	697b      	ldr	r3, [r7, #20]
	}
 8009594:	4618      	mov	r0, r3
 8009596:	3718      	adds	r7, #24
 8009598:	46bd      	mov	sp, r7
 800959a:	bdb0      	pop	{r4, r5, r7, pc}

0800959c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800959c:	b5b0      	push	{r4, r5, r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d117      	bne.n	80095e0 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7f8 f9af 	bl	8001914 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80095b6:	4602      	mov	r2, r0
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d010      	beq.n	80095e0 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80095be:	68fc      	ldr	r4, [r7, #12]
 80095c0:	6838      	ldr	r0, [r7, #0]
 80095c2:	f7f8 fb2d 	bl	8001c20 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80095c6:	4605      	mov	r5, r0
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7f8 f9c7 	bl	800195c <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80095ce:	4603      	mov	r3, r0
 80095d0:	461a      	mov	r2, r3
 80095d2:	4629      	mov	r1, r5
 80095d4:	4620      	mov	r0, r4
 80095d6:	f7f8 f9cd 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
 80095e0:	2301      	movs	r3, #1
 80095e2:	e000      	b.n	80095e6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4a>
 80095e4:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80095e6:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80095ec:	7df8      	ldrb	r0, [r7, #23]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	f00b ff53 	bl	801549c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8009600:	f107 0310 	add.w	r3, r7, #16
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f7f7 ffae 	bl	8001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>
 800960c:	693b      	ldr	r3, [r7, #16]
    }
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bdb0      	pop	{r4, r5, r7, pc}

08009616 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009616:	b590      	push	{r4, r7, lr}
 8009618:	b087      	sub	sp, #28
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
 8009622:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d01b      	beq.n	8009662 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800962a:	68fc      	ldr	r4, [r7, #12]
 800962c:	68b8      	ldr	r0, [r7, #8]
 800962e:	f7f8 faf7 	bl	8001c20 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8009632:	4603      	mov	r3, r0
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	4619      	mov	r1, r3
 8009638:	4620      	mov	r0, r4
 800963a:	f7f8 f99b 	bl	8001974 <_ZNKSt4lessI16MemoryDescriptorEclERKS0_S3_>
 800963e:	4603      	mov	r3, r0
 8009640:	f083 0301 	eor.w	r3, r3, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d006      	beq.n	8009658 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	607b      	str	r3, [r7, #4]
 800964e:	68b8      	ldr	r0, [r7, #8]
 8009650:	f7f7 ff3d 	bl	80014ce <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009654:	60b8      	str	r0, [r7, #8]
 8009656:	e7e5      	b.n	8009624 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8009658:	68b8      	ldr	r0, [r7, #8]
 800965a:	f7f7 ff2c 	bl	80014b6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800965e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8009660:	e7e0      	b.n	8009624 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 8009662:	f107 0314 	add.w	r3, r7, #20
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4618      	mov	r0, r3
 800966a:	f7f7 ff7d 	bl	8001568 <_ZNSt17_Rb_tree_iteratorISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEEC1EPSt18_Rb_tree_node_base>
 800966e:	697b      	ldr	r3, [r7, #20]
    }
 8009670:	4618      	mov	r0, r3
 8009672:	371c      	adds	r7, #28
 8009674:	46bd      	mov	sp, r7
 8009676:	bd90      	pop	{r4, r7, pc}

08009678 <_ZNSt11_Tuple_implILj0EJO16MemoryDescriptorEEC1IS0_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8009678:	b590      	push	{r4, r7, lr}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8009682:	687c      	ldr	r4, [r7, #4]
 8009684:	6838      	ldr	r0, [r7, #0]
 8009686:	f7ff fc1d 	bl	8008ec4 <_ZSt7forwardI16MemoryDescriptorEOT_RNSt16remove_referenceIS1_E4typeE>
 800968a:	4603      	mov	r3, r0
 800968c:	4619      	mov	r1, r3
 800968e:	4620      	mov	r0, r4
 8009690:	f000 f81d 	bl	80096ce <_ZNSt10_Head_baseILj0EO16MemoryDescriptorLb0EEC1IS0_EEOT_>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4618      	mov	r0, r3
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	bd90      	pop	{r4, r7, pc}

0800969e <_ZNSt11_Tuple_implILj0EJO16MemoryDescriptorEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 f84d 	bl	8009748 <_ZNSt10_Head_baseILj0EO16MemoryDescriptorLb0EE7_M_headERS2_>
 80096ae:	4603      	mov	r3, r0
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <_ZSt7forwardIO16MemoryDescriptorEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <_ZNSt10_Head_baseILj0EO16MemoryDescriptorLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80096d8:	6838      	ldr	r0, [r7, #0]
 80096da:	f7ff fbf3 	bl	8008ec4 <_ZSt7forwardI16MemoryDescriptorEOT_RNSt16remove_referenceIS1_E4typeE>
 80096de:	4602      	mov	r2, r0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80096ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	4619      	mov	r1, r3
 8009702:	201c      	movs	r0, #28
 8009704:	f7f7 fbd2 	bl	8000eac <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f7f8 fa54 	bl	8001bb6 <_ZNSt8_Rb_treeI16MemoryDescriptorSt4pairIKS0_S1_Im14MemoryDataTypeEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800970e:	4604      	mov	r4, r0
 8009710:	68b8      	ldr	r0, [r7, #8]
 8009712:	f7f8 fa5b 	bl	8001bcc <_ZNSt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS0_Im14MemoryDataTypeEEE9_M_valptrEv>
 8009716:	4605      	mov	r5, r0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fefb 	bl	8009514 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800971e:	4606      	mov	r6, r0
 8009720:	6838      	ldr	r0, [r7, #0]
 8009722:	f7ff ff02 	bl	800952a <_ZSt7forwardISt5tupleIJO16MemoryDescriptorEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009726:	4680      	mov	r8, r0
 8009728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800972a:	f7ff ff09 	bl	8009540 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800972e:	4603      	mov	r3, r0
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	4643      	mov	r3, r8
 8009734:	4632      	mov	r2, r6
 8009736:	4629      	mov	r1, r5
 8009738:	4620      	mov	r0, r4
 800973a:	f000 f811 	bl	8009760 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 800973e:	bf00      	nop
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009748 <_ZNSt10_Head_baseILj0EO16MemoryDescriptorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS1_Im14MemoryDataTypeEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009760:	b5b0      	push	{r4, r5, r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af02      	add	r7, sp, #8
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fed0 	bl	8009514 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009774:	4604      	mov	r4, r0
 8009776:	6838      	ldr	r0, [r7, #0]
 8009778:	f7ff fed7 	bl	800952a <_ZSt7forwardISt5tupleIJO16MemoryDescriptorEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800977c:	4605      	mov	r5, r0
 800977e:	6a38      	ldr	r0, [r7, #32]
 8009780:	f7ff fede 	bl	8009540 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009784:	4603      	mov	r3, r0
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	462b      	mov	r3, r5
 800978a:	4622      	mov	r2, r4
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f804 	bl	800979c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>
	}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bdb0      	pop	{r4, r5, r7, pc}

0800979c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK16MemoryDescriptorS2_Im14MemoryDataTypeEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800979c:	b590      	push	{r4, r7, lr}
 800979e:	b089      	sub	sp, #36	; 0x24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff feb2 	bl	8009514 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80097b0:	6838      	ldr	r0, [r7, #0]
 80097b2:	f7ff feba 	bl	800952a <_ZSt7forwardISt5tupleIJO16MemoryDescriptorEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80097b6:	4602      	mov	r2, r0
 80097b8:	f107 0318 	add.w	r3, r7, #24
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff fdfd 	bl	80093be <_ZNSt5tupleIJO16MemoryDescriptorEEC1EOS2_>
 80097c4:	f107 0418 	add.w	r4, r7, #24
 80097c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ca:	f7ff feb9 	bl	8009540 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	4619      	mov	r1, r3
 80097d2:	200c      	movs	r0, #12
 80097d4:	f7f7 fb6a 	bl	8000eac <_ZnwjPv>
 80097d8:	7f3b      	ldrb	r3, [r7, #28]
 80097da:	4622      	mov	r2, r4
 80097dc:	7d39      	ldrb	r1, [r7, #20]
 80097de:	f000 f804 	bl	80097ea <_ZNSt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 80097e2:	bf00      	nop
 80097e4:	3724      	adds	r7, #36	; 0x24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd90      	pop	{r4, r7, pc}

080097ea <_ZNSt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 80097ea:	b5b0      	push	{r4, r5, r7, lr}
 80097ec:	b086      	sub	sp, #24
 80097ee:	af02      	add	r7, sp, #8
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	7239      	strb	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]
 80097f6:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80097f8:	463a      	mov	r2, r7
 80097fa:	f88d 4000 	strb.w	r4, [sp]
 80097fe:	462b      	mov	r3, r5
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 f805 	bl	8009812 <_ZNSt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bdb0      	pop	{r4, r5, r7, pc}

08009812 <_ZNSt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
 800981e:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8009820:	68b8      	ldr	r0, [r7, #8]
 8009822:	f000 f812 	bl	800984a <_ZSt3getILj0EJO16MemoryDescriptorEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8009826:	4603      	mov	r3, r0
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff ff45 	bl	80096b8 <_ZSt7forwardIO16MemoryDescriptorEOT_RNSt16remove_referenceIS2_E4typeE>
 800982e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8009830:	781a      	ldrb	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	701a      	strb	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3304      	adds	r3, #4
 800983a:	4618      	mov	r0, r3
 800983c:	f000 f812 	bl	8009864 <_ZNSt4pairIm14MemoryDataTypeEC1ImS0_Lb1EEEv>
      { }
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <_ZSt3getILj0EJO16MemoryDescriptorEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f816 	bl	8009886 <_ZSt12__get_helperILj0EO16MemoryDescriptorJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800985a:	4603      	mov	r3, r0
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <_ZNSt4pairIm14MemoryDataTypeEC1ImS0_Lb1EEEv>:
      _GLIBCXX_CONSTEXPR pair()
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	711a      	strb	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4618      	mov	r0, r3
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <_ZSt12__get_helperILj0EO16MemoryDescriptorJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7ff ff05 	bl	800969e <_ZNSt11_Tuple_implILj0EJO16MemoryDescriptorEE7_M_headERS2_>
 8009894:	4603      	mov	r3, r0
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <_Z41__static_initialization_and_destruction_0ii>:
 80098a0:	b5b0      	push	{r4, r5, r7, lr}
 80098a2:	b092      	sub	sp, #72	; 0x48
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d129      	bne.n	8009904 <_Z41__static_initialization_and_destruction_0ii+0x64>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d124      	bne.n	8009904 <_Z41__static_initialization_and_destruction_0ii+0x64>
static std::map<MemoryDescriptor, std::pair<uint32_t,MemoryDataType>> memoryMapp =
 80098ba:	4b1a      	ldr	r3, [pc, #104]	; (8009924 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80098bc:	f107 0414 	add.w	r4, r7, #20
 80098c0:	461d      	mov	r5, r3
 80098c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098ca:	682b      	ldr	r3, [r5, #0]
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	f107 0314 	add.w	r3, r7, #20
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	2303      	movs	r3, #3
 80098d6:	613b      	str	r3, [r7, #16]
 80098d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80098dc:	4618      	mov	r0, r3
 80098de:	f7f7 fc0b 	bl	80010f8 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEEC1Ev>
 80098e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80098e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	4613      	mov	r3, r2
 80098ee:	f107 020c 	add.w	r2, r7, #12
 80098f2:	ca06      	ldmia	r2, {r1, r2}
 80098f4:	480c      	ldr	r0, [pc, #48]	; (8009928 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80098f6:	f7f7 fc17 	bl	8001128 <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>
 80098fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80098fe:	4618      	mov	r0, r3
 8009900:	f7f7 fc06 	bl	8001110 <_ZNSaISt4pairIK16MemoryDescriptorS_Im14MemoryDataTypeEEED1Ev>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d107      	bne.n	800991a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009910:	4293      	cmp	r3, r2
 8009912:	d102      	bne.n	800991a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8009914:	4804      	ldr	r0, [pc, #16]	; (8009928 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8009916:	f7f7 fafa 	bl	8000f0e <_ZNSt3mapI16MemoryDescriptorSt4pairIm14MemoryDataTypeESt4lessIS0_ESaIS1_IKS0_S3_EEED1Ev>
 800991a:	bf00      	nop
 800991c:	3740      	adds	r7, #64	; 0x40
 800991e:	46bd      	mov	sp, r7
 8009920:	bdb0      	pop	{r4, r5, r7, pc}
 8009922:	bf00      	nop
 8009924:	08017848 	.word	0x08017848
 8009928:	20000988 	.word	0x20000988

0800992c <_GLOBAL__sub_I__ZN3nvm15Flash_Read_DataEmPmt>:
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
 8009930:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009934:	2001      	movs	r0, #1
 8009936:	f7ff ffb3 	bl	80098a0 <_Z41__static_initialization_and_destruction_0ii>
 800993a:	bd80      	pop	{r7, pc}

0800993c <_GLOBAL__sub_D__ZN3nvm15Flash_Read_DataEmPmt>:
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
 8009940:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009944:	2000      	movs	r0, #0
 8009946:	f7ff ffab 	bl	80098a0 <_Z41__static_initialization_and_destruction_0ii>
 800994a:	bd80      	pop	{r7, pc}

0800994c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009950:	4b0e      	ldr	r3, [pc, #56]	; (800998c <HAL_Init+0x40>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a0d      	ldr	r2, [pc, #52]	; (800998c <HAL_Init+0x40>)
 8009956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800995a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800995c:	4b0b      	ldr	r3, [pc, #44]	; (800998c <HAL_Init+0x40>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a0a      	ldr	r2, [pc, #40]	; (800998c <HAL_Init+0x40>)
 8009962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009968:	4b08      	ldr	r3, [pc, #32]	; (800998c <HAL_Init+0x40>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a07      	ldr	r2, [pc, #28]	; (800998c <HAL_Init+0x40>)
 800996e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009974:	2003      	movs	r0, #3
 8009976:	f000 fd0e 	bl	800a396 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800997a:	200f      	movs	r0, #15
 800997c:	f7fa fb0c 	bl	8003f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009980:	f7f9 fe9a 	bl	80036b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	40023c00 	.word	0x40023c00

08009990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009990:	b480      	push	{r7}
 8009992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <HAL_IncTick+0x20>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <HAL_IncTick+0x24>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4413      	add	r3, r2
 80099a0:	4a04      	ldr	r2, [pc, #16]	; (80099b4 <HAL_IncTick+0x24>)
 80099a2:	6013      	str	r3, [r2, #0]
}
 80099a4:	bf00      	nop
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	20000008 	.word	0x20000008
 80099b4:	200009b4 	.word	0x200009b4

080099b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80099b8:	b480      	push	{r7}
 80099ba:	af00      	add	r7, sp, #0
  return uwTick;
 80099bc:	4b03      	ldr	r3, [pc, #12]	; (80099cc <HAL_GetTick+0x14>)
 80099be:	681b      	ldr	r3, [r3, #0]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	200009b4 	.word	0x200009b4

080099d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80099d8:	f7ff ffee 	bl	80099b8 <HAL_GetTick>
 80099dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e8:	d005      	beq.n	80099f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80099ea:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <HAL_Delay+0x44>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4413      	add	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80099f6:	bf00      	nop
 80099f8:	f7ff ffde 	bl	80099b8 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d8f7      	bhi.n	80099f8 <HAL_Delay+0x28>
  {
  }
}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20000008 	.word	0x20000008

08009a18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e033      	b.n	8009a96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7f9 fe6a 	bl	8003710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	f003 0310 	and.w	r3, r3, #16
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d118      	bne.n	8009a88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009a5e:	f023 0302 	bic.w	r3, r3, #2
 8009a62:	f043 0202 	orr.w	r2, r3, #2
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fa68 	bl	8009f40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	f023 0303 	bic.w	r3, r3, #3
 8009a7e:	f043 0201 	orr.w	r2, r3, #1
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	641a      	str	r2, [r3, #64]	; 0x40
 8009a86:	e001      	b.n	8009a8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009aac:	2300      	movs	r3, #0
 8009aae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d101      	bne.n	8009abe <HAL_ADC_Start_DMA+0x1e>
 8009aba:	2302      	movs	r3, #2
 8009abc:	e0e9      	b.n	8009c92 <HAL_ADC_Start_DMA+0x1f2>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d018      	beq.n	8009b06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689a      	ldr	r2, [r3, #8]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0201 	orr.w	r2, r2, #1
 8009ae2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009ae4:	4b6d      	ldr	r3, [pc, #436]	; (8009c9c <HAL_ADC_Start_DMA+0x1fc>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a6d      	ldr	r2, [pc, #436]	; (8009ca0 <HAL_ADC_Start_DMA+0x200>)
 8009aea:	fba2 2303 	umull	r2, r3, r2, r3
 8009aee:	0c9a      	lsrs	r2, r3, #18
 8009af0:	4613      	mov	r3, r2
 8009af2:	005b      	lsls	r3, r3, #1
 8009af4:	4413      	add	r3, r2
 8009af6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009af8:	e002      	b.n	8009b00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1f9      	bne.n	8009afa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b14:	d107      	bne.n	8009b26 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b24:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	f040 80a1 	bne.w	8009c78 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009b3e:	f023 0301 	bic.w	r3, r3, #1
 8009b42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d007      	beq.n	8009b68 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009b60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b74:	d106      	bne.n	8009b84 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	f023 0206 	bic.w	r2, r3, #6
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	645a      	str	r2, [r3, #68]	; 0x44
 8009b82:	e002      	b.n	8009b8a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009b92:	4b44      	ldr	r3, [pc, #272]	; (8009ca4 <HAL_ADC_Start_DMA+0x204>)
 8009b94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	4a43      	ldr	r2, [pc, #268]	; (8009ca8 <HAL_ADC_Start_DMA+0x208>)
 8009b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba2:	4a42      	ldr	r2, [pc, #264]	; (8009cac <HAL_ADC_Start_DMA+0x20c>)
 8009ba4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	4a41      	ldr	r2, [pc, #260]	; (8009cb0 <HAL_ADC_Start_DMA+0x210>)
 8009bac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009bb6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009bc6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bd6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	334c      	adds	r3, #76	; 0x4c
 8009be2:	4619      	mov	r1, r3
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f000 fcb8 	bl	800a55c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f003 031f 	and.w	r3, r3, #31
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d12a      	bne.n	8009c4e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a2d      	ldr	r2, [pc, #180]	; (8009cb4 <HAL_ADC_Start_DMA+0x214>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d015      	beq.n	8009c2e <HAL_ADC_Start_DMA+0x18e>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a2c      	ldr	r2, [pc, #176]	; (8009cb8 <HAL_ADC_Start_DMA+0x218>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d105      	bne.n	8009c18 <HAL_ADC_Start_DMA+0x178>
 8009c0c:	4b25      	ldr	r3, [pc, #148]	; (8009ca4 <HAL_ADC_Start_DMA+0x204>)
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	f003 031f 	and.w	r3, r3, #31
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00a      	beq.n	8009c2e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a27      	ldr	r2, [pc, #156]	; (8009cbc <HAL_ADC_Start_DMA+0x21c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d136      	bne.n	8009c90 <HAL_ADC_Start_DMA+0x1f0>
 8009c22:	4b20      	ldr	r3, [pc, #128]	; (8009ca4 <HAL_ADC_Start_DMA+0x204>)
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	f003 0310 	and.w	r3, r3, #16
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d130      	bne.n	8009c90 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d129      	bne.n	8009c90 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009c4a:	609a      	str	r2, [r3, #8]
 8009c4c:	e020      	b.n	8009c90 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a18      	ldr	r2, [pc, #96]	; (8009cb4 <HAL_ADC_Start_DMA+0x214>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d11b      	bne.n	8009c90 <HAL_ADC_Start_DMA+0x1f0>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d114      	bne.n	8009c90 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689a      	ldr	r2, [r3, #8]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009c74:	609a      	str	r2, [r3, #8]
 8009c76:	e00b      	b.n	8009c90 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	f043 0210 	orr.w	r2, r3, #16
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c88:	f043 0201 	orr.w	r2, r3, #1
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000000 	.word	0x20000000
 8009ca0:	431bde83 	.word	0x431bde83
 8009ca4:	40012300 	.word	0x40012300
 8009ca8:	0800a139 	.word	0x0800a139
 8009cac:	0800a1f3 	.word	0x0800a1f3
 8009cb0:	0800a20f 	.word	0x0800a20f
 8009cb4:	40012000 	.word	0x40012000
 8009cb8:	40012100 	.word	0x40012100
 8009cbc:	40012200 	.word	0x40012200

08009cc0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d101      	bne.n	8009d18 <HAL_ADC_ConfigChannel+0x1c>
 8009d14:	2302      	movs	r3, #2
 8009d16:	e105      	b.n	8009f24 <HAL_ADC_ConfigChannel+0x228>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b09      	cmp	r3, #9
 8009d26:	d925      	bls.n	8009d74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68d9      	ldr	r1, [r3, #12]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	461a      	mov	r2, r3
 8009d36:	4613      	mov	r3, r2
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3b1e      	subs	r3, #30
 8009d3e:	2207      	movs	r2, #7
 8009d40:	fa02 f303 	lsl.w	r3, r2, r3
 8009d44:	43da      	mvns	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	400a      	ands	r2, r1
 8009d4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68d9      	ldr	r1, [r3, #12]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	689a      	ldr	r2, [r3, #8]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	4618      	mov	r0, r3
 8009d60:	4603      	mov	r3, r0
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	4403      	add	r3, r0
 8009d66:	3b1e      	subs	r3, #30
 8009d68:	409a      	lsls	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	60da      	str	r2, [r3, #12]
 8009d72:	e022      	b.n	8009dba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6919      	ldr	r1, [r3, #16]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	461a      	mov	r2, r3
 8009d82:	4613      	mov	r3, r2
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	4413      	add	r3, r2
 8009d88:	2207      	movs	r2, #7
 8009d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8e:	43da      	mvns	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	400a      	ands	r2, r1
 8009d96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6919      	ldr	r1, [r3, #16]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	689a      	ldr	r2, [r3, #8]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	4618      	mov	r0, r3
 8009daa:	4603      	mov	r3, r0
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	4403      	add	r3, r0
 8009db0:	409a      	lsls	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	2b06      	cmp	r3, #6
 8009dc0:	d824      	bhi.n	8009e0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	3b05      	subs	r3, #5
 8009dd4:	221f      	movs	r2, #31
 8009dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dda:	43da      	mvns	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	400a      	ands	r2, r1
 8009de2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	4618      	mov	r0, r3
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	3b05      	subs	r3, #5
 8009dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	635a      	str	r2, [r3, #52]	; 0x34
 8009e0a:	e04c      	b.n	8009ea6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2b0c      	cmp	r3, #12
 8009e12:	d824      	bhi.n	8009e5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	3b23      	subs	r3, #35	; 0x23
 8009e26:	221f      	movs	r2, #31
 8009e28:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2c:	43da      	mvns	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	400a      	ands	r2, r1
 8009e34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	4618      	mov	r0, r3
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3b23      	subs	r3, #35	; 0x23
 8009e50:	fa00 f203 	lsl.w	r2, r0, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8009e5c:	e023      	b.n	8009ea6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	3b41      	subs	r3, #65	; 0x41
 8009e70:	221f      	movs	r2, #31
 8009e72:	fa02 f303 	lsl.w	r3, r2, r3
 8009e76:	43da      	mvns	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	400a      	ands	r2, r1
 8009e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	3b41      	subs	r3, #65	; 0x41
 8009e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ea6:	4b22      	ldr	r3, [pc, #136]	; (8009f30 <HAL_ADC_ConfigChannel+0x234>)
 8009ea8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a21      	ldr	r2, [pc, #132]	; (8009f34 <HAL_ADC_ConfigChannel+0x238>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d109      	bne.n	8009ec8 <HAL_ADC_ConfigChannel+0x1cc>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b12      	cmp	r3, #18
 8009eba:	d105      	bne.n	8009ec8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a19      	ldr	r2, [pc, #100]	; (8009f34 <HAL_ADC_ConfigChannel+0x238>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d123      	bne.n	8009f1a <HAL_ADC_ConfigChannel+0x21e>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b10      	cmp	r3, #16
 8009ed8:	d003      	beq.n	8009ee2 <HAL_ADC_ConfigChannel+0x1e6>
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b11      	cmp	r3, #17
 8009ee0:	d11b      	bne.n	8009f1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b10      	cmp	r3, #16
 8009ef4:	d111      	bne.n	8009f1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009ef6:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <HAL_ADC_ConfigChannel+0x23c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a10      	ldr	r2, [pc, #64]	; (8009f3c <HAL_ADC_ConfigChannel+0x240>)
 8009efc:	fba2 2303 	umull	r2, r3, r2, r3
 8009f00:	0c9a      	lsrs	r2, r3, #18
 8009f02:	4613      	mov	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009f0c:	e002      	b.n	8009f14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1f9      	bne.n	8009f0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	40012300 	.word	0x40012300
 8009f34:	40012000 	.word	0x40012000
 8009f38:	20000000 	.word	0x20000000
 8009f3c:	431bde83 	.word	0x431bde83

08009f40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009f48:	4b79      	ldr	r3, [pc, #484]	; (800a130 <ADC_Init+0x1f0>)
 8009f4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	431a      	orrs	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6859      	ldr	r1, [r3, #4]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	021a      	lsls	r2, r3, #8
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6859      	ldr	r1, [r3, #4]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	430a      	orrs	r2, r1
 8009faa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689a      	ldr	r2, [r3, #8]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6899      	ldr	r1, [r3, #8]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd2:	4a58      	ldr	r2, [pc, #352]	; (800a134 <ADC_Init+0x1f4>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d022      	beq.n	800a01e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689a      	ldr	r2, [r3, #8]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009fe6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6899      	ldr	r1, [r3, #8]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6899      	ldr	r1, [r3, #8]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	609a      	str	r2, [r3, #8]
 800a01c:	e00f      	b.n	800a03e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	689a      	ldr	r2, [r3, #8]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a02c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a03c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0202 	bic.w	r2, r2, #2
 800a04c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6899      	ldr	r1, [r3, #8]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	7e1b      	ldrb	r3, [r3, #24]
 800a058:	005a      	lsls	r2, r3, #1
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01b      	beq.n	800a0a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a07a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a08a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6859      	ldr	r1, [r3, #4]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	3b01      	subs	r3, #1
 800a098:	035a      	lsls	r2, r3, #13
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	605a      	str	r2, [r3, #4]
 800a0a2:	e007      	b.n	800a0b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a0c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	051a      	lsls	r2, r3, #20
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a0e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6899      	ldr	r1, [r3, #8]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0f6:	025a      	lsls	r2, r3, #9
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a10e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6899      	ldr	r1, [r3, #8]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	029a      	lsls	r2, r3, #10
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	430a      	orrs	r2, r1
 800a122:	609a      	str	r2, [r3, #8]
}
 800a124:	bf00      	nop
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	40012300 	.word	0x40012300
 800a134:	0f000001 	.word	0x0f000001

0800a138 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a144:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d13c      	bne.n	800a1cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d12b      	bne.n	800a1c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a170:	2b00      	cmp	r3, #0
 800a172:	d127      	bne.n	800a1c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d006      	beq.n	800a190 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d119      	bne.n	800a1c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 0220 	bic.w	r2, r2, #32
 800a19e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d105      	bne.n	800a1c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1bc:	f043 0201 	orr.w	r2, r3, #1
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7ff fd7b 	bl	8009cc0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a1ca:	e00e      	b.n	800a1ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	f003 0310 	and.w	r3, r3, #16
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d003      	beq.n	800a1e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7ff fd85 	bl	8009ce8 <HAL_ADC_ErrorCallback>
}
 800a1de:	e004      	b.n	800a1ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
}
 800a1ea:	bf00      	nop
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff fd67 	bl	8009cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2240      	movs	r2, #64	; 0x40
 800a220:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a226:	f043 0204 	orr.w	r2, r3, #4
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff fd5a 	bl	8009ce8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a234:	bf00      	nop
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <__NVIC_SetPriorityGrouping>:
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a24c:	4b0c      	ldr	r3, [pc, #48]	; (800a280 <__NVIC_SetPriorityGrouping+0x44>)
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a258:	4013      	ands	r3, r2
 800a25a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a26c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a26e:	4a04      	ldr	r2, [pc, #16]	; (800a280 <__NVIC_SetPriorityGrouping+0x44>)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	60d3      	str	r3, [r2, #12]
}
 800a274:	bf00      	nop
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	e000ed00 	.word	0xe000ed00

0800a284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a284:	b480      	push	{r7}
 800a286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a288:	4b04      	ldr	r3, [pc, #16]	; (800a29c <__NVIC_GetPriorityGrouping+0x18>)
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	0a1b      	lsrs	r3, r3, #8
 800a28e:	f003 0307 	and.w	r3, r3, #7
}
 800a292:	4618      	mov	r0, r3
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	e000ed00 	.word	0xe000ed00

0800a2a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	db0b      	blt.n	800a2ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a2b2:	79fb      	ldrb	r3, [r7, #7]
 800a2b4:	f003 021f 	and.w	r2, r3, #31
 800a2b8:	4907      	ldr	r1, [pc, #28]	; (800a2d8 <__NVIC_EnableIRQ+0x38>)
 800a2ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2be:	095b      	lsrs	r3, r3, #5
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	fa00 f202 	lsl.w	r2, r0, r2
 800a2c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a2ca:	bf00      	nop
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	e000e100 	.word	0xe000e100

0800a2dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	6039      	str	r1, [r7, #0]
 800a2e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	db0a      	blt.n	800a306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	490c      	ldr	r1, [pc, #48]	; (800a328 <__NVIC_SetPriority+0x4c>)
 800a2f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2fa:	0112      	lsls	r2, r2, #4
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	440b      	add	r3, r1
 800a300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a304:	e00a      	b.n	800a31c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	4908      	ldr	r1, [pc, #32]	; (800a32c <__NVIC_SetPriority+0x50>)
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	f003 030f 	and.w	r3, r3, #15
 800a312:	3b04      	subs	r3, #4
 800a314:	0112      	lsls	r2, r2, #4
 800a316:	b2d2      	uxtb	r2, r2
 800a318:	440b      	add	r3, r1
 800a31a:	761a      	strb	r2, [r3, #24]
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	e000e100 	.word	0xe000e100
 800a32c:	e000ed00 	.word	0xe000ed00

0800a330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a330:	b480      	push	{r7}
 800a332:	b089      	sub	sp, #36	; 0x24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f003 0307 	and.w	r3, r3, #7
 800a342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	f1c3 0307 	rsb	r3, r3, #7
 800a34a:	2b04      	cmp	r3, #4
 800a34c:	bf28      	it	cs
 800a34e:	2304      	movcs	r3, #4
 800a350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	3304      	adds	r3, #4
 800a356:	2b06      	cmp	r3, #6
 800a358:	d902      	bls.n	800a360 <NVIC_EncodePriority+0x30>
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	3b03      	subs	r3, #3
 800a35e:	e000      	b.n	800a362 <NVIC_EncodePriority+0x32>
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a364:	f04f 32ff 	mov.w	r2, #4294967295
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	fa02 f303 	lsl.w	r3, r2, r3
 800a36e:	43da      	mvns	r2, r3
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	401a      	ands	r2, r3
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a378:	f04f 31ff 	mov.w	r1, #4294967295
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	fa01 f303 	lsl.w	r3, r1, r3
 800a382:	43d9      	mvns	r1, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a388:	4313      	orrs	r3, r2
         );
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3724      	adds	r7, #36	; 0x24
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f7ff ff4c 	bl	800a23c <__NVIC_SetPriorityGrouping>
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
 800a3b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a3be:	f7ff ff61 	bl	800a284 <__NVIC_GetPriorityGrouping>
 800a3c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	68b9      	ldr	r1, [r7, #8]
 800a3c8:	6978      	ldr	r0, [r7, #20]
 800a3ca:	f7ff ffb1 	bl	800a330 <NVIC_EncodePriority>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff ff80 	bl	800a2dc <__NVIC_SetPriority>
}
 800a3dc:	bf00      	nop
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a3ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff ff54 	bl	800a2a0 <__NVIC_EnableIRQ>
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a40c:	f7ff fad4 	bl	80099b8 <HAL_GetTick>
 800a410:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e099      	b.n	800a550 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2202      	movs	r2, #2
 800a420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f022 0201 	bic.w	r2, r2, #1
 800a43a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a43c:	e00f      	b.n	800a45e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a43e:	f7ff fabb 	bl	80099b8 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b05      	cmp	r3, #5
 800a44a:	d908      	bls.n	800a45e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2220      	movs	r2, #32
 800a450:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2203      	movs	r2, #3
 800a456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e078      	b.n	800a550 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e8      	bne.n	800a43e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	4b38      	ldr	r3, [pc, #224]	; (800a558 <HAL_DMA_Init+0x158>)
 800a478:	4013      	ands	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a48a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a4a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	2b04      	cmp	r3, #4
 800a4b6:	d107      	bne.n	800a4c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f023 0307 	bic.w	r3, r3, #7
 800a4de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d117      	bne.n	800a522 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00e      	beq.n	800a522 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fb01 	bl	800ab0c <DMA_CheckFifoParam>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d008      	beq.n	800a522 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2240      	movs	r2, #64	; 0x40
 800a514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a51e:	2301      	movs	r3, #1
 800a520:	e016      	b.n	800a550 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fab8 	bl	800aaa0 <DMA_CalcBaseAndBitshift>
 800a530:	4603      	mov	r3, r0
 800a532:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a538:	223f      	movs	r2, #63	; 0x3f
 800a53a:	409a      	lsls	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	f010803f 	.word	0xf010803f

0800a55c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a572:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d101      	bne.n	800a582 <HAL_DMA_Start_IT+0x26>
 800a57e:	2302      	movs	r3, #2
 800a580:	e040      	b.n	800a604 <HAL_DMA_Start_IT+0xa8>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b01      	cmp	r3, #1
 800a594:	d12f      	bne.n	800a5f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2202      	movs	r2, #2
 800a59a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	68b9      	ldr	r1, [r7, #8]
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 fa4a 	bl	800aa44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b4:	223f      	movs	r2, #63	; 0x3f
 800a5b6:	409a      	lsls	r2, r3
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0216 	orr.w	r2, r2, #22
 800a5ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0208 	orr.w	r2, r2, #8
 800a5e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0201 	orr.w	r2, r2, #1
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	e005      	b.n	800a602 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a5fe:	2302      	movs	r3, #2
 800a600:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a618:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a61a:	f7ff f9cd 	bl	80099b8 <HAL_GetTick>
 800a61e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d008      	beq.n	800a63e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2280      	movs	r2, #128	; 0x80
 800a630:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e052      	b.n	800a6e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 0216 	bic.w	r2, r2, #22
 800a64c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	695a      	ldr	r2, [r3, #20]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a65c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a662:	2b00      	cmp	r3, #0
 800a664:	d103      	bne.n	800a66e <HAL_DMA_Abort+0x62>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d007      	beq.n	800a67e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f022 0208 	bic.w	r2, r2, #8
 800a67c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0201 	bic.w	r2, r2, #1
 800a68c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a68e:	e013      	b.n	800a6b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a690:	f7ff f992 	bl	80099b8 <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b05      	cmp	r3, #5
 800a69c:	d90c      	bls.n	800a6b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e015      	b.n	800a6e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1e4      	bne.n	800a690 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ca:	223f      	movs	r2, #63	; 0x3f
 800a6cc:	409a      	lsls	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d004      	beq.n	800a70a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2280      	movs	r2, #128	; 0x80
 800a704:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e00c      	b.n	800a724 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2205      	movs	r2, #5
 800a70e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f022 0201 	bic.w	r2, r2, #1
 800a720:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a73c:	4b8e      	ldr	r3, [pc, #568]	; (800a978 <HAL_DMA_IRQHandler+0x248>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a8e      	ldr	r2, [pc, #568]	; (800a97c <HAL_DMA_IRQHandler+0x24c>)
 800a742:	fba2 2303 	umull	r2, r3, r2, r3
 800a746:	0a9b      	lsrs	r3, r3, #10
 800a748:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a75a:	2208      	movs	r2, #8
 800a75c:	409a      	lsls	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4013      	ands	r3, r2
 800a762:	2b00      	cmp	r3, #0
 800a764:	d01a      	beq.n	800a79c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0304 	and.w	r3, r3, #4
 800a770:	2b00      	cmp	r3, #0
 800a772:	d013      	beq.n	800a79c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f022 0204 	bic.w	r2, r2, #4
 800a782:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a788:	2208      	movs	r2, #8
 800a78a:	409a      	lsls	r2, r3
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a794:	f043 0201 	orr.w	r2, r3, #1
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	409a      	lsls	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d012      	beq.n	800a7d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00b      	beq.n	800a7d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7be:	2201      	movs	r2, #1
 800a7c0:	409a      	lsls	r2, r3
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ca:	f043 0202 	orr.w	r2, r3, #2
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d6:	2204      	movs	r2, #4
 800a7d8:	409a      	lsls	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	4013      	ands	r3, r2
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d012      	beq.n	800a808 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0302 	and.w	r3, r3, #2
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00b      	beq.n	800a808 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f4:	2204      	movs	r2, #4
 800a7f6:	409a      	lsls	r2, r3
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a800:	f043 0204 	orr.w	r2, r3, #4
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a80c:	2210      	movs	r2, #16
 800a80e:	409a      	lsls	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	4013      	ands	r3, r2
 800a814:	2b00      	cmp	r3, #0
 800a816:	d043      	beq.n	800a8a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0308 	and.w	r3, r3, #8
 800a822:	2b00      	cmp	r3, #0
 800a824:	d03c      	beq.n	800a8a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a82a:	2210      	movs	r2, #16
 800a82c:	409a      	lsls	r2, r3
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d018      	beq.n	800a872 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d108      	bne.n	800a860 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	d024      	beq.n	800a8a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3
 800a85e:	e01f      	b.n	800a8a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01b      	beq.n	800a8a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	4798      	blx	r3
 800a870:	e016      	b.n	800a8a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d107      	bne.n	800a890 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f022 0208 	bic.w	r2, r2, #8
 800a88e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d003      	beq.n	800a8a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a4:	2220      	movs	r2, #32
 800a8a6:	409a      	lsls	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 808f 	beq.w	800a9d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0310 	and.w	r3, r3, #16
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 8087 	beq.w	800a9d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	409a      	lsls	r2, r3
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	2b05      	cmp	r3, #5
 800a8d8:	d136      	bne.n	800a948 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 0216 	bic.w	r2, r2, #22
 800a8e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	695a      	ldr	r2, [r3, #20]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d103      	bne.n	800a90a <HAL_DMA_IRQHandler+0x1da>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a906:	2b00      	cmp	r3, #0
 800a908:	d007      	beq.n	800a91a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0208 	bic.w	r2, r2, #8
 800a918:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91e:	223f      	movs	r2, #63	; 0x3f
 800a920:	409a      	lsls	r2, r3
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d07e      	beq.n	800aa3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
        }
        return;
 800a946:	e079      	b.n	800aa3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d01d      	beq.n	800a992 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10d      	bne.n	800a980 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d031      	beq.n	800a9d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	4798      	blx	r3
 800a974:	e02c      	b.n	800a9d0 <HAL_DMA_IRQHandler+0x2a0>
 800a976:	bf00      	nop
 800a978:	20000000 	.word	0x20000000
 800a97c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d023      	beq.n	800a9d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	4798      	blx	r3
 800a990:	e01e      	b.n	800a9d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10f      	bne.n	800a9c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f022 0210 	bic.w	r2, r2, #16
 800a9ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d032      	beq.n	800aa3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d022      	beq.n	800aa2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2205      	movs	r2, #5
 800a9e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f022 0201 	bic.w	r2, r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	60bb      	str	r3, [r7, #8]
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d307      	bcc.n	800aa18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1f2      	bne.n	800a9fc <HAL_DMA_IRQHandler+0x2cc>
 800aa16:	e000      	b.n	800aa1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800aa18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d005      	beq.n	800aa3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	4798      	blx	r3
 800aa3a:	e000      	b.n	800aa3e <HAL_DMA_IRQHandler+0x30e>
        return;
 800aa3c:	bf00      	nop
    }
  }
}
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	2b40      	cmp	r3, #64	; 0x40
 800aa70:	d108      	bne.n	800aa84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800aa82:	e007      	b.n	800aa94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	60da      	str	r2, [r3, #12]
}
 800aa94:	bf00      	nop
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	3b10      	subs	r3, #16
 800aab0:	4a14      	ldr	r2, [pc, #80]	; (800ab04 <DMA_CalcBaseAndBitshift+0x64>)
 800aab2:	fba2 2303 	umull	r2, r3, r2, r3
 800aab6:	091b      	lsrs	r3, r3, #4
 800aab8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800aaba:	4a13      	ldr	r2, [pc, #76]	; (800ab08 <DMA_CalcBaseAndBitshift+0x68>)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d909      	bls.n	800aae2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aad6:	f023 0303 	bic.w	r3, r3, #3
 800aada:	1d1a      	adds	r2, r3, #4
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	659a      	str	r2, [r3, #88]	; 0x58
 800aae0:	e007      	b.n	800aaf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	aaaaaaab 	.word	0xaaaaaaab
 800ab08:	080179f0 	.word	0x080179f0

0800ab0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d11f      	bne.n	800ab66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d856      	bhi.n	800abda <DMA_CheckFifoParam+0xce>
 800ab2c:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <DMA_CheckFifoParam+0x28>)
 800ab2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab32:	bf00      	nop
 800ab34:	0800ab45 	.word	0x0800ab45
 800ab38:	0800ab57 	.word	0x0800ab57
 800ab3c:	0800ab45 	.word	0x0800ab45
 800ab40:	0800abdb 	.word	0x0800abdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d046      	beq.n	800abde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab54:	e043      	b.n	800abde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab5e:	d140      	bne.n	800abe2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab64:	e03d      	b.n	800abe2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab6e:	d121      	bne.n	800abb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d837      	bhi.n	800abe6 <DMA_CheckFifoParam+0xda>
 800ab76:	a201      	add	r2, pc, #4	; (adr r2, 800ab7c <DMA_CheckFifoParam+0x70>)
 800ab78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7c:	0800ab8d 	.word	0x0800ab8d
 800ab80:	0800ab93 	.word	0x0800ab93
 800ab84:	0800ab8d 	.word	0x0800ab8d
 800ab88:	0800aba5 	.word	0x0800aba5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab90:	e030      	b.n	800abf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d025      	beq.n	800abea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aba2:	e022      	b.n	800abea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800abac:	d11f      	bne.n	800abee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800abb2:	e01c      	b.n	800abee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d903      	bls.n	800abc2 <DMA_CheckFifoParam+0xb6>
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d003      	beq.n	800abc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800abc0:	e018      	b.n	800abf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	73fb      	strb	r3, [r7, #15]
      break;
 800abc6:	e015      	b.n	800abf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00e      	beq.n	800abf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	73fb      	strb	r3, [r7, #15]
      break;
 800abd8:	e00b      	b.n	800abf2 <DMA_CheckFifoParam+0xe6>
      break;
 800abda:	bf00      	nop
 800abdc:	e00a      	b.n	800abf4 <DMA_CheckFifoParam+0xe8>
      break;
 800abde:	bf00      	nop
 800abe0:	e008      	b.n	800abf4 <DMA_CheckFifoParam+0xe8>
      break;
 800abe2:	bf00      	nop
 800abe4:	e006      	b.n	800abf4 <DMA_CheckFifoParam+0xe8>
      break;
 800abe6:	bf00      	nop
 800abe8:	e004      	b.n	800abf4 <DMA_CheckFifoParam+0xe8>
      break;
 800abea:	bf00      	nop
 800abec:	e002      	b.n	800abf4 <DMA_CheckFifoParam+0xe8>
      break;   
 800abee:	bf00      	nop
 800abf0:	e000      	b.n	800abf4 <DMA_CheckFifoParam+0xe8>
      break;
 800abf2:	bf00      	nop
    }
  } 
  
  return status; 
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop

0800ac04 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ac16:	4b23      	ldr	r3, [pc, #140]	; (800aca4 <HAL_FLASH_Program+0xa0>)
 800ac18:	7e1b      	ldrb	r3, [r3, #24]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d101      	bne.n	800ac22 <HAL_FLASH_Program+0x1e>
 800ac1e:	2302      	movs	r3, #2
 800ac20:	e03b      	b.n	800ac9a <HAL_FLASH_Program+0x96>
 800ac22:	4b20      	ldr	r3, [pc, #128]	; (800aca4 <HAL_FLASH_Program+0xa0>)
 800ac24:	2201      	movs	r2, #1
 800ac26:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac28:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac2c:	f000 f87c 	bl	800ad28 <FLASH_WaitForLastOperation>
 800ac30:	4603      	mov	r3, r0
 800ac32:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d12b      	bne.n	800ac92 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d105      	bne.n	800ac4c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ac40:	783b      	ldrb	r3, [r7, #0]
 800ac42:	4619      	mov	r1, r3
 800ac44:	68b8      	ldr	r0, [r7, #8]
 800ac46:	f000 f927 	bl	800ae98 <FLASH_Program_Byte>
 800ac4a:	e016      	b.n	800ac7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d105      	bne.n	800ac5e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ac52:	883b      	ldrh	r3, [r7, #0]
 800ac54:	4619      	mov	r1, r3
 800ac56:	68b8      	ldr	r0, [r7, #8]
 800ac58:	f000 f8fa 	bl	800ae50 <FLASH_Program_HalfWord>
 800ac5c:	e00d      	b.n	800ac7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d105      	bne.n	800ac70 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	4619      	mov	r1, r3
 800ac68:	68b8      	ldr	r0, [r7, #8]
 800ac6a:	f000 f8cf 	bl	800ae0c <FLASH_Program_Word>
 800ac6e:	e004      	b.n	800ac7a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800ac70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac74:	68b8      	ldr	r0, [r7, #8]
 800ac76:	f000 f897 	bl	800ada8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac7e:	f000 f853 	bl	800ad28 <FLASH_WaitForLastOperation>
 800ac82:	4603      	mov	r3, r0
 800ac84:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800ac86:	4b08      	ldr	r3, [pc, #32]	; (800aca8 <HAL_FLASH_Program+0xa4>)
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	4a07      	ldr	r2, [pc, #28]	; (800aca8 <HAL_FLASH_Program+0xa4>)
 800ac8c:	f023 0301 	bic.w	r3, r3, #1
 800ac90:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ac92:	4b04      	ldr	r3, [pc, #16]	; (800aca4 <HAL_FLASH_Program+0xa0>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	761a      	strb	r2, [r3, #24]
  
  return status;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	200009b8 	.word	0x200009b8
 800aca8:	40023c00 	.word	0x40023c00

0800acac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800acb6:	4b0b      	ldr	r3, [pc, #44]	; (800ace4 <HAL_FLASH_Unlock+0x38>)
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	da0b      	bge.n	800acd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800acbe:	4b09      	ldr	r3, [pc, #36]	; (800ace4 <HAL_FLASH_Unlock+0x38>)
 800acc0:	4a09      	ldr	r2, [pc, #36]	; (800ace8 <HAL_FLASH_Unlock+0x3c>)
 800acc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800acc4:	4b07      	ldr	r3, [pc, #28]	; (800ace4 <HAL_FLASH_Unlock+0x38>)
 800acc6:	4a09      	ldr	r2, [pc, #36]	; (800acec <HAL_FLASH_Unlock+0x40>)
 800acc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800acca:	4b06      	ldr	r3, [pc, #24]	; (800ace4 <HAL_FLASH_Unlock+0x38>)
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	da01      	bge.n	800acd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800acd6:	79fb      	ldrb	r3, [r7, #7]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	40023c00 	.word	0x40023c00
 800ace8:	45670123 	.word	0x45670123
 800acec:	cdef89ab 	.word	0xcdef89ab

0800acf0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800acf0:	b480      	push	{r7}
 800acf2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <HAL_FLASH_Lock+0x1c>)
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	4a04      	ldr	r2, [pc, #16]	; (800ad0c <HAL_FLASH_Lock+0x1c>)
 800acfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acfe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	40023c00 	.word	0x40023c00

0800ad10 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800ad10:	b480      	push	{r7}
 800ad12:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800ad14:	4b03      	ldr	r3, [pc, #12]	; (800ad24 <HAL_FLASH_GetError+0x14>)
 800ad16:	69db      	ldr	r3, [r3, #28]
}  
 800ad18:	4618      	mov	r0, r3
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	200009b8 	.word	0x200009b8

0800ad28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ad34:	4b1a      	ldr	r3, [pc, #104]	; (800ada0 <FLASH_WaitForLastOperation+0x78>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ad3a:	f7fe fe3d 	bl	80099b8 <HAL_GetTick>
 800ad3e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ad40:	e010      	b.n	800ad64 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad48:	d00c      	beq.n	800ad64 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d007      	beq.n	800ad60 <FLASH_WaitForLastOperation+0x38>
 800ad50:	f7fe fe32 	bl	80099b8 <HAL_GetTick>
 800ad54:	4602      	mov	r2, r0
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d201      	bcs.n	800ad64 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e019      	b.n	800ad98 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ad64:	4b0f      	ldr	r3, [pc, #60]	; (800ada4 <FLASH_WaitForLastOperation+0x7c>)
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1e8      	bne.n	800ad42 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ad70:	4b0c      	ldr	r3, [pc, #48]	; (800ada4 <FLASH_WaitForLastOperation+0x7c>)
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ad7c:	4b09      	ldr	r3, [pc, #36]	; (800ada4 <FLASH_WaitForLastOperation+0x7c>)
 800ad7e:	2201      	movs	r2, #1
 800ad80:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ad82:	4b08      	ldr	r3, [pc, #32]	; (800ada4 <FLASH_WaitForLastOperation+0x7c>)
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800ad8e:	f000 f8a5 	bl	800aedc <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
  
}  
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	200009b8 	.word	0x200009b8
 800ada4:	40023c00 	.word	0x40023c00

0800ada8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800adb4:	4b14      	ldr	r3, [pc, #80]	; (800ae08 <FLASH_Program_DoubleWord+0x60>)
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	4a13      	ldr	r2, [pc, #76]	; (800ae08 <FLASH_Program_DoubleWord+0x60>)
 800adba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800adc0:	4b11      	ldr	r3, [pc, #68]	; (800ae08 <FLASH_Program_DoubleWord+0x60>)
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	4a10      	ldr	r2, [pc, #64]	; (800ae08 <FLASH_Program_DoubleWord+0x60>)
 800adc6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800adca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800adcc:	4b0e      	ldr	r3, [pc, #56]	; (800ae08 <FLASH_Program_DoubleWord+0x60>)
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	4a0d      	ldr	r2, [pc, #52]	; (800ae08 <FLASH_Program_DoubleWord+0x60>)
 800add2:	f043 0301 	orr.w	r3, r3, #1
 800add6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800adde:	f3bf 8f6f 	isb	sy
}
 800ade2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ade4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ade8:	f04f 0200 	mov.w	r2, #0
 800adec:	f04f 0300 	mov.w	r3, #0
 800adf0:	000a      	movs	r2, r1
 800adf2:	2300      	movs	r3, #0
 800adf4:	68f9      	ldr	r1, [r7, #12]
 800adf6:	3104      	adds	r1, #4
 800adf8:	4613      	mov	r3, r2
 800adfa:	600b      	str	r3, [r1, #0]
}
 800adfc:	bf00      	nop
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	40023c00 	.word	0x40023c00

0800ae0c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ae16:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <FLASH_Program_Word+0x40>)
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	4a0c      	ldr	r2, [pc, #48]	; (800ae4c <FLASH_Program_Word+0x40>)
 800ae1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ae22:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <FLASH_Program_Word+0x40>)
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	4a09      	ldr	r2, [pc, #36]	; (800ae4c <FLASH_Program_Word+0x40>)
 800ae28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ae2e:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <FLASH_Program_Word+0x40>)
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	4a06      	ldr	r2, [pc, #24]	; (800ae4c <FLASH_Program_Word+0x40>)
 800ae34:	f043 0301 	orr.w	r3, r3, #1
 800ae38:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	601a      	str	r2, [r3, #0]
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr
 800ae4c:	40023c00 	.word	0x40023c00

0800ae50 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ae5c:	4b0d      	ldr	r3, [pc, #52]	; (800ae94 <FLASH_Program_HalfWord+0x44>)
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	4a0c      	ldr	r2, [pc, #48]	; (800ae94 <FLASH_Program_HalfWord+0x44>)
 800ae62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <FLASH_Program_HalfWord+0x44>)
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	4a09      	ldr	r2, [pc, #36]	; (800ae94 <FLASH_Program_HalfWord+0x44>)
 800ae6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ae74:	4b07      	ldr	r3, [pc, #28]	; (800ae94 <FLASH_Program_HalfWord+0x44>)
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	4a06      	ldr	r2, [pc, #24]	; (800ae94 <FLASH_Program_HalfWord+0x44>)
 800ae7a:	f043 0301 	orr.w	r3, r3, #1
 800ae7e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	887a      	ldrh	r2, [r7, #2]
 800ae84:	801a      	strh	r2, [r3, #0]
}
 800ae86:	bf00      	nop
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	40023c00 	.word	0x40023c00

0800ae98 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aea4:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <FLASH_Program_Byte+0x40>)
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	4a0b      	ldr	r2, [pc, #44]	; (800aed8 <FLASH_Program_Byte+0x40>)
 800aeaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800aeb0:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <FLASH_Program_Byte+0x40>)
 800aeb2:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <FLASH_Program_Byte+0x40>)
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aeb8:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <FLASH_Program_Byte+0x40>)
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	4a06      	ldr	r2, [pc, #24]	; (800aed8 <FLASH_Program_Byte+0x40>)
 800aebe:	f043 0301 	orr.w	r3, r3, #1
 800aec2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	78fa      	ldrb	r2, [r7, #3]
 800aec8:	701a      	strb	r2, [r3, #0]
}
 800aeca:	bf00      	nop
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	40023c00 	.word	0x40023c00

0800aedc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800aee0:	4b27      	ldr	r3, [pc, #156]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	f003 0310 	and.w	r3, r3, #16
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d008      	beq.n	800aefe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800aeec:	4b25      	ldr	r3, [pc, #148]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800aeee:	69db      	ldr	r3, [r3, #28]
 800aef0:	f043 0310 	orr.w	r3, r3, #16
 800aef4:	4a23      	ldr	r2, [pc, #140]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800aef6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800aef8:	4b21      	ldr	r3, [pc, #132]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800aefa:	2210      	movs	r2, #16
 800aefc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800aefe:	4b20      	ldr	r3, [pc, #128]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	f003 0320 	and.w	r3, r3, #32
 800af06:	2b00      	cmp	r3, #0
 800af08:	d008      	beq.n	800af1c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800af0a:	4b1e      	ldr	r3, [pc, #120]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	f043 0308 	orr.w	r3, r3, #8
 800af12:	4a1c      	ldr	r2, [pc, #112]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800af14:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800af16:	4b1a      	ldr	r3, [pc, #104]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800af18:	2220      	movs	r2, #32
 800af1a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800af1c:	4b18      	ldr	r3, [pc, #96]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af24:	2b00      	cmp	r3, #0
 800af26:	d008      	beq.n	800af3a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800af28:	4b16      	ldr	r3, [pc, #88]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800af2a:	69db      	ldr	r3, [r3, #28]
 800af2c:	f043 0304 	orr.w	r3, r3, #4
 800af30:	4a14      	ldr	r2, [pc, #80]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800af32:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800af34:	4b12      	ldr	r3, [pc, #72]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800af36:	2240      	movs	r2, #64	; 0x40
 800af38:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800af3a:	4b11      	ldr	r3, [pc, #68]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af42:	2b00      	cmp	r3, #0
 800af44:	d008      	beq.n	800af58 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800af46:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	f043 0302 	orr.w	r3, r3, #2
 800af4e:	4a0d      	ldr	r2, [pc, #52]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800af50:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800af52:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800af54:	2280      	movs	r2, #128	; 0x80
 800af56:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800af58:	4b09      	ldr	r3, [pc, #36]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d008      	beq.n	800af76 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800af64:	4b07      	ldr	r3, [pc, #28]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800af66:	69db      	ldr	r3, [r3, #28]
 800af68:	f043 0320 	orr.w	r3, r3, #32
 800af6c:	4a05      	ldr	r2, [pc, #20]	; (800af84 <FLASH_SetErrorCode+0xa8>)
 800af6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800af70:	4b03      	ldr	r3, [pc, #12]	; (800af80 <FLASH_SetErrorCode+0xa4>)
 800af72:	2202      	movs	r2, #2
 800af74:	60da      	str	r2, [r3, #12]
  }
}
 800af76:	bf00      	nop
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	40023c00 	.word	0x40023c00
 800af84:	200009b8 	.word	0x200009b8

0800af88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800af96:	2300      	movs	r3, #0
 800af98:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800af9a:	4b31      	ldr	r3, [pc, #196]	; (800b060 <HAL_FLASHEx_Erase+0xd8>)
 800af9c:	7e1b      	ldrb	r3, [r3, #24]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d101      	bne.n	800afa6 <HAL_FLASHEx_Erase+0x1e>
 800afa2:	2302      	movs	r3, #2
 800afa4:	e058      	b.n	800b058 <HAL_FLASHEx_Erase+0xd0>
 800afa6:	4b2e      	ldr	r3, [pc, #184]	; (800b060 <HAL_FLASHEx_Erase+0xd8>)
 800afa8:	2201      	movs	r2, #1
 800afaa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800afac:	f24c 3050 	movw	r0, #50000	; 0xc350
 800afb0:	f7ff feba 	bl	800ad28 <FLASH_WaitForLastOperation>
 800afb4:	4603      	mov	r3, r0
 800afb6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d148      	bne.n	800b050 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	f04f 32ff 	mov.w	r2, #4294967295
 800afc4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d115      	bne.n	800affa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	b2da      	uxtb	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f000 f844 	bl	800b068 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800afe0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800afe4:	f7ff fea0 	bl	800ad28 <FLASH_WaitForLastOperation>
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800afec:	4b1d      	ldr	r3, [pc, #116]	; (800b064 <HAL_FLASHEx_Erase+0xdc>)
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	4a1c      	ldr	r2, [pc, #112]	; (800b064 <HAL_FLASHEx_Erase+0xdc>)
 800aff2:	f023 0304 	bic.w	r3, r3, #4
 800aff6:	6113      	str	r3, [r2, #16]
 800aff8:	e028      	b.n	800b04c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	60bb      	str	r3, [r7, #8]
 800b000:	e01c      	b.n	800b03c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	4619      	mov	r1, r3
 800b00a:	68b8      	ldr	r0, [r7, #8]
 800b00c:	f000 f850 	bl	800b0b0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b010:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b014:	f7ff fe88 	bl	800ad28 <FLASH_WaitForLastOperation>
 800b018:	4603      	mov	r3, r0
 800b01a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800b01c:	4b11      	ldr	r3, [pc, #68]	; (800b064 <HAL_FLASHEx_Erase+0xdc>)
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	4a10      	ldr	r2, [pc, #64]	; (800b064 <HAL_FLASHEx_Erase+0xdc>)
 800b022:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800b026:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	601a      	str	r2, [r3, #0]
          break;
 800b034:	e00a      	b.n	800b04c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	3301      	adds	r3, #1
 800b03a:	60bb      	str	r3, [r7, #8]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68da      	ldr	r2, [r3, #12]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	4413      	add	r3, r2
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d3da      	bcc.n	800b002 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800b04c:	f000 f878 	bl	800b140 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b050:	4b03      	ldr	r3, [pc, #12]	; (800b060 <HAL_FLASHEx_Erase+0xd8>)
 800b052:	2200      	movs	r2, #0
 800b054:	761a      	strb	r2, [r3, #24]

  return status;
 800b056:	7bfb      	ldrb	r3, [r7, #15]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	200009b8 	.word	0x200009b8
 800b064:	40023c00 	.word	0x40023c00

0800b068 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	6039      	str	r1, [r7, #0]
 800b072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b074:	4b0d      	ldr	r3, [pc, #52]	; (800b0ac <FLASH_MassErase+0x44>)
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	4a0c      	ldr	r2, [pc, #48]	; (800b0ac <FLASH_MassErase+0x44>)
 800b07a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b07e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800b080:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <FLASH_MassErase+0x44>)
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	4a09      	ldr	r2, [pc, #36]	; (800b0ac <FLASH_MassErase+0x44>)
 800b086:	f043 0304 	orr.w	r3, r3, #4
 800b08a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800b08c:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <FLASH_MassErase+0x44>)
 800b08e:	691a      	ldr	r2, [r3, #16]
 800b090:	79fb      	ldrb	r3, [r7, #7]
 800b092:	021b      	lsls	r3, r3, #8
 800b094:	4313      	orrs	r3, r2
 800b096:	4a05      	ldr	r2, [pc, #20]	; (800b0ac <FLASH_MassErase+0x44>)
 800b098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b09c:	6113      	str	r3, [r2, #16]
}
 800b09e:	bf00      	nop
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	40023c00 	.word	0x40023c00

0800b0b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d102      	bne.n	800b0cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	e010      	b.n	800b0ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b0cc:	78fb      	ldrb	r3, [r7, #3]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d103      	bne.n	800b0da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b0d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	e009      	b.n	800b0ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800b0da:	78fb      	ldrb	r3, [r7, #3]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d103      	bne.n	800b0e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b0e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e4:	60fb      	str	r3, [r7, #12]
 800b0e6:	e002      	b.n	800b0ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b0e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b0ee:	4b13      	ldr	r3, [pc, #76]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	4a12      	ldr	r2, [pc, #72]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b0f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800b0fa:	4b10      	ldr	r3, [pc, #64]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b0fc:	691a      	ldr	r2, [r3, #16]
 800b0fe:	490f      	ldr	r1, [pc, #60]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4313      	orrs	r3, r2
 800b104:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b106:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	4a0c      	ldr	r2, [pc, #48]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b10c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b110:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b112:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b114:	691a      	ldr	r2, [r3, #16]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	4313      	orrs	r3, r2
 800b11c:	4a07      	ldr	r2, [pc, #28]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b11e:	f043 0302 	orr.w	r3, r3, #2
 800b122:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	4a04      	ldr	r2, [pc, #16]	; (800b13c <FLASH_Erase_Sector+0x8c>)
 800b12a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b12e:	6113      	str	r3, [r2, #16]
}
 800b130:	bf00      	nop
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	40023c00 	.word	0x40023c00

0800b140 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b140:	b480      	push	{r7}
 800b142:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800b144:	4b20      	ldr	r3, [pc, #128]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d017      	beq.n	800b180 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b150:	4b1d      	ldr	r3, [pc, #116]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a1c      	ldr	r2, [pc, #112]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b156:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b15a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b15c:	4b1a      	ldr	r3, [pc, #104]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a19      	ldr	r2, [pc, #100]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b162:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	4b17      	ldr	r3, [pc, #92]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a16      	ldr	r2, [pc, #88]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b16e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b172:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b174:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a13      	ldr	r2, [pc, #76]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b17a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b17e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b180:	4b11      	ldr	r3, [pc, #68]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d017      	beq.n	800b1bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b18c:	4b0e      	ldr	r3, [pc, #56]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a0d      	ldr	r2, [pc, #52]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b196:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b198:	4b0b      	ldr	r3, [pc, #44]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a0a      	ldr	r2, [pc, #40]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b19e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	4b08      	ldr	r3, [pc, #32]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a07      	ldr	r2, [pc, #28]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b1b0:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a04      	ldr	r2, [pc, #16]	; (800b1c8 <FLASH_FlushCaches+0x88>)
 800b1b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1ba:	6013      	str	r3, [r2, #0]
  }
}
 800b1bc:	bf00      	nop
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40023c00 	.word	0x40023c00

0800b1cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b089      	sub	sp, #36	; 0x24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	61fb      	str	r3, [r7, #28]
 800b1e6:	e16b      	b.n	800b4c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	697a      	ldr	r2, [r7, #20]
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	429a      	cmp	r2, r3
 800b202:	f040 815a 	bne.w	800b4ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d005      	beq.n	800b21e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d130      	bne.n	800b280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	2203      	movs	r2, #3
 800b22a:	fa02 f303 	lsl.w	r3, r2, r3
 800b22e:	43db      	mvns	r3, r3
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	4013      	ands	r3, r2
 800b234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	68da      	ldr	r2, [r3, #12]
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	005b      	lsls	r3, r3, #1
 800b23e:	fa02 f303 	lsl.w	r3, r2, r3
 800b242:	69ba      	ldr	r2, [r7, #24]
 800b244:	4313      	orrs	r3, r2
 800b246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	69ba      	ldr	r2, [r7, #24]
 800b24c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b254:	2201      	movs	r2, #1
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	fa02 f303 	lsl.w	r3, r2, r3
 800b25c:	43db      	mvns	r3, r3
 800b25e:	69ba      	ldr	r2, [r7, #24]
 800b260:	4013      	ands	r3, r2
 800b262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	091b      	lsrs	r3, r3, #4
 800b26a:	f003 0201 	and.w	r2, r3, #1
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	fa02 f303 	lsl.w	r3, r2, r3
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	4313      	orrs	r3, r2
 800b278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	69ba      	ldr	r2, [r7, #24]
 800b27e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	f003 0303 	and.w	r3, r3, #3
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d017      	beq.n	800b2bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	005b      	lsls	r3, r3, #1
 800b296:	2203      	movs	r2, #3
 800b298:	fa02 f303 	lsl.w	r3, r2, r3
 800b29c:	43db      	mvns	r3, r3
 800b29e:	69ba      	ldr	r2, [r7, #24]
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	005b      	lsls	r3, r3, #1
 800b2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	69ba      	ldr	r2, [r7, #24]
 800b2ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	f003 0303 	and.w	r3, r3, #3
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d123      	bne.n	800b310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	08da      	lsrs	r2, r3, #3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3208      	adds	r2, #8
 800b2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	f003 0307 	and.w	r3, r3, #7
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	220f      	movs	r2, #15
 800b2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e4:	43db      	mvns	r3, r3
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	691a      	ldr	r2, [r3, #16]
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	f003 0307 	and.w	r3, r3, #7
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	08da      	lsrs	r2, r3, #3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3208      	adds	r2, #8
 800b30a:	69b9      	ldr	r1, [r7, #24]
 800b30c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	005b      	lsls	r3, r3, #1
 800b31a:	2203      	movs	r2, #3
 800b31c:	fa02 f303 	lsl.w	r3, r2, r3
 800b320:	43db      	mvns	r3, r3
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	4013      	ands	r3, r2
 800b326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	f003 0203 	and.w	r2, r3, #3
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	fa02 f303 	lsl.w	r3, r2, r3
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	69ba      	ldr	r2, [r7, #24]
 800b342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 80b4 	beq.w	800b4ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b352:	2300      	movs	r3, #0
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	4b60      	ldr	r3, [pc, #384]	; (800b4d8 <HAL_GPIO_Init+0x30c>)
 800b358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35a:	4a5f      	ldr	r2, [pc, #380]	; (800b4d8 <HAL_GPIO_Init+0x30c>)
 800b35c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b360:	6453      	str	r3, [r2, #68]	; 0x44
 800b362:	4b5d      	ldr	r3, [pc, #372]	; (800b4d8 <HAL_GPIO_Init+0x30c>)
 800b364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b36e:	4a5b      	ldr	r2, [pc, #364]	; (800b4dc <HAL_GPIO_Init+0x310>)
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	089b      	lsrs	r3, r3, #2
 800b374:	3302      	adds	r3, #2
 800b376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b37a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f003 0303 	and.w	r3, r3, #3
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	220f      	movs	r2, #15
 800b386:	fa02 f303 	lsl.w	r3, r2, r3
 800b38a:	43db      	mvns	r3, r3
 800b38c:	69ba      	ldr	r2, [r7, #24]
 800b38e:	4013      	ands	r3, r2
 800b390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a52      	ldr	r2, [pc, #328]	; (800b4e0 <HAL_GPIO_Init+0x314>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d02b      	beq.n	800b3f2 <HAL_GPIO_Init+0x226>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a51      	ldr	r2, [pc, #324]	; (800b4e4 <HAL_GPIO_Init+0x318>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d025      	beq.n	800b3ee <HAL_GPIO_Init+0x222>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a50      	ldr	r2, [pc, #320]	; (800b4e8 <HAL_GPIO_Init+0x31c>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d01f      	beq.n	800b3ea <HAL_GPIO_Init+0x21e>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a4f      	ldr	r2, [pc, #316]	; (800b4ec <HAL_GPIO_Init+0x320>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d019      	beq.n	800b3e6 <HAL_GPIO_Init+0x21a>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a4e      	ldr	r2, [pc, #312]	; (800b4f0 <HAL_GPIO_Init+0x324>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d013      	beq.n	800b3e2 <HAL_GPIO_Init+0x216>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a4d      	ldr	r2, [pc, #308]	; (800b4f4 <HAL_GPIO_Init+0x328>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d00d      	beq.n	800b3de <HAL_GPIO_Init+0x212>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a4c      	ldr	r2, [pc, #304]	; (800b4f8 <HAL_GPIO_Init+0x32c>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d007      	beq.n	800b3da <HAL_GPIO_Init+0x20e>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a4b      	ldr	r2, [pc, #300]	; (800b4fc <HAL_GPIO_Init+0x330>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d101      	bne.n	800b3d6 <HAL_GPIO_Init+0x20a>
 800b3d2:	2307      	movs	r3, #7
 800b3d4:	e00e      	b.n	800b3f4 <HAL_GPIO_Init+0x228>
 800b3d6:	2308      	movs	r3, #8
 800b3d8:	e00c      	b.n	800b3f4 <HAL_GPIO_Init+0x228>
 800b3da:	2306      	movs	r3, #6
 800b3dc:	e00a      	b.n	800b3f4 <HAL_GPIO_Init+0x228>
 800b3de:	2305      	movs	r3, #5
 800b3e0:	e008      	b.n	800b3f4 <HAL_GPIO_Init+0x228>
 800b3e2:	2304      	movs	r3, #4
 800b3e4:	e006      	b.n	800b3f4 <HAL_GPIO_Init+0x228>
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e004      	b.n	800b3f4 <HAL_GPIO_Init+0x228>
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	e002      	b.n	800b3f4 <HAL_GPIO_Init+0x228>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e000      	b.n	800b3f4 <HAL_GPIO_Init+0x228>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	69fa      	ldr	r2, [r7, #28]
 800b3f6:	f002 0203 	and.w	r2, r2, #3
 800b3fa:	0092      	lsls	r2, r2, #2
 800b3fc:	4093      	lsls	r3, r2
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	4313      	orrs	r3, r2
 800b402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b404:	4935      	ldr	r1, [pc, #212]	; (800b4dc <HAL_GPIO_Init+0x310>)
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	089b      	lsrs	r3, r3, #2
 800b40a:	3302      	adds	r3, #2
 800b40c:	69ba      	ldr	r2, [r7, #24]
 800b40e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b412:	4b3b      	ldr	r3, [pc, #236]	; (800b500 <HAL_GPIO_Init+0x334>)
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	43db      	mvns	r3, r3
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	4013      	ands	r3, r2
 800b420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d003      	beq.n	800b436 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b42e:	69ba      	ldr	r2, [r7, #24]
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	4313      	orrs	r3, r2
 800b434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b436:	4a32      	ldr	r2, [pc, #200]	; (800b500 <HAL_GPIO_Init+0x334>)
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b43c:	4b30      	ldr	r3, [pc, #192]	; (800b500 <HAL_GPIO_Init+0x334>)
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	43db      	mvns	r3, r3
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	4013      	ands	r3, r2
 800b44a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d003      	beq.n	800b460 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b460:	4a27      	ldr	r2, [pc, #156]	; (800b500 <HAL_GPIO_Init+0x334>)
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b466:	4b26      	ldr	r3, [pc, #152]	; (800b500 <HAL_GPIO_Init+0x334>)
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	43db      	mvns	r3, r3
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	4013      	ands	r3, r2
 800b474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b48a:	4a1d      	ldr	r2, [pc, #116]	; (800b500 <HAL_GPIO_Init+0x334>)
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b490:	4b1b      	ldr	r3, [pc, #108]	; (800b500 <HAL_GPIO_Init+0x334>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	43db      	mvns	r3, r3
 800b49a:	69ba      	ldr	r2, [r7, #24]
 800b49c:	4013      	ands	r3, r2
 800b49e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b4ac:	69ba      	ldr	r2, [r7, #24]
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b4b4:	4a12      	ldr	r2, [pc, #72]	; (800b500 <HAL_GPIO_Init+0x334>)
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	61fb      	str	r3, [r7, #28]
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	2b0f      	cmp	r3, #15
 800b4c4:	f67f ae90 	bls.w	800b1e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	3724      	adds	r7, #36	; 0x24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	40023800 	.word	0x40023800
 800b4dc:	40013800 	.word	0x40013800
 800b4e0:	40020000 	.word	0x40020000
 800b4e4:	40020400 	.word	0x40020400
 800b4e8:	40020800 	.word	0x40020800
 800b4ec:	40020c00 	.word	0x40020c00
 800b4f0:	40021000 	.word	0x40021000
 800b4f4:	40021400 	.word	0x40021400
 800b4f8:	40021800 	.word	0x40021800
 800b4fc:	40021c00 	.word	0x40021c00
 800b500:	40013c00 	.word	0x40013c00

0800b504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	807b      	strh	r3, [r7, #2]
 800b510:	4613      	mov	r3, r2
 800b512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b514:	787b      	ldrb	r3, [r7, #1]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b51a:	887a      	ldrh	r2, [r7, #2]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b520:	e003      	b.n	800b52a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b522:	887b      	ldrh	r3, [r7, #2]
 800b524:	041a      	lsls	r2, r3, #16
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	619a      	str	r2, [r3, #24]
}
 800b52a:	bf00      	nop
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
	...

0800b538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b542:	4b08      	ldr	r3, [pc, #32]	; (800b564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b544:	695a      	ldr	r2, [r3, #20]
 800b546:	88fb      	ldrh	r3, [r7, #6]
 800b548:	4013      	ands	r3, r2
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d006      	beq.n	800b55c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b54e:	4a05      	ldr	r2, [pc, #20]	; (800b564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b550:	88fb      	ldrh	r3, [r7, #6]
 800b552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b554:	88fb      	ldrh	r3, [r7, #6]
 800b556:	4618      	mov	r0, r3
 800b558:	f7f7 fa4c 	bl	80029f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800b55c:	bf00      	nop
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	40013c00 	.word	0x40013c00

0800b568 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b568:	b590      	push	{r4, r7, lr}
 800b56a:	b08d      	sub	sp, #52	; 0x34
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4618      	mov	r0, r3
 800b580:	f006 ff37 	bl	80123f2 <USB_GetMode>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	f040 848a 	bne.w	800bea0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4618      	mov	r0, r3
 800b592:	f006 fe9b 	bl	80122cc <USB_ReadInterrupts>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 8480 	beq.w	800be9e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	0a1b      	lsrs	r3, r3, #8
 800b5a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f006 fe88 	bl	80122cc <USB_ReadInterrupts>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d107      	bne.n	800b5d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	695a      	ldr	r2, [r3, #20]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f002 0202 	and.w	r2, r2, #2
 800b5d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f006 fe76 	bl	80122cc <USB_ReadInterrupts>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f003 0310 	and.w	r3, r3, #16
 800b5e6:	2b10      	cmp	r3, #16
 800b5e8:	d161      	bne.n	800b6ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	699a      	ldr	r2, [r3, #24]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f022 0210 	bic.w	r2, r2, #16
 800b5f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	f003 020f 	and.w	r2, r3, #15
 800b606:	4613      	mov	r3, r2
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	4413      	add	r3, r2
 800b616:	3304      	adds	r3, #4
 800b618:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	0c5b      	lsrs	r3, r3, #17
 800b61e:	f003 030f 	and.w	r3, r3, #15
 800b622:	2b02      	cmp	r3, #2
 800b624:	d124      	bne.n	800b670 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b626:	69ba      	ldr	r2, [r7, #24]
 800b628:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b62c:	4013      	ands	r3, r2
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d035      	beq.n	800b69e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	091b      	lsrs	r3, r3, #4
 800b63a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b63c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b640:	b29b      	uxth	r3, r3
 800b642:	461a      	mov	r2, r3
 800b644:	6a38      	ldr	r0, [r7, #32]
 800b646:	f006 fcef 	bl	8012028 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	691a      	ldr	r2, [r3, #16]
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	091b      	lsrs	r3, r3, #4
 800b652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b656:	441a      	add	r2, r3
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	6a1a      	ldr	r2, [r3, #32]
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	091b      	lsrs	r3, r3, #4
 800b664:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b668:	441a      	add	r2, r3
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	621a      	str	r2, [r3, #32]
 800b66e:	e016      	b.n	800b69e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	0c5b      	lsrs	r3, r3, #17
 800b674:	f003 030f 	and.w	r3, r3, #15
 800b678:	2b06      	cmp	r3, #6
 800b67a:	d110      	bne.n	800b69e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b682:	2208      	movs	r2, #8
 800b684:	4619      	mov	r1, r3
 800b686:	6a38      	ldr	r0, [r7, #32]
 800b688:	f006 fcce 	bl	8012028 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	6a1a      	ldr	r2, [r3, #32]
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	091b      	lsrs	r3, r3, #4
 800b694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b698:	441a      	add	r2, r3
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	699a      	ldr	r2, [r3, #24]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f042 0210 	orr.w	r2, r2, #16
 800b6ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f006 fe0a 	bl	80122cc <USB_ReadInterrupts>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b6c2:	f040 80a7 	bne.w	800b814 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f006 fe0f 	bl	80122f2 <USB_ReadDevAllOutEpInterrupt>
 800b6d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b6d6:	e099      	b.n	800b80c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f000 808e 	beq.w	800b800 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ea:	b2d2      	uxtb	r2, r2
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f006 fe33 	bl	801235a <USB_ReadDevOutEPInterrupt>
 800b6f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00c      	beq.n	800b71a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	015a      	lsls	r2, r3, #5
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70c:	461a      	mov	r2, r3
 800b70e:	2301      	movs	r3, #1
 800b710:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fe61 	bl	800c3dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f003 0308 	and.w	r3, r3, #8
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00c      	beq.n	800b73e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b730:	461a      	mov	r2, r3
 800b732:	2308      	movs	r3, #8
 800b734:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 ff37 	bl	800c5ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	f003 0310 	and.w	r3, r3, #16
 800b744:	2b00      	cmp	r3, #0
 800b746:	d008      	beq.n	800b75a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	015a      	lsls	r2, r3, #5
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	4413      	add	r3, r2
 800b750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b754:	461a      	mov	r2, r3
 800b756:	2310      	movs	r3, #16
 800b758:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d030      	beq.n	800b7c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b76c:	2b80      	cmp	r3, #128	; 0x80
 800b76e:	d109      	bne.n	800b784 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b77e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b782:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b786:	4613      	mov	r3, r2
 800b788:	00db      	lsls	r3, r3, #3
 800b78a:	4413      	add	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	4413      	add	r3, r2
 800b796:	3304      	adds	r3, #4
 800b798:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	78db      	ldrb	r3, [r3, #3]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d108      	bne.n	800b7b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f009 fca6 	bl	8015100 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	f003 0320 	and.w	r3, r3, #32
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d008      	beq.n	800b7e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	015a      	lsls	r2, r3, #5
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7dc:	461a      	mov	r2, r3
 800b7de:	2320      	movs	r3, #32
 800b7e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d009      	beq.n	800b800 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ee:	015a      	lsls	r2, r3, #5
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	3301      	adds	r3, #1
 800b804:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b808:	085b      	lsrs	r3, r3, #1
 800b80a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f47f af62 	bne.w	800b6d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4618      	mov	r0, r3
 800b81a:	f006 fd57 	bl	80122cc <USB_ReadInterrupts>
 800b81e:	4603      	mov	r3, r0
 800b820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b828:	f040 80db 	bne.w	800b9e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4618      	mov	r0, r3
 800b832:	f006 fd78 	bl	8012326 <USB_ReadDevAllInEpInterrupt>
 800b836:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b838:	2300      	movs	r3, #0
 800b83a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b83c:	e0cd      	b.n	800b9da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 80c2 	beq.w	800b9ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b850:	b2d2      	uxtb	r2, r2
 800b852:	4611      	mov	r1, r2
 800b854:	4618      	mov	r0, r3
 800b856:	f006 fd9e 	bl	8012396 <USB_ReadDevInEPInterrupt>
 800b85a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	2b00      	cmp	r3, #0
 800b864:	d057      	beq.n	800b916 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b868:	f003 030f 	and.w	r3, r3, #15
 800b86c:	2201      	movs	r2, #1
 800b86e:	fa02 f303 	lsl.w	r3, r2, r3
 800b872:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	43db      	mvns	r3, r3
 800b880:	69f9      	ldr	r1, [r7, #28]
 800b882:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b886:	4013      	ands	r3, r2
 800b888:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	4413      	add	r3, r2
 800b892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b896:	461a      	mov	r2, r3
 800b898:	2301      	movs	r3, #1
 800b89a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d132      	bne.n	800b90a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b8a4:	6879      	ldr	r1, [r7, #4]
 800b8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	00db      	lsls	r3, r3, #3
 800b8ac:	4413      	add	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	440b      	add	r3, r1
 800b8b2:	334c      	adds	r3, #76	; 0x4c
 800b8b4:	6819      	ldr	r1, [r3, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	00db      	lsls	r3, r3, #3
 800b8be:	4413      	add	r3, r2
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	4403      	add	r3, r0
 800b8c4:	3348      	adds	r3, #72	; 0x48
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4419      	add	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	00db      	lsls	r3, r3, #3
 800b8d2:	4413      	add	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4403      	add	r3, r0
 800b8d8:	334c      	adds	r3, #76	; 0x4c
 800b8da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d113      	bne.n	800b90a <HAL_PCD_IRQHandler+0x3a2>
 800b8e2:	6879      	ldr	r1, [r7, #4]
 800b8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	00db      	lsls	r3, r3, #3
 800b8ea:	4413      	add	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	440b      	add	r3, r1
 800b8f0:	3354      	adds	r3, #84	; 0x54
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d108      	bne.n	800b90a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b902:	461a      	mov	r2, r3
 800b904:	2101      	movs	r1, #1
 800b906:	f006 fda5 	bl	8012454 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f009 fb70 	bl	8014ff6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f003 0308 	and.w	r3, r3, #8
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d008      	beq.n	800b932 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b92c:	461a      	mov	r2, r3
 800b92e:	2308      	movs	r3, #8
 800b930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f003 0310 	and.w	r3, r3, #16
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d008      	beq.n	800b94e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	015a      	lsls	r2, r3, #5
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	4413      	add	r3, r2
 800b944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b948:	461a      	mov	r2, r3
 800b94a:	2310      	movs	r3, #16
 800b94c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b954:	2b00      	cmp	r3, #0
 800b956:	d008      	beq.n	800b96a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	015a      	lsls	r2, r3, #5
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	4413      	add	r3, r2
 800b960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b964:	461a      	mov	r2, r3
 800b966:	2340      	movs	r3, #64	; 0x40
 800b968:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	f003 0302 	and.w	r3, r3, #2
 800b970:	2b00      	cmp	r3, #0
 800b972:	d023      	beq.n	800b9bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b976:	6a38      	ldr	r0, [r7, #32]
 800b978:	f005 fdee 	bl	8011558 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b97e:	4613      	mov	r3, r2
 800b980:	00db      	lsls	r3, r3, #3
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	3338      	adds	r3, #56	; 0x38
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	4413      	add	r3, r2
 800b98c:	3304      	adds	r3, #4
 800b98e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	78db      	ldrb	r3, [r3, #3]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d108      	bne.n	800b9aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	2200      	movs	r2, #0
 800b99c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f009 fbbd 	bl	8015124 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	015a      	lsls	r2, r3, #5
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b9c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fc79 	bl	800c2c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	085b      	lsrs	r3, r3, #1
 800b9d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f47f af2e 	bne.w	800b83e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f006 fc70 	bl	80122cc <USB_ReadInterrupts>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9f6:	d122      	bne.n	800ba3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	69fa      	ldr	r2, [r7, #28]
 800ba02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba06:	f023 0301 	bic.w	r3, r3, #1
 800ba0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d108      	bne.n	800ba28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ba1e:	2100      	movs	r1, #0
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fe09 	bl	800c638 <HAL_PCDEx_LPM_Callback>
 800ba26:	e002      	b.n	800ba2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f009 fb5b 	bl	80150e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	695a      	ldr	r2, [r3, #20]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ba3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f006 fc42 	bl	80122cc <USB_ReadInterrupts>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba52:	d112      	bne.n	800ba7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d102      	bne.n	800ba6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f009 fb17 	bl	8015098 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	695a      	ldr	r2, [r3, #20]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ba78:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f006 fc24 	bl	80122cc <USB_ReadInterrupts>
 800ba84:	4603      	mov	r3, r0
 800ba86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba8e:	f040 80b7 	bne.w	800bc00 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	69fa      	ldr	r2, [r7, #28]
 800ba9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baa0:	f023 0301 	bic.w	r3, r3, #1
 800baa4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2110      	movs	r1, #16
 800baac:	4618      	mov	r0, r3
 800baae:	f005 fd53 	bl	8011558 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bab2:	2300      	movs	r3, #0
 800bab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bab6:	e046      	b.n	800bb46 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baba:	015a      	lsls	r2, r3, #5
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	4413      	add	r3, r2
 800bac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac4:	461a      	mov	r2, r3
 800bac6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800baca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bace:	015a      	lsls	r2, r3, #5
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	4413      	add	r3, r2
 800bad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800badc:	0151      	lsls	r1, r2, #5
 800bade:	69fa      	ldr	r2, [r7, #28]
 800bae0:	440a      	add	r2, r1
 800bae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800baea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf8:	461a      	mov	r2, r3
 800bafa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bafe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb10:	0151      	lsls	r1, r2, #5
 800bb12:	69fa      	ldr	r2, [r7, #28]
 800bb14:	440a      	add	r2, r1
 800bb16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb22:	015a      	lsls	r2, r3, #5
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	4413      	add	r3, r2
 800bb28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb30:	0151      	lsls	r1, r2, #5
 800bb32:	69fa      	ldr	r2, [r7, #28]
 800bb34:	440a      	add	r2, r1
 800bb36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb3e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb42:	3301      	adds	r3, #1
 800bb44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d3b3      	bcc.n	800bab8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb56:	69db      	ldr	r3, [r3, #28]
 800bb58:	69fa      	ldr	r2, [r7, #28]
 800bb5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb5e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bb62:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d016      	beq.n	800bb9a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb76:	69fa      	ldr	r2, [r7, #28]
 800bb78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb7c:	f043 030b 	orr.w	r3, r3, #11
 800bb80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8c:	69fa      	ldr	r2, [r7, #28]
 800bb8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb92:	f043 030b 	orr.w	r3, r3, #11
 800bb96:	6453      	str	r3, [r2, #68]	; 0x44
 800bb98:	e015      	b.n	800bbc6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	69fa      	ldr	r2, [r7, #28]
 800bba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bba8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800bbb0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	69fa      	ldr	r2, [r7, #28]
 800bbbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbc0:	f043 030b 	orr.w	r3, r3, #11
 800bbc4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	69fa      	ldr	r2, [r7, #28]
 800bbd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbd4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bbd8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6818      	ldr	r0, [r3, #0]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bbea:	461a      	mov	r2, r3
 800bbec:	f006 fc32 	bl	8012454 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	695a      	ldr	r2, [r3, #20]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800bbfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f006 fb61 	bl	80122cc <USB_ReadInterrupts>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc14:	d124      	bne.n	800bc60 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f006 fbf7 	bl	801240e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f005 fccb 	bl	80115c0 <USB_GetDevSpeed>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681c      	ldr	r4, [r3, #0]
 800bc36:	f001 f96d 	bl	800cf14 <HAL_RCC_GetHCLKFreq>
 800bc3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	461a      	mov	r2, r3
 800bc44:	4620      	mov	r0, r4
 800bc46:	f005 fbe5 	bl	8011414 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f009 f9fb 	bl	8015046 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	695a      	ldr	r2, [r3, #20]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800bc5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4618      	mov	r0, r3
 800bc66:	f006 fb31 	bl	80122cc <USB_ReadInterrupts>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	f003 0308 	and.w	r3, r3, #8
 800bc70:	2b08      	cmp	r3, #8
 800bc72:	d10a      	bne.n	800bc8a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f009 f9d8 	bl	801502a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	695a      	ldr	r2, [r3, #20]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f002 0208 	and.w	r2, r2, #8
 800bc88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f006 fb1c 	bl	80122cc <USB_ReadInterrupts>
 800bc94:	4603      	mov	r3, r0
 800bc96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9a:	2b80      	cmp	r3, #128	; 0x80
 800bc9c:	d122      	bne.n	800bce4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	699b      	ldr	r3, [r3, #24]
 800bca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bcaa:	2301      	movs	r3, #1
 800bcac:	627b      	str	r3, [r7, #36]	; 0x24
 800bcae:	e014      	b.n	800bcda <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bcb0:	6879      	ldr	r1, [r7, #4]
 800bcb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	440b      	add	r3, r1
 800bcbe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d105      	bne.n	800bcd4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fac5 	bl	800c25e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d3e5      	bcc.n	800bcb0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f006 faef 	bl	80122cc <USB_ReadInterrupts>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcf8:	d13b      	bne.n	800bd72 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	627b      	str	r3, [r7, #36]	; 0x24
 800bcfe:	e02b      	b.n	800bd58 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd14:	4613      	mov	r3, r2
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	4413      	add	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	440b      	add	r3, r1
 800bd1e:	3340      	adds	r3, #64	; 0x40
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d115      	bne.n	800bd52 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bd26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	da12      	bge.n	800bd52 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bd2c:	6879      	ldr	r1, [r7, #4]
 800bd2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd30:	4613      	mov	r3, r2
 800bd32:	00db      	lsls	r3, r3, #3
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	440b      	add	r3, r1
 800bd3a:	333f      	adds	r3, #63	; 0x3f
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 fa86 	bl	800c25e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	3301      	adds	r3, #1
 800bd56:	627b      	str	r3, [r7, #36]	; 0x24
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d3ce      	bcc.n	800bd00 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	695a      	ldr	r2, [r3, #20]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800bd70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f006 faa8 	bl	80122cc <USB_ReadInterrupts>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd86:	d155      	bne.n	800be34 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd88:	2301      	movs	r3, #1
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd8c:	e045      	b.n	800be1a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd90:	015a      	lsls	r2, r3, #5
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	4413      	add	r3, r2
 800bd96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd9e:	6879      	ldr	r1, [r7, #4]
 800bda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda2:	4613      	mov	r3, r2
 800bda4:	00db      	lsls	r3, r3, #3
 800bda6:	4413      	add	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	440b      	add	r3, r1
 800bdac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d12e      	bne.n	800be14 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bdb6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	da2b      	bge.n	800be14 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800bdc8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d121      	bne.n	800be14 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bdd0:	6879      	ldr	r1, [r7, #4]
 800bdd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	440b      	add	r3, r1
 800bdde:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800bde2:	2201      	movs	r2, #1
 800bde4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bdee:	6a3b      	ldr	r3, [r7, #32]
 800bdf0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10a      	bne.n	800be14 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	69fa      	ldr	r2, [r7, #28]
 800be08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be10:	6053      	str	r3, [r2, #4]
            break;
 800be12:	e007      	b.n	800be24 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	3301      	adds	r3, #1
 800be18:	627b      	str	r3, [r7, #36]	; 0x24
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be20:	429a      	cmp	r2, r3
 800be22:	d3b4      	bcc.n	800bd8e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	695a      	ldr	r2, [r3, #20]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800be32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4618      	mov	r0, r3
 800be3a:	f006 fa47 	bl	80122cc <USB_ReadInterrupts>
 800be3e:	4603      	mov	r3, r0
 800be40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be48:	d10a      	bne.n	800be60 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f009 f97c 	bl	8015148 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	695a      	ldr	r2, [r3, #20]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800be5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4618      	mov	r0, r3
 800be66:	f006 fa31 	bl	80122cc <USB_ReadInterrupts>
 800be6a:	4603      	mov	r3, r0
 800be6c:	f003 0304 	and.w	r3, r3, #4
 800be70:	2b04      	cmp	r3, #4
 800be72:	d115      	bne.n	800bea0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	f003 0304 	and.w	r3, r3, #4
 800be82:	2b00      	cmp	r3, #0
 800be84:	d002      	beq.n	800be8c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f009 f96c 	bl	8015164 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6859      	ldr	r1, [r3, #4]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	69ba      	ldr	r2, [r7, #24]
 800be98:	430a      	orrs	r2, r1
 800be9a:	605a      	str	r2, [r3, #4]
 800be9c:	e000      	b.n	800bea0 <HAL_PCD_IRQHandler+0x938>
      return;
 800be9e:	bf00      	nop
    }
  }
}
 800bea0:	3734      	adds	r7, #52	; 0x34
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd90      	pop	{r4, r7, pc}

0800bea6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b082      	sub	sp, #8
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	460b      	mov	r3, r1
 800beb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d101      	bne.n	800bec0 <HAL_PCD_SetAddress+0x1a>
 800bebc:	2302      	movs	r3, #2
 800bebe:	e013      	b.n	800bee8 <HAL_PCD_SetAddress+0x42>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	78fa      	ldrb	r2, [r7, #3]
 800becc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	78fa      	ldrb	r2, [r7, #3]
 800bed6:	4611      	mov	r1, r2
 800bed8:	4618      	mov	r0, r3
 800beda:	f006 f9d1 	bl	8012280 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	4608      	mov	r0, r1
 800befa:	4611      	mov	r1, r2
 800befc:	461a      	mov	r2, r3
 800befe:	4603      	mov	r3, r0
 800bf00:	70fb      	strb	r3, [r7, #3]
 800bf02:	460b      	mov	r3, r1
 800bf04:	803b      	strh	r3, [r7, #0]
 800bf06:	4613      	mov	r3, r2
 800bf08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bf0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	da0f      	bge.n	800bf36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf16:	78fb      	ldrb	r3, [r7, #3]
 800bf18:	f003 020f 	and.w	r2, r3, #15
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	4413      	add	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	3338      	adds	r3, #56	; 0x38
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	4413      	add	r3, r2
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2201      	movs	r2, #1
 800bf32:	705a      	strb	r2, [r3, #1]
 800bf34:	e00f      	b.n	800bf56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf36:	78fb      	ldrb	r3, [r7, #3]
 800bf38:	f003 020f 	and.w	r2, r3, #15
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2200      	movs	r2, #0
 800bf54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800bf56:	78fb      	ldrb	r3, [r7, #3]
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800bf62:	883a      	ldrh	r2, [r7, #0]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	78ba      	ldrb	r2, [r7, #2]
 800bf6c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	785b      	ldrb	r3, [r3, #1]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d004      	beq.n	800bf80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bf80:	78bb      	ldrb	r3, [r7, #2]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d102      	bne.n	800bf8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d101      	bne.n	800bf9a <HAL_PCD_EP_Open+0xaa>
 800bf96:	2302      	movs	r3, #2
 800bf98:	e00e      	b.n	800bfb8 <HAL_PCD_EP_Open+0xc8>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68f9      	ldr	r1, [r7, #12]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f005 fb2e 	bl	801160a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800bfb6:	7afb      	ldrb	r3, [r7, #11]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	607a      	str	r2, [r7, #4]
 800bfca:	603b      	str	r3, [r7, #0]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bfd0:	7afb      	ldrb	r3, [r7, #11]
 800bfd2:	f003 020f 	and.w	r2, r3, #15
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	4413      	add	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	3304      	adds	r3, #4
 800bfe8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	2200      	movs	r2, #0
 800bffa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	2200      	movs	r2, #0
 800c000:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c002:	7afb      	ldrb	r3, [r7, #11]
 800c004:	f003 030f 	and.w	r3, r3, #15
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d102      	bne.n	800c01c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c01c:	7afb      	ldrb	r3, [r7, #11]
 800c01e:	f003 030f 	and.w	r3, r3, #15
 800c022:	2b00      	cmp	r3, #0
 800c024:	d109      	bne.n	800c03a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	461a      	mov	r2, r3
 800c032:	6979      	ldr	r1, [r7, #20]
 800c034:	f005 fdb8 	bl	8011ba8 <USB_EP0StartXfer>
 800c038:	e008      	b.n	800c04c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	b2db      	uxtb	r3, r3
 800c044:	461a      	mov	r2, r3
 800c046:	6979      	ldr	r1, [r7, #20]
 800c048:	f005 fb66 	bl	8011718 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b086      	sub	sp, #24
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]
 800c062:	460b      	mov	r3, r1
 800c064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c066:	7afb      	ldrb	r3, [r7, #11]
 800c068:	f003 020f 	and.w	r2, r3, #15
 800c06c:	4613      	mov	r3, r2
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	3338      	adds	r3, #56	; 0x38
 800c076:	68fa      	ldr	r2, [r7, #12]
 800c078:	4413      	add	r3, r2
 800c07a:	3304      	adds	r3, #4
 800c07c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2200      	movs	r2, #0
 800c08e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2201      	movs	r2, #1
 800c094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c096:	7afb      	ldrb	r3, [r7, #11]
 800c098:	f003 030f 	and.w	r3, r3, #15
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d102      	bne.n	800c0b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c0b0:	7afb      	ldrb	r3, [r7, #11]
 800c0b2:	f003 030f 	and.w	r3, r3, #15
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d109      	bne.n	800c0ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6818      	ldr	r0, [r3, #0]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	6979      	ldr	r1, [r7, #20]
 800c0c8:	f005 fd6e 	bl	8011ba8 <USB_EP0StartXfer>
 800c0cc:	e008      	b.n	800c0e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6818      	ldr	r0, [r3, #0]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	461a      	mov	r2, r3
 800c0da:	6979      	ldr	r1, [r7, #20]
 800c0dc:	f005 fb1c 	bl	8011718 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c0f6:	78fb      	ldrb	r3, [r7, #3]
 800c0f8:	f003 020f 	and.w	r2, r3, #15
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	d901      	bls.n	800c108 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e050      	b.n	800c1aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da0f      	bge.n	800c130 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	f003 020f 	and.w	r2, r3, #15
 800c116:	4613      	mov	r3, r2
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	4413      	add	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	3338      	adds	r3, #56	; 0x38
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	4413      	add	r3, r2
 800c124:	3304      	adds	r3, #4
 800c126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2201      	movs	r2, #1
 800c12c:	705a      	strb	r2, [r3, #1]
 800c12e:	e00d      	b.n	800c14c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c130:	78fa      	ldrb	r2, [r7, #3]
 800c132:	4613      	mov	r3, r2
 800c134:	00db      	lsls	r3, r3, #3
 800c136:	4413      	add	r3, r2
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	4413      	add	r3, r2
 800c142:	3304      	adds	r3, #4
 800c144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2201      	movs	r2, #1
 800c150:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c152:	78fb      	ldrb	r3, [r7, #3]
 800c154:	f003 030f 	and.w	r3, r3, #15
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c164:	2b01      	cmp	r3, #1
 800c166:	d101      	bne.n	800c16c <HAL_PCD_EP_SetStall+0x82>
 800c168:	2302      	movs	r3, #2
 800c16a:	e01e      	b.n	800c1aa <HAL_PCD_EP_SetStall+0xc0>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68f9      	ldr	r1, [r7, #12]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f005 ffac 	bl	80120d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	f003 030f 	and.w	r3, r3, #15
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10a      	bne.n	800c1a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6818      	ldr	r0, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	b2d9      	uxtb	r1, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c19a:	461a      	mov	r2, r3
 800c19c:	f006 f95a 	bl	8012454 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c1be:	78fb      	ldrb	r3, [r7, #3]
 800c1c0:	f003 020f 	and.w	r2, r3, #15
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d901      	bls.n	800c1d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e042      	b.n	800c256 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c1d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	da0f      	bge.n	800c1f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1d8:	78fb      	ldrb	r3, [r7, #3]
 800c1da:	f003 020f 	and.w	r2, r3, #15
 800c1de:	4613      	mov	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	4413      	add	r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	3338      	adds	r3, #56	; 0x38
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	705a      	strb	r2, [r3, #1]
 800c1f6:	e00f      	b.n	800c218 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c1f8:	78fb      	ldrb	r3, [r7, #3]
 800c1fa:	f003 020f 	and.w	r2, r3, #15
 800c1fe:	4613      	mov	r3, r2
 800c200:	00db      	lsls	r3, r3, #3
 800c202:	4413      	add	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	4413      	add	r3, r2
 800c20e:	3304      	adds	r3, #4
 800c210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c21e:	78fb      	ldrb	r3, [r7, #3]
 800c220:	f003 030f 	and.w	r3, r3, #15
 800c224:	b2da      	uxtb	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c230:	2b01      	cmp	r3, #1
 800c232:	d101      	bne.n	800c238 <HAL_PCD_EP_ClrStall+0x86>
 800c234:	2302      	movs	r3, #2
 800c236:	e00e      	b.n	800c256 <HAL_PCD_EP_ClrStall+0xa4>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68f9      	ldr	r1, [r7, #12]
 800c246:	4618      	mov	r0, r3
 800c248:	f005 ffb4 	bl	80121b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b084      	sub	sp, #16
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	460b      	mov	r3, r1
 800c268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c26a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	da0c      	bge.n	800c28c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c272:	78fb      	ldrb	r3, [r7, #3]
 800c274:	f003 020f 	and.w	r2, r3, #15
 800c278:	4613      	mov	r3, r2
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	4413      	add	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	3338      	adds	r3, #56	; 0x38
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	4413      	add	r3, r2
 800c286:	3304      	adds	r3, #4
 800c288:	60fb      	str	r3, [r7, #12]
 800c28a:	e00c      	b.n	800c2a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c28c:	78fb      	ldrb	r3, [r7, #3]
 800c28e:	f003 020f 	and.w	r2, r3, #15
 800c292:	4613      	mov	r3, r2
 800c294:	00db      	lsls	r3, r3, #3
 800c296:	4413      	add	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	68f9      	ldr	r1, [r7, #12]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f005 fdd3 	bl	8011e58 <USB_EPStopXfer>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c2b6:	7afb      	ldrb	r3, [r7, #11]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b08a      	sub	sp, #40	; 0x28
 800c2c4:	af02      	add	r7, sp, #8
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	4413      	add	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	3338      	adds	r3, #56	; 0x38
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6a1a      	ldr	r2, [r3, #32]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	699b      	ldr	r3, [r3, #24]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d901      	bls.n	800c2f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e06c      	b.n	800c3d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	699a      	ldr	r2, [r3, #24]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6a1b      	ldr	r3, [r3, #32]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	69fa      	ldr	r2, [r7, #28]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d902      	bls.n	800c314 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	3303      	adds	r3, #3
 800c318:	089b      	lsrs	r3, r3, #2
 800c31a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c31c:	e02b      	b.n	800c376 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	699a      	ldr	r2, [r3, #24]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6a1b      	ldr	r3, [r3, #32]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	69fa      	ldr	r2, [r7, #28]
 800c330:	429a      	cmp	r2, r3
 800c332:	d902      	bls.n	800c33a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	3303      	adds	r3, #3
 800c33e:	089b      	lsrs	r3, r3, #2
 800c340:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6919      	ldr	r1, [r3, #16]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c352:	b2db      	uxtb	r3, r3
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	4603      	mov	r3, r0
 800c358:	6978      	ldr	r0, [r7, #20]
 800c35a:	f005 fe27 	bl	8011fac <USB_WritePacket>

    ep->xfer_buff  += len;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	691a      	ldr	r2, [r3, #16]
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	441a      	add	r2, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6a1a      	ldr	r2, [r3, #32]
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	441a      	add	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	015a      	lsls	r2, r3, #5
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	4413      	add	r3, r2
 800c37e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c382:	699b      	ldr	r3, [r3, #24]
 800c384:	b29b      	uxth	r3, r3
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d809      	bhi.n	800c3a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6a1a      	ldr	r2, [r3, #32]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c394:	429a      	cmp	r2, r3
 800c396:	d203      	bcs.n	800c3a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	699b      	ldr	r3, [r3, #24]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1be      	bne.n	800c31e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	699a      	ldr	r2, [r3, #24]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6a1b      	ldr	r3, [r3, #32]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d811      	bhi.n	800c3d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	f003 030f 	and.w	r3, r3, #15
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	43db      	mvns	r3, r3
 800c3c6:	6939      	ldr	r1, [r7, #16]
 800c3c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3720      	adds	r7, #32
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
	...

0800c3dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	333c      	adds	r3, #60	; 0x3c
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	015a      	lsls	r2, r3, #5
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	4413      	add	r3, r2
 800c402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d17b      	bne.n	800c50a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	f003 0308 	and.w	r3, r3, #8
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d015      	beq.n	800c448 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	4a61      	ldr	r2, [pc, #388]	; (800c5a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c420:	4293      	cmp	r3, r2
 800c422:	f240 80b9 	bls.w	800c598 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f000 80b3 	beq.w	800c598 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	015a      	lsls	r2, r3, #5
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	4413      	add	r3, r2
 800c43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c43e:	461a      	mov	r2, r3
 800c440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c444:	6093      	str	r3, [r2, #8]
 800c446:	e0a7      	b.n	800c598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	f003 0320 	and.w	r3, r3, #32
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d009      	beq.n	800c466 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	015a      	lsls	r2, r3, #5
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	4413      	add	r3, r2
 800c45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c45e:	461a      	mov	r2, r3
 800c460:	2320      	movs	r3, #32
 800c462:	6093      	str	r3, [r2, #8]
 800c464:	e098      	b.n	800c598 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f040 8093 	bne.w	800c598 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	4a4b      	ldr	r2, [pc, #300]	; (800c5a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d90f      	bls.n	800c49a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00a      	beq.n	800c49a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	015a      	lsls	r2, r3, #5
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	4413      	add	r3, r2
 800c48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c490:	461a      	mov	r2, r3
 800c492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c496:	6093      	str	r3, [r2, #8]
 800c498:	e07e      	b.n	800c598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	4613      	mov	r3, r2
 800c49e:	00db      	lsls	r3, r3, #3
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	69da      	ldr	r2, [r3, #28]
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	0159      	lsls	r1, r3, #5
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	440b      	add	r3, r1
 800c4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4c6:	1ad2      	subs	r2, r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d114      	bne.n	800c4fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d109      	bne.n	800c4ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6818      	ldr	r0, [r3, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	2101      	movs	r1, #1
 800c4e8:	f005 ffb4 	bl	8012454 <USB_EP0_OutStart>
 800c4ec:	e006      	b.n	800c4fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	691a      	ldr	r2, [r3, #16]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	441a      	add	r2, r3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	4619      	mov	r1, r3
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f008 fd5c 	bl	8014fc0 <HAL_PCD_DataOutStageCallback>
 800c508:	e046      	b.n	800c598 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	4a26      	ldr	r2, [pc, #152]	; (800c5a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d124      	bne.n	800c55c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00a      	beq.n	800c532 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	015a      	lsls	r2, r3, #5
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	4413      	add	r3, r2
 800c524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c528:	461a      	mov	r2, r3
 800c52a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c52e:	6093      	str	r3, [r2, #8]
 800c530:	e032      	b.n	800c598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f003 0320 	and.w	r3, r3, #32
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d008      	beq.n	800c54e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	015a      	lsls	r2, r3, #5
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	4413      	add	r3, r2
 800c544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c548:	461a      	mov	r2, r3
 800c54a:	2320      	movs	r3, #32
 800c54c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	b2db      	uxtb	r3, r3
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f008 fd33 	bl	8014fc0 <HAL_PCD_DataOutStageCallback>
 800c55a:	e01d      	b.n	800c598 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d114      	bne.n	800c58c <PCD_EP_OutXfrComplete_int+0x1b0>
 800c562:	6879      	ldr	r1, [r7, #4]
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	4613      	mov	r3, r2
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	4413      	add	r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	440b      	add	r3, r1
 800c570:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d108      	bne.n	800c58c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6818      	ldr	r0, [r3, #0]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c584:	461a      	mov	r2, r3
 800c586:	2100      	movs	r1, #0
 800c588:	f005 ff64 	bl	8012454 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f008 fd14 	bl	8014fc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	4f54300a 	.word	0x4f54300a
 800c5a8:	4f54310a 	.word	0x4f54310a

0800c5ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	333c      	adds	r3, #60	; 0x3c
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	015a      	lsls	r2, r3, #5
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	4a15      	ldr	r2, [pc, #84]	; (800c634 <PCD_EP_OutSetupPacket_int+0x88>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d90e      	bls.n	800c600 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d009      	beq.n	800c600 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f008 fccb 	bl	8014f9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	4a0a      	ldr	r2, [pc, #40]	; (800c634 <PCD_EP_OutSetupPacket_int+0x88>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d90c      	bls.n	800c628 <PCD_EP_OutSetupPacket_int+0x7c>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d108      	bne.n	800c628 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6818      	ldr	r0, [r3, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c620:	461a      	mov	r2, r3
 800c622:	2101      	movs	r1, #1
 800c624:	f005 ff16 	bl	8012454 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3718      	adds	r7, #24
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	4f54300a 	.word	0x4f54300a

0800c638 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e267      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d075      	beq.n	800c75a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c66e:	4b88      	ldr	r3, [pc, #544]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c670:	689b      	ldr	r3, [r3, #8]
 800c672:	f003 030c 	and.w	r3, r3, #12
 800c676:	2b04      	cmp	r3, #4
 800c678:	d00c      	beq.n	800c694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c67a:	4b85      	ldr	r3, [pc, #532]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c682:	2b08      	cmp	r3, #8
 800c684:	d112      	bne.n	800c6ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c686:	4b82      	ldr	r3, [pc, #520]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c68e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c692:	d10b      	bne.n	800c6ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c694:	4b7e      	ldr	r3, [pc, #504]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d05b      	beq.n	800c758 <HAL_RCC_OscConfig+0x108>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d157      	bne.n	800c758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e242      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6b4:	d106      	bne.n	800c6c4 <HAL_RCC_OscConfig+0x74>
 800c6b6:	4b76      	ldr	r3, [pc, #472]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a75      	ldr	r2, [pc, #468]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	e01d      	b.n	800c700 <HAL_RCC_OscConfig+0xb0>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6cc:	d10c      	bne.n	800c6e8 <HAL_RCC_OscConfig+0x98>
 800c6ce:	4b70      	ldr	r3, [pc, #448]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a6f      	ldr	r2, [pc, #444]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c6d8:	6013      	str	r3, [r2, #0]
 800c6da:	4b6d      	ldr	r3, [pc, #436]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a6c      	ldr	r2, [pc, #432]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6e4:	6013      	str	r3, [r2, #0]
 800c6e6:	e00b      	b.n	800c700 <HAL_RCC_OscConfig+0xb0>
 800c6e8:	4b69      	ldr	r3, [pc, #420]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a68      	ldr	r2, [pc, #416]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6f2:	6013      	str	r3, [r2, #0]
 800c6f4:	4b66      	ldr	r3, [pc, #408]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a65      	ldr	r2, [pc, #404]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c6fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c6fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d013      	beq.n	800c730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c708:	f7fd f956 	bl	80099b8 <HAL_GetTick>
 800c70c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c70e:	e008      	b.n	800c722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c710:	f7fd f952 	bl	80099b8 <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	2b64      	cmp	r3, #100	; 0x64
 800c71c:	d901      	bls.n	800c722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e207      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c722:	4b5b      	ldr	r3, [pc, #364]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d0f0      	beq.n	800c710 <HAL_RCC_OscConfig+0xc0>
 800c72e:	e014      	b.n	800c75a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c730:	f7fd f942 	bl	80099b8 <HAL_GetTick>
 800c734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c736:	e008      	b.n	800c74a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c738:	f7fd f93e 	bl	80099b8 <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b64      	cmp	r3, #100	; 0x64
 800c744:	d901      	bls.n	800c74a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e1f3      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c74a:	4b51      	ldr	r3, [pc, #324]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f0      	bne.n	800c738 <HAL_RCC_OscConfig+0xe8>
 800c756:	e000      	b.n	800c75a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d063      	beq.n	800c82e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c766:	4b4a      	ldr	r3, [pc, #296]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	f003 030c 	and.w	r3, r3, #12
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00b      	beq.n	800c78a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c772:	4b47      	ldr	r3, [pc, #284]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c77a:	2b08      	cmp	r3, #8
 800c77c:	d11c      	bne.n	800c7b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c77e:	4b44      	ldr	r3, [pc, #272]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c786:	2b00      	cmp	r3, #0
 800c788:	d116      	bne.n	800c7b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c78a:	4b41      	ldr	r3, [pc, #260]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 0302 	and.w	r3, r3, #2
 800c792:	2b00      	cmp	r3, #0
 800c794:	d005      	beq.n	800c7a2 <HAL_RCC_OscConfig+0x152>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d001      	beq.n	800c7a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e1c7      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7a2:	4b3b      	ldr	r3, [pc, #236]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	4937      	ldr	r1, [pc, #220]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7b6:	e03a      	b.n	800c82e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d020      	beq.n	800c802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7c0:	4b34      	ldr	r3, [pc, #208]	; (800c894 <HAL_RCC_OscConfig+0x244>)
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7c6:	f7fd f8f7 	bl	80099b8 <HAL_GetTick>
 800c7ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7cc:	e008      	b.n	800c7e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c7ce:	f7fd f8f3 	bl	80099b8 <HAL_GetTick>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d901      	bls.n	800c7e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e1a8      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7e0:	4b2b      	ldr	r3, [pc, #172]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f003 0302 	and.w	r3, r3, #2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0f0      	beq.n	800c7ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7ec:	4b28      	ldr	r3, [pc, #160]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	00db      	lsls	r3, r3, #3
 800c7fa:	4925      	ldr	r1, [pc, #148]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	600b      	str	r3, [r1, #0]
 800c800:	e015      	b.n	800c82e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c802:	4b24      	ldr	r3, [pc, #144]	; (800c894 <HAL_RCC_OscConfig+0x244>)
 800c804:	2200      	movs	r2, #0
 800c806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c808:	f7fd f8d6 	bl	80099b8 <HAL_GetTick>
 800c80c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c80e:	e008      	b.n	800c822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c810:	f7fd f8d2 	bl	80099b8 <HAL_GetTick>
 800c814:	4602      	mov	r2, r0
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d901      	bls.n	800c822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c81e:	2303      	movs	r3, #3
 800c820:	e187      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c822:	4b1b      	ldr	r3, [pc, #108]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 0302 	and.w	r3, r3, #2
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1f0      	bne.n	800c810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 0308 	and.w	r3, r3, #8
 800c836:	2b00      	cmp	r3, #0
 800c838:	d036      	beq.n	800c8a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d016      	beq.n	800c870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c842:	4b15      	ldr	r3, [pc, #84]	; (800c898 <HAL_RCC_OscConfig+0x248>)
 800c844:	2201      	movs	r2, #1
 800c846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c848:	f7fd f8b6 	bl	80099b8 <HAL_GetTick>
 800c84c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c84e:	e008      	b.n	800c862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c850:	f7fd f8b2 	bl	80099b8 <HAL_GetTick>
 800c854:	4602      	mov	r2, r0
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d901      	bls.n	800c862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c85e:	2303      	movs	r3, #3
 800c860:	e167      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c862:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <HAL_RCC_OscConfig+0x240>)
 800c864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c866:	f003 0302 	and.w	r3, r3, #2
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d0f0      	beq.n	800c850 <HAL_RCC_OscConfig+0x200>
 800c86e:	e01b      	b.n	800c8a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c870:	4b09      	ldr	r3, [pc, #36]	; (800c898 <HAL_RCC_OscConfig+0x248>)
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c876:	f7fd f89f 	bl	80099b8 <HAL_GetTick>
 800c87a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c87c:	e00e      	b.n	800c89c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c87e:	f7fd f89b 	bl	80099b8 <HAL_GetTick>
 800c882:	4602      	mov	r2, r0
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d907      	bls.n	800c89c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c88c:	2303      	movs	r3, #3
 800c88e:	e150      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
 800c890:	40023800 	.word	0x40023800
 800c894:	42470000 	.word	0x42470000
 800c898:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c89c:	4b88      	ldr	r3, [pc, #544]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c89e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8a0:	f003 0302 	and.w	r3, r3, #2
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1ea      	bne.n	800c87e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0304 	and.w	r3, r3, #4
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f000 8097 	beq.w	800c9e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c8ba:	4b81      	ldr	r3, [pc, #516]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10f      	bne.n	800c8e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	60bb      	str	r3, [r7, #8]
 800c8ca:	4b7d      	ldr	r3, [pc, #500]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ce:	4a7c      	ldr	r2, [pc, #496]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c8d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8d4:	6413      	str	r3, [r2, #64]	; 0x40
 800c8d6:	4b7a      	ldr	r3, [pc, #488]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8de:	60bb      	str	r3, [r7, #8]
 800c8e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8e6:	4b77      	ldr	r3, [pc, #476]	; (800cac4 <HAL_RCC_OscConfig+0x474>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d118      	bne.n	800c924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c8f2:	4b74      	ldr	r3, [pc, #464]	; (800cac4 <HAL_RCC_OscConfig+0x474>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a73      	ldr	r2, [pc, #460]	; (800cac4 <HAL_RCC_OscConfig+0x474>)
 800c8f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8fe:	f7fd f85b 	bl	80099b8 <HAL_GetTick>
 800c902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c904:	e008      	b.n	800c918 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c906:	f7fd f857 	bl	80099b8 <HAL_GetTick>
 800c90a:	4602      	mov	r2, r0
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	1ad3      	subs	r3, r2, r3
 800c910:	2b02      	cmp	r3, #2
 800c912:	d901      	bls.n	800c918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c914:	2303      	movs	r3, #3
 800c916:	e10c      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c918:	4b6a      	ldr	r3, [pc, #424]	; (800cac4 <HAL_RCC_OscConfig+0x474>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c920:	2b00      	cmp	r3, #0
 800c922:	d0f0      	beq.n	800c906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d106      	bne.n	800c93a <HAL_RCC_OscConfig+0x2ea>
 800c92c:	4b64      	ldr	r3, [pc, #400]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c930:	4a63      	ldr	r2, [pc, #396]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c932:	f043 0301 	orr.w	r3, r3, #1
 800c936:	6713      	str	r3, [r2, #112]	; 0x70
 800c938:	e01c      	b.n	800c974 <HAL_RCC_OscConfig+0x324>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	2b05      	cmp	r3, #5
 800c940:	d10c      	bne.n	800c95c <HAL_RCC_OscConfig+0x30c>
 800c942:	4b5f      	ldr	r3, [pc, #380]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c946:	4a5e      	ldr	r2, [pc, #376]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c948:	f043 0304 	orr.w	r3, r3, #4
 800c94c:	6713      	str	r3, [r2, #112]	; 0x70
 800c94e:	4b5c      	ldr	r3, [pc, #368]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c952:	4a5b      	ldr	r2, [pc, #364]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c954:	f043 0301 	orr.w	r3, r3, #1
 800c958:	6713      	str	r3, [r2, #112]	; 0x70
 800c95a:	e00b      	b.n	800c974 <HAL_RCC_OscConfig+0x324>
 800c95c:	4b58      	ldr	r3, [pc, #352]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c960:	4a57      	ldr	r2, [pc, #348]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c962:	f023 0301 	bic.w	r3, r3, #1
 800c966:	6713      	str	r3, [r2, #112]	; 0x70
 800c968:	4b55      	ldr	r3, [pc, #340]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c96c:	4a54      	ldr	r2, [pc, #336]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c96e:	f023 0304 	bic.w	r3, r3, #4
 800c972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d015      	beq.n	800c9a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c97c:	f7fd f81c 	bl	80099b8 <HAL_GetTick>
 800c980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c982:	e00a      	b.n	800c99a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c984:	f7fd f818 	bl	80099b8 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c992:	4293      	cmp	r3, r2
 800c994:	d901      	bls.n	800c99a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c996:	2303      	movs	r3, #3
 800c998:	e0cb      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c99a:	4b49      	ldr	r3, [pc, #292]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c99c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c99e:	f003 0302 	and.w	r3, r3, #2
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d0ee      	beq.n	800c984 <HAL_RCC_OscConfig+0x334>
 800c9a6:	e014      	b.n	800c9d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c9a8:	f7fd f806 	bl	80099b8 <HAL_GetTick>
 800c9ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9ae:	e00a      	b.n	800c9c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9b0:	f7fd f802 	bl	80099b8 <HAL_GetTick>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d901      	bls.n	800c9c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e0b5      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9c6:	4b3e      	ldr	r3, [pc, #248]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ca:	f003 0302 	and.w	r3, r3, #2
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1ee      	bne.n	800c9b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d105      	bne.n	800c9e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9d8:	4b39      	ldr	r3, [pc, #228]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9dc:	4a38      	ldr	r2, [pc, #224]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c9de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 80a1 	beq.w	800cb30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c9ee:	4b34      	ldr	r3, [pc, #208]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	f003 030c 	and.w	r3, r3, #12
 800c9f6:	2b08      	cmp	r3, #8
 800c9f8:	d05c      	beq.n	800cab4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d141      	bne.n	800ca86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca02:	4b31      	ldr	r3, [pc, #196]	; (800cac8 <HAL_RCC_OscConfig+0x478>)
 800ca04:	2200      	movs	r2, #0
 800ca06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca08:	f7fc ffd6 	bl	80099b8 <HAL_GetTick>
 800ca0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca0e:	e008      	b.n	800ca22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca10:	f7fc ffd2 	bl	80099b8 <HAL_GetTick>
 800ca14:	4602      	mov	r2, r0
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	1ad3      	subs	r3, r2, r3
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	d901      	bls.n	800ca22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	e087      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca22:	4b27      	ldr	r3, [pc, #156]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1f0      	bne.n	800ca10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	69da      	ldr	r2, [r3, #28]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	431a      	orrs	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3c:	019b      	lsls	r3, r3, #6
 800ca3e:	431a      	orrs	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca44:	085b      	lsrs	r3, r3, #1
 800ca46:	3b01      	subs	r3, #1
 800ca48:	041b      	lsls	r3, r3, #16
 800ca4a:	431a      	orrs	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca50:	061b      	lsls	r3, r3, #24
 800ca52:	491b      	ldr	r1, [pc, #108]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800ca54:	4313      	orrs	r3, r2
 800ca56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca58:	4b1b      	ldr	r3, [pc, #108]	; (800cac8 <HAL_RCC_OscConfig+0x478>)
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca5e:	f7fc ffab 	bl	80099b8 <HAL_GetTick>
 800ca62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca64:	e008      	b.n	800ca78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca66:	f7fc ffa7 	bl	80099b8 <HAL_GetTick>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d901      	bls.n	800ca78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ca74:	2303      	movs	r3, #3
 800ca76:	e05c      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca78:	4b11      	ldr	r3, [pc, #68]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d0f0      	beq.n	800ca66 <HAL_RCC_OscConfig+0x416>
 800ca84:	e054      	b.n	800cb30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca86:	4b10      	ldr	r3, [pc, #64]	; (800cac8 <HAL_RCC_OscConfig+0x478>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca8c:	f7fc ff94 	bl	80099b8 <HAL_GetTick>
 800ca90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca92:	e008      	b.n	800caa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca94:	f7fc ff90 	bl	80099b8 <HAL_GetTick>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d901      	bls.n	800caa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e045      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800caa6:	4b06      	ldr	r3, [pc, #24]	; (800cac0 <HAL_RCC_OscConfig+0x470>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1f0      	bne.n	800ca94 <HAL_RCC_OscConfig+0x444>
 800cab2:	e03d      	b.n	800cb30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	699b      	ldr	r3, [r3, #24]
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d107      	bne.n	800cacc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cabc:	2301      	movs	r3, #1
 800cabe:	e038      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
 800cac0:	40023800 	.word	0x40023800
 800cac4:	40007000 	.word	0x40007000
 800cac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cacc:	4b1b      	ldr	r3, [pc, #108]	; (800cb3c <HAL_RCC_OscConfig+0x4ec>)
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d028      	beq.n	800cb2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d121      	bne.n	800cb2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d11a      	bne.n	800cb2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cafc:	4013      	ands	r3, r2
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cb02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d111      	bne.n	800cb2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb12:	085b      	lsrs	r3, r3, #1
 800cb14:	3b01      	subs	r3, #1
 800cb16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d107      	bne.n	800cb2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d001      	beq.n	800cb30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e000      	b.n	800cb32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cb30:	2300      	movs	r3, #0
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3718      	adds	r7, #24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	40023800 	.word	0x40023800

0800cb40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d101      	bne.n	800cb54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e0cc      	b.n	800ccee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cb54:	4b68      	ldr	r3, [pc, #416]	; (800ccf8 <HAL_RCC_ClockConfig+0x1b8>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 0307 	and.w	r3, r3, #7
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d90c      	bls.n	800cb7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb62:	4b65      	ldr	r3, [pc, #404]	; (800ccf8 <HAL_RCC_ClockConfig+0x1b8>)
 800cb64:	683a      	ldr	r2, [r7, #0]
 800cb66:	b2d2      	uxtb	r2, r2
 800cb68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb6a:	4b63      	ldr	r3, [pc, #396]	; (800ccf8 <HAL_RCC_ClockConfig+0x1b8>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 0307 	and.w	r3, r3, #7
 800cb72:	683a      	ldr	r2, [r7, #0]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d001      	beq.n	800cb7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e0b8      	b.n	800ccee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 0302 	and.w	r3, r3, #2
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d020      	beq.n	800cbca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 0304 	and.w	r3, r3, #4
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d005      	beq.n	800cba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cb94:	4b59      	ldr	r3, [pc, #356]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	4a58      	ldr	r2, [pc, #352]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cb9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cb9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 0308 	and.w	r3, r3, #8
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d005      	beq.n	800cbb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cbac:	4b53      	ldr	r3, [pc, #332]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	4a52      	ldr	r2, [pc, #328]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cbb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cbb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cbb8:	4b50      	ldr	r3, [pc, #320]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	494d      	ldr	r1, [pc, #308]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d044      	beq.n	800cc60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d107      	bne.n	800cbee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbde:	4b47      	ldr	r3, [pc, #284]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d119      	bne.n	800cc1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e07f      	b.n	800ccee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d003      	beq.n	800cbfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d107      	bne.n	800cc0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbfe:	4b3f      	ldr	r3, [pc, #252]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d109      	bne.n	800cc1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e06f      	b.n	800ccee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc0e:	4b3b      	ldr	r3, [pc, #236]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 0302 	and.w	r3, r3, #2
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e067      	b.n	800ccee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc1e:	4b37      	ldr	r3, [pc, #220]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f023 0203 	bic.w	r2, r3, #3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	4934      	ldr	r1, [pc, #208]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc30:	f7fc fec2 	bl	80099b8 <HAL_GetTick>
 800cc34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc36:	e00a      	b.n	800cc4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc38:	f7fc febe 	bl	80099b8 <HAL_GetTick>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d901      	bls.n	800cc4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	e04f      	b.n	800ccee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc4e:	4b2b      	ldr	r3, [pc, #172]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f003 020c 	and.w	r2, r3, #12
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d1eb      	bne.n	800cc38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cc60:	4b25      	ldr	r3, [pc, #148]	; (800ccf8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f003 0307 	and.w	r3, r3, #7
 800cc68:	683a      	ldr	r2, [r7, #0]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d20c      	bcs.n	800cc88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc6e:	4b22      	ldr	r3, [pc, #136]	; (800ccf8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc70:	683a      	ldr	r2, [r7, #0]
 800cc72:	b2d2      	uxtb	r2, r2
 800cc74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc76:	4b20      	ldr	r3, [pc, #128]	; (800ccf8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0307 	and.w	r3, r3, #7
 800cc7e:	683a      	ldr	r2, [r7, #0]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d001      	beq.n	800cc88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e032      	b.n	800ccee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0304 	and.w	r3, r3, #4
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d008      	beq.n	800cca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc94:	4b19      	ldr	r3, [pc, #100]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	4916      	ldr	r1, [pc, #88]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800cca2:	4313      	orrs	r3, r2
 800cca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f003 0308 	and.w	r3, r3, #8
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d009      	beq.n	800ccc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ccb2:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	691b      	ldr	r3, [r3, #16]
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	490e      	ldr	r1, [pc, #56]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ccc6:	f000 f821 	bl	800cd0c <HAL_RCC_GetSysClockFreq>
 800ccca:	4602      	mov	r2, r0
 800cccc:	4b0b      	ldr	r3, [pc, #44]	; (800ccfc <HAL_RCC_ClockConfig+0x1bc>)
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	091b      	lsrs	r3, r3, #4
 800ccd2:	f003 030f 	and.w	r3, r3, #15
 800ccd6:	490a      	ldr	r1, [pc, #40]	; (800cd00 <HAL_RCC_ClockConfig+0x1c0>)
 800ccd8:	5ccb      	ldrb	r3, [r1, r3]
 800ccda:	fa22 f303 	lsr.w	r3, r2, r3
 800ccde:	4a09      	ldr	r2, [pc, #36]	; (800cd04 <HAL_RCC_ClockConfig+0x1c4>)
 800cce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cce2:	4b09      	ldr	r3, [pc, #36]	; (800cd08 <HAL_RCC_ClockConfig+0x1c8>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7f7 f956 	bl	8003f98 <HAL_InitTick>

  return HAL_OK;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	40023c00 	.word	0x40023c00
 800ccfc:	40023800 	.word	0x40023800
 800cd00:	08017874 	.word	0x08017874
 800cd04:	20000000 	.word	0x20000000
 800cd08:	20000004 	.word	0x20000004

0800cd0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd10:	b094      	sub	sp, #80	; 0x50
 800cd12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cd14:	2300      	movs	r3, #0
 800cd16:	647b      	str	r3, [r7, #68]	; 0x44
 800cd18:	2300      	movs	r3, #0
 800cd1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800cd20:	2300      	movs	r3, #0
 800cd22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd24:	4b79      	ldr	r3, [pc, #484]	; (800cf0c <HAL_RCC_GetSysClockFreq+0x200>)
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	f003 030c 	and.w	r3, r3, #12
 800cd2c:	2b08      	cmp	r3, #8
 800cd2e:	d00d      	beq.n	800cd4c <HAL_RCC_GetSysClockFreq+0x40>
 800cd30:	2b08      	cmp	r3, #8
 800cd32:	f200 80e1 	bhi.w	800cef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d002      	beq.n	800cd40 <HAL_RCC_GetSysClockFreq+0x34>
 800cd3a:	2b04      	cmp	r3, #4
 800cd3c:	d003      	beq.n	800cd46 <HAL_RCC_GetSysClockFreq+0x3a>
 800cd3e:	e0db      	b.n	800cef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd40:	4b73      	ldr	r3, [pc, #460]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x204>)
 800cd42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800cd44:	e0db      	b.n	800cefe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd46:	4b72      	ldr	r3, [pc, #456]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x204>)
 800cd48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cd4a:	e0d8      	b.n	800cefe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd4c:	4b6f      	ldr	r3, [pc, #444]	; (800cf0c <HAL_RCC_GetSysClockFreq+0x200>)
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd56:	4b6d      	ldr	r3, [pc, #436]	; (800cf0c <HAL_RCC_GetSysClockFreq+0x200>)
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d063      	beq.n	800ce2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd62:	4b6a      	ldr	r3, [pc, #424]	; (800cf0c <HAL_RCC_GetSysClockFreq+0x200>)
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	099b      	lsrs	r3, r3, #6
 800cd68:	2200      	movs	r2, #0
 800cd6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd74:	633b      	str	r3, [r7, #48]	; 0x30
 800cd76:	2300      	movs	r3, #0
 800cd78:	637b      	str	r3, [r7, #52]	; 0x34
 800cd7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cd7e:	4622      	mov	r2, r4
 800cd80:	462b      	mov	r3, r5
 800cd82:	f04f 0000 	mov.w	r0, #0
 800cd86:	f04f 0100 	mov.w	r1, #0
 800cd8a:	0159      	lsls	r1, r3, #5
 800cd8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cd90:	0150      	lsls	r0, r2, #5
 800cd92:	4602      	mov	r2, r0
 800cd94:	460b      	mov	r3, r1
 800cd96:	4621      	mov	r1, r4
 800cd98:	1a51      	subs	r1, r2, r1
 800cd9a:	6139      	str	r1, [r7, #16]
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	eb63 0301 	sbc.w	r3, r3, r1
 800cda2:	617b      	str	r3, [r7, #20]
 800cda4:	f04f 0200 	mov.w	r2, #0
 800cda8:	f04f 0300 	mov.w	r3, #0
 800cdac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cdb0:	4659      	mov	r1, fp
 800cdb2:	018b      	lsls	r3, r1, #6
 800cdb4:	4651      	mov	r1, sl
 800cdb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cdba:	4651      	mov	r1, sl
 800cdbc:	018a      	lsls	r2, r1, #6
 800cdbe:	4651      	mov	r1, sl
 800cdc0:	ebb2 0801 	subs.w	r8, r2, r1
 800cdc4:	4659      	mov	r1, fp
 800cdc6:	eb63 0901 	sbc.w	r9, r3, r1
 800cdca:	f04f 0200 	mov.w	r2, #0
 800cdce:	f04f 0300 	mov.w	r3, #0
 800cdd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cdd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cdda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cdde:	4690      	mov	r8, r2
 800cde0:	4699      	mov	r9, r3
 800cde2:	4623      	mov	r3, r4
 800cde4:	eb18 0303 	adds.w	r3, r8, r3
 800cde8:	60bb      	str	r3, [r7, #8]
 800cdea:	462b      	mov	r3, r5
 800cdec:	eb49 0303 	adc.w	r3, r9, r3
 800cdf0:	60fb      	str	r3, [r7, #12]
 800cdf2:	f04f 0200 	mov.w	r2, #0
 800cdf6:	f04f 0300 	mov.w	r3, #0
 800cdfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cdfe:	4629      	mov	r1, r5
 800ce00:	028b      	lsls	r3, r1, #10
 800ce02:	4621      	mov	r1, r4
 800ce04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ce08:	4621      	mov	r1, r4
 800ce0a:	028a      	lsls	r2, r1, #10
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce12:	2200      	movs	r2, #0
 800ce14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ce1c:	f7f3 fec4 	bl	8000ba8 <__aeabi_uldivmod>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	4613      	mov	r3, r2
 800ce26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce28:	e058      	b.n	800cedc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce2a:	4b38      	ldr	r3, [pc, #224]	; (800cf0c <HAL_RCC_GetSysClockFreq+0x200>)
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	099b      	lsrs	r3, r3, #6
 800ce30:	2200      	movs	r2, #0
 800ce32:	4618      	mov	r0, r3
 800ce34:	4611      	mov	r1, r2
 800ce36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ce3a:	623b      	str	r3, [r7, #32]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ce40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ce44:	4642      	mov	r2, r8
 800ce46:	464b      	mov	r3, r9
 800ce48:	f04f 0000 	mov.w	r0, #0
 800ce4c:	f04f 0100 	mov.w	r1, #0
 800ce50:	0159      	lsls	r1, r3, #5
 800ce52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce56:	0150      	lsls	r0, r2, #5
 800ce58:	4602      	mov	r2, r0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	4641      	mov	r1, r8
 800ce5e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ce62:	4649      	mov	r1, r9
 800ce64:	eb63 0b01 	sbc.w	fp, r3, r1
 800ce68:	f04f 0200 	mov.w	r2, #0
 800ce6c:	f04f 0300 	mov.w	r3, #0
 800ce70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ce74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ce78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ce7c:	ebb2 040a 	subs.w	r4, r2, sl
 800ce80:	eb63 050b 	sbc.w	r5, r3, fp
 800ce84:	f04f 0200 	mov.w	r2, #0
 800ce88:	f04f 0300 	mov.w	r3, #0
 800ce8c:	00eb      	lsls	r3, r5, #3
 800ce8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce92:	00e2      	lsls	r2, r4, #3
 800ce94:	4614      	mov	r4, r2
 800ce96:	461d      	mov	r5, r3
 800ce98:	4643      	mov	r3, r8
 800ce9a:	18e3      	adds	r3, r4, r3
 800ce9c:	603b      	str	r3, [r7, #0]
 800ce9e:	464b      	mov	r3, r9
 800cea0:	eb45 0303 	adc.w	r3, r5, r3
 800cea4:	607b      	str	r3, [r7, #4]
 800cea6:	f04f 0200 	mov.w	r2, #0
 800ceaa:	f04f 0300 	mov.w	r3, #0
 800ceae:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ceb2:	4629      	mov	r1, r5
 800ceb4:	028b      	lsls	r3, r1, #10
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cebc:	4621      	mov	r1, r4
 800cebe:	028a      	lsls	r2, r1, #10
 800cec0:	4610      	mov	r0, r2
 800cec2:	4619      	mov	r1, r3
 800cec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cec6:	2200      	movs	r2, #0
 800cec8:	61bb      	str	r3, [r7, #24]
 800ceca:	61fa      	str	r2, [r7, #28]
 800cecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ced0:	f7f3 fe6a 	bl	8000ba8 <__aeabi_uldivmod>
 800ced4:	4602      	mov	r2, r0
 800ced6:	460b      	mov	r3, r1
 800ced8:	4613      	mov	r3, r2
 800ceda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cedc:	4b0b      	ldr	r3, [pc, #44]	; (800cf0c <HAL_RCC_GetSysClockFreq+0x200>)
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	0c1b      	lsrs	r3, r3, #16
 800cee2:	f003 0303 	and.w	r3, r3, #3
 800cee6:	3301      	adds	r3, #1
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800ceec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ceee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cef6:	e002      	b.n	800cefe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cef8:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <HAL_RCC_GetSysClockFreq+0x204>)
 800cefa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cefc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cefe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3750      	adds	r7, #80	; 0x50
 800cf04:	46bd      	mov	sp, r7
 800cf06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf0a:	bf00      	nop
 800cf0c:	40023800 	.word	0x40023800
 800cf10:	00f42400 	.word	0x00f42400

0800cf14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf14:	b480      	push	{r7}
 800cf16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf18:	4b03      	ldr	r3, [pc, #12]	; (800cf28 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	20000000 	.word	0x20000000

0800cf2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cf30:	f7ff fff0 	bl	800cf14 <HAL_RCC_GetHCLKFreq>
 800cf34:	4602      	mov	r2, r0
 800cf36:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	0a9b      	lsrs	r3, r3, #10
 800cf3c:	f003 0307 	and.w	r3, r3, #7
 800cf40:	4903      	ldr	r1, [pc, #12]	; (800cf50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf42:	5ccb      	ldrb	r3, [r1, r3]
 800cf44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	40023800 	.word	0x40023800
 800cf50:	08017884 	.word	0x08017884

0800cf54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cf58:	f7ff ffdc 	bl	800cf14 <HAL_RCC_GetHCLKFreq>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	0b5b      	lsrs	r3, r3, #13
 800cf64:	f003 0307 	and.w	r3, r3, #7
 800cf68:	4903      	ldr	r1, [pc, #12]	; (800cf78 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf6a:	5ccb      	ldrb	r3, [r1, r3]
 800cf6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	40023800 	.word	0x40023800
 800cf78:	08017884 	.word	0x08017884

0800cf7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	220f      	movs	r2, #15
 800cf8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cf8c:	4b12      	ldr	r3, [pc, #72]	; (800cfd8 <HAL_RCC_GetClockConfig+0x5c>)
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	f003 0203 	and.w	r2, r3, #3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cf98:	4b0f      	ldr	r3, [pc, #60]	; (800cfd8 <HAL_RCC_GetClockConfig+0x5c>)
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cfa4:	4b0c      	ldr	r3, [pc, #48]	; (800cfd8 <HAL_RCC_GetClockConfig+0x5c>)
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cfb0:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <HAL_RCC_GetClockConfig+0x5c>)
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	08db      	lsrs	r3, r3, #3
 800cfb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cfbe:	4b07      	ldr	r3, [pc, #28]	; (800cfdc <HAL_RCC_GetClockConfig+0x60>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f003 0207 	and.w	r2, r3, #7
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	601a      	str	r2, [r3, #0]
}
 800cfca:	bf00      	nop
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	40023800 	.word	0x40023800
 800cfdc:	40023c00 	.word	0x40023c00

0800cfe0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e022      	b.n	800d038 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d105      	bne.n	800d00a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7f6 fbf9 	bl	80037fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2203      	movs	r2, #3
 800d00e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f814 	bl	800d040 <HAL_SD_InitCard>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	e00a      	b.n	800d038 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d040:	b5b0      	push	{r4, r5, r7, lr}
 800d042:	b08e      	sub	sp, #56	; 0x38
 800d044:	af04      	add	r7, sp, #16
 800d046:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d048:	2300      	movs	r3, #0
 800d04a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d04c:	2300      	movs	r3, #0
 800d04e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d050:	2300      	movs	r3, #0
 800d052:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d054:	2300      	movs	r3, #0
 800d056:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d058:	2300      	movs	r3, #0
 800d05a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d05c:	2376      	movs	r3, #118	; 0x76
 800d05e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681d      	ldr	r5, [r3, #0]
 800d064:	466c      	mov	r4, sp
 800d066:	f107 0314 	add.w	r3, r7, #20
 800d06a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d06e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d072:	f107 0308 	add.w	r3, r7, #8
 800d076:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d078:	4628      	mov	r0, r5
 800d07a:	f003 fd35 	bl	8010ae8 <SDIO_Init>
 800d07e:	4603      	mov	r3, r0
 800d080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d001      	beq.n	800d090 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	e04f      	b.n	800d130 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d090:	4b29      	ldr	r3, [pc, #164]	; (800d138 <HAL_SD_InitCard+0xf8>)
 800d092:	2200      	movs	r2, #0
 800d094:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f003 fd5c 	bl	8010b58 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d0a0:	4b25      	ldr	r3, [pc, #148]	; (800d138 <HAL_SD_InitCard+0xf8>)
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d0a6:	2002      	movs	r0, #2
 800d0a8:	f7fc fc92 	bl	80099d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 fb53 	bl	800d758 <SD_PowerON>
 800d0b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00b      	beq.n	800d0d2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	431a      	orrs	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e02e      	b.n	800d130 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fa72 	bl	800d5bc <SD_InitCard>
 800d0d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0da:	6a3b      	ldr	r3, [r7, #32]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00b      	beq.n	800d0f8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e01b      	b.n	800d130 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d100:	4618      	mov	r0, r3
 800d102:	f003 fdbb 	bl	8010c7c <SDMMC_CmdBlockLength>
 800d106:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00f      	beq.n	800d12e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a0a      	ldr	r2, [pc, #40]	; (800d13c <HAL_SD_InitCard+0xfc>)
 800d114:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	431a      	orrs	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2201      	movs	r2, #1
 800d126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e000      	b.n	800d130 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3728      	adds	r7, #40	; 0x28
 800d134:	46bd      	mov	sp, r7
 800d136:	bdb0      	pop	{r4, r5, r7, pc}
 800d138:	422580a0 	.word	0x422580a0
 800d13c:	004005ff 	.word	0x004005ff

0800d140 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d14e:	0f9b      	lsrs	r3, r3, #30
 800d150:	b2da      	uxtb	r2, r3
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d15a:	0e9b      	lsrs	r3, r3, #26
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	f003 030f 	and.w	r3, r3, #15
 800d162:	b2da      	uxtb	r2, r3
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d16c:	0e1b      	lsrs	r3, r3, #24
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	f003 0303 	and.w	r3, r3, #3
 800d174:	b2da      	uxtb	r2, r3
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d17e:	0c1b      	lsrs	r3, r3, #16
 800d180:	b2da      	uxtb	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d18a:	0a1b      	lsrs	r3, r3, #8
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d196:	b2da      	uxtb	r2, r3
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1a0:	0d1b      	lsrs	r3, r3, #20
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1ac:	0c1b      	lsrs	r3, r3, #16
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	f003 030f 	and.w	r3, r3, #15
 800d1b4:	b2da      	uxtb	r2, r3
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1be:	0bdb      	lsrs	r3, r3, #15
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	f003 0301 	and.w	r3, r3, #1
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1d0:	0b9b      	lsrs	r3, r3, #14
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	b2da      	uxtb	r2, r3
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1e2:	0b5b      	lsrs	r3, r3, #13
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1f4:	0b1b      	lsrs	r3, r3, #12
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2200      	movs	r2, #0
 800d206:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d163      	bne.n	800d2d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d214:	009a      	lsls	r2, r3, #2
 800d216:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d21a:	4013      	ands	r3, r2
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d220:	0f92      	lsrs	r2, r2, #30
 800d222:	431a      	orrs	r2, r3
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d22c:	0edb      	lsrs	r3, r3, #27
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	f003 0307 	and.w	r3, r3, #7
 800d234:	b2da      	uxtb	r2, r3
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d23e:	0e1b      	lsrs	r3, r3, #24
 800d240:	b2db      	uxtb	r3, r3
 800d242:	f003 0307 	and.w	r3, r3, #7
 800d246:	b2da      	uxtb	r2, r3
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d250:	0d5b      	lsrs	r3, r3, #21
 800d252:	b2db      	uxtb	r3, r3
 800d254:	f003 0307 	and.w	r3, r3, #7
 800d258:	b2da      	uxtb	r2, r3
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d262:	0c9b      	lsrs	r3, r3, #18
 800d264:	b2db      	uxtb	r3, r3
 800d266:	f003 0307 	and.w	r3, r3, #7
 800d26a:	b2da      	uxtb	r2, r3
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d274:	0bdb      	lsrs	r3, r3, #15
 800d276:	b2db      	uxtb	r3, r3
 800d278:	f003 0307 	and.w	r3, r3, #7
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	1c5a      	adds	r2, r3, #1
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	7e1b      	ldrb	r3, [r3, #24]
 800d290:	b2db      	uxtb	r3, r3
 800d292:	f003 0307 	and.w	r3, r3, #7
 800d296:	3302      	adds	r3, #2
 800d298:	2201      	movs	r2, #1
 800d29a:	fa02 f303 	lsl.w	r3, r2, r3
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d2a2:	fb03 f202 	mul.w	r2, r3, r2
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	7a1b      	ldrb	r3, [r3, #8]
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	f003 030f 	and.w	r3, r3, #15
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	409a      	lsls	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d2c4:	0a52      	lsrs	r2, r2, #9
 800d2c6:	fb03 f202 	mul.w	r2, r3, r2
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2d4:	661a      	str	r2, [r3, #96]	; 0x60
 800d2d6:	e031      	b.n	800d33c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d11d      	bne.n	800d31c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2e4:	041b      	lsls	r3, r3, #16
 800d2e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2ee:	0c1b      	lsrs	r3, r3, #16
 800d2f0:	431a      	orrs	r2, r3
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	029a      	lsls	r2, r3, #10
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d310:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	661a      	str	r2, [r3, #96]	; 0x60
 800d31a:	e00f      	b.n	800d33c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a58      	ldr	r2, [pc, #352]	; (800d484 <HAL_SD_GetCardCSD+0x344>)
 800d322:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d328:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	e09d      	b.n	800d478 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d340:	0b9b      	lsrs	r3, r3, #14
 800d342:	b2db      	uxtb	r3, r3
 800d344:	f003 0301 	and.w	r3, r3, #1
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d352:	09db      	lsrs	r3, r3, #7
 800d354:	b2db      	uxtb	r3, r3
 800d356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d374:	0fdb      	lsrs	r3, r3, #31
 800d376:	b2da      	uxtb	r2, r3
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d380:	0f5b      	lsrs	r3, r3, #29
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f003 0303 	and.w	r3, r3, #3
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d392:	0e9b      	lsrs	r3, r3, #26
 800d394:	b2db      	uxtb	r3, r3
 800d396:	f003 0307 	and.w	r3, r3, #7
 800d39a:	b2da      	uxtb	r2, r3
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3a4:	0d9b      	lsrs	r3, r3, #22
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	f003 030f 	and.w	r3, r3, #15
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b6:	0d5b      	lsrs	r3, r3, #21
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3d2:	0c1b      	lsrs	r3, r3, #16
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3e6:	0bdb      	lsrs	r3, r3, #15
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fa:	0b9b      	lsrs	r3, r3, #14
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	f003 0301 	and.w	r3, r3, #1
 800d402:	b2da      	uxtb	r2, r3
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d40e:	0b5b      	lsrs	r3, r3, #13
 800d410:	b2db      	uxtb	r3, r3
 800d412:	f003 0301 	and.w	r3, r3, #1
 800d416:	b2da      	uxtb	r2, r3
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d422:	0b1b      	lsrs	r3, r3, #12
 800d424:	b2db      	uxtb	r3, r3
 800d426:	f003 0301 	and.w	r3, r3, #1
 800d42a:	b2da      	uxtb	r2, r3
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d436:	0a9b      	lsrs	r3, r3, #10
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	f003 0303 	and.w	r3, r3, #3
 800d43e:	b2da      	uxtb	r2, r3
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44a:	0a1b      	lsrs	r3, r3, #8
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	f003 0303 	and.w	r3, r3, #3
 800d452:	b2da      	uxtb	r2, r3
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45e:	085b      	lsrs	r3, r3, #1
 800d460:	b2db      	uxtb	r3, r3
 800d462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d466:	b2da      	uxtb	r2, r3
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	2201      	movs	r2, #1
 800d472:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	004005ff 	.word	0x004005ff

0800d488 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d488:	b5b0      	push	{r4, r5, r7, lr}
 800d48a:	b08e      	sub	sp, #56	; 0x38
 800d48c:	af04      	add	r7, sp, #16
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2203      	movs	r2, #3
 800d49c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4a4:	2b03      	cmp	r3, #3
 800d4a6:	d02e      	beq.n	800d506 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4ae:	d106      	bne.n	800d4be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	639a      	str	r2, [r3, #56]	; 0x38
 800d4bc:	e029      	b.n	800d512 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4c4:	d10a      	bne.n	800d4dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f9d4 	bl	800d874 <SD_WideBus_Enable>
 800d4cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4d2:	6a3b      	ldr	r3, [r7, #32]
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	639a      	str	r2, [r3, #56]	; 0x38
 800d4da:	e01a      	b.n	800d512 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10a      	bne.n	800d4f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fa11 	bl	800d90a <SD_WideBus_Disable>
 800d4e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	431a      	orrs	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	639a      	str	r2, [r3, #56]	; 0x38
 800d4f6:	e00c      	b.n	800d512 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	639a      	str	r2, [r3, #56]	; 0x38
 800d504:	e005      	b.n	800d512 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00b      	beq.n	800d532 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4a26      	ldr	r2, [pc, #152]	; (800d5b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d520:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d530:	e01f      	b.n	800d572 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	695b      	ldr	r3, [r3, #20]
 800d54c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	699b      	ldr	r3, [r3, #24]
 800d552:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681d      	ldr	r5, [r3, #0]
 800d558:	466c      	mov	r4, sp
 800d55a:	f107 0314 	add.w	r3, r7, #20
 800d55e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d566:	f107 0308 	add.w	r3, r7, #8
 800d56a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d56c:	4628      	mov	r0, r5
 800d56e:	f003 fabb 	bl	8010ae8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d57a:	4618      	mov	r0, r3
 800d57c:	f003 fb7e 	bl	8010c7c <SDMMC_CmdBlockLength>
 800d580:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00c      	beq.n	800d5a2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a0a      	ldr	r2, [pc, #40]	; (800d5b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	431a      	orrs	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3728      	adds	r7, #40	; 0x28
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bdb0      	pop	{r4, r5, r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	004005ff 	.word	0x004005ff

0800d5bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d5bc:	b5b0      	push	{r4, r5, r7, lr}
 800d5be:	b094      	sub	sp, #80	; 0x50
 800d5c0:	af04      	add	r7, sp, #16
 800d5c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f003 fad1 	bl	8010b74 <SDIO_GetPowerState>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d5d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d5dc:	e0b8      	b.n	800d750 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d02f      	beq.n	800d646 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f003 fc50 	bl	8010e90 <SDMMC_CmdSendCID>
 800d5f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <SD_InitCard+0x40>
    {
      return errorstate;
 800d5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fa:	e0a9      	b.n	800d750 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2100      	movs	r1, #0
 800d602:	4618      	mov	r0, r3
 800d604:	f003 fafb 	bl	8010bfe <SDIO_GetResponse>
 800d608:	4602      	mov	r2, r0
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2104      	movs	r1, #4
 800d614:	4618      	mov	r0, r3
 800d616:	f003 faf2 	bl	8010bfe <SDIO_GetResponse>
 800d61a:	4602      	mov	r2, r0
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2108      	movs	r1, #8
 800d626:	4618      	mov	r0, r3
 800d628:	f003 fae9 	bl	8010bfe <SDIO_GetResponse>
 800d62c:	4602      	mov	r2, r0
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	210c      	movs	r1, #12
 800d638:	4618      	mov	r0, r3
 800d63a:	f003 fae0 	bl	8010bfe <SDIO_GetResponse>
 800d63e:	4602      	mov	r2, r0
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d00d      	beq.n	800d66a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f107 020e 	add.w	r2, r7, #14
 800d656:	4611      	mov	r1, r2
 800d658:	4618      	mov	r0, r3
 800d65a:	f003 fc56 	bl	8010f0a <SDMMC_CmdSetRelAdd>
 800d65e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <SD_InitCard+0xae>
    {
      return errorstate;
 800d666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d668:	e072      	b.n	800d750 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d036      	beq.n	800d6e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d672:	89fb      	ldrh	r3, [r7, #14]
 800d674:	461a      	mov	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d682:	041b      	lsls	r3, r3, #16
 800d684:	4619      	mov	r1, r3
 800d686:	4610      	mov	r0, r2
 800d688:	f003 fc20 	bl	8010ecc <SDMMC_CmdSendCSD>
 800d68c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d696:	e05b      	b.n	800d750 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2100      	movs	r1, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f003 faad 	bl	8010bfe <SDIO_GetResponse>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2104      	movs	r1, #4
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f003 faa4 	bl	8010bfe <SDIO_GetResponse>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2108      	movs	r1, #8
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f003 fa9b 	bl	8010bfe <SDIO_GetResponse>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	210c      	movs	r1, #12
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f003 fa92 	bl	8010bfe <SDIO_GetResponse>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2104      	movs	r1, #4
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f003 fa89 	bl	8010bfe <SDIO_GetResponse>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	0d1a      	lsrs	r2, r3, #20
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d6f4:	f107 0310 	add.w	r3, r7, #16
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7ff fd20 	bl	800d140 <HAL_SD_GetCardCSD>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d002      	beq.n	800d70c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d70a:	e021      	b.n	800d750 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6819      	ldr	r1, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d714:	041b      	lsls	r3, r3, #16
 800d716:	2200      	movs	r2, #0
 800d718:	461c      	mov	r4, r3
 800d71a:	4615      	mov	r5, r2
 800d71c:	4622      	mov	r2, r4
 800d71e:	462b      	mov	r3, r5
 800d720:	4608      	mov	r0, r1
 800d722:	f003 facd 	bl	8010cc0 <SDMMC_CmdSelDesel>
 800d726:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <SD_InitCard+0x176>
  {
    return errorstate;
 800d72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d730:	e00e      	b.n	800d750 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681d      	ldr	r5, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	466c      	mov	r4, sp
 800d73a:	f103 0210 	add.w	r2, r3, #16
 800d73e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d744:	3304      	adds	r3, #4
 800d746:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d748:	4628      	mov	r0, r5
 800d74a:	f003 f9cd 	bl	8010ae8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3740      	adds	r7, #64	; 0x40
 800d754:	46bd      	mov	sp, r7
 800d756:	bdb0      	pop	{r4, r5, r7, pc}

0800d758 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d760:	2300      	movs	r3, #0
 800d762:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d764:	2300      	movs	r3, #0
 800d766:	617b      	str	r3, [r7, #20]
 800d768:	2300      	movs	r3, #0
 800d76a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4618      	mov	r0, r3
 800d772:	f003 fac8 	bl	8010d06 <SDMMC_CmdGoIdleState>
 800d776:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	e072      	b.n	800d868 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4618      	mov	r0, r3
 800d788:	f003 fadb 	bl	8010d42 <SDMMC_CmdOperCond>
 800d78c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00d      	beq.n	800d7b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f003 fab1 	bl	8010d06 <SDMMC_CmdGoIdleState>
 800d7a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d004      	beq.n	800d7b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	e05b      	b.n	800d868 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d137      	bne.n	800d82e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f003 fadb 	bl	8010d80 <SDMMC_CmdAppCommand>
 800d7ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d02d      	beq.n	800d82e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7d6:	e047      	b.n	800d868 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f003 face 	bl	8010d80 <SDMMC_CmdAppCommand>
 800d7e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d001      	beq.n	800d7f0 <SD_PowerON+0x98>
    {
      return errorstate;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	e03b      	b.n	800d868 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	491e      	ldr	r1, [pc, #120]	; (800d870 <SD_PowerON+0x118>)
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f003 fae4 	bl	8010dc4 <SDMMC_CmdAppOperCommand>
 800d7fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d002      	beq.n	800d80a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d804:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d808:	e02e      	b.n	800d868 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2100      	movs	r1, #0
 800d810:	4618      	mov	r0, r3
 800d812:	f003 f9f4 	bl	8010bfe <SDIO_GetResponse>
 800d816:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	0fdb      	lsrs	r3, r3, #31
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d101      	bne.n	800d824 <SD_PowerON+0xcc>
 800d820:	2301      	movs	r3, #1
 800d822:	e000      	b.n	800d826 <SD_PowerON+0xce>
 800d824:	2300      	movs	r3, #0
 800d826:	613b      	str	r3, [r7, #16]

    count++;
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	3301      	adds	r3, #1
 800d82c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d834:	4293      	cmp	r3, r2
 800d836:	d802      	bhi.n	800d83e <SD_PowerON+0xe6>
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d0cc      	beq.n	800d7d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d844:	4293      	cmp	r3, r2
 800d846:	d902      	bls.n	800d84e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d84c:	e00c      	b.n	800d868 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d003      	beq.n	800d860 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	645a      	str	r2, [r3, #68]	; 0x44
 800d85e:	e002      	b.n	800d866 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2200      	movs	r2, #0
 800d864:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3718      	adds	r7, #24
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	c1100000 	.word	0xc1100000

0800d874 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b086      	sub	sp, #24
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d87c:	2300      	movs	r3, #0
 800d87e:	60fb      	str	r3, [r7, #12]
 800d880:	2300      	movs	r3, #0
 800d882:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2100      	movs	r1, #0
 800d88a:	4618      	mov	r0, r3
 800d88c:	f003 f9b7 	bl	8010bfe <SDIO_GetResponse>
 800d890:	4603      	mov	r3, r0
 800d892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d89a:	d102      	bne.n	800d8a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d89c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8a0:	e02f      	b.n	800d902 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d8a2:	f107 030c 	add.w	r3, r7, #12
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f879 	bl	800d9a0 <SD_FindSCR>
 800d8ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d001      	beq.n	800d8ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	e023      	b.n	800d902 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d01c      	beq.n	800d8fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8cc:	041b      	lsls	r3, r3, #16
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	4610      	mov	r0, r2
 800d8d2:	f003 fa55 	bl	8010d80 <SDMMC_CmdAppCommand>
 800d8d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d001      	beq.n	800d8e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	e00f      	b.n	800d902 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2102      	movs	r1, #2
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f003 fa8e 	bl	8010e0a <SDMMC_CmdBusWidth>
 800d8ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d001      	beq.n	800d8fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	e003      	b.n	800d902 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	e001      	b.n	800d902 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d8fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d902:	4618      	mov	r0, r3
 800d904:	3718      	adds	r7, #24
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b086      	sub	sp, #24
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d912:	2300      	movs	r3, #0
 800d914:	60fb      	str	r3, [r7, #12]
 800d916:	2300      	movs	r3, #0
 800d918:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2100      	movs	r1, #0
 800d920:	4618      	mov	r0, r3
 800d922:	f003 f96c 	bl	8010bfe <SDIO_GetResponse>
 800d926:	4603      	mov	r3, r0
 800d928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d92c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d930:	d102      	bne.n	800d938 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d936:	e02f      	b.n	800d998 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d938:	f107 030c 	add.w	r3, r7, #12
 800d93c:	4619      	mov	r1, r3
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 f82e 	bl	800d9a0 <SD_FindSCR>
 800d944:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	e023      	b.n	800d998 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d956:	2b00      	cmp	r3, #0
 800d958:	d01c      	beq.n	800d994 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d962:	041b      	lsls	r3, r3, #16
 800d964:	4619      	mov	r1, r3
 800d966:	4610      	mov	r0, r2
 800d968:	f003 fa0a 	bl	8010d80 <SDMMC_CmdAppCommand>
 800d96c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d001      	beq.n	800d978 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	e00f      	b.n	800d998 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2100      	movs	r1, #0
 800d97e:	4618      	mov	r0, r3
 800d980:	f003 fa43 	bl	8010e0a <SDMMC_CmdBusWidth>
 800d984:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	e003      	b.n	800d998 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d990:	2300      	movs	r3, #0
 800d992:	e001      	b.n	800d998 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d994:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3718      	adds	r7, #24
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d9a0:	b590      	push	{r4, r7, lr}
 800d9a2:	b08f      	sub	sp, #60	; 0x3c
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d9aa:	f7fc f805 	bl	80099b8 <HAL_GetTick>
 800d9ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	60bb      	str	r3, [r7, #8]
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2108      	movs	r1, #8
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f003 f958 	bl	8010c7c <SDMMC_CmdBlockLength>
 800d9cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d001      	beq.n	800d9d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d6:	e0b2      	b.n	800db3e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9e0:	041b      	lsls	r3, r3, #16
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	f003 f9cb 	bl	8010d80 <SDMMC_CmdAppCommand>
 800d9ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f4:	e0a3      	b.n	800db3e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d9fc:	2308      	movs	r3, #8
 800d9fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800da00:	2330      	movs	r3, #48	; 0x30
 800da02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800da04:	2302      	movs	r3, #2
 800da06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800da08:	2300      	movs	r3, #0
 800da0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800da0c:	2301      	movs	r3, #1
 800da0e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f107 0210 	add.w	r2, r7, #16
 800da18:	4611      	mov	r1, r2
 800da1a:	4618      	mov	r0, r3
 800da1c:	f003 f902 	bl	8010c24 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4618      	mov	r0, r3
 800da26:	f003 fa12 	bl	8010e4e <SDMMC_CmdSendSCR>
 800da2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d02a      	beq.n	800da88 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800da32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da34:	e083      	b.n	800db3e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00f      	beq.n	800da64 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6819      	ldr	r1, [r3, #0]
 800da48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	f107 0208 	add.w	r2, r7, #8
 800da50:	18d4      	adds	r4, r2, r3
 800da52:	4608      	mov	r0, r1
 800da54:	f003 f873 	bl	8010b3e <SDIO_ReadFIFO>
 800da58:	4603      	mov	r3, r0
 800da5a:	6023      	str	r3, [r4, #0]
      index++;
 800da5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da5e:	3301      	adds	r3, #1
 800da60:	637b      	str	r3, [r7, #52]	; 0x34
 800da62:	e006      	b.n	800da72 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d012      	beq.n	800da98 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da72:	f7fb ffa1 	bl	80099b8 <HAL_GetTick>
 800da76:	4602      	mov	r2, r0
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da80:	d102      	bne.n	800da88 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da86:	e05a      	b.n	800db3e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da8e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800da92:	2b00      	cmp	r3, #0
 800da94:	d0cf      	beq.n	800da36 <SD_FindSCR+0x96>
 800da96:	e000      	b.n	800da9a <SD_FindSCR+0xfa>
      break;
 800da98:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa0:	f003 0308 	and.w	r3, r3, #8
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d005      	beq.n	800dab4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2208      	movs	r2, #8
 800daae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dab0:	2308      	movs	r3, #8
 800dab2:	e044      	b.n	800db3e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daba:	f003 0302 	and.w	r3, r3, #2
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d005      	beq.n	800dace <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2202      	movs	r2, #2
 800dac8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800daca:	2302      	movs	r3, #2
 800dacc:	e037      	b.n	800db3e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad4:	f003 0320 	and.w	r3, r3, #32
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d005      	beq.n	800dae8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2220      	movs	r2, #32
 800dae2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dae4:	2320      	movs	r3, #32
 800dae6:	e02a      	b.n	800db3e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f240 523a 	movw	r2, #1338	; 0x53a
 800daf0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	061a      	lsls	r2, r3, #24
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	021b      	lsls	r3, r3, #8
 800dafa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dafe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	0a1b      	lsrs	r3, r3, #8
 800db04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800db08:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	0e1b      	lsrs	r3, r3, #24
 800db0e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db12:	601a      	str	r2, [r3, #0]
    scr++;
 800db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db16:	3304      	adds	r3, #4
 800db18:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	061a      	lsls	r2, r3, #24
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	021b      	lsls	r3, r3, #8
 800db22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db26:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	0a1b      	lsrs	r3, r3, #8
 800db2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800db30:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	0e1b      	lsrs	r3, r3, #24
 800db36:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	373c      	adds	r7, #60	; 0x3c
 800db42:	46bd      	mov	sp, r7
 800db44:	bd90      	pop	{r4, r7, pc}

0800db46 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b082      	sub	sp, #8
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d101      	bne.n	800db58 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	e07b      	b.n	800dc50 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d108      	bne.n	800db72 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db68:	d009      	beq.n	800db7e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	61da      	str	r2, [r3, #28]
 800db70:	e005      	b.n	800db7e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d106      	bne.n	800db9e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7f5 fe97 	bl	80038cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2202      	movs	r2, #2
 800dba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dbc6:	431a      	orrs	r2, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbd0:	431a      	orrs	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	f003 0302 	and.w	r3, r3, #2
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	f003 0301 	and.w	r3, r3, #1
 800dbe4:	431a      	orrs	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dbee:	431a      	orrs	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	69db      	ldr	r3, [r3, #28]
 800dbf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbf8:	431a      	orrs	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a1b      	ldr	r3, [r3, #32]
 800dbfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc02:	ea42 0103 	orr.w	r1, r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	430a      	orrs	r2, r1
 800dc14:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	699b      	ldr	r3, [r3, #24]
 800dc1a:	0c1b      	lsrs	r3, r3, #16
 800dc1c:	f003 0104 	and.w	r1, r3, #4
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc24:	f003 0210 	and.w	r2, r3, #16
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	430a      	orrs	r2, r1
 800dc2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	69da      	ldr	r2, [r3, #28]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dc3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	4613      	mov	r3, r2
 800dc64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dc66:	2300      	movs	r3, #0
 800dc68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d101      	bne.n	800dc78 <HAL_SPI_Transmit_DMA+0x20>
 800dc74:	2302      	movs	r3, #2
 800dc76:	e09b      	b.n	800ddb0 <HAL_SPI_Transmit_DMA+0x158>
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d002      	beq.n	800dc92 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dc90:	e089      	b.n	800dda6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d002      	beq.n	800dc9e <HAL_SPI_Transmit_DMA+0x46>
 800dc98:	88fb      	ldrh	r3, [r7, #6]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d102      	bne.n	800dca4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dca2:	e080      	b.n	800dda6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2203      	movs	r2, #3
 800dca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	68ba      	ldr	r2, [r7, #8]
 800dcb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	88fa      	ldrh	r2, [r7, #6]
 800dcbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	88fa      	ldrh	r2, [r7, #6]
 800dcc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcea:	d10f      	bne.n	800dd0c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd10:	4a29      	ldr	r2, [pc, #164]	; (800ddb8 <HAL_SPI_Transmit_DMA+0x160>)
 800dd12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd18:	4a28      	ldr	r2, [pc, #160]	; (800ddbc <HAL_SPI_Transmit_DMA+0x164>)
 800dd1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd20:	4a27      	ldr	r2, [pc, #156]	; (800ddc0 <HAL_SPI_Transmit_DMA+0x168>)
 800dd22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd28:	2200      	movs	r2, #0
 800dd2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd34:	4619      	mov	r1, r3
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	330c      	adds	r3, #12
 800dd3c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd42:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dd44:	f7fc fc0a 	bl	800a55c <HAL_DMA_Start_IT>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00c      	beq.n	800dd68 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd52:	f043 0210 	orr.w	r2, r3, #16
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2201      	movs	r2, #1
 800dd62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800dd66:	e01e      	b.n	800dda6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd72:	2b40      	cmp	r3, #64	; 0x40
 800dd74:	d007      	beq.n	800dd86 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd84:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f042 0220 	orr.w	r2, r2, #32
 800dd94:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	685a      	ldr	r2, [r3, #4]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f042 0202 	orr.w	r2, r2, #2
 800dda4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ddae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3718      	adds	r7, #24
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	0800e3c5 	.word	0x0800e3c5
 800ddbc:	0800e1e5 	.word	0x0800e1e5
 800ddc0:	0800e419 	.word	0x0800e419

0800ddc4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	4613      	mov	r3, r2
 800ddd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	689b      	ldr	r3, [r3, #8]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d110      	bne.n	800de00 <HAL_SPI_Receive_DMA+0x3c>
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dde6:	d10b      	bne.n	800de00 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2204      	movs	r2, #4
 800ddec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ddf0:	88fb      	ldrh	r3, [r7, #6]
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	68b9      	ldr	r1, [r7, #8]
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f000 f8ac 	bl	800df54 <HAL_SPI_TransmitReceive_DMA>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	e09f      	b.n	800df40 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800de06:	2b01      	cmp	r3, #1
 800de08:	d101      	bne.n	800de0e <HAL_SPI_Receive_DMA+0x4a>
 800de0a:	2302      	movs	r3, #2
 800de0c:	e098      	b.n	800df40 <HAL_SPI_Receive_DMA+0x17c>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d002      	beq.n	800de28 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800de22:	2302      	movs	r3, #2
 800de24:	75fb      	strb	r3, [r7, #23]
    goto error;
 800de26:	e086      	b.n	800df36 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d002      	beq.n	800de34 <HAL_SPI_Receive_DMA+0x70>
 800de2e:	88fb      	ldrh	r3, [r7, #6]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d102      	bne.n	800de3a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800de34:	2301      	movs	r3, #1
 800de36:	75fb      	strb	r3, [r7, #23]
    goto error;
 800de38:	e07d      	b.n	800df36 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2204      	movs	r2, #4
 800de3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	68ba      	ldr	r2, [r7, #8]
 800de4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	88fa      	ldrh	r2, [r7, #6]
 800de52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	88fa      	ldrh	r2, [r7, #6]
 800de58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2200      	movs	r2, #0
 800de70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de7a:	d10f      	bne.n	800de9c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800de9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dea0:	4a29      	ldr	r2, [pc, #164]	; (800df48 <HAL_SPI_Receive_DMA+0x184>)
 800dea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dea8:	4a28      	ldr	r2, [pc, #160]	; (800df4c <HAL_SPI_Receive_DMA+0x188>)
 800deaa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deb0:	4a27      	ldr	r2, [pc, #156]	; (800df50 <HAL_SPI_Receive_DMA+0x18c>)
 800deb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deb8:	2200      	movs	r2, #0
 800deba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	330c      	adds	r3, #12
 800dec6:	4619      	mov	r1, r3
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800decc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ded2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ded4:	f7fc fb42 	bl	800a55c <HAL_DMA_Start_IT>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00c      	beq.n	800def8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dee2:	f043 0210 	orr.w	r2, r3, #16
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2201      	movs	r2, #1
 800def2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800def6:	e01e      	b.n	800df36 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df02:	2b40      	cmp	r3, #64	; 0x40
 800df04:	d007      	beq.n	800df16 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df14:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f042 0220 	orr.w	r2, r2, #32
 800df24:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	685a      	ldr	r2, [r3, #4]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f042 0201 	orr.w	r2, r2, #1
 800df34:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2200      	movs	r2, #0
 800df3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800df3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3718      	adds	r7, #24
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	0800e3e1 	.word	0x0800e3e1
 800df4c:	0800e28d 	.word	0x0800e28d
 800df50:	0800e419 	.word	0x0800e419

0800df54 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
 800df60:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df62:	2300      	movs	r3, #0
 800df64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d101      	bne.n	800df74 <HAL_SPI_TransmitReceive_DMA+0x20>
 800df70:	2302      	movs	r3, #2
 800df72:	e0e3      	b.n	800e13c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2201      	movs	r2, #1
 800df78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df82:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800df8a:	7dbb      	ldrb	r3, [r7, #22]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d00d      	beq.n	800dfac <HAL_SPI_TransmitReceive_DMA+0x58>
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df96:	d106      	bne.n	800dfa6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d102      	bne.n	800dfa6 <HAL_SPI_TransmitReceive_DMA+0x52>
 800dfa0:	7dbb      	ldrb	r3, [r7, #22]
 800dfa2:	2b04      	cmp	r3, #4
 800dfa4:	d002      	beq.n	800dfac <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800dfa6:	2302      	movs	r3, #2
 800dfa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dfaa:	e0c2      	b.n	800e132 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d005      	beq.n	800dfbe <HAL_SPI_TransmitReceive_DMA+0x6a>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <HAL_SPI_TransmitReceive_DMA+0x6a>
 800dfb8:	887b      	ldrh	r3, [r7, #2]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d102      	bne.n	800dfc4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dfc2:	e0b6      	b.n	800e132 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	2b04      	cmp	r3, #4
 800dfce:	d003      	beq.n	800dfd8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2205      	movs	r2, #5
 800dfd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	887a      	ldrh	r2, [r7, #2]
 800dfe8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	887a      	ldrh	r2, [r7, #2]
 800dfee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	887a      	ldrh	r2, [r7, #2]
 800dffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	887a      	ldrh	r2, [r7, #2]
 800e000:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2200      	movs	r2, #0
 800e00c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e014:	b2db      	uxtb	r3, r3
 800e016:	2b04      	cmp	r3, #4
 800e018:	d108      	bne.n	800e02c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e01e:	4a49      	ldr	r2, [pc, #292]	; (800e144 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800e020:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e026:	4a48      	ldr	r2, [pc, #288]	; (800e148 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800e028:	63da      	str	r2, [r3, #60]	; 0x3c
 800e02a:	e007      	b.n	800e03c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e030:	4a46      	ldr	r2, [pc, #280]	; (800e14c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800e032:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e038:	4a45      	ldr	r2, [pc, #276]	; (800e150 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800e03a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e040:	4a44      	ldr	r2, [pc, #272]	; (800e154 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800e042:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e048:	2200      	movs	r2, #0
 800e04a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	330c      	adds	r3, #12
 800e056:	4619      	mov	r1, r3
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e062:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e064:	f7fc fa7a 	bl	800a55c <HAL_DMA_Start_IT>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00c      	beq.n	800e088 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e072:	f043 0210 	orr.w	r2, r3, #16
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e07a:	2301      	movs	r3, #1
 800e07c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2201      	movs	r2, #1
 800e082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e086:	e054      	b.n	800e132 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	685a      	ldr	r2, [r3, #4]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f042 0201 	orr.w	r2, r2, #1
 800e096:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e09c:	2200      	movs	r2, #0
 800e09e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	330c      	adds	r3, #12
 800e0c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e0d0:	f7fc fa44 	bl	800a55c <HAL_DMA_Start_IT>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00c      	beq.n	800e0f4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0de:	f043 0210 	orr.w	r2, r3, #16
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800e0f2:	e01e      	b.n	800e132 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0fe:	2b40      	cmp	r3, #64	; 0x40
 800e100:	d007      	beq.n	800e112 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e110:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	685a      	ldr	r2, [r3, #4]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f042 0220 	orr.w	r2, r2, #32
 800e120:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	685a      	ldr	r2, [r3, #4]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f042 0202 	orr.w	r2, r2, #2
 800e130:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e13a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3718      	adds	r7, #24
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	0800e3e1 	.word	0x0800e3e1
 800e148:	0800e28d 	.word	0x0800e28d
 800e14c:	0800e3fd 	.word	0x0800e3fd
 800e150:	0800e335 	.word	0x0800e335
 800e154:	0800e419 	.word	0x0800e419

0800e158 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e174:	bf00      	nop
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e188:	bf00      	nop
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e1b0:	bf00      	nop
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e1d8:	bf00      	nop
 800e1da:	370c      	adds	r7, #12
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1f2:	f7fb fbe1 	bl	80099b8 <HAL_GetTick>
 800e1f6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e206:	d03b      	beq.n	800e280 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f022 0220 	bic.w	r2, r2, #32
 800e216:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f022 0202 	bic.w	r2, r2, #2
 800e226:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	2164      	movs	r1, #100	; 0x64
 800e22c:	6978      	ldr	r0, [r7, #20]
 800e22e:	f000 fa01 	bl	800e634 <SPI_EndRxTxTransaction>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d005      	beq.n	800e244 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e23c:	f043 0220 	orr.w	r2, r3, #32
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10a      	bne.n	800e262 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e24c:	2300      	movs	r3, #0
 800e24e:	60fb      	str	r3, [r7, #12]
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	60fb      	str	r3, [r7, #12]
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2200      	movs	r2, #0
 800e266:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	2201      	movs	r2, #1
 800e26c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e274:	2b00      	cmp	r3, #0
 800e276:	d003      	beq.n	800e280 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e278:	6978      	ldr	r0, [r7, #20]
 800e27a:	f7ff ffa9 	bl	800e1d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e27e:	e002      	b.n	800e286 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e280:	6978      	ldr	r0, [r7, #20]
 800e282:	f7ff ff69 	bl	800e158 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e286:	3718      	adds	r7, #24
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e298:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e29a:	f7fb fb8d 	bl	80099b8 <HAL_GetTick>
 800e29e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2ae:	d03b      	beq.n	800e328 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f022 0220 	bic.w	r2, r2, #32
 800e2be:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10d      	bne.n	800e2e4 <SPI_DMAReceiveCplt+0x58>
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2d0:	d108      	bne.n	800e2e4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	685a      	ldr	r2, [r3, #4]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f022 0203 	bic.w	r2, r2, #3
 800e2e0:	605a      	str	r2, [r3, #4]
 800e2e2:	e007      	b.n	800e2f4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f022 0201 	bic.w	r2, r2, #1
 800e2f2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	2164      	movs	r1, #100	; 0x64
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f000 f935 	bl	800e568 <SPI_EndRxTransaction>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2220      	movs	r2, #32
 800e308:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2200      	movs	r2, #0
 800e30e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d003      	beq.n	800e328 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f7ff ff55 	bl	800e1d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e326:	e002      	b.n	800e32e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f7ff ff1f 	bl	800e16c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e340:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e342:	f7fb fb39 	bl	80099b8 <HAL_GetTick>
 800e346:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e356:	d02f      	beq.n	800e3b8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	685a      	ldr	r2, [r3, #4]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f022 0220 	bic.w	r2, r2, #32
 800e366:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	2164      	movs	r1, #100	; 0x64
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f000 f961 	bl	800e634 <SPI_EndRxTxTransaction>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d005      	beq.n	800e384 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e37c:	f043 0220 	orr.w	r2, r3, #32
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	685a      	ldr	r2, [r3, #4]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f022 0203 	bic.w	r2, r2, #3
 800e392:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d003      	beq.n	800e3b8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f7ff ff0d 	bl	800e1d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e3b6:	e002      	b.n	800e3be <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f7ff fee1 	bl	800e180 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f7ff fede 	bl	800e194 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3d8:	bf00      	nop
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ec:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f7ff feda 	bl	800e1a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3f4:	bf00      	nop
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e408:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f7ff fed6 	bl	800e1bc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e410:	bf00      	nop
 800e412:	3710      	adds	r7, #16
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e424:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	685a      	ldr	r2, [r3, #4]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f022 0203 	bic.w	r2, r2, #3
 800e434:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e43a:	f043 0210 	orr.w	r2, r3, #16
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2201      	movs	r2, #1
 800e446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	f7ff fec0 	bl	800e1d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e450:	bf00      	nop
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	4613      	mov	r3, r2
 800e466:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e468:	f7fb faa6 	bl	80099b8 <HAL_GetTick>
 800e46c:	4602      	mov	r2, r0
 800e46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e470:	1a9b      	subs	r3, r3, r2
 800e472:	683a      	ldr	r2, [r7, #0]
 800e474:	4413      	add	r3, r2
 800e476:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e478:	f7fb fa9e 	bl	80099b8 <HAL_GetTick>
 800e47c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e47e:	4b39      	ldr	r3, [pc, #228]	; (800e564 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	015b      	lsls	r3, r3, #5
 800e484:	0d1b      	lsrs	r3, r3, #20
 800e486:	69fa      	ldr	r2, [r7, #28]
 800e488:	fb02 f303 	mul.w	r3, r2, r3
 800e48c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e48e:	e054      	b.n	800e53a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e496:	d050      	beq.n	800e53a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e498:	f7fb fa8e 	bl	80099b8 <HAL_GetTick>
 800e49c:	4602      	mov	r2, r0
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	69fa      	ldr	r2, [r7, #28]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d902      	bls.n	800e4ae <SPI_WaitFlagStateUntilTimeout+0x56>
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d13d      	bne.n	800e52a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	685a      	ldr	r2, [r3, #4]
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e4bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4c6:	d111      	bne.n	800e4ec <SPI_WaitFlagStateUntilTimeout+0x94>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4d0:	d004      	beq.n	800e4dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4da:	d107      	bne.n	800e4ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4f4:	d10f      	bne.n	800e516 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2201      	movs	r2, #1
 800e51a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2200      	movs	r2, #0
 800e522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e526:	2303      	movs	r3, #3
 800e528:	e017      	b.n	800e55a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d101      	bne.n	800e534 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e530:	2300      	movs	r3, #0
 800e532:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	3b01      	subs	r3, #1
 800e538:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	689a      	ldr	r2, [r3, #8]
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	4013      	ands	r3, r2
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	429a      	cmp	r2, r3
 800e548:	bf0c      	ite	eq
 800e54a:	2301      	moveq	r3, #1
 800e54c:	2300      	movne	r3, #0
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	461a      	mov	r2, r3
 800e552:	79fb      	ldrb	r3, [r7, #7]
 800e554:	429a      	cmp	r2, r3
 800e556:	d19b      	bne.n	800e490 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3720      	adds	r7, #32
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	20000000 	.word	0x20000000

0800e568 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af02      	add	r7, sp, #8
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e57c:	d111      	bne.n	800e5a2 <SPI_EndRxTransaction+0x3a>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e586:	d004      	beq.n	800e592 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e590:	d107      	bne.n	800e5a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e5aa:	d12a      	bne.n	800e602 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	689b      	ldr	r3, [r3, #8]
 800e5b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5b4:	d012      	beq.n	800e5dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	2180      	movs	r1, #128	; 0x80
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f7ff ff49 	bl	800e458 <SPI_WaitFlagStateUntilTimeout>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d02d      	beq.n	800e628 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5d0:	f043 0220 	orr.w	r2, r3, #32
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e5d8:	2303      	movs	r3, #3
 800e5da:	e026      	b.n	800e62a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	68f8      	ldr	r0, [r7, #12]
 800e5e8:	f7ff ff36 	bl	800e458 <SPI_WaitFlagStateUntilTimeout>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d01a      	beq.n	800e628 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5f6:	f043 0220 	orr.w	r2, r3, #32
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e5fe:	2303      	movs	r3, #3
 800e600:	e013      	b.n	800e62a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	9300      	str	r3, [sp, #0]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	2200      	movs	r2, #0
 800e60a:	2101      	movs	r1, #1
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f7ff ff23 	bl	800e458 <SPI_WaitFlagStateUntilTimeout>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d007      	beq.n	800e628 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e61c:	f043 0220 	orr.w	r2, r3, #32
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e624:	2303      	movs	r3, #3
 800e626:	e000      	b.n	800e62a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
	...

0800e634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b088      	sub	sp, #32
 800e638:	af02      	add	r7, sp, #8
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e640:	4b1b      	ldr	r3, [pc, #108]	; (800e6b0 <SPI_EndRxTxTransaction+0x7c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a1b      	ldr	r2, [pc, #108]	; (800e6b4 <SPI_EndRxTxTransaction+0x80>)
 800e646:	fba2 2303 	umull	r2, r3, r2, r3
 800e64a:	0d5b      	lsrs	r3, r3, #21
 800e64c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e650:	fb02 f303 	mul.w	r3, r2, r3
 800e654:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e65e:	d112      	bne.n	800e686 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	2200      	movs	r2, #0
 800e668:	2180      	movs	r1, #128	; 0x80
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f7ff fef4 	bl	800e458 <SPI_WaitFlagStateUntilTimeout>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d016      	beq.n	800e6a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e67a:	f043 0220 	orr.w	r2, r3, #32
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e682:	2303      	movs	r3, #3
 800e684:	e00f      	b.n	800e6a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00a      	beq.n	800e6a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	3b01      	subs	r3, #1
 800e690:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e69c:	2b80      	cmp	r3, #128	; 0x80
 800e69e:	d0f2      	beq.n	800e686 <SPI_EndRxTxTransaction+0x52>
 800e6a0:	e000      	b.n	800e6a4 <SPI_EndRxTxTransaction+0x70>
        break;
 800e6a2:	bf00      	nop
  }

  return HAL_OK;
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	20000000 	.word	0x20000000
 800e6b4:	165e9f81 	.word	0x165e9f81

0800e6b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d101      	bne.n	800e6ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e041      	b.n	800e74e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7f5 f9a0 	bl	8003a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	f000 fc7a 	bl	800eff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2201      	movs	r2, #1
 800e708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2201      	movs	r2, #1
 800e728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2201      	movs	r2, #1
 800e740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
	...

0800e758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d001      	beq.n	800e770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	e04e      	b.n	800e80e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2202      	movs	r2, #2
 800e774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68da      	ldr	r2, [r3, #12]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f042 0201 	orr.w	r2, r2, #1
 800e786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a23      	ldr	r2, [pc, #140]	; (800e81c <HAL_TIM_Base_Start_IT+0xc4>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d022      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e79a:	d01d      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a1f      	ldr	r2, [pc, #124]	; (800e820 <HAL_TIM_Base_Start_IT+0xc8>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d018      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a1e      	ldr	r2, [pc, #120]	; (800e824 <HAL_TIM_Base_Start_IT+0xcc>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d013      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a1c      	ldr	r2, [pc, #112]	; (800e828 <HAL_TIM_Base_Start_IT+0xd0>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d00e      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4a1b      	ldr	r2, [pc, #108]	; (800e82c <HAL_TIM_Base_Start_IT+0xd4>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d009      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a19      	ldr	r2, [pc, #100]	; (800e830 <HAL_TIM_Base_Start_IT+0xd8>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d004      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4a18      	ldr	r2, [pc, #96]	; (800e834 <HAL_TIM_Base_Start_IT+0xdc>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d111      	bne.n	800e7fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	f003 0307 	and.w	r3, r3, #7
 800e7e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b06      	cmp	r3, #6
 800e7e8:	d010      	beq.n	800e80c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f042 0201 	orr.w	r2, r2, #1
 800e7f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7fa:	e007      	b.n	800e80c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f042 0201 	orr.w	r2, r2, #1
 800e80a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e80c:	2300      	movs	r3, #0
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3714      	adds	r7, #20
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	40010000 	.word	0x40010000
 800e820:	40000400 	.word	0x40000400
 800e824:	40000800 	.word	0x40000800
 800e828:	40000c00 	.word	0x40000c00
 800e82c:	40010400 	.word	0x40010400
 800e830:	40014000 	.word	0x40014000
 800e834:	40001800 	.word	0x40001800

0800e838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d101      	bne.n	800e84a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	e041      	b.n	800e8ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b00      	cmp	r3, #0
 800e854:	d106      	bne.n	800e864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2200      	movs	r2, #0
 800e85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 f839 	bl	800e8d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2202      	movs	r2, #2
 800e868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	3304      	adds	r3, #4
 800e874:	4619      	mov	r1, r3
 800e876:	4610      	mov	r0, r2
 800e878:	f000 fbba 	bl	800eff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2201      	movs	r2, #1
 800e880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2201      	movs	r2, #1
 800e890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2201      	movs	r2, #1
 800e898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2201      	movs	r2, #1
 800e8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e8cc:	2300      	movs	r3, #0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e8d6:	b480      	push	{r7}
 800e8d8:	b083      	sub	sp, #12
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e8de:	bf00      	nop
 800e8e0:	370c      	adds	r7, #12
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
	...

0800e8ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d109      	bne.n	800e910 <HAL_TIM_PWM_Start+0x24>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e902:	b2db      	uxtb	r3, r3
 800e904:	2b01      	cmp	r3, #1
 800e906:	bf14      	ite	ne
 800e908:	2301      	movne	r3, #1
 800e90a:	2300      	moveq	r3, #0
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	e022      	b.n	800e956 <HAL_TIM_PWM_Start+0x6a>
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	2b04      	cmp	r3, #4
 800e914:	d109      	bne.n	800e92a <HAL_TIM_PWM_Start+0x3e>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	2b01      	cmp	r3, #1
 800e920:	bf14      	ite	ne
 800e922:	2301      	movne	r3, #1
 800e924:	2300      	moveq	r3, #0
 800e926:	b2db      	uxtb	r3, r3
 800e928:	e015      	b.n	800e956 <HAL_TIM_PWM_Start+0x6a>
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	2b08      	cmp	r3, #8
 800e92e:	d109      	bne.n	800e944 <HAL_TIM_PWM_Start+0x58>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b01      	cmp	r3, #1
 800e93a:	bf14      	ite	ne
 800e93c:	2301      	movne	r3, #1
 800e93e:	2300      	moveq	r3, #0
 800e940:	b2db      	uxtb	r3, r3
 800e942:	e008      	b.n	800e956 <HAL_TIM_PWM_Start+0x6a>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	bf14      	ite	ne
 800e950:	2301      	movne	r3, #1
 800e952:	2300      	moveq	r3, #0
 800e954:	b2db      	uxtb	r3, r3
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	e07c      	b.n	800ea58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d104      	bne.n	800e96e <HAL_TIM_PWM_Start+0x82>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2202      	movs	r2, #2
 800e968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e96c:	e013      	b.n	800e996 <HAL_TIM_PWM_Start+0xaa>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	2b04      	cmp	r3, #4
 800e972:	d104      	bne.n	800e97e <HAL_TIM_PWM_Start+0x92>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2202      	movs	r2, #2
 800e978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e97c:	e00b      	b.n	800e996 <HAL_TIM_PWM_Start+0xaa>
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b08      	cmp	r3, #8
 800e982:	d104      	bne.n	800e98e <HAL_TIM_PWM_Start+0xa2>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2202      	movs	r2, #2
 800e988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e98c:	e003      	b.n	800e996 <HAL_TIM_PWM_Start+0xaa>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2202      	movs	r2, #2
 800e992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2201      	movs	r2, #1
 800e99c:	6839      	ldr	r1, [r7, #0]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f000 fe10 	bl	800f5c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a2d      	ldr	r2, [pc, #180]	; (800ea60 <HAL_TIM_PWM_Start+0x174>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d004      	beq.n	800e9b8 <HAL_TIM_PWM_Start+0xcc>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4a2c      	ldr	r2, [pc, #176]	; (800ea64 <HAL_TIM_PWM_Start+0x178>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d101      	bne.n	800e9bc <HAL_TIM_PWM_Start+0xd0>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e000      	b.n	800e9be <HAL_TIM_PWM_Start+0xd2>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d007      	beq.n	800e9d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a22      	ldr	r2, [pc, #136]	; (800ea60 <HAL_TIM_PWM_Start+0x174>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d022      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x136>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9e4:	d01d      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x136>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a1f      	ldr	r2, [pc, #124]	; (800ea68 <HAL_TIM_PWM_Start+0x17c>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d018      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x136>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a1d      	ldr	r2, [pc, #116]	; (800ea6c <HAL_TIM_PWM_Start+0x180>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d013      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x136>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a1c      	ldr	r2, [pc, #112]	; (800ea70 <HAL_TIM_PWM_Start+0x184>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d00e      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x136>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a16      	ldr	r2, [pc, #88]	; (800ea64 <HAL_TIM_PWM_Start+0x178>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d009      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x136>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a18      	ldr	r2, [pc, #96]	; (800ea74 <HAL_TIM_PWM_Start+0x188>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d004      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x136>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a16      	ldr	r2, [pc, #88]	; (800ea78 <HAL_TIM_PWM_Start+0x18c>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d111      	bne.n	800ea46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	f003 0307 	and.w	r3, r3, #7
 800ea2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2b06      	cmp	r3, #6
 800ea32:	d010      	beq.n	800ea56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f042 0201 	orr.w	r2, r2, #1
 800ea42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea44:	e007      	b.n	800ea56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f042 0201 	orr.w	r2, r2, #1
 800ea54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	40010000 	.word	0x40010000
 800ea64:	40010400 	.word	0x40010400
 800ea68:	40000400 	.word	0x40000400
 800ea6c:	40000800 	.word	0x40000800
 800ea70:	40000c00 	.word	0x40000c00
 800ea74:	40014000 	.word	0x40014000
 800ea78:	40001800 	.word	0x40001800

0800ea7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	691b      	ldr	r3, [r3, #16]
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b02      	cmp	r3, #2
 800ea90:	d122      	bne.n	800ead8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	f003 0302 	and.w	r3, r3, #2
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	d11b      	bne.n	800ead8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f06f 0202 	mvn.w	r2, #2
 800eaa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2201      	movs	r2, #1
 800eaae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	699b      	ldr	r3, [r3, #24]
 800eab6:	f003 0303 	and.w	r3, r3, #3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d003      	beq.n	800eac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f000 fa77 	bl	800efb2 <HAL_TIM_IC_CaptureCallback>
 800eac4:	e005      	b.n	800ead2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 fa69 	bl	800ef9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 fa7a 	bl	800efc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	691b      	ldr	r3, [r3, #16]
 800eade:	f003 0304 	and.w	r3, r3, #4
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d122      	bne.n	800eb2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	f003 0304 	and.w	r3, r3, #4
 800eaf0:	2b04      	cmp	r3, #4
 800eaf2:	d11b      	bne.n	800eb2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f06f 0204 	mvn.w	r2, #4
 800eafc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2202      	movs	r2, #2
 800eb02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	699b      	ldr	r3, [r3, #24]
 800eb0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d003      	beq.n	800eb1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fa4d 	bl	800efb2 <HAL_TIM_IC_CaptureCallback>
 800eb18:	e005      	b.n	800eb26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 fa3f 	bl	800ef9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 fa50 	bl	800efc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	691b      	ldr	r3, [r3, #16]
 800eb32:	f003 0308 	and.w	r3, r3, #8
 800eb36:	2b08      	cmp	r3, #8
 800eb38:	d122      	bne.n	800eb80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	f003 0308 	and.w	r3, r3, #8
 800eb44:	2b08      	cmp	r3, #8
 800eb46:	d11b      	bne.n	800eb80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f06f 0208 	mvn.w	r2, #8
 800eb50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2204      	movs	r2, #4
 800eb56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	69db      	ldr	r3, [r3, #28]
 800eb5e:	f003 0303 	and.w	r3, r3, #3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 fa23 	bl	800efb2 <HAL_TIM_IC_CaptureCallback>
 800eb6c:	e005      	b.n	800eb7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 fa15 	bl	800ef9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 fa26 	bl	800efc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	691b      	ldr	r3, [r3, #16]
 800eb86:	f003 0310 	and.w	r3, r3, #16
 800eb8a:	2b10      	cmp	r3, #16
 800eb8c:	d122      	bne.n	800ebd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	f003 0310 	and.w	r3, r3, #16
 800eb98:	2b10      	cmp	r3, #16
 800eb9a:	d11b      	bne.n	800ebd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f06f 0210 	mvn.w	r2, #16
 800eba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2208      	movs	r2, #8
 800ebaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	69db      	ldr	r3, [r3, #28]
 800ebb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d003      	beq.n	800ebc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 f9f9 	bl	800efb2 <HAL_TIM_IC_CaptureCallback>
 800ebc0:	e005      	b.n	800ebce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 f9eb 	bl	800ef9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f9fc 	bl	800efc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	691b      	ldr	r3, [r3, #16]
 800ebda:	f003 0301 	and.w	r3, r3, #1
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d10e      	bne.n	800ec00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	f003 0301 	and.w	r3, r3, #1
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d107      	bne.n	800ec00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f06f 0201 	mvn.w	r2, #1
 800ebf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7f3 fee8 	bl	80029d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec0a:	2b80      	cmp	r3, #128	; 0x80
 800ec0c:	d10e      	bne.n	800ec2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec18:	2b80      	cmp	r3, #128	; 0x80
 800ec1a:	d107      	bne.n	800ec2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ec24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 fd78 	bl	800f71c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	691b      	ldr	r3, [r3, #16]
 800ec32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec36:	2b40      	cmp	r3, #64	; 0x40
 800ec38:	d10e      	bne.n	800ec58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec44:	2b40      	cmp	r3, #64	; 0x40
 800ec46:	d107      	bne.n	800ec58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f9c1 	bl	800efda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	f003 0320 	and.w	r3, r3, #32
 800ec62:	2b20      	cmp	r3, #32
 800ec64:	d10e      	bne.n	800ec84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	f003 0320 	and.w	r3, r3, #32
 800ec70:	2b20      	cmp	r3, #32
 800ec72:	d107      	bne.n	800ec84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f06f 0220 	mvn.w	r2, #32
 800ec7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 fd42 	bl	800f708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ec84:	bf00      	nop
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b086      	sub	sp, #24
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d101      	bne.n	800ecaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eca6:	2302      	movs	r3, #2
 800eca8:	e0ae      	b.n	800ee08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2201      	movs	r2, #1
 800ecae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b0c      	cmp	r3, #12
 800ecb6:	f200 809f 	bhi.w	800edf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ecba:	a201      	add	r2, pc, #4	; (adr r2, 800ecc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ecbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc0:	0800ecf5 	.word	0x0800ecf5
 800ecc4:	0800edf9 	.word	0x0800edf9
 800ecc8:	0800edf9 	.word	0x0800edf9
 800eccc:	0800edf9 	.word	0x0800edf9
 800ecd0:	0800ed35 	.word	0x0800ed35
 800ecd4:	0800edf9 	.word	0x0800edf9
 800ecd8:	0800edf9 	.word	0x0800edf9
 800ecdc:	0800edf9 	.word	0x0800edf9
 800ece0:	0800ed77 	.word	0x0800ed77
 800ece4:	0800edf9 	.word	0x0800edf9
 800ece8:	0800edf9 	.word	0x0800edf9
 800ecec:	0800edf9 	.word	0x0800edf9
 800ecf0:	0800edb7 	.word	0x0800edb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68b9      	ldr	r1, [r7, #8]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 fa18 	bl	800f130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	699a      	ldr	r2, [r3, #24]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f042 0208 	orr.w	r2, r2, #8
 800ed0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	699a      	ldr	r2, [r3, #24]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f022 0204 	bic.w	r2, r2, #4
 800ed1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	6999      	ldr	r1, [r3, #24]
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	691a      	ldr	r2, [r3, #16]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	619a      	str	r2, [r3, #24]
      break;
 800ed32:	e064      	b.n	800edfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	68b9      	ldr	r1, [r7, #8]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f000 fa68 	bl	800f210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	699a      	ldr	r2, [r3, #24]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	699a      	ldr	r2, [r3, #24]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6999      	ldr	r1, [r3, #24]
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	021a      	lsls	r2, r3, #8
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	430a      	orrs	r2, r1
 800ed72:	619a      	str	r2, [r3, #24]
      break;
 800ed74:	e043      	b.n	800edfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68b9      	ldr	r1, [r7, #8]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f000 fabd 	bl	800f2fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	69da      	ldr	r2, [r3, #28]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f042 0208 	orr.w	r2, r2, #8
 800ed90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	69da      	ldr	r2, [r3, #28]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f022 0204 	bic.w	r2, r2, #4
 800eda0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	69d9      	ldr	r1, [r3, #28]
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	691a      	ldr	r2, [r3, #16]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	430a      	orrs	r2, r1
 800edb2:	61da      	str	r2, [r3, #28]
      break;
 800edb4:	e023      	b.n	800edfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68b9      	ldr	r1, [r7, #8]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f000 fb11 	bl	800f3e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	69da      	ldr	r2, [r3, #28]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800edd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	69da      	ldr	r2, [r3, #28]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ede0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	69d9      	ldr	r1, [r3, #28]
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	021a      	lsls	r2, r3, #8
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	430a      	orrs	r2, r1
 800edf4:	61da      	str	r2, [r3, #28]
      break;
 800edf6:	e002      	b.n	800edfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	75fb      	strb	r3, [r7, #23]
      break;
 800edfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ee06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3718      	adds	r7, #24
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d101      	bne.n	800ee2c <HAL_TIM_ConfigClockSource+0x1c>
 800ee28:	2302      	movs	r3, #2
 800ee2a:	e0b4      	b.n	800ef96 <HAL_TIM_ConfigClockSource+0x186>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2202      	movs	r2, #2
 800ee38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ee4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee64:	d03e      	beq.n	800eee4 <HAL_TIM_ConfigClockSource+0xd4>
 800ee66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee6a:	f200 8087 	bhi.w	800ef7c <HAL_TIM_ConfigClockSource+0x16c>
 800ee6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee72:	f000 8086 	beq.w	800ef82 <HAL_TIM_ConfigClockSource+0x172>
 800ee76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee7a:	d87f      	bhi.n	800ef7c <HAL_TIM_ConfigClockSource+0x16c>
 800ee7c:	2b70      	cmp	r3, #112	; 0x70
 800ee7e:	d01a      	beq.n	800eeb6 <HAL_TIM_ConfigClockSource+0xa6>
 800ee80:	2b70      	cmp	r3, #112	; 0x70
 800ee82:	d87b      	bhi.n	800ef7c <HAL_TIM_ConfigClockSource+0x16c>
 800ee84:	2b60      	cmp	r3, #96	; 0x60
 800ee86:	d050      	beq.n	800ef2a <HAL_TIM_ConfigClockSource+0x11a>
 800ee88:	2b60      	cmp	r3, #96	; 0x60
 800ee8a:	d877      	bhi.n	800ef7c <HAL_TIM_ConfigClockSource+0x16c>
 800ee8c:	2b50      	cmp	r3, #80	; 0x50
 800ee8e:	d03c      	beq.n	800ef0a <HAL_TIM_ConfigClockSource+0xfa>
 800ee90:	2b50      	cmp	r3, #80	; 0x50
 800ee92:	d873      	bhi.n	800ef7c <HAL_TIM_ConfigClockSource+0x16c>
 800ee94:	2b40      	cmp	r3, #64	; 0x40
 800ee96:	d058      	beq.n	800ef4a <HAL_TIM_ConfigClockSource+0x13a>
 800ee98:	2b40      	cmp	r3, #64	; 0x40
 800ee9a:	d86f      	bhi.n	800ef7c <HAL_TIM_ConfigClockSource+0x16c>
 800ee9c:	2b30      	cmp	r3, #48	; 0x30
 800ee9e:	d064      	beq.n	800ef6a <HAL_TIM_ConfigClockSource+0x15a>
 800eea0:	2b30      	cmp	r3, #48	; 0x30
 800eea2:	d86b      	bhi.n	800ef7c <HAL_TIM_ConfigClockSource+0x16c>
 800eea4:	2b20      	cmp	r3, #32
 800eea6:	d060      	beq.n	800ef6a <HAL_TIM_ConfigClockSource+0x15a>
 800eea8:	2b20      	cmp	r3, #32
 800eeaa:	d867      	bhi.n	800ef7c <HAL_TIM_ConfigClockSource+0x16c>
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d05c      	beq.n	800ef6a <HAL_TIM_ConfigClockSource+0x15a>
 800eeb0:	2b10      	cmp	r3, #16
 800eeb2:	d05a      	beq.n	800ef6a <HAL_TIM_ConfigClockSource+0x15a>
 800eeb4:	e062      	b.n	800ef7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6818      	ldr	r0, [r3, #0]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	6899      	ldr	r1, [r3, #8]
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	685a      	ldr	r2, [r3, #4]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	f000 fb5d 	bl	800f584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	609a      	str	r2, [r3, #8]
      break;
 800eee2:	e04f      	b.n	800ef84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	6899      	ldr	r1, [r3, #8]
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	685a      	ldr	r2, [r3, #4]
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	f000 fb46 	bl	800f584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	689a      	ldr	r2, [r3, #8]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef06:	609a      	str	r2, [r3, #8]
      break;
 800ef08:	e03c      	b.n	800ef84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6818      	ldr	r0, [r3, #0]
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	6859      	ldr	r1, [r3, #4]
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	461a      	mov	r2, r3
 800ef18:	f000 faba 	bl	800f490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2150      	movs	r1, #80	; 0x50
 800ef22:	4618      	mov	r0, r3
 800ef24:	f000 fb13 	bl	800f54e <TIM_ITRx_SetConfig>
      break;
 800ef28:	e02c      	b.n	800ef84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6818      	ldr	r0, [r3, #0]
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	6859      	ldr	r1, [r3, #4]
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	461a      	mov	r2, r3
 800ef38:	f000 fad9 	bl	800f4ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2160      	movs	r1, #96	; 0x60
 800ef42:	4618      	mov	r0, r3
 800ef44:	f000 fb03 	bl	800f54e <TIM_ITRx_SetConfig>
      break;
 800ef48:	e01c      	b.n	800ef84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6818      	ldr	r0, [r3, #0]
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	6859      	ldr	r1, [r3, #4]
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	461a      	mov	r2, r3
 800ef58:	f000 fa9a 	bl	800f490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	2140      	movs	r1, #64	; 0x40
 800ef62:	4618      	mov	r0, r3
 800ef64:	f000 faf3 	bl	800f54e <TIM_ITRx_SetConfig>
      break;
 800ef68:	e00c      	b.n	800ef84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4619      	mov	r1, r3
 800ef74:	4610      	mov	r0, r2
 800ef76:	f000 faea 	bl	800f54e <TIM_ITRx_SetConfig>
      break;
 800ef7a:	e003      	b.n	800ef84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ef80:	e000      	b.n	800ef84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ef82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ef94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3710      	adds	r7, #16
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b083      	sub	sp, #12
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800efa6:	bf00      	nop
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800efb2:	b480      	push	{r7}
 800efb4:	b083      	sub	sp, #12
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800efba:	bf00      	nop
 800efbc:	370c      	adds	r7, #12
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr

0800efc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800efc6:	b480      	push	{r7}
 800efc8:	b083      	sub	sp, #12
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800efce:	bf00      	nop
 800efd0:	370c      	adds	r7, #12
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr

0800efda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efda:	b480      	push	{r7}
 800efdc:	b083      	sub	sp, #12
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efe2:	bf00      	nop
 800efe4:	370c      	adds	r7, #12
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
	...

0800eff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a40      	ldr	r2, [pc, #256]	; (800f104 <TIM_Base_SetConfig+0x114>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d013      	beq.n	800f030 <TIM_Base_SetConfig+0x40>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f00e:	d00f      	beq.n	800f030 <TIM_Base_SetConfig+0x40>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4a3d      	ldr	r2, [pc, #244]	; (800f108 <TIM_Base_SetConfig+0x118>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d00b      	beq.n	800f030 <TIM_Base_SetConfig+0x40>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4a3c      	ldr	r2, [pc, #240]	; (800f10c <TIM_Base_SetConfig+0x11c>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d007      	beq.n	800f030 <TIM_Base_SetConfig+0x40>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a3b      	ldr	r2, [pc, #236]	; (800f110 <TIM_Base_SetConfig+0x120>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d003      	beq.n	800f030 <TIM_Base_SetConfig+0x40>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a3a      	ldr	r2, [pc, #232]	; (800f114 <TIM_Base_SetConfig+0x124>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d108      	bne.n	800f042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	68fa      	ldr	r2, [r7, #12]
 800f03e:	4313      	orrs	r3, r2
 800f040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4a2f      	ldr	r2, [pc, #188]	; (800f104 <TIM_Base_SetConfig+0x114>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d02b      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f050:	d027      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4a2c      	ldr	r2, [pc, #176]	; (800f108 <TIM_Base_SetConfig+0x118>)
 800f056:	4293      	cmp	r3, r2
 800f058:	d023      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4a2b      	ldr	r2, [pc, #172]	; (800f10c <TIM_Base_SetConfig+0x11c>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d01f      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4a2a      	ldr	r2, [pc, #168]	; (800f110 <TIM_Base_SetConfig+0x120>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d01b      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4a29      	ldr	r2, [pc, #164]	; (800f114 <TIM_Base_SetConfig+0x124>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d017      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a28      	ldr	r2, [pc, #160]	; (800f118 <TIM_Base_SetConfig+0x128>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d013      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a27      	ldr	r2, [pc, #156]	; (800f11c <TIM_Base_SetConfig+0x12c>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d00f      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4a26      	ldr	r2, [pc, #152]	; (800f120 <TIM_Base_SetConfig+0x130>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d00b      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a25      	ldr	r2, [pc, #148]	; (800f124 <TIM_Base_SetConfig+0x134>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d007      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4a24      	ldr	r2, [pc, #144]	; (800f128 <TIM_Base_SetConfig+0x138>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d003      	beq.n	800f0a2 <TIM_Base_SetConfig+0xb2>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4a23      	ldr	r2, [pc, #140]	; (800f12c <TIM_Base_SetConfig+0x13c>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d108      	bne.n	800f0b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	68fa      	ldr	r2, [r7, #12]
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	695b      	ldr	r3, [r3, #20]
 800f0be:	4313      	orrs	r3, r2
 800f0c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	689a      	ldr	r2, [r3, #8]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4a0a      	ldr	r2, [pc, #40]	; (800f104 <TIM_Base_SetConfig+0x114>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d003      	beq.n	800f0e8 <TIM_Base_SetConfig+0xf8>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4a0c      	ldr	r2, [pc, #48]	; (800f114 <TIM_Base_SetConfig+0x124>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d103      	bne.n	800f0f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	691a      	ldr	r2, [r3, #16]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	615a      	str	r2, [r3, #20]
}
 800f0f6:	bf00      	nop
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	40010000 	.word	0x40010000
 800f108:	40000400 	.word	0x40000400
 800f10c:	40000800 	.word	0x40000800
 800f110:	40000c00 	.word	0x40000c00
 800f114:	40010400 	.word	0x40010400
 800f118:	40014000 	.word	0x40014000
 800f11c:	40014400 	.word	0x40014400
 800f120:	40014800 	.word	0x40014800
 800f124:	40001800 	.word	0x40001800
 800f128:	40001c00 	.word	0x40001c00
 800f12c:	40002000 	.word	0x40002000

0800f130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f130:	b480      	push	{r7}
 800f132:	b087      	sub	sp, #28
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a1b      	ldr	r3, [r3, #32]
 800f13e:	f023 0201 	bic.w	r2, r3, #1
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	699b      	ldr	r3, [r3, #24]
 800f156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f023 0303 	bic.w	r3, r3, #3
 800f166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	68fa      	ldr	r2, [r7, #12]
 800f16e:	4313      	orrs	r3, r2
 800f170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	f023 0302 	bic.w	r3, r3, #2
 800f178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	4313      	orrs	r3, r2
 800f182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a20      	ldr	r2, [pc, #128]	; (800f208 <TIM_OC1_SetConfig+0xd8>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d003      	beq.n	800f194 <TIM_OC1_SetConfig+0x64>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a1f      	ldr	r2, [pc, #124]	; (800f20c <TIM_OC1_SetConfig+0xdc>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d10c      	bne.n	800f1ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f023 0308 	bic.w	r3, r3, #8
 800f19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	697a      	ldr	r2, [r7, #20]
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	f023 0304 	bic.w	r3, r3, #4
 800f1ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a15      	ldr	r2, [pc, #84]	; (800f208 <TIM_OC1_SetConfig+0xd8>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d003      	beq.n	800f1be <TIM_OC1_SetConfig+0x8e>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a14      	ldr	r2, [pc, #80]	; (800f20c <TIM_OC1_SetConfig+0xdc>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d111      	bne.n	800f1e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	695b      	ldr	r3, [r3, #20]
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	699b      	ldr	r3, [r3, #24]
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	68fa      	ldr	r2, [r7, #12]
 800f1ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	685a      	ldr	r2, [r3, #4]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	697a      	ldr	r2, [r7, #20]
 800f1fa:	621a      	str	r2, [r3, #32]
}
 800f1fc:	bf00      	nop
 800f1fe:	371c      	adds	r7, #28
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr
 800f208:	40010000 	.word	0x40010000
 800f20c:	40010400 	.word	0x40010400

0800f210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f210:	b480      	push	{r7}
 800f212:	b087      	sub	sp, #28
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	f023 0210 	bic.w	r2, r3, #16
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	699b      	ldr	r3, [r3, #24]
 800f236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	021b      	lsls	r3, r3, #8
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	4313      	orrs	r3, r2
 800f252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	f023 0320 	bic.w	r3, r3, #32
 800f25a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	011b      	lsls	r3, r3, #4
 800f262:	697a      	ldr	r2, [r7, #20]
 800f264:	4313      	orrs	r3, r2
 800f266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4a22      	ldr	r2, [pc, #136]	; (800f2f4 <TIM_OC2_SetConfig+0xe4>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d003      	beq.n	800f278 <TIM_OC2_SetConfig+0x68>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	4a21      	ldr	r2, [pc, #132]	; (800f2f8 <TIM_OC2_SetConfig+0xe8>)
 800f274:	4293      	cmp	r3, r2
 800f276:	d10d      	bne.n	800f294 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f27e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	011b      	lsls	r3, r3, #4
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	4313      	orrs	r3, r2
 800f28a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a17      	ldr	r2, [pc, #92]	; (800f2f4 <TIM_OC2_SetConfig+0xe4>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d003      	beq.n	800f2a4 <TIM_OC2_SetConfig+0x94>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a16      	ldr	r2, [pc, #88]	; (800f2f8 <TIM_OC2_SetConfig+0xe8>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d113      	bne.n	800f2cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	695b      	ldr	r3, [r3, #20]
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	693a      	ldr	r2, [r7, #16]
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	699b      	ldr	r3, [r3, #24]
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	693a      	ldr	r2, [r7, #16]
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	693a      	ldr	r2, [r7, #16]
 800f2d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	685a      	ldr	r2, [r3, #4]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	697a      	ldr	r2, [r7, #20]
 800f2e4:	621a      	str	r2, [r3, #32]
}
 800f2e6:	bf00      	nop
 800f2e8:	371c      	adds	r7, #28
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr
 800f2f2:	bf00      	nop
 800f2f4:	40010000 	.word	0x40010000
 800f2f8:	40010400 	.word	0x40010400

0800f2fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b087      	sub	sp, #28
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a1b      	ldr	r3, [r3, #32]
 800f30a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6a1b      	ldr	r3, [r3, #32]
 800f316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	685b      	ldr	r3, [r3, #4]
 800f31c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	69db      	ldr	r3, [r3, #28]
 800f322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f32a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f023 0303 	bic.w	r3, r3, #3
 800f332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	4313      	orrs	r3, r2
 800f33c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	021b      	lsls	r3, r3, #8
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	4313      	orrs	r3, r2
 800f350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4a21      	ldr	r2, [pc, #132]	; (800f3dc <TIM_OC3_SetConfig+0xe0>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d003      	beq.n	800f362 <TIM_OC3_SetConfig+0x66>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4a20      	ldr	r2, [pc, #128]	; (800f3e0 <TIM_OC3_SetConfig+0xe4>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d10d      	bne.n	800f37e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	021b      	lsls	r3, r3, #8
 800f370:	697a      	ldr	r2, [r7, #20]
 800f372:	4313      	orrs	r3, r2
 800f374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f37c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a16      	ldr	r2, [pc, #88]	; (800f3dc <TIM_OC3_SetConfig+0xe0>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d003      	beq.n	800f38e <TIM_OC3_SetConfig+0x92>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a15      	ldr	r2, [pc, #84]	; (800f3e0 <TIM_OC3_SetConfig+0xe4>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d113      	bne.n	800f3b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f39c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	695b      	ldr	r3, [r3, #20]
 800f3a2:	011b      	lsls	r3, r3, #4
 800f3a4:	693a      	ldr	r2, [r7, #16]
 800f3a6:	4313      	orrs	r3, r2
 800f3a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	699b      	ldr	r3, [r3, #24]
 800f3ae:	011b      	lsls	r3, r3, #4
 800f3b0:	693a      	ldr	r2, [r7, #16]
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	693a      	ldr	r2, [r7, #16]
 800f3ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	685a      	ldr	r2, [r3, #4]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	697a      	ldr	r2, [r7, #20]
 800f3ce:	621a      	str	r2, [r3, #32]
}
 800f3d0:	bf00      	nop
 800f3d2:	371c      	adds	r7, #28
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr
 800f3dc:	40010000 	.word	0x40010000
 800f3e0:	40010400 	.word	0x40010400

0800f3e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b087      	sub	sp, #28
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6a1b      	ldr	r3, [r3, #32]
 800f3f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6a1b      	ldr	r3, [r3, #32]
 800f3fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	69db      	ldr	r3, [r3, #28]
 800f40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f41a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	021b      	lsls	r3, r3, #8
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	4313      	orrs	r3, r2
 800f426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f42e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	031b      	lsls	r3, r3, #12
 800f436:	693a      	ldr	r2, [r7, #16]
 800f438:	4313      	orrs	r3, r2
 800f43a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a12      	ldr	r2, [pc, #72]	; (800f488 <TIM_OC4_SetConfig+0xa4>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d003      	beq.n	800f44c <TIM_OC4_SetConfig+0x68>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4a11      	ldr	r2, [pc, #68]	; (800f48c <TIM_OC4_SetConfig+0xa8>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d109      	bne.n	800f460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	695b      	ldr	r3, [r3, #20]
 800f458:	019b      	lsls	r3, r3, #6
 800f45a:	697a      	ldr	r2, [r7, #20]
 800f45c:	4313      	orrs	r3, r2
 800f45e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	685a      	ldr	r2, [r3, #4]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	693a      	ldr	r2, [r7, #16]
 800f478:	621a      	str	r2, [r3, #32]
}
 800f47a:	bf00      	nop
 800f47c:	371c      	adds	r7, #28
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	40010000 	.word	0x40010000
 800f48c:	40010400 	.word	0x40010400

0800f490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f490:	b480      	push	{r7}
 800f492:	b087      	sub	sp, #28
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	6a1b      	ldr	r3, [r3, #32]
 800f4a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	6a1b      	ldr	r3, [r3, #32]
 800f4a6:	f023 0201 	bic.w	r2, r3, #1
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	699b      	ldr	r3, [r3, #24]
 800f4b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f4ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	011b      	lsls	r3, r3, #4
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	f023 030a 	bic.w	r3, r3, #10
 800f4cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f4ce:	697a      	ldr	r2, [r7, #20]
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	697a      	ldr	r2, [r7, #20]
 800f4e0:	621a      	str	r2, [r3, #32]
}
 800f4e2:	bf00      	nop
 800f4e4:	371c      	adds	r7, #28
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr

0800f4ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4ee:	b480      	push	{r7}
 800f4f0:	b087      	sub	sp, #28
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	60f8      	str	r0, [r7, #12]
 800f4f6:	60b9      	str	r1, [r7, #8]
 800f4f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	6a1b      	ldr	r3, [r3, #32]
 800f4fe:	f023 0210 	bic.w	r2, r3, #16
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	699b      	ldr	r3, [r3, #24]
 800f50a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6a1b      	ldr	r3, [r3, #32]
 800f510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	031b      	lsls	r3, r3, #12
 800f51e:	697a      	ldr	r2, [r7, #20]
 800f520:	4313      	orrs	r3, r2
 800f522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f52a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	011b      	lsls	r3, r3, #4
 800f530:	693a      	ldr	r2, [r7, #16]
 800f532:	4313      	orrs	r3, r2
 800f534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	697a      	ldr	r2, [r7, #20]
 800f53a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	693a      	ldr	r2, [r7, #16]
 800f540:	621a      	str	r2, [r3, #32]
}
 800f542:	bf00      	nop
 800f544:	371c      	adds	r7, #28
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr

0800f54e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f54e:	b480      	push	{r7}
 800f550:	b085      	sub	sp, #20
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
 800f556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	4313      	orrs	r3, r2
 800f56c:	f043 0307 	orr.w	r3, r3, #7
 800f570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	609a      	str	r2, [r3, #8]
}
 800f578:	bf00      	nop
 800f57a:	3714      	adds	r7, #20
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f584:	b480      	push	{r7}
 800f586:	b087      	sub	sp, #28
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	689b      	ldr	r3, [r3, #8]
 800f596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f59e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	021a      	lsls	r2, r3, #8
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	431a      	orrs	r2, r3
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	697a      	ldr	r2, [r7, #20]
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	697a      	ldr	r2, [r7, #20]
 800f5b6:	609a      	str	r2, [r3, #8]
}
 800f5b8:	bf00      	nop
 800f5ba:	371c      	adds	r7, #28
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b087      	sub	sp, #28
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	f003 031f 	and.w	r3, r3, #31
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f5dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6a1a      	ldr	r2, [r3, #32]
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	43db      	mvns	r3, r3
 800f5e6:	401a      	ands	r2, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	6a1a      	ldr	r2, [r3, #32]
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	f003 031f 	and.w	r3, r3, #31
 800f5f6:	6879      	ldr	r1, [r7, #4]
 800f5f8:	fa01 f303 	lsl.w	r3, r1, r3
 800f5fc:	431a      	orrs	r2, r3
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	621a      	str	r2, [r3, #32]
}
 800f602:	bf00      	nop
 800f604:	371c      	adds	r7, #28
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr
	...

0800f610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f610:	b480      	push	{r7}
 800f612:	b085      	sub	sp, #20
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f620:	2b01      	cmp	r3, #1
 800f622:	d101      	bne.n	800f628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f624:	2302      	movs	r3, #2
 800f626:	e05a      	b.n	800f6de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2202      	movs	r2, #2
 800f634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f64e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	68fa      	ldr	r2, [r7, #12]
 800f656:	4313      	orrs	r3, r2
 800f658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a21      	ldr	r2, [pc, #132]	; (800f6ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d022      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f674:	d01d      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a1d      	ldr	r2, [pc, #116]	; (800f6f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d018      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a1b      	ldr	r2, [pc, #108]	; (800f6f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d013      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a1a      	ldr	r2, [pc, #104]	; (800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d00e      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a18      	ldr	r2, [pc, #96]	; (800f6fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d009      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a17      	ldr	r2, [pc, #92]	; (800f700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d004      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a15      	ldr	r2, [pc, #84]	; (800f704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d10c      	bne.n	800f6cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	40010000 	.word	0x40010000
 800f6f0:	40000400 	.word	0x40000400
 800f6f4:	40000800 	.word	0x40000800
 800f6f8:	40000c00 	.word	0x40000c00
 800f6fc:	40010400 	.word	0x40010400
 800f700:	40014000 	.word	0x40014000
 800f704:	40001800 	.word	0x40001800

0800f708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f710:	bf00      	nop
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d101      	bne.n	800f742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	e03f      	b.n	800f7c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d106      	bne.n	800f75c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2200      	movs	r2, #0
 800f752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f7f4 f9fc 	bl	8003b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2224      	movs	r2, #36	; 0x24
 800f760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	68da      	ldr	r2, [r3, #12]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 ff43 	bl	8010600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	691a      	ldr	r2, [r3, #16]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	695a      	ldr	r2, [r3, #20]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	68da      	ldr	r2, [r3, #12]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2220      	movs	r2, #32
 800f7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2220      	movs	r2, #32
 800f7bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3708      	adds	r7, #8
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
	...

0800f7cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b08c      	sub	sp, #48	; 0x30
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2b20      	cmp	r3, #32
 800f7e4:	d165      	bne.n	800f8b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d002      	beq.n	800f7f2 <HAL_UART_Transmit_DMA+0x26>
 800f7ec:	88fb      	ldrh	r3, [r7, #6]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d101      	bne.n	800f7f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e05e      	b.n	800f8b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d101      	bne.n	800f804 <HAL_UART_Transmit_DMA+0x38>
 800f800:	2302      	movs	r3, #2
 800f802:	e057      	b.n	800f8b4 <HAL_UART_Transmit_DMA+0xe8>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2201      	movs	r2, #1
 800f808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f80c:	68ba      	ldr	r2, [r7, #8]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	88fa      	ldrh	r2, [r7, #6]
 800f816:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	88fa      	ldrh	r2, [r7, #6]
 800f81c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2200      	movs	r2, #0
 800f822:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2221      	movs	r2, #33	; 0x21
 800f828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f830:	4a22      	ldr	r2, [pc, #136]	; (800f8bc <HAL_UART_Transmit_DMA+0xf0>)
 800f832:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f838:	4a21      	ldr	r2, [pc, #132]	; (800f8c0 <HAL_UART_Transmit_DMA+0xf4>)
 800f83a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f840:	4a20      	ldr	r2, [pc, #128]	; (800f8c4 <HAL_UART_Transmit_DMA+0xf8>)
 800f842:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f848:	2200      	movs	r2, #0
 800f84a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800f84c:	f107 0308 	add.w	r3, r7, #8
 800f850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f858:	6819      	ldr	r1, [r3, #0]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	3304      	adds	r3, #4
 800f860:	461a      	mov	r2, r3
 800f862:	88fb      	ldrh	r3, [r7, #6]
 800f864:	f7fa fe7a 	bl	800a55c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f870:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2200      	movs	r2, #0
 800f876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	3314      	adds	r3, #20
 800f880:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f882:	69bb      	ldr	r3, [r7, #24]
 800f884:	e853 3f00 	ldrex	r3, [r3]
 800f888:	617b      	str	r3, [r7, #20]
   return(result);
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f890:	62bb      	str	r3, [r7, #40]	; 0x28
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3314      	adds	r3, #20
 800f898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f89a:	627a      	str	r2, [r7, #36]	; 0x24
 800f89c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f89e:	6a39      	ldr	r1, [r7, #32]
 800f8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8a2:	e841 2300 	strex	r3, r2, [r1]
 800f8a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d1e5      	bne.n	800f87a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	e000      	b.n	800f8b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800f8b2:	2302      	movs	r3, #2
  }
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3730      	adds	r7, #48	; 0x30
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	0800fe99 	.word	0x0800fe99
 800f8c0:	0800ff33 	.word	0x0800ff33
 800f8c4:	080100ab 	.word	0x080100ab

0800f8c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	4613      	mov	r3, r2
 800f8d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	2b20      	cmp	r3, #32
 800f8e0:	d11d      	bne.n	800f91e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <HAL_UART_Receive_DMA+0x26>
 800f8e8:	88fb      	ldrh	r3, [r7, #6]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d101      	bne.n	800f8f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e016      	b.n	800f920 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d101      	bne.n	800f900 <HAL_UART_Receive_DMA+0x38>
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	e00f      	b.n	800f920 <HAL_UART_Receive_DMA+0x58>
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2201      	movs	r2, #1
 800f904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2200      	movs	r2, #0
 800f90c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f90e:	88fb      	ldrh	r3, [r7, #6]
 800f910:	461a      	mov	r2, r3
 800f912:	68b9      	ldr	r1, [r7, #8]
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f000 fc13 	bl	8010140 <UART_Start_Receive_DMA>
 800f91a:	4603      	mov	r3, r0
 800f91c:	e000      	b.n	800f920 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f91e:	2302      	movs	r3, #2
  }
}
 800f920:	4618      	mov	r0, r3
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b0ba      	sub	sp, #232	; 0xe8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	695b      	ldr	r3, [r3, #20]
 800f94a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f94e:	2300      	movs	r3, #0
 800f950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f954:	2300      	movs	r3, #0
 800f956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f95a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f95e:	f003 030f 	and.w	r3, r3, #15
 800f962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d10f      	bne.n	800f98e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f972:	f003 0320 	and.w	r3, r3, #32
 800f976:	2b00      	cmp	r3, #0
 800f978:	d009      	beq.n	800f98e <HAL_UART_IRQHandler+0x66>
 800f97a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f97e:	f003 0320 	and.w	r3, r3, #32
 800f982:	2b00      	cmp	r3, #0
 800f984:	d003      	beq.n	800f98e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 fd7f 	bl	801048a <UART_Receive_IT>
      return;
 800f98c:	e256      	b.n	800fe3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f98e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f992:	2b00      	cmp	r3, #0
 800f994:	f000 80de 	beq.w	800fb54 <HAL_UART_IRQHandler+0x22c>
 800f998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f99c:	f003 0301 	and.w	r3, r3, #1
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d106      	bne.n	800f9b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	f000 80d1 	beq.w	800fb54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9b6:	f003 0301 	and.w	r3, r3, #1
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00b      	beq.n	800f9d6 <HAL_UART_IRQHandler+0xae>
 800f9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d005      	beq.n	800f9d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ce:	f043 0201 	orr.w	r2, r3, #1
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9da:	f003 0304 	and.w	r3, r3, #4
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d00b      	beq.n	800f9fa <HAL_UART_IRQHandler+0xd2>
 800f9e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f2:	f043 0202 	orr.w	r2, r3, #2
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9fe:	f003 0302 	and.w	r3, r3, #2
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d00b      	beq.n	800fa1e <HAL_UART_IRQHandler+0xf6>
 800fa06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa0a:	f003 0301 	and.w	r3, r3, #1
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d005      	beq.n	800fa1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa16:	f043 0204 	orr.w	r2, r3, #4
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800fa1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa22:	f003 0308 	and.w	r3, r3, #8
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d011      	beq.n	800fa4e <HAL_UART_IRQHandler+0x126>
 800fa2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa2e:	f003 0320 	and.w	r3, r3, #32
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d105      	bne.n	800fa42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fa36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa3a:	f003 0301 	and.w	r3, r3, #1
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d005      	beq.n	800fa4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa46:	f043 0208 	orr.w	r2, r3, #8
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f000 81ed 	beq.w	800fe32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fa58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa5c:	f003 0320 	and.w	r3, r3, #32
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d008      	beq.n	800fa76 <HAL_UART_IRQHandler+0x14e>
 800fa64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa68:	f003 0320 	and.w	r3, r3, #32
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d002      	beq.n	800fa76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 fd0a 	bl	801048a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	695b      	ldr	r3, [r3, #20]
 800fa7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa80:	2b40      	cmp	r3, #64	; 0x40
 800fa82:	bf0c      	ite	eq
 800fa84:	2301      	moveq	r3, #1
 800fa86:	2300      	movne	r3, #0
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa92:	f003 0308 	and.w	r3, r3, #8
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d103      	bne.n	800faa2 <HAL_UART_IRQHandler+0x17a>
 800fa9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d04f      	beq.n	800fb42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fc12 	bl	80102cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	695b      	ldr	r3, [r3, #20]
 800faae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fab2:	2b40      	cmp	r3, #64	; 0x40
 800fab4:	d141      	bne.n	800fb3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	3314      	adds	r3, #20
 800fabc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fac4:	e853 3f00 	ldrex	r3, [r3]
 800fac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800facc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	3314      	adds	r3, #20
 800fade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800faee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800faf2:	e841 2300 	strex	r3, r2, [r1]
 800faf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fafa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1d9      	bne.n	800fab6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d013      	beq.n	800fb32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb0e:	4a7d      	ldr	r2, [pc, #500]	; (800fd04 <HAL_UART_IRQHandler+0x3dc>)
 800fb10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fa fde8 	bl	800a6ec <HAL_DMA_Abort_IT>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d016      	beq.n	800fb50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fb2c:	4610      	mov	r0, r2
 800fb2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb30:	e00e      	b.n	800fb50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f99a 	bl	800fe6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb38:	e00a      	b.n	800fb50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 f996 	bl	800fe6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb40:	e006      	b.n	800fb50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 f992 	bl	800fe6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800fb4e:	e170      	b.n	800fe32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb50:	bf00      	nop
    return;
 800fb52:	e16e      	b.n	800fe32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	f040 814a 	bne.w	800fdf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fb5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb62:	f003 0310 	and.w	r3, r3, #16
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	f000 8143 	beq.w	800fdf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fb6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb70:	f003 0310 	and.w	r3, r3, #16
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f000 813c 	beq.w	800fdf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	60bb      	str	r3, [r7, #8]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	60bb      	str	r3, [r7, #8]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	60bb      	str	r3, [r7, #8]
 800fb8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb9a:	2b40      	cmp	r3, #64	; 0x40
 800fb9c:	f040 80b4 	bne.w	800fd08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fbac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 8140 	beq.w	800fe36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fbba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	f080 8139 	bcs.w	800fe36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fbca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd0:	69db      	ldr	r3, [r3, #28]
 800fbd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbd6:	f000 8088 	beq.w	800fcea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	330c      	adds	r3, #12
 800fbe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fbe8:	e853 3f00 	ldrex	r3, [r3]
 800fbec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fbf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fbf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	330c      	adds	r3, #12
 800fc02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fc06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fc0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fc12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fc16:	e841 2300 	strex	r3, r2, [r1]
 800fc1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fc1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1d9      	bne.n	800fbda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	3314      	adds	r3, #20
 800fc2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc30:	e853 3f00 	ldrex	r3, [r3]
 800fc34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fc36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc38:	f023 0301 	bic.w	r3, r3, #1
 800fc3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	3314      	adds	r3, #20
 800fc46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fc4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fc4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fc52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc56:	e841 2300 	strex	r3, r2, [r1]
 800fc5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fc5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d1e1      	bne.n	800fc26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	3314      	adds	r3, #20
 800fc68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc6c:	e853 3f00 	ldrex	r3, [r3]
 800fc70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fc72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	3314      	adds	r3, #20
 800fc82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fc86:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fc88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fc8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fc8e:	e841 2300 	strex	r3, r2, [r1]
 800fc92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fc94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1e3      	bne.n	800fc62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2220      	movs	r2, #32
 800fc9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	330c      	adds	r3, #12
 800fcae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcb2:	e853 3f00 	ldrex	r3, [r3]
 800fcb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fcb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcba:	f023 0310 	bic.w	r3, r3, #16
 800fcbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	330c      	adds	r3, #12
 800fcc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fccc:	65ba      	str	r2, [r7, #88]	; 0x58
 800fcce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcd4:	e841 2300 	strex	r3, r2, [r1]
 800fcd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fcda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1e3      	bne.n	800fca8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fa fc91 	bl	800a60c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 f8c0 	bl	800fe80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fd00:	e099      	b.n	800fe36 <HAL_UART_IRQHandler+0x50e>
 800fd02:	bf00      	nop
 800fd04:	08010393 	.word	0x08010393
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f000 808b 	beq.w	800fe3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800fd24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f000 8086 	beq.w	800fe3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	330c      	adds	r3, #12
 800fd34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd38:	e853 3f00 	ldrex	r3, [r3]
 800fd3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	330c      	adds	r3, #12
 800fd4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800fd52:	647a      	str	r2, [r7, #68]	; 0x44
 800fd54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd5a:	e841 2300 	strex	r3, r2, [r1]
 800fd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d1e3      	bne.n	800fd2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3314      	adds	r3, #20
 800fd6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd70:	e853 3f00 	ldrex	r3, [r3]
 800fd74:	623b      	str	r3, [r7, #32]
   return(result);
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	f023 0301 	bic.w	r3, r3, #1
 800fd7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	3314      	adds	r3, #20
 800fd86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fd8a:	633a      	str	r2, [r7, #48]	; 0x30
 800fd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd92:	e841 2300 	strex	r3, r2, [r1]
 800fd96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d1e3      	bne.n	800fd66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2220      	movs	r2, #32
 800fda2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	330c      	adds	r3, #12
 800fdb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	e853 3f00 	ldrex	r3, [r3]
 800fdba:	60fb      	str	r3, [r7, #12]
   return(result);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f023 0310 	bic.w	r3, r3, #16
 800fdc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	330c      	adds	r3, #12
 800fdcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fdd0:	61fa      	str	r2, [r7, #28]
 800fdd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd4:	69b9      	ldr	r1, [r7, #24]
 800fdd6:	69fa      	ldr	r2, [r7, #28]
 800fdd8:	e841 2300 	strex	r3, r2, [r1]
 800fddc:	617b      	str	r3, [r7, #20]
   return(result);
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d1e3      	bne.n	800fdac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fde4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fde8:	4619      	mov	r1, r3
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 f848 	bl	800fe80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fdf0:	e023      	b.n	800fe3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fdf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d009      	beq.n	800fe12 <HAL_UART_IRQHandler+0x4ea>
 800fdfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d003      	beq.n	800fe12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 fad5 	bl	80103ba <UART_Transmit_IT>
    return;
 800fe10:	e014      	b.n	800fe3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fe12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d00e      	beq.n	800fe3c <HAL_UART_IRQHandler+0x514>
 800fe1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d008      	beq.n	800fe3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 fb15 	bl	801045a <UART_EndTransmit_IT>
    return;
 800fe30:	e004      	b.n	800fe3c <HAL_UART_IRQHandler+0x514>
    return;
 800fe32:	bf00      	nop
 800fe34:	e002      	b.n	800fe3c <HAL_UART_IRQHandler+0x514>
      return;
 800fe36:	bf00      	nop
 800fe38:	e000      	b.n	800fe3c <HAL_UART_IRQHandler+0x514>
      return;
 800fe3a:	bf00      	nop
  }
}
 800fe3c:	37e8      	adds	r7, #232	; 0xe8
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop

0800fe44 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800fe4c:	bf00      	nop
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fe60:	bf00      	nop
 800fe62:	370c      	adds	r7, #12
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr

0800fe6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b083      	sub	sp, #12
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fe74:	bf00      	nop
 800fe76:	370c      	adds	r7, #12
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	460b      	mov	r3, r1
 800fe8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fe8c:	bf00      	nop
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b090      	sub	sp, #64	; 0x40
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d137      	bne.n	800ff24 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800feb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb6:	2200      	movs	r2, #0
 800feb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800feba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	3314      	adds	r3, #20
 800fec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec4:	e853 3f00 	ldrex	r3, [r3]
 800fec8:	623b      	str	r3, [r7, #32]
   return(result);
 800feca:	6a3b      	ldr	r3, [r7, #32]
 800fecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fed0:	63bb      	str	r3, [r7, #56]	; 0x38
 800fed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	3314      	adds	r3, #20
 800fed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800feda:	633a      	str	r2, [r7, #48]	; 0x30
 800fedc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fee2:	e841 2300 	strex	r3, r2, [r1]
 800fee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feea:	2b00      	cmp	r3, #0
 800feec:	d1e5      	bne.n	800feba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800feee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	330c      	adds	r3, #12
 800fef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	e853 3f00 	ldrex	r3, [r3]
 800fefc:	60fb      	str	r3, [r7, #12]
   return(result);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff04:	637b      	str	r3, [r7, #52]	; 0x34
 800ff06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	330c      	adds	r3, #12
 800ff0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff0e:	61fa      	str	r2, [r7, #28]
 800ff10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff12:	69b9      	ldr	r1, [r7, #24]
 800ff14:	69fa      	ldr	r2, [r7, #28]
 800ff16:	e841 2300 	strex	r3, r2, [r1]
 800ff1a:	617b      	str	r3, [r7, #20]
   return(result);
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1e5      	bne.n	800feee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ff22:	e002      	b.n	800ff2a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ff24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ff26:	f7f2 fd39 	bl	800299c <HAL_UART_TxCpltCallback>
}
 800ff2a:	bf00      	nop
 800ff2c:	3740      	adds	r7, #64	; 0x40
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b084      	sub	sp, #16
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f7ff ff7f 	bl	800fe44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff46:	bf00      	nop
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	b09c      	sub	sp, #112	; 0x70
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d172      	bne.n	8010050 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ff6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	330c      	adds	r3, #12
 800ff76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff7a:	e853 3f00 	ldrex	r3, [r3]
 800ff7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff86:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	330c      	adds	r3, #12
 800ff8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ff90:	65ba      	str	r2, [r7, #88]	; 0x58
 800ff92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff98:	e841 2300 	strex	r3, r2, [r1]
 800ff9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ff9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d1e5      	bne.n	800ff70 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	3314      	adds	r3, #20
 800ffaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffae:	e853 3f00 	ldrex	r3, [r3]
 800ffb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ffb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb6:	f023 0301 	bic.w	r3, r3, #1
 800ffba:	667b      	str	r3, [r7, #100]	; 0x64
 800ffbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	3314      	adds	r3, #20
 800ffc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ffc4:	647a      	str	r2, [r7, #68]	; 0x44
 800ffc6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ffca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffcc:	e841 2300 	strex	r3, r2, [r1]
 800ffd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ffd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d1e5      	bne.n	800ffa4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	3314      	adds	r3, #20
 800ffde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	e853 3f00 	ldrex	r3, [r3]
 800ffe6:	623b      	str	r3, [r7, #32]
   return(result);
 800ffe8:	6a3b      	ldr	r3, [r7, #32]
 800ffea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffee:	663b      	str	r3, [r7, #96]	; 0x60
 800fff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3314      	adds	r3, #20
 800fff6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fff8:	633a      	str	r2, [r7, #48]	; 0x30
 800fffa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fffc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010000:	e841 2300 	strex	r3, r2, [r1]
 8010004:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1e5      	bne.n	800ffd8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801000c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801000e:	2220      	movs	r2, #32
 8010010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010018:	2b01      	cmp	r3, #1
 801001a:	d119      	bne.n	8010050 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801001c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	330c      	adds	r3, #12
 8010022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	e853 3f00 	ldrex	r3, [r3]
 801002a:	60fb      	str	r3, [r7, #12]
   return(result);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	f023 0310 	bic.w	r3, r3, #16
 8010032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	330c      	adds	r3, #12
 801003a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801003c:	61fa      	str	r2, [r7, #28]
 801003e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010040:	69b9      	ldr	r1, [r7, #24]
 8010042:	69fa      	ldr	r2, [r7, #28]
 8010044:	e841 2300 	strex	r3, r2, [r1]
 8010048:	617b      	str	r3, [r7, #20]
   return(result);
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1e5      	bne.n	801001c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010054:	2b01      	cmp	r3, #1
 8010056:	d106      	bne.n	8010066 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801005a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801005c:	4619      	mov	r1, r3
 801005e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010060:	f7ff ff0e 	bl	800fe80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010064:	e002      	b.n	801006c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010066:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010068:	f7f2 fd40 	bl	8002aec <HAL_UART_RxCpltCallback>
}
 801006c:	bf00      	nop
 801006e:	3770      	adds	r7, #112	; 0x70
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010080:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010086:	2b01      	cmp	r3, #1
 8010088:	d108      	bne.n	801009c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801008e:	085b      	lsrs	r3, r3, #1
 8010090:	b29b      	uxth	r3, r3
 8010092:	4619      	mov	r1, r3
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f7ff fef3 	bl	800fe80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801009a:	e002      	b.n	80100a2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801009c:	68f8      	ldr	r0, [r7, #12]
 801009e:	f7ff fedb 	bl	800fe58 <HAL_UART_RxHalfCpltCallback>
}
 80100a2:	bf00      	nop
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b084      	sub	sp, #16
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80100b2:	2300      	movs	r3, #0
 80100b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	695b      	ldr	r3, [r3, #20]
 80100c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100c6:	2b80      	cmp	r3, #128	; 0x80
 80100c8:	bf0c      	ite	eq
 80100ca:	2301      	moveq	r3, #1
 80100cc:	2300      	movne	r3, #0
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	2b21      	cmp	r3, #33	; 0x21
 80100dc:	d108      	bne.n	80100f0 <UART_DMAError+0x46>
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d005      	beq.n	80100f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	2200      	movs	r2, #0
 80100e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80100ea:	68b8      	ldr	r0, [r7, #8]
 80100ec:	f000 f8c6 	bl	801027c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100fa:	2b40      	cmp	r3, #64	; 0x40
 80100fc:	bf0c      	ite	eq
 80100fe:	2301      	moveq	r3, #1
 8010100:	2300      	movne	r3, #0
 8010102:	b2db      	uxtb	r3, r3
 8010104:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801010c:	b2db      	uxtb	r3, r3
 801010e:	2b22      	cmp	r3, #34	; 0x22
 8010110:	d108      	bne.n	8010124 <UART_DMAError+0x7a>
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d005      	beq.n	8010124 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	2200      	movs	r2, #0
 801011c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801011e:	68b8      	ldr	r0, [r7, #8]
 8010120:	f000 f8d4 	bl	80102cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010128:	f043 0210 	orr.w	r2, r3, #16
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010130:	68b8      	ldr	r0, [r7, #8]
 8010132:	f7ff fe9b 	bl	800fe6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010136:	bf00      	nop
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
	...

08010140 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b098      	sub	sp, #96	; 0x60
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	4613      	mov	r3, r2
 801014c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	88fa      	ldrh	r2, [r7, #6]
 8010158:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2200      	movs	r2, #0
 801015e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2222      	movs	r2, #34	; 0x22
 8010164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801016c:	4a40      	ldr	r2, [pc, #256]	; (8010270 <UART_Start_Receive_DMA+0x130>)
 801016e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010174:	4a3f      	ldr	r2, [pc, #252]	; (8010274 <UART_Start_Receive_DMA+0x134>)
 8010176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801017c:	4a3e      	ldr	r2, [pc, #248]	; (8010278 <UART_Start_Receive_DMA+0x138>)
 801017e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010184:	2200      	movs	r2, #0
 8010186:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8010188:	f107 0308 	add.w	r3, r7, #8
 801018c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	3304      	adds	r3, #4
 8010198:	4619      	mov	r1, r3
 801019a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	88fb      	ldrh	r3, [r7, #6]
 80101a0:	f7fa f9dc 	bl	800a55c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80101a4:	2300      	movs	r3, #0
 80101a6:	613b      	str	r3, [r7, #16]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	613b      	str	r3, [r7, #16]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	613b      	str	r3, [r7, #16]
 80101b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2200      	movs	r2, #0
 80101be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	691b      	ldr	r3, [r3, #16]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d019      	beq.n	80101fe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	330c      	adds	r3, #12
 80101d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101d4:	e853 3f00 	ldrex	r3, [r3]
 80101d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80101da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	330c      	adds	r3, #12
 80101e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80101ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80101f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101f2:	e841 2300 	strex	r3, r2, [r1]
 80101f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80101f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d1e5      	bne.n	80101ca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3314      	adds	r3, #20
 8010204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010208:	e853 3f00 	ldrex	r3, [r3]
 801020c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801020e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010210:	f043 0301 	orr.w	r3, r3, #1
 8010214:	657b      	str	r3, [r7, #84]	; 0x54
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	3314      	adds	r3, #20
 801021c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801021e:	63ba      	str	r2, [r7, #56]	; 0x38
 8010220:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010222:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010226:	e841 2300 	strex	r3, r2, [r1]
 801022a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801022c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1e5      	bne.n	80101fe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	3314      	adds	r3, #20
 8010238:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	e853 3f00 	ldrex	r3, [r3]
 8010240:	617b      	str	r3, [r7, #20]
   return(result);
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010248:	653b      	str	r3, [r7, #80]	; 0x50
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	3314      	adds	r3, #20
 8010250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010252:	627a      	str	r2, [r7, #36]	; 0x24
 8010254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010256:	6a39      	ldr	r1, [r7, #32]
 8010258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801025a:	e841 2300 	strex	r3, r2, [r1]
 801025e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1e5      	bne.n	8010232 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8010266:	2300      	movs	r3, #0
}
 8010268:	4618      	mov	r0, r3
 801026a:	3760      	adds	r7, #96	; 0x60
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	0800ff4f 	.word	0x0800ff4f
 8010274:	08010075 	.word	0x08010075
 8010278:	080100ab 	.word	0x080100ab

0801027c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801027c:	b480      	push	{r7}
 801027e:	b089      	sub	sp, #36	; 0x24
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	330c      	adds	r3, #12
 801028a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	e853 3f00 	ldrex	r3, [r3]
 8010292:	60bb      	str	r3, [r7, #8]
   return(result);
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801029a:	61fb      	str	r3, [r7, #28]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	330c      	adds	r3, #12
 80102a2:	69fa      	ldr	r2, [r7, #28]
 80102a4:	61ba      	str	r2, [r7, #24]
 80102a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102a8:	6979      	ldr	r1, [r7, #20]
 80102aa:	69ba      	ldr	r2, [r7, #24]
 80102ac:	e841 2300 	strex	r3, r2, [r1]
 80102b0:	613b      	str	r3, [r7, #16]
   return(result);
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d1e5      	bne.n	8010284 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2220      	movs	r2, #32
 80102bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80102c0:	bf00      	nop
 80102c2:	3724      	adds	r7, #36	; 0x24
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b095      	sub	sp, #84	; 0x54
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	330c      	adds	r3, #12
 80102da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102de:	e853 3f00 	ldrex	r3, [r3]
 80102e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80102e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80102ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	330c      	adds	r3, #12
 80102f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80102f4:	643a      	str	r2, [r7, #64]	; 0x40
 80102f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80102fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102fc:	e841 2300 	strex	r3, r2, [r1]
 8010300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010304:	2b00      	cmp	r3, #0
 8010306:	d1e5      	bne.n	80102d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3314      	adds	r3, #20
 801030e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010310:	6a3b      	ldr	r3, [r7, #32]
 8010312:	e853 3f00 	ldrex	r3, [r3]
 8010316:	61fb      	str	r3, [r7, #28]
   return(result);
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	f023 0301 	bic.w	r3, r3, #1
 801031e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	3314      	adds	r3, #20
 8010326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010328:	62fa      	str	r2, [r7, #44]	; 0x2c
 801032a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801032c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801032e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010330:	e841 2300 	strex	r3, r2, [r1]
 8010334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1e5      	bne.n	8010308 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010340:	2b01      	cmp	r3, #1
 8010342:	d119      	bne.n	8010378 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	330c      	adds	r3, #12
 801034a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	e853 3f00 	ldrex	r3, [r3]
 8010352:	60bb      	str	r3, [r7, #8]
   return(result);
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	f023 0310 	bic.w	r3, r3, #16
 801035a:	647b      	str	r3, [r7, #68]	; 0x44
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	330c      	adds	r3, #12
 8010362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010364:	61ba      	str	r2, [r7, #24]
 8010366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010368:	6979      	ldr	r1, [r7, #20]
 801036a:	69ba      	ldr	r2, [r7, #24]
 801036c:	e841 2300 	strex	r3, r2, [r1]
 8010370:	613b      	str	r3, [r7, #16]
   return(result);
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d1e5      	bne.n	8010344 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2220      	movs	r2, #32
 801037c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010386:	bf00      	nop
 8010388:	3754      	adds	r7, #84	; 0x54
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr

08010392 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010392:	b580      	push	{r7, lr}
 8010394:	b084      	sub	sp, #16
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801039e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2200      	movs	r2, #0
 80103a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2200      	movs	r2, #0
 80103aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80103ac:	68f8      	ldr	r0, [r7, #12]
 80103ae:	f7ff fd5d 	bl	800fe6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103b2:	bf00      	nop
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80103ba:	b480      	push	{r7}
 80103bc:	b085      	sub	sp, #20
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b21      	cmp	r3, #33	; 0x21
 80103cc:	d13e      	bne.n	801044c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103d6:	d114      	bne.n	8010402 <UART_Transmit_IT+0x48>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	691b      	ldr	r3, [r3, #16]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d110      	bne.n	8010402 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6a1b      	ldr	r3, [r3, #32]
 80103e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	881b      	ldrh	r3, [r3, #0]
 80103ea:	461a      	mov	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80103f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6a1b      	ldr	r3, [r3, #32]
 80103fa:	1c9a      	adds	r2, r3, #2
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	621a      	str	r2, [r3, #32]
 8010400:	e008      	b.n	8010414 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6a1b      	ldr	r3, [r3, #32]
 8010406:	1c59      	adds	r1, r3, #1
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	6211      	str	r1, [r2, #32]
 801040c:	781a      	ldrb	r2, [r3, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010418:	b29b      	uxth	r3, r3
 801041a:	3b01      	subs	r3, #1
 801041c:	b29b      	uxth	r3, r3
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	4619      	mov	r1, r3
 8010422:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010424:	2b00      	cmp	r3, #0
 8010426:	d10f      	bne.n	8010448 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	68da      	ldr	r2, [r3, #12]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010436:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	68da      	ldr	r2, [r3, #12]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010446:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010448:	2300      	movs	r3, #0
 801044a:	e000      	b.n	801044e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801044c:	2302      	movs	r3, #2
  }
}
 801044e:	4618      	mov	r0, r3
 8010450:	3714      	adds	r7, #20
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr

0801045a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801045a:	b580      	push	{r7, lr}
 801045c:	b082      	sub	sp, #8
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	68da      	ldr	r2, [r3, #12]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010470:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2220      	movs	r2, #32
 8010476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7f2 fa8e 	bl	800299c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	3708      	adds	r7, #8
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b08c      	sub	sp, #48	; 0x30
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010498:	b2db      	uxtb	r3, r3
 801049a:	2b22      	cmp	r3, #34	; 0x22
 801049c:	f040 80ab 	bne.w	80105f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	689b      	ldr	r3, [r3, #8]
 80104a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104a8:	d117      	bne.n	80104da <UART_Receive_IT+0x50>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d113      	bne.n	80104da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80104b2:	2300      	movs	r3, #0
 80104b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104d2:	1c9a      	adds	r2, r3, #2
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	629a      	str	r2, [r3, #40]	; 0x28
 80104d8:	e026      	b.n	8010528 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80104e0:	2300      	movs	r3, #0
 80104e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104ec:	d007      	beq.n	80104fe <UART_Receive_IT+0x74>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d10a      	bne.n	801050c <UART_Receive_IT+0x82>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	691b      	ldr	r3, [r3, #16]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d106      	bne.n	801050c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	b2da      	uxtb	r2, r3
 8010506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010508:	701a      	strb	r2, [r3, #0]
 801050a:	e008      	b.n	801051e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	b2db      	uxtb	r3, r3
 8010514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010518:	b2da      	uxtb	r2, r3
 801051a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010522:	1c5a      	adds	r2, r3, #1
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801052c:	b29b      	uxth	r3, r3
 801052e:	3b01      	subs	r3, #1
 8010530:	b29b      	uxth	r3, r3
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	4619      	mov	r1, r3
 8010536:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010538:	2b00      	cmp	r3, #0
 801053a:	d15a      	bne.n	80105f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	68da      	ldr	r2, [r3, #12]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f022 0220 	bic.w	r2, r2, #32
 801054a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	68da      	ldr	r2, [r3, #12]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801055a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	695a      	ldr	r2, [r3, #20]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f022 0201 	bic.w	r2, r2, #1
 801056a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2220      	movs	r2, #32
 8010570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010578:	2b01      	cmp	r3, #1
 801057a:	d135      	bne.n	80105e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	330c      	adds	r3, #12
 8010588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	e853 3f00 	ldrex	r3, [r3]
 8010590:	613b      	str	r3, [r7, #16]
   return(result);
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	f023 0310 	bic.w	r3, r3, #16
 8010598:	627b      	str	r3, [r7, #36]	; 0x24
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	330c      	adds	r3, #12
 80105a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105a2:	623a      	str	r2, [r7, #32]
 80105a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a6:	69f9      	ldr	r1, [r7, #28]
 80105a8:	6a3a      	ldr	r2, [r7, #32]
 80105aa:	e841 2300 	strex	r3, r2, [r1]
 80105ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1e5      	bne.n	8010582 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f003 0310 	and.w	r3, r3, #16
 80105c0:	2b10      	cmp	r3, #16
 80105c2:	d10a      	bne.n	80105da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80105c4:	2300      	movs	r3, #0
 80105c6:	60fb      	str	r3, [r7, #12]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	60fb      	str	r3, [r7, #12]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	60fb      	str	r3, [r7, #12]
 80105d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80105de:	4619      	mov	r1, r3
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7ff fc4d 	bl	800fe80 <HAL_UARTEx_RxEventCallback>
 80105e6:	e002      	b.n	80105ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7f2 fa7f 	bl	8002aec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80105ee:	2300      	movs	r3, #0
 80105f0:	e002      	b.n	80105f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80105f2:	2300      	movs	r3, #0
 80105f4:	e000      	b.n	80105f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80105f6:	2302      	movs	r3, #2
  }
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3730      	adds	r7, #48	; 0x30
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010604:	b0c0      	sub	sp, #256	; 0x100
 8010606:	af00      	add	r7, sp, #0
 8010608:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801060c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	691b      	ldr	r3, [r3, #16]
 8010614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801061c:	68d9      	ldr	r1, [r3, #12]
 801061e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	ea40 0301 	orr.w	r3, r0, r1
 8010628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801062a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801062e:	689a      	ldr	r2, [r3, #8]
 8010630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010634:	691b      	ldr	r3, [r3, #16]
 8010636:	431a      	orrs	r2, r3
 8010638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801063c:	695b      	ldr	r3, [r3, #20]
 801063e:	431a      	orrs	r2, r3
 8010640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010644:	69db      	ldr	r3, [r3, #28]
 8010646:	4313      	orrs	r3, r2
 8010648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801064c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010658:	f021 010c 	bic.w	r1, r1, #12
 801065c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010666:	430b      	orrs	r3, r1
 8010668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801066a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	695b      	ldr	r3, [r3, #20]
 8010672:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801067a:	6999      	ldr	r1, [r3, #24]
 801067c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010680:	681a      	ldr	r2, [r3, #0]
 8010682:	ea40 0301 	orr.w	r3, r0, r1
 8010686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	4b8f      	ldr	r3, [pc, #572]	; (80108cc <UART_SetConfig+0x2cc>)
 8010690:	429a      	cmp	r2, r3
 8010692:	d005      	beq.n	80106a0 <UART_SetConfig+0xa0>
 8010694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	4b8d      	ldr	r3, [pc, #564]	; (80108d0 <UART_SetConfig+0x2d0>)
 801069c:	429a      	cmp	r2, r3
 801069e:	d104      	bne.n	80106aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80106a0:	f7fc fc58 	bl	800cf54 <HAL_RCC_GetPCLK2Freq>
 80106a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80106a8:	e003      	b.n	80106b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80106aa:	f7fc fc3f 	bl	800cf2c <HAL_RCC_GetPCLK1Freq>
 80106ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80106b6:	69db      	ldr	r3, [r3, #28]
 80106b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106bc:	f040 810c 	bne.w	80108d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80106c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80106c4:	2200      	movs	r2, #0
 80106c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80106ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80106ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80106d2:	4622      	mov	r2, r4
 80106d4:	462b      	mov	r3, r5
 80106d6:	1891      	adds	r1, r2, r2
 80106d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80106da:	415b      	adcs	r3, r3
 80106dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80106e2:	4621      	mov	r1, r4
 80106e4:	eb12 0801 	adds.w	r8, r2, r1
 80106e8:	4629      	mov	r1, r5
 80106ea:	eb43 0901 	adc.w	r9, r3, r1
 80106ee:	f04f 0200 	mov.w	r2, #0
 80106f2:	f04f 0300 	mov.w	r3, #0
 80106f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80106fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80106fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010702:	4690      	mov	r8, r2
 8010704:	4699      	mov	r9, r3
 8010706:	4623      	mov	r3, r4
 8010708:	eb18 0303 	adds.w	r3, r8, r3
 801070c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010710:	462b      	mov	r3, r5
 8010712:	eb49 0303 	adc.w	r3, r9, r3
 8010716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801071a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	2200      	movs	r2, #0
 8010722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010726:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801072a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801072e:	460b      	mov	r3, r1
 8010730:	18db      	adds	r3, r3, r3
 8010732:	653b      	str	r3, [r7, #80]	; 0x50
 8010734:	4613      	mov	r3, r2
 8010736:	eb42 0303 	adc.w	r3, r2, r3
 801073a:	657b      	str	r3, [r7, #84]	; 0x54
 801073c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010744:	f7f0 fa30 	bl	8000ba8 <__aeabi_uldivmod>
 8010748:	4602      	mov	r2, r0
 801074a:	460b      	mov	r3, r1
 801074c:	4b61      	ldr	r3, [pc, #388]	; (80108d4 <UART_SetConfig+0x2d4>)
 801074e:	fba3 2302 	umull	r2, r3, r3, r2
 8010752:	095b      	lsrs	r3, r3, #5
 8010754:	011c      	lsls	r4, r3, #4
 8010756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801075a:	2200      	movs	r2, #0
 801075c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010760:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010768:	4642      	mov	r2, r8
 801076a:	464b      	mov	r3, r9
 801076c:	1891      	adds	r1, r2, r2
 801076e:	64b9      	str	r1, [r7, #72]	; 0x48
 8010770:	415b      	adcs	r3, r3
 8010772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010778:	4641      	mov	r1, r8
 801077a:	eb12 0a01 	adds.w	sl, r2, r1
 801077e:	4649      	mov	r1, r9
 8010780:	eb43 0b01 	adc.w	fp, r3, r1
 8010784:	f04f 0200 	mov.w	r2, #0
 8010788:	f04f 0300 	mov.w	r3, #0
 801078c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010798:	4692      	mov	sl, r2
 801079a:	469b      	mov	fp, r3
 801079c:	4643      	mov	r3, r8
 801079e:	eb1a 0303 	adds.w	r3, sl, r3
 80107a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80107a6:	464b      	mov	r3, r9
 80107a8:	eb4b 0303 	adc.w	r3, fp, r3
 80107ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80107b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80107bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80107c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80107c4:	460b      	mov	r3, r1
 80107c6:	18db      	adds	r3, r3, r3
 80107c8:	643b      	str	r3, [r7, #64]	; 0x40
 80107ca:	4613      	mov	r3, r2
 80107cc:	eb42 0303 	adc.w	r3, r2, r3
 80107d0:	647b      	str	r3, [r7, #68]	; 0x44
 80107d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80107d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80107da:	f7f0 f9e5 	bl	8000ba8 <__aeabi_uldivmod>
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	4611      	mov	r1, r2
 80107e4:	4b3b      	ldr	r3, [pc, #236]	; (80108d4 <UART_SetConfig+0x2d4>)
 80107e6:	fba3 2301 	umull	r2, r3, r3, r1
 80107ea:	095b      	lsrs	r3, r3, #5
 80107ec:	2264      	movs	r2, #100	; 0x64
 80107ee:	fb02 f303 	mul.w	r3, r2, r3
 80107f2:	1acb      	subs	r3, r1, r3
 80107f4:	00db      	lsls	r3, r3, #3
 80107f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80107fa:	4b36      	ldr	r3, [pc, #216]	; (80108d4 <UART_SetConfig+0x2d4>)
 80107fc:	fba3 2302 	umull	r2, r3, r3, r2
 8010800:	095b      	lsrs	r3, r3, #5
 8010802:	005b      	lsls	r3, r3, #1
 8010804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010808:	441c      	add	r4, r3
 801080a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801080e:	2200      	movs	r2, #0
 8010810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010814:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801081c:	4642      	mov	r2, r8
 801081e:	464b      	mov	r3, r9
 8010820:	1891      	adds	r1, r2, r2
 8010822:	63b9      	str	r1, [r7, #56]	; 0x38
 8010824:	415b      	adcs	r3, r3
 8010826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801082c:	4641      	mov	r1, r8
 801082e:	1851      	adds	r1, r2, r1
 8010830:	6339      	str	r1, [r7, #48]	; 0x30
 8010832:	4649      	mov	r1, r9
 8010834:	414b      	adcs	r3, r1
 8010836:	637b      	str	r3, [r7, #52]	; 0x34
 8010838:	f04f 0200 	mov.w	r2, #0
 801083c:	f04f 0300 	mov.w	r3, #0
 8010840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010844:	4659      	mov	r1, fp
 8010846:	00cb      	lsls	r3, r1, #3
 8010848:	4651      	mov	r1, sl
 801084a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801084e:	4651      	mov	r1, sl
 8010850:	00ca      	lsls	r2, r1, #3
 8010852:	4610      	mov	r0, r2
 8010854:	4619      	mov	r1, r3
 8010856:	4603      	mov	r3, r0
 8010858:	4642      	mov	r2, r8
 801085a:	189b      	adds	r3, r3, r2
 801085c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010860:	464b      	mov	r3, r9
 8010862:	460a      	mov	r2, r1
 8010864:	eb42 0303 	adc.w	r3, r2, r3
 8010868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801086c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	2200      	movs	r2, #0
 8010874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010878:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801087c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010880:	460b      	mov	r3, r1
 8010882:	18db      	adds	r3, r3, r3
 8010884:	62bb      	str	r3, [r7, #40]	; 0x28
 8010886:	4613      	mov	r3, r2
 8010888:	eb42 0303 	adc.w	r3, r2, r3
 801088c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801088e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8010896:	f7f0 f987 	bl	8000ba8 <__aeabi_uldivmod>
 801089a:	4602      	mov	r2, r0
 801089c:	460b      	mov	r3, r1
 801089e:	4b0d      	ldr	r3, [pc, #52]	; (80108d4 <UART_SetConfig+0x2d4>)
 80108a0:	fba3 1302 	umull	r1, r3, r3, r2
 80108a4:	095b      	lsrs	r3, r3, #5
 80108a6:	2164      	movs	r1, #100	; 0x64
 80108a8:	fb01 f303 	mul.w	r3, r1, r3
 80108ac:	1ad3      	subs	r3, r2, r3
 80108ae:	00db      	lsls	r3, r3, #3
 80108b0:	3332      	adds	r3, #50	; 0x32
 80108b2:	4a08      	ldr	r2, [pc, #32]	; (80108d4 <UART_SetConfig+0x2d4>)
 80108b4:	fba2 2303 	umull	r2, r3, r2, r3
 80108b8:	095b      	lsrs	r3, r3, #5
 80108ba:	f003 0207 	and.w	r2, r3, #7
 80108be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4422      	add	r2, r4
 80108c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80108c8:	e105      	b.n	8010ad6 <UART_SetConfig+0x4d6>
 80108ca:	bf00      	nop
 80108cc:	40011000 	.word	0x40011000
 80108d0:	40011400 	.word	0x40011400
 80108d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80108d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80108dc:	2200      	movs	r2, #0
 80108de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80108e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80108e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80108ea:	4642      	mov	r2, r8
 80108ec:	464b      	mov	r3, r9
 80108ee:	1891      	adds	r1, r2, r2
 80108f0:	6239      	str	r1, [r7, #32]
 80108f2:	415b      	adcs	r3, r3
 80108f4:	627b      	str	r3, [r7, #36]	; 0x24
 80108f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80108fa:	4641      	mov	r1, r8
 80108fc:	1854      	adds	r4, r2, r1
 80108fe:	4649      	mov	r1, r9
 8010900:	eb43 0501 	adc.w	r5, r3, r1
 8010904:	f04f 0200 	mov.w	r2, #0
 8010908:	f04f 0300 	mov.w	r3, #0
 801090c:	00eb      	lsls	r3, r5, #3
 801090e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010912:	00e2      	lsls	r2, r4, #3
 8010914:	4614      	mov	r4, r2
 8010916:	461d      	mov	r5, r3
 8010918:	4643      	mov	r3, r8
 801091a:	18e3      	adds	r3, r4, r3
 801091c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010920:	464b      	mov	r3, r9
 8010922:	eb45 0303 	adc.w	r3, r5, r3
 8010926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801092a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	2200      	movs	r2, #0
 8010932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801093a:	f04f 0200 	mov.w	r2, #0
 801093e:	f04f 0300 	mov.w	r3, #0
 8010942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010946:	4629      	mov	r1, r5
 8010948:	008b      	lsls	r3, r1, #2
 801094a:	4621      	mov	r1, r4
 801094c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010950:	4621      	mov	r1, r4
 8010952:	008a      	lsls	r2, r1, #2
 8010954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010958:	f7f0 f926 	bl	8000ba8 <__aeabi_uldivmod>
 801095c:	4602      	mov	r2, r0
 801095e:	460b      	mov	r3, r1
 8010960:	4b60      	ldr	r3, [pc, #384]	; (8010ae4 <UART_SetConfig+0x4e4>)
 8010962:	fba3 2302 	umull	r2, r3, r3, r2
 8010966:	095b      	lsrs	r3, r3, #5
 8010968:	011c      	lsls	r4, r3, #4
 801096a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801096e:	2200      	movs	r2, #0
 8010970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801097c:	4642      	mov	r2, r8
 801097e:	464b      	mov	r3, r9
 8010980:	1891      	adds	r1, r2, r2
 8010982:	61b9      	str	r1, [r7, #24]
 8010984:	415b      	adcs	r3, r3
 8010986:	61fb      	str	r3, [r7, #28]
 8010988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801098c:	4641      	mov	r1, r8
 801098e:	1851      	adds	r1, r2, r1
 8010990:	6139      	str	r1, [r7, #16]
 8010992:	4649      	mov	r1, r9
 8010994:	414b      	adcs	r3, r1
 8010996:	617b      	str	r3, [r7, #20]
 8010998:	f04f 0200 	mov.w	r2, #0
 801099c:	f04f 0300 	mov.w	r3, #0
 80109a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80109a4:	4659      	mov	r1, fp
 80109a6:	00cb      	lsls	r3, r1, #3
 80109a8:	4651      	mov	r1, sl
 80109aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80109ae:	4651      	mov	r1, sl
 80109b0:	00ca      	lsls	r2, r1, #3
 80109b2:	4610      	mov	r0, r2
 80109b4:	4619      	mov	r1, r3
 80109b6:	4603      	mov	r3, r0
 80109b8:	4642      	mov	r2, r8
 80109ba:	189b      	adds	r3, r3, r2
 80109bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80109c0:	464b      	mov	r3, r9
 80109c2:	460a      	mov	r2, r1
 80109c4:	eb42 0303 	adc.w	r3, r2, r3
 80109c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	2200      	movs	r2, #0
 80109d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80109d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80109d8:	f04f 0200 	mov.w	r2, #0
 80109dc:	f04f 0300 	mov.w	r3, #0
 80109e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80109e4:	4649      	mov	r1, r9
 80109e6:	008b      	lsls	r3, r1, #2
 80109e8:	4641      	mov	r1, r8
 80109ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80109ee:	4641      	mov	r1, r8
 80109f0:	008a      	lsls	r2, r1, #2
 80109f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80109f6:	f7f0 f8d7 	bl	8000ba8 <__aeabi_uldivmod>
 80109fa:	4602      	mov	r2, r0
 80109fc:	460b      	mov	r3, r1
 80109fe:	4b39      	ldr	r3, [pc, #228]	; (8010ae4 <UART_SetConfig+0x4e4>)
 8010a00:	fba3 1302 	umull	r1, r3, r3, r2
 8010a04:	095b      	lsrs	r3, r3, #5
 8010a06:	2164      	movs	r1, #100	; 0x64
 8010a08:	fb01 f303 	mul.w	r3, r1, r3
 8010a0c:	1ad3      	subs	r3, r2, r3
 8010a0e:	011b      	lsls	r3, r3, #4
 8010a10:	3332      	adds	r3, #50	; 0x32
 8010a12:	4a34      	ldr	r2, [pc, #208]	; (8010ae4 <UART_SetConfig+0x4e4>)
 8010a14:	fba2 2303 	umull	r2, r3, r2, r3
 8010a18:	095b      	lsrs	r3, r3, #5
 8010a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a1e:	441c      	add	r4, r3
 8010a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a24:	2200      	movs	r2, #0
 8010a26:	673b      	str	r3, [r7, #112]	; 0x70
 8010a28:	677a      	str	r2, [r7, #116]	; 0x74
 8010a2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8010a2e:	4642      	mov	r2, r8
 8010a30:	464b      	mov	r3, r9
 8010a32:	1891      	adds	r1, r2, r2
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	415b      	adcs	r3, r3
 8010a38:	60fb      	str	r3, [r7, #12]
 8010a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a3e:	4641      	mov	r1, r8
 8010a40:	1851      	adds	r1, r2, r1
 8010a42:	6039      	str	r1, [r7, #0]
 8010a44:	4649      	mov	r1, r9
 8010a46:	414b      	adcs	r3, r1
 8010a48:	607b      	str	r3, [r7, #4]
 8010a4a:	f04f 0200 	mov.w	r2, #0
 8010a4e:	f04f 0300 	mov.w	r3, #0
 8010a52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010a56:	4659      	mov	r1, fp
 8010a58:	00cb      	lsls	r3, r1, #3
 8010a5a:	4651      	mov	r1, sl
 8010a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010a60:	4651      	mov	r1, sl
 8010a62:	00ca      	lsls	r2, r1, #3
 8010a64:	4610      	mov	r0, r2
 8010a66:	4619      	mov	r1, r3
 8010a68:	4603      	mov	r3, r0
 8010a6a:	4642      	mov	r2, r8
 8010a6c:	189b      	adds	r3, r3, r2
 8010a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a70:	464b      	mov	r3, r9
 8010a72:	460a      	mov	r2, r1
 8010a74:	eb42 0303 	adc.w	r3, r2, r3
 8010a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	663b      	str	r3, [r7, #96]	; 0x60
 8010a84:	667a      	str	r2, [r7, #100]	; 0x64
 8010a86:	f04f 0200 	mov.w	r2, #0
 8010a8a:	f04f 0300 	mov.w	r3, #0
 8010a8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8010a92:	4649      	mov	r1, r9
 8010a94:	008b      	lsls	r3, r1, #2
 8010a96:	4641      	mov	r1, r8
 8010a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010a9c:	4641      	mov	r1, r8
 8010a9e:	008a      	lsls	r2, r1, #2
 8010aa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010aa4:	f7f0 f880 	bl	8000ba8 <__aeabi_uldivmod>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	4b0d      	ldr	r3, [pc, #52]	; (8010ae4 <UART_SetConfig+0x4e4>)
 8010aae:	fba3 1302 	umull	r1, r3, r3, r2
 8010ab2:	095b      	lsrs	r3, r3, #5
 8010ab4:	2164      	movs	r1, #100	; 0x64
 8010ab6:	fb01 f303 	mul.w	r3, r1, r3
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	011b      	lsls	r3, r3, #4
 8010abe:	3332      	adds	r3, #50	; 0x32
 8010ac0:	4a08      	ldr	r2, [pc, #32]	; (8010ae4 <UART_SetConfig+0x4e4>)
 8010ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ac6:	095b      	lsrs	r3, r3, #5
 8010ac8:	f003 020f 	and.w	r2, r3, #15
 8010acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4422      	add	r2, r4
 8010ad4:	609a      	str	r2, [r3, #8]
}
 8010ad6:	bf00      	nop
 8010ad8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8010adc:	46bd      	mov	sp, r7
 8010ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010ae2:	bf00      	nop
 8010ae4:	51eb851f 	.word	0x51eb851f

08010ae8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010ae8:	b084      	sub	sp, #16
 8010aea:	b480      	push	{r7}
 8010aec:	b085      	sub	sp, #20
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
 8010af2:	f107 001c 	add.w	r0, r7, #28
 8010af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010afa:	2300      	movs	r3, #0
 8010afc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010afe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010b00:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010b02:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010b06:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010b0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010b0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010b12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010b14:	68fa      	ldr	r2, [r7, #12]
 8010b16:	4313      	orrs	r3, r2
 8010b18:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010b22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010b26:	68fa      	ldr	r2, [r7, #12]
 8010b28:	431a      	orrs	r2, r3
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010b2e:	2300      	movs	r3, #0
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3714      	adds	r7, #20
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	b004      	add	sp, #16
 8010b3c:	4770      	bx	lr

08010b3e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010b3e:	b480      	push	{r7}
 8010b40:	b083      	sub	sp, #12
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2203      	movs	r2, #3
 8010b64:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	370c      	adds	r7, #12
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f003 0303 	and.w	r3, r3, #3
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	370c      	adds	r7, #12
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr

08010b90 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010bae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010bb4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010bba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	4313      	orrs	r3, r2
 8010bc0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	68db      	ldr	r3, [r3, #12]
 8010bc6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010bca:	f023 030f 	bic.w	r3, r3, #15
 8010bce:	68fa      	ldr	r2, [r7, #12]
 8010bd0:	431a      	orrs	r2, r3
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3714      	adds	r7, #20
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	691b      	ldr	r3, [r3, #16]
 8010bf0:	b2db      	uxtb	r3, r3
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	370c      	adds	r7, #12
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr

08010bfe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010bfe:	b480      	push	{r7}
 8010c00:	b085      	sub	sp, #20
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	3314      	adds	r3, #20
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	4413      	add	r3, r2
 8010c12:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
}  
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3714      	adds	r7, #20
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr

08010c24 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b085      	sub	sp, #20
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	685a      	ldr	r2, [r3, #4]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c4a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010c50:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010c56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c58:	68fa      	ldr	r2, [r7, #12]
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c62:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	431a      	orrs	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010c6e:	2300      	movs	r3, #0

}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b088      	sub	sp, #32
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010c8a:	2310      	movs	r3, #16
 8010c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c8e:	2340      	movs	r3, #64	; 0x40
 8010c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c92:	2300      	movs	r3, #0
 8010c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c9c:	f107 0308 	add.w	r3, r7, #8
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f7ff ff74 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cac:	2110      	movs	r1, #16
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f000 f94c 	bl	8010f4c <SDMMC_GetCmdResp1>
 8010cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cb6:	69fb      	ldr	r3, [r7, #28]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3720      	adds	r7, #32
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b08a      	sub	sp, #40	; 0x28
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010cd0:	2307      	movs	r3, #7
 8010cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010cd4:	2340      	movs	r3, #64	; 0x40
 8010cd6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ce0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ce2:	f107 0310 	add.w	r3, r7, #16
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f7ff ff51 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cf2:	2107      	movs	r1, #7
 8010cf4:	68f8      	ldr	r0, [r7, #12]
 8010cf6:	f000 f929 	bl	8010f4c <SDMMC_GetCmdResp1>
 8010cfa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3728      	adds	r7, #40	; 0x28
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}

08010d06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010d06:	b580      	push	{r7, lr}
 8010d08:	b088      	sub	sp, #32
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010d12:	2300      	movs	r3, #0
 8010d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010d16:	2300      	movs	r3, #0
 8010d18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d24:	f107 0308 	add.w	r3, r7, #8
 8010d28:	4619      	mov	r1, r3
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f7ff ff30 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 fb43 	bl	80113bc <SDMMC_GetCmdError>
 8010d36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d38:	69fb      	ldr	r3, [r7, #28]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3720      	adds	r7, #32
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b088      	sub	sp, #32
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010d4a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010d4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010d50:	2308      	movs	r3, #8
 8010d52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d54:	2340      	movs	r3, #64	; 0x40
 8010d56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d62:	f107 0308 	add.w	r3, r7, #8
 8010d66:	4619      	mov	r1, r3
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f7ff ff11 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 fad6 	bl	8011320 <SDMMC_GetCmdResp7>
 8010d74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d76:	69fb      	ldr	r3, [r7, #28]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3720      	adds	r7, #32
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b088      	sub	sp, #32
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010d8e:	2337      	movs	r3, #55	; 0x37
 8010d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d92:	2340      	movs	r3, #64	; 0x40
 8010d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d96:	2300      	movs	r3, #0
 8010d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010da0:	f107 0308 	add.w	r3, r7, #8
 8010da4:	4619      	mov	r1, r3
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7ff fef2 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8010db0:	2137      	movs	r1, #55	; 0x37
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 f8ca 	bl	8010f4c <SDMMC_GetCmdResp1>
 8010db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dba:	69fb      	ldr	r3, [r7, #28]
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3720      	adds	r7, #32
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b088      	sub	sp, #32
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010dda:	2329      	movs	r3, #41	; 0x29
 8010ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010dde:	2340      	movs	r3, #64	; 0x40
 8010de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010de2:	2300      	movs	r3, #0
 8010de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010dec:	f107 0308 	add.w	r3, r7, #8
 8010df0:	4619      	mov	r1, r3
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7ff fecc 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f000 f9dd 	bl	80111b8 <SDMMC_GetCmdResp3>
 8010dfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e00:	69fb      	ldr	r3, [r7, #28]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3720      	adds	r7, #32
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b088      	sub	sp, #32
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010e18:	2306      	movs	r3, #6
 8010e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e1c:	2340      	movs	r3, #64	; 0x40
 8010e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e20:	2300      	movs	r3, #0
 8010e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e2a:	f107 0308 	add.w	r3, r7, #8
 8010e2e:	4619      	mov	r1, r3
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7ff fead 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e3a:	2106      	movs	r1, #6
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 f885 	bl	8010f4c <SDMMC_GetCmdResp1>
 8010e42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e44:	69fb      	ldr	r3, [r7, #28]
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3720      	adds	r7, #32
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}

08010e4e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b088      	sub	sp, #32
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010e56:	2300      	movs	r3, #0
 8010e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010e5a:	2333      	movs	r3, #51	; 0x33
 8010e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e5e:	2340      	movs	r3, #64	; 0x40
 8010e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e62:	2300      	movs	r3, #0
 8010e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e6c:	f107 0308 	add.w	r3, r7, #8
 8010e70:	4619      	mov	r1, r3
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff fe8c 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e7c:	2133      	movs	r1, #51	; 0x33
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f000 f864 	bl	8010f4c <SDMMC_GetCmdResp1>
 8010e84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e86:	69fb      	ldr	r3, [r7, #28]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3720      	adds	r7, #32
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b088      	sub	sp, #32
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010e9c:	2302      	movs	r3, #2
 8010e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010ea0:	23c0      	movs	r3, #192	; 0xc0
 8010ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010eae:	f107 0308 	add.w	r3, r7, #8
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f7ff fe6b 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f000 f934 	bl	8011128 <SDMMC_GetCmdResp2>
 8010ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ec2:	69fb      	ldr	r3, [r7, #28]
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3720      	adds	r7, #32
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b088      	sub	sp, #32
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010eda:	2309      	movs	r3, #9
 8010edc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010ede:	23c0      	movs	r3, #192	; 0xc0
 8010ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010eec:	f107 0308 	add.w	r3, r7, #8
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f7ff fe4c 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f000 f915 	bl	8011128 <SDMMC_GetCmdResp2>
 8010efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f00:	69fb      	ldr	r3, [r7, #28]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3720      	adds	r7, #32
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}

08010f0a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b088      	sub	sp, #32
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
 8010f12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010f14:	2300      	movs	r3, #0
 8010f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010f18:	2303      	movs	r3, #3
 8010f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010f1c:	2340      	movs	r3, #64	; 0x40
 8010f1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010f20:	2300      	movs	r3, #0
 8010f22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010f2a:	f107 0308 	add.w	r3, r7, #8
 8010f2e:	4619      	mov	r1, r3
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f7ff fe2d 	bl	8010b90 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010f36:	683a      	ldr	r2, [r7, #0]
 8010f38:	2103      	movs	r1, #3
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 f97a 	bl	8011234 <SDMMC_GetCmdResp6>
 8010f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f42:	69fb      	ldr	r3, [r7, #28]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3720      	adds	r7, #32
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b088      	sub	sp, #32
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	460b      	mov	r3, r1
 8010f56:	607a      	str	r2, [r7, #4]
 8010f58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010f5a:	4b70      	ldr	r3, [pc, #448]	; (801111c <SDMMC_GetCmdResp1+0x1d0>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4a70      	ldr	r2, [pc, #448]	; (8011120 <SDMMC_GetCmdResp1+0x1d4>)
 8010f60:	fba2 2303 	umull	r2, r3, r2, r3
 8010f64:	0a5a      	lsrs	r2, r3, #9
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	fb02 f303 	mul.w	r3, r2, r3
 8010f6c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	1e5a      	subs	r2, r3, #1
 8010f72:	61fa      	str	r2, [r7, #28]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d102      	bne.n	8010f7e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f7c:	e0c9      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f82:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f84:	69bb      	ldr	r3, [r7, #24]
 8010f86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d0ef      	beq.n	8010f6e <SDMMC_GetCmdResp1+0x22>
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1ea      	bne.n	8010f6e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f9c:	f003 0304 	and.w	r3, r3, #4
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d004      	beq.n	8010fae <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2204      	movs	r2, #4
 8010fa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010faa:	2304      	movs	r3, #4
 8010fac:	e0b1      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb2:	f003 0301 	and.w	r3, r3, #1
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d004      	beq.n	8010fc4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	e0a6      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	22c5      	movs	r2, #197	; 0xc5
 8010fc8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f7ff fe0a 	bl	8010be4 <SDIO_GetCommandResponse>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	7afb      	ldrb	r3, [r7, #11]
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	d001      	beq.n	8010fde <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e099      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010fde:	2100      	movs	r1, #0
 8010fe0:	68f8      	ldr	r0, [r7, #12]
 8010fe2:	f7ff fe0c 	bl	8010bfe <SDIO_GetResponse>
 8010fe6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010fe8:	697a      	ldr	r2, [r7, #20]
 8010fea:	4b4e      	ldr	r3, [pc, #312]	; (8011124 <SDMMC_GetCmdResp1+0x1d8>)
 8010fec:	4013      	ands	r3, r2
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d101      	bne.n	8010ff6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	e08d      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	da02      	bge.n	8011002 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010ffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011000:	e087      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011008:	2b00      	cmp	r3, #0
 801100a:	d001      	beq.n	8011010 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801100c:	2340      	movs	r3, #64	; 0x40
 801100e:	e080      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011016:	2b00      	cmp	r3, #0
 8011018:	d001      	beq.n	801101e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801101a:	2380      	movs	r3, #128	; 0x80
 801101c:	e079      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011024:	2b00      	cmp	r3, #0
 8011026:	d002      	beq.n	801102e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011028:	f44f 7380 	mov.w	r3, #256	; 0x100
 801102c:	e071      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011038:	f44f 7300 	mov.w	r3, #512	; 0x200
 801103c:	e069      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011044:	2b00      	cmp	r3, #0
 8011046:	d002      	beq.n	801104e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801104c:	e061      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801105c:	e059      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011064:	2b00      	cmp	r3, #0
 8011066:	d002      	beq.n	801106e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801106c:	e051      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801107c:	e049      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011084:	2b00      	cmp	r3, #0
 8011086:	d002      	beq.n	801108e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801108c:	e041      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011094:	2b00      	cmp	r3, #0
 8011096:	d002      	beq.n	801109e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801109c:	e039      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d002      	beq.n	80110ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80110a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80110ac:	e031      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d002      	beq.n	80110be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80110b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80110bc:	e029      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d002      	beq.n	80110ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80110c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80110cc:	e021      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80110d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80110dc:	e019      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d002      	beq.n	80110ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80110e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80110ec:	e011      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d002      	beq.n	80110fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80110f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80110fc:	e009      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	f003 0308 	and.w	r3, r3, #8
 8011104:	2b00      	cmp	r3, #0
 8011106:	d002      	beq.n	801110e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011108:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801110c:	e001      	b.n	8011112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801110e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011112:	4618      	mov	r0, r3
 8011114:	3720      	adds	r7, #32
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	20000000 	.word	0x20000000
 8011120:	10624dd3 	.word	0x10624dd3
 8011124:	fdffe008 	.word	0xfdffe008

08011128 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011130:	4b1f      	ldr	r3, [pc, #124]	; (80111b0 <SDMMC_GetCmdResp2+0x88>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a1f      	ldr	r2, [pc, #124]	; (80111b4 <SDMMC_GetCmdResp2+0x8c>)
 8011136:	fba2 2303 	umull	r2, r3, r2, r3
 801113a:	0a5b      	lsrs	r3, r3, #9
 801113c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011140:	fb02 f303 	mul.w	r3, r2, r3
 8011144:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	1e5a      	subs	r2, r3, #1
 801114a:	60fa      	str	r2, [r7, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d102      	bne.n	8011156 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011154:	e026      	b.n	80111a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801115a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011162:	2b00      	cmp	r3, #0
 8011164:	d0ef      	beq.n	8011146 <SDMMC_GetCmdResp2+0x1e>
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1ea      	bne.n	8011146 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011174:	f003 0304 	and.w	r3, r3, #4
 8011178:	2b00      	cmp	r3, #0
 801117a:	d004      	beq.n	8011186 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2204      	movs	r2, #4
 8011180:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011182:	2304      	movs	r3, #4
 8011184:	e00e      	b.n	80111a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801118a:	f003 0301 	and.w	r3, r3, #1
 801118e:	2b00      	cmp	r3, #0
 8011190:	d004      	beq.n	801119c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2201      	movs	r2, #1
 8011196:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011198:	2301      	movs	r3, #1
 801119a:	e003      	b.n	80111a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	22c5      	movs	r2, #197	; 0xc5
 80111a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80111a2:	2300      	movs	r3, #0
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3714      	adds	r7, #20
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr
 80111b0:	20000000 	.word	0x20000000
 80111b4:	10624dd3 	.word	0x10624dd3

080111b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b085      	sub	sp, #20
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80111c0:	4b1a      	ldr	r3, [pc, #104]	; (801122c <SDMMC_GetCmdResp3+0x74>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	4a1a      	ldr	r2, [pc, #104]	; (8011230 <SDMMC_GetCmdResp3+0x78>)
 80111c6:	fba2 2303 	umull	r2, r3, r2, r3
 80111ca:	0a5b      	lsrs	r3, r3, #9
 80111cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80111d0:	fb02 f303 	mul.w	r3, r2, r3
 80111d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	1e5a      	subs	r2, r3, #1
 80111da:	60fa      	str	r2, [r7, #12]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d102      	bne.n	80111e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80111e4:	e01b      	b.n	801121e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d0ef      	beq.n	80111d6 <SDMMC_GetCmdResp3+0x1e>
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1ea      	bne.n	80111d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011204:	f003 0304 	and.w	r3, r3, #4
 8011208:	2b00      	cmp	r3, #0
 801120a:	d004      	beq.n	8011216 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2204      	movs	r2, #4
 8011210:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011212:	2304      	movs	r3, #4
 8011214:	e003      	b.n	801121e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	22c5      	movs	r2, #197	; 0xc5
 801121a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801121c:	2300      	movs	r3, #0
}
 801121e:	4618      	mov	r0, r3
 8011220:	3714      	adds	r7, #20
 8011222:	46bd      	mov	sp, r7
 8011224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	20000000 	.word	0x20000000
 8011230:	10624dd3 	.word	0x10624dd3

08011234 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b088      	sub	sp, #32
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	460b      	mov	r3, r1
 801123e:	607a      	str	r2, [r7, #4]
 8011240:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011242:	4b35      	ldr	r3, [pc, #212]	; (8011318 <SDMMC_GetCmdResp6+0xe4>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	4a35      	ldr	r2, [pc, #212]	; (801131c <SDMMC_GetCmdResp6+0xe8>)
 8011248:	fba2 2303 	umull	r2, r3, r2, r3
 801124c:	0a5b      	lsrs	r3, r3, #9
 801124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011252:	fb02 f303 	mul.w	r3, r2, r3
 8011256:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	1e5a      	subs	r2, r3, #1
 801125c:	61fa      	str	r2, [r7, #28]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d102      	bne.n	8011268 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011262:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011266:	e052      	b.n	801130e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801126c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011274:	2b00      	cmp	r3, #0
 8011276:	d0ef      	beq.n	8011258 <SDMMC_GetCmdResp6+0x24>
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801127e:	2b00      	cmp	r3, #0
 8011280:	d1ea      	bne.n	8011258 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011286:	f003 0304 	and.w	r3, r3, #4
 801128a:	2b00      	cmp	r3, #0
 801128c:	d004      	beq.n	8011298 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2204      	movs	r2, #4
 8011292:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011294:	2304      	movs	r3, #4
 8011296:	e03a      	b.n	801130e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801129c:	f003 0301 	and.w	r3, r3, #1
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d004      	beq.n	80112ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2201      	movs	r2, #1
 80112a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112aa:	2301      	movs	r3, #1
 80112ac:	e02f      	b.n	801130e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80112ae:	68f8      	ldr	r0, [r7, #12]
 80112b0:	f7ff fc98 	bl	8010be4 <SDIO_GetCommandResponse>
 80112b4:	4603      	mov	r3, r0
 80112b6:	461a      	mov	r2, r3
 80112b8:	7afb      	ldrb	r3, [r7, #11]
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d001      	beq.n	80112c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112be:	2301      	movs	r3, #1
 80112c0:	e025      	b.n	801130e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	22c5      	movs	r2, #197	; 0xc5
 80112c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80112c8:	2100      	movs	r1, #0
 80112ca:	68f8      	ldr	r0, [r7, #12]
 80112cc:	f7ff fc97 	bl	8010bfe <SDIO_GetResponse>
 80112d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d106      	bne.n	80112ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	0c1b      	lsrs	r3, r3, #16
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80112e6:	2300      	movs	r3, #0
 80112e8:	e011      	b.n	801130e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d002      	beq.n	80112fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80112f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80112f8:	e009      	b.n	801130e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011300:	2b00      	cmp	r3, #0
 8011302:	d002      	beq.n	801130a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011308:	e001      	b.n	801130e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801130a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801130e:	4618      	mov	r0, r3
 8011310:	3720      	adds	r7, #32
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	20000000 	.word	0x20000000
 801131c:	10624dd3 	.word	0x10624dd3

08011320 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011320:	b480      	push	{r7}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011328:	4b22      	ldr	r3, [pc, #136]	; (80113b4 <SDMMC_GetCmdResp7+0x94>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a22      	ldr	r2, [pc, #136]	; (80113b8 <SDMMC_GetCmdResp7+0x98>)
 801132e:	fba2 2303 	umull	r2, r3, r2, r3
 8011332:	0a5b      	lsrs	r3, r3, #9
 8011334:	f241 3288 	movw	r2, #5000	; 0x1388
 8011338:	fb02 f303 	mul.w	r3, r2, r3
 801133c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	1e5a      	subs	r2, r3, #1
 8011342:	60fa      	str	r2, [r7, #12]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d102      	bne.n	801134e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011348:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801134c:	e02c      	b.n	80113a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011352:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801135a:	2b00      	cmp	r3, #0
 801135c:	d0ef      	beq.n	801133e <SDMMC_GetCmdResp7+0x1e>
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011364:	2b00      	cmp	r3, #0
 8011366:	d1ea      	bne.n	801133e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801136c:	f003 0304 	and.w	r3, r3, #4
 8011370:	2b00      	cmp	r3, #0
 8011372:	d004      	beq.n	801137e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2204      	movs	r2, #4
 8011378:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801137a:	2304      	movs	r3, #4
 801137c:	e014      	b.n	80113a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011382:	f003 0301 	and.w	r3, r3, #1
 8011386:	2b00      	cmp	r3, #0
 8011388:	d004      	beq.n	8011394 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2201      	movs	r2, #1
 801138e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011390:	2301      	movs	r3, #1
 8011392:	e009      	b.n	80113a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801139c:	2b00      	cmp	r3, #0
 801139e:	d002      	beq.n	80113a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2240      	movs	r2, #64	; 0x40
 80113a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80113a6:	2300      	movs	r3, #0
  
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3714      	adds	r7, #20
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr
 80113b4:	20000000 	.word	0x20000000
 80113b8:	10624dd3 	.word	0x10624dd3

080113bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80113c4:	4b11      	ldr	r3, [pc, #68]	; (801140c <SDMMC_GetCmdError+0x50>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	4a11      	ldr	r2, [pc, #68]	; (8011410 <SDMMC_GetCmdError+0x54>)
 80113ca:	fba2 2303 	umull	r2, r3, r2, r3
 80113ce:	0a5b      	lsrs	r3, r3, #9
 80113d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80113d4:	fb02 f303 	mul.w	r3, r2, r3
 80113d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	1e5a      	subs	r2, r3, #1
 80113de:	60fa      	str	r2, [r7, #12]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d102      	bne.n	80113ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80113e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80113e8:	e009      	b.n	80113fe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d0f1      	beq.n	80113da <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	22c5      	movs	r2, #197	; 0xc5
 80113fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80113fc:	2300      	movs	r3, #0
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3714      	adds	r7, #20
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr
 801140a:	bf00      	nop
 801140c:	20000000 	.word	0x20000000
 8011410:	10624dd3 	.word	0x10624dd3

08011414 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011414:	b480      	push	{r7}
 8011416:	b087      	sub	sp, #28
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	4613      	mov	r3, r2
 8011420:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011422:	79fb      	ldrb	r3, [r7, #7]
 8011424:	2b02      	cmp	r3, #2
 8011426:	d165      	bne.n	80114f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	4a41      	ldr	r2, [pc, #260]	; (8011530 <USB_SetTurnaroundTime+0x11c>)
 801142c:	4293      	cmp	r3, r2
 801142e:	d906      	bls.n	801143e <USB_SetTurnaroundTime+0x2a>
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	4a40      	ldr	r2, [pc, #256]	; (8011534 <USB_SetTurnaroundTime+0x120>)
 8011434:	4293      	cmp	r3, r2
 8011436:	d202      	bcs.n	801143e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011438:	230f      	movs	r3, #15
 801143a:	617b      	str	r3, [r7, #20]
 801143c:	e062      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	4a3c      	ldr	r2, [pc, #240]	; (8011534 <USB_SetTurnaroundTime+0x120>)
 8011442:	4293      	cmp	r3, r2
 8011444:	d306      	bcc.n	8011454 <USB_SetTurnaroundTime+0x40>
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	4a3b      	ldr	r2, [pc, #236]	; (8011538 <USB_SetTurnaroundTime+0x124>)
 801144a:	4293      	cmp	r3, r2
 801144c:	d202      	bcs.n	8011454 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801144e:	230e      	movs	r3, #14
 8011450:	617b      	str	r3, [r7, #20]
 8011452:	e057      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	4a38      	ldr	r2, [pc, #224]	; (8011538 <USB_SetTurnaroundTime+0x124>)
 8011458:	4293      	cmp	r3, r2
 801145a:	d306      	bcc.n	801146a <USB_SetTurnaroundTime+0x56>
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	4a37      	ldr	r2, [pc, #220]	; (801153c <USB_SetTurnaroundTime+0x128>)
 8011460:	4293      	cmp	r3, r2
 8011462:	d202      	bcs.n	801146a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011464:	230d      	movs	r3, #13
 8011466:	617b      	str	r3, [r7, #20]
 8011468:	e04c      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	4a33      	ldr	r2, [pc, #204]	; (801153c <USB_SetTurnaroundTime+0x128>)
 801146e:	4293      	cmp	r3, r2
 8011470:	d306      	bcc.n	8011480 <USB_SetTurnaroundTime+0x6c>
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	4a32      	ldr	r2, [pc, #200]	; (8011540 <USB_SetTurnaroundTime+0x12c>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d802      	bhi.n	8011480 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801147a:	230c      	movs	r3, #12
 801147c:	617b      	str	r3, [r7, #20]
 801147e:	e041      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	4a2f      	ldr	r2, [pc, #188]	; (8011540 <USB_SetTurnaroundTime+0x12c>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d906      	bls.n	8011496 <USB_SetTurnaroundTime+0x82>
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	4a2e      	ldr	r2, [pc, #184]	; (8011544 <USB_SetTurnaroundTime+0x130>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d802      	bhi.n	8011496 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011490:	230b      	movs	r3, #11
 8011492:	617b      	str	r3, [r7, #20]
 8011494:	e036      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	4a2a      	ldr	r2, [pc, #168]	; (8011544 <USB_SetTurnaroundTime+0x130>)
 801149a:	4293      	cmp	r3, r2
 801149c:	d906      	bls.n	80114ac <USB_SetTurnaroundTime+0x98>
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	4a29      	ldr	r2, [pc, #164]	; (8011548 <USB_SetTurnaroundTime+0x134>)
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d802      	bhi.n	80114ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80114a6:	230a      	movs	r3, #10
 80114a8:	617b      	str	r3, [r7, #20]
 80114aa:	e02b      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	4a26      	ldr	r2, [pc, #152]	; (8011548 <USB_SetTurnaroundTime+0x134>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d906      	bls.n	80114c2 <USB_SetTurnaroundTime+0xae>
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	4a25      	ldr	r2, [pc, #148]	; (801154c <USB_SetTurnaroundTime+0x138>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d202      	bcs.n	80114c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80114bc:	2309      	movs	r3, #9
 80114be:	617b      	str	r3, [r7, #20]
 80114c0:	e020      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	4a21      	ldr	r2, [pc, #132]	; (801154c <USB_SetTurnaroundTime+0x138>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d306      	bcc.n	80114d8 <USB_SetTurnaroundTime+0xc4>
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	4a20      	ldr	r2, [pc, #128]	; (8011550 <USB_SetTurnaroundTime+0x13c>)
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d802      	bhi.n	80114d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80114d2:	2308      	movs	r3, #8
 80114d4:	617b      	str	r3, [r7, #20]
 80114d6:	e015      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	4a1d      	ldr	r2, [pc, #116]	; (8011550 <USB_SetTurnaroundTime+0x13c>)
 80114dc:	4293      	cmp	r3, r2
 80114de:	d906      	bls.n	80114ee <USB_SetTurnaroundTime+0xda>
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	4a1c      	ldr	r2, [pc, #112]	; (8011554 <USB_SetTurnaroundTime+0x140>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d202      	bcs.n	80114ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80114e8:	2307      	movs	r3, #7
 80114ea:	617b      	str	r3, [r7, #20]
 80114ec:	e00a      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80114ee:	2306      	movs	r3, #6
 80114f0:	617b      	str	r3, [r7, #20]
 80114f2:	e007      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80114f4:	79fb      	ldrb	r3, [r7, #7]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d102      	bne.n	8011500 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80114fa:	2309      	movs	r3, #9
 80114fc:	617b      	str	r3, [r7, #20]
 80114fe:	e001      	b.n	8011504 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011500:	2309      	movs	r3, #9
 8011502:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	68da      	ldr	r2, [r3, #12]
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	029b      	lsls	r3, r3, #10
 8011518:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801151c:	431a      	orrs	r2, r3
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011522:	2300      	movs	r3, #0
}
 8011524:	4618      	mov	r0, r3
 8011526:	371c      	adds	r7, #28
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr
 8011530:	00d8acbf 	.word	0x00d8acbf
 8011534:	00e4e1c0 	.word	0x00e4e1c0
 8011538:	00f42400 	.word	0x00f42400
 801153c:	01067380 	.word	0x01067380
 8011540:	011a499f 	.word	0x011a499f
 8011544:	01312cff 	.word	0x01312cff
 8011548:	014ca43f 	.word	0x014ca43f
 801154c:	016e3600 	.word	0x016e3600
 8011550:	01a6ab1f 	.word	0x01a6ab1f
 8011554:	01e84800 	.word	0x01e84800

08011558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011562:	2300      	movs	r3, #0
 8011564:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	3301      	adds	r3, #1
 801156a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	4a13      	ldr	r2, [pc, #76]	; (80115bc <USB_FlushTxFifo+0x64>)
 8011570:	4293      	cmp	r3, r2
 8011572:	d901      	bls.n	8011578 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011574:	2303      	movs	r3, #3
 8011576:	e01b      	b.n	80115b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	691b      	ldr	r3, [r3, #16]
 801157c:	2b00      	cmp	r3, #0
 801157e:	daf2      	bge.n	8011566 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011580:	2300      	movs	r3, #0
 8011582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	019b      	lsls	r3, r3, #6
 8011588:	f043 0220 	orr.w	r2, r3, #32
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	3301      	adds	r3, #1
 8011594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	4a08      	ldr	r2, [pc, #32]	; (80115bc <USB_FlushTxFifo+0x64>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d901      	bls.n	80115a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801159e:	2303      	movs	r3, #3
 80115a0:	e006      	b.n	80115b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	691b      	ldr	r3, [r3, #16]
 80115a6:	f003 0320 	and.w	r3, r3, #32
 80115aa:	2b20      	cmp	r3, #32
 80115ac:	d0f0      	beq.n	8011590 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80115ae:	2300      	movs	r3, #0
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3714      	adds	r7, #20
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr
 80115bc:	00030d40 	.word	0x00030d40

080115c0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b087      	sub	sp, #28
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115d2:	689b      	ldr	r3, [r3, #8]
 80115d4:	f003 0306 	and.w	r3, r3, #6
 80115d8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d102      	bne.n	80115e6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80115e0:	2300      	movs	r3, #0
 80115e2:	75fb      	strb	r3, [r7, #23]
 80115e4:	e00a      	b.n	80115fc <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2b02      	cmp	r3, #2
 80115ea:	d002      	beq.n	80115f2 <USB_GetDevSpeed+0x32>
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2b06      	cmp	r3, #6
 80115f0:	d102      	bne.n	80115f8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80115f2:	2302      	movs	r3, #2
 80115f4:	75fb      	strb	r3, [r7, #23]
 80115f6:	e001      	b.n	80115fc <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80115f8:	230f      	movs	r3, #15
 80115fa:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80115fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80115fe:	4618      	mov	r0, r3
 8011600:	371c      	adds	r7, #28
 8011602:	46bd      	mov	sp, r7
 8011604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011608:	4770      	bx	lr

0801160a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801160a:	b480      	push	{r7}
 801160c:	b085      	sub	sp, #20
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
 8011612:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	785b      	ldrb	r3, [r3, #1]
 8011622:	2b01      	cmp	r3, #1
 8011624:	d13a      	bne.n	801169c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801162c:	69da      	ldr	r2, [r3, #28]
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	f003 030f 	and.w	r3, r3, #15
 8011636:	2101      	movs	r1, #1
 8011638:	fa01 f303 	lsl.w	r3, r1, r3
 801163c:	b29b      	uxth	r3, r3
 801163e:	68f9      	ldr	r1, [r7, #12]
 8011640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011644:	4313      	orrs	r3, r2
 8011646:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	015a      	lsls	r2, r3, #5
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	4413      	add	r3, r2
 8011650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801165a:	2b00      	cmp	r3, #0
 801165c:	d155      	bne.n	801170a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	015a      	lsls	r2, r3, #5
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	4413      	add	r3, r2
 8011666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	791b      	ldrb	r3, [r3, #4]
 8011678:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801167a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	059b      	lsls	r3, r3, #22
 8011680:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011682:	4313      	orrs	r3, r2
 8011684:	68ba      	ldr	r2, [r7, #8]
 8011686:	0151      	lsls	r1, r2, #5
 8011688:	68fa      	ldr	r2, [r7, #12]
 801168a:	440a      	add	r2, r1
 801168c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011698:	6013      	str	r3, [r2, #0]
 801169a:	e036      	b.n	801170a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116a2:	69da      	ldr	r2, [r3, #28]
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	f003 030f 	and.w	r3, r3, #15
 80116ac:	2101      	movs	r1, #1
 80116ae:	fa01 f303 	lsl.w	r3, r1, r3
 80116b2:	041b      	lsls	r3, r3, #16
 80116b4:	68f9      	ldr	r1, [r7, #12]
 80116b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80116ba:	4313      	orrs	r3, r2
 80116bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	015a      	lsls	r2, r3, #5
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	4413      	add	r3, r2
 80116c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d11a      	bne.n	801170a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	015a      	lsls	r2, r3, #5
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	4413      	add	r3, r2
 80116dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	791b      	ldrb	r3, [r3, #4]
 80116ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80116f0:	430b      	orrs	r3, r1
 80116f2:	4313      	orrs	r3, r2
 80116f4:	68ba      	ldr	r2, [r7, #8]
 80116f6:	0151      	lsls	r1, r2, #5
 80116f8:	68fa      	ldr	r2, [r7, #12]
 80116fa:	440a      	add	r2, r1
 80116fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011708:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801170a:	2300      	movs	r3, #0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3714      	adds	r7, #20
 8011710:	46bd      	mov	sp, r7
 8011712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011716:	4770      	bx	lr

08011718 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b08a      	sub	sp, #40	; 0x28
 801171c:	af02      	add	r7, sp, #8
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	60b9      	str	r1, [r7, #8]
 8011722:	4613      	mov	r3, r2
 8011724:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	785b      	ldrb	r3, [r3, #1]
 8011734:	2b01      	cmp	r3, #1
 8011736:	f040 815c 	bne.w	80119f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	699b      	ldr	r3, [r3, #24]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d132      	bne.n	80117a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	015a      	lsls	r2, r3, #5
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	4413      	add	r3, r2
 801174a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801174e:	691b      	ldr	r3, [r3, #16]
 8011750:	69ba      	ldr	r2, [r7, #24]
 8011752:	0151      	lsls	r1, r2, #5
 8011754:	69fa      	ldr	r2, [r7, #28]
 8011756:	440a      	add	r2, r1
 8011758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801175c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011760:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011764:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	015a      	lsls	r2, r3, #5
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	4413      	add	r3, r2
 801176e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011772:	691b      	ldr	r3, [r3, #16]
 8011774:	69ba      	ldr	r2, [r7, #24]
 8011776:	0151      	lsls	r1, r2, #5
 8011778:	69fa      	ldr	r2, [r7, #28]
 801177a:	440a      	add	r2, r1
 801177c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	015a      	lsls	r2, r3, #5
 801178a:	69fb      	ldr	r3, [r7, #28]
 801178c:	4413      	add	r3, r2
 801178e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011792:	691b      	ldr	r3, [r3, #16]
 8011794:	69ba      	ldr	r2, [r7, #24]
 8011796:	0151      	lsls	r1, r2, #5
 8011798:	69fa      	ldr	r2, [r7, #28]
 801179a:	440a      	add	r2, r1
 801179c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117a0:	0cdb      	lsrs	r3, r3, #19
 80117a2:	04db      	lsls	r3, r3, #19
 80117a4:	6113      	str	r3, [r2, #16]
 80117a6:	e074      	b.n	8011892 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80117a8:	69bb      	ldr	r3, [r7, #24]
 80117aa:	015a      	lsls	r2, r3, #5
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	4413      	add	r3, r2
 80117b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117b4:	691b      	ldr	r3, [r3, #16]
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	0151      	lsls	r1, r2, #5
 80117ba:	69fa      	ldr	r2, [r7, #28]
 80117bc:	440a      	add	r2, r1
 80117be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117c2:	0cdb      	lsrs	r3, r3, #19
 80117c4:	04db      	lsls	r3, r3, #19
 80117c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	015a      	lsls	r2, r3, #5
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	4413      	add	r3, r2
 80117d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117d4:	691b      	ldr	r3, [r3, #16]
 80117d6:	69ba      	ldr	r2, [r7, #24]
 80117d8:	0151      	lsls	r1, r2, #5
 80117da:	69fa      	ldr	r2, [r7, #28]
 80117dc:	440a      	add	r2, r1
 80117de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80117e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80117ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80117ec:	69bb      	ldr	r3, [r7, #24]
 80117ee:	015a      	lsls	r2, r3, #5
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	4413      	add	r3, r2
 80117f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	6999      	ldr	r1, [r3, #24]
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	440b      	add	r3, r1
 8011804:	1e59      	subs	r1, r3, #1
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	fbb1 f3f3 	udiv	r3, r1, r3
 801180e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011810:	4b9d      	ldr	r3, [pc, #628]	; (8011a88 <USB_EPStartXfer+0x370>)
 8011812:	400b      	ands	r3, r1
 8011814:	69b9      	ldr	r1, [r7, #24]
 8011816:	0148      	lsls	r0, r1, #5
 8011818:	69f9      	ldr	r1, [r7, #28]
 801181a:	4401      	add	r1, r0
 801181c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011820:	4313      	orrs	r3, r2
 8011822:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011824:	69bb      	ldr	r3, [r7, #24]
 8011826:	015a      	lsls	r2, r3, #5
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	4413      	add	r3, r2
 801182c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011830:	691a      	ldr	r2, [r3, #16]
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	699b      	ldr	r3, [r3, #24]
 8011836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801183a:	69b9      	ldr	r1, [r7, #24]
 801183c:	0148      	lsls	r0, r1, #5
 801183e:	69f9      	ldr	r1, [r7, #28]
 8011840:	4401      	add	r1, r0
 8011842:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011846:	4313      	orrs	r3, r2
 8011848:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	791b      	ldrb	r3, [r3, #4]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d11f      	bne.n	8011892 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	015a      	lsls	r2, r3, #5
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	4413      	add	r3, r2
 801185a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801185e:	691b      	ldr	r3, [r3, #16]
 8011860:	69ba      	ldr	r2, [r7, #24]
 8011862:	0151      	lsls	r1, r2, #5
 8011864:	69fa      	ldr	r2, [r7, #28]
 8011866:	440a      	add	r2, r1
 8011868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801186c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011870:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011872:	69bb      	ldr	r3, [r7, #24]
 8011874:	015a      	lsls	r2, r3, #5
 8011876:	69fb      	ldr	r3, [r7, #28]
 8011878:	4413      	add	r3, r2
 801187a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801187e:	691b      	ldr	r3, [r3, #16]
 8011880:	69ba      	ldr	r2, [r7, #24]
 8011882:	0151      	lsls	r1, r2, #5
 8011884:	69fa      	ldr	r2, [r7, #28]
 8011886:	440a      	add	r2, r1
 8011888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801188c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011890:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011892:	79fb      	ldrb	r3, [r7, #7]
 8011894:	2b01      	cmp	r3, #1
 8011896:	d14b      	bne.n	8011930 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	695b      	ldr	r3, [r3, #20]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d009      	beq.n	80118b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	015a      	lsls	r2, r3, #5
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	4413      	add	r3, r2
 80118a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118ac:	461a      	mov	r2, r3
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	695b      	ldr	r3, [r3, #20]
 80118b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	791b      	ldrb	r3, [r3, #4]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d128      	bne.n	801190e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118c2:	689b      	ldr	r3, [r3, #8]
 80118c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d110      	bne.n	80118ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80118cc:	69bb      	ldr	r3, [r7, #24]
 80118ce:	015a      	lsls	r2, r3, #5
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	4413      	add	r3, r2
 80118d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	69ba      	ldr	r2, [r7, #24]
 80118dc:	0151      	lsls	r1, r2, #5
 80118de:	69fa      	ldr	r2, [r7, #28]
 80118e0:	440a      	add	r2, r1
 80118e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80118ea:	6013      	str	r3, [r2, #0]
 80118ec:	e00f      	b.n	801190e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80118ee:	69bb      	ldr	r3, [r7, #24]
 80118f0:	015a      	lsls	r2, r3, #5
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	4413      	add	r3, r2
 80118f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	69ba      	ldr	r2, [r7, #24]
 80118fe:	0151      	lsls	r1, r2, #5
 8011900:	69fa      	ldr	r2, [r7, #28]
 8011902:	440a      	add	r2, r1
 8011904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801190c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	015a      	lsls	r2, r3, #5
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	4413      	add	r3, r2
 8011916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	69ba      	ldr	r2, [r7, #24]
 801191e:	0151      	lsls	r1, r2, #5
 8011920:	69fa      	ldr	r2, [r7, #28]
 8011922:	440a      	add	r2, r1
 8011924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011928:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801192c:	6013      	str	r3, [r2, #0]
 801192e:	e133      	b.n	8011b98 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	015a      	lsls	r2, r3, #5
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	4413      	add	r3, r2
 8011938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	69ba      	ldr	r2, [r7, #24]
 8011940:	0151      	lsls	r1, r2, #5
 8011942:	69fa      	ldr	r2, [r7, #28]
 8011944:	440a      	add	r2, r1
 8011946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801194a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801194e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	791b      	ldrb	r3, [r3, #4]
 8011954:	2b01      	cmp	r3, #1
 8011956:	d015      	beq.n	8011984 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	699b      	ldr	r3, [r3, #24]
 801195c:	2b00      	cmp	r3, #0
 801195e:	f000 811b 	beq.w	8011b98 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	f003 030f 	and.w	r3, r3, #15
 8011972:	2101      	movs	r1, #1
 8011974:	fa01 f303 	lsl.w	r3, r1, r3
 8011978:	69f9      	ldr	r1, [r7, #28]
 801197a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801197e:	4313      	orrs	r3, r2
 8011980:	634b      	str	r3, [r1, #52]	; 0x34
 8011982:	e109      	b.n	8011b98 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801198a:	689b      	ldr	r3, [r3, #8]
 801198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011990:	2b00      	cmp	r3, #0
 8011992:	d110      	bne.n	80119b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011994:	69bb      	ldr	r3, [r7, #24]
 8011996:	015a      	lsls	r2, r3, #5
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	4413      	add	r3, r2
 801199c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	69ba      	ldr	r2, [r7, #24]
 80119a4:	0151      	lsls	r1, r2, #5
 80119a6:	69fa      	ldr	r2, [r7, #28]
 80119a8:	440a      	add	r2, r1
 80119aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80119b2:	6013      	str	r3, [r2, #0]
 80119b4:	e00f      	b.n	80119d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	015a      	lsls	r2, r3, #5
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	4413      	add	r3, r2
 80119be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	69ba      	ldr	r2, [r7, #24]
 80119c6:	0151      	lsls	r1, r2, #5
 80119c8:	69fa      	ldr	r2, [r7, #28]
 80119ca:	440a      	add	r2, r1
 80119cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80119d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	6919      	ldr	r1, [r3, #16]
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	781a      	ldrb	r2, [r3, #0]
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	699b      	ldr	r3, [r3, #24]
 80119e2:	b298      	uxth	r0, r3
 80119e4:	79fb      	ldrb	r3, [r7, #7]
 80119e6:	9300      	str	r3, [sp, #0]
 80119e8:	4603      	mov	r3, r0
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f000 fade 	bl	8011fac <USB_WritePacket>
 80119f0:	e0d2      	b.n	8011b98 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80119f2:	69bb      	ldr	r3, [r7, #24]
 80119f4:	015a      	lsls	r2, r3, #5
 80119f6:	69fb      	ldr	r3, [r7, #28]
 80119f8:	4413      	add	r3, r2
 80119fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119fe:	691b      	ldr	r3, [r3, #16]
 8011a00:	69ba      	ldr	r2, [r7, #24]
 8011a02:	0151      	lsls	r1, r2, #5
 8011a04:	69fa      	ldr	r2, [r7, #28]
 8011a06:	440a      	add	r2, r1
 8011a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a0c:	0cdb      	lsrs	r3, r3, #19
 8011a0e:	04db      	lsls	r3, r3, #19
 8011a10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	015a      	lsls	r2, r3, #5
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	4413      	add	r3, r2
 8011a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a1e:	691b      	ldr	r3, [r3, #16]
 8011a20:	69ba      	ldr	r2, [r7, #24]
 8011a22:	0151      	lsls	r1, r2, #5
 8011a24:	69fa      	ldr	r2, [r7, #28]
 8011a26:	440a      	add	r2, r1
 8011a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011a30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011a34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	699b      	ldr	r3, [r3, #24]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d126      	bne.n	8011a8c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	015a      	lsls	r2, r3, #5
 8011a42:	69fb      	ldr	r3, [r7, #28]
 8011a44:	4413      	add	r3, r2
 8011a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a4a:	691a      	ldr	r2, [r3, #16]
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a54:	69b9      	ldr	r1, [r7, #24]
 8011a56:	0148      	lsls	r0, r1, #5
 8011a58:	69f9      	ldr	r1, [r7, #28]
 8011a5a:	4401      	add	r1, r0
 8011a5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a60:	4313      	orrs	r3, r2
 8011a62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a64:	69bb      	ldr	r3, [r7, #24]
 8011a66:	015a      	lsls	r2, r3, #5
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a70:	691b      	ldr	r3, [r3, #16]
 8011a72:	69ba      	ldr	r2, [r7, #24]
 8011a74:	0151      	lsls	r1, r2, #5
 8011a76:	69fa      	ldr	r2, [r7, #28]
 8011a78:	440a      	add	r2, r1
 8011a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a82:	6113      	str	r3, [r2, #16]
 8011a84:	e03a      	b.n	8011afc <USB_EPStartXfer+0x3e4>
 8011a86:	bf00      	nop
 8011a88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	699a      	ldr	r2, [r3, #24]
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	4413      	add	r3, r2
 8011a96:	1e5a      	subs	r2, r3, #1
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011aa0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	68db      	ldr	r3, [r3, #12]
 8011aa6:	8afa      	ldrh	r2, [r7, #22]
 8011aa8:	fb03 f202 	mul.w	r2, r3, r2
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011ab0:	69bb      	ldr	r3, [r7, #24]
 8011ab2:	015a      	lsls	r2, r3, #5
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011abc:	691a      	ldr	r2, [r3, #16]
 8011abe:	8afb      	ldrh	r3, [r7, #22]
 8011ac0:	04d9      	lsls	r1, r3, #19
 8011ac2:	4b38      	ldr	r3, [pc, #224]	; (8011ba4 <USB_EPStartXfer+0x48c>)
 8011ac4:	400b      	ands	r3, r1
 8011ac6:	69b9      	ldr	r1, [r7, #24]
 8011ac8:	0148      	lsls	r0, r1, #5
 8011aca:	69f9      	ldr	r1, [r7, #28]
 8011acc:	4401      	add	r1, r0
 8011ace:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	015a      	lsls	r2, r3, #5
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	4413      	add	r3, r2
 8011ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ae2:	691a      	ldr	r2, [r3, #16]
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	69db      	ldr	r3, [r3, #28]
 8011ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011aec:	69b9      	ldr	r1, [r7, #24]
 8011aee:	0148      	lsls	r0, r1, #5
 8011af0:	69f9      	ldr	r1, [r7, #28]
 8011af2:	4401      	add	r1, r0
 8011af4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011af8:	4313      	orrs	r3, r2
 8011afa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011afc:	79fb      	ldrb	r3, [r7, #7]
 8011afe:	2b01      	cmp	r3, #1
 8011b00:	d10d      	bne.n	8011b1e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	691b      	ldr	r3, [r3, #16]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d009      	beq.n	8011b1e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	6919      	ldr	r1, [r3, #16]
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	015a      	lsls	r2, r3, #5
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	4413      	add	r3, r2
 8011b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b1a:	460a      	mov	r2, r1
 8011b1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	791b      	ldrb	r3, [r3, #4]
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d128      	bne.n	8011b78 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b2c:	689b      	ldr	r3, [r3, #8]
 8011b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d110      	bne.n	8011b58 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	015a      	lsls	r2, r3, #5
 8011b3a:	69fb      	ldr	r3, [r7, #28]
 8011b3c:	4413      	add	r3, r2
 8011b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	69ba      	ldr	r2, [r7, #24]
 8011b46:	0151      	lsls	r1, r2, #5
 8011b48:	69fa      	ldr	r2, [r7, #28]
 8011b4a:	440a      	add	r2, r1
 8011b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011b54:	6013      	str	r3, [r2, #0]
 8011b56:	e00f      	b.n	8011b78 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	015a      	lsls	r2, r3, #5
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	4413      	add	r3, r2
 8011b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	69ba      	ldr	r2, [r7, #24]
 8011b68:	0151      	lsls	r1, r2, #5
 8011b6a:	69fa      	ldr	r2, [r7, #28]
 8011b6c:	440a      	add	r2, r1
 8011b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	015a      	lsls	r2, r3, #5
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	4413      	add	r3, r2
 8011b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	69ba      	ldr	r2, [r7, #24]
 8011b88:	0151      	lsls	r1, r2, #5
 8011b8a:	69fa      	ldr	r2, [r7, #28]
 8011b8c:	440a      	add	r2, r1
 8011b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011b96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011b98:	2300      	movs	r3, #0
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3720      	adds	r7, #32
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	1ff80000 	.word	0x1ff80000

08011ba8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b087      	sub	sp, #28
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	60f8      	str	r0, [r7, #12]
 8011bb0:	60b9      	str	r1, [r7, #8]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	785b      	ldrb	r3, [r3, #1]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	f040 80ce 	bne.w	8011d66 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	699b      	ldr	r3, [r3, #24]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d132      	bne.n	8011c38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	015a      	lsls	r2, r3, #5
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	4413      	add	r3, r2
 8011bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bde:	691b      	ldr	r3, [r3, #16]
 8011be0:	693a      	ldr	r2, [r7, #16]
 8011be2:	0151      	lsls	r1, r2, #5
 8011be4:	697a      	ldr	r2, [r7, #20]
 8011be6:	440a      	add	r2, r1
 8011be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011bf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011bf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	015a      	lsls	r2, r3, #5
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c02:	691b      	ldr	r3, [r3, #16]
 8011c04:	693a      	ldr	r2, [r7, #16]
 8011c06:	0151      	lsls	r1, r2, #5
 8011c08:	697a      	ldr	r2, [r7, #20]
 8011c0a:	440a      	add	r2, r1
 8011c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011c14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	015a      	lsls	r2, r3, #5
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	4413      	add	r3, r2
 8011c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c22:	691b      	ldr	r3, [r3, #16]
 8011c24:	693a      	ldr	r2, [r7, #16]
 8011c26:	0151      	lsls	r1, r2, #5
 8011c28:	697a      	ldr	r2, [r7, #20]
 8011c2a:	440a      	add	r2, r1
 8011c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c30:	0cdb      	lsrs	r3, r3, #19
 8011c32:	04db      	lsls	r3, r3, #19
 8011c34:	6113      	str	r3, [r2, #16]
 8011c36:	e04e      	b.n	8011cd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	015a      	lsls	r2, r3, #5
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	4413      	add	r3, r2
 8011c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c44:	691b      	ldr	r3, [r3, #16]
 8011c46:	693a      	ldr	r2, [r7, #16]
 8011c48:	0151      	lsls	r1, r2, #5
 8011c4a:	697a      	ldr	r2, [r7, #20]
 8011c4c:	440a      	add	r2, r1
 8011c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c52:	0cdb      	lsrs	r3, r3, #19
 8011c54:	04db      	lsls	r3, r3, #19
 8011c56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	015a      	lsls	r2, r3, #5
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	4413      	add	r3, r2
 8011c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c64:	691b      	ldr	r3, [r3, #16]
 8011c66:	693a      	ldr	r2, [r7, #16]
 8011c68:	0151      	lsls	r1, r2, #5
 8011c6a:	697a      	ldr	r2, [r7, #20]
 8011c6c:	440a      	add	r2, r1
 8011c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011c76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011c7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	699a      	ldr	r2, [r3, #24]
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d903      	bls.n	8011c90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	68da      	ldr	r2, [r3, #12]
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	015a      	lsls	r2, r3, #5
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	4413      	add	r3, r2
 8011c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c9c:	691b      	ldr	r3, [r3, #16]
 8011c9e:	693a      	ldr	r2, [r7, #16]
 8011ca0:	0151      	lsls	r1, r2, #5
 8011ca2:	697a      	ldr	r2, [r7, #20]
 8011ca4:	440a      	add	r2, r1
 8011ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011cae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	015a      	lsls	r2, r3, #5
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cbc:	691a      	ldr	r2, [r3, #16]
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	699b      	ldr	r3, [r3, #24]
 8011cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011cc6:	6939      	ldr	r1, [r7, #16]
 8011cc8:	0148      	lsls	r0, r1, #5
 8011cca:	6979      	ldr	r1, [r7, #20]
 8011ccc:	4401      	add	r1, r0
 8011cce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011cd6:	79fb      	ldrb	r3, [r7, #7]
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d11e      	bne.n	8011d1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	695b      	ldr	r3, [r3, #20]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d009      	beq.n	8011cf8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	015a      	lsls	r2, r3, #5
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	4413      	add	r3, r2
 8011cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	695b      	ldr	r3, [r3, #20]
 8011cf6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	015a      	lsls	r2, r3, #5
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	4413      	add	r3, r2
 8011d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	693a      	ldr	r2, [r7, #16]
 8011d08:	0151      	lsls	r1, r2, #5
 8011d0a:	697a      	ldr	r2, [r7, #20]
 8011d0c:	440a      	add	r2, r1
 8011d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d16:	6013      	str	r3, [r2, #0]
 8011d18:	e097      	b.n	8011e4a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	015a      	lsls	r2, r3, #5
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	4413      	add	r3, r2
 8011d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	693a      	ldr	r2, [r7, #16]
 8011d2a:	0151      	lsls	r1, r2, #5
 8011d2c:	697a      	ldr	r2, [r7, #20]
 8011d2e:	440a      	add	r2, r1
 8011d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	699b      	ldr	r3, [r3, #24]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f000 8083 	beq.w	8011e4a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	f003 030f 	and.w	r3, r3, #15
 8011d54:	2101      	movs	r1, #1
 8011d56:	fa01 f303 	lsl.w	r3, r1, r3
 8011d5a:	6979      	ldr	r1, [r7, #20]
 8011d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d60:	4313      	orrs	r3, r2
 8011d62:	634b      	str	r3, [r1, #52]	; 0x34
 8011d64:	e071      	b.n	8011e4a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	015a      	lsls	r2, r3, #5
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d72:	691b      	ldr	r3, [r3, #16]
 8011d74:	693a      	ldr	r2, [r7, #16]
 8011d76:	0151      	lsls	r1, r2, #5
 8011d78:	697a      	ldr	r2, [r7, #20]
 8011d7a:	440a      	add	r2, r1
 8011d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d80:	0cdb      	lsrs	r3, r3, #19
 8011d82:	04db      	lsls	r3, r3, #19
 8011d84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	015a      	lsls	r2, r3, #5
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d92:	691b      	ldr	r3, [r3, #16]
 8011d94:	693a      	ldr	r2, [r7, #16]
 8011d96:	0151      	lsls	r1, r2, #5
 8011d98:	697a      	ldr	r2, [r7, #20]
 8011d9a:	440a      	add	r2, r1
 8011d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011da0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011da4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011da8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	699b      	ldr	r3, [r3, #24]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d003      	beq.n	8011dba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	68da      	ldr	r2, [r3, #12]
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	68da      	ldr	r2, [r3, #12]
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	015a      	lsls	r2, r3, #5
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	4413      	add	r3, r2
 8011dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dce:	691b      	ldr	r3, [r3, #16]
 8011dd0:	693a      	ldr	r2, [r7, #16]
 8011dd2:	0151      	lsls	r1, r2, #5
 8011dd4:	697a      	ldr	r2, [r7, #20]
 8011dd6:	440a      	add	r2, r1
 8011dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011de0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	015a      	lsls	r2, r3, #5
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	4413      	add	r3, r2
 8011dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dee:	691a      	ldr	r2, [r3, #16]
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	69db      	ldr	r3, [r3, #28]
 8011df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011df8:	6939      	ldr	r1, [r7, #16]
 8011dfa:	0148      	lsls	r0, r1, #5
 8011dfc:	6979      	ldr	r1, [r7, #20]
 8011dfe:	4401      	add	r1, r0
 8011e00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011e04:	4313      	orrs	r3, r2
 8011e06:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011e08:	79fb      	ldrb	r3, [r7, #7]
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d10d      	bne.n	8011e2a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	691b      	ldr	r3, [r3, #16]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d009      	beq.n	8011e2a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	6919      	ldr	r1, [r3, #16]
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	015a      	lsls	r2, r3, #5
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	4413      	add	r3, r2
 8011e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e26:	460a      	mov	r2, r1
 8011e28:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	015a      	lsls	r2, r3, #5
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	4413      	add	r3, r2
 8011e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	693a      	ldr	r2, [r7, #16]
 8011e3a:	0151      	lsls	r1, r2, #5
 8011e3c:	697a      	ldr	r2, [r7, #20]
 8011e3e:	440a      	add	r2, r1
 8011e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011e48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011e4a:	2300      	movs	r3, #0
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	371c      	adds	r7, #28
 8011e50:	46bd      	mov	sp, r7
 8011e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e56:	4770      	bx	lr

08011e58 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b087      	sub	sp, #28
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011e62:	2300      	movs	r3, #0
 8011e64:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011e66:	2300      	movs	r3, #0
 8011e68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	785b      	ldrb	r3, [r3, #1]
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d14a      	bne.n	8011f0c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	015a      	lsls	r2, r3, #5
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	4413      	add	r3, r2
 8011e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e8e:	f040 8086 	bne.w	8011f9e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	015a      	lsls	r2, r3, #5
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	683a      	ldr	r2, [r7, #0]
 8011ea4:	7812      	ldrb	r2, [r2, #0]
 8011ea6:	0151      	lsls	r1, r2, #5
 8011ea8:	693a      	ldr	r2, [r7, #16]
 8011eaa:	440a      	add	r2, r1
 8011eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011eb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011eb4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	015a      	lsls	r2, r3, #5
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	683a      	ldr	r2, [r7, #0]
 8011ec8:	7812      	ldrb	r2, [r2, #0]
 8011eca:	0151      	lsls	r1, r2, #5
 8011ecc:	693a      	ldr	r2, [r7, #16]
 8011ece:	440a      	add	r2, r1
 8011ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ed8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	3301      	adds	r3, #1
 8011ede:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	f242 7210 	movw	r2, #10000	; 0x2710
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d902      	bls.n	8011ef0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011eea:	2301      	movs	r3, #1
 8011eec:	75fb      	strb	r3, [r7, #23]
          break;
 8011eee:	e056      	b.n	8011f9e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	015a      	lsls	r2, r3, #5
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	4413      	add	r3, r2
 8011efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f08:	d0e7      	beq.n	8011eda <USB_EPStopXfer+0x82>
 8011f0a:	e048      	b.n	8011f9e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	015a      	lsls	r2, r3, #5
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	4413      	add	r3, r2
 8011f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f24:	d13b      	bne.n	8011f9e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	015a      	lsls	r2, r3, #5
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	4413      	add	r3, r2
 8011f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	683a      	ldr	r2, [r7, #0]
 8011f38:	7812      	ldrb	r2, [r2, #0]
 8011f3a:	0151      	lsls	r1, r2, #5
 8011f3c:	693a      	ldr	r2, [r7, #16]
 8011f3e:	440a      	add	r2, r1
 8011f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011f48:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	015a      	lsls	r2, r3, #5
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	4413      	add	r3, r2
 8011f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	683a      	ldr	r2, [r7, #0]
 8011f5c:	7812      	ldrb	r2, [r2, #0]
 8011f5e:	0151      	lsls	r1, r2, #5
 8011f60:	693a      	ldr	r2, [r7, #16]
 8011f62:	440a      	add	r2, r1
 8011f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011f6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	3301      	adds	r3, #1
 8011f72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	f242 7210 	movw	r2, #10000	; 0x2710
 8011f7a:	4293      	cmp	r3, r2
 8011f7c:	d902      	bls.n	8011f84 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011f7e:	2301      	movs	r3, #1
 8011f80:	75fb      	strb	r3, [r7, #23]
          break;
 8011f82:	e00c      	b.n	8011f9e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	015a      	lsls	r2, r3, #5
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f9c:	d0e7      	beq.n	8011f6e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	371c      	adds	r7, #28
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011faa:	4770      	bx	lr

08011fac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011fac:	b480      	push	{r7}
 8011fae:	b089      	sub	sp, #36	; 0x24
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	60f8      	str	r0, [r7, #12]
 8011fb4:	60b9      	str	r1, [r7, #8]
 8011fb6:	4611      	mov	r1, r2
 8011fb8:	461a      	mov	r2, r3
 8011fba:	460b      	mov	r3, r1
 8011fbc:	71fb      	strb	r3, [r7, #7]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011fca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d123      	bne.n	801201a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011fd2:	88bb      	ldrh	r3, [r7, #4]
 8011fd4:	3303      	adds	r3, #3
 8011fd6:	089b      	lsrs	r3, r3, #2
 8011fd8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011fda:	2300      	movs	r3, #0
 8011fdc:	61bb      	str	r3, [r7, #24]
 8011fde:	e018      	b.n	8012012 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011fe0:	79fb      	ldrb	r3, [r7, #7]
 8011fe2:	031a      	lsls	r2, r3, #12
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fec:	461a      	mov	r2, r3
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011ff4:	69fb      	ldr	r3, [r7, #28]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011ffa:	69fb      	ldr	r3, [r7, #28]
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	3301      	adds	r3, #1
 8012004:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	3301      	adds	r3, #1
 801200a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	3301      	adds	r3, #1
 8012010:	61bb      	str	r3, [r7, #24]
 8012012:	69ba      	ldr	r2, [r7, #24]
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	429a      	cmp	r2, r3
 8012018:	d3e2      	bcc.n	8011fe0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3724      	adds	r7, #36	; 0x24
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr

08012028 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012028:	b480      	push	{r7}
 801202a:	b08b      	sub	sp, #44	; 0x2c
 801202c:	af00      	add	r7, sp, #0
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	60b9      	str	r1, [r7, #8]
 8012032:	4613      	mov	r3, r2
 8012034:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801203e:	88fb      	ldrh	r3, [r7, #6]
 8012040:	089b      	lsrs	r3, r3, #2
 8012042:	b29b      	uxth	r3, r3
 8012044:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012046:	88fb      	ldrh	r3, [r7, #6]
 8012048:	f003 0303 	and.w	r3, r3, #3
 801204c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801204e:	2300      	movs	r3, #0
 8012050:	623b      	str	r3, [r7, #32]
 8012052:	e014      	b.n	801207e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012054:	69bb      	ldr	r3, [r7, #24]
 8012056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205e:	601a      	str	r2, [r3, #0]
    pDest++;
 8012060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012062:	3301      	adds	r3, #1
 8012064:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012068:	3301      	adds	r3, #1
 801206a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206e:	3301      	adds	r3, #1
 8012070:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012074:	3301      	adds	r3, #1
 8012076:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012078:	6a3b      	ldr	r3, [r7, #32]
 801207a:	3301      	adds	r3, #1
 801207c:	623b      	str	r3, [r7, #32]
 801207e:	6a3a      	ldr	r2, [r7, #32]
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	429a      	cmp	r2, r3
 8012084:	d3e6      	bcc.n	8012054 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012086:	8bfb      	ldrh	r3, [r7, #30]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d01e      	beq.n	80120ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801208c:	2300      	movs	r3, #0
 801208e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012090:	69bb      	ldr	r3, [r7, #24]
 8012092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012096:	461a      	mov	r2, r3
 8012098:	f107 0310 	add.w	r3, r7, #16
 801209c:	6812      	ldr	r2, [r2, #0]
 801209e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80120a0:	693a      	ldr	r2, [r7, #16]
 80120a2:	6a3b      	ldr	r3, [r7, #32]
 80120a4:	b2db      	uxtb	r3, r3
 80120a6:	00db      	lsls	r3, r3, #3
 80120a8:	fa22 f303 	lsr.w	r3, r2, r3
 80120ac:	b2da      	uxtb	r2, r3
 80120ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b0:	701a      	strb	r2, [r3, #0]
      i++;
 80120b2:	6a3b      	ldr	r3, [r7, #32]
 80120b4:	3301      	adds	r3, #1
 80120b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	3301      	adds	r3, #1
 80120bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80120be:	8bfb      	ldrh	r3, [r7, #30]
 80120c0:	3b01      	subs	r3, #1
 80120c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80120c4:	8bfb      	ldrh	r3, [r7, #30]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d1ea      	bne.n	80120a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80120ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	372c      	adds	r7, #44	; 0x2c
 80120d0:	46bd      	mov	sp, r7
 80120d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d6:	4770      	bx	lr

080120d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80120d8:	b480      	push	{r7}
 80120da:	b085      	sub	sp, #20
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	785b      	ldrb	r3, [r3, #1]
 80120f0:	2b01      	cmp	r3, #1
 80120f2:	d12c      	bne.n	801214e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	015a      	lsls	r2, r3, #5
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	4413      	add	r3, r2
 80120fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	2b00      	cmp	r3, #0
 8012104:	db12      	blt.n	801212c <USB_EPSetStall+0x54>
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00f      	beq.n	801212c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	015a      	lsls	r2, r3, #5
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	4413      	add	r3, r2
 8012114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	68ba      	ldr	r2, [r7, #8]
 801211c:	0151      	lsls	r1, r2, #5
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	440a      	add	r2, r1
 8012122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012126:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801212a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	015a      	lsls	r2, r3, #5
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	4413      	add	r3, r2
 8012134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	68ba      	ldr	r2, [r7, #8]
 801213c:	0151      	lsls	r1, r2, #5
 801213e:	68fa      	ldr	r2, [r7, #12]
 8012140:	440a      	add	r2, r1
 8012142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012146:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801214a:	6013      	str	r3, [r2, #0]
 801214c:	e02b      	b.n	80121a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	015a      	lsls	r2, r3, #5
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	4413      	add	r3, r2
 8012156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	db12      	blt.n	8012186 <USB_EPSetStall+0xae>
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d00f      	beq.n	8012186 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	015a      	lsls	r2, r3, #5
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	4413      	add	r3, r2
 801216e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	68ba      	ldr	r2, [r7, #8]
 8012176:	0151      	lsls	r1, r2, #5
 8012178:	68fa      	ldr	r2, [r7, #12]
 801217a:	440a      	add	r2, r1
 801217c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012180:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012184:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	015a      	lsls	r2, r3, #5
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	4413      	add	r3, r2
 801218e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	68ba      	ldr	r2, [r7, #8]
 8012196:	0151      	lsls	r1, r2, #5
 8012198:	68fa      	ldr	r2, [r7, #12]
 801219a:	440a      	add	r2, r1
 801219c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80121a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80121a6:	2300      	movs	r3, #0
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3714      	adds	r7, #20
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr

080121b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80121b4:	b480      	push	{r7}
 80121b6:	b085      	sub	sp, #20
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
 80121bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	785b      	ldrb	r3, [r3, #1]
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d128      	bne.n	8012222 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	015a      	lsls	r2, r3, #5
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	4413      	add	r3, r2
 80121d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	68ba      	ldr	r2, [r7, #8]
 80121e0:	0151      	lsls	r1, r2, #5
 80121e2:	68fa      	ldr	r2, [r7, #12]
 80121e4:	440a      	add	r2, r1
 80121e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80121ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	791b      	ldrb	r3, [r3, #4]
 80121f4:	2b03      	cmp	r3, #3
 80121f6:	d003      	beq.n	8012200 <USB_EPClearStall+0x4c>
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	791b      	ldrb	r3, [r3, #4]
 80121fc:	2b02      	cmp	r3, #2
 80121fe:	d138      	bne.n	8012272 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	015a      	lsls	r2, r3, #5
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	4413      	add	r3, r2
 8012208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	68ba      	ldr	r2, [r7, #8]
 8012210:	0151      	lsls	r1, r2, #5
 8012212:	68fa      	ldr	r2, [r7, #12]
 8012214:	440a      	add	r2, r1
 8012216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801221e:	6013      	str	r3, [r2, #0]
 8012220:	e027      	b.n	8012272 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	015a      	lsls	r2, r3, #5
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	4413      	add	r3, r2
 801222a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	68ba      	ldr	r2, [r7, #8]
 8012232:	0151      	lsls	r1, r2, #5
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	440a      	add	r2, r1
 8012238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801223c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012240:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	791b      	ldrb	r3, [r3, #4]
 8012246:	2b03      	cmp	r3, #3
 8012248:	d003      	beq.n	8012252 <USB_EPClearStall+0x9e>
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	791b      	ldrb	r3, [r3, #4]
 801224e:	2b02      	cmp	r3, #2
 8012250:	d10f      	bne.n	8012272 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	015a      	lsls	r2, r3, #5
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	4413      	add	r3, r2
 801225a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	68ba      	ldr	r2, [r7, #8]
 8012262:	0151      	lsls	r1, r2, #5
 8012264:	68fa      	ldr	r2, [r7, #12]
 8012266:	440a      	add	r2, r1
 8012268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012270:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012272:	2300      	movs	r3, #0
}
 8012274:	4618      	mov	r0, r3
 8012276:	3714      	adds	r7, #20
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr

08012280 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012280:	b480      	push	{r7}
 8012282:	b085      	sub	sp, #20
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	460b      	mov	r3, r1
 801228a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801229e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80122a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	78fb      	ldrb	r3, [r7, #3]
 80122ae:	011b      	lsls	r3, r3, #4
 80122b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80122b4:	68f9      	ldr	r1, [r7, #12]
 80122b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122ba:	4313      	orrs	r3, r2
 80122bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80122be:	2300      	movs	r3, #0
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	3714      	adds	r7, #20
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b085      	sub	sp, #20
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	695b      	ldr	r3, [r3, #20]
 80122d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	699b      	ldr	r3, [r3, #24]
 80122de:	68fa      	ldr	r2, [r7, #12]
 80122e0:	4013      	ands	r3, r2
 80122e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80122e4:	68fb      	ldr	r3, [r7, #12]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3714      	adds	r7, #20
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr

080122f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80122f2:	b480      	push	{r7}
 80122f4:	b085      	sub	sp, #20
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012304:	699b      	ldr	r3, [r3, #24]
 8012306:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801230e:	69db      	ldr	r3, [r3, #28]
 8012310:	68ba      	ldr	r2, [r7, #8]
 8012312:	4013      	ands	r3, r2
 8012314:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	0c1b      	lsrs	r3, r3, #16
}
 801231a:	4618      	mov	r0, r3
 801231c:	3714      	adds	r7, #20
 801231e:	46bd      	mov	sp, r7
 8012320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012324:	4770      	bx	lr

08012326 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012326:	b480      	push	{r7}
 8012328:	b085      	sub	sp, #20
 801232a:	af00      	add	r7, sp, #0
 801232c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012338:	699b      	ldr	r3, [r3, #24]
 801233a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012342:	69db      	ldr	r3, [r3, #28]
 8012344:	68ba      	ldr	r2, [r7, #8]
 8012346:	4013      	ands	r3, r2
 8012348:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	b29b      	uxth	r3, r3
}
 801234e:	4618      	mov	r0, r3
 8012350:	3714      	adds	r7, #20
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr

0801235a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801235a:	b480      	push	{r7}
 801235c:	b085      	sub	sp, #20
 801235e:	af00      	add	r7, sp, #0
 8012360:	6078      	str	r0, [r7, #4]
 8012362:	460b      	mov	r3, r1
 8012364:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801236a:	78fb      	ldrb	r3, [r7, #3]
 801236c:	015a      	lsls	r2, r3, #5
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	4413      	add	r3, r2
 8012372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012376:	689b      	ldr	r3, [r3, #8]
 8012378:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012380:	695b      	ldr	r3, [r3, #20]
 8012382:	68ba      	ldr	r2, [r7, #8]
 8012384:	4013      	ands	r3, r2
 8012386:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012388:	68bb      	ldr	r3, [r7, #8]
}
 801238a:	4618      	mov	r0, r3
 801238c:	3714      	adds	r7, #20
 801238e:	46bd      	mov	sp, r7
 8012390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012394:	4770      	bx	lr

08012396 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012396:	b480      	push	{r7}
 8012398:	b087      	sub	sp, #28
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
 801239e:	460b      	mov	r3, r1
 80123a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123ac:	691b      	ldr	r3, [r3, #16]
 80123ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80123ba:	78fb      	ldrb	r3, [r7, #3]
 80123bc:	f003 030f 	and.w	r3, r3, #15
 80123c0:	68fa      	ldr	r2, [r7, #12]
 80123c2:	fa22 f303 	lsr.w	r3, r2, r3
 80123c6:	01db      	lsls	r3, r3, #7
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	693a      	ldr	r2, [r7, #16]
 80123cc:	4313      	orrs	r3, r2
 80123ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80123d0:	78fb      	ldrb	r3, [r7, #3]
 80123d2:	015a      	lsls	r2, r3, #5
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	4413      	add	r3, r2
 80123d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123dc:	689b      	ldr	r3, [r3, #8]
 80123de:	693a      	ldr	r2, [r7, #16]
 80123e0:	4013      	ands	r3, r2
 80123e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80123e4:	68bb      	ldr	r3, [r7, #8]
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	371c      	adds	r7, #28
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr

080123f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80123f2:	b480      	push	{r7}
 80123f4:	b083      	sub	sp, #12
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	695b      	ldr	r3, [r3, #20]
 80123fe:	f003 0301 	and.w	r3, r3, #1
}
 8012402:	4618      	mov	r0, r3
 8012404:	370c      	adds	r7, #12
 8012406:	46bd      	mov	sp, r7
 8012408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240c:	4770      	bx	lr

0801240e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801240e:	b480      	push	{r7}
 8012410:	b085      	sub	sp, #20
 8012412:	af00      	add	r7, sp, #0
 8012414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	68fa      	ldr	r2, [r7, #12]
 8012424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012428:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801242c:	f023 0307 	bic.w	r3, r3, #7
 8012430:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	68fa      	ldr	r2, [r7, #12]
 801243c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012444:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012446:	2300      	movs	r3, #0
}
 8012448:	4618      	mov	r0, r3
 801244a:	3714      	adds	r7, #20
 801244c:	46bd      	mov	sp, r7
 801244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012452:	4770      	bx	lr

08012454 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012454:	b480      	push	{r7}
 8012456:	b087      	sub	sp, #28
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	460b      	mov	r3, r1
 801245e:	607a      	str	r2, [r7, #4]
 8012460:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	333c      	adds	r3, #60	; 0x3c
 801246a:	3304      	adds	r3, #4
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	4a26      	ldr	r2, [pc, #152]	; (801250c <USB_EP0_OutStart+0xb8>)
 8012474:	4293      	cmp	r3, r2
 8012476:	d90a      	bls.n	801248e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012488:	d101      	bne.n	801248e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801248a:	2300      	movs	r3, #0
 801248c:	e037      	b.n	80124fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012494:	461a      	mov	r2, r3
 8012496:	2300      	movs	r3, #0
 8012498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124a0:	691b      	ldr	r3, [r3, #16]
 80124a2:	697a      	ldr	r2, [r7, #20]
 80124a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80124ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124b4:	691b      	ldr	r3, [r3, #16]
 80124b6:	697a      	ldr	r2, [r7, #20]
 80124b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124bc:	f043 0318 	orr.w	r3, r3, #24
 80124c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124c8:	691b      	ldr	r3, [r3, #16]
 80124ca:	697a      	ldr	r2, [r7, #20]
 80124cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80124d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80124d6:	7afb      	ldrb	r3, [r7, #11]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d10f      	bne.n	80124fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124e2:	461a      	mov	r2, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	697a      	ldr	r2, [r7, #20]
 80124f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80124fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80124fc:	2300      	movs	r3, #0
}
 80124fe:	4618      	mov	r0, r3
 8012500:	371c      	adds	r7, #28
 8012502:	46bd      	mov	sp, r7
 8012504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012508:	4770      	bx	lr
 801250a:	bf00      	nop
 801250c:	4f54300a 	.word	0x4f54300a

08012510 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012518:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801251a:	4618      	mov	r0, r3
 801251c:	370c      	adds	r7, #12
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr

08012526 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012526:	b580      	push	{r7, lr}
 8012528:	b084      	sub	sp, #16
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
 801252e:	460b      	mov	r3, r1
 8012530:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012532:	2300      	movs	r3, #0
 8012534:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801253c:	2b00      	cmp	r3, #0
 801253e:	d009      	beq.n	8012554 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	78fa      	ldrb	r2, [r7, #3]
 801254a:	4611      	mov	r1, r2
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	4798      	blx	r3
 8012550:	4603      	mov	r3, r0
 8012552:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012554:	7bfb      	ldrb	r3, [r7, #15]
}
 8012556:	4618      	mov	r0, r3
 8012558:	3710      	adds	r7, #16
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}

0801255e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801255e:	b580      	push	{r7, lr}
 8012560:	b084      	sub	sp, #16
 8012562:	af00      	add	r7, sp, #0
 8012564:	6078      	str	r0, [r7, #4]
 8012566:	460b      	mov	r3, r1
 8012568:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801256a:	2300      	movs	r3, #0
 801256c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	78fa      	ldrb	r2, [r7, #3]
 8012578:	4611      	mov	r1, r2
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	4798      	blx	r3
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d001      	beq.n	8012588 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012584:	2303      	movs	r3, #3
 8012586:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012588:	7bfb      	ldrb	r3, [r7, #15]
}
 801258a:	4618      	mov	r0, r3
 801258c:	3710      	adds	r7, #16
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}

08012592 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012592:	b580      	push	{r7, lr}
 8012594:	b084      	sub	sp, #16
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
 801259a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80125a2:	6839      	ldr	r1, [r7, #0]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f001 f8b2 	bl	801370e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2201      	movs	r2, #1
 80125ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80125b8:	461a      	mov	r2, r3
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80125c6:	f003 031f 	and.w	r3, r3, #31
 80125ca:	2b02      	cmp	r3, #2
 80125cc:	d01a      	beq.n	8012604 <USBD_LL_SetupStage+0x72>
 80125ce:	2b02      	cmp	r3, #2
 80125d0:	d822      	bhi.n	8012618 <USBD_LL_SetupStage+0x86>
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d002      	beq.n	80125dc <USBD_LL_SetupStage+0x4a>
 80125d6:	2b01      	cmp	r3, #1
 80125d8:	d00a      	beq.n	80125f0 <USBD_LL_SetupStage+0x5e>
 80125da:	e01d      	b.n	8012618 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80125e2:	4619      	mov	r1, r3
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f000 fb09 	bl	8012bfc <USBD_StdDevReq>
 80125ea:	4603      	mov	r3, r0
 80125ec:	73fb      	strb	r3, [r7, #15]
      break;
 80125ee:	e020      	b.n	8012632 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80125f6:	4619      	mov	r1, r3
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f000 fb71 	bl	8012ce0 <USBD_StdItfReq>
 80125fe:	4603      	mov	r3, r0
 8012600:	73fb      	strb	r3, [r7, #15]
      break;
 8012602:	e016      	b.n	8012632 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801260a:	4619      	mov	r1, r3
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f000 fbd3 	bl	8012db8 <USBD_StdEPReq>
 8012612:	4603      	mov	r3, r0
 8012614:	73fb      	strb	r3, [r7, #15]
      break;
 8012616:	e00c      	b.n	8012632 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801261e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012622:	b2db      	uxtb	r3, r3
 8012624:	4619      	mov	r1, r3
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f002 fdd0 	bl	80151cc <USBD_LL_StallEP>
 801262c:	4603      	mov	r3, r0
 801262e:	73fb      	strb	r3, [r7, #15]
      break;
 8012630:	bf00      	nop
  }

  return ret;
 8012632:	7bfb      	ldrb	r3, [r7, #15]
}
 8012634:	4618      	mov	r0, r3
 8012636:	3710      	adds	r7, #16
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b086      	sub	sp, #24
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	460b      	mov	r3, r1
 8012646:	607a      	str	r2, [r7, #4]
 8012648:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801264a:	2300      	movs	r3, #0
 801264c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801264e:	7afb      	ldrb	r3, [r7, #11]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d16e      	bne.n	8012732 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801265a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012662:	2b03      	cmp	r3, #3
 8012664:	f040 8098 	bne.w	8012798 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	689a      	ldr	r2, [r3, #8]
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	68db      	ldr	r3, [r3, #12]
 8012670:	429a      	cmp	r2, r3
 8012672:	d913      	bls.n	801269c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012674:	693b      	ldr	r3, [r7, #16]
 8012676:	689a      	ldr	r2, [r3, #8]
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	1ad2      	subs	r2, r2, r3
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	68da      	ldr	r2, [r3, #12]
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	689b      	ldr	r3, [r3, #8]
 801268a:	4293      	cmp	r3, r2
 801268c:	bf28      	it	cs
 801268e:	4613      	movcs	r3, r2
 8012690:	461a      	mov	r2, r3
 8012692:	6879      	ldr	r1, [r7, #4]
 8012694:	68f8      	ldr	r0, [r7, #12]
 8012696:	f001 f8b1 	bl	80137fc <USBD_CtlContinueRx>
 801269a:	e07d      	b.n	8012798 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80126a2:	f003 031f 	and.w	r3, r3, #31
 80126a6:	2b02      	cmp	r3, #2
 80126a8:	d014      	beq.n	80126d4 <USBD_LL_DataOutStage+0x98>
 80126aa:	2b02      	cmp	r3, #2
 80126ac:	d81d      	bhi.n	80126ea <USBD_LL_DataOutStage+0xae>
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d002      	beq.n	80126b8 <USBD_LL_DataOutStage+0x7c>
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d003      	beq.n	80126be <USBD_LL_DataOutStage+0x82>
 80126b6:	e018      	b.n	80126ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80126b8:	2300      	movs	r3, #0
 80126ba:	75bb      	strb	r3, [r7, #22]
            break;
 80126bc:	e018      	b.n	80126f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	4619      	mov	r1, r3
 80126c8:	68f8      	ldr	r0, [r7, #12]
 80126ca:	f000 fa5e 	bl	8012b8a <USBD_CoreFindIF>
 80126ce:	4603      	mov	r3, r0
 80126d0:	75bb      	strb	r3, [r7, #22]
            break;
 80126d2:	e00d      	b.n	80126f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	4619      	mov	r1, r3
 80126de:	68f8      	ldr	r0, [r7, #12]
 80126e0:	f000 fa60 	bl	8012ba4 <USBD_CoreFindEP>
 80126e4:	4603      	mov	r3, r0
 80126e6:	75bb      	strb	r3, [r7, #22]
            break;
 80126e8:	e002      	b.n	80126f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80126ea:	2300      	movs	r3, #0
 80126ec:	75bb      	strb	r3, [r7, #22]
            break;
 80126ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80126f0:	7dbb      	ldrb	r3, [r7, #22]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d119      	bne.n	801272a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126fc:	b2db      	uxtb	r3, r3
 80126fe:	2b03      	cmp	r3, #3
 8012700:	d113      	bne.n	801272a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012702:	7dba      	ldrb	r2, [r7, #22]
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	32ae      	adds	r2, #174	; 0xae
 8012708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801270c:	691b      	ldr	r3, [r3, #16]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d00b      	beq.n	801272a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012712:	7dba      	ldrb	r2, [r7, #22]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801271a:	7dba      	ldrb	r2, [r7, #22]
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	32ae      	adds	r2, #174	; 0xae
 8012720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012724:	691b      	ldr	r3, [r3, #16]
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801272a:	68f8      	ldr	r0, [r7, #12]
 801272c:	f001 f877 	bl	801381e <USBD_CtlSendStatus>
 8012730:	e032      	b.n	8012798 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012732:	7afb      	ldrb	r3, [r7, #11]
 8012734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012738:	b2db      	uxtb	r3, r3
 801273a:	4619      	mov	r1, r3
 801273c:	68f8      	ldr	r0, [r7, #12]
 801273e:	f000 fa31 	bl	8012ba4 <USBD_CoreFindEP>
 8012742:	4603      	mov	r3, r0
 8012744:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012746:	7dbb      	ldrb	r3, [r7, #22]
 8012748:	2bff      	cmp	r3, #255	; 0xff
 801274a:	d025      	beq.n	8012798 <USBD_LL_DataOutStage+0x15c>
 801274c:	7dbb      	ldrb	r3, [r7, #22]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d122      	bne.n	8012798 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012758:	b2db      	uxtb	r3, r3
 801275a:	2b03      	cmp	r3, #3
 801275c:	d117      	bne.n	801278e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801275e:	7dba      	ldrb	r2, [r7, #22]
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	32ae      	adds	r2, #174	; 0xae
 8012764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012768:	699b      	ldr	r3, [r3, #24]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d00f      	beq.n	801278e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801276e:	7dba      	ldrb	r2, [r7, #22]
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012776:	7dba      	ldrb	r2, [r7, #22]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	32ae      	adds	r2, #174	; 0xae
 801277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012780:	699b      	ldr	r3, [r3, #24]
 8012782:	7afa      	ldrb	r2, [r7, #11]
 8012784:	4611      	mov	r1, r2
 8012786:	68f8      	ldr	r0, [r7, #12]
 8012788:	4798      	blx	r3
 801278a:	4603      	mov	r3, r0
 801278c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801278e:	7dfb      	ldrb	r3, [r7, #23]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012794:	7dfb      	ldrb	r3, [r7, #23]
 8012796:	e000      	b.n	801279a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012798:	2300      	movs	r3, #0
}
 801279a:	4618      	mov	r0, r3
 801279c:	3718      	adds	r7, #24
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}

080127a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80127a2:	b580      	push	{r7, lr}
 80127a4:	b086      	sub	sp, #24
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	60f8      	str	r0, [r7, #12]
 80127aa:	460b      	mov	r3, r1
 80127ac:	607a      	str	r2, [r7, #4]
 80127ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80127b0:	7afb      	ldrb	r3, [r7, #11]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d16f      	bne.n	8012896 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	3314      	adds	r3, #20
 80127ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80127c2:	2b02      	cmp	r3, #2
 80127c4:	d15a      	bne.n	801287c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	689a      	ldr	r2, [r3, #8]
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d914      	bls.n	80127fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	689a      	ldr	r2, [r3, #8]
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	1ad2      	subs	r2, r2, r3
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	689b      	ldr	r3, [r3, #8]
 80127e4:	461a      	mov	r2, r3
 80127e6:	6879      	ldr	r1, [r7, #4]
 80127e8:	68f8      	ldr	r0, [r7, #12]
 80127ea:	f000 fff6 	bl	80137da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80127ee:	2300      	movs	r3, #0
 80127f0:	2200      	movs	r2, #0
 80127f2:	2100      	movs	r1, #0
 80127f4:	68f8      	ldr	r0, [r7, #12]
 80127f6:	f002 fd93 	bl	8015320 <USBD_LL_PrepareReceive>
 80127fa:	e03f      	b.n	801287c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	68da      	ldr	r2, [r3, #12]
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	689b      	ldr	r3, [r3, #8]
 8012804:	429a      	cmp	r2, r3
 8012806:	d11c      	bne.n	8012842 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	685a      	ldr	r2, [r3, #4]
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012810:	429a      	cmp	r2, r3
 8012812:	d316      	bcc.n	8012842 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	685a      	ldr	r2, [r3, #4]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801281e:	429a      	cmp	r2, r3
 8012820:	d20f      	bcs.n	8012842 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012822:	2200      	movs	r2, #0
 8012824:	2100      	movs	r1, #0
 8012826:	68f8      	ldr	r0, [r7, #12]
 8012828:	f000 ffd7 	bl	80137da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2200      	movs	r2, #0
 8012830:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012834:	2300      	movs	r3, #0
 8012836:	2200      	movs	r2, #0
 8012838:	2100      	movs	r1, #0
 801283a:	68f8      	ldr	r0, [r7, #12]
 801283c:	f002 fd70 	bl	8015320 <USBD_LL_PrepareReceive>
 8012840:	e01c      	b.n	801287c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b03      	cmp	r3, #3
 801284c:	d10f      	bne.n	801286e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d009      	beq.n	801286e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	2200      	movs	r2, #0
 801285e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801286e:	2180      	movs	r1, #128	; 0x80
 8012870:	68f8      	ldr	r0, [r7, #12]
 8012872:	f002 fcab 	bl	80151cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012876:	68f8      	ldr	r0, [r7, #12]
 8012878:	f000 ffe4 	bl	8013844 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d03a      	beq.n	80128fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012886:	68f8      	ldr	r0, [r7, #12]
 8012888:	f7ff fe42 	bl	8012510 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	2200      	movs	r2, #0
 8012890:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012894:	e032      	b.n	80128fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012896:	7afb      	ldrb	r3, [r7, #11]
 8012898:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801289c:	b2db      	uxtb	r3, r3
 801289e:	4619      	mov	r1, r3
 80128a0:	68f8      	ldr	r0, [r7, #12]
 80128a2:	f000 f97f 	bl	8012ba4 <USBD_CoreFindEP>
 80128a6:	4603      	mov	r3, r0
 80128a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80128aa:	7dfb      	ldrb	r3, [r7, #23]
 80128ac:	2bff      	cmp	r3, #255	; 0xff
 80128ae:	d025      	beq.n	80128fc <USBD_LL_DataInStage+0x15a>
 80128b0:	7dfb      	ldrb	r3, [r7, #23]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d122      	bne.n	80128fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	2b03      	cmp	r3, #3
 80128c0:	d11c      	bne.n	80128fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80128c2:	7dfa      	ldrb	r2, [r7, #23]
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	32ae      	adds	r2, #174	; 0xae
 80128c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128cc:	695b      	ldr	r3, [r3, #20]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d014      	beq.n	80128fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80128d2:	7dfa      	ldrb	r2, [r7, #23]
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80128da:	7dfa      	ldrb	r2, [r7, #23]
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	32ae      	adds	r2, #174	; 0xae
 80128e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128e4:	695b      	ldr	r3, [r3, #20]
 80128e6:	7afa      	ldrb	r2, [r7, #11]
 80128e8:	4611      	mov	r1, r2
 80128ea:	68f8      	ldr	r0, [r7, #12]
 80128ec:	4798      	blx	r3
 80128ee:	4603      	mov	r3, r0
 80128f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80128f2:	7dbb      	ldrb	r3, [r7, #22]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d001      	beq.n	80128fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80128f8:	7dbb      	ldrb	r3, [r7, #22]
 80128fa:	e000      	b.n	80128fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80128fc:	2300      	movs	r3, #0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3718      	adds	r7, #24
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b084      	sub	sp, #16
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801290e:	2300      	movs	r3, #0
 8012910:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2201      	movs	r2, #1
 8012916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2200      	movs	r2, #0
 801291e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2200      	movs	r2, #0
 8012926:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2200      	movs	r2, #0
 801292c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801293e:	2b00      	cmp	r3, #0
 8012940:	d014      	beq.n	801296c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d00e      	beq.n	801296c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	687a      	ldr	r2, [r7, #4]
 8012958:	6852      	ldr	r2, [r2, #4]
 801295a:	b2d2      	uxtb	r2, r2
 801295c:	4611      	mov	r1, r2
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	4798      	blx	r3
 8012962:	4603      	mov	r3, r0
 8012964:	2b00      	cmp	r3, #0
 8012966:	d001      	beq.n	801296c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012968:	2303      	movs	r3, #3
 801296a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801296c:	2340      	movs	r3, #64	; 0x40
 801296e:	2200      	movs	r2, #0
 8012970:	2100      	movs	r1, #0
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f002 fc04 	bl	8015180 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2201      	movs	r2, #1
 801297c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2240      	movs	r2, #64	; 0x40
 8012984:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012988:	2340      	movs	r3, #64	; 0x40
 801298a:	2200      	movs	r2, #0
 801298c:	2180      	movs	r1, #128	; 0x80
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f002 fbf6 	bl	8015180 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2201      	movs	r2, #1
 8012998:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2240      	movs	r2, #64	; 0x40
 801299e:	621a      	str	r2, [r3, #32]

  return ret;
 80129a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3710      	adds	r7, #16
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}

080129aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80129aa:	b480      	push	{r7}
 80129ac:	b083      	sub	sp, #12
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
 80129b2:	460b      	mov	r3, r1
 80129b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	78fa      	ldrb	r2, [r7, #3]
 80129ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80129bc:	2300      	movs	r3, #0
}
 80129be:	4618      	mov	r0, r3
 80129c0:	370c      	adds	r7, #12
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr

080129ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80129ca:	b480      	push	{r7}
 80129cc:	b083      	sub	sp, #12
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129d8:	b2da      	uxtb	r2, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2204      	movs	r2, #4
 80129e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	370c      	adds	r7, #12
 80129ee:	46bd      	mov	sp, r7
 80129f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f4:	4770      	bx	lr

080129f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80129f6:	b480      	push	{r7}
 80129f8:	b083      	sub	sp, #12
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	2b04      	cmp	r3, #4
 8012a08:	d106      	bne.n	8012a18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012a10:	b2da      	uxtb	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012a18:	2300      	movs	r3, #0
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	370c      	adds	r7, #12
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a24:	4770      	bx	lr

08012a26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b082      	sub	sp, #8
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a34:	b2db      	uxtb	r3, r3
 8012a36:	2b03      	cmp	r3, #3
 8012a38:	d110      	bne.n	8012a5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d00b      	beq.n	8012a5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a4a:	69db      	ldr	r3, [r3, #28]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d005      	beq.n	8012a5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a56:	69db      	ldr	r3, [r3, #28]
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012a5c:	2300      	movs	r3, #0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3708      	adds	r7, #8
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b082      	sub	sp, #8
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
 8012a6e:	460b      	mov	r3, r1
 8012a70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	32ae      	adds	r2, #174	; 0xae
 8012a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d101      	bne.n	8012a88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012a84:	2303      	movs	r3, #3
 8012a86:	e01c      	b.n	8012ac2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	2b03      	cmp	r3, #3
 8012a92:	d115      	bne.n	8012ac0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	32ae      	adds	r2, #174	; 0xae
 8012a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aa2:	6a1b      	ldr	r3, [r3, #32]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d00b      	beq.n	8012ac0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	32ae      	adds	r2, #174	; 0xae
 8012ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ab6:	6a1b      	ldr	r3, [r3, #32]
 8012ab8:	78fa      	ldrb	r2, [r7, #3]
 8012aba:	4611      	mov	r1, r2
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012ac0:	2300      	movs	r3, #0
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3708      	adds	r7, #8
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}

08012aca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012aca:	b580      	push	{r7, lr}
 8012acc:	b082      	sub	sp, #8
 8012ace:	af00      	add	r7, sp, #0
 8012ad0:	6078      	str	r0, [r7, #4]
 8012ad2:	460b      	mov	r3, r1
 8012ad4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	32ae      	adds	r2, #174	; 0xae
 8012ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d101      	bne.n	8012aec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012ae8:	2303      	movs	r3, #3
 8012aea:	e01c      	b.n	8012b26 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	2b03      	cmp	r3, #3
 8012af6:	d115      	bne.n	8012b24 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	32ae      	adds	r2, #174	; 0xae
 8012b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d00b      	beq.n	8012b24 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	32ae      	adds	r2, #174	; 0xae
 8012b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b1c:	78fa      	ldrb	r2, [r7, #3]
 8012b1e:	4611      	mov	r1, r2
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012b24:	2300      	movs	r3, #0
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3708      	adds	r7, #8
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}

08012b2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012b2e:	b480      	push	{r7}
 8012b30:	b083      	sub	sp, #12
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012b36:	2300      	movs	r3, #0
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	370c      	adds	r7, #12
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr

08012b44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2201      	movs	r2, #1
 8012b54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d00e      	beq.n	8012b80 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	6852      	ldr	r2, [r2, #4]
 8012b6e:	b2d2      	uxtb	r2, r2
 8012b70:	4611      	mov	r1, r2
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	4798      	blx	r3
 8012b76:	4603      	mov	r3, r0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d001      	beq.n	8012b80 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012b7c:	2303      	movs	r3, #3
 8012b7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012b8a:	b480      	push	{r7}
 8012b8c:	b083      	sub	sp, #12
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
 8012b92:	460b      	mov	r3, r1
 8012b94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012b96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	370c      	adds	r7, #12
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr

08012ba4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	460b      	mov	r3, r1
 8012bae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012bb0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	370c      	adds	r7, #12
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbc:	4770      	bx	lr

08012bbe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012bbe:	b480      	push	{r7}
 8012bc0:	b087      	sub	sp, #28
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	781b      	ldrb	r3, [r3, #0]
 8012bce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012bdc:	8a3b      	ldrh	r3, [r7, #16]
 8012bde:	021b      	lsls	r3, r3, #8
 8012be0:	b21a      	sxth	r2, r3
 8012be2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012be6:	4313      	orrs	r3, r2
 8012be8:	b21b      	sxth	r3, r3
 8012bea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012bec:	89fb      	ldrh	r3, [r7, #14]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	371c      	adds	r7, #28
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf8:	4770      	bx	lr
	...

08012bfc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c06:	2300      	movs	r3, #0
 8012c08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012c12:	2b40      	cmp	r3, #64	; 0x40
 8012c14:	d005      	beq.n	8012c22 <USBD_StdDevReq+0x26>
 8012c16:	2b40      	cmp	r3, #64	; 0x40
 8012c18:	d857      	bhi.n	8012cca <USBD_StdDevReq+0xce>
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d00f      	beq.n	8012c3e <USBD_StdDevReq+0x42>
 8012c1e:	2b20      	cmp	r3, #32
 8012c20:	d153      	bne.n	8012cca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	32ae      	adds	r2, #174	; 0xae
 8012c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c30:	689b      	ldr	r3, [r3, #8]
 8012c32:	6839      	ldr	r1, [r7, #0]
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	4798      	blx	r3
 8012c38:	4603      	mov	r3, r0
 8012c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8012c3c:	e04a      	b.n	8012cd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	785b      	ldrb	r3, [r3, #1]
 8012c42:	2b09      	cmp	r3, #9
 8012c44:	d83b      	bhi.n	8012cbe <USBD_StdDevReq+0xc2>
 8012c46:	a201      	add	r2, pc, #4	; (adr r2, 8012c4c <USBD_StdDevReq+0x50>)
 8012c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c4c:	08012ca1 	.word	0x08012ca1
 8012c50:	08012cb5 	.word	0x08012cb5
 8012c54:	08012cbf 	.word	0x08012cbf
 8012c58:	08012cab 	.word	0x08012cab
 8012c5c:	08012cbf 	.word	0x08012cbf
 8012c60:	08012c7f 	.word	0x08012c7f
 8012c64:	08012c75 	.word	0x08012c75
 8012c68:	08012cbf 	.word	0x08012cbf
 8012c6c:	08012c97 	.word	0x08012c97
 8012c70:	08012c89 	.word	0x08012c89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012c74:	6839      	ldr	r1, [r7, #0]
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f000 fa3c 	bl	80130f4 <USBD_GetDescriptor>
          break;
 8012c7c:	e024      	b.n	8012cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012c7e:	6839      	ldr	r1, [r7, #0]
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f000 fba1 	bl	80133c8 <USBD_SetAddress>
          break;
 8012c86:	e01f      	b.n	8012cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012c88:	6839      	ldr	r1, [r7, #0]
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f000 fbe0 	bl	8013450 <USBD_SetConfig>
 8012c90:	4603      	mov	r3, r0
 8012c92:	73fb      	strb	r3, [r7, #15]
          break;
 8012c94:	e018      	b.n	8012cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012c96:	6839      	ldr	r1, [r7, #0]
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f000 fc83 	bl	80135a4 <USBD_GetConfig>
          break;
 8012c9e:	e013      	b.n	8012cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012ca0:	6839      	ldr	r1, [r7, #0]
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f000 fcb4 	bl	8013610 <USBD_GetStatus>
          break;
 8012ca8:	e00e      	b.n	8012cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012caa:	6839      	ldr	r1, [r7, #0]
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f000 fce3 	bl	8013678 <USBD_SetFeature>
          break;
 8012cb2:	e009      	b.n	8012cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012cb4:	6839      	ldr	r1, [r7, #0]
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	f000 fd07 	bl	80136ca <USBD_ClrFeature>
          break;
 8012cbc:	e004      	b.n	8012cc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012cbe:	6839      	ldr	r1, [r7, #0]
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f000 fd5e 	bl	8013782 <USBD_CtlError>
          break;
 8012cc6:	bf00      	nop
      }
      break;
 8012cc8:	e004      	b.n	8012cd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012cca:	6839      	ldr	r1, [r7, #0]
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f000 fd58 	bl	8013782 <USBD_CtlError>
      break;
 8012cd2:	bf00      	nop
  }

  return ret;
 8012cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3710      	adds	r7, #16
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
 8012cde:	bf00      	nop

08012ce0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012cea:	2300      	movs	r3, #0
 8012cec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012cf6:	2b40      	cmp	r3, #64	; 0x40
 8012cf8:	d005      	beq.n	8012d06 <USBD_StdItfReq+0x26>
 8012cfa:	2b40      	cmp	r3, #64	; 0x40
 8012cfc:	d852      	bhi.n	8012da4 <USBD_StdItfReq+0xc4>
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d001      	beq.n	8012d06 <USBD_StdItfReq+0x26>
 8012d02:	2b20      	cmp	r3, #32
 8012d04:	d14e      	bne.n	8012da4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	3b01      	subs	r3, #1
 8012d10:	2b02      	cmp	r3, #2
 8012d12:	d840      	bhi.n	8012d96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	889b      	ldrh	r3, [r3, #4]
 8012d18:	b2db      	uxtb	r3, r3
 8012d1a:	2b01      	cmp	r3, #1
 8012d1c:	d836      	bhi.n	8012d8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	889b      	ldrh	r3, [r3, #4]
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	4619      	mov	r1, r3
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f7ff ff2f 	bl	8012b8a <USBD_CoreFindIF>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012d30:	7bbb      	ldrb	r3, [r7, #14]
 8012d32:	2bff      	cmp	r3, #255	; 0xff
 8012d34:	d01d      	beq.n	8012d72 <USBD_StdItfReq+0x92>
 8012d36:	7bbb      	ldrb	r3, [r7, #14]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d11a      	bne.n	8012d72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012d3c:	7bba      	ldrb	r2, [r7, #14]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	32ae      	adds	r2, #174	; 0xae
 8012d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d46:	689b      	ldr	r3, [r3, #8]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d00f      	beq.n	8012d6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012d4c:	7bba      	ldrb	r2, [r7, #14]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012d54:	7bba      	ldrb	r2, [r7, #14]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	32ae      	adds	r2, #174	; 0xae
 8012d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d5e:	689b      	ldr	r3, [r3, #8]
 8012d60:	6839      	ldr	r1, [r7, #0]
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	4798      	blx	r3
 8012d66:	4603      	mov	r3, r0
 8012d68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012d6a:	e004      	b.n	8012d76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012d6c:	2303      	movs	r3, #3
 8012d6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012d70:	e001      	b.n	8012d76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012d72:	2303      	movs	r3, #3
 8012d74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	88db      	ldrh	r3, [r3, #6]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d110      	bne.n	8012da0 <USBD_StdItfReq+0xc0>
 8012d7e:	7bfb      	ldrb	r3, [r7, #15]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d10d      	bne.n	8012da0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f000 fd4a 	bl	801381e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012d8a:	e009      	b.n	8012da0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012d8c:	6839      	ldr	r1, [r7, #0]
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f000 fcf7 	bl	8013782 <USBD_CtlError>
          break;
 8012d94:	e004      	b.n	8012da0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012d96:	6839      	ldr	r1, [r7, #0]
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f000 fcf2 	bl	8013782 <USBD_CtlError>
          break;
 8012d9e:	e000      	b.n	8012da2 <USBD_StdItfReq+0xc2>
          break;
 8012da0:	bf00      	nop
      }
      break;
 8012da2:	e004      	b.n	8012dae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012da4:	6839      	ldr	r1, [r7, #0]
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f000 fceb 	bl	8013782 <USBD_CtlError>
      break;
 8012dac:	bf00      	nop
  }

  return ret;
 8012dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	889b      	ldrh	r3, [r3, #4]
 8012dca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012dd4:	2b40      	cmp	r3, #64	; 0x40
 8012dd6:	d007      	beq.n	8012de8 <USBD_StdEPReq+0x30>
 8012dd8:	2b40      	cmp	r3, #64	; 0x40
 8012dda:	f200 817f 	bhi.w	80130dc <USBD_StdEPReq+0x324>
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d02a      	beq.n	8012e38 <USBD_StdEPReq+0x80>
 8012de2:	2b20      	cmp	r3, #32
 8012de4:	f040 817a 	bne.w	80130dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012de8:	7bbb      	ldrb	r3, [r7, #14]
 8012dea:	4619      	mov	r1, r3
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f7ff fed9 	bl	8012ba4 <USBD_CoreFindEP>
 8012df2:	4603      	mov	r3, r0
 8012df4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012df6:	7b7b      	ldrb	r3, [r7, #13]
 8012df8:	2bff      	cmp	r3, #255	; 0xff
 8012dfa:	f000 8174 	beq.w	80130e6 <USBD_StdEPReq+0x32e>
 8012dfe:	7b7b      	ldrb	r3, [r7, #13]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	f040 8170 	bne.w	80130e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012e06:	7b7a      	ldrb	r2, [r7, #13]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012e0e:	7b7a      	ldrb	r2, [r7, #13]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	32ae      	adds	r2, #174	; 0xae
 8012e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e18:	689b      	ldr	r3, [r3, #8]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	f000 8163 	beq.w	80130e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012e20:	7b7a      	ldrb	r2, [r7, #13]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	32ae      	adds	r2, #174	; 0xae
 8012e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e2a:	689b      	ldr	r3, [r3, #8]
 8012e2c:	6839      	ldr	r1, [r7, #0]
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	4798      	blx	r3
 8012e32:	4603      	mov	r3, r0
 8012e34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012e36:	e156      	b.n	80130e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	785b      	ldrb	r3, [r3, #1]
 8012e3c:	2b03      	cmp	r3, #3
 8012e3e:	d008      	beq.n	8012e52 <USBD_StdEPReq+0x9a>
 8012e40:	2b03      	cmp	r3, #3
 8012e42:	f300 8145 	bgt.w	80130d0 <USBD_StdEPReq+0x318>
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	f000 809b 	beq.w	8012f82 <USBD_StdEPReq+0x1ca>
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d03c      	beq.n	8012eca <USBD_StdEPReq+0x112>
 8012e50:	e13e      	b.n	80130d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e58:	b2db      	uxtb	r3, r3
 8012e5a:	2b02      	cmp	r3, #2
 8012e5c:	d002      	beq.n	8012e64 <USBD_StdEPReq+0xac>
 8012e5e:	2b03      	cmp	r3, #3
 8012e60:	d016      	beq.n	8012e90 <USBD_StdEPReq+0xd8>
 8012e62:	e02c      	b.n	8012ebe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012e64:	7bbb      	ldrb	r3, [r7, #14]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d00d      	beq.n	8012e86 <USBD_StdEPReq+0xce>
 8012e6a:	7bbb      	ldrb	r3, [r7, #14]
 8012e6c:	2b80      	cmp	r3, #128	; 0x80
 8012e6e:	d00a      	beq.n	8012e86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012e70:	7bbb      	ldrb	r3, [r7, #14]
 8012e72:	4619      	mov	r1, r3
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f002 f9a9 	bl	80151cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012e7a:	2180      	movs	r1, #128	; 0x80
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f002 f9a5 	bl	80151cc <USBD_LL_StallEP>
 8012e82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012e84:	e020      	b.n	8012ec8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012e86:	6839      	ldr	r1, [r7, #0]
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f000 fc7a 	bl	8013782 <USBD_CtlError>
              break;
 8012e8e:	e01b      	b.n	8012ec8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	885b      	ldrh	r3, [r3, #2]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d10e      	bne.n	8012eb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012e98:	7bbb      	ldrb	r3, [r7, #14]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d00b      	beq.n	8012eb6 <USBD_StdEPReq+0xfe>
 8012e9e:	7bbb      	ldrb	r3, [r7, #14]
 8012ea0:	2b80      	cmp	r3, #128	; 0x80
 8012ea2:	d008      	beq.n	8012eb6 <USBD_StdEPReq+0xfe>
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	88db      	ldrh	r3, [r3, #6]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d104      	bne.n	8012eb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012eac:	7bbb      	ldrb	r3, [r7, #14]
 8012eae:	4619      	mov	r1, r3
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f002 f98b 	bl	80151cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 fcb1 	bl	801381e <USBD_CtlSendStatus>

              break;
 8012ebc:	e004      	b.n	8012ec8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012ebe:	6839      	ldr	r1, [r7, #0]
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f000 fc5e 	bl	8013782 <USBD_CtlError>
              break;
 8012ec6:	bf00      	nop
          }
          break;
 8012ec8:	e107      	b.n	80130da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	2b02      	cmp	r3, #2
 8012ed4:	d002      	beq.n	8012edc <USBD_StdEPReq+0x124>
 8012ed6:	2b03      	cmp	r3, #3
 8012ed8:	d016      	beq.n	8012f08 <USBD_StdEPReq+0x150>
 8012eda:	e04b      	b.n	8012f74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012edc:	7bbb      	ldrb	r3, [r7, #14]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d00d      	beq.n	8012efe <USBD_StdEPReq+0x146>
 8012ee2:	7bbb      	ldrb	r3, [r7, #14]
 8012ee4:	2b80      	cmp	r3, #128	; 0x80
 8012ee6:	d00a      	beq.n	8012efe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012ee8:	7bbb      	ldrb	r3, [r7, #14]
 8012eea:	4619      	mov	r1, r3
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f002 f96d 	bl	80151cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012ef2:	2180      	movs	r1, #128	; 0x80
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f002 f969 	bl	80151cc <USBD_LL_StallEP>
 8012efa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012efc:	e040      	b.n	8012f80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012efe:	6839      	ldr	r1, [r7, #0]
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f000 fc3e 	bl	8013782 <USBD_CtlError>
              break;
 8012f06:	e03b      	b.n	8012f80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	885b      	ldrh	r3, [r3, #2]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d136      	bne.n	8012f7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012f10:	7bbb      	ldrb	r3, [r7, #14]
 8012f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d004      	beq.n	8012f24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012f1a:	7bbb      	ldrb	r3, [r7, #14]
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f002 f973 	bl	801520a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 fc7a 	bl	801381e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012f2a:	7bbb      	ldrb	r3, [r7, #14]
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7ff fe38 	bl	8012ba4 <USBD_CoreFindEP>
 8012f34:	4603      	mov	r3, r0
 8012f36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012f38:	7b7b      	ldrb	r3, [r7, #13]
 8012f3a:	2bff      	cmp	r3, #255	; 0xff
 8012f3c:	d01f      	beq.n	8012f7e <USBD_StdEPReq+0x1c6>
 8012f3e:	7b7b      	ldrb	r3, [r7, #13]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d11c      	bne.n	8012f7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012f44:	7b7a      	ldrb	r2, [r7, #13]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012f4c:	7b7a      	ldrb	r2, [r7, #13]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	32ae      	adds	r2, #174	; 0xae
 8012f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f56:	689b      	ldr	r3, [r3, #8]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d010      	beq.n	8012f7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012f5c:	7b7a      	ldrb	r2, [r7, #13]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	32ae      	adds	r2, #174	; 0xae
 8012f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f66:	689b      	ldr	r3, [r3, #8]
 8012f68:	6839      	ldr	r1, [r7, #0]
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	4798      	blx	r3
 8012f6e:	4603      	mov	r3, r0
 8012f70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012f72:	e004      	b.n	8012f7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012f74:	6839      	ldr	r1, [r7, #0]
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f000 fc03 	bl	8013782 <USBD_CtlError>
              break;
 8012f7c:	e000      	b.n	8012f80 <USBD_StdEPReq+0x1c8>
              break;
 8012f7e:	bf00      	nop
          }
          break;
 8012f80:	e0ab      	b.n	80130da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f88:	b2db      	uxtb	r3, r3
 8012f8a:	2b02      	cmp	r3, #2
 8012f8c:	d002      	beq.n	8012f94 <USBD_StdEPReq+0x1dc>
 8012f8e:	2b03      	cmp	r3, #3
 8012f90:	d032      	beq.n	8012ff8 <USBD_StdEPReq+0x240>
 8012f92:	e097      	b.n	80130c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012f94:	7bbb      	ldrb	r3, [r7, #14]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d007      	beq.n	8012faa <USBD_StdEPReq+0x1f2>
 8012f9a:	7bbb      	ldrb	r3, [r7, #14]
 8012f9c:	2b80      	cmp	r3, #128	; 0x80
 8012f9e:	d004      	beq.n	8012faa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012fa0:	6839      	ldr	r1, [r7, #0]
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f000 fbed 	bl	8013782 <USBD_CtlError>
                break;
 8012fa8:	e091      	b.n	80130ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	da0b      	bge.n	8012fca <USBD_StdEPReq+0x212>
 8012fb2:	7bbb      	ldrb	r3, [r7, #14]
 8012fb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012fb8:	4613      	mov	r3, r2
 8012fba:	009b      	lsls	r3, r3, #2
 8012fbc:	4413      	add	r3, r2
 8012fbe:	009b      	lsls	r3, r3, #2
 8012fc0:	3310      	adds	r3, #16
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	3304      	adds	r3, #4
 8012fc8:	e00b      	b.n	8012fe2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012fca:	7bbb      	ldrb	r3, [r7, #14]
 8012fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012fd0:	4613      	mov	r3, r2
 8012fd2:	009b      	lsls	r3, r3, #2
 8012fd4:	4413      	add	r3, r2
 8012fd6:	009b      	lsls	r3, r3, #2
 8012fd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	4413      	add	r3, r2
 8012fe0:	3304      	adds	r3, #4
 8012fe2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012fe4:	68bb      	ldr	r3, [r7, #8]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	2202      	movs	r2, #2
 8012fee:	4619      	mov	r1, r3
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f000 fbd7 	bl	80137a4 <USBD_CtlSendData>
              break;
 8012ff6:	e06a      	b.n	80130ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	da11      	bge.n	8013024 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013000:	7bbb      	ldrb	r3, [r7, #14]
 8013002:	f003 020f 	and.w	r2, r3, #15
 8013006:	6879      	ldr	r1, [r7, #4]
 8013008:	4613      	mov	r3, r2
 801300a:	009b      	lsls	r3, r3, #2
 801300c:	4413      	add	r3, r2
 801300e:	009b      	lsls	r3, r3, #2
 8013010:	440b      	add	r3, r1
 8013012:	3324      	adds	r3, #36	; 0x24
 8013014:	881b      	ldrh	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d117      	bne.n	801304a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801301a:	6839      	ldr	r1, [r7, #0]
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f000 fbb0 	bl	8013782 <USBD_CtlError>
                  break;
 8013022:	e054      	b.n	80130ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013024:	7bbb      	ldrb	r3, [r7, #14]
 8013026:	f003 020f 	and.w	r2, r3, #15
 801302a:	6879      	ldr	r1, [r7, #4]
 801302c:	4613      	mov	r3, r2
 801302e:	009b      	lsls	r3, r3, #2
 8013030:	4413      	add	r3, r2
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	440b      	add	r3, r1
 8013036:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801303a:	881b      	ldrh	r3, [r3, #0]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d104      	bne.n	801304a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013040:	6839      	ldr	r1, [r7, #0]
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f000 fb9d 	bl	8013782 <USBD_CtlError>
                  break;
 8013048:	e041      	b.n	80130ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801304a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801304e:	2b00      	cmp	r3, #0
 8013050:	da0b      	bge.n	801306a <USBD_StdEPReq+0x2b2>
 8013052:	7bbb      	ldrb	r3, [r7, #14]
 8013054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013058:	4613      	mov	r3, r2
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	4413      	add	r3, r2
 801305e:	009b      	lsls	r3, r3, #2
 8013060:	3310      	adds	r3, #16
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	4413      	add	r3, r2
 8013066:	3304      	adds	r3, #4
 8013068:	e00b      	b.n	8013082 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801306a:	7bbb      	ldrb	r3, [r7, #14]
 801306c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013070:	4613      	mov	r3, r2
 8013072:	009b      	lsls	r3, r3, #2
 8013074:	4413      	add	r3, r2
 8013076:	009b      	lsls	r3, r3, #2
 8013078:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801307c:	687a      	ldr	r2, [r7, #4]
 801307e:	4413      	add	r3, r2
 8013080:	3304      	adds	r3, #4
 8013082:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013084:	7bbb      	ldrb	r3, [r7, #14]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d002      	beq.n	8013090 <USBD_StdEPReq+0x2d8>
 801308a:	7bbb      	ldrb	r3, [r7, #14]
 801308c:	2b80      	cmp	r3, #128	; 0x80
 801308e:	d103      	bne.n	8013098 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	2200      	movs	r2, #0
 8013094:	601a      	str	r2, [r3, #0]
 8013096:	e00e      	b.n	80130b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013098:	7bbb      	ldrb	r3, [r7, #14]
 801309a:	4619      	mov	r1, r3
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f002 f8d3 	bl	8015248 <USBD_LL_IsStallEP>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d003      	beq.n	80130b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	2201      	movs	r2, #1
 80130ac:	601a      	str	r2, [r3, #0]
 80130ae:	e002      	b.n	80130b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	2200      	movs	r2, #0
 80130b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	2202      	movs	r2, #2
 80130ba:	4619      	mov	r1, r3
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f000 fb71 	bl	80137a4 <USBD_CtlSendData>
              break;
 80130c2:	e004      	b.n	80130ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80130c4:	6839      	ldr	r1, [r7, #0]
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f000 fb5b 	bl	8013782 <USBD_CtlError>
              break;
 80130cc:	bf00      	nop
          }
          break;
 80130ce:	e004      	b.n	80130da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80130d0:	6839      	ldr	r1, [r7, #0]
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f000 fb55 	bl	8013782 <USBD_CtlError>
          break;
 80130d8:	bf00      	nop
      }
      break;
 80130da:	e005      	b.n	80130e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80130dc:	6839      	ldr	r1, [r7, #0]
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f000 fb4f 	bl	8013782 <USBD_CtlError>
      break;
 80130e4:	e000      	b.n	80130e8 <USBD_StdEPReq+0x330>
      break;
 80130e6:	bf00      	nop
  }

  return ret;
 80130e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3710      	adds	r7, #16
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
	...

080130f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b084      	sub	sp, #16
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80130fe:	2300      	movs	r3, #0
 8013100:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013102:	2300      	movs	r3, #0
 8013104:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013106:	2300      	movs	r3, #0
 8013108:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	885b      	ldrh	r3, [r3, #2]
 801310e:	0a1b      	lsrs	r3, r3, #8
 8013110:	b29b      	uxth	r3, r3
 8013112:	3b01      	subs	r3, #1
 8013114:	2b06      	cmp	r3, #6
 8013116:	f200 8128 	bhi.w	801336a <USBD_GetDescriptor+0x276>
 801311a:	a201      	add	r2, pc, #4	; (adr r2, 8013120 <USBD_GetDescriptor+0x2c>)
 801311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013120:	0801313d 	.word	0x0801313d
 8013124:	08013155 	.word	0x08013155
 8013128:	08013195 	.word	0x08013195
 801312c:	0801336b 	.word	0x0801336b
 8013130:	0801336b 	.word	0x0801336b
 8013134:	0801330b 	.word	0x0801330b
 8013138:	08013337 	.word	0x08013337
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	7c12      	ldrb	r2, [r2, #16]
 8013148:	f107 0108 	add.w	r1, r7, #8
 801314c:	4610      	mov	r0, r2
 801314e:	4798      	blx	r3
 8013150:	60f8      	str	r0, [r7, #12]
      break;
 8013152:	e112      	b.n	801337a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	7c1b      	ldrb	r3, [r3, #16]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d10d      	bne.n	8013178 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013164:	f107 0208 	add.w	r2, r7, #8
 8013168:	4610      	mov	r0, r2
 801316a:	4798      	blx	r3
 801316c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	3301      	adds	r3, #1
 8013172:	2202      	movs	r2, #2
 8013174:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013176:	e100      	b.n	801337a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013180:	f107 0208 	add.w	r2, r7, #8
 8013184:	4610      	mov	r0, r2
 8013186:	4798      	blx	r3
 8013188:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	3301      	adds	r3, #1
 801318e:	2202      	movs	r2, #2
 8013190:	701a      	strb	r2, [r3, #0]
      break;
 8013192:	e0f2      	b.n	801337a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	885b      	ldrh	r3, [r3, #2]
 8013198:	b2db      	uxtb	r3, r3
 801319a:	2b05      	cmp	r3, #5
 801319c:	f200 80ac 	bhi.w	80132f8 <USBD_GetDescriptor+0x204>
 80131a0:	a201      	add	r2, pc, #4	; (adr r2, 80131a8 <USBD_GetDescriptor+0xb4>)
 80131a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a6:	bf00      	nop
 80131a8:	080131c1 	.word	0x080131c1
 80131ac:	080131f5 	.word	0x080131f5
 80131b0:	08013229 	.word	0x08013229
 80131b4:	0801325d 	.word	0x0801325d
 80131b8:	08013291 	.word	0x08013291
 80131bc:	080132c5 	.word	0x080132c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d00b      	beq.n	80131e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	7c12      	ldrb	r2, [r2, #16]
 80131d8:	f107 0108 	add.w	r1, r7, #8
 80131dc:	4610      	mov	r0, r2
 80131de:	4798      	blx	r3
 80131e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80131e2:	e091      	b.n	8013308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80131e4:	6839      	ldr	r1, [r7, #0]
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f000 facb 	bl	8013782 <USBD_CtlError>
            err++;
 80131ec:	7afb      	ldrb	r3, [r7, #11]
 80131ee:	3301      	adds	r3, #1
 80131f0:	72fb      	strb	r3, [r7, #11]
          break;
 80131f2:	e089      	b.n	8013308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80131fa:	689b      	ldr	r3, [r3, #8]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d00b      	beq.n	8013218 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013206:	689b      	ldr	r3, [r3, #8]
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	7c12      	ldrb	r2, [r2, #16]
 801320c:	f107 0108 	add.w	r1, r7, #8
 8013210:	4610      	mov	r0, r2
 8013212:	4798      	blx	r3
 8013214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013216:	e077      	b.n	8013308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013218:	6839      	ldr	r1, [r7, #0]
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f000 fab1 	bl	8013782 <USBD_CtlError>
            err++;
 8013220:	7afb      	ldrb	r3, [r7, #11]
 8013222:	3301      	adds	r3, #1
 8013224:	72fb      	strb	r3, [r7, #11]
          break;
 8013226:	e06f      	b.n	8013308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801322e:	68db      	ldr	r3, [r3, #12]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d00b      	beq.n	801324c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	7c12      	ldrb	r2, [r2, #16]
 8013240:	f107 0108 	add.w	r1, r7, #8
 8013244:	4610      	mov	r0, r2
 8013246:	4798      	blx	r3
 8013248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801324a:	e05d      	b.n	8013308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801324c:	6839      	ldr	r1, [r7, #0]
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f000 fa97 	bl	8013782 <USBD_CtlError>
            err++;
 8013254:	7afb      	ldrb	r3, [r7, #11]
 8013256:	3301      	adds	r3, #1
 8013258:	72fb      	strb	r3, [r7, #11]
          break;
 801325a:	e055      	b.n	8013308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013262:	691b      	ldr	r3, [r3, #16]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d00b      	beq.n	8013280 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801326e:	691b      	ldr	r3, [r3, #16]
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	7c12      	ldrb	r2, [r2, #16]
 8013274:	f107 0108 	add.w	r1, r7, #8
 8013278:	4610      	mov	r0, r2
 801327a:	4798      	blx	r3
 801327c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801327e:	e043      	b.n	8013308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013280:	6839      	ldr	r1, [r7, #0]
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f000 fa7d 	bl	8013782 <USBD_CtlError>
            err++;
 8013288:	7afb      	ldrb	r3, [r7, #11]
 801328a:	3301      	adds	r3, #1
 801328c:	72fb      	strb	r3, [r7, #11]
          break;
 801328e:	e03b      	b.n	8013308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013296:	695b      	ldr	r3, [r3, #20]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d00b      	beq.n	80132b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132a2:	695b      	ldr	r3, [r3, #20]
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	7c12      	ldrb	r2, [r2, #16]
 80132a8:	f107 0108 	add.w	r1, r7, #8
 80132ac:	4610      	mov	r0, r2
 80132ae:	4798      	blx	r3
 80132b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132b2:	e029      	b.n	8013308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80132b4:	6839      	ldr	r1, [r7, #0]
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f000 fa63 	bl	8013782 <USBD_CtlError>
            err++;
 80132bc:	7afb      	ldrb	r3, [r7, #11]
 80132be:	3301      	adds	r3, #1
 80132c0:	72fb      	strb	r3, [r7, #11]
          break;
 80132c2:	e021      	b.n	8013308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132ca:	699b      	ldr	r3, [r3, #24]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d00b      	beq.n	80132e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132d6:	699b      	ldr	r3, [r3, #24]
 80132d8:	687a      	ldr	r2, [r7, #4]
 80132da:	7c12      	ldrb	r2, [r2, #16]
 80132dc:	f107 0108 	add.w	r1, r7, #8
 80132e0:	4610      	mov	r0, r2
 80132e2:	4798      	blx	r3
 80132e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132e6:	e00f      	b.n	8013308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80132e8:	6839      	ldr	r1, [r7, #0]
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f000 fa49 	bl	8013782 <USBD_CtlError>
            err++;
 80132f0:	7afb      	ldrb	r3, [r7, #11]
 80132f2:	3301      	adds	r3, #1
 80132f4:	72fb      	strb	r3, [r7, #11]
          break;
 80132f6:	e007      	b.n	8013308 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80132f8:	6839      	ldr	r1, [r7, #0]
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f000 fa41 	bl	8013782 <USBD_CtlError>
          err++;
 8013300:	7afb      	ldrb	r3, [r7, #11]
 8013302:	3301      	adds	r3, #1
 8013304:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013306:	bf00      	nop
      }
      break;
 8013308:	e037      	b.n	801337a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	7c1b      	ldrb	r3, [r3, #16]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d109      	bne.n	8013326 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801331a:	f107 0208 	add.w	r2, r7, #8
 801331e:	4610      	mov	r0, r2
 8013320:	4798      	blx	r3
 8013322:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013324:	e029      	b.n	801337a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013326:	6839      	ldr	r1, [r7, #0]
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f000 fa2a 	bl	8013782 <USBD_CtlError>
        err++;
 801332e:	7afb      	ldrb	r3, [r7, #11]
 8013330:	3301      	adds	r3, #1
 8013332:	72fb      	strb	r3, [r7, #11]
      break;
 8013334:	e021      	b.n	801337a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	7c1b      	ldrb	r3, [r3, #16]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d10d      	bne.n	801335a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013346:	f107 0208 	add.w	r2, r7, #8
 801334a:	4610      	mov	r0, r2
 801334c:	4798      	blx	r3
 801334e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	3301      	adds	r3, #1
 8013354:	2207      	movs	r2, #7
 8013356:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013358:	e00f      	b.n	801337a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801335a:	6839      	ldr	r1, [r7, #0]
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f000 fa10 	bl	8013782 <USBD_CtlError>
        err++;
 8013362:	7afb      	ldrb	r3, [r7, #11]
 8013364:	3301      	adds	r3, #1
 8013366:	72fb      	strb	r3, [r7, #11]
      break;
 8013368:	e007      	b.n	801337a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801336a:	6839      	ldr	r1, [r7, #0]
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f000 fa08 	bl	8013782 <USBD_CtlError>
      err++;
 8013372:	7afb      	ldrb	r3, [r7, #11]
 8013374:	3301      	adds	r3, #1
 8013376:	72fb      	strb	r3, [r7, #11]
      break;
 8013378:	bf00      	nop
  }

  if (err != 0U)
 801337a:	7afb      	ldrb	r3, [r7, #11]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d11e      	bne.n	80133be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	88db      	ldrh	r3, [r3, #6]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d016      	beq.n	80133b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8013388:	893b      	ldrh	r3, [r7, #8]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d00e      	beq.n	80133ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	88da      	ldrh	r2, [r3, #6]
 8013392:	893b      	ldrh	r3, [r7, #8]
 8013394:	4293      	cmp	r3, r2
 8013396:	bf28      	it	cs
 8013398:	4613      	movcs	r3, r2
 801339a:	b29b      	uxth	r3, r3
 801339c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801339e:	893b      	ldrh	r3, [r7, #8]
 80133a0:	461a      	mov	r2, r3
 80133a2:	68f9      	ldr	r1, [r7, #12]
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f000 f9fd 	bl	80137a4 <USBD_CtlSendData>
 80133aa:	e009      	b.n	80133c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80133ac:	6839      	ldr	r1, [r7, #0]
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f000 f9e7 	bl	8013782 <USBD_CtlError>
 80133b4:	e004      	b.n	80133c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f000 fa31 	bl	801381e <USBD_CtlSendStatus>
 80133bc:	e000      	b.n	80133c0 <USBD_GetDescriptor+0x2cc>
    return;
 80133be:	bf00      	nop
  }
}
 80133c0:	3710      	adds	r7, #16
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
 80133c6:	bf00      	nop

080133c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	889b      	ldrh	r3, [r3, #4]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d131      	bne.n	801343e <USBD_SetAddress+0x76>
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	88db      	ldrh	r3, [r3, #6]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d12d      	bne.n	801343e <USBD_SetAddress+0x76>
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	885b      	ldrh	r3, [r3, #2]
 80133e6:	2b7f      	cmp	r3, #127	; 0x7f
 80133e8:	d829      	bhi.n	801343e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	885b      	ldrh	r3, [r3, #2]
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133fc:	b2db      	uxtb	r3, r3
 80133fe:	2b03      	cmp	r3, #3
 8013400:	d104      	bne.n	801340c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013402:	6839      	ldr	r1, [r7, #0]
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f000 f9bc 	bl	8013782 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801340a:	e01d      	b.n	8013448 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	7bfa      	ldrb	r2, [r7, #15]
 8013410:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013414:	7bfb      	ldrb	r3, [r7, #15]
 8013416:	4619      	mov	r1, r3
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f001 ff41 	bl	80152a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 f9fd 	bl	801381e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013424:	7bfb      	ldrb	r3, [r7, #15]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d004      	beq.n	8013434 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2202      	movs	r2, #2
 801342e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013432:	e009      	b.n	8013448 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2201      	movs	r2, #1
 8013438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801343c:	e004      	b.n	8013448 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801343e:	6839      	ldr	r1, [r7, #0]
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f000 f99e 	bl	8013782 <USBD_CtlError>
  }
}
 8013446:	bf00      	nop
 8013448:	bf00      	nop
 801344a:	3710      	adds	r7, #16
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}

08013450 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b084      	sub	sp, #16
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
 8013458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801345a:	2300      	movs	r3, #0
 801345c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	885b      	ldrh	r3, [r3, #2]
 8013462:	b2da      	uxtb	r2, r3
 8013464:	4b4e      	ldr	r3, [pc, #312]	; (80135a0 <USBD_SetConfig+0x150>)
 8013466:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013468:	4b4d      	ldr	r3, [pc, #308]	; (80135a0 <USBD_SetConfig+0x150>)
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	2b01      	cmp	r3, #1
 801346e:	d905      	bls.n	801347c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013470:	6839      	ldr	r1, [r7, #0]
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f000 f985 	bl	8013782 <USBD_CtlError>
    return USBD_FAIL;
 8013478:	2303      	movs	r3, #3
 801347a:	e08c      	b.n	8013596 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013482:	b2db      	uxtb	r3, r3
 8013484:	2b02      	cmp	r3, #2
 8013486:	d002      	beq.n	801348e <USBD_SetConfig+0x3e>
 8013488:	2b03      	cmp	r3, #3
 801348a:	d029      	beq.n	80134e0 <USBD_SetConfig+0x90>
 801348c:	e075      	b.n	801357a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801348e:	4b44      	ldr	r3, [pc, #272]	; (80135a0 <USBD_SetConfig+0x150>)
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d020      	beq.n	80134d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013496:	4b42      	ldr	r3, [pc, #264]	; (80135a0 <USBD_SetConfig+0x150>)
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	461a      	mov	r2, r3
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80134a0:	4b3f      	ldr	r3, [pc, #252]	; (80135a0 <USBD_SetConfig+0x150>)
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	4619      	mov	r1, r3
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f7ff f83d 	bl	8012526 <USBD_SetClassConfig>
 80134ac:	4603      	mov	r3, r0
 80134ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80134b0:	7bfb      	ldrb	r3, [r7, #15]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d008      	beq.n	80134c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80134b6:	6839      	ldr	r1, [r7, #0]
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f000 f962 	bl	8013782 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2202      	movs	r2, #2
 80134c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80134c6:	e065      	b.n	8013594 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	f000 f9a8 	bl	801381e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2203      	movs	r2, #3
 80134d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80134d6:	e05d      	b.n	8013594 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f000 f9a0 	bl	801381e <USBD_CtlSendStatus>
      break;
 80134de:	e059      	b.n	8013594 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80134e0:	4b2f      	ldr	r3, [pc, #188]	; (80135a0 <USBD_SetConfig+0x150>)
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d112      	bne.n	801350e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2202      	movs	r2, #2
 80134ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80134f0:	4b2b      	ldr	r3, [pc, #172]	; (80135a0 <USBD_SetConfig+0x150>)
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	461a      	mov	r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80134fa:	4b29      	ldr	r3, [pc, #164]	; (80135a0 <USBD_SetConfig+0x150>)
 80134fc:	781b      	ldrb	r3, [r3, #0]
 80134fe:	4619      	mov	r1, r3
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f7ff f82c 	bl	801255e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f000 f989 	bl	801381e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801350c:	e042      	b.n	8013594 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801350e:	4b24      	ldr	r3, [pc, #144]	; (80135a0 <USBD_SetConfig+0x150>)
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	461a      	mov	r2, r3
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	429a      	cmp	r2, r3
 801351a:	d02a      	beq.n	8013572 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	b2db      	uxtb	r3, r3
 8013522:	4619      	mov	r1, r3
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7ff f81a 	bl	801255e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801352a:	4b1d      	ldr	r3, [pc, #116]	; (80135a0 <USBD_SetConfig+0x150>)
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	461a      	mov	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013534:	4b1a      	ldr	r3, [pc, #104]	; (80135a0 <USBD_SetConfig+0x150>)
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	4619      	mov	r1, r3
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f7fe fff3 	bl	8012526 <USBD_SetClassConfig>
 8013540:	4603      	mov	r3, r0
 8013542:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013544:	7bfb      	ldrb	r3, [r7, #15]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d00f      	beq.n	801356a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801354a:	6839      	ldr	r1, [r7, #0]
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f000 f918 	bl	8013782 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	b2db      	uxtb	r3, r3
 8013558:	4619      	mov	r1, r3
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f7fe ffff 	bl	801255e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2202      	movs	r2, #2
 8013564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013568:	e014      	b.n	8013594 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801356a:	6878      	ldr	r0, [r7, #4]
 801356c:	f000 f957 	bl	801381e <USBD_CtlSendStatus>
      break;
 8013570:	e010      	b.n	8013594 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f000 f953 	bl	801381e <USBD_CtlSendStatus>
      break;
 8013578:	e00c      	b.n	8013594 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801357a:	6839      	ldr	r1, [r7, #0]
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f000 f900 	bl	8013782 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013582:	4b07      	ldr	r3, [pc, #28]	; (80135a0 <USBD_SetConfig+0x150>)
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	4619      	mov	r1, r3
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f7fe ffe8 	bl	801255e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801358e:	2303      	movs	r3, #3
 8013590:	73fb      	strb	r3, [r7, #15]
      break;
 8013592:	bf00      	nop
  }

  return ret;
 8013594:	7bfb      	ldrb	r3, [r7, #15]
}
 8013596:	4618      	mov	r0, r3
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	200009d8 	.word	0x200009d8

080135a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	88db      	ldrh	r3, [r3, #6]
 80135b2:	2b01      	cmp	r3, #1
 80135b4:	d004      	beq.n	80135c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80135b6:	6839      	ldr	r1, [r7, #0]
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f000 f8e2 	bl	8013782 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80135be:	e023      	b.n	8013608 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	dc02      	bgt.n	80135d2 <USBD_GetConfig+0x2e>
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	dc03      	bgt.n	80135d8 <USBD_GetConfig+0x34>
 80135d0:	e015      	b.n	80135fe <USBD_GetConfig+0x5a>
 80135d2:	2b03      	cmp	r3, #3
 80135d4:	d00b      	beq.n	80135ee <USBD_GetConfig+0x4a>
 80135d6:	e012      	b.n	80135fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2200      	movs	r2, #0
 80135dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	3308      	adds	r3, #8
 80135e2:	2201      	movs	r2, #1
 80135e4:	4619      	mov	r1, r3
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f000 f8dc 	bl	80137a4 <USBD_CtlSendData>
        break;
 80135ec:	e00c      	b.n	8013608 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	3304      	adds	r3, #4
 80135f2:	2201      	movs	r2, #1
 80135f4:	4619      	mov	r1, r3
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f000 f8d4 	bl	80137a4 <USBD_CtlSendData>
        break;
 80135fc:	e004      	b.n	8013608 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80135fe:	6839      	ldr	r1, [r7, #0]
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f000 f8be 	bl	8013782 <USBD_CtlError>
        break;
 8013606:	bf00      	nop
}
 8013608:	bf00      	nop
 801360a:	3708      	adds	r7, #8
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}

08013610 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
 8013618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013620:	b2db      	uxtb	r3, r3
 8013622:	3b01      	subs	r3, #1
 8013624:	2b02      	cmp	r3, #2
 8013626:	d81e      	bhi.n	8013666 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	88db      	ldrh	r3, [r3, #6]
 801362c:	2b02      	cmp	r3, #2
 801362e:	d004      	beq.n	801363a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013630:	6839      	ldr	r1, [r7, #0]
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f000 f8a5 	bl	8013782 <USBD_CtlError>
        break;
 8013638:	e01a      	b.n	8013670 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	2201      	movs	r2, #1
 801363e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013646:	2b00      	cmp	r3, #0
 8013648:	d005      	beq.n	8013656 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	f043 0202 	orr.w	r2, r3, #2
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	330c      	adds	r3, #12
 801365a:	2202      	movs	r2, #2
 801365c:	4619      	mov	r1, r3
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f000 f8a0 	bl	80137a4 <USBD_CtlSendData>
      break;
 8013664:	e004      	b.n	8013670 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013666:	6839      	ldr	r1, [r7, #0]
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f000 f88a 	bl	8013782 <USBD_CtlError>
      break;
 801366e:	bf00      	nop
  }
}
 8013670:	bf00      	nop
 8013672:	3708      	adds	r7, #8
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	885b      	ldrh	r3, [r3, #2]
 8013686:	2b01      	cmp	r3, #1
 8013688:	d107      	bne.n	801369a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2201      	movs	r2, #1
 801368e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f000 f8c3 	bl	801381e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013698:	e013      	b.n	80136c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	885b      	ldrh	r3, [r3, #2]
 801369e:	2b02      	cmp	r3, #2
 80136a0:	d10b      	bne.n	80136ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	889b      	ldrh	r3, [r3, #4]
 80136a6:	0a1b      	lsrs	r3, r3, #8
 80136a8:	b29b      	uxth	r3, r3
 80136aa:	b2da      	uxtb	r2, r3
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f000 f8b3 	bl	801381e <USBD_CtlSendStatus>
}
 80136b8:	e003      	b.n	80136c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80136ba:	6839      	ldr	r1, [r7, #0]
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f000 f860 	bl	8013782 <USBD_CtlError>
}
 80136c2:	bf00      	nop
 80136c4:	3708      	adds	r7, #8
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}

080136ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136ca:	b580      	push	{r7, lr}
 80136cc:	b082      	sub	sp, #8
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	6078      	str	r0, [r7, #4]
 80136d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	3b01      	subs	r3, #1
 80136de:	2b02      	cmp	r3, #2
 80136e0:	d80b      	bhi.n	80136fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	885b      	ldrh	r3, [r3, #2]
 80136e6:	2b01      	cmp	r3, #1
 80136e8:	d10c      	bne.n	8013704 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2200      	movs	r2, #0
 80136ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f000 f893 	bl	801381e <USBD_CtlSendStatus>
      }
      break;
 80136f8:	e004      	b.n	8013704 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80136fa:	6839      	ldr	r1, [r7, #0]
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f000 f840 	bl	8013782 <USBD_CtlError>
      break;
 8013702:	e000      	b.n	8013706 <USBD_ClrFeature+0x3c>
      break;
 8013704:	bf00      	nop
  }
}
 8013706:	bf00      	nop
 8013708:	3708      	adds	r7, #8
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801370e:	b580      	push	{r7, lr}
 8013710:	b084      	sub	sp, #16
 8013712:	af00      	add	r7, sp, #0
 8013714:	6078      	str	r0, [r7, #4]
 8013716:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	781a      	ldrb	r2, [r3, #0]
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	3301      	adds	r3, #1
 8013728:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	781a      	ldrb	r2, [r3, #0]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	3301      	adds	r3, #1
 8013736:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013738:	68f8      	ldr	r0, [r7, #12]
 801373a:	f7ff fa40 	bl	8012bbe <SWAPBYTE>
 801373e:	4603      	mov	r3, r0
 8013740:	461a      	mov	r2, r3
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	3301      	adds	r3, #1
 801374a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	3301      	adds	r3, #1
 8013750:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013752:	68f8      	ldr	r0, [r7, #12]
 8013754:	f7ff fa33 	bl	8012bbe <SWAPBYTE>
 8013758:	4603      	mov	r3, r0
 801375a:	461a      	mov	r2, r3
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	3301      	adds	r3, #1
 8013764:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	3301      	adds	r3, #1
 801376a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801376c:	68f8      	ldr	r0, [r7, #12]
 801376e:	f7ff fa26 	bl	8012bbe <SWAPBYTE>
 8013772:	4603      	mov	r3, r0
 8013774:	461a      	mov	r2, r3
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	80da      	strh	r2, [r3, #6]
}
 801377a:	bf00      	nop
 801377c:	3710      	adds	r7, #16
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}

08013782 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013782:	b580      	push	{r7, lr}
 8013784:	b082      	sub	sp, #8
 8013786:	af00      	add	r7, sp, #0
 8013788:	6078      	str	r0, [r7, #4]
 801378a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801378c:	2180      	movs	r1, #128	; 0x80
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f001 fd1c 	bl	80151cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013794:	2100      	movs	r1, #0
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f001 fd18 	bl	80151cc <USBD_LL_StallEP>
}
 801379c:	bf00      	nop
 801379e:	3708      	adds	r7, #8
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	2202      	movs	r2, #2
 80137b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	68ba      	ldr	r2, [r7, #8]
 80137c8:	2100      	movs	r1, #0
 80137ca:	68f8      	ldr	r0, [r7, #12]
 80137cc:	f001 fd87 	bl	80152de <USBD_LL_Transmit>

  return USBD_OK;
 80137d0:	2300      	movs	r3, #0
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3710      	adds	r7, #16
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}

080137da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80137da:	b580      	push	{r7, lr}
 80137dc:	b084      	sub	sp, #16
 80137de:	af00      	add	r7, sp, #0
 80137e0:	60f8      	str	r0, [r7, #12]
 80137e2:	60b9      	str	r1, [r7, #8]
 80137e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	68ba      	ldr	r2, [r7, #8]
 80137ea:	2100      	movs	r1, #0
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f001 fd76 	bl	80152de <USBD_LL_Transmit>

  return USBD_OK;
 80137f2:	2300      	movs	r3, #0
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3710      	adds	r7, #16
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}

080137fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b084      	sub	sp, #16
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	60b9      	str	r1, [r7, #8]
 8013806:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	68ba      	ldr	r2, [r7, #8]
 801380c:	2100      	movs	r1, #0
 801380e:	68f8      	ldr	r0, [r7, #12]
 8013810:	f001 fd86 	bl	8015320 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013814:	2300      	movs	r3, #0
}
 8013816:	4618      	mov	r0, r3
 8013818:	3710      	adds	r7, #16
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}

0801381e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801381e:	b580      	push	{r7, lr}
 8013820:	b082      	sub	sp, #8
 8013822:	af00      	add	r7, sp, #0
 8013824:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2204      	movs	r2, #4
 801382a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801382e:	2300      	movs	r3, #0
 8013830:	2200      	movs	r2, #0
 8013832:	2100      	movs	r1, #0
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f001 fd52 	bl	80152de <USBD_LL_Transmit>

  return USBD_OK;
 801383a:	2300      	movs	r3, #0
}
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2205      	movs	r2, #5
 8013850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013854:	2300      	movs	r3, #0
 8013856:	2200      	movs	r2, #0
 8013858:	2100      	movs	r1, #0
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f001 fd60 	bl	8015320 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013860:	2300      	movs	r3, #0
}
 8013862:	4618      	mov	r0, r3
 8013864:	3708      	adds	r7, #8
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}

0801386a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801386a:	b480      	push	{r7}
 801386c:	b083      	sub	sp, #12
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f103 0208 	add.w	r2, r3, #8
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f04f 32ff 	mov.w	r2, #4294967295
 8013882:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f103 0208 	add.w	r2, r3, #8
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f103 0208 	add.w	r2, r3, #8
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2200      	movs	r2, #0
 801389c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801389e:	bf00      	nop
 80138a0:	370c      	adds	r7, #12
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr

080138aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80138aa:	b480      	push	{r7}
 80138ac:	b083      	sub	sp, #12
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80138b8:	bf00      	nop
 80138ba:	370c      	adds	r7, #12
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80138c4:	b480      	push	{r7}
 80138c6:	b085      	sub	sp, #20
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	68fa      	ldr	r2, [r7, #12]
 80138d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	689a      	ldr	r2, [r3, #8]
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	689b      	ldr	r3, [r3, #8]
 80138e6:	683a      	ldr	r2, [r7, #0]
 80138e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	683a      	ldr	r2, [r7, #0]
 80138ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	687a      	ldr	r2, [r7, #4]
 80138f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	1c5a      	adds	r2, r3, #1
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	601a      	str	r2, [r3, #0]
}
 8013900:	bf00      	nop
 8013902:	3714      	adds	r7, #20
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr

0801390c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801390c:	b480      	push	{r7}
 801390e:	b085      	sub	sp, #20
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013922:	d103      	bne.n	801392c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	691b      	ldr	r3, [r3, #16]
 8013928:	60fb      	str	r3, [r7, #12]
 801392a:	e00c      	b.n	8013946 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	3308      	adds	r3, #8
 8013930:	60fb      	str	r3, [r7, #12]
 8013932:	e002      	b.n	801393a <vListInsert+0x2e>
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	60fb      	str	r3, [r7, #12]
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	68ba      	ldr	r2, [r7, #8]
 8013942:	429a      	cmp	r2, r3
 8013944:	d2f6      	bcs.n	8013934 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	685a      	ldr	r2, [r3, #4]
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	683a      	ldr	r2, [r7, #0]
 8013954:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	68fa      	ldr	r2, [r7, #12]
 801395a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	683a      	ldr	r2, [r7, #0]
 8013960:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	1c5a      	adds	r2, r3, #1
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	601a      	str	r2, [r3, #0]
}
 8013972:	bf00      	nop
 8013974:	3714      	adds	r7, #20
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr

0801397e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801397e:	b480      	push	{r7}
 8013980:	b085      	sub	sp, #20
 8013982:	af00      	add	r7, sp, #0
 8013984:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	691b      	ldr	r3, [r3, #16]
 801398a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	687a      	ldr	r2, [r7, #4]
 8013992:	6892      	ldr	r2, [r2, #8]
 8013994:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	689b      	ldr	r3, [r3, #8]
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	6852      	ldr	r2, [r2, #4]
 801399e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	687a      	ldr	r2, [r7, #4]
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d103      	bne.n	80139b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	689a      	ldr	r2, [r3, #8]
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2200      	movs	r2, #0
 80139b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	1e5a      	subs	r2, r3, #1
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	681b      	ldr	r3, [r3, #0]
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3714      	adds	r7, #20
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr

080139d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b08e      	sub	sp, #56	; 0x38
 80139d6:	af04      	add	r7, sp, #16
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	60b9      	str	r1, [r7, #8]
 80139dc:	607a      	str	r2, [r7, #4]
 80139de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80139e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10a      	bne.n	80139fc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80139e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80139f8:	bf00      	nop
 80139fa:	e7fe      	b.n	80139fa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80139fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d10a      	bne.n	8013a18 <xTaskCreateStatic+0x46>
	__asm volatile
 8013a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a06:	f383 8811 	msr	BASEPRI, r3
 8013a0a:	f3bf 8f6f 	isb	sy
 8013a0e:	f3bf 8f4f 	dsb	sy
 8013a12:	61fb      	str	r3, [r7, #28]
}
 8013a14:	bf00      	nop
 8013a16:	e7fe      	b.n	8013a16 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013a18:	2354      	movs	r3, #84	; 0x54
 8013a1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	2b54      	cmp	r3, #84	; 0x54
 8013a20:	d00a      	beq.n	8013a38 <xTaskCreateStatic+0x66>
	__asm volatile
 8013a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a26:	f383 8811 	msr	BASEPRI, r3
 8013a2a:	f3bf 8f6f 	isb	sy
 8013a2e:	f3bf 8f4f 	dsb	sy
 8013a32:	61bb      	str	r3, [r7, #24]
}
 8013a34:	bf00      	nop
 8013a36:	e7fe      	b.n	8013a36 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013a38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d01e      	beq.n	8013a7e <xTaskCreateStatic+0xac>
 8013a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d01b      	beq.n	8013a7e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a52:	2202      	movs	r2, #2
 8013a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013a58:	2300      	movs	r3, #0
 8013a5a:	9303      	str	r3, [sp, #12]
 8013a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5e:	9302      	str	r3, [sp, #8]
 8013a60:	f107 0314 	add.w	r3, r7, #20
 8013a64:	9301      	str	r3, [sp, #4]
 8013a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a68:	9300      	str	r3, [sp, #0]
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	687a      	ldr	r2, [r7, #4]
 8013a6e:	68b9      	ldr	r1, [r7, #8]
 8013a70:	68f8      	ldr	r0, [r7, #12]
 8013a72:	f000 f850 	bl	8013b16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a78:	f000 f8d4 	bl	8013c24 <prvAddNewTaskToReadyList>
 8013a7c:	e001      	b.n	8013a82 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013a82:	697b      	ldr	r3, [r7, #20]
	}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3728      	adds	r7, #40	; 0x28
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b08c      	sub	sp, #48	; 0x30
 8013a90:	af04      	add	r7, sp, #16
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	603b      	str	r3, [r7, #0]
 8013a98:	4613      	mov	r3, r2
 8013a9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013a9c:	88fb      	ldrh	r3, [r7, #6]
 8013a9e:	009b      	lsls	r3, r3, #2
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f001 f891 	bl	8014bc8 <pvPortMalloc>
 8013aa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d00e      	beq.n	8013acc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013aae:	2054      	movs	r0, #84	; 0x54
 8013ab0:	f001 f88a 	bl	8014bc8 <pvPortMalloc>
 8013ab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d003      	beq.n	8013ac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	697a      	ldr	r2, [r7, #20]
 8013ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8013ac2:	e005      	b.n	8013ad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013ac4:	6978      	ldr	r0, [r7, #20]
 8013ac6:	f001 f94b 	bl	8014d60 <vPortFree>
 8013aca:	e001      	b.n	8013ad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013acc:	2300      	movs	r3, #0
 8013ace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013ad0:	69fb      	ldr	r3, [r7, #28]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d017      	beq.n	8013b06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013ad6:	69fb      	ldr	r3, [r7, #28]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013ade:	88fa      	ldrh	r2, [r7, #6]
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	9303      	str	r3, [sp, #12]
 8013ae4:	69fb      	ldr	r3, [r7, #28]
 8013ae6:	9302      	str	r3, [sp, #8]
 8013ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aea:	9301      	str	r3, [sp, #4]
 8013aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aee:	9300      	str	r3, [sp, #0]
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	68b9      	ldr	r1, [r7, #8]
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	f000 f80e 	bl	8013b16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013afa:	69f8      	ldr	r0, [r7, #28]
 8013afc:	f000 f892 	bl	8013c24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013b00:	2301      	movs	r3, #1
 8013b02:	61bb      	str	r3, [r7, #24]
 8013b04:	e002      	b.n	8013b0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013b06:	f04f 33ff 	mov.w	r3, #4294967295
 8013b0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3720      	adds	r7, #32
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b088      	sub	sp, #32
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	60f8      	str	r0, [r7, #12]
 8013b1e:	60b9      	str	r1, [r7, #8]
 8013b20:	607a      	str	r2, [r7, #4]
 8013b22:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013b2e:	3b01      	subs	r3, #1
 8013b30:	009b      	lsls	r3, r3, #2
 8013b32:	4413      	add	r3, r2
 8013b34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013b36:	69bb      	ldr	r3, [r7, #24]
 8013b38:	f023 0307 	bic.w	r3, r3, #7
 8013b3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013b3e:	69bb      	ldr	r3, [r7, #24]
 8013b40:	f003 0307 	and.w	r3, r3, #7
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d00a      	beq.n	8013b5e <prvInitialiseNewTask+0x48>
	__asm volatile
 8013b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b4c:	f383 8811 	msr	BASEPRI, r3
 8013b50:	f3bf 8f6f 	isb	sy
 8013b54:	f3bf 8f4f 	dsb	sy
 8013b58:	617b      	str	r3, [r7, #20]
}
 8013b5a:	bf00      	nop
 8013b5c:	e7fe      	b.n	8013b5c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d01f      	beq.n	8013ba4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013b64:	2300      	movs	r3, #0
 8013b66:	61fb      	str	r3, [r7, #28]
 8013b68:	e012      	b.n	8013b90 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013b6a:	68ba      	ldr	r2, [r7, #8]
 8013b6c:	69fb      	ldr	r3, [r7, #28]
 8013b6e:	4413      	add	r3, r2
 8013b70:	7819      	ldrb	r1, [r3, #0]
 8013b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b74:	69fb      	ldr	r3, [r7, #28]
 8013b76:	4413      	add	r3, r2
 8013b78:	3334      	adds	r3, #52	; 0x34
 8013b7a:	460a      	mov	r2, r1
 8013b7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013b7e:	68ba      	ldr	r2, [r7, #8]
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	4413      	add	r3, r2
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d006      	beq.n	8013b98 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	3301      	adds	r3, #1
 8013b8e:	61fb      	str	r3, [r7, #28]
 8013b90:	69fb      	ldr	r3, [r7, #28]
 8013b92:	2b0f      	cmp	r3, #15
 8013b94:	d9e9      	bls.n	8013b6a <prvInitialiseNewTask+0x54>
 8013b96:	e000      	b.n	8013b9a <prvInitialiseNewTask+0x84>
			{
				break;
 8013b98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013ba2:	e003      	b.n	8013bac <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bae:	2b06      	cmp	r3, #6
 8013bb0:	d901      	bls.n	8013bb6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013bb2:	2306      	movs	r3, #6
 8013bb4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bc0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bca:	3304      	adds	r3, #4
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7ff fe6c 	bl	80138aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd4:	3318      	adds	r3, #24
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ff fe67 	bl	80138aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013be0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be4:	f1c3 0207 	rsb	r2, r3, #7
 8013be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bf0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013c00:	683a      	ldr	r2, [r7, #0]
 8013c02:	68f9      	ldr	r1, [r7, #12]
 8013c04:	69b8      	ldr	r0, [r7, #24]
 8013c06:	f000 fd93 	bl	8014730 <pxPortInitialiseStack>
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d002      	beq.n	8013c1c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c1c:	bf00      	nop
 8013c1e:	3720      	adds	r7, #32
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013c2c:	f000 feaa 	bl	8014984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013c30:	4b2a      	ldr	r3, [pc, #168]	; (8013cdc <prvAddNewTaskToReadyList+0xb8>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	3301      	adds	r3, #1
 8013c36:	4a29      	ldr	r2, [pc, #164]	; (8013cdc <prvAddNewTaskToReadyList+0xb8>)
 8013c38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013c3a:	4b29      	ldr	r3, [pc, #164]	; (8013ce0 <prvAddNewTaskToReadyList+0xbc>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d109      	bne.n	8013c56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013c42:	4a27      	ldr	r2, [pc, #156]	; (8013ce0 <prvAddNewTaskToReadyList+0xbc>)
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013c48:	4b24      	ldr	r3, [pc, #144]	; (8013cdc <prvAddNewTaskToReadyList+0xb8>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d110      	bne.n	8013c72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013c50:	f000 fb16 	bl	8014280 <prvInitialiseTaskLists>
 8013c54:	e00d      	b.n	8013c72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013c56:	4b23      	ldr	r3, [pc, #140]	; (8013ce4 <prvAddNewTaskToReadyList+0xc0>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d109      	bne.n	8013c72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013c5e:	4b20      	ldr	r3, [pc, #128]	; (8013ce0 <prvAddNewTaskToReadyList+0xbc>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d802      	bhi.n	8013c72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013c6c:	4a1c      	ldr	r2, [pc, #112]	; (8013ce0 <prvAddNewTaskToReadyList+0xbc>)
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013c72:	4b1d      	ldr	r3, [pc, #116]	; (8013ce8 <prvAddNewTaskToReadyList+0xc4>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	3301      	adds	r3, #1
 8013c78:	4a1b      	ldr	r2, [pc, #108]	; (8013ce8 <prvAddNewTaskToReadyList+0xc4>)
 8013c7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c80:	2201      	movs	r2, #1
 8013c82:	409a      	lsls	r2, r3
 8013c84:	4b19      	ldr	r3, [pc, #100]	; (8013cec <prvAddNewTaskToReadyList+0xc8>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	4313      	orrs	r3, r2
 8013c8a:	4a18      	ldr	r2, [pc, #96]	; (8013cec <prvAddNewTaskToReadyList+0xc8>)
 8013c8c:	6013      	str	r3, [r2, #0]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c92:	4613      	mov	r3, r2
 8013c94:	009b      	lsls	r3, r3, #2
 8013c96:	4413      	add	r3, r2
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	4a15      	ldr	r2, [pc, #84]	; (8013cf0 <prvAddNewTaskToReadyList+0xcc>)
 8013c9c:	441a      	add	r2, r3
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	3304      	adds	r3, #4
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	4610      	mov	r0, r2
 8013ca6:	f7ff fe0d 	bl	80138c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013caa:	f000 fe9b 	bl	80149e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013cae:	4b0d      	ldr	r3, [pc, #52]	; (8013ce4 <prvAddNewTaskToReadyList+0xc0>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d00e      	beq.n	8013cd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013cb6:	4b0a      	ldr	r3, [pc, #40]	; (8013ce0 <prvAddNewTaskToReadyList+0xbc>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d207      	bcs.n	8013cd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013cc4:	4b0b      	ldr	r3, [pc, #44]	; (8013cf4 <prvAddNewTaskToReadyList+0xd0>)
 8013cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cca:	601a      	str	r2, [r3, #0]
 8013ccc:	f3bf 8f4f 	dsb	sy
 8013cd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013cd4:	bf00      	nop
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}
 8013cdc:	20000adc 	.word	0x20000adc
 8013ce0:	200009dc 	.word	0x200009dc
 8013ce4:	20000ae8 	.word	0x20000ae8
 8013ce8:	20000af8 	.word	0x20000af8
 8013cec:	20000ae4 	.word	0x20000ae4
 8013cf0:	200009e0 	.word	0x200009e0
 8013cf4:	e000ed04 	.word	0xe000ed04

08013cf8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b08a      	sub	sp, #40	; 0x28
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013d02:	2300      	movs	r3, #0
 8013d04:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d10a      	bne.n	8013d22 <vTaskDelayUntil+0x2a>
	__asm volatile
 8013d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d10:	f383 8811 	msr	BASEPRI, r3
 8013d14:	f3bf 8f6f 	isb	sy
 8013d18:	f3bf 8f4f 	dsb	sy
 8013d1c:	617b      	str	r3, [r7, #20]
}
 8013d1e:	bf00      	nop
 8013d20:	e7fe      	b.n	8013d20 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d10a      	bne.n	8013d3e <vTaskDelayUntil+0x46>
	__asm volatile
 8013d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d2c:	f383 8811 	msr	BASEPRI, r3
 8013d30:	f3bf 8f6f 	isb	sy
 8013d34:	f3bf 8f4f 	dsb	sy
 8013d38:	613b      	str	r3, [r7, #16]
}
 8013d3a:	bf00      	nop
 8013d3c:	e7fe      	b.n	8013d3c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8013d3e:	4b2a      	ldr	r3, [pc, #168]	; (8013de8 <vTaskDelayUntil+0xf0>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d00a      	beq.n	8013d5c <vTaskDelayUntil+0x64>
	__asm volatile
 8013d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4a:	f383 8811 	msr	BASEPRI, r3
 8013d4e:	f3bf 8f6f 	isb	sy
 8013d52:	f3bf 8f4f 	dsb	sy
 8013d56:	60fb      	str	r3, [r7, #12]
}
 8013d58:	bf00      	nop
 8013d5a:	e7fe      	b.n	8013d5a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8013d5c:	f000 f8aa 	bl	8013eb4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013d60:	4b22      	ldr	r3, [pc, #136]	; (8013dec <vTaskDelayUntil+0xf4>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	683a      	ldr	r2, [r7, #0]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	6a3a      	ldr	r2, [r7, #32]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d20b      	bcs.n	8013d92 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	69fa      	ldr	r2, [r7, #28]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d211      	bcs.n	8013da8 <vTaskDelayUntil+0xb0>
 8013d84:	69fa      	ldr	r2, [r7, #28]
 8013d86:	6a3b      	ldr	r3, [r7, #32]
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	d90d      	bls.n	8013da8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8013d90:	e00a      	b.n	8013da8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	69fa      	ldr	r2, [r7, #28]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d303      	bcc.n	8013da4 <vTaskDelayUntil+0xac>
 8013d9c:	69fa      	ldr	r2, [r7, #28]
 8013d9e:	6a3b      	ldr	r3, [r7, #32]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d901      	bls.n	8013da8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8013da4:	2301      	movs	r3, #1
 8013da6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	69fa      	ldr	r2, [r7, #28]
 8013dac:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d006      	beq.n	8013dc2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8013db4:	69fa      	ldr	r2, [r7, #28]
 8013db6:	6a3b      	ldr	r3, [r7, #32]
 8013db8:	1ad3      	subs	r3, r2, r3
 8013dba:	2100      	movs	r1, #0
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f000 fc51 	bl	8014664 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8013dc2:	f000 f885 	bl	8013ed0 <xTaskResumeAll>
 8013dc6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d107      	bne.n	8013dde <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8013dce:	4b08      	ldr	r3, [pc, #32]	; (8013df0 <vTaskDelayUntil+0xf8>)
 8013dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dd4:	601a      	str	r2, [r3, #0]
 8013dd6:	f3bf 8f4f 	dsb	sy
 8013dda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013dde:	bf00      	nop
 8013de0:	3728      	adds	r7, #40	; 0x28
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	20000b04 	.word	0x20000b04
 8013dec:	20000ae0 	.word	0x20000ae0
 8013df0:	e000ed04 	.word	0xe000ed04

08013df4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b08a      	sub	sp, #40	; 0x28
 8013df8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013dfe:	2300      	movs	r3, #0
 8013e00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013e02:	463a      	mov	r2, r7
 8013e04:	1d39      	adds	r1, r7, #4
 8013e06:	f107 0308 	add.w	r3, r7, #8
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7ee faca 	bl	80023a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013e10:	6839      	ldr	r1, [r7, #0]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	68ba      	ldr	r2, [r7, #8]
 8013e16:	9202      	str	r2, [sp, #8]
 8013e18:	9301      	str	r3, [sp, #4]
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	9300      	str	r3, [sp, #0]
 8013e1e:	2300      	movs	r3, #0
 8013e20:	460a      	mov	r2, r1
 8013e22:	491e      	ldr	r1, [pc, #120]	; (8013e9c <vTaskStartScheduler+0xa8>)
 8013e24:	481e      	ldr	r0, [pc, #120]	; (8013ea0 <vTaskStartScheduler+0xac>)
 8013e26:	f7ff fdd4 	bl	80139d2 <xTaskCreateStatic>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	4a1d      	ldr	r2, [pc, #116]	; (8013ea4 <vTaskStartScheduler+0xb0>)
 8013e2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013e30:	4b1c      	ldr	r3, [pc, #112]	; (8013ea4 <vTaskStartScheduler+0xb0>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d002      	beq.n	8013e3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013e38:	2301      	movs	r3, #1
 8013e3a:	617b      	str	r3, [r7, #20]
 8013e3c:	e001      	b.n	8013e42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	2b01      	cmp	r3, #1
 8013e46:	d116      	bne.n	8013e76 <vTaskStartScheduler+0x82>
	__asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4c:	f383 8811 	msr	BASEPRI, r3
 8013e50:	f3bf 8f6f 	isb	sy
 8013e54:	f3bf 8f4f 	dsb	sy
 8013e58:	613b      	str	r3, [r7, #16]
}
 8013e5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e5c:	4b12      	ldr	r3, [pc, #72]	; (8013ea8 <vTaskStartScheduler+0xb4>)
 8013e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e64:	4b11      	ldr	r3, [pc, #68]	; (8013eac <vTaskStartScheduler+0xb8>)
 8013e66:	2201      	movs	r2, #1
 8013e68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e6a:	4b11      	ldr	r3, [pc, #68]	; (8013eb0 <vTaskStartScheduler+0xbc>)
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e70:	f000 fce6 	bl	8014840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e74:	e00e      	b.n	8013e94 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e76:	697b      	ldr	r3, [r7, #20]
 8013e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e7c:	d10a      	bne.n	8013e94 <vTaskStartScheduler+0xa0>
	__asm volatile
 8013e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e82:	f383 8811 	msr	BASEPRI, r3
 8013e86:	f3bf 8f6f 	isb	sy
 8013e8a:	f3bf 8f4f 	dsb	sy
 8013e8e:	60fb      	str	r3, [r7, #12]
}
 8013e90:	bf00      	nop
 8013e92:	e7fe      	b.n	8013e92 <vTaskStartScheduler+0x9e>
}
 8013e94:	bf00      	nop
 8013e96:	3718      	adds	r7, #24
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	0801786c 	.word	0x0801786c
 8013ea0:	08014251 	.word	0x08014251
 8013ea4:	20000b00 	.word	0x20000b00
 8013ea8:	20000afc 	.word	0x20000afc
 8013eac:	20000ae8 	.word	0x20000ae8
 8013eb0:	20000ae0 	.word	0x20000ae0

08013eb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013eb8:	4b04      	ldr	r3, [pc, #16]	; (8013ecc <vTaskSuspendAll+0x18>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	4a03      	ldr	r2, [pc, #12]	; (8013ecc <vTaskSuspendAll+0x18>)
 8013ec0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013ec2:	bf00      	nop
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr
 8013ecc:	20000b04 	.word	0x20000b04

08013ed0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013eda:	2300      	movs	r3, #0
 8013edc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ede:	4b41      	ldr	r3, [pc, #260]	; (8013fe4 <xTaskResumeAll+0x114>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d10a      	bne.n	8013efc <xTaskResumeAll+0x2c>
	__asm volatile
 8013ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eea:	f383 8811 	msr	BASEPRI, r3
 8013eee:	f3bf 8f6f 	isb	sy
 8013ef2:	f3bf 8f4f 	dsb	sy
 8013ef6:	603b      	str	r3, [r7, #0]
}
 8013ef8:	bf00      	nop
 8013efa:	e7fe      	b.n	8013efa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013efc:	f000 fd42 	bl	8014984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013f00:	4b38      	ldr	r3, [pc, #224]	; (8013fe4 <xTaskResumeAll+0x114>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	3b01      	subs	r3, #1
 8013f06:	4a37      	ldr	r2, [pc, #220]	; (8013fe4 <xTaskResumeAll+0x114>)
 8013f08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f0a:	4b36      	ldr	r3, [pc, #216]	; (8013fe4 <xTaskResumeAll+0x114>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d161      	bne.n	8013fd6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013f12:	4b35      	ldr	r3, [pc, #212]	; (8013fe8 <xTaskResumeAll+0x118>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d05d      	beq.n	8013fd6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f1a:	e02e      	b.n	8013f7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f1c:	4b33      	ldr	r3, [pc, #204]	; (8013fec <xTaskResumeAll+0x11c>)
 8013f1e:	68db      	ldr	r3, [r3, #12]
 8013f20:	68db      	ldr	r3, [r3, #12]
 8013f22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	3318      	adds	r3, #24
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ff fd28 	bl	801397e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	3304      	adds	r3, #4
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7ff fd23 	bl	801397e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f3c:	2201      	movs	r2, #1
 8013f3e:	409a      	lsls	r2, r3
 8013f40:	4b2b      	ldr	r3, [pc, #172]	; (8013ff0 <xTaskResumeAll+0x120>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	4313      	orrs	r3, r2
 8013f46:	4a2a      	ldr	r2, [pc, #168]	; (8013ff0 <xTaskResumeAll+0x120>)
 8013f48:	6013      	str	r3, [r2, #0]
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f4e:	4613      	mov	r3, r2
 8013f50:	009b      	lsls	r3, r3, #2
 8013f52:	4413      	add	r3, r2
 8013f54:	009b      	lsls	r3, r3, #2
 8013f56:	4a27      	ldr	r2, [pc, #156]	; (8013ff4 <xTaskResumeAll+0x124>)
 8013f58:	441a      	add	r2, r3
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	3304      	adds	r3, #4
 8013f5e:	4619      	mov	r1, r3
 8013f60:	4610      	mov	r0, r2
 8013f62:	f7ff fcaf 	bl	80138c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f6a:	4b23      	ldr	r3, [pc, #140]	; (8013ff8 <xTaskResumeAll+0x128>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f70:	429a      	cmp	r2, r3
 8013f72:	d302      	bcc.n	8013f7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013f74:	4b21      	ldr	r3, [pc, #132]	; (8013ffc <xTaskResumeAll+0x12c>)
 8013f76:	2201      	movs	r2, #1
 8013f78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f7a:	4b1c      	ldr	r3, [pc, #112]	; (8013fec <xTaskResumeAll+0x11c>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d1cc      	bne.n	8013f1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d001      	beq.n	8013f8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f88:	f000 fa18 	bl	80143bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013f8c:	4b1c      	ldr	r3, [pc, #112]	; (8014000 <xTaskResumeAll+0x130>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d010      	beq.n	8013fba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013f98:	f000 f846 	bl	8014028 <xTaskIncrementTick>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d002      	beq.n	8013fa8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013fa2:	4b16      	ldr	r3, [pc, #88]	; (8013ffc <xTaskResumeAll+0x12c>)
 8013fa4:	2201      	movs	r2, #1
 8013fa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	3b01      	subs	r3, #1
 8013fac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d1f1      	bne.n	8013f98 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8013fb4:	4b12      	ldr	r3, [pc, #72]	; (8014000 <xTaskResumeAll+0x130>)
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013fba:	4b10      	ldr	r3, [pc, #64]	; (8013ffc <xTaskResumeAll+0x12c>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d009      	beq.n	8013fd6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013fc6:	4b0f      	ldr	r3, [pc, #60]	; (8014004 <xTaskResumeAll+0x134>)
 8013fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fcc:	601a      	str	r2, [r3, #0]
 8013fce:	f3bf 8f4f 	dsb	sy
 8013fd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013fd6:	f000 fd05 	bl	80149e4 <vPortExitCritical>

	return xAlreadyYielded;
 8013fda:	68bb      	ldr	r3, [r7, #8]
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3710      	adds	r7, #16
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	20000b04 	.word	0x20000b04
 8013fe8:	20000adc 	.word	0x20000adc
 8013fec:	20000a9c 	.word	0x20000a9c
 8013ff0:	20000ae4 	.word	0x20000ae4
 8013ff4:	200009e0 	.word	0x200009e0
 8013ff8:	200009dc 	.word	0x200009dc
 8013ffc:	20000af0 	.word	0x20000af0
 8014000:	20000aec 	.word	0x20000aec
 8014004:	e000ed04 	.word	0xe000ed04

08014008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801400e:	4b05      	ldr	r3, [pc, #20]	; (8014024 <xTaskGetTickCount+0x1c>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014014:	687b      	ldr	r3, [r7, #4]
}
 8014016:	4618      	mov	r0, r3
 8014018:	370c      	adds	r7, #12
 801401a:	46bd      	mov	sp, r7
 801401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop
 8014024:	20000ae0 	.word	0x20000ae0

08014028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b086      	sub	sp, #24
 801402c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801402e:	2300      	movs	r3, #0
 8014030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014032:	4b4e      	ldr	r3, [pc, #312]	; (801416c <xTaskIncrementTick+0x144>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	2b00      	cmp	r3, #0
 8014038:	f040 808e 	bne.w	8014158 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801403c:	4b4c      	ldr	r3, [pc, #304]	; (8014170 <xTaskIncrementTick+0x148>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	3301      	adds	r3, #1
 8014042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014044:	4a4a      	ldr	r2, [pc, #296]	; (8014170 <xTaskIncrementTick+0x148>)
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d120      	bne.n	8014092 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014050:	4b48      	ldr	r3, [pc, #288]	; (8014174 <xTaskIncrementTick+0x14c>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d00a      	beq.n	8014070 <xTaskIncrementTick+0x48>
	__asm volatile
 801405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405e:	f383 8811 	msr	BASEPRI, r3
 8014062:	f3bf 8f6f 	isb	sy
 8014066:	f3bf 8f4f 	dsb	sy
 801406a:	603b      	str	r3, [r7, #0]
}
 801406c:	bf00      	nop
 801406e:	e7fe      	b.n	801406e <xTaskIncrementTick+0x46>
 8014070:	4b40      	ldr	r3, [pc, #256]	; (8014174 <xTaskIncrementTick+0x14c>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	60fb      	str	r3, [r7, #12]
 8014076:	4b40      	ldr	r3, [pc, #256]	; (8014178 <xTaskIncrementTick+0x150>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	4a3e      	ldr	r2, [pc, #248]	; (8014174 <xTaskIncrementTick+0x14c>)
 801407c:	6013      	str	r3, [r2, #0]
 801407e:	4a3e      	ldr	r2, [pc, #248]	; (8014178 <xTaskIncrementTick+0x150>)
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	6013      	str	r3, [r2, #0]
 8014084:	4b3d      	ldr	r3, [pc, #244]	; (801417c <xTaskIncrementTick+0x154>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	3301      	adds	r3, #1
 801408a:	4a3c      	ldr	r2, [pc, #240]	; (801417c <xTaskIncrementTick+0x154>)
 801408c:	6013      	str	r3, [r2, #0]
 801408e:	f000 f995 	bl	80143bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014092:	4b3b      	ldr	r3, [pc, #236]	; (8014180 <xTaskIncrementTick+0x158>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	693a      	ldr	r2, [r7, #16]
 8014098:	429a      	cmp	r2, r3
 801409a:	d348      	bcc.n	801412e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801409c:	4b35      	ldr	r3, [pc, #212]	; (8014174 <xTaskIncrementTick+0x14c>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d104      	bne.n	80140b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140a6:	4b36      	ldr	r3, [pc, #216]	; (8014180 <xTaskIncrementTick+0x158>)
 80140a8:	f04f 32ff 	mov.w	r2, #4294967295
 80140ac:	601a      	str	r2, [r3, #0]
					break;
 80140ae:	e03e      	b.n	801412e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140b0:	4b30      	ldr	r3, [pc, #192]	; (8014174 <xTaskIncrementTick+0x14c>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	68db      	ldr	r3, [r3, #12]
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80140c0:	693a      	ldr	r2, [r7, #16]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d203      	bcs.n	80140d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80140c8:	4a2d      	ldr	r2, [pc, #180]	; (8014180 <xTaskIncrementTick+0x158>)
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80140ce:	e02e      	b.n	801412e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	3304      	adds	r3, #4
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7ff fc52 	bl	801397e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d004      	beq.n	80140ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	3318      	adds	r3, #24
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7ff fc49 	bl	801397e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f0:	2201      	movs	r2, #1
 80140f2:	409a      	lsls	r2, r3
 80140f4:	4b23      	ldr	r3, [pc, #140]	; (8014184 <xTaskIncrementTick+0x15c>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	4313      	orrs	r3, r2
 80140fa:	4a22      	ldr	r2, [pc, #136]	; (8014184 <xTaskIncrementTick+0x15c>)
 80140fc:	6013      	str	r3, [r2, #0]
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014102:	4613      	mov	r3, r2
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	4413      	add	r3, r2
 8014108:	009b      	lsls	r3, r3, #2
 801410a:	4a1f      	ldr	r2, [pc, #124]	; (8014188 <xTaskIncrementTick+0x160>)
 801410c:	441a      	add	r2, r3
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	3304      	adds	r3, #4
 8014112:	4619      	mov	r1, r3
 8014114:	4610      	mov	r0, r2
 8014116:	f7ff fbd5 	bl	80138c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801411e:	4b1b      	ldr	r3, [pc, #108]	; (801418c <xTaskIncrementTick+0x164>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014124:	429a      	cmp	r2, r3
 8014126:	d3b9      	bcc.n	801409c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014128:	2301      	movs	r3, #1
 801412a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801412c:	e7b6      	b.n	801409c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801412e:	4b17      	ldr	r3, [pc, #92]	; (801418c <xTaskIncrementTick+0x164>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014134:	4914      	ldr	r1, [pc, #80]	; (8014188 <xTaskIncrementTick+0x160>)
 8014136:	4613      	mov	r3, r2
 8014138:	009b      	lsls	r3, r3, #2
 801413a:	4413      	add	r3, r2
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	440b      	add	r3, r1
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2b01      	cmp	r3, #1
 8014144:	d901      	bls.n	801414a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8014146:	2301      	movs	r3, #1
 8014148:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801414a:	4b11      	ldr	r3, [pc, #68]	; (8014190 <xTaskIncrementTick+0x168>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d007      	beq.n	8014162 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8014152:	2301      	movs	r3, #1
 8014154:	617b      	str	r3, [r7, #20]
 8014156:	e004      	b.n	8014162 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014158:	4b0e      	ldr	r3, [pc, #56]	; (8014194 <xTaskIncrementTick+0x16c>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	3301      	adds	r3, #1
 801415e:	4a0d      	ldr	r2, [pc, #52]	; (8014194 <xTaskIncrementTick+0x16c>)
 8014160:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014162:	697b      	ldr	r3, [r7, #20]
}
 8014164:	4618      	mov	r0, r3
 8014166:	3718      	adds	r7, #24
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}
 801416c:	20000b04 	.word	0x20000b04
 8014170:	20000ae0 	.word	0x20000ae0
 8014174:	20000a94 	.word	0x20000a94
 8014178:	20000a98 	.word	0x20000a98
 801417c:	20000af4 	.word	0x20000af4
 8014180:	20000afc 	.word	0x20000afc
 8014184:	20000ae4 	.word	0x20000ae4
 8014188:	200009e0 	.word	0x200009e0
 801418c:	200009dc 	.word	0x200009dc
 8014190:	20000af0 	.word	0x20000af0
 8014194:	20000aec 	.word	0x20000aec

08014198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014198:	b480      	push	{r7}
 801419a:	b087      	sub	sp, #28
 801419c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801419e:	4b27      	ldr	r3, [pc, #156]	; (801423c <vTaskSwitchContext+0xa4>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d003      	beq.n	80141ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80141a6:	4b26      	ldr	r3, [pc, #152]	; (8014240 <vTaskSwitchContext+0xa8>)
 80141a8:	2201      	movs	r2, #1
 80141aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80141ac:	e03f      	b.n	801422e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80141ae:	4b24      	ldr	r3, [pc, #144]	; (8014240 <vTaskSwitchContext+0xa8>)
 80141b0:	2200      	movs	r2, #0
 80141b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141b4:	4b23      	ldr	r3, [pc, #140]	; (8014244 <vTaskSwitchContext+0xac>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	fab3 f383 	clz	r3, r3
 80141c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80141c2:	7afb      	ldrb	r3, [r7, #11]
 80141c4:	f1c3 031f 	rsb	r3, r3, #31
 80141c8:	617b      	str	r3, [r7, #20]
 80141ca:	491f      	ldr	r1, [pc, #124]	; (8014248 <vTaskSwitchContext+0xb0>)
 80141cc:	697a      	ldr	r2, [r7, #20]
 80141ce:	4613      	mov	r3, r2
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	4413      	add	r3, r2
 80141d4:	009b      	lsls	r3, r3, #2
 80141d6:	440b      	add	r3, r1
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d10a      	bne.n	80141f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80141de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e2:	f383 8811 	msr	BASEPRI, r3
 80141e6:	f3bf 8f6f 	isb	sy
 80141ea:	f3bf 8f4f 	dsb	sy
 80141ee:	607b      	str	r3, [r7, #4]
}
 80141f0:	bf00      	nop
 80141f2:	e7fe      	b.n	80141f2 <vTaskSwitchContext+0x5a>
 80141f4:	697a      	ldr	r2, [r7, #20]
 80141f6:	4613      	mov	r3, r2
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	4413      	add	r3, r2
 80141fc:	009b      	lsls	r3, r3, #2
 80141fe:	4a12      	ldr	r2, [pc, #72]	; (8014248 <vTaskSwitchContext+0xb0>)
 8014200:	4413      	add	r3, r2
 8014202:	613b      	str	r3, [r7, #16]
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	685b      	ldr	r3, [r3, #4]
 8014208:	685a      	ldr	r2, [r3, #4]
 801420a:	693b      	ldr	r3, [r7, #16]
 801420c:	605a      	str	r2, [r3, #4]
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	685a      	ldr	r2, [r3, #4]
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	3308      	adds	r3, #8
 8014216:	429a      	cmp	r2, r3
 8014218:	d104      	bne.n	8014224 <vTaskSwitchContext+0x8c>
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	685b      	ldr	r3, [r3, #4]
 801421e:	685a      	ldr	r2, [r3, #4]
 8014220:	693b      	ldr	r3, [r7, #16]
 8014222:	605a      	str	r2, [r3, #4]
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	685b      	ldr	r3, [r3, #4]
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	4a08      	ldr	r2, [pc, #32]	; (801424c <vTaskSwitchContext+0xb4>)
 801422c:	6013      	str	r3, [r2, #0]
}
 801422e:	bf00      	nop
 8014230:	371c      	adds	r7, #28
 8014232:	46bd      	mov	sp, r7
 8014234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop
 801423c:	20000b04 	.word	0x20000b04
 8014240:	20000af0 	.word	0x20000af0
 8014244:	20000ae4 	.word	0x20000ae4
 8014248:	200009e0 	.word	0x200009e0
 801424c:	200009dc 	.word	0x200009dc

08014250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014258:	f000 f852 	bl	8014300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801425c:	4b06      	ldr	r3, [pc, #24]	; (8014278 <prvIdleTask+0x28>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	2b01      	cmp	r3, #1
 8014262:	d9f9      	bls.n	8014258 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014264:	4b05      	ldr	r3, [pc, #20]	; (801427c <prvIdleTask+0x2c>)
 8014266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801426a:	601a      	str	r2, [r3, #0]
 801426c:	f3bf 8f4f 	dsb	sy
 8014270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014274:	e7f0      	b.n	8014258 <prvIdleTask+0x8>
 8014276:	bf00      	nop
 8014278:	200009e0 	.word	0x200009e0
 801427c:	e000ed04 	.word	0xe000ed04

08014280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014286:	2300      	movs	r3, #0
 8014288:	607b      	str	r3, [r7, #4]
 801428a:	e00c      	b.n	80142a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801428c:	687a      	ldr	r2, [r7, #4]
 801428e:	4613      	mov	r3, r2
 8014290:	009b      	lsls	r3, r3, #2
 8014292:	4413      	add	r3, r2
 8014294:	009b      	lsls	r3, r3, #2
 8014296:	4a12      	ldr	r2, [pc, #72]	; (80142e0 <prvInitialiseTaskLists+0x60>)
 8014298:	4413      	add	r3, r2
 801429a:	4618      	mov	r0, r3
 801429c:	f7ff fae5 	bl	801386a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	3301      	adds	r3, #1
 80142a4:	607b      	str	r3, [r7, #4]
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	2b06      	cmp	r3, #6
 80142aa:	d9ef      	bls.n	801428c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80142ac:	480d      	ldr	r0, [pc, #52]	; (80142e4 <prvInitialiseTaskLists+0x64>)
 80142ae:	f7ff fadc 	bl	801386a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80142b2:	480d      	ldr	r0, [pc, #52]	; (80142e8 <prvInitialiseTaskLists+0x68>)
 80142b4:	f7ff fad9 	bl	801386a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80142b8:	480c      	ldr	r0, [pc, #48]	; (80142ec <prvInitialiseTaskLists+0x6c>)
 80142ba:	f7ff fad6 	bl	801386a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80142be:	480c      	ldr	r0, [pc, #48]	; (80142f0 <prvInitialiseTaskLists+0x70>)
 80142c0:	f7ff fad3 	bl	801386a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80142c4:	480b      	ldr	r0, [pc, #44]	; (80142f4 <prvInitialiseTaskLists+0x74>)
 80142c6:	f7ff fad0 	bl	801386a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80142ca:	4b0b      	ldr	r3, [pc, #44]	; (80142f8 <prvInitialiseTaskLists+0x78>)
 80142cc:	4a05      	ldr	r2, [pc, #20]	; (80142e4 <prvInitialiseTaskLists+0x64>)
 80142ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80142d0:	4b0a      	ldr	r3, [pc, #40]	; (80142fc <prvInitialiseTaskLists+0x7c>)
 80142d2:	4a05      	ldr	r2, [pc, #20]	; (80142e8 <prvInitialiseTaskLists+0x68>)
 80142d4:	601a      	str	r2, [r3, #0]
}
 80142d6:	bf00      	nop
 80142d8:	3708      	adds	r7, #8
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	200009e0 	.word	0x200009e0
 80142e4:	20000a6c 	.word	0x20000a6c
 80142e8:	20000a80 	.word	0x20000a80
 80142ec:	20000a9c 	.word	0x20000a9c
 80142f0:	20000ab0 	.word	0x20000ab0
 80142f4:	20000ac8 	.word	0x20000ac8
 80142f8:	20000a94 	.word	0x20000a94
 80142fc:	20000a98 	.word	0x20000a98

08014300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014306:	e019      	b.n	801433c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014308:	f000 fb3c 	bl	8014984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801430c:	4b10      	ldr	r3, [pc, #64]	; (8014350 <prvCheckTasksWaitingTermination+0x50>)
 801430e:	68db      	ldr	r3, [r3, #12]
 8014310:	68db      	ldr	r3, [r3, #12]
 8014312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	3304      	adds	r3, #4
 8014318:	4618      	mov	r0, r3
 801431a:	f7ff fb30 	bl	801397e <uxListRemove>
				--uxCurrentNumberOfTasks;
 801431e:	4b0d      	ldr	r3, [pc, #52]	; (8014354 <prvCheckTasksWaitingTermination+0x54>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	3b01      	subs	r3, #1
 8014324:	4a0b      	ldr	r2, [pc, #44]	; (8014354 <prvCheckTasksWaitingTermination+0x54>)
 8014326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014328:	4b0b      	ldr	r3, [pc, #44]	; (8014358 <prvCheckTasksWaitingTermination+0x58>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	3b01      	subs	r3, #1
 801432e:	4a0a      	ldr	r2, [pc, #40]	; (8014358 <prvCheckTasksWaitingTermination+0x58>)
 8014330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014332:	f000 fb57 	bl	80149e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f000 f810 	bl	801435c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801433c:	4b06      	ldr	r3, [pc, #24]	; (8014358 <prvCheckTasksWaitingTermination+0x58>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d1e1      	bne.n	8014308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014344:	bf00      	nop
 8014346:	bf00      	nop
 8014348:	3708      	adds	r7, #8
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	20000ab0 	.word	0x20000ab0
 8014354:	20000adc 	.word	0x20000adc
 8014358:	20000ac4 	.word	0x20000ac4

0801435c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801435c:	b580      	push	{r7, lr}
 801435e:	b084      	sub	sp, #16
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801436a:	2b00      	cmp	r3, #0
 801436c:	d108      	bne.n	8014380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014372:	4618      	mov	r0, r3
 8014374:	f000 fcf4 	bl	8014d60 <vPortFree>
				vPortFree( pxTCB );
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	f000 fcf1 	bl	8014d60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801437e:	e018      	b.n	80143b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014386:	2b01      	cmp	r3, #1
 8014388:	d103      	bne.n	8014392 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f000 fce8 	bl	8014d60 <vPortFree>
	}
 8014390:	e00f      	b.n	80143b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014398:	2b02      	cmp	r3, #2
 801439a:	d00a      	beq.n	80143b2 <prvDeleteTCB+0x56>
	__asm volatile
 801439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143a0:	f383 8811 	msr	BASEPRI, r3
 80143a4:	f3bf 8f6f 	isb	sy
 80143a8:	f3bf 8f4f 	dsb	sy
 80143ac:	60fb      	str	r3, [r7, #12]
}
 80143ae:	bf00      	nop
 80143b0:	e7fe      	b.n	80143b0 <prvDeleteTCB+0x54>
	}
 80143b2:	bf00      	nop
 80143b4:	3710      	adds	r7, #16
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}
	...

080143bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143c2:	4b0c      	ldr	r3, [pc, #48]	; (80143f4 <prvResetNextTaskUnblockTime+0x38>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d104      	bne.n	80143d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80143cc:	4b0a      	ldr	r3, [pc, #40]	; (80143f8 <prvResetNextTaskUnblockTime+0x3c>)
 80143ce:	f04f 32ff 	mov.w	r2, #4294967295
 80143d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80143d4:	e008      	b.n	80143e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143d6:	4b07      	ldr	r3, [pc, #28]	; (80143f4 <prvResetNextTaskUnblockTime+0x38>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	68db      	ldr	r3, [r3, #12]
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	685b      	ldr	r3, [r3, #4]
 80143e4:	4a04      	ldr	r2, [pc, #16]	; (80143f8 <prvResetNextTaskUnblockTime+0x3c>)
 80143e6:	6013      	str	r3, [r2, #0]
}
 80143e8:	bf00      	nop
 80143ea:	370c      	adds	r7, #12
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr
 80143f4:	20000a94 	.word	0x20000a94
 80143f8:	20000afc 	.word	0x20000afc

080143fc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b086      	sub	sp, #24
 8014400:	af00      	add	r7, sp, #0
 8014402:	60f8      	str	r0, [r7, #12]
 8014404:	60b9      	str	r1, [r7, #8]
 8014406:	607a      	str	r2, [r7, #4]
 8014408:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801440a:	f000 fabb 	bl	8014984 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801440e:	4b26      	ldr	r3, [pc, #152]	; (80144a8 <xTaskNotifyWait+0xac>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014416:	b2db      	uxtb	r3, r3
 8014418:	2b02      	cmp	r3, #2
 801441a:	d01a      	beq.n	8014452 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801441c:	4b22      	ldr	r3, [pc, #136]	; (80144a8 <xTaskNotifyWait+0xac>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014422:	68fa      	ldr	r2, [r7, #12]
 8014424:	43d2      	mvns	r2, r2
 8014426:	400a      	ands	r2, r1
 8014428:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801442a:	4b1f      	ldr	r3, [pc, #124]	; (80144a8 <xTaskNotifyWait+0xac>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2201      	movs	r2, #1
 8014430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d00b      	beq.n	8014452 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801443a:	2101      	movs	r1, #1
 801443c:	6838      	ldr	r0, [r7, #0]
 801443e:	f000 f911 	bl	8014664 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014442:	4b1a      	ldr	r3, [pc, #104]	; (80144ac <xTaskNotifyWait+0xb0>)
 8014444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014448:	601a      	str	r2, [r3, #0]
 801444a:	f3bf 8f4f 	dsb	sy
 801444e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014452:	f000 fac7 	bl	80149e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014456:	f000 fa95 	bl	8014984 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d004      	beq.n	801446a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014460:	4b11      	ldr	r3, [pc, #68]	; (80144a8 <xTaskNotifyWait+0xac>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801446a:	4b0f      	ldr	r3, [pc, #60]	; (80144a8 <xTaskNotifyWait+0xac>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014472:	b2db      	uxtb	r3, r3
 8014474:	2b02      	cmp	r3, #2
 8014476:	d002      	beq.n	801447e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014478:	2300      	movs	r3, #0
 801447a:	617b      	str	r3, [r7, #20]
 801447c:	e008      	b.n	8014490 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801447e:	4b0a      	ldr	r3, [pc, #40]	; (80144a8 <xTaskNotifyWait+0xac>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014484:	68ba      	ldr	r2, [r7, #8]
 8014486:	43d2      	mvns	r2, r2
 8014488:	400a      	ands	r2, r1
 801448a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 801448c:	2301      	movs	r3, #1
 801448e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014490:	4b05      	ldr	r3, [pc, #20]	; (80144a8 <xTaskNotifyWait+0xac>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	2200      	movs	r2, #0
 8014496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801449a:	f000 faa3 	bl	80149e4 <vPortExitCritical>

		return xReturn;
 801449e:	697b      	ldr	r3, [r7, #20]
	}
 80144a0:	4618      	mov	r0, r3
 80144a2:	3718      	adds	r7, #24
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	200009dc 	.word	0x200009dc
 80144ac:	e000ed04 	.word	0xe000ed04

080144b0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b08e      	sub	sp, #56	; 0x38
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	60f8      	str	r0, [r7, #12]
 80144b8:	60b9      	str	r1, [r7, #8]
 80144ba:	603b      	str	r3, [r7, #0]
 80144bc:	4613      	mov	r3, r2
 80144be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80144c0:	2301      	movs	r3, #1
 80144c2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d10a      	bne.n	80144e0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80144ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ce:	f383 8811 	msr	BASEPRI, r3
 80144d2:	f3bf 8f6f 	isb	sy
 80144d6:	f3bf 8f4f 	dsb	sy
 80144da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80144dc:	bf00      	nop
 80144de:	e7fe      	b.n	80144de <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80144e0:	f000 fb32 	bl	8014b48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80144e8:	f3ef 8211 	mrs	r2, BASEPRI
 80144ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f0:	f383 8811 	msr	BASEPRI, r3
 80144f4:	f3bf 8f6f 	isb	sy
 80144f8:	f3bf 8f4f 	dsb	sy
 80144fc:	623a      	str	r2, [r7, #32]
 80144fe:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014500:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014502:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d003      	beq.n	8014512 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801450c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451e:	2202      	movs	r2, #2
 8014520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014524:	79fb      	ldrb	r3, [r7, #7]
 8014526:	2b04      	cmp	r3, #4
 8014528:	d828      	bhi.n	801457c <xTaskGenericNotifyFromISR+0xcc>
 801452a:	a201      	add	r2, pc, #4	; (adr r2, 8014530 <xTaskGenericNotifyFromISR+0x80>)
 801452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014530:	0801459d 	.word	0x0801459d
 8014534:	08014545 	.word	0x08014545
 8014538:	08014553 	.word	0x08014553
 801453c:	0801455f 	.word	0x0801455f
 8014540:	08014567 	.word	0x08014567
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	431a      	orrs	r2, r3
 801454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801454e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014550:	e027      	b.n	80145a2 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014556:	1c5a      	adds	r2, r3, #1
 8014558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801455a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801455c:	e021      	b.n	80145a2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014560:	68ba      	ldr	r2, [r7, #8]
 8014562:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014564:	e01d      	b.n	80145a2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801456a:	2b02      	cmp	r3, #2
 801456c:	d003      	beq.n	8014576 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014570:	68ba      	ldr	r2, [r7, #8]
 8014572:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014574:	e015      	b.n	80145a2 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8014576:	2300      	movs	r3, #0
 8014578:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801457a:	e012      	b.n	80145a2 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801457e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014584:	d00c      	beq.n	80145a0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801458a:	f383 8811 	msr	BASEPRI, r3
 801458e:	f3bf 8f6f 	isb	sy
 8014592:	f3bf 8f4f 	dsb	sy
 8014596:	61bb      	str	r3, [r7, #24]
}
 8014598:	bf00      	nop
 801459a:	e7fe      	b.n	801459a <xTaskGenericNotifyFromISR+0xea>
					break;
 801459c:	bf00      	nop
 801459e:	e000      	b.n	80145a2 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80145a0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80145a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d145      	bne.n	8014636 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80145aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d00a      	beq.n	80145c8 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80145b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b6:	f383 8811 	msr	BASEPRI, r3
 80145ba:	f3bf 8f6f 	isb	sy
 80145be:	f3bf 8f4f 	dsb	sy
 80145c2:	617b      	str	r3, [r7, #20]
}
 80145c4:	bf00      	nop
 80145c6:	e7fe      	b.n	80145c6 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145c8:	4b20      	ldr	r3, [pc, #128]	; (801464c <xTaskGenericNotifyFromISR+0x19c>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d11c      	bne.n	801460a <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d2:	3304      	adds	r3, #4
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7ff f9d2 	bl	801397e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80145da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145de:	2201      	movs	r2, #1
 80145e0:	409a      	lsls	r2, r3
 80145e2:	4b1b      	ldr	r3, [pc, #108]	; (8014650 <xTaskGenericNotifyFromISR+0x1a0>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	4313      	orrs	r3, r2
 80145e8:	4a19      	ldr	r2, [pc, #100]	; (8014650 <xTaskGenericNotifyFromISR+0x1a0>)
 80145ea:	6013      	str	r3, [r2, #0]
 80145ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145f0:	4613      	mov	r3, r2
 80145f2:	009b      	lsls	r3, r3, #2
 80145f4:	4413      	add	r3, r2
 80145f6:	009b      	lsls	r3, r3, #2
 80145f8:	4a16      	ldr	r2, [pc, #88]	; (8014654 <xTaskGenericNotifyFromISR+0x1a4>)
 80145fa:	441a      	add	r2, r3
 80145fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145fe:	3304      	adds	r3, #4
 8014600:	4619      	mov	r1, r3
 8014602:	4610      	mov	r0, r2
 8014604:	f7ff f95e 	bl	80138c4 <vListInsertEnd>
 8014608:	e005      	b.n	8014616 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460c:	3318      	adds	r3, #24
 801460e:	4619      	mov	r1, r3
 8014610:	4811      	ldr	r0, [pc, #68]	; (8014658 <xTaskGenericNotifyFromISR+0x1a8>)
 8014612:	f7ff f957 	bl	80138c4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801461a:	4b10      	ldr	r3, [pc, #64]	; (801465c <xTaskGenericNotifyFromISR+0x1ac>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014620:	429a      	cmp	r2, r3
 8014622:	d908      	bls.n	8014636 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014626:	2b00      	cmp	r3, #0
 8014628:	d002      	beq.n	8014630 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801462a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801462c:	2201      	movs	r2, #1
 801462e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014630:	4b0b      	ldr	r3, [pc, #44]	; (8014660 <xTaskGenericNotifyFromISR+0x1b0>)
 8014632:	2201      	movs	r2, #1
 8014634:	601a      	str	r2, [r3, #0]
 8014636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014638:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801463a:	693b      	ldr	r3, [r7, #16]
 801463c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014640:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014644:	4618      	mov	r0, r3
 8014646:	3738      	adds	r7, #56	; 0x38
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}
 801464c:	20000b04 	.word	0x20000b04
 8014650:	20000ae4 	.word	0x20000ae4
 8014654:	200009e0 	.word	0x200009e0
 8014658:	20000a9c 	.word	0x20000a9c
 801465c:	200009dc 	.word	0x200009dc
 8014660:	20000af0 	.word	0x20000af0

08014664 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b084      	sub	sp, #16
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801466e:	4b29      	ldr	r3, [pc, #164]	; (8014714 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014674:	4b28      	ldr	r3, [pc, #160]	; (8014718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	3304      	adds	r3, #4
 801467a:	4618      	mov	r0, r3
 801467c:	f7ff f97f 	bl	801397e <uxListRemove>
 8014680:	4603      	mov	r3, r0
 8014682:	2b00      	cmp	r3, #0
 8014684:	d10b      	bne.n	801469e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014686:	4b24      	ldr	r3, [pc, #144]	; (8014718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801468c:	2201      	movs	r2, #1
 801468e:	fa02 f303 	lsl.w	r3, r2, r3
 8014692:	43da      	mvns	r2, r3
 8014694:	4b21      	ldr	r3, [pc, #132]	; (801471c <prvAddCurrentTaskToDelayedList+0xb8>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	4013      	ands	r3, r2
 801469a:	4a20      	ldr	r2, [pc, #128]	; (801471c <prvAddCurrentTaskToDelayedList+0xb8>)
 801469c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146a4:	d10a      	bne.n	80146bc <prvAddCurrentTaskToDelayedList+0x58>
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d007      	beq.n	80146bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146ac:	4b1a      	ldr	r3, [pc, #104]	; (8014718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	3304      	adds	r3, #4
 80146b2:	4619      	mov	r1, r3
 80146b4:	481a      	ldr	r0, [pc, #104]	; (8014720 <prvAddCurrentTaskToDelayedList+0xbc>)
 80146b6:	f7ff f905 	bl	80138c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80146ba:	e026      	b.n	801470a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80146bc:	68fa      	ldr	r2, [r7, #12]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	4413      	add	r3, r2
 80146c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80146c4:	4b14      	ldr	r3, [pc, #80]	; (8014718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	68ba      	ldr	r2, [r7, #8]
 80146ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80146cc:	68ba      	ldr	r2, [r7, #8]
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	d209      	bcs.n	80146e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146d4:	4b13      	ldr	r3, [pc, #76]	; (8014724 <prvAddCurrentTaskToDelayedList+0xc0>)
 80146d6:	681a      	ldr	r2, [r3, #0]
 80146d8:	4b0f      	ldr	r3, [pc, #60]	; (8014718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	3304      	adds	r3, #4
 80146de:	4619      	mov	r1, r3
 80146e0:	4610      	mov	r0, r2
 80146e2:	f7ff f913 	bl	801390c <vListInsert>
}
 80146e6:	e010      	b.n	801470a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146e8:	4b0f      	ldr	r3, [pc, #60]	; (8014728 <prvAddCurrentTaskToDelayedList+0xc4>)
 80146ea:	681a      	ldr	r2, [r3, #0]
 80146ec:	4b0a      	ldr	r3, [pc, #40]	; (8014718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	3304      	adds	r3, #4
 80146f2:	4619      	mov	r1, r3
 80146f4:	4610      	mov	r0, r2
 80146f6:	f7ff f909 	bl	801390c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80146fa:	4b0c      	ldr	r3, [pc, #48]	; (801472c <prvAddCurrentTaskToDelayedList+0xc8>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	68ba      	ldr	r2, [r7, #8]
 8014700:	429a      	cmp	r2, r3
 8014702:	d202      	bcs.n	801470a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014704:	4a09      	ldr	r2, [pc, #36]	; (801472c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	6013      	str	r3, [r2, #0]
}
 801470a:	bf00      	nop
 801470c:	3710      	adds	r7, #16
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}
 8014712:	bf00      	nop
 8014714:	20000ae0 	.word	0x20000ae0
 8014718:	200009dc 	.word	0x200009dc
 801471c:	20000ae4 	.word	0x20000ae4
 8014720:	20000ac8 	.word	0x20000ac8
 8014724:	20000a98 	.word	0x20000a98
 8014728:	20000a94 	.word	0x20000a94
 801472c:	20000afc 	.word	0x20000afc

08014730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014730:	b480      	push	{r7}
 8014732:	b085      	sub	sp, #20
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	3b04      	subs	r3, #4
 8014740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	3b04      	subs	r3, #4
 801474e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	f023 0201 	bic.w	r2, r3, #1
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	3b04      	subs	r3, #4
 801475e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014760:	4a0c      	ldr	r2, [pc, #48]	; (8014794 <pxPortInitialiseStack+0x64>)
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	3b14      	subs	r3, #20
 801476a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801476c:	687a      	ldr	r2, [r7, #4]
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	3b04      	subs	r3, #4
 8014776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	f06f 0202 	mvn.w	r2, #2
 801477e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	3b20      	subs	r3, #32
 8014784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014786:	68fb      	ldr	r3, [r7, #12]
}
 8014788:	4618      	mov	r0, r3
 801478a:	3714      	adds	r7, #20
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr
 8014794:	08014799 	.word	0x08014799

08014798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014798:	b480      	push	{r7}
 801479a:	b085      	sub	sp, #20
 801479c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801479e:	2300      	movs	r3, #0
 80147a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80147a2:	4b12      	ldr	r3, [pc, #72]	; (80147ec <prvTaskExitError+0x54>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147aa:	d00a      	beq.n	80147c2 <prvTaskExitError+0x2a>
	__asm volatile
 80147ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b0:	f383 8811 	msr	BASEPRI, r3
 80147b4:	f3bf 8f6f 	isb	sy
 80147b8:	f3bf 8f4f 	dsb	sy
 80147bc:	60fb      	str	r3, [r7, #12]
}
 80147be:	bf00      	nop
 80147c0:	e7fe      	b.n	80147c0 <prvTaskExitError+0x28>
	__asm volatile
 80147c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c6:	f383 8811 	msr	BASEPRI, r3
 80147ca:	f3bf 8f6f 	isb	sy
 80147ce:	f3bf 8f4f 	dsb	sy
 80147d2:	60bb      	str	r3, [r7, #8]
}
 80147d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80147d6:	bf00      	nop
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d0fc      	beq.n	80147d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80147de:	bf00      	nop
 80147e0:	bf00      	nop
 80147e2:	3714      	adds	r7, #20
 80147e4:	46bd      	mov	sp, r7
 80147e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ea:	4770      	bx	lr
 80147ec:	2000000c 	.word	0x2000000c

080147f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80147f0:	4b07      	ldr	r3, [pc, #28]	; (8014810 <pxCurrentTCBConst2>)
 80147f2:	6819      	ldr	r1, [r3, #0]
 80147f4:	6808      	ldr	r0, [r1, #0]
 80147f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147fa:	f380 8809 	msr	PSP, r0
 80147fe:	f3bf 8f6f 	isb	sy
 8014802:	f04f 0000 	mov.w	r0, #0
 8014806:	f380 8811 	msr	BASEPRI, r0
 801480a:	4770      	bx	lr
 801480c:	f3af 8000 	nop.w

08014810 <pxCurrentTCBConst2>:
 8014810:	200009dc 	.word	0x200009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014814:	bf00      	nop
 8014816:	bf00      	nop

08014818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014818:	4808      	ldr	r0, [pc, #32]	; (801483c <prvPortStartFirstTask+0x24>)
 801481a:	6800      	ldr	r0, [r0, #0]
 801481c:	6800      	ldr	r0, [r0, #0]
 801481e:	f380 8808 	msr	MSP, r0
 8014822:	f04f 0000 	mov.w	r0, #0
 8014826:	f380 8814 	msr	CONTROL, r0
 801482a:	b662      	cpsie	i
 801482c:	b661      	cpsie	f
 801482e:	f3bf 8f4f 	dsb	sy
 8014832:	f3bf 8f6f 	isb	sy
 8014836:	df00      	svc	0
 8014838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801483a:	bf00      	nop
 801483c:	e000ed08 	.word	0xe000ed08

08014840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014846:	4b46      	ldr	r3, [pc, #280]	; (8014960 <xPortStartScheduler+0x120>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	4a46      	ldr	r2, [pc, #280]	; (8014964 <xPortStartScheduler+0x124>)
 801484c:	4293      	cmp	r3, r2
 801484e:	d10a      	bne.n	8014866 <xPortStartScheduler+0x26>
	__asm volatile
 8014850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014854:	f383 8811 	msr	BASEPRI, r3
 8014858:	f3bf 8f6f 	isb	sy
 801485c:	f3bf 8f4f 	dsb	sy
 8014860:	613b      	str	r3, [r7, #16]
}
 8014862:	bf00      	nop
 8014864:	e7fe      	b.n	8014864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014866:	4b3e      	ldr	r3, [pc, #248]	; (8014960 <xPortStartScheduler+0x120>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	4a3f      	ldr	r2, [pc, #252]	; (8014968 <xPortStartScheduler+0x128>)
 801486c:	4293      	cmp	r3, r2
 801486e:	d10a      	bne.n	8014886 <xPortStartScheduler+0x46>
	__asm volatile
 8014870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014874:	f383 8811 	msr	BASEPRI, r3
 8014878:	f3bf 8f6f 	isb	sy
 801487c:	f3bf 8f4f 	dsb	sy
 8014880:	60fb      	str	r3, [r7, #12]
}
 8014882:	bf00      	nop
 8014884:	e7fe      	b.n	8014884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014886:	4b39      	ldr	r3, [pc, #228]	; (801496c <xPortStartScheduler+0x12c>)
 8014888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801488a:	697b      	ldr	r3, [r7, #20]
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	b2db      	uxtb	r3, r3
 8014890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	22ff      	movs	r2, #255	; 0xff
 8014896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	b2db      	uxtb	r3, r3
 801489e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80148a0:	78fb      	ldrb	r3, [r7, #3]
 80148a2:	b2db      	uxtb	r3, r3
 80148a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80148a8:	b2da      	uxtb	r2, r3
 80148aa:	4b31      	ldr	r3, [pc, #196]	; (8014970 <xPortStartScheduler+0x130>)
 80148ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80148ae:	4b31      	ldr	r3, [pc, #196]	; (8014974 <xPortStartScheduler+0x134>)
 80148b0:	2207      	movs	r2, #7
 80148b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148b4:	e009      	b.n	80148ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80148b6:	4b2f      	ldr	r3, [pc, #188]	; (8014974 <xPortStartScheduler+0x134>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	3b01      	subs	r3, #1
 80148bc:	4a2d      	ldr	r2, [pc, #180]	; (8014974 <xPortStartScheduler+0x134>)
 80148be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80148c0:	78fb      	ldrb	r3, [r7, #3]
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	005b      	lsls	r3, r3, #1
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148ca:	78fb      	ldrb	r3, [r7, #3]
 80148cc:	b2db      	uxtb	r3, r3
 80148ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148d2:	2b80      	cmp	r3, #128	; 0x80
 80148d4:	d0ef      	beq.n	80148b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80148d6:	4b27      	ldr	r3, [pc, #156]	; (8014974 <xPortStartScheduler+0x134>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	f1c3 0307 	rsb	r3, r3, #7
 80148de:	2b04      	cmp	r3, #4
 80148e0:	d00a      	beq.n	80148f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80148e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e6:	f383 8811 	msr	BASEPRI, r3
 80148ea:	f3bf 8f6f 	isb	sy
 80148ee:	f3bf 8f4f 	dsb	sy
 80148f2:	60bb      	str	r3, [r7, #8]
}
 80148f4:	bf00      	nop
 80148f6:	e7fe      	b.n	80148f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80148f8:	4b1e      	ldr	r3, [pc, #120]	; (8014974 <xPortStartScheduler+0x134>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	021b      	lsls	r3, r3, #8
 80148fe:	4a1d      	ldr	r2, [pc, #116]	; (8014974 <xPortStartScheduler+0x134>)
 8014900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014902:	4b1c      	ldr	r3, [pc, #112]	; (8014974 <xPortStartScheduler+0x134>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801490a:	4a1a      	ldr	r2, [pc, #104]	; (8014974 <xPortStartScheduler+0x134>)
 801490c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	b2da      	uxtb	r2, r3
 8014912:	697b      	ldr	r3, [r7, #20]
 8014914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014916:	4b18      	ldr	r3, [pc, #96]	; (8014978 <xPortStartScheduler+0x138>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	4a17      	ldr	r2, [pc, #92]	; (8014978 <xPortStartScheduler+0x138>)
 801491c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014922:	4b15      	ldr	r3, [pc, #84]	; (8014978 <xPortStartScheduler+0x138>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	4a14      	ldr	r2, [pc, #80]	; (8014978 <xPortStartScheduler+0x138>)
 8014928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801492c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801492e:	f000 f8dd 	bl	8014aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014932:	4b12      	ldr	r3, [pc, #72]	; (801497c <xPortStartScheduler+0x13c>)
 8014934:	2200      	movs	r2, #0
 8014936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014938:	f000 f8fc 	bl	8014b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801493c:	4b10      	ldr	r3, [pc, #64]	; (8014980 <xPortStartScheduler+0x140>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	4a0f      	ldr	r2, [pc, #60]	; (8014980 <xPortStartScheduler+0x140>)
 8014942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014948:	f7ff ff66 	bl	8014818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801494c:	f7ff fc24 	bl	8014198 <vTaskSwitchContext>
	prvTaskExitError();
 8014950:	f7ff ff22 	bl	8014798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014954:	2300      	movs	r3, #0
}
 8014956:	4618      	mov	r0, r3
 8014958:	3718      	adds	r7, #24
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}
 801495e:	bf00      	nop
 8014960:	e000ed00 	.word	0xe000ed00
 8014964:	410fc271 	.word	0x410fc271
 8014968:	410fc270 	.word	0x410fc270
 801496c:	e000e400 	.word	0xe000e400
 8014970:	20000b08 	.word	0x20000b08
 8014974:	20000b0c 	.word	0x20000b0c
 8014978:	e000ed20 	.word	0xe000ed20
 801497c:	2000000c 	.word	0x2000000c
 8014980:	e000ef34 	.word	0xe000ef34

08014984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014984:	b480      	push	{r7}
 8014986:	b083      	sub	sp, #12
 8014988:	af00      	add	r7, sp, #0
	__asm volatile
 801498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801498e:	f383 8811 	msr	BASEPRI, r3
 8014992:	f3bf 8f6f 	isb	sy
 8014996:	f3bf 8f4f 	dsb	sy
 801499a:	607b      	str	r3, [r7, #4]
}
 801499c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801499e:	4b0f      	ldr	r3, [pc, #60]	; (80149dc <vPortEnterCritical+0x58>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	3301      	adds	r3, #1
 80149a4:	4a0d      	ldr	r2, [pc, #52]	; (80149dc <vPortEnterCritical+0x58>)
 80149a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80149a8:	4b0c      	ldr	r3, [pc, #48]	; (80149dc <vPortEnterCritical+0x58>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b01      	cmp	r3, #1
 80149ae:	d10f      	bne.n	80149d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80149b0:	4b0b      	ldr	r3, [pc, #44]	; (80149e0 <vPortEnterCritical+0x5c>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d00a      	beq.n	80149d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80149ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149be:	f383 8811 	msr	BASEPRI, r3
 80149c2:	f3bf 8f6f 	isb	sy
 80149c6:	f3bf 8f4f 	dsb	sy
 80149ca:	603b      	str	r3, [r7, #0]
}
 80149cc:	bf00      	nop
 80149ce:	e7fe      	b.n	80149ce <vPortEnterCritical+0x4a>
	}
}
 80149d0:	bf00      	nop
 80149d2:	370c      	adds	r7, #12
 80149d4:	46bd      	mov	sp, r7
 80149d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149da:	4770      	bx	lr
 80149dc:	2000000c 	.word	0x2000000c
 80149e0:	e000ed04 	.word	0xe000ed04

080149e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80149e4:	b480      	push	{r7}
 80149e6:	b083      	sub	sp, #12
 80149e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80149ea:	4b12      	ldr	r3, [pc, #72]	; (8014a34 <vPortExitCritical+0x50>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d10a      	bne.n	8014a08 <vPortExitCritical+0x24>
	__asm volatile
 80149f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149f6:	f383 8811 	msr	BASEPRI, r3
 80149fa:	f3bf 8f6f 	isb	sy
 80149fe:	f3bf 8f4f 	dsb	sy
 8014a02:	607b      	str	r3, [r7, #4]
}
 8014a04:	bf00      	nop
 8014a06:	e7fe      	b.n	8014a06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014a08:	4b0a      	ldr	r3, [pc, #40]	; (8014a34 <vPortExitCritical+0x50>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	3b01      	subs	r3, #1
 8014a0e:	4a09      	ldr	r2, [pc, #36]	; (8014a34 <vPortExitCritical+0x50>)
 8014a10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014a12:	4b08      	ldr	r3, [pc, #32]	; (8014a34 <vPortExitCritical+0x50>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d105      	bne.n	8014a26 <vPortExitCritical+0x42>
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	f383 8811 	msr	BASEPRI, r3
}
 8014a24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014a26:	bf00      	nop
 8014a28:	370c      	adds	r7, #12
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr
 8014a32:	bf00      	nop
 8014a34:	2000000c 	.word	0x2000000c
	...

08014a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014a40:	f3ef 8009 	mrs	r0, PSP
 8014a44:	f3bf 8f6f 	isb	sy
 8014a48:	4b15      	ldr	r3, [pc, #84]	; (8014aa0 <pxCurrentTCBConst>)
 8014a4a:	681a      	ldr	r2, [r3, #0]
 8014a4c:	f01e 0f10 	tst.w	lr, #16
 8014a50:	bf08      	it	eq
 8014a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a5a:	6010      	str	r0, [r2, #0]
 8014a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014a64:	f380 8811 	msr	BASEPRI, r0
 8014a68:	f3bf 8f4f 	dsb	sy
 8014a6c:	f3bf 8f6f 	isb	sy
 8014a70:	f7ff fb92 	bl	8014198 <vTaskSwitchContext>
 8014a74:	f04f 0000 	mov.w	r0, #0
 8014a78:	f380 8811 	msr	BASEPRI, r0
 8014a7c:	bc09      	pop	{r0, r3}
 8014a7e:	6819      	ldr	r1, [r3, #0]
 8014a80:	6808      	ldr	r0, [r1, #0]
 8014a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a86:	f01e 0f10 	tst.w	lr, #16
 8014a8a:	bf08      	it	eq
 8014a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014a90:	f380 8809 	msr	PSP, r0
 8014a94:	f3bf 8f6f 	isb	sy
 8014a98:	4770      	bx	lr
 8014a9a:	bf00      	nop
 8014a9c:	f3af 8000 	nop.w

08014aa0 <pxCurrentTCBConst>:
 8014aa0:	200009dc 	.word	0x200009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014aa4:	bf00      	nop
 8014aa6:	bf00      	nop

08014aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
	__asm volatile
 8014aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab2:	f383 8811 	msr	BASEPRI, r3
 8014ab6:	f3bf 8f6f 	isb	sy
 8014aba:	f3bf 8f4f 	dsb	sy
 8014abe:	607b      	str	r3, [r7, #4]
}
 8014ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014ac2:	f7ff fab1 	bl	8014028 <xTaskIncrementTick>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d003      	beq.n	8014ad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014acc:	4b06      	ldr	r3, [pc, #24]	; (8014ae8 <SysTick_Handler+0x40>)
 8014ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ad2:	601a      	str	r2, [r3, #0]
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	f383 8811 	msr	BASEPRI, r3
}
 8014ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ae0:	bf00      	nop
 8014ae2:	3708      	adds	r7, #8
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}
 8014ae8:	e000ed04 	.word	0xe000ed04

08014aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014aec:	b480      	push	{r7}
 8014aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014af0:	4b0b      	ldr	r3, [pc, #44]	; (8014b20 <vPortSetupTimerInterrupt+0x34>)
 8014af2:	2200      	movs	r2, #0
 8014af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014af6:	4b0b      	ldr	r3, [pc, #44]	; (8014b24 <vPortSetupTimerInterrupt+0x38>)
 8014af8:	2200      	movs	r2, #0
 8014afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014afc:	4b0a      	ldr	r3, [pc, #40]	; (8014b28 <vPortSetupTimerInterrupt+0x3c>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	4a0a      	ldr	r2, [pc, #40]	; (8014b2c <vPortSetupTimerInterrupt+0x40>)
 8014b02:	fba2 2303 	umull	r2, r3, r2, r3
 8014b06:	099b      	lsrs	r3, r3, #6
 8014b08:	4a09      	ldr	r2, [pc, #36]	; (8014b30 <vPortSetupTimerInterrupt+0x44>)
 8014b0a:	3b01      	subs	r3, #1
 8014b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014b0e:	4b04      	ldr	r3, [pc, #16]	; (8014b20 <vPortSetupTimerInterrupt+0x34>)
 8014b10:	2207      	movs	r2, #7
 8014b12:	601a      	str	r2, [r3, #0]
}
 8014b14:	bf00      	nop
 8014b16:	46bd      	mov	sp, r7
 8014b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1c:	4770      	bx	lr
 8014b1e:	bf00      	nop
 8014b20:	e000e010 	.word	0xe000e010
 8014b24:	e000e018 	.word	0xe000e018
 8014b28:	20000000 	.word	0x20000000
 8014b2c:	10624dd3 	.word	0x10624dd3
 8014b30:	e000e014 	.word	0xe000e014

08014b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014b44 <vPortEnableVFP+0x10>
 8014b38:	6801      	ldr	r1, [r0, #0]
 8014b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014b3e:	6001      	str	r1, [r0, #0]
 8014b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014b42:	bf00      	nop
 8014b44:	e000ed88 	.word	0xe000ed88

08014b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014b48:	b480      	push	{r7}
 8014b4a:	b085      	sub	sp, #20
 8014b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014b4e:	f3ef 8305 	mrs	r3, IPSR
 8014b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	2b0f      	cmp	r3, #15
 8014b58:	d914      	bls.n	8014b84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014b5a:	4a17      	ldr	r2, [pc, #92]	; (8014bb8 <vPortValidateInterruptPriority+0x70>)
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	4413      	add	r3, r2
 8014b60:	781b      	ldrb	r3, [r3, #0]
 8014b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014b64:	4b15      	ldr	r3, [pc, #84]	; (8014bbc <vPortValidateInterruptPriority+0x74>)
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	7afa      	ldrb	r2, [r7, #11]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d20a      	bcs.n	8014b84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b72:	f383 8811 	msr	BASEPRI, r3
 8014b76:	f3bf 8f6f 	isb	sy
 8014b7a:	f3bf 8f4f 	dsb	sy
 8014b7e:	607b      	str	r3, [r7, #4]
}
 8014b80:	bf00      	nop
 8014b82:	e7fe      	b.n	8014b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014b84:	4b0e      	ldr	r3, [pc, #56]	; (8014bc0 <vPortValidateInterruptPriority+0x78>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014b8c:	4b0d      	ldr	r3, [pc, #52]	; (8014bc4 <vPortValidateInterruptPriority+0x7c>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d90a      	bls.n	8014baa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b98:	f383 8811 	msr	BASEPRI, r3
 8014b9c:	f3bf 8f6f 	isb	sy
 8014ba0:	f3bf 8f4f 	dsb	sy
 8014ba4:	603b      	str	r3, [r7, #0]
}
 8014ba6:	bf00      	nop
 8014ba8:	e7fe      	b.n	8014ba8 <vPortValidateInterruptPriority+0x60>
	}
 8014baa:	bf00      	nop
 8014bac:	3714      	adds	r7, #20
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb4:	4770      	bx	lr
 8014bb6:	bf00      	nop
 8014bb8:	e000e3f0 	.word	0xe000e3f0
 8014bbc:	20000b08 	.word	0x20000b08
 8014bc0:	e000ed0c 	.word	0xe000ed0c
 8014bc4:	20000b0c 	.word	0x20000b0c

08014bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b08a      	sub	sp, #40	; 0x28
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014bd4:	f7ff f96e 	bl	8013eb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014bd8:	4b5b      	ldr	r3, [pc, #364]	; (8014d48 <pvPortMalloc+0x180>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d101      	bne.n	8014be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014be0:	f000 f920 	bl	8014e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014be4:	4b59      	ldr	r3, [pc, #356]	; (8014d4c <pvPortMalloc+0x184>)
 8014be6:	681a      	ldr	r2, [r3, #0]
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	4013      	ands	r3, r2
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	f040 8093 	bne.w	8014d18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d01d      	beq.n	8014c34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014bf8:	2208      	movs	r2, #8
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	f003 0307 	and.w	r3, r3, #7
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d014      	beq.n	8014c34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	f023 0307 	bic.w	r3, r3, #7
 8014c10:	3308      	adds	r3, #8
 8014c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f003 0307 	and.w	r3, r3, #7
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d00a      	beq.n	8014c34 <pvPortMalloc+0x6c>
	__asm volatile
 8014c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c22:	f383 8811 	msr	BASEPRI, r3
 8014c26:	f3bf 8f6f 	isb	sy
 8014c2a:	f3bf 8f4f 	dsb	sy
 8014c2e:	617b      	str	r3, [r7, #20]
}
 8014c30:	bf00      	nop
 8014c32:	e7fe      	b.n	8014c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d06e      	beq.n	8014d18 <pvPortMalloc+0x150>
 8014c3a:	4b45      	ldr	r3, [pc, #276]	; (8014d50 <pvPortMalloc+0x188>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d869      	bhi.n	8014d18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014c44:	4b43      	ldr	r3, [pc, #268]	; (8014d54 <pvPortMalloc+0x18c>)
 8014c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014c48:	4b42      	ldr	r3, [pc, #264]	; (8014d54 <pvPortMalloc+0x18c>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014c4e:	e004      	b.n	8014c5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	687a      	ldr	r2, [r7, #4]
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d903      	bls.n	8014c6c <pvPortMalloc+0xa4>
 8014c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d1f1      	bne.n	8014c50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014c6c:	4b36      	ldr	r3, [pc, #216]	; (8014d48 <pvPortMalloc+0x180>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d050      	beq.n	8014d18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014c76:	6a3b      	ldr	r3, [r7, #32]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	2208      	movs	r2, #8
 8014c7c:	4413      	add	r3, r2
 8014c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c82:	681a      	ldr	r2, [r3, #0]
 8014c84:	6a3b      	ldr	r3, [r7, #32]
 8014c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8a:	685a      	ldr	r2, [r3, #4]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	1ad2      	subs	r2, r2, r3
 8014c90:	2308      	movs	r3, #8
 8014c92:	005b      	lsls	r3, r3, #1
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d91f      	bls.n	8014cd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	4413      	add	r3, r2
 8014c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ca0:	69bb      	ldr	r3, [r7, #24]
 8014ca2:	f003 0307 	and.w	r3, r3, #7
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d00a      	beq.n	8014cc0 <pvPortMalloc+0xf8>
	__asm volatile
 8014caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cae:	f383 8811 	msr	BASEPRI, r3
 8014cb2:	f3bf 8f6f 	isb	sy
 8014cb6:	f3bf 8f4f 	dsb	sy
 8014cba:	613b      	str	r3, [r7, #16]
}
 8014cbc:	bf00      	nop
 8014cbe:	e7fe      	b.n	8014cbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc2:	685a      	ldr	r2, [r3, #4]
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	1ad2      	subs	r2, r2, r3
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cce:	687a      	ldr	r2, [r7, #4]
 8014cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014cd2:	69b8      	ldr	r0, [r7, #24]
 8014cd4:	f000 f908 	bl	8014ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014cd8:	4b1d      	ldr	r3, [pc, #116]	; (8014d50 <pvPortMalloc+0x188>)
 8014cda:	681a      	ldr	r2, [r3, #0]
 8014cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	1ad3      	subs	r3, r2, r3
 8014ce2:	4a1b      	ldr	r2, [pc, #108]	; (8014d50 <pvPortMalloc+0x188>)
 8014ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014ce6:	4b1a      	ldr	r3, [pc, #104]	; (8014d50 <pvPortMalloc+0x188>)
 8014ce8:	681a      	ldr	r2, [r3, #0]
 8014cea:	4b1b      	ldr	r3, [pc, #108]	; (8014d58 <pvPortMalloc+0x190>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	d203      	bcs.n	8014cfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014cf2:	4b17      	ldr	r3, [pc, #92]	; (8014d50 <pvPortMalloc+0x188>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	4a18      	ldr	r2, [pc, #96]	; (8014d58 <pvPortMalloc+0x190>)
 8014cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cfc:	685a      	ldr	r2, [r3, #4]
 8014cfe:	4b13      	ldr	r3, [pc, #76]	; (8014d4c <pvPortMalloc+0x184>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	431a      	orrs	r2, r3
 8014d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014d0e:	4b13      	ldr	r3, [pc, #76]	; (8014d5c <pvPortMalloc+0x194>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	3301      	adds	r3, #1
 8014d14:	4a11      	ldr	r2, [pc, #68]	; (8014d5c <pvPortMalloc+0x194>)
 8014d16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014d18:	f7ff f8da 	bl	8013ed0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d1c:	69fb      	ldr	r3, [r7, #28]
 8014d1e:	f003 0307 	and.w	r3, r3, #7
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d00a      	beq.n	8014d3c <pvPortMalloc+0x174>
	__asm volatile
 8014d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2a:	f383 8811 	msr	BASEPRI, r3
 8014d2e:	f3bf 8f6f 	isb	sy
 8014d32:	f3bf 8f4f 	dsb	sy
 8014d36:	60fb      	str	r3, [r7, #12]
}
 8014d38:	bf00      	nop
 8014d3a:	e7fe      	b.n	8014d3a <pvPortMalloc+0x172>
	return pvReturn;
 8014d3c:	69fb      	ldr	r3, [r7, #28]
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3728      	adds	r7, #40	; 0x28
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	bf00      	nop
 8014d48:	2000d318 	.word	0x2000d318
 8014d4c:	2000d32c 	.word	0x2000d32c
 8014d50:	2000d31c 	.word	0x2000d31c
 8014d54:	2000d310 	.word	0x2000d310
 8014d58:	2000d320 	.word	0x2000d320
 8014d5c:	2000d324 	.word	0x2000d324

08014d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b086      	sub	sp, #24
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d04d      	beq.n	8014e0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014d72:	2308      	movs	r3, #8
 8014d74:	425b      	negs	r3, r3
 8014d76:	697a      	ldr	r2, [r7, #20]
 8014d78:	4413      	add	r3, r2
 8014d7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014d7c:	697b      	ldr	r3, [r7, #20]
 8014d7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	685a      	ldr	r2, [r3, #4]
 8014d84:	4b24      	ldr	r3, [pc, #144]	; (8014e18 <vPortFree+0xb8>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	4013      	ands	r3, r2
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d10a      	bne.n	8014da4 <vPortFree+0x44>
	__asm volatile
 8014d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d92:	f383 8811 	msr	BASEPRI, r3
 8014d96:	f3bf 8f6f 	isb	sy
 8014d9a:	f3bf 8f4f 	dsb	sy
 8014d9e:	60fb      	str	r3, [r7, #12]
}
 8014da0:	bf00      	nop
 8014da2:	e7fe      	b.n	8014da2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d00a      	beq.n	8014dc2 <vPortFree+0x62>
	__asm volatile
 8014dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db0:	f383 8811 	msr	BASEPRI, r3
 8014db4:	f3bf 8f6f 	isb	sy
 8014db8:	f3bf 8f4f 	dsb	sy
 8014dbc:	60bb      	str	r3, [r7, #8]
}
 8014dbe:	bf00      	nop
 8014dc0:	e7fe      	b.n	8014dc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	685a      	ldr	r2, [r3, #4]
 8014dc6:	4b14      	ldr	r3, [pc, #80]	; (8014e18 <vPortFree+0xb8>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	4013      	ands	r3, r2
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d01e      	beq.n	8014e0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d11a      	bne.n	8014e0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014dd8:	693b      	ldr	r3, [r7, #16]
 8014dda:	685a      	ldr	r2, [r3, #4]
 8014ddc:	4b0e      	ldr	r3, [pc, #56]	; (8014e18 <vPortFree+0xb8>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	43db      	mvns	r3, r3
 8014de2:	401a      	ands	r2, r3
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014de8:	f7ff f864 	bl	8013eb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	685a      	ldr	r2, [r3, #4]
 8014df0:	4b0a      	ldr	r3, [pc, #40]	; (8014e1c <vPortFree+0xbc>)
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	4413      	add	r3, r2
 8014df6:	4a09      	ldr	r2, [pc, #36]	; (8014e1c <vPortFree+0xbc>)
 8014df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014dfa:	6938      	ldr	r0, [r7, #16]
 8014dfc:	f000 f874 	bl	8014ee8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014e00:	4b07      	ldr	r3, [pc, #28]	; (8014e20 <vPortFree+0xc0>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	3301      	adds	r3, #1
 8014e06:	4a06      	ldr	r2, [pc, #24]	; (8014e20 <vPortFree+0xc0>)
 8014e08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014e0a:	f7ff f861 	bl	8013ed0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014e0e:	bf00      	nop
 8014e10:	3718      	adds	r7, #24
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
 8014e16:	bf00      	nop
 8014e18:	2000d32c 	.word	0x2000d32c
 8014e1c:	2000d31c 	.word	0x2000d31c
 8014e20:	2000d328 	.word	0x2000d328

08014e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014e24:	b480      	push	{r7}
 8014e26:	b085      	sub	sp, #20
 8014e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014e2a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8014e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014e30:	4b27      	ldr	r3, [pc, #156]	; (8014ed0 <prvHeapInit+0xac>)
 8014e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	f003 0307 	and.w	r3, r3, #7
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d00c      	beq.n	8014e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	3307      	adds	r3, #7
 8014e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f023 0307 	bic.w	r3, r3, #7
 8014e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014e4c:	68ba      	ldr	r2, [r7, #8]
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	1ad3      	subs	r3, r2, r3
 8014e52:	4a1f      	ldr	r2, [pc, #124]	; (8014ed0 <prvHeapInit+0xac>)
 8014e54:	4413      	add	r3, r2
 8014e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014e5c:	4a1d      	ldr	r2, [pc, #116]	; (8014ed4 <prvHeapInit+0xb0>)
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014e62:	4b1c      	ldr	r3, [pc, #112]	; (8014ed4 <prvHeapInit+0xb0>)
 8014e64:	2200      	movs	r2, #0
 8014e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	68ba      	ldr	r2, [r7, #8]
 8014e6c:	4413      	add	r3, r2
 8014e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014e70:	2208      	movs	r2, #8
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	1a9b      	subs	r3, r3, r2
 8014e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	f023 0307 	bic.w	r3, r3, #7
 8014e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	4a15      	ldr	r2, [pc, #84]	; (8014ed8 <prvHeapInit+0xb4>)
 8014e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014e86:	4b14      	ldr	r3, [pc, #80]	; (8014ed8 <prvHeapInit+0xb4>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014e8e:	4b12      	ldr	r3, [pc, #72]	; (8014ed8 <prvHeapInit+0xb4>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	2200      	movs	r2, #0
 8014e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	68fa      	ldr	r2, [r7, #12]
 8014e9e:	1ad2      	subs	r2, r2, r3
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014ea4:	4b0c      	ldr	r3, [pc, #48]	; (8014ed8 <prvHeapInit+0xb4>)
 8014ea6:	681a      	ldr	r2, [r3, #0]
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	4a0a      	ldr	r2, [pc, #40]	; (8014edc <prvHeapInit+0xb8>)
 8014eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	685b      	ldr	r3, [r3, #4]
 8014eb8:	4a09      	ldr	r2, [pc, #36]	; (8014ee0 <prvHeapInit+0xbc>)
 8014eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014ebc:	4b09      	ldr	r3, [pc, #36]	; (8014ee4 <prvHeapInit+0xc0>)
 8014ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014ec2:	601a      	str	r2, [r3, #0]
}
 8014ec4:	bf00      	nop
 8014ec6:	3714      	adds	r7, #20
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ece:	4770      	bx	lr
 8014ed0:	20000b10 	.word	0x20000b10
 8014ed4:	2000d310 	.word	0x2000d310
 8014ed8:	2000d318 	.word	0x2000d318
 8014edc:	2000d320 	.word	0x2000d320
 8014ee0:	2000d31c 	.word	0x2000d31c
 8014ee4:	2000d32c 	.word	0x2000d32c

08014ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b085      	sub	sp, #20
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014ef0:	4b28      	ldr	r3, [pc, #160]	; (8014f94 <prvInsertBlockIntoFreeList+0xac>)
 8014ef2:	60fb      	str	r3, [r7, #12]
 8014ef4:	e002      	b.n	8014efc <prvInsertBlockIntoFreeList+0x14>
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	60fb      	str	r3, [r7, #12]
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	429a      	cmp	r2, r3
 8014f04:	d8f7      	bhi.n	8014ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	685b      	ldr	r3, [r3, #4]
 8014f0e:	68ba      	ldr	r2, [r7, #8]
 8014f10:	4413      	add	r3, r2
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d108      	bne.n	8014f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	685a      	ldr	r2, [r3, #4]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	685b      	ldr	r3, [r3, #4]
 8014f20:	441a      	add	r2, r3
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	68ba      	ldr	r2, [r7, #8]
 8014f34:	441a      	add	r2, r3
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d118      	bne.n	8014f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	681a      	ldr	r2, [r3, #0]
 8014f42:	4b15      	ldr	r3, [pc, #84]	; (8014f98 <prvInsertBlockIntoFreeList+0xb0>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d00d      	beq.n	8014f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	685a      	ldr	r2, [r3, #4]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	685b      	ldr	r3, [r3, #4]
 8014f54:	441a      	add	r2, r3
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	601a      	str	r2, [r3, #0]
 8014f64:	e008      	b.n	8014f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014f66:	4b0c      	ldr	r3, [pc, #48]	; (8014f98 <prvInsertBlockIntoFreeList+0xb0>)
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	601a      	str	r2, [r3, #0]
 8014f6e:	e003      	b.n	8014f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681a      	ldr	r2, [r3, #0]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014f78:	68fa      	ldr	r2, [r7, #12]
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d002      	beq.n	8014f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	687a      	ldr	r2, [r7, #4]
 8014f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014f86:	bf00      	nop
 8014f88:	3714      	adds	r7, #20
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop
 8014f94:	2000d310 	.word	0x2000d310
 8014f98:	2000d318 	.word	0x2000d318

08014f9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	4610      	mov	r0, r2
 8014fb4:	f7fd faed 	bl	8012592 <USBD_LL_SetupStage>
}
 8014fb8:	bf00      	nop
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	460b      	mov	r3, r1
 8014fca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014fd2:	78fa      	ldrb	r2, [r7, #3]
 8014fd4:	6879      	ldr	r1, [r7, #4]
 8014fd6:	4613      	mov	r3, r2
 8014fd8:	00db      	lsls	r3, r3, #3
 8014fda:	4413      	add	r3, r2
 8014fdc:	009b      	lsls	r3, r3, #2
 8014fde:	440b      	add	r3, r1
 8014fe0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	78fb      	ldrb	r3, [r7, #3]
 8014fe8:	4619      	mov	r1, r3
 8014fea:	f7fd fb27 	bl	801263c <USBD_LL_DataOutStage>
}
 8014fee:	bf00      	nop
 8014ff0:	3708      	adds	r7, #8
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}

08014ff6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ff6:	b580      	push	{r7, lr}
 8014ff8:	b082      	sub	sp, #8
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	6078      	str	r0, [r7, #4]
 8014ffe:	460b      	mov	r3, r1
 8015000:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015008:	78fa      	ldrb	r2, [r7, #3]
 801500a:	6879      	ldr	r1, [r7, #4]
 801500c:	4613      	mov	r3, r2
 801500e:	00db      	lsls	r3, r3, #3
 8015010:	4413      	add	r3, r2
 8015012:	009b      	lsls	r3, r3, #2
 8015014:	440b      	add	r3, r1
 8015016:	334c      	adds	r3, #76	; 0x4c
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	78fb      	ldrb	r3, [r7, #3]
 801501c:	4619      	mov	r1, r3
 801501e:	f7fd fbc0 	bl	80127a2 <USBD_LL_DataInStage>
}
 8015022:	bf00      	nop
 8015024:	3708      	adds	r7, #8
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}

0801502a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801502a:	b580      	push	{r7, lr}
 801502c:	b082      	sub	sp, #8
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015038:	4618      	mov	r0, r3
 801503a:	f7fd fcf4 	bl	8012a26 <USBD_LL_SOF>
}
 801503e:	bf00      	nop
 8015040:	3708      	adds	r7, #8
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}

08015046 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015046:	b580      	push	{r7, lr}
 8015048:	b084      	sub	sp, #16
 801504a:	af00      	add	r7, sp, #0
 801504c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801504e:	2301      	movs	r3, #1
 8015050:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	68db      	ldr	r3, [r3, #12]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d102      	bne.n	8015060 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801505a:	2300      	movs	r3, #0
 801505c:	73fb      	strb	r3, [r7, #15]
 801505e:	e008      	b.n	8015072 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	68db      	ldr	r3, [r3, #12]
 8015064:	2b02      	cmp	r3, #2
 8015066:	d102      	bne.n	801506e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015068:	2301      	movs	r3, #1
 801506a:	73fb      	strb	r3, [r7, #15]
 801506c:	e001      	b.n	8015072 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801506e:	f7ee fac7 	bl	8003600 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015078:	7bfa      	ldrb	r2, [r7, #15]
 801507a:	4611      	mov	r1, r2
 801507c:	4618      	mov	r0, r3
 801507e:	f7fd fc94 	bl	80129aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015088:	4618      	mov	r0, r3
 801508a:	f7fd fc3c 	bl	8012906 <USBD_LL_Reset>
}
 801508e:	bf00      	nop
 8015090:	3710      	adds	r7, #16
 8015092:	46bd      	mov	sp, r7
 8015094:	bd80      	pop	{r7, pc}
	...

08015098 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b082      	sub	sp, #8
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7fd fc8f 	bl	80129ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	6812      	ldr	r2, [r2, #0]
 80150ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80150be:	f043 0301 	orr.w	r3, r3, #1
 80150c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6a1b      	ldr	r3, [r3, #32]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d005      	beq.n	80150d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80150cc:	4b04      	ldr	r3, [pc, #16]	; (80150e0 <HAL_PCD_SuspendCallback+0x48>)
 80150ce:	691b      	ldr	r3, [r3, #16]
 80150d0:	4a03      	ldr	r2, [pc, #12]	; (80150e0 <HAL_PCD_SuspendCallback+0x48>)
 80150d2:	f043 0306 	orr.w	r3, r3, #6
 80150d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80150d8:	bf00      	nop
 80150da:	3708      	adds	r7, #8
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	e000ed00 	.word	0xe000ed00

080150e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7fd fc7f 	bl	80129f6 <USBD_LL_Resume>
}
 80150f8:	bf00      	nop
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	460b      	mov	r3, r1
 801510a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015112:	78fa      	ldrb	r2, [r7, #3]
 8015114:	4611      	mov	r1, r2
 8015116:	4618      	mov	r0, r3
 8015118:	f7fd fcd7 	bl	8012aca <USBD_LL_IsoOUTIncomplete>
}
 801511c:	bf00      	nop
 801511e:	3708      	adds	r7, #8
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}

08015124 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
 801512c:	460b      	mov	r3, r1
 801512e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015136:	78fa      	ldrb	r2, [r7, #3]
 8015138:	4611      	mov	r1, r2
 801513a:	4618      	mov	r0, r3
 801513c:	f7fd fc93 	bl	8012a66 <USBD_LL_IsoINIncomplete>
}
 8015140:	bf00      	nop
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015156:	4618      	mov	r0, r3
 8015158:	f7fd fce9 	bl	8012b2e <USBD_LL_DevConnected>
}
 801515c:	bf00      	nop
 801515e:	3708      	adds	r7, #8
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}

08015164 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b082      	sub	sp, #8
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015172:	4618      	mov	r0, r3
 8015174:	f7fd fce6 	bl	8012b44 <USBD_LL_DevDisconnected>
}
 8015178:	bf00      	nop
 801517a:	3708      	adds	r7, #8
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	4608      	mov	r0, r1
 801518a:	4611      	mov	r1, r2
 801518c:	461a      	mov	r2, r3
 801518e:	4603      	mov	r3, r0
 8015190:	70fb      	strb	r3, [r7, #3]
 8015192:	460b      	mov	r3, r1
 8015194:	70bb      	strb	r3, [r7, #2]
 8015196:	4613      	mov	r3, r2
 8015198:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801519a:	2300      	movs	r3, #0
 801519c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801519e:	2300      	movs	r3, #0
 80151a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80151a8:	78bb      	ldrb	r3, [r7, #2]
 80151aa:	883a      	ldrh	r2, [r7, #0]
 80151ac:	78f9      	ldrb	r1, [r7, #3]
 80151ae:	f7f6 fe9f 	bl	800bef0 <HAL_PCD_EP_Open>
 80151b2:	4603      	mov	r3, r0
 80151b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151b6:	7bfb      	ldrb	r3, [r7, #15]
 80151b8:	4618      	mov	r0, r3
 80151ba:	f000 f8d3 	bl	8015364 <USBD_Get_USB_Status>
 80151be:	4603      	mov	r3, r0
 80151c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3710      	adds	r7, #16
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b084      	sub	sp, #16
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	460b      	mov	r3, r1
 80151d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151d8:	2300      	movs	r3, #0
 80151da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151dc:	2300      	movs	r3, #0
 80151de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80151e6:	78fa      	ldrb	r2, [r7, #3]
 80151e8:	4611      	mov	r1, r2
 80151ea:	4618      	mov	r0, r3
 80151ec:	f7f6 ff7d 	bl	800c0ea <HAL_PCD_EP_SetStall>
 80151f0:	4603      	mov	r3, r0
 80151f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151f4:	7bfb      	ldrb	r3, [r7, #15]
 80151f6:	4618      	mov	r0, r3
 80151f8:	f000 f8b4 	bl	8015364 <USBD_Get_USB_Status>
 80151fc:	4603      	mov	r3, r0
 80151fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015200:	7bbb      	ldrb	r3, [r7, #14]
}
 8015202:	4618      	mov	r0, r3
 8015204:	3710      	adds	r7, #16
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}

0801520a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801520a:	b580      	push	{r7, lr}
 801520c:	b084      	sub	sp, #16
 801520e:	af00      	add	r7, sp, #0
 8015210:	6078      	str	r0, [r7, #4]
 8015212:	460b      	mov	r3, r1
 8015214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015216:	2300      	movs	r3, #0
 8015218:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801521a:	2300      	movs	r3, #0
 801521c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015224:	78fa      	ldrb	r2, [r7, #3]
 8015226:	4611      	mov	r1, r2
 8015228:	4618      	mov	r0, r3
 801522a:	f7f6 ffc2 	bl	800c1b2 <HAL_PCD_EP_ClrStall>
 801522e:	4603      	mov	r3, r0
 8015230:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015232:	7bfb      	ldrb	r3, [r7, #15]
 8015234:	4618      	mov	r0, r3
 8015236:	f000 f895 	bl	8015364 <USBD_Get_USB_Status>
 801523a:	4603      	mov	r3, r0
 801523c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801523e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015240:	4618      	mov	r0, r3
 8015242:	3710      	adds	r7, #16
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015248:	b480      	push	{r7}
 801524a:	b085      	sub	sp, #20
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	460b      	mov	r3, r1
 8015252:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801525a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801525c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015260:	2b00      	cmp	r3, #0
 8015262:	da0b      	bge.n	801527c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015264:	78fb      	ldrb	r3, [r7, #3]
 8015266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801526a:	68f9      	ldr	r1, [r7, #12]
 801526c:	4613      	mov	r3, r2
 801526e:	00db      	lsls	r3, r3, #3
 8015270:	4413      	add	r3, r2
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	440b      	add	r3, r1
 8015276:	333e      	adds	r3, #62	; 0x3e
 8015278:	781b      	ldrb	r3, [r3, #0]
 801527a:	e00b      	b.n	8015294 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801527c:	78fb      	ldrb	r3, [r7, #3]
 801527e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015282:	68f9      	ldr	r1, [r7, #12]
 8015284:	4613      	mov	r3, r2
 8015286:	00db      	lsls	r3, r3, #3
 8015288:	4413      	add	r3, r2
 801528a:	009b      	lsls	r3, r3, #2
 801528c:	440b      	add	r3, r1
 801528e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015292:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015294:	4618      	mov	r0, r3
 8015296:	3714      	adds	r7, #20
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b084      	sub	sp, #16
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	460b      	mov	r3, r1
 80152aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152ac:	2300      	movs	r3, #0
 80152ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152b0:	2300      	movs	r3, #0
 80152b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80152ba:	78fa      	ldrb	r2, [r7, #3]
 80152bc:	4611      	mov	r1, r2
 80152be:	4618      	mov	r0, r3
 80152c0:	f7f6 fdf1 	bl	800bea6 <HAL_PCD_SetAddress>
 80152c4:	4603      	mov	r3, r0
 80152c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152c8:	7bfb      	ldrb	r3, [r7, #15]
 80152ca:	4618      	mov	r0, r3
 80152cc:	f000 f84a 	bl	8015364 <USBD_Get_USB_Status>
 80152d0:	4603      	mov	r3, r0
 80152d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3710      	adds	r7, #16
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}

080152de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80152de:	b580      	push	{r7, lr}
 80152e0:	b086      	sub	sp, #24
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	60f8      	str	r0, [r7, #12]
 80152e6:	607a      	str	r2, [r7, #4]
 80152e8:	603b      	str	r3, [r7, #0]
 80152ea:	460b      	mov	r3, r1
 80152ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152ee:	2300      	movs	r3, #0
 80152f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152f2:	2300      	movs	r3, #0
 80152f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80152fc:	7af9      	ldrb	r1, [r7, #11]
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	687a      	ldr	r2, [r7, #4]
 8015302:	f7f6 fea8 	bl	800c056 <HAL_PCD_EP_Transmit>
 8015306:	4603      	mov	r3, r0
 8015308:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801530a:	7dfb      	ldrb	r3, [r7, #23]
 801530c:	4618      	mov	r0, r3
 801530e:	f000 f829 	bl	8015364 <USBD_Get_USB_Status>
 8015312:	4603      	mov	r3, r0
 8015314:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015316:	7dbb      	ldrb	r3, [r7, #22]
}
 8015318:	4618      	mov	r0, r3
 801531a:	3718      	adds	r7, #24
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b086      	sub	sp, #24
 8015324:	af00      	add	r7, sp, #0
 8015326:	60f8      	str	r0, [r7, #12]
 8015328:	607a      	str	r2, [r7, #4]
 801532a:	603b      	str	r3, [r7, #0]
 801532c:	460b      	mov	r3, r1
 801532e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015330:	2300      	movs	r3, #0
 8015332:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015334:	2300      	movs	r3, #0
 8015336:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801533e:	7af9      	ldrb	r1, [r7, #11]
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	f7f6 fe3c 	bl	800bfc0 <HAL_PCD_EP_Receive>
 8015348:	4603      	mov	r3, r0
 801534a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801534c:	7dfb      	ldrb	r3, [r7, #23]
 801534e:	4618      	mov	r0, r3
 8015350:	f000 f808 	bl	8015364 <USBD_Get_USB_Status>
 8015354:	4603      	mov	r3, r0
 8015356:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015358:	7dbb      	ldrb	r3, [r7, #22]
}
 801535a:	4618      	mov	r0, r3
 801535c:	3718      	adds	r7, #24
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
	...

08015364 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015364:	b480      	push	{r7}
 8015366:	b085      	sub	sp, #20
 8015368:	af00      	add	r7, sp, #0
 801536a:	4603      	mov	r3, r0
 801536c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801536e:	2300      	movs	r3, #0
 8015370:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015372:	79fb      	ldrb	r3, [r7, #7]
 8015374:	2b03      	cmp	r3, #3
 8015376:	d817      	bhi.n	80153a8 <USBD_Get_USB_Status+0x44>
 8015378:	a201      	add	r2, pc, #4	; (adr r2, 8015380 <USBD_Get_USB_Status+0x1c>)
 801537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801537e:	bf00      	nop
 8015380:	08015391 	.word	0x08015391
 8015384:	08015397 	.word	0x08015397
 8015388:	0801539d 	.word	0x0801539d
 801538c:	080153a3 	.word	0x080153a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015390:	2300      	movs	r3, #0
 8015392:	73fb      	strb	r3, [r7, #15]
    break;
 8015394:	e00b      	b.n	80153ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015396:	2303      	movs	r3, #3
 8015398:	73fb      	strb	r3, [r7, #15]
    break;
 801539a:	e008      	b.n	80153ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801539c:	2301      	movs	r3, #1
 801539e:	73fb      	strb	r3, [r7, #15]
    break;
 80153a0:	e005      	b.n	80153ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80153a2:	2303      	movs	r3, #3
 80153a4:	73fb      	strb	r3, [r7, #15]
    break;
 80153a6:	e002      	b.n	80153ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80153a8:	2303      	movs	r3, #3
 80153aa:	73fb      	strb	r3, [r7, #15]
    break;
 80153ac:	bf00      	nop
  }
  return usb_status;
 80153ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	3714      	adds	r7, #20
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr

080153bc <_ZdlPvj>:
 80153bc:	f000 b939 	b.w	8015632 <_ZdlPv>

080153c0 <_Znwj>:
 80153c0:	2801      	cmp	r0, #1
 80153c2:	bf38      	it	cc
 80153c4:	2001      	movcc	r0, #1
 80153c6:	b510      	push	{r4, lr}
 80153c8:	4604      	mov	r4, r0
 80153ca:	4620      	mov	r0, r4
 80153cc:	f001 ffb4 	bl	8017338 <malloc>
 80153d0:	b930      	cbnz	r0, 80153e0 <_Znwj+0x20>
 80153d2:	f000 f943 	bl	801565c <_ZSt15get_new_handlerv>
 80153d6:	b908      	cbnz	r0, 80153dc <_Znwj+0x1c>
 80153d8:	f001 ff78 	bl	80172cc <abort>
 80153dc:	4780      	blx	r0
 80153de:	e7f4      	b.n	80153ca <_Znwj+0xa>
 80153e0:	bd10      	pop	{r4, pc}

080153e2 <__cxa_pure_virtual>:
 80153e2:	b508      	push	{r3, lr}
 80153e4:	f000 f934 	bl	8015650 <_ZSt9terminatev>

080153e8 <_ZNSaIcEC1Ev>:
 80153e8:	4770      	bx	lr

080153ea <_ZNSaIcED1Ev>:
 80153ea:	4770      	bx	lr

080153ec <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80153ec:	68c3      	ldr	r3, [r0, #12]
 80153ee:	689a      	ldr	r2, [r3, #8]
 80153f0:	60c2      	str	r2, [r0, #12]
 80153f2:	b510      	push	{r4, lr}
 80153f4:	b102      	cbz	r2, 80153f8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80153f6:	6050      	str	r0, [r2, #4]
 80153f8:	6842      	ldr	r2, [r0, #4]
 80153fa:	605a      	str	r2, [r3, #4]
 80153fc:	680c      	ldr	r4, [r1, #0]
 80153fe:	4284      	cmp	r4, r0
 8015400:	d103      	bne.n	801540a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8015402:	600b      	str	r3, [r1, #0]
 8015404:	6098      	str	r0, [r3, #8]
 8015406:	6043      	str	r3, [r0, #4]
 8015408:	bd10      	pop	{r4, pc}
 801540a:	6891      	ldr	r1, [r2, #8]
 801540c:	4281      	cmp	r1, r0
 801540e:	bf0c      	ite	eq
 8015410:	6093      	streq	r3, [r2, #8]
 8015412:	60d3      	strne	r3, [r2, #12]
 8015414:	e7f6      	b.n	8015404 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08015416 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8015416:	6883      	ldr	r3, [r0, #8]
 8015418:	68da      	ldr	r2, [r3, #12]
 801541a:	6082      	str	r2, [r0, #8]
 801541c:	b510      	push	{r4, lr}
 801541e:	b102      	cbz	r2, 8015422 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8015420:	6050      	str	r0, [r2, #4]
 8015422:	6842      	ldr	r2, [r0, #4]
 8015424:	605a      	str	r2, [r3, #4]
 8015426:	680c      	ldr	r4, [r1, #0]
 8015428:	4284      	cmp	r4, r0
 801542a:	d103      	bne.n	8015434 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 801542c:	600b      	str	r3, [r1, #0]
 801542e:	60d8      	str	r0, [r3, #12]
 8015430:	6043      	str	r3, [r0, #4]
 8015432:	bd10      	pop	{r4, pc}
 8015434:	68d1      	ldr	r1, [r2, #12]
 8015436:	4281      	cmp	r1, r0
 8015438:	bf0c      	ite	eq
 801543a:	60d3      	streq	r3, [r2, #12]
 801543c:	6093      	strne	r3, [r2, #8]
 801543e:	e7f6      	b.n	801542e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08015440 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8015440:	68c3      	ldr	r3, [r0, #12]
 8015442:	b123      	cbz	r3, 801544e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8015444:	4618      	mov	r0, r3
 8015446:	689b      	ldr	r3, [r3, #8]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d1fb      	bne.n	8015444 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 801544c:	4770      	bx	lr
 801544e:	6843      	ldr	r3, [r0, #4]
 8015450:	68da      	ldr	r2, [r3, #12]
 8015452:	4282      	cmp	r2, r0
 8015454:	d102      	bne.n	801545c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8015456:	4618      	mov	r0, r3
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	e7f9      	b.n	8015450 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 801545c:	68c2      	ldr	r2, [r0, #12]
 801545e:	4293      	cmp	r3, r2
 8015460:	bf18      	it	ne
 8015462:	4618      	movne	r0, r3
 8015464:	4770      	bx	lr

08015466 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8015466:	7803      	ldrb	r3, [r0, #0]
 8015468:	b933      	cbnz	r3, 8015478 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 801546a:	6843      	ldr	r3, [r0, #4]
 801546c:	685b      	ldr	r3, [r3, #4]
 801546e:	4283      	cmp	r3, r0
 8015470:	d102      	bne.n	8015478 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8015472:	68db      	ldr	r3, [r3, #12]
 8015474:	4618      	mov	r0, r3
 8015476:	4770      	bx	lr
 8015478:	6882      	ldr	r2, [r0, #8]
 801547a:	b122      	cbz	r2, 8015486 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 801547c:	4613      	mov	r3, r2
 801547e:	68d2      	ldr	r2, [r2, #12]
 8015480:	2a00      	cmp	r2, #0
 8015482:	d1fb      	bne.n	801547c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8015484:	e7f6      	b.n	8015474 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8015486:	6843      	ldr	r3, [r0, #4]
 8015488:	689a      	ldr	r2, [r3, #8]
 801548a:	4282      	cmp	r2, r0
 801548c:	d1f2      	bne.n	8015474 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801548e:	4618      	mov	r0, r3
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	e7f9      	b.n	8015488 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08015494 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8015494:	f7ff bfd4 	b.w	8015440 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08015498 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8015498:	f7ff bfe5 	b.w	8015466 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0801549c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 801549c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154a0:	461e      	mov	r6, r3
 80154a2:	f103 0804 	add.w	r8, r3, #4
 80154a6:	2300      	movs	r3, #0
 80154a8:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80154ac:	460c      	mov	r4, r1
 80154ae:	604a      	str	r2, [r1, #4]
 80154b0:	700b      	strb	r3, [r1, #0]
 80154b2:	b300      	cbz	r0, 80154f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80154b4:	4296      	cmp	r6, r2
 80154b6:	6091      	str	r1, [r2, #8]
 80154b8:	d118      	bne.n	80154ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80154ba:	6071      	str	r1, [r6, #4]
 80154bc:	60f4      	str	r4, [r6, #12]
 80154be:	2701      	movs	r7, #1
 80154c0:	f04f 0900 	mov.w	r9, #0
 80154c4:	6873      	ldr	r3, [r6, #4]
 80154c6:	42a3      	cmp	r3, r4
 80154c8:	d03f      	beq.n	801554a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80154ca:	6860      	ldr	r0, [r4, #4]
 80154cc:	7802      	ldrb	r2, [r0, #0]
 80154ce:	2a00      	cmp	r2, #0
 80154d0:	d13b      	bne.n	801554a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80154d2:	6845      	ldr	r5, [r0, #4]
 80154d4:	68ab      	ldr	r3, [r5, #8]
 80154d6:	4298      	cmp	r0, r3
 80154d8:	d123      	bne.n	8015522 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80154da:	68eb      	ldr	r3, [r5, #12]
 80154dc:	b183      	cbz	r3, 8015500 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80154de:	781a      	ldrb	r2, [r3, #0]
 80154e0:	b972      	cbnz	r2, 8015500 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80154e2:	7007      	strb	r7, [r0, #0]
 80154e4:	701f      	strb	r7, [r3, #0]
 80154e6:	702a      	strb	r2, [r5, #0]
 80154e8:	462c      	mov	r4, r5
 80154ea:	e7eb      	b.n	80154c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 80154ec:	68b3      	ldr	r3, [r6, #8]
 80154ee:	4293      	cmp	r3, r2
 80154f0:	d1e5      	bne.n	80154be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80154f2:	60b1      	str	r1, [r6, #8]
 80154f4:	e7e3      	b.n	80154be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80154f6:	60d1      	str	r1, [r2, #12]
 80154f8:	68f3      	ldr	r3, [r6, #12]
 80154fa:	4293      	cmp	r3, r2
 80154fc:	d1df      	bne.n	80154be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80154fe:	e7dd      	b.n	80154bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8015500:	68c3      	ldr	r3, [r0, #12]
 8015502:	42a3      	cmp	r3, r4
 8015504:	d103      	bne.n	801550e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8015506:	4641      	mov	r1, r8
 8015508:	f7ff ff70 	bl	80153ec <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801550c:	4604      	mov	r4, r0
 801550e:	6863      	ldr	r3, [r4, #4]
 8015510:	4641      	mov	r1, r8
 8015512:	701f      	strb	r7, [r3, #0]
 8015514:	4628      	mov	r0, r5
 8015516:	f885 9000 	strb.w	r9, [r5]
 801551a:	f7ff ff7c 	bl	8015416 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801551e:	4625      	mov	r5, r4
 8015520:	e7e2      	b.n	80154e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8015522:	b113      	cbz	r3, 801552a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8015524:	781a      	ldrb	r2, [r3, #0]
 8015526:	2a00      	cmp	r2, #0
 8015528:	d0db      	beq.n	80154e2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 801552a:	6883      	ldr	r3, [r0, #8]
 801552c:	42a3      	cmp	r3, r4
 801552e:	d103      	bne.n	8015538 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8015530:	4641      	mov	r1, r8
 8015532:	f7ff ff70 	bl	8015416 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8015536:	4604      	mov	r4, r0
 8015538:	6863      	ldr	r3, [r4, #4]
 801553a:	4641      	mov	r1, r8
 801553c:	701f      	strb	r7, [r3, #0]
 801553e:	4628      	mov	r0, r5
 8015540:	f885 9000 	strb.w	r9, [r5]
 8015544:	f7ff ff52 	bl	80153ec <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8015548:	e7e9      	b.n	801551e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 801554a:	2201      	movs	r2, #1
 801554c:	701a      	strb	r2, [r3, #0]
 801554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015552 <_ZSt17__throw_bad_allocv>:
 8015552:	b508      	push	{r3, lr}
 8015554:	f001 feba 	bl	80172cc <abort>

08015558 <_ZSt20__throw_length_errorPKc>:
 8015558:	b508      	push	{r3, lr}
 801555a:	f001 feb7 	bl	80172cc <abort>
	...

08015560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8015560:	b508      	push	{r3, lr}
 8015562:	680b      	ldr	r3, [r1, #0]
 8015564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015568:	d302      	bcc.n	8015570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801556a:	480d      	ldr	r0, [pc, #52]	; (80155a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801556c:	f7ff fff4 	bl	8015558 <_ZSt20__throw_length_errorPKc>
 8015570:	4293      	cmp	r3, r2
 8015572:	d90b      	bls.n	801558c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015574:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015578:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801557c:	d206      	bcs.n	801558c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801557e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015582:	bf2a      	itet	cs
 8015584:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8015588:	6008      	strcc	r0, [r1, #0]
 801558a:	600b      	strcs	r3, [r1, #0]
 801558c:	6808      	ldr	r0, [r1, #0]
 801558e:	3001      	adds	r0, #1
 8015590:	d501      	bpl.n	8015596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8015592:	f7ff ffde 	bl	8015552 <_ZSt17__throw_bad_allocv>
 8015596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801559a:	f7ff bf11 	b.w	80153c0 <_Znwj>
 801559e:	bf00      	nop
 80155a0:	080179f8 	.word	0x080179f8

080155a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80155a4:	f850 3b08 	ldr.w	r3, [r0], #8
 80155a8:	4283      	cmp	r3, r0
 80155aa:	d002      	beq.n	80155b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80155ac:	4618      	mov	r0, r3
 80155ae:	f000 b840 	b.w	8015632 <_ZdlPv>
 80155b2:	4770      	bx	lr

080155b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80155b4:	460b      	mov	r3, r1
 80155b6:	2b01      	cmp	r3, #1
 80155b8:	b410      	push	{r4}
 80155ba:	4611      	mov	r1, r2
 80155bc:	4604      	mov	r4, r0
 80155be:	d103      	bne.n	80155c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80155c0:	7022      	strb	r2, [r4, #0]
 80155c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155c6:	4770      	bx	lr
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d0fa      	beq.n	80155c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80155cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155d0:	461a      	mov	r2, r3
 80155d2:	f001 bedb 	b.w	801738c <memset>

080155d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 80155d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155d8:	290f      	cmp	r1, #15
 80155da:	4604      	mov	r4, r0
 80155dc:	9101      	str	r1, [sp, #4]
 80155de:	4615      	mov	r5, r2
 80155e0:	d906      	bls.n	80155f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 80155e2:	2200      	movs	r2, #0
 80155e4:	a901      	add	r1, sp, #4
 80155e6:	f7ff ffbb 	bl	8015560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80155ea:	9b01      	ldr	r3, [sp, #4]
 80155ec:	6020      	str	r0, [r4, #0]
 80155ee:	60a3      	str	r3, [r4, #8]
 80155f0:	9901      	ldr	r1, [sp, #4]
 80155f2:	b119      	cbz	r1, 80155fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 80155f4:	6820      	ldr	r0, [r4, #0]
 80155f6:	462a      	mov	r2, r5
 80155f8:	f7ff ffdc 	bl	80155b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80155fc:	9b01      	ldr	r3, [sp, #4]
 80155fe:	6822      	ldr	r2, [r4, #0]
 8015600:	6063      	str	r3, [r4, #4]
 8015602:	2100      	movs	r1, #0
 8015604:	54d1      	strb	r1, [r2, r3]
 8015606:	b003      	add	sp, #12
 8015608:	bd30      	pop	{r4, r5, pc}

0801560a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 801560a:	b510      	push	{r4, lr}
 801560c:	f100 0308 	add.w	r3, r0, #8
 8015610:	4604      	mov	r4, r0
 8015612:	6003      	str	r3, [r0, #0]
 8015614:	f7ff ffdf 	bl	80155d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8015618:	4620      	mov	r0, r4
 801561a:	bd10      	pop	{r4, pc}

0801561c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801561c:	b510      	push	{r4, lr}
 801561e:	4604      	mov	r4, r0
 8015620:	f7ff ffc0 	bl	80155a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015624:	4620      	mov	r0, r4
 8015626:	bd10      	pop	{r4, pc}

08015628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8015628:	6800      	ldr	r0, [r0, #0]
 801562a:	4408      	add	r0, r1
 801562c:	4770      	bx	lr

0801562e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801562e:	6800      	ldr	r0, [r0, #0]
 8015630:	4770      	bx	lr

08015632 <_ZdlPv>:
 8015632:	f001 be89 	b.w	8017348 <free>

08015636 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015636:	b508      	push	{r3, lr}
 8015638:	4780      	blx	r0
 801563a:	f001 fe47 	bl	80172cc <abort>
	...

08015640 <_ZSt13get_terminatev>:
 8015640:	4b02      	ldr	r3, [pc, #8]	; (801564c <_ZSt13get_terminatev+0xc>)
 8015642:	6818      	ldr	r0, [r3, #0]
 8015644:	f3bf 8f5b 	dmb	ish
 8015648:	4770      	bx	lr
 801564a:	bf00      	nop
 801564c:	20000010 	.word	0x20000010

08015650 <_ZSt9terminatev>:
 8015650:	b508      	push	{r3, lr}
 8015652:	f7ff fff5 	bl	8015640 <_ZSt13get_terminatev>
 8015656:	f7ff ffee 	bl	8015636 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801565c <_ZSt15get_new_handlerv>:
 801565c:	4b02      	ldr	r3, [pc, #8]	; (8015668 <_ZSt15get_new_handlerv+0xc>)
 801565e:	6818      	ldr	r0, [r3, #0]
 8015660:	f3bf 8f5b 	dmb	ish
 8015664:	4770      	bx	lr
 8015666:	bf00      	nop
 8015668:	2000d83c 	.word	0x2000d83c

0801566c <tanf>:
 801566c:	ee10 3a10 	vmov	r3, s0
 8015670:	b507      	push	{r0, r1, r2, lr}
 8015672:	4a12      	ldr	r2, [pc, #72]	; (80156bc <tanf+0x50>)
 8015674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015678:	4293      	cmp	r3, r2
 801567a:	dc07      	bgt.n	801568c <tanf+0x20>
 801567c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80156c0 <tanf+0x54>
 8015680:	2001      	movs	r0, #1
 8015682:	b003      	add	sp, #12
 8015684:	f85d eb04 	ldr.w	lr, [sp], #4
 8015688:	f001 bae4 	b.w	8016c54 <__kernel_tanf>
 801568c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015690:	db04      	blt.n	801569c <tanf+0x30>
 8015692:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015696:	b003      	add	sp, #12
 8015698:	f85d fb04 	ldr.w	pc, [sp], #4
 801569c:	4668      	mov	r0, sp
 801569e:	f000 ff23 	bl	80164e8 <__ieee754_rem_pio2f>
 80156a2:	0040      	lsls	r0, r0, #1
 80156a4:	f000 0002 	and.w	r0, r0, #2
 80156a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80156ac:	ed9d 0a00 	vldr	s0, [sp]
 80156b0:	f1c0 0001 	rsb	r0, r0, #1
 80156b4:	f001 face 	bl	8016c54 <__kernel_tanf>
 80156b8:	e7ed      	b.n	8015696 <tanf+0x2a>
 80156ba:	bf00      	nop
 80156bc:	3f490fda 	.word	0x3f490fda
 80156c0:	00000000 	.word	0x00000000

080156c4 <pow>:
 80156c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156c6:	ed2d 8b02 	vpush	{d8}
 80156ca:	eeb0 8a40 	vmov.f32	s16, s0
 80156ce:	eef0 8a60 	vmov.f32	s17, s1
 80156d2:	ec55 4b11 	vmov	r4, r5, d1
 80156d6:	f000 f887 	bl	80157e8 <__ieee754_pow>
 80156da:	4622      	mov	r2, r4
 80156dc:	462b      	mov	r3, r5
 80156de:	4620      	mov	r0, r4
 80156e0:	4629      	mov	r1, r5
 80156e2:	ec57 6b10 	vmov	r6, r7, d0
 80156e6:	f7eb f9d1 	bl	8000a8c <__aeabi_dcmpun>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d13b      	bne.n	8015766 <pow+0xa2>
 80156ee:	ec51 0b18 	vmov	r0, r1, d8
 80156f2:	2200      	movs	r2, #0
 80156f4:	2300      	movs	r3, #0
 80156f6:	f7eb f997 	bl	8000a28 <__aeabi_dcmpeq>
 80156fa:	b1b8      	cbz	r0, 801572c <pow+0x68>
 80156fc:	2200      	movs	r2, #0
 80156fe:	2300      	movs	r3, #0
 8015700:	4620      	mov	r0, r4
 8015702:	4629      	mov	r1, r5
 8015704:	f7eb f990 	bl	8000a28 <__aeabi_dcmpeq>
 8015708:	2800      	cmp	r0, #0
 801570a:	d146      	bne.n	801579a <pow+0xd6>
 801570c:	ec45 4b10 	vmov	d0, r4, r5
 8015710:	f001 fbb9 	bl	8016e86 <finite>
 8015714:	b338      	cbz	r0, 8015766 <pow+0xa2>
 8015716:	2200      	movs	r2, #0
 8015718:	2300      	movs	r3, #0
 801571a:	4620      	mov	r0, r4
 801571c:	4629      	mov	r1, r5
 801571e:	f7eb f98d 	bl	8000a3c <__aeabi_dcmplt>
 8015722:	b300      	cbz	r0, 8015766 <pow+0xa2>
 8015724:	f001 fdde 	bl	80172e4 <__errno>
 8015728:	2322      	movs	r3, #34	; 0x22
 801572a:	e01b      	b.n	8015764 <pow+0xa0>
 801572c:	ec47 6b10 	vmov	d0, r6, r7
 8015730:	f001 fba9 	bl	8016e86 <finite>
 8015734:	b9e0      	cbnz	r0, 8015770 <pow+0xac>
 8015736:	eeb0 0a48 	vmov.f32	s0, s16
 801573a:	eef0 0a68 	vmov.f32	s1, s17
 801573e:	f001 fba2 	bl	8016e86 <finite>
 8015742:	b1a8      	cbz	r0, 8015770 <pow+0xac>
 8015744:	ec45 4b10 	vmov	d0, r4, r5
 8015748:	f001 fb9d 	bl	8016e86 <finite>
 801574c:	b180      	cbz	r0, 8015770 <pow+0xac>
 801574e:	4632      	mov	r2, r6
 8015750:	463b      	mov	r3, r7
 8015752:	4630      	mov	r0, r6
 8015754:	4639      	mov	r1, r7
 8015756:	f7eb f999 	bl	8000a8c <__aeabi_dcmpun>
 801575a:	2800      	cmp	r0, #0
 801575c:	d0e2      	beq.n	8015724 <pow+0x60>
 801575e:	f001 fdc1 	bl	80172e4 <__errno>
 8015762:	2321      	movs	r3, #33	; 0x21
 8015764:	6003      	str	r3, [r0, #0]
 8015766:	ecbd 8b02 	vpop	{d8}
 801576a:	ec47 6b10 	vmov	d0, r6, r7
 801576e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015770:	2200      	movs	r2, #0
 8015772:	2300      	movs	r3, #0
 8015774:	4630      	mov	r0, r6
 8015776:	4639      	mov	r1, r7
 8015778:	f7eb f956 	bl	8000a28 <__aeabi_dcmpeq>
 801577c:	2800      	cmp	r0, #0
 801577e:	d0f2      	beq.n	8015766 <pow+0xa2>
 8015780:	eeb0 0a48 	vmov.f32	s0, s16
 8015784:	eef0 0a68 	vmov.f32	s1, s17
 8015788:	f001 fb7d 	bl	8016e86 <finite>
 801578c:	2800      	cmp	r0, #0
 801578e:	d0ea      	beq.n	8015766 <pow+0xa2>
 8015790:	ec45 4b10 	vmov	d0, r4, r5
 8015794:	f001 fb77 	bl	8016e86 <finite>
 8015798:	e7c3      	b.n	8015722 <pow+0x5e>
 801579a:	4f01      	ldr	r7, [pc, #4]	; (80157a0 <pow+0xdc>)
 801579c:	2600      	movs	r6, #0
 801579e:	e7e2      	b.n	8015766 <pow+0xa2>
 80157a0:	3ff00000 	.word	0x3ff00000

080157a4 <atan2f>:
 80157a4:	f000 be00 	b.w	80163a8 <__ieee754_atan2f>

080157a8 <sqrtf>:
 80157a8:	b508      	push	{r3, lr}
 80157aa:	ed2d 8b02 	vpush	{d8}
 80157ae:	eeb0 8a40 	vmov.f32	s16, s0
 80157b2:	f000 ffd5 	bl	8016760 <__ieee754_sqrtf>
 80157b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80157ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157be:	d60c      	bvs.n	80157da <sqrtf+0x32>
 80157c0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80157e0 <sqrtf+0x38>
 80157c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80157c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157cc:	d505      	bpl.n	80157da <sqrtf+0x32>
 80157ce:	f001 fd89 	bl	80172e4 <__errno>
 80157d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80157d6:	2321      	movs	r3, #33	; 0x21
 80157d8:	6003      	str	r3, [r0, #0]
 80157da:	ecbd 8b02 	vpop	{d8}
 80157de:	bd08      	pop	{r3, pc}
	...

080157e8 <__ieee754_pow>:
 80157e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ec:	ed2d 8b06 	vpush	{d8-d10}
 80157f0:	b089      	sub	sp, #36	; 0x24
 80157f2:	ed8d 1b00 	vstr	d1, [sp]
 80157f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80157fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80157fe:	ea58 0102 	orrs.w	r1, r8, r2
 8015802:	ec57 6b10 	vmov	r6, r7, d0
 8015806:	d115      	bne.n	8015834 <__ieee754_pow+0x4c>
 8015808:	19b3      	adds	r3, r6, r6
 801580a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801580e:	4152      	adcs	r2, r2
 8015810:	4299      	cmp	r1, r3
 8015812:	4b89      	ldr	r3, [pc, #548]	; (8015a38 <__ieee754_pow+0x250>)
 8015814:	4193      	sbcs	r3, r2
 8015816:	f080 84d2 	bcs.w	80161be <__ieee754_pow+0x9d6>
 801581a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801581e:	4630      	mov	r0, r6
 8015820:	4639      	mov	r1, r7
 8015822:	f7ea fce3 	bl	80001ec <__adddf3>
 8015826:	ec41 0b10 	vmov	d0, r0, r1
 801582a:	b009      	add	sp, #36	; 0x24
 801582c:	ecbd 8b06 	vpop	{d8-d10}
 8015830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015834:	4b81      	ldr	r3, [pc, #516]	; (8015a3c <__ieee754_pow+0x254>)
 8015836:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801583a:	429c      	cmp	r4, r3
 801583c:	ee10 aa10 	vmov	sl, s0
 8015840:	463d      	mov	r5, r7
 8015842:	dc06      	bgt.n	8015852 <__ieee754_pow+0x6a>
 8015844:	d101      	bne.n	801584a <__ieee754_pow+0x62>
 8015846:	2e00      	cmp	r6, #0
 8015848:	d1e7      	bne.n	801581a <__ieee754_pow+0x32>
 801584a:	4598      	cmp	r8, r3
 801584c:	dc01      	bgt.n	8015852 <__ieee754_pow+0x6a>
 801584e:	d10f      	bne.n	8015870 <__ieee754_pow+0x88>
 8015850:	b172      	cbz	r2, 8015870 <__ieee754_pow+0x88>
 8015852:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8015856:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801585a:	ea55 050a 	orrs.w	r5, r5, sl
 801585e:	d1dc      	bne.n	801581a <__ieee754_pow+0x32>
 8015860:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015864:	18db      	adds	r3, r3, r3
 8015866:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801586a:	4152      	adcs	r2, r2
 801586c:	429d      	cmp	r5, r3
 801586e:	e7d0      	b.n	8015812 <__ieee754_pow+0x2a>
 8015870:	2d00      	cmp	r5, #0
 8015872:	da3b      	bge.n	80158ec <__ieee754_pow+0x104>
 8015874:	4b72      	ldr	r3, [pc, #456]	; (8015a40 <__ieee754_pow+0x258>)
 8015876:	4598      	cmp	r8, r3
 8015878:	dc51      	bgt.n	801591e <__ieee754_pow+0x136>
 801587a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801587e:	4598      	cmp	r8, r3
 8015880:	f340 84ac 	ble.w	80161dc <__ieee754_pow+0x9f4>
 8015884:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015888:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801588c:	2b14      	cmp	r3, #20
 801588e:	dd0f      	ble.n	80158b0 <__ieee754_pow+0xc8>
 8015890:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015894:	fa22 f103 	lsr.w	r1, r2, r3
 8015898:	fa01 f303 	lsl.w	r3, r1, r3
 801589c:	4293      	cmp	r3, r2
 801589e:	f040 849d 	bne.w	80161dc <__ieee754_pow+0x9f4>
 80158a2:	f001 0101 	and.w	r1, r1, #1
 80158a6:	f1c1 0302 	rsb	r3, r1, #2
 80158aa:	9304      	str	r3, [sp, #16]
 80158ac:	b182      	cbz	r2, 80158d0 <__ieee754_pow+0xe8>
 80158ae:	e05f      	b.n	8015970 <__ieee754_pow+0x188>
 80158b0:	2a00      	cmp	r2, #0
 80158b2:	d15b      	bne.n	801596c <__ieee754_pow+0x184>
 80158b4:	f1c3 0314 	rsb	r3, r3, #20
 80158b8:	fa48 f103 	asr.w	r1, r8, r3
 80158bc:	fa01 f303 	lsl.w	r3, r1, r3
 80158c0:	4543      	cmp	r3, r8
 80158c2:	f040 8488 	bne.w	80161d6 <__ieee754_pow+0x9ee>
 80158c6:	f001 0101 	and.w	r1, r1, #1
 80158ca:	f1c1 0302 	rsb	r3, r1, #2
 80158ce:	9304      	str	r3, [sp, #16]
 80158d0:	4b5c      	ldr	r3, [pc, #368]	; (8015a44 <__ieee754_pow+0x25c>)
 80158d2:	4598      	cmp	r8, r3
 80158d4:	d132      	bne.n	801593c <__ieee754_pow+0x154>
 80158d6:	f1b9 0f00 	cmp.w	r9, #0
 80158da:	f280 8478 	bge.w	80161ce <__ieee754_pow+0x9e6>
 80158de:	4959      	ldr	r1, [pc, #356]	; (8015a44 <__ieee754_pow+0x25c>)
 80158e0:	4632      	mov	r2, r6
 80158e2:	463b      	mov	r3, r7
 80158e4:	2000      	movs	r0, #0
 80158e6:	f7ea ff61 	bl	80007ac <__aeabi_ddiv>
 80158ea:	e79c      	b.n	8015826 <__ieee754_pow+0x3e>
 80158ec:	2300      	movs	r3, #0
 80158ee:	9304      	str	r3, [sp, #16]
 80158f0:	2a00      	cmp	r2, #0
 80158f2:	d13d      	bne.n	8015970 <__ieee754_pow+0x188>
 80158f4:	4b51      	ldr	r3, [pc, #324]	; (8015a3c <__ieee754_pow+0x254>)
 80158f6:	4598      	cmp	r8, r3
 80158f8:	d1ea      	bne.n	80158d0 <__ieee754_pow+0xe8>
 80158fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80158fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015902:	ea53 030a 	orrs.w	r3, r3, sl
 8015906:	f000 845a 	beq.w	80161be <__ieee754_pow+0x9d6>
 801590a:	4b4f      	ldr	r3, [pc, #316]	; (8015a48 <__ieee754_pow+0x260>)
 801590c:	429c      	cmp	r4, r3
 801590e:	dd08      	ble.n	8015922 <__ieee754_pow+0x13a>
 8015910:	f1b9 0f00 	cmp.w	r9, #0
 8015914:	f2c0 8457 	blt.w	80161c6 <__ieee754_pow+0x9de>
 8015918:	e9dd 0100 	ldrd	r0, r1, [sp]
 801591c:	e783      	b.n	8015826 <__ieee754_pow+0x3e>
 801591e:	2302      	movs	r3, #2
 8015920:	e7e5      	b.n	80158ee <__ieee754_pow+0x106>
 8015922:	f1b9 0f00 	cmp.w	r9, #0
 8015926:	f04f 0000 	mov.w	r0, #0
 801592a:	f04f 0100 	mov.w	r1, #0
 801592e:	f6bf af7a 	bge.w	8015826 <__ieee754_pow+0x3e>
 8015932:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015936:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801593a:	e774      	b.n	8015826 <__ieee754_pow+0x3e>
 801593c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015940:	d106      	bne.n	8015950 <__ieee754_pow+0x168>
 8015942:	4632      	mov	r2, r6
 8015944:	463b      	mov	r3, r7
 8015946:	4630      	mov	r0, r6
 8015948:	4639      	mov	r1, r7
 801594a:	f7ea fe05 	bl	8000558 <__aeabi_dmul>
 801594e:	e76a      	b.n	8015826 <__ieee754_pow+0x3e>
 8015950:	4b3e      	ldr	r3, [pc, #248]	; (8015a4c <__ieee754_pow+0x264>)
 8015952:	4599      	cmp	r9, r3
 8015954:	d10c      	bne.n	8015970 <__ieee754_pow+0x188>
 8015956:	2d00      	cmp	r5, #0
 8015958:	db0a      	blt.n	8015970 <__ieee754_pow+0x188>
 801595a:	ec47 6b10 	vmov	d0, r6, r7
 801595e:	b009      	add	sp, #36	; 0x24
 8015960:	ecbd 8b06 	vpop	{d8-d10}
 8015964:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015968:	f000 bc6c 	b.w	8016244 <__ieee754_sqrt>
 801596c:	2300      	movs	r3, #0
 801596e:	9304      	str	r3, [sp, #16]
 8015970:	ec47 6b10 	vmov	d0, r6, r7
 8015974:	f001 fa7e 	bl	8016e74 <fabs>
 8015978:	ec51 0b10 	vmov	r0, r1, d0
 801597c:	f1ba 0f00 	cmp.w	sl, #0
 8015980:	d129      	bne.n	80159d6 <__ieee754_pow+0x1ee>
 8015982:	b124      	cbz	r4, 801598e <__ieee754_pow+0x1a6>
 8015984:	4b2f      	ldr	r3, [pc, #188]	; (8015a44 <__ieee754_pow+0x25c>)
 8015986:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801598a:	429a      	cmp	r2, r3
 801598c:	d123      	bne.n	80159d6 <__ieee754_pow+0x1ee>
 801598e:	f1b9 0f00 	cmp.w	r9, #0
 8015992:	da05      	bge.n	80159a0 <__ieee754_pow+0x1b8>
 8015994:	4602      	mov	r2, r0
 8015996:	460b      	mov	r3, r1
 8015998:	2000      	movs	r0, #0
 801599a:	492a      	ldr	r1, [pc, #168]	; (8015a44 <__ieee754_pow+0x25c>)
 801599c:	f7ea ff06 	bl	80007ac <__aeabi_ddiv>
 80159a0:	2d00      	cmp	r5, #0
 80159a2:	f6bf af40 	bge.w	8015826 <__ieee754_pow+0x3e>
 80159a6:	9b04      	ldr	r3, [sp, #16]
 80159a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80159ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80159b0:	4323      	orrs	r3, r4
 80159b2:	d108      	bne.n	80159c6 <__ieee754_pow+0x1de>
 80159b4:	4602      	mov	r2, r0
 80159b6:	460b      	mov	r3, r1
 80159b8:	4610      	mov	r0, r2
 80159ba:	4619      	mov	r1, r3
 80159bc:	f7ea fc14 	bl	80001e8 <__aeabi_dsub>
 80159c0:	4602      	mov	r2, r0
 80159c2:	460b      	mov	r3, r1
 80159c4:	e78f      	b.n	80158e6 <__ieee754_pow+0xfe>
 80159c6:	9b04      	ldr	r3, [sp, #16]
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	f47f af2c 	bne.w	8015826 <__ieee754_pow+0x3e>
 80159ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80159d2:	4619      	mov	r1, r3
 80159d4:	e727      	b.n	8015826 <__ieee754_pow+0x3e>
 80159d6:	0feb      	lsrs	r3, r5, #31
 80159d8:	3b01      	subs	r3, #1
 80159da:	9306      	str	r3, [sp, #24]
 80159dc:	9a06      	ldr	r2, [sp, #24]
 80159de:	9b04      	ldr	r3, [sp, #16]
 80159e0:	4313      	orrs	r3, r2
 80159e2:	d102      	bne.n	80159ea <__ieee754_pow+0x202>
 80159e4:	4632      	mov	r2, r6
 80159e6:	463b      	mov	r3, r7
 80159e8:	e7e6      	b.n	80159b8 <__ieee754_pow+0x1d0>
 80159ea:	4b19      	ldr	r3, [pc, #100]	; (8015a50 <__ieee754_pow+0x268>)
 80159ec:	4598      	cmp	r8, r3
 80159ee:	f340 80fb 	ble.w	8015be8 <__ieee754_pow+0x400>
 80159f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80159f6:	4598      	cmp	r8, r3
 80159f8:	4b13      	ldr	r3, [pc, #76]	; (8015a48 <__ieee754_pow+0x260>)
 80159fa:	dd0c      	ble.n	8015a16 <__ieee754_pow+0x22e>
 80159fc:	429c      	cmp	r4, r3
 80159fe:	dc0f      	bgt.n	8015a20 <__ieee754_pow+0x238>
 8015a00:	f1b9 0f00 	cmp.w	r9, #0
 8015a04:	da0f      	bge.n	8015a26 <__ieee754_pow+0x23e>
 8015a06:	2000      	movs	r0, #0
 8015a08:	b009      	add	sp, #36	; 0x24
 8015a0a:	ecbd 8b06 	vpop	{d8-d10}
 8015a0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a12:	f001 ba26 	b.w	8016e62 <__math_oflow>
 8015a16:	429c      	cmp	r4, r3
 8015a18:	dbf2      	blt.n	8015a00 <__ieee754_pow+0x218>
 8015a1a:	4b0a      	ldr	r3, [pc, #40]	; (8015a44 <__ieee754_pow+0x25c>)
 8015a1c:	429c      	cmp	r4, r3
 8015a1e:	dd19      	ble.n	8015a54 <__ieee754_pow+0x26c>
 8015a20:	f1b9 0f00 	cmp.w	r9, #0
 8015a24:	dcef      	bgt.n	8015a06 <__ieee754_pow+0x21e>
 8015a26:	2000      	movs	r0, #0
 8015a28:	b009      	add	sp, #36	; 0x24
 8015a2a:	ecbd 8b06 	vpop	{d8-d10}
 8015a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a32:	f001 ba0d 	b.w	8016e50 <__math_uflow>
 8015a36:	bf00      	nop
 8015a38:	fff00000 	.word	0xfff00000
 8015a3c:	7ff00000 	.word	0x7ff00000
 8015a40:	433fffff 	.word	0x433fffff
 8015a44:	3ff00000 	.word	0x3ff00000
 8015a48:	3fefffff 	.word	0x3fefffff
 8015a4c:	3fe00000 	.word	0x3fe00000
 8015a50:	41e00000 	.word	0x41e00000
 8015a54:	4b60      	ldr	r3, [pc, #384]	; (8015bd8 <__ieee754_pow+0x3f0>)
 8015a56:	2200      	movs	r2, #0
 8015a58:	f7ea fbc6 	bl	80001e8 <__aeabi_dsub>
 8015a5c:	a354      	add	r3, pc, #336	; (adr r3, 8015bb0 <__ieee754_pow+0x3c8>)
 8015a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a62:	4604      	mov	r4, r0
 8015a64:	460d      	mov	r5, r1
 8015a66:	f7ea fd77 	bl	8000558 <__aeabi_dmul>
 8015a6a:	a353      	add	r3, pc, #332	; (adr r3, 8015bb8 <__ieee754_pow+0x3d0>)
 8015a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a70:	4606      	mov	r6, r0
 8015a72:	460f      	mov	r7, r1
 8015a74:	4620      	mov	r0, r4
 8015a76:	4629      	mov	r1, r5
 8015a78:	f7ea fd6e 	bl	8000558 <__aeabi_dmul>
 8015a7c:	4b57      	ldr	r3, [pc, #348]	; (8015bdc <__ieee754_pow+0x3f4>)
 8015a7e:	4682      	mov	sl, r0
 8015a80:	468b      	mov	fp, r1
 8015a82:	2200      	movs	r2, #0
 8015a84:	4620      	mov	r0, r4
 8015a86:	4629      	mov	r1, r5
 8015a88:	f7ea fd66 	bl	8000558 <__aeabi_dmul>
 8015a8c:	4602      	mov	r2, r0
 8015a8e:	460b      	mov	r3, r1
 8015a90:	a14b      	add	r1, pc, #300	; (adr r1, 8015bc0 <__ieee754_pow+0x3d8>)
 8015a92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a96:	f7ea fba7 	bl	80001e8 <__aeabi_dsub>
 8015a9a:	4622      	mov	r2, r4
 8015a9c:	462b      	mov	r3, r5
 8015a9e:	f7ea fd5b 	bl	8000558 <__aeabi_dmul>
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	460b      	mov	r3, r1
 8015aa6:	2000      	movs	r0, #0
 8015aa8:	494d      	ldr	r1, [pc, #308]	; (8015be0 <__ieee754_pow+0x3f8>)
 8015aaa:	f7ea fb9d 	bl	80001e8 <__aeabi_dsub>
 8015aae:	4622      	mov	r2, r4
 8015ab0:	4680      	mov	r8, r0
 8015ab2:	4689      	mov	r9, r1
 8015ab4:	462b      	mov	r3, r5
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	4629      	mov	r1, r5
 8015aba:	f7ea fd4d 	bl	8000558 <__aeabi_dmul>
 8015abe:	4602      	mov	r2, r0
 8015ac0:	460b      	mov	r3, r1
 8015ac2:	4640      	mov	r0, r8
 8015ac4:	4649      	mov	r1, r9
 8015ac6:	f7ea fd47 	bl	8000558 <__aeabi_dmul>
 8015aca:	a33f      	add	r3, pc, #252	; (adr r3, 8015bc8 <__ieee754_pow+0x3e0>)
 8015acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad0:	f7ea fd42 	bl	8000558 <__aeabi_dmul>
 8015ad4:	4602      	mov	r2, r0
 8015ad6:	460b      	mov	r3, r1
 8015ad8:	4650      	mov	r0, sl
 8015ada:	4659      	mov	r1, fp
 8015adc:	f7ea fb84 	bl	80001e8 <__aeabi_dsub>
 8015ae0:	4602      	mov	r2, r0
 8015ae2:	460b      	mov	r3, r1
 8015ae4:	4680      	mov	r8, r0
 8015ae6:	4689      	mov	r9, r1
 8015ae8:	4630      	mov	r0, r6
 8015aea:	4639      	mov	r1, r7
 8015aec:	f7ea fb7e 	bl	80001ec <__adddf3>
 8015af0:	2000      	movs	r0, #0
 8015af2:	4632      	mov	r2, r6
 8015af4:	463b      	mov	r3, r7
 8015af6:	4604      	mov	r4, r0
 8015af8:	460d      	mov	r5, r1
 8015afa:	f7ea fb75 	bl	80001e8 <__aeabi_dsub>
 8015afe:	4602      	mov	r2, r0
 8015b00:	460b      	mov	r3, r1
 8015b02:	4640      	mov	r0, r8
 8015b04:	4649      	mov	r1, r9
 8015b06:	f7ea fb6f 	bl	80001e8 <__aeabi_dsub>
 8015b0a:	9b04      	ldr	r3, [sp, #16]
 8015b0c:	9a06      	ldr	r2, [sp, #24]
 8015b0e:	3b01      	subs	r3, #1
 8015b10:	4313      	orrs	r3, r2
 8015b12:	4682      	mov	sl, r0
 8015b14:	468b      	mov	fp, r1
 8015b16:	f040 81e7 	bne.w	8015ee8 <__ieee754_pow+0x700>
 8015b1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8015bd0 <__ieee754_pow+0x3e8>
 8015b1e:	eeb0 8a47 	vmov.f32	s16, s14
 8015b22:	eef0 8a67 	vmov.f32	s17, s15
 8015b26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015b2a:	2600      	movs	r6, #0
 8015b2c:	4632      	mov	r2, r6
 8015b2e:	463b      	mov	r3, r7
 8015b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b34:	f7ea fb58 	bl	80001e8 <__aeabi_dsub>
 8015b38:	4622      	mov	r2, r4
 8015b3a:	462b      	mov	r3, r5
 8015b3c:	f7ea fd0c 	bl	8000558 <__aeabi_dmul>
 8015b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b44:	4680      	mov	r8, r0
 8015b46:	4689      	mov	r9, r1
 8015b48:	4650      	mov	r0, sl
 8015b4a:	4659      	mov	r1, fp
 8015b4c:	f7ea fd04 	bl	8000558 <__aeabi_dmul>
 8015b50:	4602      	mov	r2, r0
 8015b52:	460b      	mov	r3, r1
 8015b54:	4640      	mov	r0, r8
 8015b56:	4649      	mov	r1, r9
 8015b58:	f7ea fb48 	bl	80001ec <__adddf3>
 8015b5c:	4632      	mov	r2, r6
 8015b5e:	463b      	mov	r3, r7
 8015b60:	4680      	mov	r8, r0
 8015b62:	4689      	mov	r9, r1
 8015b64:	4620      	mov	r0, r4
 8015b66:	4629      	mov	r1, r5
 8015b68:	f7ea fcf6 	bl	8000558 <__aeabi_dmul>
 8015b6c:	460b      	mov	r3, r1
 8015b6e:	4604      	mov	r4, r0
 8015b70:	460d      	mov	r5, r1
 8015b72:	4602      	mov	r2, r0
 8015b74:	4649      	mov	r1, r9
 8015b76:	4640      	mov	r0, r8
 8015b78:	f7ea fb38 	bl	80001ec <__adddf3>
 8015b7c:	4b19      	ldr	r3, [pc, #100]	; (8015be4 <__ieee754_pow+0x3fc>)
 8015b7e:	4299      	cmp	r1, r3
 8015b80:	ec45 4b19 	vmov	d9, r4, r5
 8015b84:	4606      	mov	r6, r0
 8015b86:	460f      	mov	r7, r1
 8015b88:	468b      	mov	fp, r1
 8015b8a:	f340 82f1 	ble.w	8016170 <__ieee754_pow+0x988>
 8015b8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015b92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015b96:	4303      	orrs	r3, r0
 8015b98:	f000 81e4 	beq.w	8015f64 <__ieee754_pow+0x77c>
 8015b9c:	ec51 0b18 	vmov	r0, r1, d8
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	f7ea ff4a 	bl	8000a3c <__aeabi_dcmplt>
 8015ba8:	3800      	subs	r0, #0
 8015baa:	bf18      	it	ne
 8015bac:	2001      	movne	r0, #1
 8015bae:	e72b      	b.n	8015a08 <__ieee754_pow+0x220>
 8015bb0:	60000000 	.word	0x60000000
 8015bb4:	3ff71547 	.word	0x3ff71547
 8015bb8:	f85ddf44 	.word	0xf85ddf44
 8015bbc:	3e54ae0b 	.word	0x3e54ae0b
 8015bc0:	55555555 	.word	0x55555555
 8015bc4:	3fd55555 	.word	0x3fd55555
 8015bc8:	652b82fe 	.word	0x652b82fe
 8015bcc:	3ff71547 	.word	0x3ff71547
 8015bd0:	00000000 	.word	0x00000000
 8015bd4:	bff00000 	.word	0xbff00000
 8015bd8:	3ff00000 	.word	0x3ff00000
 8015bdc:	3fd00000 	.word	0x3fd00000
 8015be0:	3fe00000 	.word	0x3fe00000
 8015be4:	408fffff 	.word	0x408fffff
 8015be8:	4bd5      	ldr	r3, [pc, #852]	; (8015f40 <__ieee754_pow+0x758>)
 8015bea:	402b      	ands	r3, r5
 8015bec:	2200      	movs	r2, #0
 8015bee:	b92b      	cbnz	r3, 8015bfc <__ieee754_pow+0x414>
 8015bf0:	4bd4      	ldr	r3, [pc, #848]	; (8015f44 <__ieee754_pow+0x75c>)
 8015bf2:	f7ea fcb1 	bl	8000558 <__aeabi_dmul>
 8015bf6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8015bfa:	460c      	mov	r4, r1
 8015bfc:	1523      	asrs	r3, r4, #20
 8015bfe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015c02:	4413      	add	r3, r2
 8015c04:	9305      	str	r3, [sp, #20]
 8015c06:	4bd0      	ldr	r3, [pc, #832]	; (8015f48 <__ieee754_pow+0x760>)
 8015c08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015c0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015c10:	429c      	cmp	r4, r3
 8015c12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015c16:	dd08      	ble.n	8015c2a <__ieee754_pow+0x442>
 8015c18:	4bcc      	ldr	r3, [pc, #816]	; (8015f4c <__ieee754_pow+0x764>)
 8015c1a:	429c      	cmp	r4, r3
 8015c1c:	f340 8162 	ble.w	8015ee4 <__ieee754_pow+0x6fc>
 8015c20:	9b05      	ldr	r3, [sp, #20]
 8015c22:	3301      	adds	r3, #1
 8015c24:	9305      	str	r3, [sp, #20]
 8015c26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8015c2a:	2400      	movs	r4, #0
 8015c2c:	00e3      	lsls	r3, r4, #3
 8015c2e:	9307      	str	r3, [sp, #28]
 8015c30:	4bc7      	ldr	r3, [pc, #796]	; (8015f50 <__ieee754_pow+0x768>)
 8015c32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015c36:	ed93 7b00 	vldr	d7, [r3]
 8015c3a:	4629      	mov	r1, r5
 8015c3c:	ec53 2b17 	vmov	r2, r3, d7
 8015c40:	eeb0 9a47 	vmov.f32	s18, s14
 8015c44:	eef0 9a67 	vmov.f32	s19, s15
 8015c48:	4682      	mov	sl, r0
 8015c4a:	f7ea facd 	bl	80001e8 <__aeabi_dsub>
 8015c4e:	4652      	mov	r2, sl
 8015c50:	4606      	mov	r6, r0
 8015c52:	460f      	mov	r7, r1
 8015c54:	462b      	mov	r3, r5
 8015c56:	ec51 0b19 	vmov	r0, r1, d9
 8015c5a:	f7ea fac7 	bl	80001ec <__adddf3>
 8015c5e:	4602      	mov	r2, r0
 8015c60:	460b      	mov	r3, r1
 8015c62:	2000      	movs	r0, #0
 8015c64:	49bb      	ldr	r1, [pc, #748]	; (8015f54 <__ieee754_pow+0x76c>)
 8015c66:	f7ea fda1 	bl	80007ac <__aeabi_ddiv>
 8015c6a:	ec41 0b1a 	vmov	d10, r0, r1
 8015c6e:	4602      	mov	r2, r0
 8015c70:	460b      	mov	r3, r1
 8015c72:	4630      	mov	r0, r6
 8015c74:	4639      	mov	r1, r7
 8015c76:	f7ea fc6f 	bl	8000558 <__aeabi_dmul>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c80:	9302      	str	r3, [sp, #8]
 8015c82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015c86:	46ab      	mov	fp, r5
 8015c88:	106d      	asrs	r5, r5, #1
 8015c8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015c8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015c92:	ec41 0b18 	vmov	d8, r0, r1
 8015c96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	4640      	mov	r0, r8
 8015c9e:	4649      	mov	r1, r9
 8015ca0:	4614      	mov	r4, r2
 8015ca2:	461d      	mov	r5, r3
 8015ca4:	f7ea fc58 	bl	8000558 <__aeabi_dmul>
 8015ca8:	4602      	mov	r2, r0
 8015caa:	460b      	mov	r3, r1
 8015cac:	4630      	mov	r0, r6
 8015cae:	4639      	mov	r1, r7
 8015cb0:	f7ea fa9a 	bl	80001e8 <__aeabi_dsub>
 8015cb4:	ec53 2b19 	vmov	r2, r3, d9
 8015cb8:	4606      	mov	r6, r0
 8015cba:	460f      	mov	r7, r1
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	f7ea fa92 	bl	80001e8 <__aeabi_dsub>
 8015cc4:	4602      	mov	r2, r0
 8015cc6:	460b      	mov	r3, r1
 8015cc8:	4650      	mov	r0, sl
 8015cca:	4659      	mov	r1, fp
 8015ccc:	f7ea fa8c 	bl	80001e8 <__aeabi_dsub>
 8015cd0:	4642      	mov	r2, r8
 8015cd2:	464b      	mov	r3, r9
 8015cd4:	f7ea fc40 	bl	8000558 <__aeabi_dmul>
 8015cd8:	4602      	mov	r2, r0
 8015cda:	460b      	mov	r3, r1
 8015cdc:	4630      	mov	r0, r6
 8015cde:	4639      	mov	r1, r7
 8015ce0:	f7ea fa82 	bl	80001e8 <__aeabi_dsub>
 8015ce4:	ec53 2b1a 	vmov	r2, r3, d10
 8015ce8:	f7ea fc36 	bl	8000558 <__aeabi_dmul>
 8015cec:	ec53 2b18 	vmov	r2, r3, d8
 8015cf0:	ec41 0b19 	vmov	d9, r0, r1
 8015cf4:	ec51 0b18 	vmov	r0, r1, d8
 8015cf8:	f7ea fc2e 	bl	8000558 <__aeabi_dmul>
 8015cfc:	a37c      	add	r3, pc, #496	; (adr r3, 8015ef0 <__ieee754_pow+0x708>)
 8015cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d02:	4604      	mov	r4, r0
 8015d04:	460d      	mov	r5, r1
 8015d06:	f7ea fc27 	bl	8000558 <__aeabi_dmul>
 8015d0a:	a37b      	add	r3, pc, #492	; (adr r3, 8015ef8 <__ieee754_pow+0x710>)
 8015d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d10:	f7ea fa6c 	bl	80001ec <__adddf3>
 8015d14:	4622      	mov	r2, r4
 8015d16:	462b      	mov	r3, r5
 8015d18:	f7ea fc1e 	bl	8000558 <__aeabi_dmul>
 8015d1c:	a378      	add	r3, pc, #480	; (adr r3, 8015f00 <__ieee754_pow+0x718>)
 8015d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d22:	f7ea fa63 	bl	80001ec <__adddf3>
 8015d26:	4622      	mov	r2, r4
 8015d28:	462b      	mov	r3, r5
 8015d2a:	f7ea fc15 	bl	8000558 <__aeabi_dmul>
 8015d2e:	a376      	add	r3, pc, #472	; (adr r3, 8015f08 <__ieee754_pow+0x720>)
 8015d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d34:	f7ea fa5a 	bl	80001ec <__adddf3>
 8015d38:	4622      	mov	r2, r4
 8015d3a:	462b      	mov	r3, r5
 8015d3c:	f7ea fc0c 	bl	8000558 <__aeabi_dmul>
 8015d40:	a373      	add	r3, pc, #460	; (adr r3, 8015f10 <__ieee754_pow+0x728>)
 8015d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d46:	f7ea fa51 	bl	80001ec <__adddf3>
 8015d4a:	4622      	mov	r2, r4
 8015d4c:	462b      	mov	r3, r5
 8015d4e:	f7ea fc03 	bl	8000558 <__aeabi_dmul>
 8015d52:	a371      	add	r3, pc, #452	; (adr r3, 8015f18 <__ieee754_pow+0x730>)
 8015d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d58:	f7ea fa48 	bl	80001ec <__adddf3>
 8015d5c:	4622      	mov	r2, r4
 8015d5e:	4606      	mov	r6, r0
 8015d60:	460f      	mov	r7, r1
 8015d62:	462b      	mov	r3, r5
 8015d64:	4620      	mov	r0, r4
 8015d66:	4629      	mov	r1, r5
 8015d68:	f7ea fbf6 	bl	8000558 <__aeabi_dmul>
 8015d6c:	4602      	mov	r2, r0
 8015d6e:	460b      	mov	r3, r1
 8015d70:	4630      	mov	r0, r6
 8015d72:	4639      	mov	r1, r7
 8015d74:	f7ea fbf0 	bl	8000558 <__aeabi_dmul>
 8015d78:	4642      	mov	r2, r8
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	460d      	mov	r5, r1
 8015d7e:	464b      	mov	r3, r9
 8015d80:	ec51 0b18 	vmov	r0, r1, d8
 8015d84:	f7ea fa32 	bl	80001ec <__adddf3>
 8015d88:	ec53 2b19 	vmov	r2, r3, d9
 8015d8c:	f7ea fbe4 	bl	8000558 <__aeabi_dmul>
 8015d90:	4622      	mov	r2, r4
 8015d92:	462b      	mov	r3, r5
 8015d94:	f7ea fa2a 	bl	80001ec <__adddf3>
 8015d98:	4642      	mov	r2, r8
 8015d9a:	4682      	mov	sl, r0
 8015d9c:	468b      	mov	fp, r1
 8015d9e:	464b      	mov	r3, r9
 8015da0:	4640      	mov	r0, r8
 8015da2:	4649      	mov	r1, r9
 8015da4:	f7ea fbd8 	bl	8000558 <__aeabi_dmul>
 8015da8:	4b6b      	ldr	r3, [pc, #428]	; (8015f58 <__ieee754_pow+0x770>)
 8015daa:	2200      	movs	r2, #0
 8015dac:	4606      	mov	r6, r0
 8015dae:	460f      	mov	r7, r1
 8015db0:	f7ea fa1c 	bl	80001ec <__adddf3>
 8015db4:	4652      	mov	r2, sl
 8015db6:	465b      	mov	r3, fp
 8015db8:	f7ea fa18 	bl	80001ec <__adddf3>
 8015dbc:	2000      	movs	r0, #0
 8015dbe:	4604      	mov	r4, r0
 8015dc0:	460d      	mov	r5, r1
 8015dc2:	4602      	mov	r2, r0
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	4640      	mov	r0, r8
 8015dc8:	4649      	mov	r1, r9
 8015dca:	f7ea fbc5 	bl	8000558 <__aeabi_dmul>
 8015dce:	4b62      	ldr	r3, [pc, #392]	; (8015f58 <__ieee754_pow+0x770>)
 8015dd0:	4680      	mov	r8, r0
 8015dd2:	4689      	mov	r9, r1
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	4620      	mov	r0, r4
 8015dd8:	4629      	mov	r1, r5
 8015dda:	f7ea fa05 	bl	80001e8 <__aeabi_dsub>
 8015dde:	4632      	mov	r2, r6
 8015de0:	463b      	mov	r3, r7
 8015de2:	f7ea fa01 	bl	80001e8 <__aeabi_dsub>
 8015de6:	4602      	mov	r2, r0
 8015de8:	460b      	mov	r3, r1
 8015dea:	4650      	mov	r0, sl
 8015dec:	4659      	mov	r1, fp
 8015dee:	f7ea f9fb 	bl	80001e8 <__aeabi_dsub>
 8015df2:	ec53 2b18 	vmov	r2, r3, d8
 8015df6:	f7ea fbaf 	bl	8000558 <__aeabi_dmul>
 8015dfa:	4622      	mov	r2, r4
 8015dfc:	4606      	mov	r6, r0
 8015dfe:	460f      	mov	r7, r1
 8015e00:	462b      	mov	r3, r5
 8015e02:	ec51 0b19 	vmov	r0, r1, d9
 8015e06:	f7ea fba7 	bl	8000558 <__aeabi_dmul>
 8015e0a:	4602      	mov	r2, r0
 8015e0c:	460b      	mov	r3, r1
 8015e0e:	4630      	mov	r0, r6
 8015e10:	4639      	mov	r1, r7
 8015e12:	f7ea f9eb 	bl	80001ec <__adddf3>
 8015e16:	4606      	mov	r6, r0
 8015e18:	460f      	mov	r7, r1
 8015e1a:	4602      	mov	r2, r0
 8015e1c:	460b      	mov	r3, r1
 8015e1e:	4640      	mov	r0, r8
 8015e20:	4649      	mov	r1, r9
 8015e22:	f7ea f9e3 	bl	80001ec <__adddf3>
 8015e26:	a33e      	add	r3, pc, #248	; (adr r3, 8015f20 <__ieee754_pow+0x738>)
 8015e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e2c:	2000      	movs	r0, #0
 8015e2e:	4604      	mov	r4, r0
 8015e30:	460d      	mov	r5, r1
 8015e32:	f7ea fb91 	bl	8000558 <__aeabi_dmul>
 8015e36:	4642      	mov	r2, r8
 8015e38:	ec41 0b18 	vmov	d8, r0, r1
 8015e3c:	464b      	mov	r3, r9
 8015e3e:	4620      	mov	r0, r4
 8015e40:	4629      	mov	r1, r5
 8015e42:	f7ea f9d1 	bl	80001e8 <__aeabi_dsub>
 8015e46:	4602      	mov	r2, r0
 8015e48:	460b      	mov	r3, r1
 8015e4a:	4630      	mov	r0, r6
 8015e4c:	4639      	mov	r1, r7
 8015e4e:	f7ea f9cb 	bl	80001e8 <__aeabi_dsub>
 8015e52:	a335      	add	r3, pc, #212	; (adr r3, 8015f28 <__ieee754_pow+0x740>)
 8015e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e58:	f7ea fb7e 	bl	8000558 <__aeabi_dmul>
 8015e5c:	a334      	add	r3, pc, #208	; (adr r3, 8015f30 <__ieee754_pow+0x748>)
 8015e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e62:	4606      	mov	r6, r0
 8015e64:	460f      	mov	r7, r1
 8015e66:	4620      	mov	r0, r4
 8015e68:	4629      	mov	r1, r5
 8015e6a:	f7ea fb75 	bl	8000558 <__aeabi_dmul>
 8015e6e:	4602      	mov	r2, r0
 8015e70:	460b      	mov	r3, r1
 8015e72:	4630      	mov	r0, r6
 8015e74:	4639      	mov	r1, r7
 8015e76:	f7ea f9b9 	bl	80001ec <__adddf3>
 8015e7a:	9a07      	ldr	r2, [sp, #28]
 8015e7c:	4b37      	ldr	r3, [pc, #220]	; (8015f5c <__ieee754_pow+0x774>)
 8015e7e:	4413      	add	r3, r2
 8015e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e84:	f7ea f9b2 	bl	80001ec <__adddf3>
 8015e88:	4682      	mov	sl, r0
 8015e8a:	9805      	ldr	r0, [sp, #20]
 8015e8c:	468b      	mov	fp, r1
 8015e8e:	f7ea faf9 	bl	8000484 <__aeabi_i2d>
 8015e92:	9a07      	ldr	r2, [sp, #28]
 8015e94:	4b32      	ldr	r3, [pc, #200]	; (8015f60 <__ieee754_pow+0x778>)
 8015e96:	4413      	add	r3, r2
 8015e98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015e9c:	4606      	mov	r6, r0
 8015e9e:	460f      	mov	r7, r1
 8015ea0:	4652      	mov	r2, sl
 8015ea2:	465b      	mov	r3, fp
 8015ea4:	ec51 0b18 	vmov	r0, r1, d8
 8015ea8:	f7ea f9a0 	bl	80001ec <__adddf3>
 8015eac:	4642      	mov	r2, r8
 8015eae:	464b      	mov	r3, r9
 8015eb0:	f7ea f99c 	bl	80001ec <__adddf3>
 8015eb4:	4632      	mov	r2, r6
 8015eb6:	463b      	mov	r3, r7
 8015eb8:	f7ea f998 	bl	80001ec <__adddf3>
 8015ebc:	2000      	movs	r0, #0
 8015ebe:	4632      	mov	r2, r6
 8015ec0:	463b      	mov	r3, r7
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	460d      	mov	r5, r1
 8015ec6:	f7ea f98f 	bl	80001e8 <__aeabi_dsub>
 8015eca:	4642      	mov	r2, r8
 8015ecc:	464b      	mov	r3, r9
 8015ece:	f7ea f98b 	bl	80001e8 <__aeabi_dsub>
 8015ed2:	ec53 2b18 	vmov	r2, r3, d8
 8015ed6:	f7ea f987 	bl	80001e8 <__aeabi_dsub>
 8015eda:	4602      	mov	r2, r0
 8015edc:	460b      	mov	r3, r1
 8015ede:	4650      	mov	r0, sl
 8015ee0:	4659      	mov	r1, fp
 8015ee2:	e610      	b.n	8015b06 <__ieee754_pow+0x31e>
 8015ee4:	2401      	movs	r4, #1
 8015ee6:	e6a1      	b.n	8015c2c <__ieee754_pow+0x444>
 8015ee8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8015f38 <__ieee754_pow+0x750>
 8015eec:	e617      	b.n	8015b1e <__ieee754_pow+0x336>
 8015eee:	bf00      	nop
 8015ef0:	4a454eef 	.word	0x4a454eef
 8015ef4:	3fca7e28 	.word	0x3fca7e28
 8015ef8:	93c9db65 	.word	0x93c9db65
 8015efc:	3fcd864a 	.word	0x3fcd864a
 8015f00:	a91d4101 	.word	0xa91d4101
 8015f04:	3fd17460 	.word	0x3fd17460
 8015f08:	518f264d 	.word	0x518f264d
 8015f0c:	3fd55555 	.word	0x3fd55555
 8015f10:	db6fabff 	.word	0xdb6fabff
 8015f14:	3fdb6db6 	.word	0x3fdb6db6
 8015f18:	33333303 	.word	0x33333303
 8015f1c:	3fe33333 	.word	0x3fe33333
 8015f20:	e0000000 	.word	0xe0000000
 8015f24:	3feec709 	.word	0x3feec709
 8015f28:	dc3a03fd 	.word	0xdc3a03fd
 8015f2c:	3feec709 	.word	0x3feec709
 8015f30:	145b01f5 	.word	0x145b01f5
 8015f34:	be3e2fe0 	.word	0xbe3e2fe0
 8015f38:	00000000 	.word	0x00000000
 8015f3c:	3ff00000 	.word	0x3ff00000
 8015f40:	7ff00000 	.word	0x7ff00000
 8015f44:	43400000 	.word	0x43400000
 8015f48:	0003988e 	.word	0x0003988e
 8015f4c:	000bb679 	.word	0x000bb679
 8015f50:	08017a10 	.word	0x08017a10
 8015f54:	3ff00000 	.word	0x3ff00000
 8015f58:	40080000 	.word	0x40080000
 8015f5c:	08017a30 	.word	0x08017a30
 8015f60:	08017a20 	.word	0x08017a20
 8015f64:	a3b5      	add	r3, pc, #724	; (adr r3, 801623c <__ieee754_pow+0xa54>)
 8015f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f6a:	4640      	mov	r0, r8
 8015f6c:	4649      	mov	r1, r9
 8015f6e:	f7ea f93d 	bl	80001ec <__adddf3>
 8015f72:	4622      	mov	r2, r4
 8015f74:	ec41 0b1a 	vmov	d10, r0, r1
 8015f78:	462b      	mov	r3, r5
 8015f7a:	4630      	mov	r0, r6
 8015f7c:	4639      	mov	r1, r7
 8015f7e:	f7ea f933 	bl	80001e8 <__aeabi_dsub>
 8015f82:	4602      	mov	r2, r0
 8015f84:	460b      	mov	r3, r1
 8015f86:	ec51 0b1a 	vmov	r0, r1, d10
 8015f8a:	f7ea fd75 	bl	8000a78 <__aeabi_dcmpgt>
 8015f8e:	2800      	cmp	r0, #0
 8015f90:	f47f ae04 	bne.w	8015b9c <__ieee754_pow+0x3b4>
 8015f94:	4aa4      	ldr	r2, [pc, #656]	; (8016228 <__ieee754_pow+0xa40>)
 8015f96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015f9a:	4293      	cmp	r3, r2
 8015f9c:	f340 8108 	ble.w	80161b0 <__ieee754_pow+0x9c8>
 8015fa0:	151b      	asrs	r3, r3, #20
 8015fa2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015fa6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015faa:	fa4a f303 	asr.w	r3, sl, r3
 8015fae:	445b      	add	r3, fp
 8015fb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015fb4:	4e9d      	ldr	r6, [pc, #628]	; (801622c <__ieee754_pow+0xa44>)
 8015fb6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015fba:	4116      	asrs	r6, r2
 8015fbc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015fc0:	2000      	movs	r0, #0
 8015fc2:	ea23 0106 	bic.w	r1, r3, r6
 8015fc6:	f1c2 0214 	rsb	r2, r2, #20
 8015fca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015fce:	fa4a fa02 	asr.w	sl, sl, r2
 8015fd2:	f1bb 0f00 	cmp.w	fp, #0
 8015fd6:	4602      	mov	r2, r0
 8015fd8:	460b      	mov	r3, r1
 8015fda:	4620      	mov	r0, r4
 8015fdc:	4629      	mov	r1, r5
 8015fde:	bfb8      	it	lt
 8015fe0:	f1ca 0a00 	rsblt	sl, sl, #0
 8015fe4:	f7ea f900 	bl	80001e8 <__aeabi_dsub>
 8015fe8:	ec41 0b19 	vmov	d9, r0, r1
 8015fec:	4642      	mov	r2, r8
 8015fee:	464b      	mov	r3, r9
 8015ff0:	ec51 0b19 	vmov	r0, r1, d9
 8015ff4:	f7ea f8fa 	bl	80001ec <__adddf3>
 8015ff8:	a37b      	add	r3, pc, #492	; (adr r3, 80161e8 <__ieee754_pow+0xa00>)
 8015ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ffe:	2000      	movs	r0, #0
 8016000:	4604      	mov	r4, r0
 8016002:	460d      	mov	r5, r1
 8016004:	f7ea faa8 	bl	8000558 <__aeabi_dmul>
 8016008:	ec53 2b19 	vmov	r2, r3, d9
 801600c:	4606      	mov	r6, r0
 801600e:	460f      	mov	r7, r1
 8016010:	4620      	mov	r0, r4
 8016012:	4629      	mov	r1, r5
 8016014:	f7ea f8e8 	bl	80001e8 <__aeabi_dsub>
 8016018:	4602      	mov	r2, r0
 801601a:	460b      	mov	r3, r1
 801601c:	4640      	mov	r0, r8
 801601e:	4649      	mov	r1, r9
 8016020:	f7ea f8e2 	bl	80001e8 <__aeabi_dsub>
 8016024:	a372      	add	r3, pc, #456	; (adr r3, 80161f0 <__ieee754_pow+0xa08>)
 8016026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602a:	f7ea fa95 	bl	8000558 <__aeabi_dmul>
 801602e:	a372      	add	r3, pc, #456	; (adr r3, 80161f8 <__ieee754_pow+0xa10>)
 8016030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016034:	4680      	mov	r8, r0
 8016036:	4689      	mov	r9, r1
 8016038:	4620      	mov	r0, r4
 801603a:	4629      	mov	r1, r5
 801603c:	f7ea fa8c 	bl	8000558 <__aeabi_dmul>
 8016040:	4602      	mov	r2, r0
 8016042:	460b      	mov	r3, r1
 8016044:	4640      	mov	r0, r8
 8016046:	4649      	mov	r1, r9
 8016048:	f7ea f8d0 	bl	80001ec <__adddf3>
 801604c:	4604      	mov	r4, r0
 801604e:	460d      	mov	r5, r1
 8016050:	4602      	mov	r2, r0
 8016052:	460b      	mov	r3, r1
 8016054:	4630      	mov	r0, r6
 8016056:	4639      	mov	r1, r7
 8016058:	f7ea f8c8 	bl	80001ec <__adddf3>
 801605c:	4632      	mov	r2, r6
 801605e:	463b      	mov	r3, r7
 8016060:	4680      	mov	r8, r0
 8016062:	4689      	mov	r9, r1
 8016064:	f7ea f8c0 	bl	80001e8 <__aeabi_dsub>
 8016068:	4602      	mov	r2, r0
 801606a:	460b      	mov	r3, r1
 801606c:	4620      	mov	r0, r4
 801606e:	4629      	mov	r1, r5
 8016070:	f7ea f8ba 	bl	80001e8 <__aeabi_dsub>
 8016074:	4642      	mov	r2, r8
 8016076:	4606      	mov	r6, r0
 8016078:	460f      	mov	r7, r1
 801607a:	464b      	mov	r3, r9
 801607c:	4640      	mov	r0, r8
 801607e:	4649      	mov	r1, r9
 8016080:	f7ea fa6a 	bl	8000558 <__aeabi_dmul>
 8016084:	a35e      	add	r3, pc, #376	; (adr r3, 8016200 <__ieee754_pow+0xa18>)
 8016086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801608a:	4604      	mov	r4, r0
 801608c:	460d      	mov	r5, r1
 801608e:	f7ea fa63 	bl	8000558 <__aeabi_dmul>
 8016092:	a35d      	add	r3, pc, #372	; (adr r3, 8016208 <__ieee754_pow+0xa20>)
 8016094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016098:	f7ea f8a6 	bl	80001e8 <__aeabi_dsub>
 801609c:	4622      	mov	r2, r4
 801609e:	462b      	mov	r3, r5
 80160a0:	f7ea fa5a 	bl	8000558 <__aeabi_dmul>
 80160a4:	a35a      	add	r3, pc, #360	; (adr r3, 8016210 <__ieee754_pow+0xa28>)
 80160a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160aa:	f7ea f89f 	bl	80001ec <__adddf3>
 80160ae:	4622      	mov	r2, r4
 80160b0:	462b      	mov	r3, r5
 80160b2:	f7ea fa51 	bl	8000558 <__aeabi_dmul>
 80160b6:	a358      	add	r3, pc, #352	; (adr r3, 8016218 <__ieee754_pow+0xa30>)
 80160b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160bc:	f7ea f894 	bl	80001e8 <__aeabi_dsub>
 80160c0:	4622      	mov	r2, r4
 80160c2:	462b      	mov	r3, r5
 80160c4:	f7ea fa48 	bl	8000558 <__aeabi_dmul>
 80160c8:	a355      	add	r3, pc, #340	; (adr r3, 8016220 <__ieee754_pow+0xa38>)
 80160ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ce:	f7ea f88d 	bl	80001ec <__adddf3>
 80160d2:	4622      	mov	r2, r4
 80160d4:	462b      	mov	r3, r5
 80160d6:	f7ea fa3f 	bl	8000558 <__aeabi_dmul>
 80160da:	4602      	mov	r2, r0
 80160dc:	460b      	mov	r3, r1
 80160de:	4640      	mov	r0, r8
 80160e0:	4649      	mov	r1, r9
 80160e2:	f7ea f881 	bl	80001e8 <__aeabi_dsub>
 80160e6:	4604      	mov	r4, r0
 80160e8:	460d      	mov	r5, r1
 80160ea:	4602      	mov	r2, r0
 80160ec:	460b      	mov	r3, r1
 80160ee:	4640      	mov	r0, r8
 80160f0:	4649      	mov	r1, r9
 80160f2:	f7ea fa31 	bl	8000558 <__aeabi_dmul>
 80160f6:	2200      	movs	r2, #0
 80160f8:	ec41 0b19 	vmov	d9, r0, r1
 80160fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016100:	4620      	mov	r0, r4
 8016102:	4629      	mov	r1, r5
 8016104:	f7ea f870 	bl	80001e8 <__aeabi_dsub>
 8016108:	4602      	mov	r2, r0
 801610a:	460b      	mov	r3, r1
 801610c:	ec51 0b19 	vmov	r0, r1, d9
 8016110:	f7ea fb4c 	bl	80007ac <__aeabi_ddiv>
 8016114:	4632      	mov	r2, r6
 8016116:	4604      	mov	r4, r0
 8016118:	460d      	mov	r5, r1
 801611a:	463b      	mov	r3, r7
 801611c:	4640      	mov	r0, r8
 801611e:	4649      	mov	r1, r9
 8016120:	f7ea fa1a 	bl	8000558 <__aeabi_dmul>
 8016124:	4632      	mov	r2, r6
 8016126:	463b      	mov	r3, r7
 8016128:	f7ea f860 	bl	80001ec <__adddf3>
 801612c:	4602      	mov	r2, r0
 801612e:	460b      	mov	r3, r1
 8016130:	4620      	mov	r0, r4
 8016132:	4629      	mov	r1, r5
 8016134:	f7ea f858 	bl	80001e8 <__aeabi_dsub>
 8016138:	4642      	mov	r2, r8
 801613a:	464b      	mov	r3, r9
 801613c:	f7ea f854 	bl	80001e8 <__aeabi_dsub>
 8016140:	460b      	mov	r3, r1
 8016142:	4602      	mov	r2, r0
 8016144:	493a      	ldr	r1, [pc, #232]	; (8016230 <__ieee754_pow+0xa48>)
 8016146:	2000      	movs	r0, #0
 8016148:	f7ea f84e 	bl	80001e8 <__aeabi_dsub>
 801614c:	ec41 0b10 	vmov	d0, r0, r1
 8016150:	ee10 3a90 	vmov	r3, s1
 8016154:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801615c:	da2b      	bge.n	80161b6 <__ieee754_pow+0x9ce>
 801615e:	4650      	mov	r0, sl
 8016160:	f000 fe9e 	bl	8016ea0 <scalbn>
 8016164:	ec51 0b10 	vmov	r0, r1, d0
 8016168:	ec53 2b18 	vmov	r2, r3, d8
 801616c:	f7ff bbed 	b.w	801594a <__ieee754_pow+0x162>
 8016170:	4b30      	ldr	r3, [pc, #192]	; (8016234 <__ieee754_pow+0xa4c>)
 8016172:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016176:	429e      	cmp	r6, r3
 8016178:	f77f af0c 	ble.w	8015f94 <__ieee754_pow+0x7ac>
 801617c:	4b2e      	ldr	r3, [pc, #184]	; (8016238 <__ieee754_pow+0xa50>)
 801617e:	440b      	add	r3, r1
 8016180:	4303      	orrs	r3, r0
 8016182:	d009      	beq.n	8016198 <__ieee754_pow+0x9b0>
 8016184:	ec51 0b18 	vmov	r0, r1, d8
 8016188:	2200      	movs	r2, #0
 801618a:	2300      	movs	r3, #0
 801618c:	f7ea fc56 	bl	8000a3c <__aeabi_dcmplt>
 8016190:	3800      	subs	r0, #0
 8016192:	bf18      	it	ne
 8016194:	2001      	movne	r0, #1
 8016196:	e447      	b.n	8015a28 <__ieee754_pow+0x240>
 8016198:	4622      	mov	r2, r4
 801619a:	462b      	mov	r3, r5
 801619c:	f7ea f824 	bl	80001e8 <__aeabi_dsub>
 80161a0:	4642      	mov	r2, r8
 80161a2:	464b      	mov	r3, r9
 80161a4:	f7ea fc5e 	bl	8000a64 <__aeabi_dcmpge>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	f43f aef3 	beq.w	8015f94 <__ieee754_pow+0x7ac>
 80161ae:	e7e9      	b.n	8016184 <__ieee754_pow+0x99c>
 80161b0:	f04f 0a00 	mov.w	sl, #0
 80161b4:	e71a      	b.n	8015fec <__ieee754_pow+0x804>
 80161b6:	ec51 0b10 	vmov	r0, r1, d0
 80161ba:	4619      	mov	r1, r3
 80161bc:	e7d4      	b.n	8016168 <__ieee754_pow+0x980>
 80161be:	491c      	ldr	r1, [pc, #112]	; (8016230 <__ieee754_pow+0xa48>)
 80161c0:	2000      	movs	r0, #0
 80161c2:	f7ff bb30 	b.w	8015826 <__ieee754_pow+0x3e>
 80161c6:	2000      	movs	r0, #0
 80161c8:	2100      	movs	r1, #0
 80161ca:	f7ff bb2c 	b.w	8015826 <__ieee754_pow+0x3e>
 80161ce:	4630      	mov	r0, r6
 80161d0:	4639      	mov	r1, r7
 80161d2:	f7ff bb28 	b.w	8015826 <__ieee754_pow+0x3e>
 80161d6:	9204      	str	r2, [sp, #16]
 80161d8:	f7ff bb7a 	b.w	80158d0 <__ieee754_pow+0xe8>
 80161dc:	2300      	movs	r3, #0
 80161de:	f7ff bb64 	b.w	80158aa <__ieee754_pow+0xc2>
 80161e2:	bf00      	nop
 80161e4:	f3af 8000 	nop.w
 80161e8:	00000000 	.word	0x00000000
 80161ec:	3fe62e43 	.word	0x3fe62e43
 80161f0:	fefa39ef 	.word	0xfefa39ef
 80161f4:	3fe62e42 	.word	0x3fe62e42
 80161f8:	0ca86c39 	.word	0x0ca86c39
 80161fc:	be205c61 	.word	0xbe205c61
 8016200:	72bea4d0 	.word	0x72bea4d0
 8016204:	3e663769 	.word	0x3e663769
 8016208:	c5d26bf1 	.word	0xc5d26bf1
 801620c:	3ebbbd41 	.word	0x3ebbbd41
 8016210:	af25de2c 	.word	0xaf25de2c
 8016214:	3f11566a 	.word	0x3f11566a
 8016218:	16bebd93 	.word	0x16bebd93
 801621c:	3f66c16c 	.word	0x3f66c16c
 8016220:	5555553e 	.word	0x5555553e
 8016224:	3fc55555 	.word	0x3fc55555
 8016228:	3fe00000 	.word	0x3fe00000
 801622c:	000fffff 	.word	0x000fffff
 8016230:	3ff00000 	.word	0x3ff00000
 8016234:	4090cbff 	.word	0x4090cbff
 8016238:	3f6f3400 	.word	0x3f6f3400
 801623c:	652b82fe 	.word	0x652b82fe
 8016240:	3c971547 	.word	0x3c971547

08016244 <__ieee754_sqrt>:
 8016244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016248:	ec55 4b10 	vmov	r4, r5, d0
 801624c:	4e55      	ldr	r6, [pc, #340]	; (80163a4 <__ieee754_sqrt+0x160>)
 801624e:	43ae      	bics	r6, r5
 8016250:	ee10 0a10 	vmov	r0, s0
 8016254:	ee10 3a10 	vmov	r3, s0
 8016258:	462a      	mov	r2, r5
 801625a:	4629      	mov	r1, r5
 801625c:	d110      	bne.n	8016280 <__ieee754_sqrt+0x3c>
 801625e:	ee10 2a10 	vmov	r2, s0
 8016262:	462b      	mov	r3, r5
 8016264:	f7ea f978 	bl	8000558 <__aeabi_dmul>
 8016268:	4602      	mov	r2, r0
 801626a:	460b      	mov	r3, r1
 801626c:	4620      	mov	r0, r4
 801626e:	4629      	mov	r1, r5
 8016270:	f7e9 ffbc 	bl	80001ec <__adddf3>
 8016274:	4604      	mov	r4, r0
 8016276:	460d      	mov	r5, r1
 8016278:	ec45 4b10 	vmov	d0, r4, r5
 801627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016280:	2d00      	cmp	r5, #0
 8016282:	dc10      	bgt.n	80162a6 <__ieee754_sqrt+0x62>
 8016284:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016288:	4330      	orrs	r0, r6
 801628a:	d0f5      	beq.n	8016278 <__ieee754_sqrt+0x34>
 801628c:	b15d      	cbz	r5, 80162a6 <__ieee754_sqrt+0x62>
 801628e:	ee10 2a10 	vmov	r2, s0
 8016292:	462b      	mov	r3, r5
 8016294:	ee10 0a10 	vmov	r0, s0
 8016298:	f7e9 ffa6 	bl	80001e8 <__aeabi_dsub>
 801629c:	4602      	mov	r2, r0
 801629e:	460b      	mov	r3, r1
 80162a0:	f7ea fa84 	bl	80007ac <__aeabi_ddiv>
 80162a4:	e7e6      	b.n	8016274 <__ieee754_sqrt+0x30>
 80162a6:	1512      	asrs	r2, r2, #20
 80162a8:	d074      	beq.n	8016394 <__ieee754_sqrt+0x150>
 80162aa:	07d4      	lsls	r4, r2, #31
 80162ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80162b0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80162b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80162b8:	bf5e      	ittt	pl
 80162ba:	0fda      	lsrpl	r2, r3, #31
 80162bc:	005b      	lslpl	r3, r3, #1
 80162be:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80162c2:	2400      	movs	r4, #0
 80162c4:	0fda      	lsrs	r2, r3, #31
 80162c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80162ca:	107f      	asrs	r7, r7, #1
 80162cc:	005b      	lsls	r3, r3, #1
 80162ce:	2516      	movs	r5, #22
 80162d0:	4620      	mov	r0, r4
 80162d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80162d6:	1886      	adds	r6, r0, r2
 80162d8:	428e      	cmp	r6, r1
 80162da:	bfde      	ittt	le
 80162dc:	1b89      	suble	r1, r1, r6
 80162de:	18b0      	addle	r0, r6, r2
 80162e0:	18a4      	addle	r4, r4, r2
 80162e2:	0049      	lsls	r1, r1, #1
 80162e4:	3d01      	subs	r5, #1
 80162e6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80162ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80162ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80162f2:	d1f0      	bne.n	80162d6 <__ieee754_sqrt+0x92>
 80162f4:	462a      	mov	r2, r5
 80162f6:	f04f 0e20 	mov.w	lr, #32
 80162fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80162fe:	4281      	cmp	r1, r0
 8016300:	eb06 0c05 	add.w	ip, r6, r5
 8016304:	dc02      	bgt.n	801630c <__ieee754_sqrt+0xc8>
 8016306:	d113      	bne.n	8016330 <__ieee754_sqrt+0xec>
 8016308:	459c      	cmp	ip, r3
 801630a:	d811      	bhi.n	8016330 <__ieee754_sqrt+0xec>
 801630c:	f1bc 0f00 	cmp.w	ip, #0
 8016310:	eb0c 0506 	add.w	r5, ip, r6
 8016314:	da43      	bge.n	801639e <__ieee754_sqrt+0x15a>
 8016316:	2d00      	cmp	r5, #0
 8016318:	db41      	blt.n	801639e <__ieee754_sqrt+0x15a>
 801631a:	f100 0801 	add.w	r8, r0, #1
 801631e:	1a09      	subs	r1, r1, r0
 8016320:	459c      	cmp	ip, r3
 8016322:	bf88      	it	hi
 8016324:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8016328:	eba3 030c 	sub.w	r3, r3, ip
 801632c:	4432      	add	r2, r6
 801632e:	4640      	mov	r0, r8
 8016330:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8016334:	f1be 0e01 	subs.w	lr, lr, #1
 8016338:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801633c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016340:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016344:	d1db      	bne.n	80162fe <__ieee754_sqrt+0xba>
 8016346:	430b      	orrs	r3, r1
 8016348:	d006      	beq.n	8016358 <__ieee754_sqrt+0x114>
 801634a:	1c50      	adds	r0, r2, #1
 801634c:	bf13      	iteet	ne
 801634e:	3201      	addne	r2, #1
 8016350:	3401      	addeq	r4, #1
 8016352:	4672      	moveq	r2, lr
 8016354:	f022 0201 	bicne.w	r2, r2, #1
 8016358:	1063      	asrs	r3, r4, #1
 801635a:	0852      	lsrs	r2, r2, #1
 801635c:	07e1      	lsls	r1, r4, #31
 801635e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016362:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016366:	bf48      	it	mi
 8016368:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801636c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8016370:	4614      	mov	r4, r2
 8016372:	e781      	b.n	8016278 <__ieee754_sqrt+0x34>
 8016374:	0ad9      	lsrs	r1, r3, #11
 8016376:	3815      	subs	r0, #21
 8016378:	055b      	lsls	r3, r3, #21
 801637a:	2900      	cmp	r1, #0
 801637c:	d0fa      	beq.n	8016374 <__ieee754_sqrt+0x130>
 801637e:	02cd      	lsls	r5, r1, #11
 8016380:	d50a      	bpl.n	8016398 <__ieee754_sqrt+0x154>
 8016382:	f1c2 0420 	rsb	r4, r2, #32
 8016386:	fa23 f404 	lsr.w	r4, r3, r4
 801638a:	1e55      	subs	r5, r2, #1
 801638c:	4093      	lsls	r3, r2
 801638e:	4321      	orrs	r1, r4
 8016390:	1b42      	subs	r2, r0, r5
 8016392:	e78a      	b.n	80162aa <__ieee754_sqrt+0x66>
 8016394:	4610      	mov	r0, r2
 8016396:	e7f0      	b.n	801637a <__ieee754_sqrt+0x136>
 8016398:	0049      	lsls	r1, r1, #1
 801639a:	3201      	adds	r2, #1
 801639c:	e7ef      	b.n	801637e <__ieee754_sqrt+0x13a>
 801639e:	4680      	mov	r8, r0
 80163a0:	e7bd      	b.n	801631e <__ieee754_sqrt+0xda>
 80163a2:	bf00      	nop
 80163a4:	7ff00000 	.word	0x7ff00000

080163a8 <__ieee754_atan2f>:
 80163a8:	ee10 2a90 	vmov	r2, s1
 80163ac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80163b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80163b4:	b510      	push	{r4, lr}
 80163b6:	eef0 7a40 	vmov.f32	s15, s0
 80163ba:	dc06      	bgt.n	80163ca <__ieee754_atan2f+0x22>
 80163bc:	ee10 0a10 	vmov	r0, s0
 80163c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80163c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80163c8:	dd04      	ble.n	80163d4 <__ieee754_atan2f+0x2c>
 80163ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80163ce:	eeb0 0a67 	vmov.f32	s0, s15
 80163d2:	bd10      	pop	{r4, pc}
 80163d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80163d8:	d103      	bne.n	80163e2 <__ieee754_atan2f+0x3a>
 80163da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163de:	f000 bde5 	b.w	8016fac <atanf>
 80163e2:	1794      	asrs	r4, r2, #30
 80163e4:	f004 0402 	and.w	r4, r4, #2
 80163e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80163ec:	b943      	cbnz	r3, 8016400 <__ieee754_atan2f+0x58>
 80163ee:	2c02      	cmp	r4, #2
 80163f0:	d05e      	beq.n	80164b0 <__ieee754_atan2f+0x108>
 80163f2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80164c4 <__ieee754_atan2f+0x11c>
 80163f6:	2c03      	cmp	r4, #3
 80163f8:	bf08      	it	eq
 80163fa:	eef0 7a47 	vmoveq.f32	s15, s14
 80163fe:	e7e6      	b.n	80163ce <__ieee754_atan2f+0x26>
 8016400:	b941      	cbnz	r1, 8016414 <__ieee754_atan2f+0x6c>
 8016402:	eddf 7a31 	vldr	s15, [pc, #196]	; 80164c8 <__ieee754_atan2f+0x120>
 8016406:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80164cc <__ieee754_atan2f+0x124>
 801640a:	2800      	cmp	r0, #0
 801640c:	bfb8      	it	lt
 801640e:	eef0 7a40 	vmovlt.f32	s15, s0
 8016412:	e7dc      	b.n	80163ce <__ieee754_atan2f+0x26>
 8016414:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016418:	d110      	bne.n	801643c <__ieee754_atan2f+0x94>
 801641a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801641e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016422:	d107      	bne.n	8016434 <__ieee754_atan2f+0x8c>
 8016424:	2c02      	cmp	r4, #2
 8016426:	d846      	bhi.n	80164b6 <__ieee754_atan2f+0x10e>
 8016428:	4b29      	ldr	r3, [pc, #164]	; (80164d0 <__ieee754_atan2f+0x128>)
 801642a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801642e:	edd4 7a00 	vldr	s15, [r4]
 8016432:	e7cc      	b.n	80163ce <__ieee754_atan2f+0x26>
 8016434:	2c02      	cmp	r4, #2
 8016436:	d841      	bhi.n	80164bc <__ieee754_atan2f+0x114>
 8016438:	4b26      	ldr	r3, [pc, #152]	; (80164d4 <__ieee754_atan2f+0x12c>)
 801643a:	e7f6      	b.n	801642a <__ieee754_atan2f+0x82>
 801643c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016440:	d0df      	beq.n	8016402 <__ieee754_atan2f+0x5a>
 8016442:	1a5b      	subs	r3, r3, r1
 8016444:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8016448:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801644c:	da1a      	bge.n	8016484 <__ieee754_atan2f+0xdc>
 801644e:	2a00      	cmp	r2, #0
 8016450:	da01      	bge.n	8016456 <__ieee754_atan2f+0xae>
 8016452:	313c      	adds	r1, #60	; 0x3c
 8016454:	db19      	blt.n	801648a <__ieee754_atan2f+0xe2>
 8016456:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801645a:	f000 fe7b 	bl	8017154 <fabsf>
 801645e:	f000 fda5 	bl	8016fac <atanf>
 8016462:	eef0 7a40 	vmov.f32	s15, s0
 8016466:	2c01      	cmp	r4, #1
 8016468:	d012      	beq.n	8016490 <__ieee754_atan2f+0xe8>
 801646a:	2c02      	cmp	r4, #2
 801646c:	d017      	beq.n	801649e <__ieee754_atan2f+0xf6>
 801646e:	2c00      	cmp	r4, #0
 8016470:	d0ad      	beq.n	80163ce <__ieee754_atan2f+0x26>
 8016472:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80164d8 <__ieee754_atan2f+0x130>
 8016476:	ee77 7a80 	vadd.f32	s15, s15, s0
 801647a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80164dc <__ieee754_atan2f+0x134>
 801647e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016482:	e7a4      	b.n	80163ce <__ieee754_atan2f+0x26>
 8016484:	eddf 7a10 	vldr	s15, [pc, #64]	; 80164c8 <__ieee754_atan2f+0x120>
 8016488:	e7ed      	b.n	8016466 <__ieee754_atan2f+0xbe>
 801648a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80164e0 <__ieee754_atan2f+0x138>
 801648e:	e7ea      	b.n	8016466 <__ieee754_atan2f+0xbe>
 8016490:	ee17 3a90 	vmov	r3, s15
 8016494:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016498:	ee07 3a90 	vmov	s15, r3
 801649c:	e797      	b.n	80163ce <__ieee754_atan2f+0x26>
 801649e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80164d8 <__ieee754_atan2f+0x130>
 80164a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80164a6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80164dc <__ieee754_atan2f+0x134>
 80164aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80164ae:	e78e      	b.n	80163ce <__ieee754_atan2f+0x26>
 80164b0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80164dc <__ieee754_atan2f+0x134>
 80164b4:	e78b      	b.n	80163ce <__ieee754_atan2f+0x26>
 80164b6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80164e4 <__ieee754_atan2f+0x13c>
 80164ba:	e788      	b.n	80163ce <__ieee754_atan2f+0x26>
 80164bc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80164e0 <__ieee754_atan2f+0x138>
 80164c0:	e785      	b.n	80163ce <__ieee754_atan2f+0x26>
 80164c2:	bf00      	nop
 80164c4:	c0490fdb 	.word	0xc0490fdb
 80164c8:	3fc90fdb 	.word	0x3fc90fdb
 80164cc:	bfc90fdb 	.word	0xbfc90fdb
 80164d0:	08017a40 	.word	0x08017a40
 80164d4:	08017a4c 	.word	0x08017a4c
 80164d8:	33bbbd2e 	.word	0x33bbbd2e
 80164dc:	40490fdb 	.word	0x40490fdb
 80164e0:	00000000 	.word	0x00000000
 80164e4:	3f490fdb 	.word	0x3f490fdb

080164e8 <__ieee754_rem_pio2f>:
 80164e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164ea:	ee10 6a10 	vmov	r6, s0
 80164ee:	4b8e      	ldr	r3, [pc, #568]	; (8016728 <__ieee754_rem_pio2f+0x240>)
 80164f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80164f4:	429d      	cmp	r5, r3
 80164f6:	b087      	sub	sp, #28
 80164f8:	eef0 7a40 	vmov.f32	s15, s0
 80164fc:	4604      	mov	r4, r0
 80164fe:	dc05      	bgt.n	801650c <__ieee754_rem_pio2f+0x24>
 8016500:	2300      	movs	r3, #0
 8016502:	ed80 0a00 	vstr	s0, [r0]
 8016506:	6043      	str	r3, [r0, #4]
 8016508:	2000      	movs	r0, #0
 801650a:	e01a      	b.n	8016542 <__ieee754_rem_pio2f+0x5a>
 801650c:	4b87      	ldr	r3, [pc, #540]	; (801672c <__ieee754_rem_pio2f+0x244>)
 801650e:	429d      	cmp	r5, r3
 8016510:	dc46      	bgt.n	80165a0 <__ieee754_rem_pio2f+0xb8>
 8016512:	2e00      	cmp	r6, #0
 8016514:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8016730 <__ieee754_rem_pio2f+0x248>
 8016518:	4b86      	ldr	r3, [pc, #536]	; (8016734 <__ieee754_rem_pio2f+0x24c>)
 801651a:	f025 050f 	bic.w	r5, r5, #15
 801651e:	dd1f      	ble.n	8016560 <__ieee754_rem_pio2f+0x78>
 8016520:	429d      	cmp	r5, r3
 8016522:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016526:	d00e      	beq.n	8016546 <__ieee754_rem_pio2f+0x5e>
 8016528:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8016738 <__ieee754_rem_pio2f+0x250>
 801652c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8016530:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016534:	ed80 0a00 	vstr	s0, [r0]
 8016538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801653c:	2001      	movs	r0, #1
 801653e:	edc4 7a01 	vstr	s15, [r4, #4]
 8016542:	b007      	add	sp, #28
 8016544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016546:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801673c <__ieee754_rem_pio2f+0x254>
 801654a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8016740 <__ieee754_rem_pio2f+0x258>
 801654e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016552:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8016556:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801655a:	edc0 6a00 	vstr	s13, [r0]
 801655e:	e7eb      	b.n	8016538 <__ieee754_rem_pio2f+0x50>
 8016560:	429d      	cmp	r5, r3
 8016562:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016566:	d00e      	beq.n	8016586 <__ieee754_rem_pio2f+0x9e>
 8016568:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8016738 <__ieee754_rem_pio2f+0x250>
 801656c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016570:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016574:	ed80 0a00 	vstr	s0, [r0]
 8016578:	ee77 7a87 	vadd.f32	s15, s15, s14
 801657c:	f04f 30ff 	mov.w	r0, #4294967295
 8016580:	edc4 7a01 	vstr	s15, [r4, #4]
 8016584:	e7dd      	b.n	8016542 <__ieee754_rem_pio2f+0x5a>
 8016586:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801673c <__ieee754_rem_pio2f+0x254>
 801658a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8016740 <__ieee754_rem_pio2f+0x258>
 801658e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016592:	ee77 6a87 	vadd.f32	s13, s15, s14
 8016596:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801659a:	edc0 6a00 	vstr	s13, [r0]
 801659e:	e7eb      	b.n	8016578 <__ieee754_rem_pio2f+0x90>
 80165a0:	4b68      	ldr	r3, [pc, #416]	; (8016744 <__ieee754_rem_pio2f+0x25c>)
 80165a2:	429d      	cmp	r5, r3
 80165a4:	dc72      	bgt.n	801668c <__ieee754_rem_pio2f+0x1a4>
 80165a6:	f000 fdd5 	bl	8017154 <fabsf>
 80165aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8016748 <__ieee754_rem_pio2f+0x260>
 80165ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80165b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80165b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80165ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80165be:	ee17 0a90 	vmov	r0, s15
 80165c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8016730 <__ieee754_rem_pio2f+0x248>
 80165c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80165ca:	281f      	cmp	r0, #31
 80165cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8016738 <__ieee754_rem_pio2f+0x250>
 80165d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80165d4:	eeb1 6a47 	vneg.f32	s12, s14
 80165d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80165dc:	ee16 2a90 	vmov	r2, s13
 80165e0:	dc1c      	bgt.n	801661c <__ieee754_rem_pio2f+0x134>
 80165e2:	495a      	ldr	r1, [pc, #360]	; (801674c <__ieee754_rem_pio2f+0x264>)
 80165e4:	1e47      	subs	r7, r0, #1
 80165e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80165ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80165ee:	428b      	cmp	r3, r1
 80165f0:	d014      	beq.n	801661c <__ieee754_rem_pio2f+0x134>
 80165f2:	6022      	str	r2, [r4, #0]
 80165f4:	ed94 7a00 	vldr	s14, [r4]
 80165f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80165fc:	2e00      	cmp	r6, #0
 80165fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016602:	ed84 0a01 	vstr	s0, [r4, #4]
 8016606:	da9c      	bge.n	8016542 <__ieee754_rem_pio2f+0x5a>
 8016608:	eeb1 7a47 	vneg.f32	s14, s14
 801660c:	eeb1 0a40 	vneg.f32	s0, s0
 8016610:	ed84 7a00 	vstr	s14, [r4]
 8016614:	ed84 0a01 	vstr	s0, [r4, #4]
 8016618:	4240      	negs	r0, r0
 801661a:	e792      	b.n	8016542 <__ieee754_rem_pio2f+0x5a>
 801661c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016620:	15eb      	asrs	r3, r5, #23
 8016622:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8016626:	2d08      	cmp	r5, #8
 8016628:	dde3      	ble.n	80165f2 <__ieee754_rem_pio2f+0x10a>
 801662a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801673c <__ieee754_rem_pio2f+0x254>
 801662e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016740 <__ieee754_rem_pio2f+0x258>
 8016632:	eef0 6a40 	vmov.f32	s13, s0
 8016636:	eee6 6a27 	vfma.f32	s13, s12, s15
 801663a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801663e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8016642:	eef0 7a40 	vmov.f32	s15, s0
 8016646:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801664a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801664e:	ee15 2a90 	vmov	r2, s11
 8016652:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016656:	1a5b      	subs	r3, r3, r1
 8016658:	2b19      	cmp	r3, #25
 801665a:	dc04      	bgt.n	8016666 <__ieee754_rem_pio2f+0x17e>
 801665c:	edc4 5a00 	vstr	s11, [r4]
 8016660:	eeb0 0a66 	vmov.f32	s0, s13
 8016664:	e7c6      	b.n	80165f4 <__ieee754_rem_pio2f+0x10c>
 8016666:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016750 <__ieee754_rem_pio2f+0x268>
 801666a:	eeb0 0a66 	vmov.f32	s0, s13
 801666e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016672:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016676:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016754 <__ieee754_rem_pio2f+0x26c>
 801667a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801667e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016682:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016686:	ed84 7a00 	vstr	s14, [r4]
 801668a:	e7b3      	b.n	80165f4 <__ieee754_rem_pio2f+0x10c>
 801668c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016690:	db06      	blt.n	80166a0 <__ieee754_rem_pio2f+0x1b8>
 8016692:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016696:	edc0 7a01 	vstr	s15, [r0, #4]
 801669a:	edc0 7a00 	vstr	s15, [r0]
 801669e:	e733      	b.n	8016508 <__ieee754_rem_pio2f+0x20>
 80166a0:	15ea      	asrs	r2, r5, #23
 80166a2:	3a86      	subs	r2, #134	; 0x86
 80166a4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80166a8:	ee07 3a90 	vmov	s15, r3
 80166ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80166b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016758 <__ieee754_rem_pio2f+0x270>
 80166b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80166b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80166bc:	ed8d 7a03 	vstr	s14, [sp, #12]
 80166c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80166c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80166c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80166cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80166d0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80166d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80166d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80166dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166e0:	edcd 7a05 	vstr	s15, [sp, #20]
 80166e4:	d11e      	bne.n	8016724 <__ieee754_rem_pio2f+0x23c>
 80166e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80166ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ee:	bf14      	ite	ne
 80166f0:	2302      	movne	r3, #2
 80166f2:	2301      	moveq	r3, #1
 80166f4:	4919      	ldr	r1, [pc, #100]	; (801675c <__ieee754_rem_pio2f+0x274>)
 80166f6:	9101      	str	r1, [sp, #4]
 80166f8:	2102      	movs	r1, #2
 80166fa:	9100      	str	r1, [sp, #0]
 80166fc:	a803      	add	r0, sp, #12
 80166fe:	4621      	mov	r1, r4
 8016700:	f000 f832 	bl	8016768 <__kernel_rem_pio2f>
 8016704:	2e00      	cmp	r6, #0
 8016706:	f6bf af1c 	bge.w	8016542 <__ieee754_rem_pio2f+0x5a>
 801670a:	edd4 7a00 	vldr	s15, [r4]
 801670e:	eef1 7a67 	vneg.f32	s15, s15
 8016712:	edc4 7a00 	vstr	s15, [r4]
 8016716:	edd4 7a01 	vldr	s15, [r4, #4]
 801671a:	eef1 7a67 	vneg.f32	s15, s15
 801671e:	edc4 7a01 	vstr	s15, [r4, #4]
 8016722:	e779      	b.n	8016618 <__ieee754_rem_pio2f+0x130>
 8016724:	2303      	movs	r3, #3
 8016726:	e7e5      	b.n	80166f4 <__ieee754_rem_pio2f+0x20c>
 8016728:	3f490fd8 	.word	0x3f490fd8
 801672c:	4016cbe3 	.word	0x4016cbe3
 8016730:	3fc90f80 	.word	0x3fc90f80
 8016734:	3fc90fd0 	.word	0x3fc90fd0
 8016738:	37354443 	.word	0x37354443
 801673c:	37354400 	.word	0x37354400
 8016740:	2e85a308 	.word	0x2e85a308
 8016744:	43490f80 	.word	0x43490f80
 8016748:	3f22f984 	.word	0x3f22f984
 801674c:	08017a58 	.word	0x08017a58
 8016750:	2e85a300 	.word	0x2e85a300
 8016754:	248d3132 	.word	0x248d3132
 8016758:	43800000 	.word	0x43800000
 801675c:	08017ad8 	.word	0x08017ad8

08016760 <__ieee754_sqrtf>:
 8016760:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016764:	4770      	bx	lr
	...

08016768 <__kernel_rem_pio2f>:
 8016768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801676c:	ed2d 8b04 	vpush	{d8-d9}
 8016770:	b0d9      	sub	sp, #356	; 0x164
 8016772:	4688      	mov	r8, r1
 8016774:	9002      	str	r0, [sp, #8]
 8016776:	49bb      	ldr	r1, [pc, #748]	; (8016a64 <__kernel_rem_pio2f+0x2fc>)
 8016778:	9866      	ldr	r0, [sp, #408]	; 0x198
 801677a:	9301      	str	r3, [sp, #4]
 801677c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8016780:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8016784:	1e59      	subs	r1, r3, #1
 8016786:	1d13      	adds	r3, r2, #4
 8016788:	db27      	blt.n	80167da <__kernel_rem_pio2f+0x72>
 801678a:	f1b2 0b03 	subs.w	fp, r2, #3
 801678e:	bf48      	it	mi
 8016790:	f102 0b04 	addmi.w	fp, r2, #4
 8016794:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8016798:	1c45      	adds	r5, r0, #1
 801679a:	00ec      	lsls	r4, r5, #3
 801679c:	1a47      	subs	r7, r0, r1
 801679e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8016a74 <__kernel_rem_pio2f+0x30c>
 80167a2:	9403      	str	r4, [sp, #12]
 80167a4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80167a8:	eb0a 0c01 	add.w	ip, sl, r1
 80167ac:	ae1c      	add	r6, sp, #112	; 0x70
 80167ae:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80167b2:	2400      	movs	r4, #0
 80167b4:	4564      	cmp	r4, ip
 80167b6:	dd12      	ble.n	80167de <__kernel_rem_pio2f+0x76>
 80167b8:	9b01      	ldr	r3, [sp, #4]
 80167ba:	ac1c      	add	r4, sp, #112	; 0x70
 80167bc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80167c0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80167c4:	f04f 0c00 	mov.w	ip, #0
 80167c8:	45d4      	cmp	ip, sl
 80167ca:	dc27      	bgt.n	801681c <__kernel_rem_pio2f+0xb4>
 80167cc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80167d0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8016a74 <__kernel_rem_pio2f+0x30c>
 80167d4:	4627      	mov	r7, r4
 80167d6:	2600      	movs	r6, #0
 80167d8:	e016      	b.n	8016808 <__kernel_rem_pio2f+0xa0>
 80167da:	2000      	movs	r0, #0
 80167dc:	e7dc      	b.n	8016798 <__kernel_rem_pio2f+0x30>
 80167de:	42e7      	cmn	r7, r4
 80167e0:	bf5d      	ittte	pl
 80167e2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80167e6:	ee07 3a90 	vmovpl	s15, r3
 80167ea:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80167ee:	eef0 7a47 	vmovmi.f32	s15, s14
 80167f2:	ece6 7a01 	vstmia	r6!, {s15}
 80167f6:	3401      	adds	r4, #1
 80167f8:	e7dc      	b.n	80167b4 <__kernel_rem_pio2f+0x4c>
 80167fa:	ecf9 6a01 	vldmia	r9!, {s13}
 80167fe:	ed97 7a00 	vldr	s14, [r7]
 8016802:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016806:	3601      	adds	r6, #1
 8016808:	428e      	cmp	r6, r1
 801680a:	f1a7 0704 	sub.w	r7, r7, #4
 801680e:	ddf4      	ble.n	80167fa <__kernel_rem_pio2f+0x92>
 8016810:	eceb 7a01 	vstmia	fp!, {s15}
 8016814:	f10c 0c01 	add.w	ip, ip, #1
 8016818:	3404      	adds	r4, #4
 801681a:	e7d5      	b.n	80167c8 <__kernel_rem_pio2f+0x60>
 801681c:	ab08      	add	r3, sp, #32
 801681e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016822:	eddf 8a93 	vldr	s17, [pc, #588]	; 8016a70 <__kernel_rem_pio2f+0x308>
 8016826:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8016a6c <__kernel_rem_pio2f+0x304>
 801682a:	9304      	str	r3, [sp, #16]
 801682c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8016830:	4656      	mov	r6, sl
 8016832:	00b3      	lsls	r3, r6, #2
 8016834:	9305      	str	r3, [sp, #20]
 8016836:	ab58      	add	r3, sp, #352	; 0x160
 8016838:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801683c:	ac08      	add	r4, sp, #32
 801683e:	ab44      	add	r3, sp, #272	; 0x110
 8016840:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8016844:	46a4      	mov	ip, r4
 8016846:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801684a:	4637      	mov	r7, r6
 801684c:	2f00      	cmp	r7, #0
 801684e:	f1a0 0004 	sub.w	r0, r0, #4
 8016852:	dc4f      	bgt.n	80168f4 <__kernel_rem_pio2f+0x18c>
 8016854:	4628      	mov	r0, r5
 8016856:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801685a:	f000 fcc5 	bl	80171e8 <scalbnf>
 801685e:	eeb0 8a40 	vmov.f32	s16, s0
 8016862:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8016866:	ee28 0a00 	vmul.f32	s0, s16, s0
 801686a:	f000 fc7b 	bl	8017164 <floorf>
 801686e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8016872:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016876:	2d00      	cmp	r5, #0
 8016878:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801687c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016880:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016884:	ee17 9a90 	vmov	r9, s15
 8016888:	ee38 8a40 	vsub.f32	s16, s16, s0
 801688c:	dd44      	ble.n	8016918 <__kernel_rem_pio2f+0x1b0>
 801688e:	f106 3cff 	add.w	ip, r6, #4294967295
 8016892:	ab08      	add	r3, sp, #32
 8016894:	f1c5 0e08 	rsb	lr, r5, #8
 8016898:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801689c:	fa47 f00e 	asr.w	r0, r7, lr
 80168a0:	4481      	add	r9, r0
 80168a2:	fa00 f00e 	lsl.w	r0, r0, lr
 80168a6:	1a3f      	subs	r7, r7, r0
 80168a8:	f1c5 0007 	rsb	r0, r5, #7
 80168ac:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80168b0:	4107      	asrs	r7, r0
 80168b2:	2f00      	cmp	r7, #0
 80168b4:	dd3f      	ble.n	8016936 <__kernel_rem_pio2f+0x1ce>
 80168b6:	f04f 0e00 	mov.w	lr, #0
 80168ba:	f109 0901 	add.w	r9, r9, #1
 80168be:	4673      	mov	r3, lr
 80168c0:	4576      	cmp	r6, lr
 80168c2:	dc6b      	bgt.n	801699c <__kernel_rem_pio2f+0x234>
 80168c4:	2d00      	cmp	r5, #0
 80168c6:	dd04      	ble.n	80168d2 <__kernel_rem_pio2f+0x16a>
 80168c8:	2d01      	cmp	r5, #1
 80168ca:	d078      	beq.n	80169be <__kernel_rem_pio2f+0x256>
 80168cc:	2d02      	cmp	r5, #2
 80168ce:	f000 8081 	beq.w	80169d4 <__kernel_rem_pio2f+0x26c>
 80168d2:	2f02      	cmp	r7, #2
 80168d4:	d12f      	bne.n	8016936 <__kernel_rem_pio2f+0x1ce>
 80168d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80168da:	ee30 8a48 	vsub.f32	s16, s0, s16
 80168de:	b353      	cbz	r3, 8016936 <__kernel_rem_pio2f+0x1ce>
 80168e0:	4628      	mov	r0, r5
 80168e2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80168e6:	f000 fc7f 	bl	80171e8 <scalbnf>
 80168ea:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80168ee:	ee38 8a40 	vsub.f32	s16, s16, s0
 80168f2:	e020      	b.n	8016936 <__kernel_rem_pio2f+0x1ce>
 80168f4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80168f8:	3f01      	subs	r7, #1
 80168fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80168fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016902:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016906:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801690a:	ecac 0a01 	vstmia	ip!, {s0}
 801690e:	ed90 0a00 	vldr	s0, [r0]
 8016912:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016916:	e799      	b.n	801684c <__kernel_rem_pio2f+0xe4>
 8016918:	d105      	bne.n	8016926 <__kernel_rem_pio2f+0x1be>
 801691a:	1e70      	subs	r0, r6, #1
 801691c:	ab08      	add	r3, sp, #32
 801691e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8016922:	11ff      	asrs	r7, r7, #7
 8016924:	e7c5      	b.n	80168b2 <__kernel_rem_pio2f+0x14a>
 8016926:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801692a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801692e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016932:	da31      	bge.n	8016998 <__kernel_rem_pio2f+0x230>
 8016934:	2700      	movs	r7, #0
 8016936:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801693e:	f040 809b 	bne.w	8016a78 <__kernel_rem_pio2f+0x310>
 8016942:	1e74      	subs	r4, r6, #1
 8016944:	46a4      	mov	ip, r4
 8016946:	2000      	movs	r0, #0
 8016948:	45d4      	cmp	ip, sl
 801694a:	da4a      	bge.n	80169e2 <__kernel_rem_pio2f+0x27a>
 801694c:	2800      	cmp	r0, #0
 801694e:	d07a      	beq.n	8016a46 <__kernel_rem_pio2f+0x2de>
 8016950:	ab08      	add	r3, sp, #32
 8016952:	3d08      	subs	r5, #8
 8016954:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016958:	2b00      	cmp	r3, #0
 801695a:	f000 8081 	beq.w	8016a60 <__kernel_rem_pio2f+0x2f8>
 801695e:	4628      	mov	r0, r5
 8016960:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016964:	00a5      	lsls	r5, r4, #2
 8016966:	f000 fc3f 	bl	80171e8 <scalbnf>
 801696a:	aa44      	add	r2, sp, #272	; 0x110
 801696c:	1d2b      	adds	r3, r5, #4
 801696e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8016a70 <__kernel_rem_pio2f+0x308>
 8016972:	18d1      	adds	r1, r2, r3
 8016974:	4622      	mov	r2, r4
 8016976:	2a00      	cmp	r2, #0
 8016978:	f280 80ae 	bge.w	8016ad8 <__kernel_rem_pio2f+0x370>
 801697c:	4622      	mov	r2, r4
 801697e:	2a00      	cmp	r2, #0
 8016980:	f2c0 80cc 	blt.w	8016b1c <__kernel_rem_pio2f+0x3b4>
 8016984:	a944      	add	r1, sp, #272	; 0x110
 8016986:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801698a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8016a68 <__kernel_rem_pio2f+0x300>
 801698e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8016a74 <__kernel_rem_pio2f+0x30c>
 8016992:	2000      	movs	r0, #0
 8016994:	1aa1      	subs	r1, r4, r2
 8016996:	e0b6      	b.n	8016b06 <__kernel_rem_pio2f+0x39e>
 8016998:	2702      	movs	r7, #2
 801699a:	e78c      	b.n	80168b6 <__kernel_rem_pio2f+0x14e>
 801699c:	6820      	ldr	r0, [r4, #0]
 801699e:	b94b      	cbnz	r3, 80169b4 <__kernel_rem_pio2f+0x24c>
 80169a0:	b118      	cbz	r0, 80169aa <__kernel_rem_pio2f+0x242>
 80169a2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80169a6:	6020      	str	r0, [r4, #0]
 80169a8:	2001      	movs	r0, #1
 80169aa:	f10e 0e01 	add.w	lr, lr, #1
 80169ae:	3404      	adds	r4, #4
 80169b0:	4603      	mov	r3, r0
 80169b2:	e785      	b.n	80168c0 <__kernel_rem_pio2f+0x158>
 80169b4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80169b8:	6020      	str	r0, [r4, #0]
 80169ba:	4618      	mov	r0, r3
 80169bc:	e7f5      	b.n	80169aa <__kernel_rem_pio2f+0x242>
 80169be:	1e74      	subs	r4, r6, #1
 80169c0:	a808      	add	r0, sp, #32
 80169c2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80169c6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80169ca:	f10d 0c20 	add.w	ip, sp, #32
 80169ce:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80169d2:	e77e      	b.n	80168d2 <__kernel_rem_pio2f+0x16a>
 80169d4:	1e74      	subs	r4, r6, #1
 80169d6:	a808      	add	r0, sp, #32
 80169d8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80169dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80169e0:	e7f3      	b.n	80169ca <__kernel_rem_pio2f+0x262>
 80169e2:	ab08      	add	r3, sp, #32
 80169e4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80169e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80169ec:	4318      	orrs	r0, r3
 80169ee:	e7ab      	b.n	8016948 <__kernel_rem_pio2f+0x1e0>
 80169f0:	f10c 0c01 	add.w	ip, ip, #1
 80169f4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80169f8:	2c00      	cmp	r4, #0
 80169fa:	d0f9      	beq.n	80169f0 <__kernel_rem_pio2f+0x288>
 80169fc:	9b05      	ldr	r3, [sp, #20]
 80169fe:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8016a02:	eb0d 0003 	add.w	r0, sp, r3
 8016a06:	9b01      	ldr	r3, [sp, #4]
 8016a08:	18f4      	adds	r4, r6, r3
 8016a0a:	ab1c      	add	r3, sp, #112	; 0x70
 8016a0c:	1c77      	adds	r7, r6, #1
 8016a0e:	384c      	subs	r0, #76	; 0x4c
 8016a10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016a14:	4466      	add	r6, ip
 8016a16:	42be      	cmp	r6, r7
 8016a18:	f6ff af0b 	blt.w	8016832 <__kernel_rem_pio2f+0xca>
 8016a1c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8016a20:	f8dd e008 	ldr.w	lr, [sp, #8]
 8016a24:	ee07 3a90 	vmov	s15, r3
 8016a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a2c:	f04f 0c00 	mov.w	ip, #0
 8016a30:	ece4 7a01 	vstmia	r4!, {s15}
 8016a34:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8016a74 <__kernel_rem_pio2f+0x30c>
 8016a38:	46a1      	mov	r9, r4
 8016a3a:	458c      	cmp	ip, r1
 8016a3c:	dd07      	ble.n	8016a4e <__kernel_rem_pio2f+0x2e6>
 8016a3e:	ece0 7a01 	vstmia	r0!, {s15}
 8016a42:	3701      	adds	r7, #1
 8016a44:	e7e7      	b.n	8016a16 <__kernel_rem_pio2f+0x2ae>
 8016a46:	9804      	ldr	r0, [sp, #16]
 8016a48:	f04f 0c01 	mov.w	ip, #1
 8016a4c:	e7d2      	b.n	80169f4 <__kernel_rem_pio2f+0x28c>
 8016a4e:	ecfe 6a01 	vldmia	lr!, {s13}
 8016a52:	ed39 7a01 	vldmdb	r9!, {s14}
 8016a56:	f10c 0c01 	add.w	ip, ip, #1
 8016a5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016a5e:	e7ec      	b.n	8016a3a <__kernel_rem_pio2f+0x2d2>
 8016a60:	3c01      	subs	r4, #1
 8016a62:	e775      	b.n	8016950 <__kernel_rem_pio2f+0x1e8>
 8016a64:	08017e1c 	.word	0x08017e1c
 8016a68:	08017df0 	.word	0x08017df0
 8016a6c:	43800000 	.word	0x43800000
 8016a70:	3b800000 	.word	0x3b800000
 8016a74:	00000000 	.word	0x00000000
 8016a78:	9b03      	ldr	r3, [sp, #12]
 8016a7a:	eeb0 0a48 	vmov.f32	s0, s16
 8016a7e:	1a98      	subs	r0, r3, r2
 8016a80:	f000 fbb2 	bl	80171e8 <scalbnf>
 8016a84:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016a6c <__kernel_rem_pio2f+0x304>
 8016a88:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a90:	db19      	blt.n	8016ac6 <__kernel_rem_pio2f+0x35e>
 8016a92:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016a70 <__kernel_rem_pio2f+0x308>
 8016a96:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016a9a:	aa08      	add	r2, sp, #32
 8016a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016aa0:	1c74      	adds	r4, r6, #1
 8016aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016aa6:	3508      	adds	r5, #8
 8016aa8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016ab0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016ab4:	ee10 3a10 	vmov	r3, s0
 8016ab8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8016abc:	ee17 3a90 	vmov	r3, s15
 8016ac0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016ac4:	e74b      	b.n	801695e <__kernel_rem_pio2f+0x1f6>
 8016ac6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016aca:	aa08      	add	r2, sp, #32
 8016acc:	ee10 3a10 	vmov	r3, s0
 8016ad0:	4634      	mov	r4, r6
 8016ad2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8016ad6:	e742      	b.n	801695e <__kernel_rem_pio2f+0x1f6>
 8016ad8:	a808      	add	r0, sp, #32
 8016ada:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8016ade:	9001      	str	r0, [sp, #4]
 8016ae0:	ee07 0a90 	vmov	s15, r0
 8016ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ae8:	3a01      	subs	r2, #1
 8016aea:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016aee:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016af2:	ed61 7a01 	vstmdb	r1!, {s15}
 8016af6:	e73e      	b.n	8016976 <__kernel_rem_pio2f+0x20e>
 8016af8:	ecfc 6a01 	vldmia	ip!, {s13}
 8016afc:	ecb6 7a01 	vldmia	r6!, {s14}
 8016b00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016b04:	3001      	adds	r0, #1
 8016b06:	4550      	cmp	r0, sl
 8016b08:	dc01      	bgt.n	8016b0e <__kernel_rem_pio2f+0x3a6>
 8016b0a:	4288      	cmp	r0, r1
 8016b0c:	ddf4      	ble.n	8016af8 <__kernel_rem_pio2f+0x390>
 8016b0e:	a858      	add	r0, sp, #352	; 0x160
 8016b10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b14:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8016b18:	3a01      	subs	r2, #1
 8016b1a:	e730      	b.n	801697e <__kernel_rem_pio2f+0x216>
 8016b1c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8016b1e:	2a02      	cmp	r2, #2
 8016b20:	dc09      	bgt.n	8016b36 <__kernel_rem_pio2f+0x3ce>
 8016b22:	2a00      	cmp	r2, #0
 8016b24:	dc2a      	bgt.n	8016b7c <__kernel_rem_pio2f+0x414>
 8016b26:	d043      	beq.n	8016bb0 <__kernel_rem_pio2f+0x448>
 8016b28:	f009 0007 	and.w	r0, r9, #7
 8016b2c:	b059      	add	sp, #356	; 0x164
 8016b2e:	ecbd 8b04 	vpop	{d8-d9}
 8016b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b36:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8016b38:	2b03      	cmp	r3, #3
 8016b3a:	d1f5      	bne.n	8016b28 <__kernel_rem_pio2f+0x3c0>
 8016b3c:	ab30      	add	r3, sp, #192	; 0xc0
 8016b3e:	442b      	add	r3, r5
 8016b40:	461a      	mov	r2, r3
 8016b42:	4619      	mov	r1, r3
 8016b44:	4620      	mov	r0, r4
 8016b46:	2800      	cmp	r0, #0
 8016b48:	f1a1 0104 	sub.w	r1, r1, #4
 8016b4c:	dc51      	bgt.n	8016bf2 <__kernel_rem_pio2f+0x48a>
 8016b4e:	4621      	mov	r1, r4
 8016b50:	2901      	cmp	r1, #1
 8016b52:	f1a2 0204 	sub.w	r2, r2, #4
 8016b56:	dc5c      	bgt.n	8016c12 <__kernel_rem_pio2f+0x4aa>
 8016b58:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8016a74 <__kernel_rem_pio2f+0x30c>
 8016b5c:	3304      	adds	r3, #4
 8016b5e:	2c01      	cmp	r4, #1
 8016b60:	dc67      	bgt.n	8016c32 <__kernel_rem_pio2f+0x4ca>
 8016b62:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016b66:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8016b6a:	2f00      	cmp	r7, #0
 8016b6c:	d167      	bne.n	8016c3e <__kernel_rem_pio2f+0x4d6>
 8016b6e:	edc8 6a00 	vstr	s13, [r8]
 8016b72:	ed88 7a01 	vstr	s14, [r8, #4]
 8016b76:	edc8 7a02 	vstr	s15, [r8, #8]
 8016b7a:	e7d5      	b.n	8016b28 <__kernel_rem_pio2f+0x3c0>
 8016b7c:	aa30      	add	r2, sp, #192	; 0xc0
 8016b7e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8016a74 <__kernel_rem_pio2f+0x30c>
 8016b82:	4413      	add	r3, r2
 8016b84:	4622      	mov	r2, r4
 8016b86:	2a00      	cmp	r2, #0
 8016b88:	da24      	bge.n	8016bd4 <__kernel_rem_pio2f+0x46c>
 8016b8a:	b34f      	cbz	r7, 8016be0 <__kernel_rem_pio2f+0x478>
 8016b8c:	eef1 7a47 	vneg.f32	s15, s14
 8016b90:	edc8 7a00 	vstr	s15, [r8]
 8016b94:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8016b98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b9c:	aa31      	add	r2, sp, #196	; 0xc4
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	429c      	cmp	r4, r3
 8016ba2:	da20      	bge.n	8016be6 <__kernel_rem_pio2f+0x47e>
 8016ba4:	b10f      	cbz	r7, 8016baa <__kernel_rem_pio2f+0x442>
 8016ba6:	eef1 7a67 	vneg.f32	s15, s15
 8016baa:	edc8 7a01 	vstr	s15, [r8, #4]
 8016bae:	e7bb      	b.n	8016b28 <__kernel_rem_pio2f+0x3c0>
 8016bb0:	aa30      	add	r2, sp, #192	; 0xc0
 8016bb2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8016a74 <__kernel_rem_pio2f+0x30c>
 8016bb6:	4413      	add	r3, r2
 8016bb8:	2c00      	cmp	r4, #0
 8016bba:	da05      	bge.n	8016bc8 <__kernel_rem_pio2f+0x460>
 8016bbc:	b10f      	cbz	r7, 8016bc2 <__kernel_rem_pio2f+0x45a>
 8016bbe:	eef1 7a67 	vneg.f32	s15, s15
 8016bc2:	edc8 7a00 	vstr	s15, [r8]
 8016bc6:	e7af      	b.n	8016b28 <__kernel_rem_pio2f+0x3c0>
 8016bc8:	ed33 7a01 	vldmdb	r3!, {s14}
 8016bcc:	3c01      	subs	r4, #1
 8016bce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016bd2:	e7f1      	b.n	8016bb8 <__kernel_rem_pio2f+0x450>
 8016bd4:	ed73 7a01 	vldmdb	r3!, {s15}
 8016bd8:	3a01      	subs	r2, #1
 8016bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016bde:	e7d2      	b.n	8016b86 <__kernel_rem_pio2f+0x41e>
 8016be0:	eef0 7a47 	vmov.f32	s15, s14
 8016be4:	e7d4      	b.n	8016b90 <__kernel_rem_pio2f+0x428>
 8016be6:	ecb2 7a01 	vldmia	r2!, {s14}
 8016bea:	3301      	adds	r3, #1
 8016bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016bf0:	e7d6      	b.n	8016ba0 <__kernel_rem_pio2f+0x438>
 8016bf2:	edd1 7a00 	vldr	s15, [r1]
 8016bf6:	edd1 6a01 	vldr	s13, [r1, #4]
 8016bfa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016bfe:	3801      	subs	r0, #1
 8016c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c04:	ed81 7a00 	vstr	s14, [r1]
 8016c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c0c:	edc1 7a01 	vstr	s15, [r1, #4]
 8016c10:	e799      	b.n	8016b46 <__kernel_rem_pio2f+0x3de>
 8016c12:	edd2 7a00 	vldr	s15, [r2]
 8016c16:	edd2 6a01 	vldr	s13, [r2, #4]
 8016c1a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016c1e:	3901      	subs	r1, #1
 8016c20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c24:	ed82 7a00 	vstr	s14, [r2]
 8016c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c2c:	edc2 7a01 	vstr	s15, [r2, #4]
 8016c30:	e78e      	b.n	8016b50 <__kernel_rem_pio2f+0x3e8>
 8016c32:	ed33 7a01 	vldmdb	r3!, {s14}
 8016c36:	3c01      	subs	r4, #1
 8016c38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016c3c:	e78f      	b.n	8016b5e <__kernel_rem_pio2f+0x3f6>
 8016c3e:	eef1 6a66 	vneg.f32	s13, s13
 8016c42:	eeb1 7a47 	vneg.f32	s14, s14
 8016c46:	edc8 6a00 	vstr	s13, [r8]
 8016c4a:	ed88 7a01 	vstr	s14, [r8, #4]
 8016c4e:	eef1 7a67 	vneg.f32	s15, s15
 8016c52:	e790      	b.n	8016b76 <__kernel_rem_pio2f+0x40e>

08016c54 <__kernel_tanf>:
 8016c54:	b508      	push	{r3, lr}
 8016c56:	ee10 3a10 	vmov	r3, s0
 8016c5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016c5e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016c62:	eef0 7a40 	vmov.f32	s15, s0
 8016c66:	da17      	bge.n	8016c98 <__kernel_tanf+0x44>
 8016c68:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016c6c:	ee17 1a10 	vmov	r1, s14
 8016c70:	bb41      	cbnz	r1, 8016cc4 <__kernel_tanf+0x70>
 8016c72:	1c43      	adds	r3, r0, #1
 8016c74:	4313      	orrs	r3, r2
 8016c76:	d108      	bne.n	8016c8a <__kernel_tanf+0x36>
 8016c78:	f000 fa6c 	bl	8017154 <fabsf>
 8016c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016c84:	eeb0 0a67 	vmov.f32	s0, s15
 8016c88:	bd08      	pop	{r3, pc}
 8016c8a:	2801      	cmp	r0, #1
 8016c8c:	d0fa      	beq.n	8016c84 <__kernel_tanf+0x30>
 8016c8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016c92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016c96:	e7f5      	b.n	8016c84 <__kernel_tanf+0x30>
 8016c98:	494c      	ldr	r1, [pc, #304]	; (8016dcc <__kernel_tanf+0x178>)
 8016c9a:	428a      	cmp	r2, r1
 8016c9c:	db12      	blt.n	8016cc4 <__kernel_tanf+0x70>
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	bfb8      	it	lt
 8016ca2:	eef1 7a40 	vneglt.f32	s15, s0
 8016ca6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016dd0 <__kernel_tanf+0x17c>
 8016caa:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016cae:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8016dd4 <__kernel_tanf+0x180>
 8016cb2:	bfb8      	it	lt
 8016cb4:	eef1 0a60 	vneglt.f32	s1, s1
 8016cb8:	ee70 0a60 	vsub.f32	s1, s0, s1
 8016cbc:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016cc0:	eddf 0a45 	vldr	s1, [pc, #276]	; 8016dd8 <__kernel_tanf+0x184>
 8016cc4:	eddf 5a45 	vldr	s11, [pc, #276]	; 8016ddc <__kernel_tanf+0x188>
 8016cc8:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8016de0 <__kernel_tanf+0x18c>
 8016ccc:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8016de4 <__kernel_tanf+0x190>
 8016cd0:	493e      	ldr	r1, [pc, #248]	; (8016dcc <__kernel_tanf+0x178>)
 8016cd2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016cd6:	428a      	cmp	r2, r1
 8016cd8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016cdc:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016ce0:	eddf 5a41 	vldr	s11, [pc, #260]	; 8016de8 <__kernel_tanf+0x194>
 8016ce4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016ce8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8016dec <__kernel_tanf+0x198>
 8016cec:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016cf0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8016df0 <__kernel_tanf+0x19c>
 8016cf4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016cf8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8016df4 <__kernel_tanf+0x1a0>
 8016cfc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016d00:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8016df8 <__kernel_tanf+0x1a4>
 8016d04:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016d08:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8016dfc <__kernel_tanf+0x1a8>
 8016d0c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016d10:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8016e00 <__kernel_tanf+0x1ac>
 8016d14:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016d18:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8016e04 <__kernel_tanf+0x1b0>
 8016d1c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016d20:	eddf 5a39 	vldr	s11, [pc, #228]	; 8016e08 <__kernel_tanf+0x1b4>
 8016d24:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016d28:	eeb0 7a46 	vmov.f32	s14, s12
 8016d2c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016d30:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8016d34:	eeb0 6a60 	vmov.f32	s12, s1
 8016d38:	eea7 6a05 	vfma.f32	s12, s14, s10
 8016d3c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016e0c <__kernel_tanf+0x1b8>
 8016d40:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016d44:	eee5 0a07 	vfma.f32	s1, s10, s14
 8016d48:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016d4c:	db1d      	blt.n	8016d8a <__kernel_tanf+0x136>
 8016d4e:	ee06 0a90 	vmov	s13, r0
 8016d52:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016d56:	ee27 6a07 	vmul.f32	s12, s14, s14
 8016d5a:	ee37 7a00 	vadd.f32	s14, s14, s0
 8016d5e:	179b      	asrs	r3, r3, #30
 8016d60:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8016d64:	f003 0302 	and.w	r3, r3, #2
 8016d68:	f1c3 0301 	rsb	r3, r3, #1
 8016d6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016d70:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8016d74:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016d78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016d7c:	ee07 3a90 	vmov	s15, r3
 8016d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d84:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016d88:	e77c      	b.n	8016c84 <__kernel_tanf+0x30>
 8016d8a:	2801      	cmp	r0, #1
 8016d8c:	d01b      	beq.n	8016dc6 <__kernel_tanf+0x172>
 8016d8e:	4b20      	ldr	r3, [pc, #128]	; (8016e10 <__kernel_tanf+0x1bc>)
 8016d90:	ee17 2a10 	vmov	r2, s14
 8016d94:	401a      	ands	r2, r3
 8016d96:	ee06 2a10 	vmov	s12, r2
 8016d9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016d9e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016da2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016da6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016dae:	ee16 2a90 	vmov	r2, s13
 8016db2:	4013      	ands	r3, r2
 8016db4:	ee07 3a90 	vmov	s15, r3
 8016db8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016dbc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016dc0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016dc4:	e75e      	b.n	8016c84 <__kernel_tanf+0x30>
 8016dc6:	eef0 7a47 	vmov.f32	s15, s14
 8016dca:	e75b      	b.n	8016c84 <__kernel_tanf+0x30>
 8016dcc:	3f2ca140 	.word	0x3f2ca140
 8016dd0:	3f490fda 	.word	0x3f490fda
 8016dd4:	33222168 	.word	0x33222168
 8016dd8:	00000000 	.word	0x00000000
 8016ddc:	b79bae5f 	.word	0xb79bae5f
 8016de0:	38a3f445 	.word	0x38a3f445
 8016de4:	37d95384 	.word	0x37d95384
 8016de8:	3a1a26c8 	.word	0x3a1a26c8
 8016dec:	3b6b6916 	.word	0x3b6b6916
 8016df0:	3cb327a4 	.word	0x3cb327a4
 8016df4:	3e088889 	.word	0x3e088889
 8016df8:	3895c07a 	.word	0x3895c07a
 8016dfc:	398137b9 	.word	0x398137b9
 8016e00:	3abede48 	.word	0x3abede48
 8016e04:	3c11371f 	.word	0x3c11371f
 8016e08:	3d5d0dd1 	.word	0x3d5d0dd1
 8016e0c:	3eaaaaab 	.word	0x3eaaaaab
 8016e10:	fffff000 	.word	0xfffff000

08016e14 <with_errno>:
 8016e14:	b570      	push	{r4, r5, r6, lr}
 8016e16:	4604      	mov	r4, r0
 8016e18:	460d      	mov	r5, r1
 8016e1a:	4616      	mov	r6, r2
 8016e1c:	f000 fa62 	bl	80172e4 <__errno>
 8016e20:	4629      	mov	r1, r5
 8016e22:	6006      	str	r6, [r0, #0]
 8016e24:	4620      	mov	r0, r4
 8016e26:	bd70      	pop	{r4, r5, r6, pc}

08016e28 <xflow>:
 8016e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e2a:	4614      	mov	r4, r2
 8016e2c:	461d      	mov	r5, r3
 8016e2e:	b108      	cbz	r0, 8016e34 <xflow+0xc>
 8016e30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016e34:	e9cd 2300 	strd	r2, r3, [sp]
 8016e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e3c:	4620      	mov	r0, r4
 8016e3e:	4629      	mov	r1, r5
 8016e40:	f7e9 fb8a 	bl	8000558 <__aeabi_dmul>
 8016e44:	2222      	movs	r2, #34	; 0x22
 8016e46:	b003      	add	sp, #12
 8016e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e4c:	f7ff bfe2 	b.w	8016e14 <with_errno>

08016e50 <__math_uflow>:
 8016e50:	b508      	push	{r3, lr}
 8016e52:	2200      	movs	r2, #0
 8016e54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8016e58:	f7ff ffe6 	bl	8016e28 <xflow>
 8016e5c:	ec41 0b10 	vmov	d0, r0, r1
 8016e60:	bd08      	pop	{r3, pc}

08016e62 <__math_oflow>:
 8016e62:	b508      	push	{r3, lr}
 8016e64:	2200      	movs	r2, #0
 8016e66:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8016e6a:	f7ff ffdd 	bl	8016e28 <xflow>
 8016e6e:	ec41 0b10 	vmov	d0, r0, r1
 8016e72:	bd08      	pop	{r3, pc}

08016e74 <fabs>:
 8016e74:	ec51 0b10 	vmov	r0, r1, d0
 8016e78:	ee10 2a10 	vmov	r2, s0
 8016e7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016e80:	ec43 2b10 	vmov	d0, r2, r3
 8016e84:	4770      	bx	lr

08016e86 <finite>:
 8016e86:	b082      	sub	sp, #8
 8016e88:	ed8d 0b00 	vstr	d0, [sp]
 8016e8c:	9801      	ldr	r0, [sp, #4]
 8016e8e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016e92:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016e96:	0fc0      	lsrs	r0, r0, #31
 8016e98:	b002      	add	sp, #8
 8016e9a:	4770      	bx	lr
 8016e9c:	0000      	movs	r0, r0
	...

08016ea0 <scalbn>:
 8016ea0:	b570      	push	{r4, r5, r6, lr}
 8016ea2:	ec55 4b10 	vmov	r4, r5, d0
 8016ea6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016eaa:	4606      	mov	r6, r0
 8016eac:	462b      	mov	r3, r5
 8016eae:	b99a      	cbnz	r2, 8016ed8 <scalbn+0x38>
 8016eb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016eb4:	4323      	orrs	r3, r4
 8016eb6:	d036      	beq.n	8016f26 <scalbn+0x86>
 8016eb8:	4b39      	ldr	r3, [pc, #228]	; (8016fa0 <scalbn+0x100>)
 8016eba:	4629      	mov	r1, r5
 8016ebc:	ee10 0a10 	vmov	r0, s0
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	f7e9 fb49 	bl	8000558 <__aeabi_dmul>
 8016ec6:	4b37      	ldr	r3, [pc, #220]	; (8016fa4 <scalbn+0x104>)
 8016ec8:	429e      	cmp	r6, r3
 8016eca:	4604      	mov	r4, r0
 8016ecc:	460d      	mov	r5, r1
 8016ece:	da10      	bge.n	8016ef2 <scalbn+0x52>
 8016ed0:	a32b      	add	r3, pc, #172	; (adr r3, 8016f80 <scalbn+0xe0>)
 8016ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ed6:	e03a      	b.n	8016f4e <scalbn+0xae>
 8016ed8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016edc:	428a      	cmp	r2, r1
 8016ede:	d10c      	bne.n	8016efa <scalbn+0x5a>
 8016ee0:	ee10 2a10 	vmov	r2, s0
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	4629      	mov	r1, r5
 8016ee8:	f7e9 f980 	bl	80001ec <__adddf3>
 8016eec:	4604      	mov	r4, r0
 8016eee:	460d      	mov	r5, r1
 8016ef0:	e019      	b.n	8016f26 <scalbn+0x86>
 8016ef2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016ef6:	460b      	mov	r3, r1
 8016ef8:	3a36      	subs	r2, #54	; 0x36
 8016efa:	4432      	add	r2, r6
 8016efc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016f00:	428a      	cmp	r2, r1
 8016f02:	dd08      	ble.n	8016f16 <scalbn+0x76>
 8016f04:	2d00      	cmp	r5, #0
 8016f06:	a120      	add	r1, pc, #128	; (adr r1, 8016f88 <scalbn+0xe8>)
 8016f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f0c:	da1c      	bge.n	8016f48 <scalbn+0xa8>
 8016f0e:	a120      	add	r1, pc, #128	; (adr r1, 8016f90 <scalbn+0xf0>)
 8016f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f14:	e018      	b.n	8016f48 <scalbn+0xa8>
 8016f16:	2a00      	cmp	r2, #0
 8016f18:	dd08      	ble.n	8016f2c <scalbn+0x8c>
 8016f1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016f1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016f22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016f26:	ec45 4b10 	vmov	d0, r4, r5
 8016f2a:	bd70      	pop	{r4, r5, r6, pc}
 8016f2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016f30:	da19      	bge.n	8016f66 <scalbn+0xc6>
 8016f32:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016f36:	429e      	cmp	r6, r3
 8016f38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8016f3c:	dd0a      	ble.n	8016f54 <scalbn+0xb4>
 8016f3e:	a112      	add	r1, pc, #72	; (adr r1, 8016f88 <scalbn+0xe8>)
 8016f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d1e2      	bne.n	8016f0e <scalbn+0x6e>
 8016f48:	a30f      	add	r3, pc, #60	; (adr r3, 8016f88 <scalbn+0xe8>)
 8016f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f4e:	f7e9 fb03 	bl	8000558 <__aeabi_dmul>
 8016f52:	e7cb      	b.n	8016eec <scalbn+0x4c>
 8016f54:	a10a      	add	r1, pc, #40	; (adr r1, 8016f80 <scalbn+0xe0>)
 8016f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d0b8      	beq.n	8016ed0 <scalbn+0x30>
 8016f5e:	a10e      	add	r1, pc, #56	; (adr r1, 8016f98 <scalbn+0xf8>)
 8016f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f64:	e7b4      	b.n	8016ed0 <scalbn+0x30>
 8016f66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016f6a:	3236      	adds	r2, #54	; 0x36
 8016f6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016f70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016f74:	4620      	mov	r0, r4
 8016f76:	4b0c      	ldr	r3, [pc, #48]	; (8016fa8 <scalbn+0x108>)
 8016f78:	2200      	movs	r2, #0
 8016f7a:	e7e8      	b.n	8016f4e <scalbn+0xae>
 8016f7c:	f3af 8000 	nop.w
 8016f80:	c2f8f359 	.word	0xc2f8f359
 8016f84:	01a56e1f 	.word	0x01a56e1f
 8016f88:	8800759c 	.word	0x8800759c
 8016f8c:	7e37e43c 	.word	0x7e37e43c
 8016f90:	8800759c 	.word	0x8800759c
 8016f94:	fe37e43c 	.word	0xfe37e43c
 8016f98:	c2f8f359 	.word	0xc2f8f359
 8016f9c:	81a56e1f 	.word	0x81a56e1f
 8016fa0:	43500000 	.word	0x43500000
 8016fa4:	ffff3cb0 	.word	0xffff3cb0
 8016fa8:	3c900000 	.word	0x3c900000

08016fac <atanf>:
 8016fac:	b538      	push	{r3, r4, r5, lr}
 8016fae:	ee10 5a10 	vmov	r5, s0
 8016fb2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016fb6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8016fba:	eef0 7a40 	vmov.f32	s15, s0
 8016fbe:	db10      	blt.n	8016fe2 <atanf+0x36>
 8016fc0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016fc4:	dd04      	ble.n	8016fd0 <atanf+0x24>
 8016fc6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8016fca:	eeb0 0a67 	vmov.f32	s0, s15
 8016fce:	bd38      	pop	{r3, r4, r5, pc}
 8016fd0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017108 <atanf+0x15c>
 8016fd4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801710c <atanf+0x160>
 8016fd8:	2d00      	cmp	r5, #0
 8016fda:	bfd8      	it	le
 8016fdc:	eef0 7a40 	vmovle.f32	s15, s0
 8016fe0:	e7f3      	b.n	8016fca <atanf+0x1e>
 8016fe2:	4b4b      	ldr	r3, [pc, #300]	; (8017110 <atanf+0x164>)
 8016fe4:	429c      	cmp	r4, r3
 8016fe6:	dc10      	bgt.n	801700a <atanf+0x5e>
 8016fe8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8016fec:	da0a      	bge.n	8017004 <atanf+0x58>
 8016fee:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8017114 <atanf+0x168>
 8016ff2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8016ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016ffa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017002:	dce2      	bgt.n	8016fca <atanf+0x1e>
 8017004:	f04f 33ff 	mov.w	r3, #4294967295
 8017008:	e013      	b.n	8017032 <atanf+0x86>
 801700a:	f000 f8a3 	bl	8017154 <fabsf>
 801700e:	4b42      	ldr	r3, [pc, #264]	; (8017118 <atanf+0x16c>)
 8017010:	429c      	cmp	r4, r3
 8017012:	dc4f      	bgt.n	80170b4 <atanf+0x108>
 8017014:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017018:	429c      	cmp	r4, r3
 801701a:	dc41      	bgt.n	80170a0 <atanf+0xf4>
 801701c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017020:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017024:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017028:	2300      	movs	r3, #0
 801702a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801702e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017032:	1c5a      	adds	r2, r3, #1
 8017034:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017038:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801711c <atanf+0x170>
 801703c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8017120 <atanf+0x174>
 8017040:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8017124 <atanf+0x178>
 8017044:	ee66 6a06 	vmul.f32	s13, s12, s12
 8017048:	eee6 5a87 	vfma.f32	s11, s13, s14
 801704c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8017128 <atanf+0x17c>
 8017050:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017054:	eddf 5a35 	vldr	s11, [pc, #212]	; 801712c <atanf+0x180>
 8017058:	eee7 5a26 	vfma.f32	s11, s14, s13
 801705c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8017130 <atanf+0x184>
 8017060:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017064:	eddf 5a33 	vldr	s11, [pc, #204]	; 8017134 <atanf+0x188>
 8017068:	eee7 5a26 	vfma.f32	s11, s14, s13
 801706c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8017138 <atanf+0x18c>
 8017070:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017074:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801713c <atanf+0x190>
 8017078:	eea5 7a26 	vfma.f32	s14, s10, s13
 801707c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8017140 <atanf+0x194>
 8017080:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017084:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8017144 <atanf+0x198>
 8017088:	eea5 7a26 	vfma.f32	s14, s10, s13
 801708c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017090:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017094:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017098:	d121      	bne.n	80170de <atanf+0x132>
 801709a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801709e:	e794      	b.n	8016fca <atanf+0x1e>
 80170a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80170a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80170a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80170ac:	2301      	movs	r3, #1
 80170ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80170b2:	e7be      	b.n	8017032 <atanf+0x86>
 80170b4:	4b24      	ldr	r3, [pc, #144]	; (8017148 <atanf+0x19c>)
 80170b6:	429c      	cmp	r4, r3
 80170b8:	dc0b      	bgt.n	80170d2 <atanf+0x126>
 80170ba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80170be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80170c2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80170c6:	2302      	movs	r3, #2
 80170c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80170cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80170d0:	e7af      	b.n	8017032 <atanf+0x86>
 80170d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80170d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80170da:	2303      	movs	r3, #3
 80170dc:	e7a9      	b.n	8017032 <atanf+0x86>
 80170de:	4a1b      	ldr	r2, [pc, #108]	; (801714c <atanf+0x1a0>)
 80170e0:	491b      	ldr	r1, [pc, #108]	; (8017150 <atanf+0x1a4>)
 80170e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80170e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80170ea:	ed93 0a00 	vldr	s0, [r3]
 80170ee:	ee37 7a40 	vsub.f32	s14, s14, s0
 80170f2:	ed92 0a00 	vldr	s0, [r2]
 80170f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80170fa:	2d00      	cmp	r5, #0
 80170fc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017100:	bfb8      	it	lt
 8017102:	eef1 7a67 	vneglt.f32	s15, s15
 8017106:	e760      	b.n	8016fca <atanf+0x1e>
 8017108:	3fc90fdb 	.word	0x3fc90fdb
 801710c:	bfc90fdb 	.word	0xbfc90fdb
 8017110:	3edfffff 	.word	0x3edfffff
 8017114:	7149f2ca 	.word	0x7149f2ca
 8017118:	3f97ffff 	.word	0x3f97ffff
 801711c:	3c8569d7 	.word	0x3c8569d7
 8017120:	3d4bda59 	.word	0x3d4bda59
 8017124:	bd6ef16b 	.word	0xbd6ef16b
 8017128:	3d886b35 	.word	0x3d886b35
 801712c:	3dba2e6e 	.word	0x3dba2e6e
 8017130:	3e124925 	.word	0x3e124925
 8017134:	3eaaaaab 	.word	0x3eaaaaab
 8017138:	bd15a221 	.word	0xbd15a221
 801713c:	bd9d8795 	.word	0xbd9d8795
 8017140:	bde38e38 	.word	0xbde38e38
 8017144:	be4ccccd 	.word	0xbe4ccccd
 8017148:	401bffff 	.word	0x401bffff
 801714c:	08017e28 	.word	0x08017e28
 8017150:	08017e38 	.word	0x08017e38

08017154 <fabsf>:
 8017154:	ee10 3a10 	vmov	r3, s0
 8017158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801715c:	ee00 3a10 	vmov	s0, r3
 8017160:	4770      	bx	lr
	...

08017164 <floorf>:
 8017164:	ee10 3a10 	vmov	r3, s0
 8017168:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801716c:	3a7f      	subs	r2, #127	; 0x7f
 801716e:	2a16      	cmp	r2, #22
 8017170:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017174:	dc2a      	bgt.n	80171cc <floorf+0x68>
 8017176:	2a00      	cmp	r2, #0
 8017178:	da11      	bge.n	801719e <floorf+0x3a>
 801717a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80171dc <floorf+0x78>
 801717e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017182:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801718a:	dd05      	ble.n	8017198 <floorf+0x34>
 801718c:	2b00      	cmp	r3, #0
 801718e:	da23      	bge.n	80171d8 <floorf+0x74>
 8017190:	4a13      	ldr	r2, [pc, #76]	; (80171e0 <floorf+0x7c>)
 8017192:	2900      	cmp	r1, #0
 8017194:	bf18      	it	ne
 8017196:	4613      	movne	r3, r2
 8017198:	ee00 3a10 	vmov	s0, r3
 801719c:	4770      	bx	lr
 801719e:	4911      	ldr	r1, [pc, #68]	; (80171e4 <floorf+0x80>)
 80171a0:	4111      	asrs	r1, r2
 80171a2:	420b      	tst	r3, r1
 80171a4:	d0fa      	beq.n	801719c <floorf+0x38>
 80171a6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80171dc <floorf+0x78>
 80171aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80171ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80171b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171b6:	ddef      	ble.n	8017198 <floorf+0x34>
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	bfbe      	ittt	lt
 80171bc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80171c0:	fa40 f202 	asrlt.w	r2, r0, r2
 80171c4:	189b      	addlt	r3, r3, r2
 80171c6:	ea23 0301 	bic.w	r3, r3, r1
 80171ca:	e7e5      	b.n	8017198 <floorf+0x34>
 80171cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80171d0:	d3e4      	bcc.n	801719c <floorf+0x38>
 80171d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80171d6:	4770      	bx	lr
 80171d8:	2300      	movs	r3, #0
 80171da:	e7dd      	b.n	8017198 <floorf+0x34>
 80171dc:	7149f2ca 	.word	0x7149f2ca
 80171e0:	bf800000 	.word	0xbf800000
 80171e4:	007fffff 	.word	0x007fffff

080171e8 <scalbnf>:
 80171e8:	ee10 3a10 	vmov	r3, s0
 80171ec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80171f0:	d025      	beq.n	801723e <scalbnf+0x56>
 80171f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80171f6:	d302      	bcc.n	80171fe <scalbnf+0x16>
 80171f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80171fc:	4770      	bx	lr
 80171fe:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017202:	d122      	bne.n	801724a <scalbnf+0x62>
 8017204:	4b2a      	ldr	r3, [pc, #168]	; (80172b0 <scalbnf+0xc8>)
 8017206:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80172b4 <scalbnf+0xcc>
 801720a:	4298      	cmp	r0, r3
 801720c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017210:	db16      	blt.n	8017240 <scalbnf+0x58>
 8017212:	ee10 3a10 	vmov	r3, s0
 8017216:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801721a:	3a19      	subs	r2, #25
 801721c:	4402      	add	r2, r0
 801721e:	2afe      	cmp	r2, #254	; 0xfe
 8017220:	dd15      	ble.n	801724e <scalbnf+0x66>
 8017222:	ee10 3a10 	vmov	r3, s0
 8017226:	eddf 7a24 	vldr	s15, [pc, #144]	; 80172b8 <scalbnf+0xd0>
 801722a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80172bc <scalbnf+0xd4>
 801722e:	2b00      	cmp	r3, #0
 8017230:	eeb0 7a67 	vmov.f32	s14, s15
 8017234:	bfb8      	it	lt
 8017236:	eef0 7a66 	vmovlt.f32	s15, s13
 801723a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801723e:	4770      	bx	lr
 8017240:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80172c0 <scalbnf+0xd8>
 8017244:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017248:	4770      	bx	lr
 801724a:	0dd2      	lsrs	r2, r2, #23
 801724c:	e7e6      	b.n	801721c <scalbnf+0x34>
 801724e:	2a00      	cmp	r2, #0
 8017250:	dd06      	ble.n	8017260 <scalbnf+0x78>
 8017252:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017256:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801725a:	ee00 3a10 	vmov	s0, r3
 801725e:	4770      	bx	lr
 8017260:	f112 0f16 	cmn.w	r2, #22
 8017264:	da1a      	bge.n	801729c <scalbnf+0xb4>
 8017266:	f24c 3350 	movw	r3, #50000	; 0xc350
 801726a:	4298      	cmp	r0, r3
 801726c:	ee10 3a10 	vmov	r3, s0
 8017270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017274:	dd0a      	ble.n	801728c <scalbnf+0xa4>
 8017276:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80172b8 <scalbnf+0xd0>
 801727a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80172bc <scalbnf+0xd4>
 801727e:	eef0 7a40 	vmov.f32	s15, s0
 8017282:	2b00      	cmp	r3, #0
 8017284:	bf18      	it	ne
 8017286:	eeb0 0a47 	vmovne.f32	s0, s14
 801728a:	e7db      	b.n	8017244 <scalbnf+0x5c>
 801728c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80172c0 <scalbnf+0xd8>
 8017290:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80172c4 <scalbnf+0xdc>
 8017294:	eef0 7a40 	vmov.f32	s15, s0
 8017298:	2b00      	cmp	r3, #0
 801729a:	e7f3      	b.n	8017284 <scalbnf+0x9c>
 801729c:	3219      	adds	r2, #25
 801729e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80172a2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80172a6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80172c8 <scalbnf+0xe0>
 80172aa:	ee07 3a10 	vmov	s14, r3
 80172ae:	e7c4      	b.n	801723a <scalbnf+0x52>
 80172b0:	ffff3cb0 	.word	0xffff3cb0
 80172b4:	4c000000 	.word	0x4c000000
 80172b8:	7149f2ca 	.word	0x7149f2ca
 80172bc:	f149f2ca 	.word	0xf149f2ca
 80172c0:	0da24260 	.word	0x0da24260
 80172c4:	8da24260 	.word	0x8da24260
 80172c8:	33000000 	.word	0x33000000

080172cc <abort>:
 80172cc:	b508      	push	{r3, lr}
 80172ce:	2006      	movs	r0, #6
 80172d0:	f000 f97c 	bl	80175cc <raise>
 80172d4:	2001      	movs	r0, #1
 80172d6:	f7ec ff8f 	bl	80041f8 <_exit>

080172da <atoi>:
 80172da:	220a      	movs	r2, #10
 80172dc:	2100      	movs	r1, #0
 80172de:	f000 ba23 	b.w	8017728 <strtol>
	...

080172e4 <__errno>:
 80172e4:	4b01      	ldr	r3, [pc, #4]	; (80172ec <__errno+0x8>)
 80172e6:	6818      	ldr	r0, [r3, #0]
 80172e8:	4770      	bx	lr
 80172ea:	bf00      	nop
 80172ec:	20000014 	.word	0x20000014

080172f0 <__libc_init_array>:
 80172f0:	b570      	push	{r4, r5, r6, lr}
 80172f2:	4d0d      	ldr	r5, [pc, #52]	; (8017328 <__libc_init_array+0x38>)
 80172f4:	4c0d      	ldr	r4, [pc, #52]	; (801732c <__libc_init_array+0x3c>)
 80172f6:	1b64      	subs	r4, r4, r5
 80172f8:	10a4      	asrs	r4, r4, #2
 80172fa:	2600      	movs	r6, #0
 80172fc:	42a6      	cmp	r6, r4
 80172fe:	d109      	bne.n	8017314 <__libc_init_array+0x24>
 8017300:	4d0b      	ldr	r5, [pc, #44]	; (8017330 <__libc_init_array+0x40>)
 8017302:	4c0c      	ldr	r4, [pc, #48]	; (8017334 <__libc_init_array+0x44>)
 8017304:	f000 fa28 	bl	8017758 <_init>
 8017308:	1b64      	subs	r4, r4, r5
 801730a:	10a4      	asrs	r4, r4, #2
 801730c:	2600      	movs	r6, #0
 801730e:	42a6      	cmp	r6, r4
 8017310:	d105      	bne.n	801731e <__libc_init_array+0x2e>
 8017312:	bd70      	pop	{r4, r5, r6, pc}
 8017314:	f855 3b04 	ldr.w	r3, [r5], #4
 8017318:	4798      	blx	r3
 801731a:	3601      	adds	r6, #1
 801731c:	e7ee      	b.n	80172fc <__libc_init_array+0xc>
 801731e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017322:	4798      	blx	r3
 8017324:	3601      	adds	r6, #1
 8017326:	e7f2      	b.n	801730e <__libc_init_array+0x1e>
 8017328:	08017f54 	.word	0x08017f54
 801732c:	08017f54 	.word	0x08017f54
 8017330:	08017f54 	.word	0x08017f54
 8017334:	08017f68 	.word	0x08017f68

08017338 <malloc>:
 8017338:	4b02      	ldr	r3, [pc, #8]	; (8017344 <malloc+0xc>)
 801733a:	4601      	mov	r1, r0
 801733c:	6818      	ldr	r0, [r3, #0]
 801733e:	f000 b899 	b.w	8017474 <_malloc_r>
 8017342:	bf00      	nop
 8017344:	20000014 	.word	0x20000014

08017348 <free>:
 8017348:	4b02      	ldr	r3, [pc, #8]	; (8017354 <free+0xc>)
 801734a:	4601      	mov	r1, r0
 801734c:	6818      	ldr	r0, [r3, #0]
 801734e:	f000 b825 	b.w	801739c <_free_r>
 8017352:	bf00      	nop
 8017354:	20000014 	.word	0x20000014

08017358 <memmove>:
 8017358:	4288      	cmp	r0, r1
 801735a:	b510      	push	{r4, lr}
 801735c:	eb01 0402 	add.w	r4, r1, r2
 8017360:	d902      	bls.n	8017368 <memmove+0x10>
 8017362:	4284      	cmp	r4, r0
 8017364:	4623      	mov	r3, r4
 8017366:	d807      	bhi.n	8017378 <memmove+0x20>
 8017368:	1e43      	subs	r3, r0, #1
 801736a:	42a1      	cmp	r1, r4
 801736c:	d008      	beq.n	8017380 <memmove+0x28>
 801736e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017376:	e7f8      	b.n	801736a <memmove+0x12>
 8017378:	4402      	add	r2, r0
 801737a:	4601      	mov	r1, r0
 801737c:	428a      	cmp	r2, r1
 801737e:	d100      	bne.n	8017382 <memmove+0x2a>
 8017380:	bd10      	pop	{r4, pc}
 8017382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801738a:	e7f7      	b.n	801737c <memmove+0x24>

0801738c <memset>:
 801738c:	4402      	add	r2, r0
 801738e:	4603      	mov	r3, r0
 8017390:	4293      	cmp	r3, r2
 8017392:	d100      	bne.n	8017396 <memset+0xa>
 8017394:	4770      	bx	lr
 8017396:	f803 1b01 	strb.w	r1, [r3], #1
 801739a:	e7f9      	b.n	8017390 <memset+0x4>

0801739c <_free_r>:
 801739c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801739e:	2900      	cmp	r1, #0
 80173a0:	d044      	beq.n	801742c <_free_r+0x90>
 80173a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173a6:	9001      	str	r0, [sp, #4]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	f1a1 0404 	sub.w	r4, r1, #4
 80173ae:	bfb8      	it	lt
 80173b0:	18e4      	addlt	r4, r4, r3
 80173b2:	f000 f9c3 	bl	801773c <__malloc_lock>
 80173b6:	4a1e      	ldr	r2, [pc, #120]	; (8017430 <_free_r+0x94>)
 80173b8:	9801      	ldr	r0, [sp, #4]
 80173ba:	6813      	ldr	r3, [r2, #0]
 80173bc:	b933      	cbnz	r3, 80173cc <_free_r+0x30>
 80173be:	6063      	str	r3, [r4, #4]
 80173c0:	6014      	str	r4, [r2, #0]
 80173c2:	b003      	add	sp, #12
 80173c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173c8:	f000 b9be 	b.w	8017748 <__malloc_unlock>
 80173cc:	42a3      	cmp	r3, r4
 80173ce:	d908      	bls.n	80173e2 <_free_r+0x46>
 80173d0:	6825      	ldr	r5, [r4, #0]
 80173d2:	1961      	adds	r1, r4, r5
 80173d4:	428b      	cmp	r3, r1
 80173d6:	bf01      	itttt	eq
 80173d8:	6819      	ldreq	r1, [r3, #0]
 80173da:	685b      	ldreq	r3, [r3, #4]
 80173dc:	1949      	addeq	r1, r1, r5
 80173de:	6021      	streq	r1, [r4, #0]
 80173e0:	e7ed      	b.n	80173be <_free_r+0x22>
 80173e2:	461a      	mov	r2, r3
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	b10b      	cbz	r3, 80173ec <_free_r+0x50>
 80173e8:	42a3      	cmp	r3, r4
 80173ea:	d9fa      	bls.n	80173e2 <_free_r+0x46>
 80173ec:	6811      	ldr	r1, [r2, #0]
 80173ee:	1855      	adds	r5, r2, r1
 80173f0:	42a5      	cmp	r5, r4
 80173f2:	d10b      	bne.n	801740c <_free_r+0x70>
 80173f4:	6824      	ldr	r4, [r4, #0]
 80173f6:	4421      	add	r1, r4
 80173f8:	1854      	adds	r4, r2, r1
 80173fa:	42a3      	cmp	r3, r4
 80173fc:	6011      	str	r1, [r2, #0]
 80173fe:	d1e0      	bne.n	80173c2 <_free_r+0x26>
 8017400:	681c      	ldr	r4, [r3, #0]
 8017402:	685b      	ldr	r3, [r3, #4]
 8017404:	6053      	str	r3, [r2, #4]
 8017406:	4421      	add	r1, r4
 8017408:	6011      	str	r1, [r2, #0]
 801740a:	e7da      	b.n	80173c2 <_free_r+0x26>
 801740c:	d902      	bls.n	8017414 <_free_r+0x78>
 801740e:	230c      	movs	r3, #12
 8017410:	6003      	str	r3, [r0, #0]
 8017412:	e7d6      	b.n	80173c2 <_free_r+0x26>
 8017414:	6825      	ldr	r5, [r4, #0]
 8017416:	1961      	adds	r1, r4, r5
 8017418:	428b      	cmp	r3, r1
 801741a:	bf04      	itt	eq
 801741c:	6819      	ldreq	r1, [r3, #0]
 801741e:	685b      	ldreq	r3, [r3, #4]
 8017420:	6063      	str	r3, [r4, #4]
 8017422:	bf04      	itt	eq
 8017424:	1949      	addeq	r1, r1, r5
 8017426:	6021      	streq	r1, [r4, #0]
 8017428:	6054      	str	r4, [r2, #4]
 801742a:	e7ca      	b.n	80173c2 <_free_r+0x26>
 801742c:	b003      	add	sp, #12
 801742e:	bd30      	pop	{r4, r5, pc}
 8017430:	2000d840 	.word	0x2000d840

08017434 <sbrk_aligned>:
 8017434:	b570      	push	{r4, r5, r6, lr}
 8017436:	4e0e      	ldr	r6, [pc, #56]	; (8017470 <sbrk_aligned+0x3c>)
 8017438:	460c      	mov	r4, r1
 801743a:	6831      	ldr	r1, [r6, #0]
 801743c:	4605      	mov	r5, r0
 801743e:	b911      	cbnz	r1, 8017446 <sbrk_aligned+0x12>
 8017440:	f000 f88c 	bl	801755c <_sbrk_r>
 8017444:	6030      	str	r0, [r6, #0]
 8017446:	4621      	mov	r1, r4
 8017448:	4628      	mov	r0, r5
 801744a:	f000 f887 	bl	801755c <_sbrk_r>
 801744e:	1c43      	adds	r3, r0, #1
 8017450:	d00a      	beq.n	8017468 <sbrk_aligned+0x34>
 8017452:	1cc4      	adds	r4, r0, #3
 8017454:	f024 0403 	bic.w	r4, r4, #3
 8017458:	42a0      	cmp	r0, r4
 801745a:	d007      	beq.n	801746c <sbrk_aligned+0x38>
 801745c:	1a21      	subs	r1, r4, r0
 801745e:	4628      	mov	r0, r5
 8017460:	f000 f87c 	bl	801755c <_sbrk_r>
 8017464:	3001      	adds	r0, #1
 8017466:	d101      	bne.n	801746c <sbrk_aligned+0x38>
 8017468:	f04f 34ff 	mov.w	r4, #4294967295
 801746c:	4620      	mov	r0, r4
 801746e:	bd70      	pop	{r4, r5, r6, pc}
 8017470:	2000d844 	.word	0x2000d844

08017474 <_malloc_r>:
 8017474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017478:	1ccd      	adds	r5, r1, #3
 801747a:	f025 0503 	bic.w	r5, r5, #3
 801747e:	3508      	adds	r5, #8
 8017480:	2d0c      	cmp	r5, #12
 8017482:	bf38      	it	cc
 8017484:	250c      	movcc	r5, #12
 8017486:	2d00      	cmp	r5, #0
 8017488:	4607      	mov	r7, r0
 801748a:	db01      	blt.n	8017490 <_malloc_r+0x1c>
 801748c:	42a9      	cmp	r1, r5
 801748e:	d905      	bls.n	801749c <_malloc_r+0x28>
 8017490:	230c      	movs	r3, #12
 8017492:	603b      	str	r3, [r7, #0]
 8017494:	2600      	movs	r6, #0
 8017496:	4630      	mov	r0, r6
 8017498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801749c:	4e2e      	ldr	r6, [pc, #184]	; (8017558 <_malloc_r+0xe4>)
 801749e:	f000 f94d 	bl	801773c <__malloc_lock>
 80174a2:	6833      	ldr	r3, [r6, #0]
 80174a4:	461c      	mov	r4, r3
 80174a6:	bb34      	cbnz	r4, 80174f6 <_malloc_r+0x82>
 80174a8:	4629      	mov	r1, r5
 80174aa:	4638      	mov	r0, r7
 80174ac:	f7ff ffc2 	bl	8017434 <sbrk_aligned>
 80174b0:	1c43      	adds	r3, r0, #1
 80174b2:	4604      	mov	r4, r0
 80174b4:	d14d      	bne.n	8017552 <_malloc_r+0xde>
 80174b6:	6834      	ldr	r4, [r6, #0]
 80174b8:	4626      	mov	r6, r4
 80174ba:	2e00      	cmp	r6, #0
 80174bc:	d140      	bne.n	8017540 <_malloc_r+0xcc>
 80174be:	6823      	ldr	r3, [r4, #0]
 80174c0:	4631      	mov	r1, r6
 80174c2:	4638      	mov	r0, r7
 80174c4:	eb04 0803 	add.w	r8, r4, r3
 80174c8:	f000 f848 	bl	801755c <_sbrk_r>
 80174cc:	4580      	cmp	r8, r0
 80174ce:	d13a      	bne.n	8017546 <_malloc_r+0xd2>
 80174d0:	6821      	ldr	r1, [r4, #0]
 80174d2:	3503      	adds	r5, #3
 80174d4:	1a6d      	subs	r5, r5, r1
 80174d6:	f025 0503 	bic.w	r5, r5, #3
 80174da:	3508      	adds	r5, #8
 80174dc:	2d0c      	cmp	r5, #12
 80174de:	bf38      	it	cc
 80174e0:	250c      	movcc	r5, #12
 80174e2:	4629      	mov	r1, r5
 80174e4:	4638      	mov	r0, r7
 80174e6:	f7ff ffa5 	bl	8017434 <sbrk_aligned>
 80174ea:	3001      	adds	r0, #1
 80174ec:	d02b      	beq.n	8017546 <_malloc_r+0xd2>
 80174ee:	6823      	ldr	r3, [r4, #0]
 80174f0:	442b      	add	r3, r5
 80174f2:	6023      	str	r3, [r4, #0]
 80174f4:	e00e      	b.n	8017514 <_malloc_r+0xa0>
 80174f6:	6822      	ldr	r2, [r4, #0]
 80174f8:	1b52      	subs	r2, r2, r5
 80174fa:	d41e      	bmi.n	801753a <_malloc_r+0xc6>
 80174fc:	2a0b      	cmp	r2, #11
 80174fe:	d916      	bls.n	801752e <_malloc_r+0xba>
 8017500:	1961      	adds	r1, r4, r5
 8017502:	42a3      	cmp	r3, r4
 8017504:	6025      	str	r5, [r4, #0]
 8017506:	bf18      	it	ne
 8017508:	6059      	strne	r1, [r3, #4]
 801750a:	6863      	ldr	r3, [r4, #4]
 801750c:	bf08      	it	eq
 801750e:	6031      	streq	r1, [r6, #0]
 8017510:	5162      	str	r2, [r4, r5]
 8017512:	604b      	str	r3, [r1, #4]
 8017514:	4638      	mov	r0, r7
 8017516:	f104 060b 	add.w	r6, r4, #11
 801751a:	f000 f915 	bl	8017748 <__malloc_unlock>
 801751e:	f026 0607 	bic.w	r6, r6, #7
 8017522:	1d23      	adds	r3, r4, #4
 8017524:	1af2      	subs	r2, r6, r3
 8017526:	d0b6      	beq.n	8017496 <_malloc_r+0x22>
 8017528:	1b9b      	subs	r3, r3, r6
 801752a:	50a3      	str	r3, [r4, r2]
 801752c:	e7b3      	b.n	8017496 <_malloc_r+0x22>
 801752e:	6862      	ldr	r2, [r4, #4]
 8017530:	42a3      	cmp	r3, r4
 8017532:	bf0c      	ite	eq
 8017534:	6032      	streq	r2, [r6, #0]
 8017536:	605a      	strne	r2, [r3, #4]
 8017538:	e7ec      	b.n	8017514 <_malloc_r+0xa0>
 801753a:	4623      	mov	r3, r4
 801753c:	6864      	ldr	r4, [r4, #4]
 801753e:	e7b2      	b.n	80174a6 <_malloc_r+0x32>
 8017540:	4634      	mov	r4, r6
 8017542:	6876      	ldr	r6, [r6, #4]
 8017544:	e7b9      	b.n	80174ba <_malloc_r+0x46>
 8017546:	230c      	movs	r3, #12
 8017548:	603b      	str	r3, [r7, #0]
 801754a:	4638      	mov	r0, r7
 801754c:	f000 f8fc 	bl	8017748 <__malloc_unlock>
 8017550:	e7a1      	b.n	8017496 <_malloc_r+0x22>
 8017552:	6025      	str	r5, [r4, #0]
 8017554:	e7de      	b.n	8017514 <_malloc_r+0xa0>
 8017556:	bf00      	nop
 8017558:	2000d840 	.word	0x2000d840

0801755c <_sbrk_r>:
 801755c:	b538      	push	{r3, r4, r5, lr}
 801755e:	4d06      	ldr	r5, [pc, #24]	; (8017578 <_sbrk_r+0x1c>)
 8017560:	2300      	movs	r3, #0
 8017562:	4604      	mov	r4, r0
 8017564:	4608      	mov	r0, r1
 8017566:	602b      	str	r3, [r5, #0]
 8017568:	f7ec fe50 	bl	800420c <_sbrk>
 801756c:	1c43      	adds	r3, r0, #1
 801756e:	d102      	bne.n	8017576 <_sbrk_r+0x1a>
 8017570:	682b      	ldr	r3, [r5, #0]
 8017572:	b103      	cbz	r3, 8017576 <_sbrk_r+0x1a>
 8017574:	6023      	str	r3, [r4, #0]
 8017576:	bd38      	pop	{r3, r4, r5, pc}
 8017578:	2000d848 	.word	0x2000d848

0801757c <_raise_r>:
 801757c:	291f      	cmp	r1, #31
 801757e:	b538      	push	{r3, r4, r5, lr}
 8017580:	4604      	mov	r4, r0
 8017582:	460d      	mov	r5, r1
 8017584:	d904      	bls.n	8017590 <_raise_r+0x14>
 8017586:	2316      	movs	r3, #22
 8017588:	6003      	str	r3, [r0, #0]
 801758a:	f04f 30ff 	mov.w	r0, #4294967295
 801758e:	bd38      	pop	{r3, r4, r5, pc}
 8017590:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017592:	b112      	cbz	r2, 801759a <_raise_r+0x1e>
 8017594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017598:	b94b      	cbnz	r3, 80175ae <_raise_r+0x32>
 801759a:	4620      	mov	r0, r4
 801759c:	f000 f830 	bl	8017600 <_getpid_r>
 80175a0:	462a      	mov	r2, r5
 80175a2:	4601      	mov	r1, r0
 80175a4:	4620      	mov	r0, r4
 80175a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175aa:	f000 b817 	b.w	80175dc <_kill_r>
 80175ae:	2b01      	cmp	r3, #1
 80175b0:	d00a      	beq.n	80175c8 <_raise_r+0x4c>
 80175b2:	1c59      	adds	r1, r3, #1
 80175b4:	d103      	bne.n	80175be <_raise_r+0x42>
 80175b6:	2316      	movs	r3, #22
 80175b8:	6003      	str	r3, [r0, #0]
 80175ba:	2001      	movs	r0, #1
 80175bc:	e7e7      	b.n	801758e <_raise_r+0x12>
 80175be:	2400      	movs	r4, #0
 80175c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80175c4:	4628      	mov	r0, r5
 80175c6:	4798      	blx	r3
 80175c8:	2000      	movs	r0, #0
 80175ca:	e7e0      	b.n	801758e <_raise_r+0x12>

080175cc <raise>:
 80175cc:	4b02      	ldr	r3, [pc, #8]	; (80175d8 <raise+0xc>)
 80175ce:	4601      	mov	r1, r0
 80175d0:	6818      	ldr	r0, [r3, #0]
 80175d2:	f7ff bfd3 	b.w	801757c <_raise_r>
 80175d6:	bf00      	nop
 80175d8:	20000014 	.word	0x20000014

080175dc <_kill_r>:
 80175dc:	b538      	push	{r3, r4, r5, lr}
 80175de:	4d07      	ldr	r5, [pc, #28]	; (80175fc <_kill_r+0x20>)
 80175e0:	2300      	movs	r3, #0
 80175e2:	4604      	mov	r4, r0
 80175e4:	4608      	mov	r0, r1
 80175e6:	4611      	mov	r1, r2
 80175e8:	602b      	str	r3, [r5, #0]
 80175ea:	f7ec fdf5 	bl	80041d8 <_kill>
 80175ee:	1c43      	adds	r3, r0, #1
 80175f0:	d102      	bne.n	80175f8 <_kill_r+0x1c>
 80175f2:	682b      	ldr	r3, [r5, #0]
 80175f4:	b103      	cbz	r3, 80175f8 <_kill_r+0x1c>
 80175f6:	6023      	str	r3, [r4, #0]
 80175f8:	bd38      	pop	{r3, r4, r5, pc}
 80175fa:	bf00      	nop
 80175fc:	2000d848 	.word	0x2000d848

08017600 <_getpid_r>:
 8017600:	f7ec bde2 	b.w	80041c8 <_getpid>

08017604 <strcat>:
 8017604:	b510      	push	{r4, lr}
 8017606:	4602      	mov	r2, r0
 8017608:	7814      	ldrb	r4, [r2, #0]
 801760a:	4613      	mov	r3, r2
 801760c:	3201      	adds	r2, #1
 801760e:	2c00      	cmp	r4, #0
 8017610:	d1fa      	bne.n	8017608 <strcat+0x4>
 8017612:	3b01      	subs	r3, #1
 8017614:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017618:	f803 2f01 	strb.w	r2, [r3, #1]!
 801761c:	2a00      	cmp	r2, #0
 801761e:	d1f9      	bne.n	8017614 <strcat+0x10>
 8017620:	bd10      	pop	{r4, pc}
	...

08017624 <_strtol_l.constprop.0>:
 8017624:	2b01      	cmp	r3, #1
 8017626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801762a:	d001      	beq.n	8017630 <_strtol_l.constprop.0+0xc>
 801762c:	2b24      	cmp	r3, #36	; 0x24
 801762e:	d906      	bls.n	801763e <_strtol_l.constprop.0+0x1a>
 8017630:	f7ff fe58 	bl	80172e4 <__errno>
 8017634:	2316      	movs	r3, #22
 8017636:	6003      	str	r3, [r0, #0]
 8017638:	2000      	movs	r0, #0
 801763a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801763e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017724 <_strtol_l.constprop.0+0x100>
 8017642:	460d      	mov	r5, r1
 8017644:	462e      	mov	r6, r5
 8017646:	f815 4b01 	ldrb.w	r4, [r5], #1
 801764a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801764e:	f017 0708 	ands.w	r7, r7, #8
 8017652:	d1f7      	bne.n	8017644 <_strtol_l.constprop.0+0x20>
 8017654:	2c2d      	cmp	r4, #45	; 0x2d
 8017656:	d132      	bne.n	80176be <_strtol_l.constprop.0+0x9a>
 8017658:	782c      	ldrb	r4, [r5, #0]
 801765a:	2701      	movs	r7, #1
 801765c:	1cb5      	adds	r5, r6, #2
 801765e:	2b00      	cmp	r3, #0
 8017660:	d05b      	beq.n	801771a <_strtol_l.constprop.0+0xf6>
 8017662:	2b10      	cmp	r3, #16
 8017664:	d109      	bne.n	801767a <_strtol_l.constprop.0+0x56>
 8017666:	2c30      	cmp	r4, #48	; 0x30
 8017668:	d107      	bne.n	801767a <_strtol_l.constprop.0+0x56>
 801766a:	782c      	ldrb	r4, [r5, #0]
 801766c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017670:	2c58      	cmp	r4, #88	; 0x58
 8017672:	d14d      	bne.n	8017710 <_strtol_l.constprop.0+0xec>
 8017674:	786c      	ldrb	r4, [r5, #1]
 8017676:	2310      	movs	r3, #16
 8017678:	3502      	adds	r5, #2
 801767a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801767e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017682:	f04f 0c00 	mov.w	ip, #0
 8017686:	fbb8 f9f3 	udiv	r9, r8, r3
 801768a:	4666      	mov	r6, ip
 801768c:	fb03 8a19 	mls	sl, r3, r9, r8
 8017690:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017694:	f1be 0f09 	cmp.w	lr, #9
 8017698:	d816      	bhi.n	80176c8 <_strtol_l.constprop.0+0xa4>
 801769a:	4674      	mov	r4, lr
 801769c:	42a3      	cmp	r3, r4
 801769e:	dd24      	ble.n	80176ea <_strtol_l.constprop.0+0xc6>
 80176a0:	f1bc 0f00 	cmp.w	ip, #0
 80176a4:	db1e      	blt.n	80176e4 <_strtol_l.constprop.0+0xc0>
 80176a6:	45b1      	cmp	r9, r6
 80176a8:	d31c      	bcc.n	80176e4 <_strtol_l.constprop.0+0xc0>
 80176aa:	d101      	bne.n	80176b0 <_strtol_l.constprop.0+0x8c>
 80176ac:	45a2      	cmp	sl, r4
 80176ae:	db19      	blt.n	80176e4 <_strtol_l.constprop.0+0xc0>
 80176b0:	fb06 4603 	mla	r6, r6, r3, r4
 80176b4:	f04f 0c01 	mov.w	ip, #1
 80176b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176bc:	e7e8      	b.n	8017690 <_strtol_l.constprop.0+0x6c>
 80176be:	2c2b      	cmp	r4, #43	; 0x2b
 80176c0:	bf04      	itt	eq
 80176c2:	782c      	ldrbeq	r4, [r5, #0]
 80176c4:	1cb5      	addeq	r5, r6, #2
 80176c6:	e7ca      	b.n	801765e <_strtol_l.constprop.0+0x3a>
 80176c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80176cc:	f1be 0f19 	cmp.w	lr, #25
 80176d0:	d801      	bhi.n	80176d6 <_strtol_l.constprop.0+0xb2>
 80176d2:	3c37      	subs	r4, #55	; 0x37
 80176d4:	e7e2      	b.n	801769c <_strtol_l.constprop.0+0x78>
 80176d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80176da:	f1be 0f19 	cmp.w	lr, #25
 80176de:	d804      	bhi.n	80176ea <_strtol_l.constprop.0+0xc6>
 80176e0:	3c57      	subs	r4, #87	; 0x57
 80176e2:	e7db      	b.n	801769c <_strtol_l.constprop.0+0x78>
 80176e4:	f04f 3cff 	mov.w	ip, #4294967295
 80176e8:	e7e6      	b.n	80176b8 <_strtol_l.constprop.0+0x94>
 80176ea:	f1bc 0f00 	cmp.w	ip, #0
 80176ee:	da05      	bge.n	80176fc <_strtol_l.constprop.0+0xd8>
 80176f0:	2322      	movs	r3, #34	; 0x22
 80176f2:	6003      	str	r3, [r0, #0]
 80176f4:	4646      	mov	r6, r8
 80176f6:	b942      	cbnz	r2, 801770a <_strtol_l.constprop.0+0xe6>
 80176f8:	4630      	mov	r0, r6
 80176fa:	e79e      	b.n	801763a <_strtol_l.constprop.0+0x16>
 80176fc:	b107      	cbz	r7, 8017700 <_strtol_l.constprop.0+0xdc>
 80176fe:	4276      	negs	r6, r6
 8017700:	2a00      	cmp	r2, #0
 8017702:	d0f9      	beq.n	80176f8 <_strtol_l.constprop.0+0xd4>
 8017704:	f1bc 0f00 	cmp.w	ip, #0
 8017708:	d000      	beq.n	801770c <_strtol_l.constprop.0+0xe8>
 801770a:	1e69      	subs	r1, r5, #1
 801770c:	6011      	str	r1, [r2, #0]
 801770e:	e7f3      	b.n	80176f8 <_strtol_l.constprop.0+0xd4>
 8017710:	2430      	movs	r4, #48	; 0x30
 8017712:	2b00      	cmp	r3, #0
 8017714:	d1b1      	bne.n	801767a <_strtol_l.constprop.0+0x56>
 8017716:	2308      	movs	r3, #8
 8017718:	e7af      	b.n	801767a <_strtol_l.constprop.0+0x56>
 801771a:	2c30      	cmp	r4, #48	; 0x30
 801771c:	d0a5      	beq.n	801766a <_strtol_l.constprop.0+0x46>
 801771e:	230a      	movs	r3, #10
 8017720:	e7ab      	b.n	801767a <_strtol_l.constprop.0+0x56>
 8017722:	bf00      	nop
 8017724:	08017e49 	.word	0x08017e49

08017728 <strtol>:
 8017728:	4613      	mov	r3, r2
 801772a:	460a      	mov	r2, r1
 801772c:	4601      	mov	r1, r0
 801772e:	4802      	ldr	r0, [pc, #8]	; (8017738 <strtol+0x10>)
 8017730:	6800      	ldr	r0, [r0, #0]
 8017732:	f7ff bf77 	b.w	8017624 <_strtol_l.constprop.0>
 8017736:	bf00      	nop
 8017738:	20000014 	.word	0x20000014

0801773c <__malloc_lock>:
 801773c:	4801      	ldr	r0, [pc, #4]	; (8017744 <__malloc_lock+0x8>)
 801773e:	f000 b809 	b.w	8017754 <__retarget_lock_acquire_recursive>
 8017742:	bf00      	nop
 8017744:	2000d84c 	.word	0x2000d84c

08017748 <__malloc_unlock>:
 8017748:	4801      	ldr	r0, [pc, #4]	; (8017750 <__malloc_unlock+0x8>)
 801774a:	f000 b804 	b.w	8017756 <__retarget_lock_release_recursive>
 801774e:	bf00      	nop
 8017750:	2000d84c 	.word	0x2000d84c

08017754 <__retarget_lock_acquire_recursive>:
 8017754:	4770      	bx	lr

08017756 <__retarget_lock_release_recursive>:
 8017756:	4770      	bx	lr

08017758 <_init>:
 8017758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801775a:	bf00      	nop
 801775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801775e:	bc08      	pop	{r3}
 8017760:	469e      	mov	lr, r3
 8017762:	4770      	bx	lr

08017764 <_fini>:
 8017764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017766:	bf00      	nop
 8017768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801776a:	bc08      	pop	{r3}
 801776c:	469e      	mov	lr, r3
 801776e:	4770      	bx	lr
