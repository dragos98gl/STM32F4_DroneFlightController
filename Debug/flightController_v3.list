
flightController_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e0c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001466c  0801e258  0801e258  0002e258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080328c4  080328c4  00050194  2**0
                  CONTENTS
  4 .ARM          00000008  080328c4  080328c4  000428c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080328cc  080328cc  00050194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080328cc  080328cc  000428cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080328d4  080328d4  000428d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  080328d8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00050194  2**0
                  CONTENTS
 10 .bss          0000e43c  20000194  20000194  00050194  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000e5d0  2000e5d0  00050194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050194  2**0
                  CONTENTS, READONLY
 13 .debug_info   000b4d01  00000000  00000000  000501c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000e80f  00000000  00000000  00104ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003620  00000000  00000000  001136d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003250  00000000  00000000  00116cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000354cb  00000000  00000000  00119f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00047667  00000000  00000000  0014f413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105fc0  00000000  00000000  00196a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  0029ca3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010830  00000000  00000000  0029cafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000070f  00000000  00000000  002ad32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000194 	.word	0x20000194
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e240 	.word	0x0801e240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000198 	.word	0x20000198
 80001cc:	0801e240 	.word	0x0801e240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b974 	b.w	8000f5c <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468e      	mov	lr, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14d      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4694      	mov	ip, r2
 8000c9e:	d969      	bls.n	8000d74 <__udivmoddi4+0xe8>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b152      	cbz	r2, 8000cbc <__udivmoddi4+0x30>
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	f1c2 0120 	rsb	r1, r2, #32
 8000cae:	fa20 f101 	lsr.w	r1, r0, r1
 8000cb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	0c21      	lsrs	r1, r4, #16
 8000cc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc6:	fa1f f78c 	uxth.w	r7, ip
 8000cca:	fb08 e316 	mls	r3, r8, r6, lr
 8000cce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cd2:	fb06 f107 	mul.w	r1, r6, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ce2:	f080 811f 	bcs.w	8000f24 <__udivmoddi4+0x298>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 811c 	bls.w	8000f24 <__udivmoddi4+0x298>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb00 f707 	mul.w	r7, r0, r7
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x92>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	f080 810a 	bcs.w	8000f28 <__udivmoddi4+0x29c>
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	f240 8107 	bls.w	8000f28 <__udivmoddi4+0x29c>
 8000d1a:	4464      	add	r4, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	1be4      	subs	r4, r4, r7
 8000d24:	2600      	movs	r6, #0
 8000d26:	b11d      	cbz	r5, 8000d30 <__udivmoddi4+0xa4>
 8000d28:	40d4      	lsrs	r4, r2
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0xc2>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	f000 80ef 	beq.w	8000f1e <__udivmoddi4+0x292>
 8000d40:	2600      	movs	r6, #0
 8000d42:	e9c5 0100 	strd	r0, r1, [r5]
 8000d46:	4630      	mov	r0, r6
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	fab3 f683 	clz	r6, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d14a      	bne.n	8000dec <__udivmoddi4+0x160>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xd4>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80f9 	bhi.w	8000f52 <__udivmoddi4+0x2c6>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb61 0303 	sbc.w	r3, r1, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	469e      	mov	lr, r3
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e0      	beq.n	8000d30 <__udivmoddi4+0xa4>
 8000d6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d72:	e7dd      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000d74:	b902      	cbnz	r2, 8000d78 <__udivmoddi4+0xec>
 8000d76:	deff      	udf	#255	; 0xff
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	f040 8092 	bne.w	8000ea6 <__udivmoddi4+0x21a>
 8000d82:	eba1 010c 	sub.w	r1, r1, ip
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	2601      	movs	r6, #1
 8000d90:	0c20      	lsrs	r0, r4, #16
 8000d92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d96:	fb07 1113 	mls	r1, r7, r3, r1
 8000d9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9e:	fb0e f003 	mul.w	r0, lr, r3
 8000da2:	4288      	cmp	r0, r1
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x12c>
 8000da6:	eb1c 0101 	adds.w	r1, ip, r1
 8000daa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x12a>
 8000db0:	4288      	cmp	r0, r1
 8000db2:	f200 80cb 	bhi.w	8000f4c <__udivmoddi4+0x2c0>
 8000db6:	4643      	mov	r3, r8
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x156>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd8:	d202      	bcs.n	8000de0 <__udivmoddi4+0x154>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f200 80bb 	bhi.w	8000f56 <__udivmoddi4+0x2ca>
 8000de0:	4608      	mov	r0, r1
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x9a>
 8000dec:	f1c6 0720 	rsb	r7, r6, #32
 8000df0:	40b3      	lsls	r3, r6
 8000df2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000e02:	431c      	orrs	r4, r3
 8000e04:	40f9      	lsrs	r1, r7
 8000e06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e12:	0c20      	lsrs	r0, r4, #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fb09 1118 	mls	r1, r9, r8, r1
 8000e1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e20:	fb08 f00e 	mul.w	r0, r8, lr
 8000e24:	4288      	cmp	r0, r1
 8000e26:	fa02 f206 	lsl.w	r2, r2, r6
 8000e2a:	d90b      	bls.n	8000e44 <__udivmoddi4+0x1b8>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e34:	f080 8088 	bcs.w	8000f48 <__udivmoddi4+0x2bc>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f240 8085 	bls.w	8000f48 <__udivmoddi4+0x2bc>
 8000e3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	458e      	cmp	lr, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x1e2>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e64:	d26c      	bcs.n	8000f40 <__udivmoddi4+0x2b4>
 8000e66:	458e      	cmp	lr, r1
 8000e68:	d96a      	bls.n	8000f40 <__udivmoddi4+0x2b4>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e72:	fba0 9402 	umull	r9, r4, r0, r2
 8000e76:	eba1 010e 	sub.w	r1, r1, lr
 8000e7a:	42a1      	cmp	r1, r4
 8000e7c:	46c8      	mov	r8, r9
 8000e7e:	46a6      	mov	lr, r4
 8000e80:	d356      	bcc.n	8000f30 <__udivmoddi4+0x2a4>
 8000e82:	d053      	beq.n	8000f2c <__udivmoddi4+0x2a0>
 8000e84:	b15d      	cbz	r5, 8000e9e <__udivmoddi4+0x212>
 8000e86:	ebb3 0208 	subs.w	r2, r3, r8
 8000e8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e92:	fa22 f306 	lsr.w	r3, r2, r6
 8000e96:	40f1      	lsrs	r1, r6
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	f1c2 0320 	rsb	r3, r2, #32
 8000eaa:	40d8      	lsrs	r0, r3
 8000eac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec8:	0c0b      	lsrs	r3, r1, #16
 8000eca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ece:	fb00 f60e 	mul.w	r6, r0, lr
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x260>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee2:	d22f      	bcs.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee4:	429e      	cmp	r6, r3
 8000ee6:	d92d      	bls.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	1b9b      	subs	r3, r3, r6
 8000eee:	b289      	uxth	r1, r1
 8000ef0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efc:	fb06 f30e 	mul.w	r3, r6, lr
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x28a>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f0c:	d216      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d914      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f1c:	e738      	b.n	8000d90 <__udivmoddi4+0x104>
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e705      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e3      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6f8      	b.n	8000d1e <__udivmoddi4+0x92>
 8000f2c:	454b      	cmp	r3, r9
 8000f2e:	d2a9      	bcs.n	8000e84 <__udivmoddi4+0x1f8>
 8000f30:	ebb9 0802 	subs.w	r8, r9, r2
 8000f34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7a3      	b.n	8000e84 <__udivmoddi4+0x1f8>
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	e7ea      	b.n	8000f16 <__udivmoddi4+0x28a>
 8000f40:	4620      	mov	r0, r4
 8000f42:	e794      	b.n	8000e6e <__udivmoddi4+0x1e2>
 8000f44:	4640      	mov	r0, r8
 8000f46:	e7d1      	b.n	8000eec <__udivmoddi4+0x260>
 8000f48:	46d0      	mov	r8, sl
 8000f4a:	e77b      	b.n	8000e44 <__udivmoddi4+0x1b8>
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	e732      	b.n	8000db8 <__udivmoddi4+0x12c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	e709      	b.n	8000d6a <__udivmoddi4+0xde>
 8000f56:	4464      	add	r4, ip
 8000f58:	3802      	subs	r0, #2
 8000f5a:	e742      	b.n	8000de2 <__udivmoddi4+0x156>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <_ZN30FlightControllorImplementation18getRollPidInstanceEv>:
{
	return this->_nvmInstance;
}

PID_Control& FlightControllorImplementation::getRollPidInstance()
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	return this->_rollPID;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>:

PID_Control& FlightControllorImplementation::getPitchPidInstance()
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	return this->_pitchPID;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_ZN30FlightControllorImplementation17getYawPidInstanceEv>:

PID_Control& FlightControllorImplementation::getYawPidInstance()
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	return this->_yawPID;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_ZN30FlightControllorImplementation23getXPositionPidInstanceEv>:

PID_Control& FlightControllorImplementation::getXPositionPidInstance()
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	return this->_xPositionPID;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_ZN30FlightControllorImplementation23getYPositionPidInstanceEv>:

PID_Control& FlightControllorImplementation::getYPositionPidInstance()
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	return this->_yPositionPID;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>:

LIS3MDLTR& FlightControllorImplementation::getLIS3MDLTRinstance()
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	return this->_lis;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3398      	adds	r3, #152	; 0x98
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>:

Buzzer& FlightControllorImplementation::getBuzzerinstance()
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	return this->_buzz;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3388      	adds	r3, #136	; 0x88
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_ZN30FlightControllorImplementation17getBMP390instanceEv>:

BMP390& FlightControllorImplementation::getBMP390instance()
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	return this->_bmp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f503 7384 	add.w	r3, r3, #264	; 0x108
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>:

ICM42688P& FlightControllorImplementation::getICM42688Pinstance()
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	return this->_icm;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_ZN30FlightControllorImplementation15getHC05instanceEv>:

HC05& FlightControllorImplementation::getHC05instance()
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	return this->_bt;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f503 7302 	add.w	r3, r3, #520	; 0x208
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>:

PMW3901UY& FlightControllorImplementation::getPMW3901UYinstance()
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	return this->_pmw;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>:

FrSkyRX& FlightControllorImplementation::getFrSkyRXinstance()
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	return this->_remote_rx;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f503 7326 	add.w	r3, r3, #664	; 0x298
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_ZN30FlightControllorImplementation17getMB1043instanceEv>:

MB1043& FlightControllorImplementation::getMB1043instance()
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	return this->_sonar;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f503 735a 	add.w	r3, r3, #872	; 0x368
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>:

VL53L0X& FlightControllorImplementation::getVL53L0Xinstance()
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
	return this->_vl53;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>:

BatteryManagement& FlightControllorImplementation::getBatteryManagementinstance()
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	return this->_battMgmt;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f603 3328 	addw	r3, r3, #2856	; 0xb28
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getFaultsCheckHandlerPtr()
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	return &this->_faultsCheckHandler;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f603 6374 	addw	r3, r3, #3700	; 0xe74
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getSensorsDataReadHandlerPtr()
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	return &this->_sensorsDataReadHandler;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f603 6378 	addw	r3, r3, #3704	; 0xe78
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getDynamicsProcessHandlerPtr()
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
	return &this->_dynamicsProcessHandler;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f603 637c 	addw	r3, r3, #3708	; 0xe7c
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>:

FaultsStatus FlightControllorImplementation::getCurrentFaultsStatus() const
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	return this->_currentFaultsStatus;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8d3 3e70 	ldr.w	r3, [r3, #3696]	; 0xe70
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>:

void FlightControllorImplementation::setCurrentFaultsStatus(FaultsStatus faultsStatus)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
	this->_currentFaultsStatus = faultsStatus;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	f8c3 2e70 	str.w	r2, [r3, #3696]	; 0xe70
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_ZN6BuzzerC1Ev>:
	uint16_t _counterEnd;
	uint16_t _repetitions;
	bool _busy;

public:
	Buzzer():
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
		_freqTick {0U}
		,_pauseTick {0U}
		,_counterStart {0U}
		,_counterEnd {0U}
		,_repetitions {0U}
		,_busy {false}
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <_ZN6BuzzerC1Ev+0x40>)
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	809a      	strh	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	80da      	strh	r2, [r3, #6]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	811a      	strh	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	815a      	strh	r2, [r3, #10]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	819a      	strh	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	739a      	strb	r2, [r3, #14]
	{
	}
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40020000 	.word	0x40020000

080011ac <_ZN11PID_ControlC1ERfS0_fff>:
	float _pidI = 0;
	float _pidD = 0;
	float _pid = 0;
	LowPassFilter _lowPassFilter;
public:
	PID_Control(float &signal, float &reference,float Kp,float Ki,float Kd):
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6178      	str	r0, [r7, #20]
 80011b4:	6139      	str	r1, [r7, #16]
 80011b6:	60fa      	str	r2, [r7, #12]
 80011b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80011bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80011c0:	ed87 1a00 	vstr	s2, [r7]
		,_error {0.0F}
		,_pidP {0.0F}
		,_pidI {0.0F}
		,_pidD {0.0F}
		,_pid {0.0F}
		,_lowPassFilter (80,0.001)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	615a      	str	r2, [r3, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	332c      	adds	r3, #44	; 0x2c
 8001216:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8001234 <_ZN11PID_ControlC1ERfS0_fff+0x88>
 800121a:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001238 <_ZN11PID_ControlC1ERfS0_fff+0x8c>
 800121e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800123c <_ZN11PID_ControlC1ERfS0_fff+0x90>
 8001222:	4618      	mov	r0, r3
 8001224:	f007 ffa4 	bl	8009170 <_ZN13LowPassFilterC1Efff>
	{
	};
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	00000000 	.word	0x00000000
 8001238:	3a83126f 	.word	0x3a83126f
 800123c:	42a00000 	.word	0x42a00000

08001240 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>:
	float _batteryVoltage;

	uint16_t msToTick(uint16_t ms);
	void toPercentage();
public:
	BatteryManagement(ADC_HandleTypeDef *adc_port,Buzzer *buzz,uint16_t frequency_ms):
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	807b      	strh	r3, [r7, #2]
		,_buzz(buzz)
		,_frequencyTick{0}
		,_tickCounter{0}
		,_batteryVal{0}
		,_batteryPercentage{0}
		,_batteryVoltage{0}
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f640 3222 	movw	r2, #2850	; 0xb22
 8001254:	801a      	strh	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800125c:	805a      	strh	r2, [r3, #2]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001264:	809a      	strh	r2, [r3, #4]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	829a      	strh	r2, [r3, #20]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
	{
		_frequencyTick = msToTick(frequency_ms);
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	4619      	mov	r1, r3
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f004 f9bd 	bl	8005620 <_ZN17BatteryManagement8msToTickEt>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	829a      	strh	r2, [r3, #20]
	}
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_ZN16FlashMemoryBlockC1Em>:
};

class FlashMemoryBlock
{
public:
	FlashMemoryBlock(uint32_t address):
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
		PID_PITCH_I{address},
		PID_PITCH_D{address},
		PID_YAW_P{address},
		PID_YAW_I{address},
		PID_YAW_D{address},
		address{address}
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	463a      	mov	r2, r7
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 faa5 	bl	8001818 <_ZN10memoryDataI6intObjEC1ERm>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3308      	adds	r3, #8
 80012d2:	463a      	mov	r2, r7
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fa9e 	bl	8001818 <_ZN10memoryDataI6intObjEC1ERm>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3310      	adds	r3, #16
 80012e0:	463a      	mov	r2, r7
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 faac 	bl	8001842 <_ZN10memoryDataI8floatObjEC1ERm>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3318      	adds	r3, #24
 80012ee:	463a      	mov	r2, r7
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 faa5 	bl	8001842 <_ZN10memoryDataI8floatObjEC1ERm>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3320      	adds	r3, #32
 80012fc:	463a      	mov	r2, r7
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fa9e 	bl	8001842 <_ZN10memoryDataI8floatObjEC1ERm>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3328      	adds	r3, #40	; 0x28
 800130a:	463a      	mov	r2, r7
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fa97 	bl	8001842 <_ZN10memoryDataI8floatObjEC1ERm>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3330      	adds	r3, #48	; 0x30
 8001318:	463a      	mov	r2, r7
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fa90 	bl	8001842 <_ZN10memoryDataI8floatObjEC1ERm>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3338      	adds	r3, #56	; 0x38
 8001326:	463a      	mov	r2, r7
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fa89 	bl	8001842 <_ZN10memoryDataI8floatObjEC1ERm>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3340      	adds	r3, #64	; 0x40
 8001334:	463a      	mov	r2, r7
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fa82 	bl	8001842 <_ZN10memoryDataI8floatObjEC1ERm>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3348      	adds	r3, #72	; 0x48
 8001342:	463a      	mov	r2, r7
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fa7b 	bl	8001842 <_ZN10memoryDataI8floatObjEC1ERm>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3350      	adds	r3, #80	; 0x50
 8001350:	463a      	mov	r2, r7
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fa74 	bl	8001842 <_ZN10memoryDataI8floatObjEC1ERm>
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	659a      	str	r2, [r3, #88]	; 0x58
	{

	}
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_ZN12IOManagement16writeMemoryBlockE16FlashMemoryBlock>:
};

class IOManagement
{
public:
	void writeMemoryBlock(FlashMemoryBlock memBlock)
 800136a:	b084      	sub	sp, #16
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	f107 0014 	add.w	r0, r7, #20
 8001378:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		//massEraseSector(memBlock.address);

		memBlock.firstBoot.updateToMemory();
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fa73 	bl	800186c <_ZN10memoryDataI6intObjE14updateToMemoryEv>
		memBlock.flashReadWriteError.updateToMemory();
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	3308      	adds	r3, #8
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fa6d 	bl	800186c <_ZN10memoryDataI6intObjE14updateToMemoryEv>
		memBlock.PID_ROLL_P.updateToMemory();
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	3310      	adds	r3, #16
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fa76 	bl	800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_ROLL_I.updateToMemory();
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	3318      	adds	r3, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fa70 	bl	800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_ROLL_D.updateToMemory();
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	3320      	adds	r3, #32
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fa6a 	bl	800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_P.updateToMemory();
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	3328      	adds	r3, #40	; 0x28
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fa64 	bl	800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_I.updateToMemory();
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	3330      	adds	r3, #48	; 0x30
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fa5e 	bl	800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_PITCH_D.updateToMemory();
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	3338      	adds	r3, #56	; 0x38
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fa58 	bl	800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_P.updateToMemory();
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	3340      	adds	r3, #64	; 0x40
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fa52 	bl	800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_I.updateToMemory();
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	3348      	adds	r3, #72	; 0x48
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fa4c 	bl	800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
		memBlock.PID_YAW_D.updateToMemory();
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	3350      	adds	r3, #80	; 0x50
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fa46 	bl	800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>
	}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001408:	b004      	add	sp, #16
 800140a:	4770      	bx	lr

0800140c <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock>:
		to.PID_YAW_P.setValue(from.PID_YAW_P.getValue());
		to.PID_YAW_I.setValue(from.PID_YAW_I.getValue());
		to.PID_YAW_D.setValue(from.PID_YAW_D.getValue());
	}

	void resetMemoryBlock(FlashMemoryBlock& memBlock)
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	{
		memBlock.firstBoot.setValue(1U);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fa50 	bl	80018c0 <_ZN10memoryDataI6intObjE8setValueEi>
		memBlock.flashReadWriteError.setValue(0U);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3308      	adds	r3, #8
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fa4a 	bl	80018c0 <_ZN10memoryDataI6intObjE8setValueEi>
		memBlock.PID_ROLL_P.setValue(0U);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3310      	adds	r3, #16
 8001430:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80014b4 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fa51 	bl	80018dc <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_ROLL_I.setValue(0U);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	3318      	adds	r3, #24
 800143e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80014b4 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fa4a 	bl	80018dc <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_ROLL_D.setValue(0U);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3320      	adds	r3, #32
 800144c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80014b4 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fa43 	bl	80018dc <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_P.setValue(0U);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	3328      	adds	r3, #40	; 0x28
 800145a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80014b4 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fa3c 	bl	80018dc <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_I.setValue(0U);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3330      	adds	r3, #48	; 0x30
 8001468:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80014b4 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fa35 	bl	80018dc <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_PITCH_D.setValue(0U);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	3338      	adds	r3, #56	; 0x38
 8001476:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80014b4 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fa2e 	bl	80018dc <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_P.setValue(0U);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3340      	adds	r3, #64	; 0x40
 8001484:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80014b4 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fa27 	bl	80018dc <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_I.setValue(0U);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3348      	adds	r3, #72	; 0x48
 8001492:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80014b4 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fa20 	bl	80018dc <_ZN10memoryDataI8floatObjE8setValueEf>
		memBlock.PID_YAW_D.setValue(0U);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3350      	adds	r3, #80	; 0x50
 80014a0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80014b4 <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock+0xa8>
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fa19 	bl	80018dc <_ZN10memoryDataI8floatObjE8setValueEf>
	}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	00000000 	.word	0x00000000

080014b8 <_ZN12IOManagement17updateMemoryBlockER16FlashMemoryBlock>:

	void updateMemoryBlock(FlashMemoryBlock& memBlock)
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	{
		memBlock.firstBoot.updateFromMemory();
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fa18 	bl	80018fa <_ZN10memoryDataI6intObjE16updateFromMemoryEv>
		memBlock.flashReadWriteError.updateFromMemory();
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	3308      	adds	r3, #8
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fa13 	bl	80018fa <_ZN10memoryDataI6intObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_P.updateFromMemory();
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3310      	adds	r3, #16
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fa1f 	bl	800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_I.updateFromMemory();
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3318      	adds	r3, #24
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fa1a 	bl	800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_ROLL_D.updateFromMemory();
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3320      	adds	r3, #32
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fa15 	bl	800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_P.updateFromMemory();
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3328      	adds	r3, #40	; 0x28
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fa10 	bl	800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_I.updateFromMemory();
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	3330      	adds	r3, #48	; 0x30
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fa0b 	bl	800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_PITCH_D.updateFromMemory();
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	3338      	adds	r3, #56	; 0x38
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fa06 	bl	800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_P.updateFromMemory();
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3340      	adds	r3, #64	; 0x40
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fa01 	bl	800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_I.updateFromMemory();
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	3348      	adds	r3, #72	; 0x48
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f9fc 	bl	800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
		memBlock.PID_YAW_D.updateFromMemory();
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3350      	adds	r3, #80	; 0x50
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f9f7 	bl	800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>
	}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZN16MemoryManagementC1Em>:
};

class MemoryManagement: public IOManagement
{
public:
	MemoryManagement(uint32_t mainMemoryAddress):
 8001536:	b590      	push	{r4, r7, lr}
 8001538:	b097      	sub	sp, #92	; 0x5c
 800153a:	af14      	add	r7, sp, #80	; 0x50
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
		mainMemoryBlock{mainMemoryAddress}
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff feb7 	bl	80012b8 <_ZN16FlashMemoryBlockC1Em>
	{
		this->updateMemoryBlock(this->mainMemoryBlock);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffb2 	bl	80014b8 <_ZN12IOManagement17updateMemoryBlockER16FlashMemoryBlock>

		if (this->mainMemoryBlock.firstBoot.getValue()!=1U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f9a6 	bl	80018a8 <_ZN10memoryDataI6intObjE8getValueEv>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d011      	beq.n	8001590 <_ZN16MemoryManagementC1Em+0x5a>
		{
			resetMemoryBlock(this->mainMemoryBlock);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4619      	mov	r1, r3
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff4b 	bl	800140c <_ZN12IOManagement16resetMemoryBlockER16FlashMemoryBlock>
			writeMemoryBlock(this->mainMemoryBlock);
 8001576:	687c      	ldr	r4, [r7, #4]
 8001578:	4668      	mov	r0, sp
 800157a:	f104 030c 	add.w	r3, r4, #12
 800157e:	2250      	movs	r2, #80	; 0x50
 8001580:	4619      	mov	r1, r3
 8001582:	f01c f907 	bl	801d794 <memcpy>
 8001586:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff feed 	bl	800136a <_ZN12IOManagement16writeMemoryBlockE16FlashMemoryBlock>
		}
	}
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}
	...

0800159c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_>:
	TaskHandle_t _sensorsDataReadHandler;
	TaskHandle_t _dynamicsProcessHandler;
public:
	float zeroRef = 0.0F;

	FlightControllorImplementation (
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
	  _icm (hspi2,&_buzz,_rollPID,_pitchPID,_yawPID),
	  _pmw (huart2, hdma_usart2_rx, 255U,_icm,_vl53,_xPositionPID,_yPositionPID),
	  _currentFaultsStatus {FaultsStatus::NOT_READY},
	  _faultsCheckHandler (NULL),
	  _sensorsDataReadHandler (NULL),
	  _dynamicsProcessHandler (NULL)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6a3a      	ldr	r2, [r7, #32]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d2:	619a      	str	r2, [r3, #24]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d8:	61da      	str	r2, [r3, #28]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015de:	621a      	str	r2, [r3, #32]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	332c      	adds	r3, #44	; 0x2c
 80015f0:	497f      	ldr	r1, [pc, #508]	; (80017f0 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x254>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff9f 	bl	8001536 <_ZN16MemoryManagementC1Em>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3388      	adds	r3, #136	; 0x88
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fdb3 	bl	8001168 <_ZN6BuzzerC1Ev>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3398      	adds	r3, #152	; 0x98
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f006 ff37 	bl	800847c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fe98 	bl	800434c <_ZN6BMP390C1EP19__SPI_HandleTypeDef>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f004 fe10 	bl	800624a <_ZN4HC05C1EP20__UART_HandleTypeDef>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3388      	adds	r3, #136	; 0x88
 8001634:	2201      	movs	r2, #1
 8001636:	9200      	str	r2, [sp, #0]
 8001638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800163a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800163c:	f004 f910 	bl	8005860 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f503 705a 	add.w	r0, r3, #872	; 0x368
 8001646:	23ff      	movs	r3, #255	; 0xff
 8001648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800164a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800164c:	f007 f966 	bl	800891c <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 8001656:	23ff      	movs	r3, #255	; 0xff
 8001658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800165a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800165c:	f008 f940 	bl	80098e0 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f603 3028 	addw	r0, r3, #2856	; 0xb28
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800166c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	f7ff fde5 	bl	8001240 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f503 6435 	add.w	r4, r3, #2896	; 0xb50
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 8001682:	4618      	mov	r0, r3
 8001684:	f006 fe8a 	bl	800839c <_ZN9ICM42688P12getEulerYrefEv>
 8001688:	4601      	mov	r1, r0
	  _rollPID(_icm.getEulerYref(),zeroRef,6,0,4000),//6,0,5000),
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
	  _dynamicsProcessHandler (NULL)
 8001690:	ed9f 1a58 	vldr	s2, [pc, #352]	; 80017f4 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x258>
 8001694:	eddf 0a58 	vldr	s1, [pc, #352]	; 80017f8 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001698:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800169c:	461a      	mov	r2, r3
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff fd84 	bl	80011ac <_ZN11PID_ControlC1ERfS0_fff>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f006 fe57 	bl	8008364 <_ZN9ICM42688P12getEulerXrefEv>
 80016b6:	4601      	mov	r1, r0
	  _pitchPID(_icm.getEulerXref(),zeroRef,6,0,4000),//6,0,5000),
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
	  _dynamicsProcessHandler (NULL)
 80016be:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 80017f4 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x258>
 80016c2:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80017f8 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 80016c6:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4620      	mov	r0, r4
 80016ce:	f7ff fd6d 	bl	80011ac <_ZN11PID_ControlC1ERfS0_fff>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f503 643f 	add.w	r4, r3, #3056	; 0xbf0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 80016de:	4618      	mov	r0, r3
 80016e0:	f006 fe68 	bl	80083b4 <_ZN9ICM42688P12getEulerZrefEv>
 80016e4:	4601      	mov	r1, r0
	  _yawPID(_icm.getEulerZref(),zeroRef,10,0,0),//10,0,0),
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
	  _dynamicsProcessHandler (NULL)
 80016ec:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80017f8 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 80016f0:	eddf 0a41 	vldr	s1, [pc, #260]	; 80017f8 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 80016f4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff fd56 	bl	80011ac <_ZN11PID_ControlC1ERfS0_fff>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f503 6444 	add.w	r4, r3, #3136	; 0xc40
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 800170c:	4618      	mov	r0, r3
 800170e:	f007 fcf1 	bl	80090f4 <_ZN9PMW3901UY7getXposEv>
 8001712:	4601      	mov	r1, r0
	  _xPositionPID(_pmw.getXpos(),_remote_rx.target_roll,0.5F,0,200),
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f503 7356 	add.w	r3, r3, #856	; 0x358
	  _dynamicsProcessHandler (NULL)
 800171a:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80017fc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x260>
 800171e:	eddf 0a36 	vldr	s1, [pc, #216]	; 80017f8 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001722:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001726:	461a      	mov	r2, r3
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff fd3f 	bl	80011ac <_ZN11PID_ControlC1ERfS0_fff>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f503 6449 	add.w	r4, r3, #3216	; 0xc90
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 800173a:	4618      	mov	r0, r3
 800173c:	f007 fce6 	bl	800910c <_ZN9PMW3901UY7getYposEv>
 8001740:	4601      	mov	r1, r0
	  _yPositionPID(_pmw.getYpos(),_remote_rx.target_pitch,0.5F,0,200),
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f503 7357 	add.w	r3, r3, #860	; 0x35c
	  _dynamicsProcessHandler (NULL)
 8001748:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 80017fc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x260>
 800174c:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80017f8 <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_+0x25c>
 8001750:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001754:	461a      	mov	r2, r3
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fd28 	bl	80011ac <_ZN11PID_ControlC1ERfS0_fff>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f503 604e 	add.w	r0, r3, #3296	; 0xce0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f103 0188 	add.w	r1, r3, #136	; 0x88
	  _icm (hspi2,&_buzz,_rollPID,_pitchPID,_yawPID),
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f503 6435 	add.w	r4, r3, #2896	; 0xb50
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	f502 623f 	add.w	r2, r2, #3056	; 0xbf0
	  _dynamicsProcessHandler (NULL)
 800177a:	9201      	str	r2, [sp, #4]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	4623      	mov	r3, r4
 8001780:	460a      	mov	r2, r1
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f005 fe6a 	bl	800745c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f603 54c8 	addw	r4, r3, #3528	; 0xdc8
	  _pmw (huart2, hdma_usart2_rx, 255U,_icm,_vl53,_xPositionPID,_yPositionPID),
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	f502 7276 	add.w	r2, r2, #984	; 0x3d8
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	f501 6144 	add.w	r1, r1, #3136	; 0xc40
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f500 6049 	add.w	r0, r0, #3216	; 0xc90
	  _dynamicsProcessHandler (NULL)
 80017a6:	9003      	str	r0, [sp, #12]
 80017a8:	9102      	str	r1, [sp, #8]
 80017aa:	9201      	str	r2, [sp, #4]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	23ff      	movs	r3, #255	; 0xff
 80017b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b2:	6a39      	ldr	r1, [r7, #32]
 80017b4:	4620      	mov	r0, r4
 80017b6:	f007 f9e3 	bl	8008b80 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	f8c3 2e70 	str.w	r2, [r3, #3696]	; 0xe70
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c3 2e74 	str.w	r2, [r3, #3700]	; 0xe74
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f8c3 2e78 	str.w	r2, [r3, #3704]	; 0xe78
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f8c3 2e7c 	str.w	r2, [r3, #3708]	; 0xe7c
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
	{

	}
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	080e0000 	.word	0x080e0000
 80017f4:	457a0000 	.word	0x457a0000
 80017f8:	00000000 	.word	0x00000000
 80017fc:	43480000 	.word	0x43480000

08001800 <_ZN30FlightControllorImplementation11getInstanceEv>:
		&hdma_usart3_rx,
		&hdma_uart4_rx,
		&hdma_usart6_rx);

FlightControllorImplementation *FlightControllorImplementation::getInstance()
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	return globalflightController;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <_ZN30FlightControllorImplementation11getInstanceEv+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	200001b0 	.word	0x200001b0

08001818 <_ZN10memoryDataI6intObjEC1ERm>:
	memoryData(uint32_t& addr)
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
		this->address = addr;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	605a      	str	r2, [r3, #4]
		addr+=dataSize;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	1d1a      	adds	r2, r3, #4
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	601a      	str	r2, [r3, #0]
	}
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_ZN10memoryDataI8floatObjEC1ERm>:
	memoryData(uint32_t& addr)
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
		this->address = addr;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	605a      	str	r2, [r3, #4]
		addr+=dataSize;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	1d1a      	adds	r2, r3, #4
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
	}
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_ZN10memoryDataI6intObjE14updateToMemoryEv>:
	void updateToMemory()
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
		writeMemoryAddress<unionType>(this->address,this->data);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	4610      	mov	r0, r2
 800187e:	f000 f862 	bl	8001946 <_Z18writeMemoryAddressI6intObjEmmT_>
	}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_ZN10memoryDataI8floatObjE14updateToMemoryEv>:
	void updateToMemory()
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
		writeMemoryAddress<unionType>(this->address,this->data);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	4610      	mov	r0, r2
 800189c:	f000 f877 	bl	800198e <_Z18writeMemoryAddressI8floatObjEmmT_>
	}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_ZN10memoryDataI6intObjE8getValueEv>:
	Type getValue()
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
		return this->data.value;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
	}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_ZN10memoryDataI6intObjE8setValueEi>:
	void setValue(Type value)
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
		this->data.value = value;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	601a      	str	r2, [r3, #0]
	}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_ZN10memoryDataI8floatObjE8setValueEf>:
	void setValue(Type value)
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	ed87 0a00 	vstr	s0, [r7]
		this->data.value = value;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	601a      	str	r2, [r3, #0]
	}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_ZN10memoryDataI6intObjE16updateFromMemoryEv>:
	void updateFromMemory()
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
		this->data.bytes = readMemoryAddress<Type>(this->address);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f865 	bl	80019d6 <_Z17readMemoryAddressIiET_m>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	601a      	str	r2, [r3, #0]
	}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_ZN10memoryDataI8floatObjE16updateFromMemoryEv>:
	void updateFromMemory()
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
		this->data.bytes = readMemoryAddress<Type>(this->address);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	f000 f860 	bl	80019ee <_Z17readMemoryAddressIfET_m>
 800192e:	eef0 7a40 	vmov.f32	s15, s0
 8001932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001936:	ee17 2a90 	vmov	r2, s15
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
	}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_Z18writeMemoryAddressI6intObjEmmT_>:
{
	return static_cast<Type>(*(__IO uint32_t *)addr);
}

template <typename Type>
inline uint32_t writeMemoryAddress(uint32_t address,Type memoryData)
 8001946:	b5b0      	push	{r4, r5, r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
{
	HAL_FLASH_Unlock();
 8001950:	f009 fbe4 	bl	800b11c <HAL_FLASH_Unlock>

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, memoryData.bytes) != HAL_OK)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	461c      	mov	r4, r3
 800195a:	4615      	mov	r5, r2
 800195c:	4622      	mov	r2, r4
 800195e:	462b      	mov	r3, r5
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	2002      	movs	r0, #2
 8001964:	f009 fb86 	bl	800b074 <HAL_FLASH_Program>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <_Z18writeMemoryAddressI6intObjEmmT_+0x3a>
    {
    	return HAL_FLASH_GetError ();
 8001978:	f009 fc02 	bl	800b180 <HAL_FLASH_GetError>
 800197c:	4603      	mov	r3, r0
 800197e:	e002      	b.n	8001986 <_Z18writeMemoryAddressI6intObjEmmT_+0x40>
    }

	HAL_FLASH_Lock();
 8001980:	f009 fbee 	bl	800b160 <HAL_FLASH_Lock>

	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bdb0      	pop	{r4, r5, r7, pc}

0800198e <_Z18writeMemoryAddressI8floatObjEmmT_>:
inline uint32_t writeMemoryAddress(uint32_t address,Type memoryData)
 800198e:	b5b0      	push	{r4, r5, r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8001998:	f009 fbc0 	bl	800b11c <HAL_FLASH_Unlock>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, memoryData.bytes) != HAL_OK)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	461c      	mov	r4, r3
 80019a2:	4615      	mov	r5, r2
 80019a4:	4622      	mov	r2, r4
 80019a6:	462b      	mov	r3, r5
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	2002      	movs	r0, #2
 80019ac:	f009 fb62 	bl	800b074 <HAL_FLASH_Program>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf14      	ite	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	2300      	moveq	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <_Z18writeMemoryAddressI8floatObjEmmT_+0x3a>
    	return HAL_FLASH_GetError ();
 80019c0:	f009 fbde 	bl	800b180 <HAL_FLASH_GetError>
 80019c4:	4603      	mov	r3, r0
 80019c6:	e002      	b.n	80019ce <_Z18writeMemoryAddressI8floatObjEmmT_+0x40>
	HAL_FLASH_Lock();
 80019c8:	f009 fbca 	bl	800b160 <HAL_FLASH_Lock>
	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bdb0      	pop	{r4, r5, r7, pc}

080019d6 <_Z17readMemoryAddressIiET_m>:
inline Type readMemoryAddress(const uint32_t addr)
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
	return static_cast<Type>(*(__IO uint32_t *)addr);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_Z17readMemoryAddressIfET_m>:
inline Type readMemoryAddress(const uint32_t addr)
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	return static_cast<Type>(*(__IO uint32_t *)addr);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001a02:	eeb0 0a67 	vmov.f32	s0, s15
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_Z41__static_initialization_and_destruction_0ii>:
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b08b      	sub	sp, #44	; 0x2c
 8001a14:	af08      	add	r7, sp, #32
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d122      	bne.n	8001a66 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d11d      	bne.n	8001a66 <_Z41__static_initialization_and_destruction_0ii+0x56>
		&hdma_usart6_rx);
 8001a2a:	f640 6088 	movw	r0, #3720	; 0xe88
 8001a2e:	f01a fc71 	bl	801c314 <_Znwj>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461c      	mov	r4, r3
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001a38:	9307      	str	r3, [sp, #28]
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001a3c:	9306      	str	r3, [sp, #24]
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001a40:	9305      	str	r3, [sp, #20]
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001a44:	9304      	str	r3, [sp, #16]
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001a48:	9303      	str	r3, [sp, #12]
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001a5a:	490f      	ldr	r1, [pc, #60]	; (8001a98 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7ff fd9d 	bl	800159c <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_S5_P19__DMA_HandleTypeDefS7_S7_S7_>
static FlightControllorImplementation *globalflightController = new FlightControllorImplementation(
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001a64:	601c      	str	r4, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd90      	pop	{r4, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200009b4 	.word	0x200009b4
 8001a74:	20000834 	.word	0x20000834
 8001a78:	20000954 	.word	0x20000954
 8001a7c:	200008f4 	.word	0x200008f4
 8001a80:	200007f0 	.word	0x200007f0
 8001a84:	200006e0 	.word	0x200006e0
 8001a88:	200007ac 	.word	0x200007ac
 8001a8c:	20000768 	.word	0x20000768
 8001a90:	20000724 	.word	0x20000724
 8001a94:	20000538 	.word	0x20000538
 8001a98:	2000040c 	.word	0x2000040c
 8001a9c:	200001b0 	.word	0x200001b0

08001aa0 <_GLOBAL__sub_I__ZN30FlightControllorImplementation11getInstanceEv>:
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff ffb1 	bl	8001a10 <_Z41__static_initialization_and_destruction_0ii>
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4a07      	ldr	r2, [pc, #28]	; (8001adc <vApplicationGetIdleTaskMemory+0x2c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <vApplicationGetIdleTaskMemory+0x30>)
 8001ac6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200001b4 	.word	0x200001b4
 8001ae0:	20000208 	.word	0x20000208

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <_ZNSt7__cxx119to_stringEx>:
    return __str;
  }

  inline string
  to_string(long long __val)
  {
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	e9c7 2300 	strd	r2, r3, [r7]
    const bool __neg = __val < 0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0fdb      	lsrs	r3, r3, #31
 8001b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const unsigned long long __uval
      = __neg ? (unsigned long long)~__val + 1ull : __val;
 8001b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <_ZNSt7__cxx119to_stringEx+0x2a>
 8001b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4254      	negs	r4, r2
 8001b50:	eb61 0503 	sbc.w	r5, r1, r3
 8001b54:	e001      	b.n	8001b5a <_ZNSt7__cxx119to_stringEx+0x2e>
 8001b56:	e9d7 4500 	ldrd	r4, r5, [r7]
    const unsigned long long __uval
 8001b5a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    const auto __len = __detail::__to_chars_len(__uval);
 8001b5e:	220a      	movs	r2, #10
 8001b60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b64:	f001 fb5f 	bl	8003226 <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
 8001b68:	6178      	str	r0, [r7, #20]
    string __str(__neg + __len, '-');
 8001b6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	18d4      	adds	r4, r2, r3
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	4618      	mov	r0, r3
 8001b78:	f01a fbe0 	bl	801c33c <_ZNSaIcEC1Ev>
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	222d      	movs	r2, #45	; 0x2d
 8001b82:	4621      	mov	r1, r4
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f01a fcd4 	bl	801c532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f01a fbd5 	bl	801c33e <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8001b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b98:	4619      	mov	r1, r3
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f01a fcd8 	bl	801c550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba4:	6979      	ldr	r1, [r7, #20]
 8001ba6:	f001 fb9f 	bl	80032e8 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
    return __str;
 8001baa:	bf00      	nop
  }
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bdb0      	pop	{r4, r5, r7, pc}

08001bb4 <_ZN12CallsCounter25incrementInterruptCounterEv>:
};

class CallsCounter
{
public:
	void incrementInterruptCounter()
 8001bb4:	b4b0      	push	{r4, r5, r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	{
		this->interruptCounter++;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	1c54      	adds	r4, r2, #1
 8001bc4:	f143 0500 	adc.w	r5, r3, #0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	e9c3 4500 	strd	r4, r5, [r3]
	}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bcb0      	pop	{r4, r5, r7}
 8001bd6:	4770      	bx	lr

08001bd8 <_ZN12CallsCounter20incrementTaskCounterEv>:

	void incrementTaskCounter()
 8001bd8:	b4b0      	push	{r4, r5, r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	{
		this->taskCounter++;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001be6:	1c54      	adds	r4, r2, #1
 8001be8:	f143 0500 	adc.w	r5, r3, #0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	e9c3 4502 	strd	r4, r5, [r3, #8]
	}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bcb0      	pop	{r4, r5, r7}
 8001bfa:	4770      	bx	lr

08001bfc <_ZN7Timeout23incrementTimeoutCounterEv>:
	void resetTimeoutCounter()
	{
		timeout_counter=0;
	}

	void incrementTimeoutCounter()
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	{
		timeout_counter++;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	705a      	strb	r2, [r3, #1]

		if (timeout_counter>timeout_value)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	785a      	ldrb	r2, [r3, #1]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	789b      	ldrb	r3, [r3, #2]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d902      	bls.n	8001c22 <_ZN7Timeout23incrementTimeoutCounterEv+0x26>
			status = Status::Timeout;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
	}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation>:
namespace drone
{
	namespace failsafe
	{
		inline void slowlyLanding(FlightControllorImplementation& flightControllerInstance)
		{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
			static float failSafeDownStartingThrottleValue = constFailSafeDownStartingThrottleValue;

			flightControllerInstance.getFrSkyRXinstance().getThrottle() = failSafeDownStartingThrottleValue;
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fa1e 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fa79 	bl	8006138 <_ZN7FrSkyRX11getThrottleEv>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6013      	str	r3, [r2, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetRoll() = 0.0F;
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fa13 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 fa7a 	bl	8006150 <_ZN7FrSkyRX13getTargetRollEv>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetPitch() = 0.0F;
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fa08 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f004 fa7b 	bl	8006168 <_ZN7FrSkyRX14getTargetPitchEv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

			failSafeDownStartingThrottleValue -= 0.1F;
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001cb4 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x84>
 8001c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001c8a:	edc3 7a00 	vstr	s15, [r3]

			if (failSafeDownStartingThrottleValue <= 0.0F)
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x80>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9c:	d900      	bls.n	8001ca0 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x70>
			{
				flightControllerInstance.setCurrentFaultsStatus(FaultsStatus::CRITICAL);
			}
		}
 8001c9e:	e003      	b.n	8001ca8 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation+0x78>
				flightControllerInstance.setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 8001ca0:	2103      	movs	r1, #3
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fa51 	bl	800114a <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	3dcccccd 	.word	0x3dcccccd

08001cb8 <_ZN5drone8failsafe12quickLandingER30FlightControllorImplementation>:

		inline void quickLanding(FlightControllorImplementation& flightControllerInstance)
		{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
			flightControllerInstance.getFrSkyRXinstance().getThrottle() = 0.0F;
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff f9da 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 fa35 	bl	8006138 <_ZN7FrSkyRX11getThrottleEv>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetRoll() = 0.0F;
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff f9cf 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fa36 	bl	8006150 <_ZN7FrSkyRX13getTargetRollEv>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
			flightControllerInstance.getFrSkyRXinstance().getTargetPitch() = 0.0F;
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff f9c4 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fa37 	bl	8006168 <_ZN7FrSkyRX14getTargetPitchEv>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
		}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <_Z19DynamicsProcessTaskPv>:
#include "failsafe_functions.hpp"

float testttt = 0;

void DynamicsProcessTask(void *pvParameters)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b092      	sub	sp, #72	; 0x48
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8001d14:	f7ff fd74 	bl	8001800 <_ZN30FlightControllorImplementation11getInstanceEv>
 8001d18:	6378      	str	r0, [r7, #52]	; 0x34

	const TickType_t xFrequency = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001d1e:	f018 fcff 	bl	801a720 <xTaskGetTickCount>
 8001d22:	4603      	mov	r3, r0
 8001d24:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 8001d26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d28:	f7ff fa02 	bl	8001130 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8001d2c:	62f8      	str	r0, [r7, #44]	; 0x2c

		if (currentFaultsStatus != FaultsStatus::NOT_READY)
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f000 8152 	beq.w	8001fda <_Z19DynamicsProcessTaskPv+0x2ce>
		{
			float rollPidOutput = flightControllerInstance->getRollPidInstance().getOut();
 8001d36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d38:	f7ff f912 	bl	8000f60 <_ZN30FlightControllorImplementation18getRollPidInstanceEv>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f007 fb43 	bl	80093ca <_ZN11PID_Control6getOutEv>
 8001d44:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
			float pitchPidOutput = flightControllerInstance->getPitchPidInstance().getOut();
 8001d48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d4a:	f7ff f916 	bl	8000f7a <_ZN30FlightControllorImplementation19getPitchPidInstanceEv>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f007 fb3a 	bl	80093ca <_ZN11PID_Control6getOutEv>
 8001d56:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			float yawPidOutput = flightControllerInstance->getYawPidInstance().getOut();
 8001d5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d5c:	f7ff f91a 	bl	8000f94 <_ZN30FlightControllorImplementation17getYawPidInstanceEv>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f007 fb31 	bl	80093ca <_ZN11PID_Control6getOutEv>
 8001d68:	ed87 0a08 	vstr	s0, [r7, #32]
			float xPositionPidOutput = flightControllerInstance->getXPositionPidInstance().getOut();
 8001d6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d6e:	f7ff f91e 	bl	8000fae <_ZN30FlightControllorImplementation23getXPositionPidInstanceEv>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f007 fb28 	bl	80093ca <_ZN11PID_Control6getOutEv>
 8001d7a:	ed87 0a07 	vstr	s0, [r7, #28]
			float yPositionPidOutput = flightControllerInstance->getYPositionPidInstance().getOut();
 8001d7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d80:	f7ff f922 	bl	8000fc8 <_ZN30FlightControllorImplementation23getYPositionPidInstanceEv>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f007 fb1f 	bl	80093ca <_ZN11PID_Control6getOutEv>
 8001d8c:	ed87 0a06 	vstr	s0, [r7, #24]
			float altitudeMpcOutput = flightControllerInstance->getVL53L0Xinstance().getMPCout();
 8001d90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d92:	f7ff f98c 	bl	80010ae <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f007 ff25 	bl	8009be8 <_ZN7VL53L0X9getMPCoutEv>
 8001d9e:	ed87 0a05 	vstr	s0, [r7, #20]
			float throttle = flightControllerInstance->getFrSkyRXinstance().throttle;
 8001da2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001da4:	f7ff f969 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001dae:	613b      	str	r3, [r7, #16]

			testttt = yPositionPidOutput;
 8001db0:	4a8d      	ldr	r2, [pc, #564]	; (8001fe8 <_Z19DynamicsProcessTaskPv+0x2dc>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	6013      	str	r3, [r2, #0]

			if (currentFaultsStatus == FaultsStatus::FAILURE)
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d102      	bne.n	8001dc2 <_Z19DynamicsProcessTaskPv+0xb6>
			{
				drone::failsafe::slowlyLanding(*flightControllerInstance);
 8001dbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dbe:	f7ff ff37 	bl	8001c30 <_ZN5drone8failsafe13slowlyLandingER30FlightControllorImplementation>
			}

			if (currentFaultsStatus == FaultsStatus::CRITICAL)
 8001dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d102      	bne.n	8001dce <_Z19DynamicsProcessTaskPv+0xc2>
			{
				drone::failsafe::quickLanding(*flightControllerInstance);
 8001dc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dca:	f7ff ff75 	bl	8001cb8 <_ZN5drone8failsafe12quickLandingER30FlightControllorImplementation>
			}

			float CCR1_value = 3000.0F + throttle + altitudeMpcOutput + rollPidOutput + pitchPidOutput + yawPidOutput - xPositionPidOutput - yPositionPidOutput;
 8001dce:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dd2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001fec <_Z19DynamicsProcessTaskPv+0x2e0>
 8001dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001dda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001de6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			float CCR2_value = 3000.0F + throttle + altitudeMpcOutput + rollPidOutput - pitchPidOutput - yawPidOutput - xPositionPidOutput + yPositionPidOutput;
 8001e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e12:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001fec <_Z19DynamicsProcessTaskPv+0x2e0>
 8001e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e32:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e42:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			float CCR3_value = 3000.0F + throttle + altitudeMpcOutput - rollPidOutput + pitchPidOutput - yawPidOutput + xPositionPidOutput - yPositionPidOutput;
 8001e4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e52:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001fec <_Z19DynamicsProcessTaskPv+0x2e0>
 8001e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e72:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e82:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			float CCR4_value = 3000.0F + throttle + altitudeMpcOutput - rollPidOutput - pitchPidOutput + yawPidOutput + xPositionPidOutput + yPositionPidOutput;
 8001e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e92:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001fec <_Z19DynamicsProcessTaskPv+0x2e0>
 8001e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ea6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001eae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

			if (currentFaultsStatus == FaultsStatus::OKAY)
 8001ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d157      	bne.n	8001f84 <_Z19DynamicsProcessTaskPv+0x278>
			{
				if (CCR1_value<3300.0F)
 8001ed4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ed8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001ff0 <_Z19DynamicsProcessTaskPv+0x2e4>
 8001edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee4:	d501      	bpl.n	8001eea <_Z19DynamicsProcessTaskPv+0x1de>
					CCR1_value = 3300.0F;
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <_Z19DynamicsProcessTaskPv+0x2e8>)
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
				if (CCR1_value>6000.0F)
 8001eea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001eee:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001ff8 <_Z19DynamicsProcessTaskPv+0x2ec>
 8001ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efa:	dd01      	ble.n	8001f00 <_Z19DynamicsProcessTaskPv+0x1f4>
					CCR1_value = 6000.0F;
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <_Z19DynamicsProcessTaskPv+0x2f0>)
 8001efe:	647b      	str	r3, [r7, #68]	; 0x44

				if (CCR2_value<3300.0F)
 8001f00:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f04:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001ff0 <_Z19DynamicsProcessTaskPv+0x2e4>
 8001f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	d501      	bpl.n	8001f16 <_Z19DynamicsProcessTaskPv+0x20a>
					CCR2_value = 3300.0F;
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <_Z19DynamicsProcessTaskPv+0x2e8>)
 8001f14:	643b      	str	r3, [r7, #64]	; 0x40
				if (CCR2_value>6000.0F)
 8001f16:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f1a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001ff8 <_Z19DynamicsProcessTaskPv+0x2ec>
 8001f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	dd01      	ble.n	8001f2c <_Z19DynamicsProcessTaskPv+0x220>
					CCR2_value = 6000.0F;
 8001f28:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <_Z19DynamicsProcessTaskPv+0x2f0>)
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40

				if (CCR3_value<3300.0F)
 8001f2c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f30:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ff0 <_Z19DynamicsProcessTaskPv+0x2e4>
 8001f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	d501      	bpl.n	8001f42 <_Z19DynamicsProcessTaskPv+0x236>
					CCR3_value = 3300.0F;
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <_Z19DynamicsProcessTaskPv+0x2e8>)
 8001f40:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (CCR3_value>6000.0F)
 8001f42:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f46:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001ff8 <_Z19DynamicsProcessTaskPv+0x2ec>
 8001f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	dd01      	ble.n	8001f58 <_Z19DynamicsProcessTaskPv+0x24c>
					CCR3_value = 6000.0F;
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <_Z19DynamicsProcessTaskPv+0x2f0>)
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c

				if (CCR4_value<3300.0F)
 8001f58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f5c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001ff0 <_Z19DynamicsProcessTaskPv+0x2e4>
 8001f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	d501      	bpl.n	8001f6e <_Z19DynamicsProcessTaskPv+0x262>
					CCR4_value = 3300.0F;
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <_Z19DynamicsProcessTaskPv+0x2e8>)
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
				if (CCR4_value>6000.0F)
 8001f6e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f72:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ff8 <_Z19DynamicsProcessTaskPv+0x2ec>
 8001f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	dd01      	ble.n	8001f84 <_Z19DynamicsProcessTaskPv+0x278>
					CCR4_value = 6000.0F;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <_Z19DynamicsProcessTaskPv+0x2f0>)
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			if (currentFaultsStatus == FaultsStatus::CRITICAL)
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d107      	bne.n	8001f9a <_Z19DynamicsProcessTaskPv+0x28e>
			{
				CCR1_value = 3000.0F;
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <_Z19DynamicsProcessTaskPv+0x2f4>)
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
				CCR2_value = 3000.0F;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <_Z19DynamicsProcessTaskPv+0x2f4>)
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
				CCR3_value = 3000.0F;
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <_Z19DynamicsProcessTaskPv+0x2f4>)
 8001f94:	63fb      	str	r3, [r7, #60]	; 0x3c
				CCR4_value = 3000.0F;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <_Z19DynamicsProcessTaskPv+0x2f4>)
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			TIM3 -> CCR1 = static_cast<uint32_t>(CCR1_value);
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <_Z19DynamicsProcessTaskPv+0x2f8>)
 8001f9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa4:	ee17 2a90 	vmov	r2, s15
 8001fa8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = static_cast<uint32_t>(CCR2_value);
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <_Z19DynamicsProcessTaskPv+0x2f8>)
 8001fac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb4:	ee17 2a90 	vmov	r2, s15
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = static_cast<uint32_t>(CCR3_value);
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <_Z19DynamicsProcessTaskPv+0x2f8>)
 8001fbc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc4:	ee17 2a90 	vmov	r2, s15
 8001fc8:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = static_cast<uint32_t>(CCR4_value);
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <_Z19DynamicsProcessTaskPv+0x2f8>)
 8001fcc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fd4:	ee17 2a90 	vmov	r2, s15
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8001fda:	f107 030c 	add.w	r3, r7, #12
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f018 fa15 	bl	801a410 <vTaskDelayUntil>
	}
 8001fe6:	e69e      	b.n	8001d26 <_Z19DynamicsProcessTaskPv+0x1a>
 8001fe8:	20000408 	.word	0x20000408
 8001fec:	453b8000 	.word	0x453b8000
 8001ff0:	454e4000 	.word	0x454e4000
 8001ff4:	454e4000 	.word	0x454e4000
 8001ff8:	45bb8000 	.word	0x45bb8000
 8001ffc:	45bb8000 	.word	0x45bb8000
 8002000:	453b8000 	.word	0x453b8000
 8002004:	40000400 	.word	0x40000400

08002008 <_Z22isFailureFaultDetectedR30FlightControllorImplementation>:
#define SRC_IMPLEMENTATION_TASKS_FAULTSCHECKTASK_HPP_

#include "FlightControllerImplementation.hpp"

bool isFailureFaultDetected(FlightControllorImplementation& flightControllerInstance)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	const bool isRxDisconnected = flightControllerInstance.getFrSkyRXinstance().getCurrentState()==FrSkyRXState::TIMEOUT;
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff f832 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002016:	4603      	mov	r3, r0
 8002018:	4618      	mov	r0, r3
 800201a:	f003 fe15 	bl	8005c48 <_ZNK7FrSkyRX15getCurrentStateEv>
 800201e:	4603      	mov	r3, r0
 8002020:	2b04      	cmp	r3, #4
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
	if (isRxDisconnected)
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <_Z22isFailureFaultDetectedR30FlightControllorImplementation+0x2c>
		return true;
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <_Z22isFailureFaultDetectedR30FlightControllorImplementation+0x2e>

	return false;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_Z23isCriticalFaultDetectedR30FlightControllorImplementation>:

bool isCriticalFaultDetected(FlightControllorImplementation& flightControllerInstance)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]

	const bool isCrashDetected = flightControllerInstance.getICM42688Pinstance().isCriticalStateDetected();
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fff0 	bl	800102c <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 800204c:	4603      	mov	r3, r0
 800204e:	4618      	mov	r0, r3
 8002050:	f006 f81e 	bl	8008090 <_ZN9ICM42688P23isCriticalStateDetectedEv>
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
	if (isCrashDetected)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <_Z23isCriticalFaultDetectedR30FlightControllorImplementation+0x24>
		return true;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <_Z23isCriticalFaultDetectedR30FlightControllorImplementation+0x26>

	return false;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_Z15FaultsCheckTaskPv>:

void FaultsCheckTask(void *pvParameters)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002074:	f7ff fbc4 	bl	8001800 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002078:	6178      	str	r0, [r7, #20]

	const TickType_t xFrequency = 1;
 800207a:	2301      	movs	r3, #1
 800207c:	613b      	str	r3, [r7, #16]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800207e:	f018 fb4f 	bl	801a720 <xTaskGetTickCount>
 8002082:	4603      	mov	r3, r0
 8002084:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff f852 	bl	8001130 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 800208c:	60f8      	str	r0, [r7, #12]

		flightControllerInstance->getPMW3901UYinstance().incrementTimeoutCounter();
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7fe ffe6 	bl	8001060 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8002094:	4603      	mov	r3, r0
 8002096:	3336      	adds	r3, #54	; 0x36
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fdaf 	bl	8001bfc <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getFrSkyRXinstance().incrementTimeoutCounter();
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7fe ffeb 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80020a4:	4603      	mov	r3, r0
 80020a6:	3336      	adds	r3, #54	; 0x36
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fda7 	bl	8001bfc <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getMB1043instance().incrementTimeoutCounter();
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7fe fff0 	bl	8001094 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	3336      	adds	r3, #54	; 0x36
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fd9f 	bl	8001bfc <_ZN7Timeout23incrementTimeoutCounterEv>

		flightControllerInstance->getBuzzerinstance().run();
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7fe ff9b 	bl	8000ffa <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fb1f 	bl	800570a <_ZN6Buzzer3runEv>
		flightControllerInstance->getBatteryManagementinstance().run();
 80020cc:	6978      	ldr	r0, [r7, #20]
 80020ce:	f7fe fffb 	bl	80010c8 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 f9b1 	bl	800543c <_ZN17BatteryManagement3runEv>

		if (isCriticalFaultDetected(*flightControllerInstance) || currentFaultsStatus==FaultsStatus::CRITICAL)
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ffaf 	bl	800203e <_Z23isCriticalFaultDetectedR30FlightControllorImplementation>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <_Z15FaultsCheckTaskPv+0x80>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d101      	bne.n	80020f0 <_Z15FaultsCheckTaskPv+0x84>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <_Z15FaultsCheckTaskPv+0x86>
 80020f0:	2300      	movs	r3, #0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <_Z15FaultsCheckTaskPv+0x94>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 80020f6:	2103      	movs	r1, #3
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7ff f826 	bl	800114a <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
 80020fe:	e025      	b.n	800214c <_Z15FaultsCheckTaskPv+0xe0>
		}
		else if (isFailureFaultDetected(*flightControllerInstance) || currentFaultsStatus==FaultsStatus::FAILURE)
 8002100:	6978      	ldr	r0, [r7, #20]
 8002102:	f7ff ff81 	bl	8002008 <_Z22isFailureFaultDetectedR30FlightControllorImplementation>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_Z15FaultsCheckTaskPv+0xa6>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d101      	bne.n	8002116 <_Z15FaultsCheckTaskPv+0xaa>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <_Z15FaultsCheckTaskPv+0xac>
 8002116:	2300      	movs	r3, #0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <_Z15FaultsCheckTaskPv+0xba>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::CRITICAL);
 800211c:	2103      	movs	r1, #3
 800211e:	6978      	ldr	r0, [r7, #20]
 8002120:	f7ff f813 	bl	800114a <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
 8002124:	e012      	b.n	800214c <_Z15FaultsCheckTaskPv+0xe0>
		}
		else if (flightControllerInstance->getFrSkyRXinstance().getCurrentState() == FrSkyRXState::READY)
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7fe ffa7 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 800212c:	4603      	mov	r3, r0
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fd8a 	bl	8005c48 <_ZNK7FrSkyRX15getCurrentStateEv>
 8002134:	4603      	mov	r3, r0
 8002136:	2b03      	cmp	r3, #3
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <_Z15FaultsCheckTaskPv+0xe0>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::OKAY);
 8002144:	2100      	movs	r1, #0
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7fe ffff 	bl	800114a <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f018 f95c 	bl	801a410 <vTaskDelayUntil>
	}
 8002158:	e795      	b.n	8002086 <_Z15FaultsCheckTaskPv+0x1a>
	...

0800215c <_Z19sensorsDataReadTaskPv>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart6;

void sensorsDataReadTask(void *pvParameters)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af02      	add	r7, sp, #8
 8002162:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002164:	f7ff fb4c 	bl	8001800 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002168:	6178      	str	r0, [r7, #20]

	HAL_TIM_Base_Start_IT(&htim4);
 800216a:	48a7      	ldr	r0, [pc, #668]	; (8002408 <_Z19sensorsDataReadTaskPv+0x2ac>)
 800216c:	f00d fa18 	bl	800f5a0 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2105      	movs	r1, #5
 8002174:	2008      	movs	r0, #8
 8002176:	f008 fb51 	bl	800a81c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800217a:	2008      	movs	r0, #8
 800217c:	f008 fb6a 	bl	800a854 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2105      	movs	r1, #5
 8002184:	200a      	movs	r0, #10
 8002186:	f008 fb49 	bl	800a81c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800218a:	200a      	movs	r0, #10
 800218c:	f008 fb62 	bl	800a854 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	2105      	movs	r1, #5
 8002194:	2017      	movs	r0, #23
 8002196:	f008 fb41 	bl	800a81c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800219a:	2017      	movs	r0, #23
 800219c:	f008 fb5a 	bl	800a854 <HAL_NVIC_EnableIRQ>
	NVIC_SetPriorityGrouping(0);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff fc9f 	bl	8001ae4 <__NVIC_SetPriorityGrouping>

	bool startup;
	if(!flightControllerInstance->getLIS3MDLTRinstance().defaultInit())
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7fe ff1b 	bl	8000fe2 <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f006 faf0 	bl	8008794 <_ZN9LIS3MDLTR11defaultInitEv>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <_Z19sensorsDataReadTaskPv+0x68>
	  startup = false;
 80021c0:	2300      	movs	r3, #0
 80021c2:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getLIS3MDLTRinstance().update();
 80021c4:	6978      	ldr	r0, [r7, #20]
 80021c6:	f7fe ff0c 	bl	8000fe2 <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f006 f9ab 	bl	8008528 <_ZN9LIS3MDLTR6updateEv>

	if (!flightControllerInstance->getICM42688Pinstance().defaultInit())
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7fe ff2a 	bl	800102c <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80021d8:	4603      	mov	r3, r0
 80021da:	4618      	mov	r0, r3
 80021dc:	f005 fa24 	bl	8007628 <_ZN9ICM42688P11defaultInitEv>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f083 0301 	eor.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <_Z19sensorsDataReadTaskPv+0x94>
	  startup = false;
 80021ec:	2300      	movs	r3, #0
 80021ee:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getICM42688Pinstance().update();
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f7fe ff1b 	bl	800102c <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f005 fd35 	bl	8007c68 <_ZN9ICM42688P6updateEv>

	if (!flightControllerInstance->getBMP390instance().defaultInit())
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7fe ff07 	bl	8001012 <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002204:	4603      	mov	r3, r0
 8002206:	4618      	mov	r0, r3
 8002208:	f002 f8f6 	bl	80043f8 <_ZN6BMP39011defaultInitEv>
 800220c:	4603      	mov	r3, r0
 800220e:	f083 0301 	eor.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <_Z19sensorsDataReadTaskPv+0xc0>
	  startup = false;
 8002218:	2300      	movs	r3, #0
 800221a:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getBMP390instance().update();
 800221c:	6978      	ldr	r0, [r7, #20]
 800221e:	f7fe fef8 	bl	8001012 <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002222:	4603      	mov	r3, r0
 8002224:	4618      	mov	r0, r3
 8002226:	f002 f9a2 	bl	800456e <_ZN6BMP3906updateEv>

	flightControllerInstance->getFrSkyRXinstance().begin();
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f7fe ff25 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002230:	4603      	mov	r3, r0
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fb8e 	bl	8005954 <_ZN7FrSkyRX5beginEv>
	flightControllerInstance->getMB1043instance().begin();
 8002238:	6978      	ldr	r0, [r7, #20]
 800223a:	f7fe ff2b 	bl	8001094 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800223e:	4603      	mov	r3, r0
 8002240:	4618      	mov	r0, r3
 8002242:	f006 fbb1 	bl	80089a8 <_ZN6MB10435beginEv>
	flightControllerInstance->getPMW3901UYinstance().begin();
 8002246:	6978      	ldr	r0, [r7, #20]
 8002248:	f7fe ff0a 	bl	8001060 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800224c:	4603      	mov	r3, r0
 800224e:	4618      	mov	r0, r3
 8002250:	f006 fd0e 	bl	8008c70 <_ZN9PMW3901UY5beginEv>
	flightControllerInstance->getVL53L0Xinstance().begin();
 8002254:	6978      	ldr	r0, [r7, #20]
 8002256:	f7fe ff2a 	bl	80010ae <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	f007 fb97 	bl	8009990 <_ZN7VL53L0X5beginEv>

	uint32_t currentSensor = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
	xTaskCreate(DynamicsProcessTask,"DynamicsProcessTask",2048,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getDynamicsProcessHandlerPtr());
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7fe ff55 	bl	8001116 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>
 800226c:	4603      	mov	r3, r0
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	2302      	movs	r3, #2
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227a:	4964      	ldr	r1, [pc, #400]	; (800240c <_Z19sensorsDataReadTaskPv+0x2b0>)
 800227c:	4864      	ldr	r0, [pc, #400]	; (8002410 <_Z19sensorsDataReadTaskPv+0x2b4>)
 800227e:	f017 ff91 	bl	801a1a4 <xTaskCreate>
	xTaskCreate(FaultsCheckTask,"FaultsCheckTask",1024,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getFaultsCheckHandlerPtr());
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7fe ff2d 	bl	80010e2 <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>
 8002288:	4603      	mov	r3, r0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2302      	movs	r3, #2
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2300      	movs	r3, #0
 8002292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002296:	495f      	ldr	r1, [pc, #380]	; (8002414 <_Z19sensorsDataReadTaskPv+0x2b8>)
 8002298:	485f      	ldr	r0, [pc, #380]	; (8002418 <_Z19sensorsDataReadTaskPv+0x2bc>)
 800229a:	f017 ff83 	bl	801a1a4 <xTaskCreate>

	while (1)
	{
		if (xTaskNotifyWait(0x00, 0xFFFFFFFFUL, &currentSensor, portMAX_DELAY) == pdTRUE)
 800229e:	f107 0208 	add.w	r2, r7, #8
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	f04f 31ff 	mov.w	r1, #4294967295
 80022aa:	2000      	movs	r0, #0
 80022ac:	f018 fc32 	bl	801ab14 <xTaskNotifyWait>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ee      	beq.n	800229e <_Z19sensorsDataReadTaskPv+0x142>
		{
			if (currentSensor & EnumSensorsInterrupt::ICM42688P_t)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00e      	beq.n	80022e8 <_Z19sensorsDataReadTaskPv+0x18c>
			{
				flightControllerInstance->getICM42688Pinstance().update();
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7fe feae 	bl	800102c <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f005 fcc8 	bl	8007c68 <_ZN9ICM42688P6updateEv>
				flightControllerInstance->getICM42688Pinstance().incrementTaskCounter();
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f7fe fea7 	bl	800102c <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80022de:	4603      	mov	r3, r0
 80022e0:	3340      	adds	r3, #64	; 0x40
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc78 	bl	8001bd8 <_ZN12CallsCounter20incrementTaskCounterEv>
				if (testt==duplicates)
					duplicatesCounter++;
				duplicates = testt;*/
			}

			if (currentSensor & EnumSensorsInterrupt::BMP390_t)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00e      	beq.n	8002310 <_Z19sensorsDataReadTaskPv+0x1b4>
			{
				flightControllerInstance->getBMP390instance().update();
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7fe fe8d 	bl	8001012 <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 f937 	bl	800456e <_ZN6BMP3906updateEv>
				flightControllerInstance->getBMP390instance().incrementTaskCounter();
 8002300:	6978      	ldr	r0, [r7, #20]
 8002302:	f7fe fe86 	bl	8001012 <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002306:	4603      	mov	r3, r0
 8002308:	3340      	adds	r3, #64	; 0x40
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fc64 	bl	8001bd8 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::LIS3MDLTR_t)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00e      	beq.n	8002338 <_Z19sensorsDataReadTaskPv+0x1dc>
			{
				flightControllerInstance->getLIS3MDLTRinstance().update();
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7fe fe61 	bl	8000fe2 <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 8002320:	4603      	mov	r3, r0
 8002322:	4618      	mov	r0, r3
 8002324:	f006 f900 	bl	8008528 <_ZN9LIS3MDLTR6updateEv>
				flightControllerInstance->getLIS3MDLTRinstance().incrementTaskCounter();
 8002328:	6978      	ldr	r0, [r7, #20]
 800232a:	f7fe fe5a 	bl	8000fe2 <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 800232e:	4603      	mov	r3, r0
 8002330:	3340      	adds	r3, #64	; 0x40
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fc50 	bl	8001bd8 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::PMW_t)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d011      	beq.n	8002366 <_Z19sensorsDataReadTaskPv+0x20a>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <_Z19sensorsDataReadTaskPv+0x2c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
				flightControllerInstance->getPMW3901UYinstance().update();
 8002348:	6978      	ldr	r0, [r7, #20]
 800234a:	f7fe fe89 	bl	8001060 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800234e:	4603      	mov	r3, r0
 8002350:	4618      	mov	r0, r3
 8002352:	f006 fc9d 	bl	8008c90 <_ZN9PMW3901UY6updateEv>
				flightControllerInstance->getPMW3901UYinstance().incrementTaskCounter();
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7fe fe82 	bl	8001060 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 800235c:	4603      	mov	r3, r0
 800235e:	3340      	adds	r3, #64	; 0x40
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fc39 	bl	8001bd8 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::REMOTERX_t)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <_Z19sensorsDataReadTaskPv+0x24c>
			{
				FaultsStatus faultStatus = flightControllerInstance->getCurrentFaultsStatus();
 8002370:	6978      	ldr	r0, [r7, #20]
 8002372:	f7fe fedd 	bl	8001130 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8002376:	60f8      	str	r0, [r7, #12]

				if (faultStatus != FaultsStatus::FAILURE && faultStatus != FaultsStatus::CRITICAL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d014      	beq.n	80023a8 <_Z19sensorsDataReadTaskPv+0x24c>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d011      	beq.n	80023a8 <_Z19sensorsDataReadTaskPv+0x24c>
				{
					__HAL_UART_FLUSH_DRREGISTER(&huart3);
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <_Z19sensorsDataReadTaskPv+0x2c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
					flightControllerInstance->getFrSkyRXinstance().update();
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7fe fe75 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002390:	4603      	mov	r3, r0
 8002392:	4618      	mov	r0, r3
 8002394:	f003 faee 	bl	8005974 <_ZN7FrSkyRX6updateEv>
					flightControllerInstance->getFrSkyRXinstance().incrementTaskCounter();
 8002398:	6978      	ldr	r0, [r7, #20]
 800239a:	f7fe fe6e 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 800239e:	4603      	mov	r3, r0
 80023a0:	3340      	adds	r3, #64	; 0x40
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fc18 	bl	8001bd8 <_ZN12CallsCounter20incrementTaskCounterEv>
				}
			}

			if (currentSensor & EnumSensorsInterrupt::SONAR_t)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d011      	beq.n	80023d6 <_Z19sensorsDataReadTaskPv+0x27a>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart4);
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <_Z19sensorsDataReadTaskPv+0x2c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getMB1043instance().update();
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f7fe fe6b 	bl	8001094 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 80023be:	4603      	mov	r3, r0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f006 fb01 	bl	80089c8 <_ZN6MB10436updateEv>
			   flightControllerInstance->getMB1043instance().incrementTaskCounter();
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7fe fe64 	bl	8001094 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 80023cc:	4603      	mov	r3, r0
 80023ce:	3340      	adds	r3, #64	; 0x40
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fc01 	bl	8001bd8 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			if (currentSensor & EnumSensorsInterrupt::VL53L0X_t)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f43f af5e 	beq.w	800229e <_Z19sensorsDataReadTaskPv+0x142>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart6);
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <_Z19sensorsDataReadTaskPv+0x2cc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getVL53L0Xinstance().update();
 80023e8:	6978      	ldr	r0, [r7, #20]
 80023ea:	f7fe fe60 	bl	80010ae <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f007 fade 	bl	80099b2 <_ZN7VL53L0X6updateEv>
			   flightControllerInstance->getVL53L0Xinstance().incrementTaskCounter();
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7fe fe59 	bl	80010ae <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 80023fc:	4603      	mov	r3, r0
 80023fe:	3340      	adds	r3, #64	; 0x40
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fbe9 	bl	8001bd8 <_ZN12CallsCounter20incrementTaskCounterEv>
			}

			//taskCounter++;
		}
	}
 8002406:	e74a      	b.n	800229e <_Z19sensorsDataReadTaskPv+0x142>
 8002408:	20000698 	.word	0x20000698
 800240c:	0801e258 	.word	0x0801e258
 8002410:	08001d0d 	.word	0x08001d0d
 8002414:	0801e26c 	.word	0x0801e26c
 8002418:	0800206d 	.word	0x0800206d
 800241c:	20000768 	.word	0x20000768
 8002420:	200007ac 	.word	0x200007ac
 8002424:	200006e0 	.word	0x200006e0
 8002428:	200007f0 	.word	0x200007f0

0800242c <HAL_UART_TxCpltCallback>:

#include "stm32f4xx_hal.h"
#include "FlightControllerImplementation.hpp"

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002434:	f7ff f9e4 	bl	8001800 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002438:	60f8      	str	r0, [r7, #12]
    if (huart->Instance == USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a07      	ldr	r2, [pc, #28]	; (800245c <HAL_UART_TxCpltCallback+0x30>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d106      	bne.n	8002452 <HAL_UART_TxCpltCallback+0x26>
    {
    	flightControllerInstance->getHC05instance().printfSensorsValues();
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f7fe fdfe 	bl	8001046 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f003 ff4d 	bl	80062ec <_ZN4HC0519printfSensorsValuesEv>
    }
    if (huart->Instance == USART6)
    {
    }
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40011000 	.word	0x40011000

08002460 <HAL_TIM_PeriodElapsedCallback>:

int timCounter2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002472:	f007 fcc5 	bl	8009e00 <HAL_IncTick>

  if (htim->Instance == TIM4)
  {
	  //timCounter2++;
  }
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40010000 	.word	0x40010000

08002484 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002492:	f7ff f9b5 	bl	8001800 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002496:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 8002498:	6978      	ldr	r0, [r7, #20]
 800249a:	f7fe fe2f 	bl	80010fc <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 800249e:	6138      	str	r0, [r7, #16]

	switch (GPIO_Pin)
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a6:	d024      	beq.n	80024f2 <HAL_GPIO_EXTI_Callback+0x6e>
 80024a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ac:	dc60      	bgt.n	8002570 <HAL_GPIO_EXTI_Callback+0xec>
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d040      	beq.n	8002534 <HAL_GPIO_EXTI_Callback+0xb0>
 80024b2:	2b10      	cmp	r3, #16
 80024b4:	d15c      	bne.n	8002570 <HAL_GPIO_EXTI_Callback+0xec>
	{
	case (GPIO_PIN_4):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::ICM42688P_t, eSetBits, &pxHigherPriorityTaskWoken);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	2201      	movs	r2, #1
 80024c4:	2101      	movs	r1, #1
 80024c6:	f018 fb7f 	bl	801abc8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_GPIO_EXTI_Callback+0x5c>
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_GPIO_EXTI_Callback+0xf4>)
 80024d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getICM42688Pinstance().incrementInterruptCounter();
 80024e0:	6978      	ldr	r0, [r7, #20]
 80024e2:	f7fe fda3 	bl	800102c <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80024e6:	4603      	mov	r3, r0
 80024e8:	3340      	adds	r3, #64	; 0x40
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fb62 	bl	8001bb4 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 80024f0:	e03e      	b.n	8002570 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_8):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::BMP390_t, eSetBits, &pxHigherPriorityTaskWoken);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2300      	movs	r3, #0
 80024fe:	2201      	movs	r2, #1
 8002500:	2102      	movs	r1, #2
 8002502:	f018 fb61 	bl	801abc8 <xTaskGenericNotifyFromISR>
		if (pxHigherPriorityTaskWoken)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_GPIO_EXTI_Callback+0x9e>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_EXTI_Callback+0x9e>
 8002512:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getBMP390instance().incrementInterruptCounter();
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7fe fd75 	bl	8001012 <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 8002528:	4603      	mov	r3, r0
 800252a:	3340      	adds	r3, #64	; 0x40
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fb41 	bl	8001bb4 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 8002532:	e01d      	b.n	8002570 <HAL_GPIO_EXTI_Callback+0xec>

	case (GPIO_PIN_2):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::LIS3MDLTR_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2300      	movs	r3, #0
 8002540:	2201      	movs	r2, #1
 8002542:	2104      	movs	r1, #4
 8002544:	f018 fb40 	bl	801abc8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <HAL_GPIO_EXTI_Callback+0xda>
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getLIS3MDLTRinstance().incrementInterruptCounter();
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7fe fd3f 	bl	8000fe2 <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 8002564:	4603      	mov	r3, r0
 8002566:	3340      	adds	r3, #64	; 0x40
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fb23 	bl	8001bb4 <_ZN12CallsCounter25incrementInterruptCounterEv>
		break;
 800256e:	bf00      	nop
	}
}
 8002570:	bf00      	nop
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8002588:	f7ff f93a 	bl	8001800 <_ZN30FlightControllorImplementation11getInstanceEv>
 800258c:	6178      	str	r0, [r7, #20]
	TaskHandle_t* sensorsDataReadHandler = flightControllerInstance->getSensorsDataReadHandlerPtr();
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7fe fdb4 	bl	80010fc <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 8002594:	6138      	str	r0, [r7, #16]

	if (huart->Instance == USART2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <HAL_UART_RxCpltCallback+0x138>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d11d      	bne.n	80025dc <HAL_UART_RxCpltCallback+0x60>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::PMW_t, eSetBits, &pxHigherPriorityTaskWoken);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2300      	movs	r3, #0
 80025ac:	2201      	movs	r2, #1
 80025ae:	2108      	movs	r1, #8
 80025b0:	f018 fb0a 	bl	801abc8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <HAL_UART_RxCpltCallback+0x4e>
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_UART_RxCpltCallback+0x13c>)
 80025bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getPMW3901UYinstance().incrementInterruptCounter();
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7fe fd48 	bl	8001060 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 80025d0:	4603      	mov	r3, r0
 80025d2:	3340      	adds	r3, #64	; 0x40
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff faed 	bl	8001bb4 <_ZN12CallsCounter25incrementInterruptCounterEv>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::VL53L0X_t, eSetBits, &pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
		flightControllerInstance->getVL53L0Xinstance().incrementInterruptCounter();
	}
}
 80025da:	e067      	b.n	80026ac <HAL_UART_RxCpltCallback+0x130>
	} else if (huart->Instance == USART3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a36      	ldr	r2, [pc, #216]	; (80026bc <HAL_UART_RxCpltCallback+0x140>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d11d      	bne.n	8002622 <HAL_UART_RxCpltCallback+0xa6>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::REMOTERX_t, eSetBits, &pxHigherPriorityTaskWoken);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2300      	movs	r3, #0
 80025f2:	2201      	movs	r2, #1
 80025f4:	2110      	movs	r1, #16
 80025f6:	f018 fae7 	bl	801abc8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_UART_RxCpltCallback+0x94>
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_UART_RxCpltCallback+0x13c>)
 8002602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getFrSkyRXinstance().incrementInterruptCounter();
 8002610:	6978      	ldr	r0, [r7, #20]
 8002612:	f7fe fd32 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8002616:	4603      	mov	r3, r0
 8002618:	3340      	adds	r3, #64	; 0x40
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff faca 	bl	8001bb4 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 8002620:	e044      	b.n	80026ac <HAL_UART_RxCpltCallback+0x130>
	} else if (huart->Instance == UART4)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <HAL_UART_RxCpltCallback+0x144>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d11d      	bne.n	8002668 <HAL_UART_RxCpltCallback+0xec>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2300      	movs	r3, #0
 8002638:	2201      	movs	r2, #1
 800263a:	2120      	movs	r1, #32
 800263c:	f018 fac4 	bl	801abc8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_UART_RxCpltCallback+0xda>
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_UART_RxCpltCallback+0x13c>)
 8002648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getMB1043instance().incrementInterruptCounter();
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7fe fd1c 	bl	8001094 <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800265c:	4603      	mov	r3, r0
 800265e:	3340      	adds	r3, #64	; 0x40
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff faa7 	bl	8001bb4 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 8002666:	e021      	b.n	80026ac <HAL_UART_RxCpltCallback+0x130>
	}else if (huart->Instance == USART6)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <HAL_UART_RxCpltCallback+0x148>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11c      	bne.n	80026ac <HAL_UART_RxCpltCallback+0x130>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::VL53L0X_t, eSetBits, &pxHigherPriorityTaskWoken);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2300      	movs	r3, #0
 800267e:	2201      	movs	r2, #1
 8002680:	2140      	movs	r1, #64	; 0x40
 8002682:	f018 faa1 	bl	801abc8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_UART_RxCpltCallback+0x120>
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_UART_RxCpltCallback+0x13c>)
 800268e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	f3bf 8f6f 	isb	sy
		flightControllerInstance->getVL53L0Xinstance().incrementInterruptCounter();
 800269c:	6978      	ldr	r0, [r7, #20]
 800269e:	f7fe fd06 	bl	80010ae <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 80026a2:	4603      	mov	r3, r0
 80026a4:	3340      	adds	r3, #64	; 0x40
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fa84 	bl	8001bb4 <_ZN12CallsCounter25incrementInterruptCounterEv>
}
 80026ac:	bf00      	nop
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40004400 	.word	0x40004400
 80026b8:	e000ed04 	.word	0xe000ed04
 80026bc:	40004800 	.word	0x40004800
 80026c0:	40004c00 	.word	0x40004c00
 80026c4:	40011400 	.word	0x40011400

080026c8 <main>:
static void MX_TIM3_Init();
static void MX_SDIO_SD_Init(void);

char buffer[100];
int main(void)
{
 80026c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ca:	b091      	sub	sp, #68	; 0x44
 80026cc:	af02      	add	r7, sp, #8
  HAL_Init();//1.19 17 0.38 37 88.20
 80026ce:	f007 fb75 	bl	8009dbc <HAL_Init>
  SystemClock_Config();
 80026d2:	f000 f929 	bl	8002928 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 80026d6:	f000 fce1 	bl	800309c <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 80026da:	f018 ffef 	bl	801b6bc <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80026de:	f000 fc6f 	bl	8002fc0 <_ZL11MX_DMA_Initv>
  MX_SPI2_Init();
 80026e2:	f000 fa2b 	bl	8002b3c <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 80026e6:	f000 fbaf 	bl	8002e48 <_ZL19MX_USART1_UART_Initv>
  MX_SDIO_SD_Init();
 80026ea:	f000 f9ed 	bl	8002ac8 <_ZL15MX_SDIO_SD_Initv>
  MX_FATFS_Init();
 80026ee:	f011 fbe1 	bl	8013eb4 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 80026f2:	f000 fc05 	bl	8002f00 <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 80026f6:	f000 f98b 	bl	8002a10 <_ZL12MX_ADC1_Initv>
  MX_UART4_Init();
 80026fa:	f000 fb77 	bl	8002dec <_ZL13MX_UART4_Initv>
  MX_USART2_UART_Init();
 80026fe:	f000 fbd1 	bl	8002ea4 <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 8002702:	f000 fc2f 	bl	8002f64 <_ZL19MX_USART6_UART_Initv>
  MX_TIM4_Init();
 8002706:	f000 fb15 	bl	8002d34 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 800270a:	f000 fa53 	bl	8002bb4 <_ZL12MX_TIM3_Initv>

  FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 800270e:	f7ff f877 	bl	8001800 <_ZN30FlightControllorImplementation11getInstanceEv>
 8002712:	6338      	str	r0, [r7, #48]	; 0x30

  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getPMW3901UYinstance());
 8002714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002716:	f7fe fc96 	bl	8001046 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800271a:	4606      	mov	r6, r0
 800271c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800271e:	f7fe fc9f 	bl	8001060 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8002722:	4603      	mov	r3, r0
 8002724:	4619      	mov	r1, r3
 8002726:	4630      	mov	r0, r6
 8002728:	f003 fdcf 	bl	80062ca <_ZN4HC059addSensorEP15PrintableSensor>
  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getVL53L0Xinstance());
 800272c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800272e:	f7fe fc8a 	bl	8001046 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 8002732:	4606      	mov	r6, r0
 8002734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002736:	f7fe fcba 	bl	80010ae <_ZN30FlightControllorImplementation18getVL53L0XinstanceEv>
 800273a:	4603      	mov	r3, r0
 800273c:	4619      	mov	r1, r3
 800273e:	4630      	mov	r0, r6
 8002740:	f003 fdc3 	bl	80062ca <_ZN4HC059addSensorEP15PrintableSensor>
  flightControllerInstance->getHC05instance().addSensor(&flightControllerInstance->getICM42688Pinstance());
 8002744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002746:	f7fe fc7e 	bl	8001046 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800274a:	4606      	mov	r6, r0
 800274c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800274e:	f7fe fc6d 	bl	800102c <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <main+0x94>
 8002758:	3304      	adds	r3, #4
 800275a:	e000      	b.n	800275e <main+0x96>
 800275c:	2300      	movs	r3, #0
 800275e:	4619      	mov	r1, r3
 8002760:	4630      	mov	r0, r6
 8002762:	f003 fdb2 	bl	80062ca <_ZN4HC059addSensorEP15PrintableSensor>

  flightControllerInstance->getHC05instance().addSensorParameter(SENSOR_DATA_PARAMETER::VL53_DISTANCE);
 8002766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002768:	f7fe fc6d 	bl	8001046 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800276c:	4603      	mov	r3, r0
 800276e:	2114      	movs	r1, #20
 8002770:	4618      	mov	r0, r3
 8002772:	f003 fe05 	bl	8006380 <_ZN4HC0518addSensorParameterE21SENSOR_DATA_PARAMETER>
  flightControllerInstance->getHC05instance().printfSensorsValues();
 8002776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002778:	f7fe fc65 	bl	8001046 <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800277c:	4603      	mov	r3, r0
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fdb4 	bl	80062ec <_ZN4HC0519printfSensorsValuesEv>

  TIM3 -> CCR1 = 0;
 8002784:	4b5d      	ldr	r3, [pc, #372]	; (80028fc <main+0x234>)
 8002786:	2200      	movs	r2, #0
 8002788:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3 -> CCR2 = 0;
 800278a:	4b5c      	ldr	r3, [pc, #368]	; (80028fc <main+0x234>)
 800278c:	2200      	movs	r2, #0
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3 -> CCR3 = 0;
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <main+0x234>)
 8002792:	2200      	movs	r2, #0
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3 -> CCR4 = 0;
 8002796:	4b59      	ldr	r3, [pc, #356]	; (80028fc <main+0x234>)
 8002798:	2200      	movs	r2, #0
 800279a:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800279c:	2100      	movs	r1, #0
 800279e:	4858      	ldr	r0, [pc, #352]	; (8002900 <main+0x238>)
 80027a0:	f00c ffc8 	bl	800f734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80027a4:	2104      	movs	r1, #4
 80027a6:	4856      	ldr	r0, [pc, #344]	; (8002900 <main+0x238>)
 80027a8:	f00c ffc4 	bl	800f734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80027ac:	2108      	movs	r1, #8
 80027ae:	4854      	ldr	r0, [pc, #336]	; (8002900 <main+0x238>)
 80027b0:	f00c ffc0 	bl	800f734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80027b4:	210c      	movs	r1, #12
 80027b6:	4852      	ldr	r0, [pc, #328]	; (8002900 <main+0x238>)
 80027b8:	f00c ffbc 	bl	800f734 <HAL_TIM_PWM_Start>

  	char data[] = {0xA5,0x51,0xF6};
 80027bc:	4a51      	ldr	r2, [pc, #324]	; (8002904 <main+0x23c>)
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	4611      	mov	r1, r2
 80027c6:	8019      	strh	r1, [r3, #0]
 80027c8:	3302      	adds	r3, #2
 80027ca:	0c12      	lsrs	r2, r2, #16
 80027cc:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart6, (uint8_t*)data, strlen(data),1000);
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fd56 	bl	8000284 <strlen>
 80027d8:	4603      	mov	r3, r0
 80027da:	b29a      	uxth	r2, r3
 80027dc:	f107 010c 	add.w	r1, r7, #12
 80027e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e4:	4848      	ldr	r0, [pc, #288]	; (8002908 <main+0x240>)
 80027e6:	f00d ff14 	bl	8010612 <HAL_UART_Transmit>
	HAL_Delay(100);
 80027ea:	2064      	movs	r0, #100	; 0x64
 80027ec:	f007 fb28 	bl	8009e40 <HAL_Delay>

  	char data1[] = {0xA5,0x25,0xCA};
 80027f0:	4a46      	ldr	r2, [pc, #280]	; (800290c <main+0x244>)
 80027f2:	f107 0308 	add.w	r3, r7, #8
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4611      	mov	r1, r2
 80027fa:	8019      	strh	r1, [r3, #0]
 80027fc:	3302      	adds	r3, #2
 80027fe:	0c12      	lsrs	r2, r2, #16
 8002800:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, (uint8_t*)data1, strlen(data1),1000);
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fd3c 	bl	8000284 <strlen>
 800280c:	4603      	mov	r3, r0
 800280e:	b29a      	uxth	r2, r3
 8002810:	f107 0108 	add.w	r1, r7, #8
 8002814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002818:	483b      	ldr	r0, [pc, #236]	; (8002908 <main+0x240>)
 800281a:	f00d fefa 	bl	8010612 <HAL_UART_Transmit>
	HAL_Delay(100);
 800281e:	2064      	movs	r0, #100	; 0x64
 8002820:	f007 fb0e 	bl	8009e40 <HAL_Delay>

	SDIODriver sdioDriver;
	sdioDriver.Mount_SD("/");
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	493a      	ldr	r1, [pc, #232]	; (8002910 <main+0x248>)
 8002828:	4618      	mov	r0, r3
 800282a:	f006 fddd 	bl	80093e8 <_ZN10SDIODriver8Mount_SDEPKc>
	sdioDriver.Format_SD();
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4618      	mov	r0, r3
 8002832:	f006 fe03 	bl	800943c <_ZN10SDIODriver9Format_SDEv>
	sdioDriver.Create_File("FILE1.TXT");
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	4936      	ldr	r1, [pc, #216]	; (8002914 <main+0x24c>)
 800283a:	4618      	mov	r0, r3
 800283c:	f006 fe68 	bl	8009510 <_ZN10SDIODriver11Create_FileEPc>
	sdioDriver.Unmount_SD("/");
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	4933      	ldr	r1, [pc, #204]	; (8002910 <main+0x248>)
 8002844:	4618      	mov	r0, r3
 8002846:	f006 fde5 	bl	8009414 <_ZN10SDIODriver10Unmount_SDEPKc>

	sdioDriver.Mount_SD("/");
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	4930      	ldr	r1, [pc, #192]	; (8002910 <main+0x248>)
 800284e:	4618      	mov	r0, r3
 8002850:	f006 fdca 	bl	80093e8 <_ZN10SDIODriver8Mount_SDEPKc>
	for (int i=0;i<10;i++)
 8002854:	2300      	movs	r3, #0
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
 8002858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285a:	2b09      	cmp	r3, #9
 800285c:	dc37      	bgt.n	80028ce <main+0x206>
	{
		long long t = HAL_GetTick();
 800285e:	f007 fae3 	bl	8009e28 <HAL_GetTick>
 8002862:	4603      	mov	r3, r0
 8002864:	2200      	movs	r2, #0
 8002866:	461c      	mov	r4, r3
 8002868:	4615      	mov	r5, r2
 800286a:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28

		sprintf(buffer, std::to_string(t).c_str());
 800286e:	f107 0110 	add.w	r1, r7, #16
 8002872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002876:	4608      	mov	r0, r1
 8002878:	f7ff f958 	bl	8001b2c <_ZNSt7__cxx119to_stringEx>
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4618      	mov	r0, r3
 8002882:	f019 fe68 	bl	801c556 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002886:	4603      	mov	r3, r0
 8002888:	4619      	mov	r1, r3
 800288a:	4823      	ldr	r0, [pc, #140]	; (8002918 <main+0x250>)
 800288c:	f01b f8e6 	bl	801da5c <siprintf>
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	4618      	mov	r0, r3
 8002896:	f019 fe55 	bl	801c544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		strcat(buffer,"\n");
 800289a:	481f      	ldr	r0, [pc, #124]	; (8002918 <main+0x250>)
 800289c:	f7fd fcf2 	bl	8000284 <strlen>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <main+0x250>)
 80028a6:	4413      	add	r3, r2
 80028a8:	491c      	ldr	r1, [pc, #112]	; (800291c <main+0x254>)
 80028aa:	461a      	mov	r2, r3
 80028ac:	460b      	mov	r3, r1
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	8013      	strh	r3, [r2, #0]
		sdioDriver.Update_File("FILE1.TXT", buffer);
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	4a18      	ldr	r2, [pc, #96]	; (8002918 <main+0x250>)
 80028b6:	4917      	ldr	r1, [pc, #92]	; (8002914 <main+0x24c>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f006 fe57 	bl	800956c <_ZN10SDIODriver11Update_FileEPcS0_>

		HAL_Delay(1000);
 80028be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c2:	f007 fabd 	bl	8009e40 <HAL_Delay>
	for (int i=0;i<10;i++)
 80028c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c8:	3301      	adds	r3, #1
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
 80028cc:	e7c4      	b.n	8002858 <main+0x190>
	}
	sdioDriver.Unmount_SD("/");
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	490f      	ldr	r1, [pc, #60]	; (8002910 <main+0x248>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f006 fd9e 	bl	8009414 <_ZN10SDIODriver10Unmount_SDEPKc>

  xTaskCreate(sensorsDataReadTask,"SensorsDataReadTask",1024,NULL,tskIDLE_PRIORITY+3, flightControllerInstance->getSensorsDataReadHandlerPtr());
 80028d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028da:	f7fe fc0f 	bl	80010fc <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 80028de:	4603      	mov	r3, r0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	2303      	movs	r3, #3
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2300      	movs	r3, #0
 80028e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ec:	490c      	ldr	r1, [pc, #48]	; (8002920 <main+0x258>)
 80028ee:	480d      	ldr	r0, [pc, #52]	; (8002924 <main+0x25c>)
 80028f0:	f017 fc58 	bl	801a1a4 <xTaskCreate>
  vTaskStartScheduler();
 80028f4:	f017 fe0a 	bl	801a50c <vTaskStartScheduler>

  while (1)
 80028f8:	e7fe      	b.n	80028f8 <main+0x230>
 80028fa:	bf00      	nop
 80028fc:	40000400 	.word	0x40000400
 8002900:	20000650 	.word	0x20000650
 8002904:	0801e2a4 	.word	0x0801e2a4
 8002908:	200007f0 	.word	0x200007f0
 800290c:	0801e2a8 	.word	0x0801e2a8
 8002910:	0801e27c 	.word	0x0801e27c
 8002914:	0801e280 	.word	0x0801e280
 8002918:	20000a74 	.word	0x20000a74
 800291c:	0801e28c 	.word	0x0801e28c
 8002920:	0801e290 	.word	0x0801e290
 8002924:	0800215d 	.word	0x0800215d

08002928 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b094      	sub	sp, #80	; 0x50
 800292c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2230      	movs	r2, #48	; 0x30
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f01a ff54 	bl	801d7e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <_Z18SystemClock_Configv+0xe0>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a2c      	ldr	r2, [pc, #176]	; (8002a08 <_Z18SystemClock_Configv+0xe0>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
 800295c:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <_Z18SystemClock_Configv+0xe0>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <_Z18SystemClock_Configv+0xe4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <_Z18SystemClock_Configv+0xe4>)
 8002972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <_Z18SystemClock_Configv+0xe4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002984:	2301      	movs	r3, #1
 8002986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800298e:	2302      	movs	r3, #2
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002998:	2308      	movs	r3, #8
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800299c:	2390      	movs	r3, #144	; 0x90
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029a0:	2302      	movs	r3, #2
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80029a4:	2306      	movs	r3, #6
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a8:	f107 0320 	add.w	r3, r7, #32
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00a f99b 	bl	800cce8 <HAL_RCC_OscConfig>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80029c2:	f000 fc2b 	bl	800321c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c6:	230f      	movs	r3, #15
 80029c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ca:	2302      	movs	r3, #2
 80029cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	2104      	movs	r1, #4
 80029e4:	4618      	mov	r0, r3
 80029e6:	f00a fbf7 	bl	800d1d8 <HAL_RCC_ClockConfig>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80029fa:	f000 fc0f 	bl	800321c <Error_Handler>
  }
}
 80029fe:	bf00      	nop
 8002a00:	3750      	adds	r7, #80	; 0x50
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000

08002a10 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a16:	463b      	mov	r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a24:	4a26      	ldr	r2, [pc, #152]	; (8002ac0 <_ZL12MX_ADC1_Initv+0xb0>)
 8002a26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a2e:	4b23      	ldr	r3, [pc, #140]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a48:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <_ZL12MX_ADC1_Initv+0xb4>)
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a6e:	4813      	ldr	r0, [pc, #76]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a70:	f007 fa0a 	bl	8009e88 <HAL_ADC_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8002a84:	f000 fbca 	bl	800321c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002a88:	230a      	movs	r3, #10
 8002a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a94:	463b      	mov	r3, r7
 8002a96:	4619      	mov	r1, r3
 8002a98:	4808      	ldr	r0, [pc, #32]	; (8002abc <_ZL12MX_ADC1_Initv+0xac>)
 8002a9a:	f007 fb67 	bl	800a16c <HAL_ADC_ConfigChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8002aae:	f000 fbb5 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000040c 	.word	0x2000040c
 8002ac0:	40012000 	.word	0x40012000
 8002ac4:	0f000001 	.word	0x0f000001

08002ac8 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ace:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <_ZL15MX_SDIO_SD_Initv+0x70>)
 8002ad0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002af2:	2208      	movs	r2, #8
 8002af4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8002af6:	480f      	ldr	r0, [pc, #60]	; (8002b34 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002af8:	f00a fdbe 	bl	800d678 <HAL_SD_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 8002b0c:	f000 fb86 	bl	800321c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8002b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b14:	4807      	ldr	r0, [pc, #28]	; (8002b34 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8002b16:	f00b fb93 	bl	800e240 <HAL_SD_ConfigWideBusOperation>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 8002b2a:	f000 fb77 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200004b4 	.word	0x200004b4
 8002b38:	40012c00 	.word	0x40012c00

08002b3c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b42:	4a1b      	ldr	r2, [pc, #108]	; (8002bb0 <_ZL12MX_SPI2_Initv+0x74>)
 8002b44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b54:	4b15      	ldr	r3, [pc, #84]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b74:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b88:	220a      	movs	r2, #10
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b8c:	4807      	ldr	r0, [pc, #28]	; (8002bac <_ZL12MX_SPI2_Initv+0x70>)
 8002b8e:	f00b fefe 	bl	800e98e <HAL_SPI_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8002ba2:	f000 fb3b 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000538 	.word	0x20000538
 8002bb0:	40003800 	.word	0x40003800

08002bb4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08e      	sub	sp, #56	; 0x38
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc8:	f107 0320 	add.w	r3, r7, #32
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002be4:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002be6:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <_ZL12MX_TIM3_Initv+0x17c>)
 8002be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8002bea:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002bec:	2202      	movs	r2, #2
 8002bee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 8002bf6:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002bf8:	f241 726f 	movw	r2, #5999	; 0x176f
 8002bfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c04:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c0a:	4848      	ldr	r0, [pc, #288]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002c0c:	f00c fc78 	bl	800f500 <HAL_TIM_Base_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8002c20:	f000 fafc 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c2e:	4619      	mov	r1, r3
 8002c30:	483e      	ldr	r0, [pc, #248]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002c32:	f00d f811 	bl	800fc58 <HAL_TIM_ConfigClockSource>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8002c46:	f000 fae9 	bl	800321c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c4a:	4838      	ldr	r0, [pc, #224]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002c4c:	f00c fd18 	bl	800f680 <HAL_TIM_PWM_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8002c60:	f000 fadc 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c6c:	f107 0320 	add.w	r3, r7, #32
 8002c70:	4619      	mov	r1, r3
 8002c72:	482e      	ldr	r0, [pc, #184]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002c74:	f00d fbf0 	bl	8010458 <HAL_TIMEx_MasterConfigSynchronization>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8002c88:	f000 fac8 	bl	800321c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c8c:	2360      	movs	r3, #96	; 0x60
 8002c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4822      	ldr	r0, [pc, #136]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002ca4:	f00c ff16 	bl	800fad4 <HAL_TIM_PWM_ConfigChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8002cb8:	f000 fab0 	bl	800321c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	481a      	ldr	r0, [pc, #104]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002cc4:	f00c ff06 	bl	800fad4 <HAL_TIM_PWM_ConfigChannel>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8002cd8:	f000 faa0 	bl	800321c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	2208      	movs	r2, #8
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4812      	ldr	r0, [pc, #72]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002ce4:	f00c fef6 	bl	800fad4 <HAL_TIM_PWM_ConfigChannel>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 8002cf8:	f000 fa90 	bl	800321c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	220c      	movs	r2, #12
 8002d00:	4619      	mov	r1, r3
 8002d02:	480a      	ldr	r0, [pc, #40]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002d04:	f00c fee6 	bl	800fad4 <HAL_TIM_PWM_ConfigChannel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 8002d18:	f000 fa80 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <_ZL12MX_TIM3_Initv+0x178>)
 8002d1e:	f000 fd4b 	bl	80037b8 <HAL_TIM_MspPostInit>

}
 8002d22:	bf00      	nop
 8002d24:	3738      	adds	r7, #56	; 0x38
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000650 	.word	0x20000650
 8002d30:	40000400 	.word	0x40000400

08002d34 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d3a:	f107 0308 	add.w	r3, r7, #8
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d48:	463b      	mov	r3, r7
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d50:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <_ZL12MX_TIM4_Initv+0xb0>)
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002d54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <_ZL12MX_TIM4_Initv+0xb0>)
 8002d58:	228f      	movs	r2, #143	; 0x8f
 8002d5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <_ZL12MX_TIM4_Initv+0xb0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <_ZL12MX_TIM4_Initv+0xb0>)
 8002d64:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002d68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <_ZL12MX_TIM4_Initv+0xb0>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d70:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <_ZL12MX_TIM4_Initv+0xb0>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d76:	481b      	ldr	r0, [pc, #108]	; (8002de4 <_ZL12MX_TIM4_Initv+0xb0>)
 8002d78:	f00c fbc2 	bl	800f500 <HAL_TIM_Base_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8002d8c:	f000 fa46 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4811      	ldr	r0, [pc, #68]	; (8002de4 <_ZL12MX_TIM4_Initv+0xb0>)
 8002d9e:	f00c ff5b 	bl	800fc58 <HAL_TIM_ConfigClockSource>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8002db2:	f000 fa33 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4808      	ldr	r0, [pc, #32]	; (8002de4 <_ZL12MX_TIM4_Initv+0xb0>)
 8002dc4:	f00d fb48 	bl	8010458 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8002dd8:	f000 fa20 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ddc:	bf00      	nop
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000698 	.word	0x20000698
 8002de8:	40000800 	.word	0x40000800

08002dec <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <_ZL13MX_UART4_Initv+0x54>)
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <_ZL13MX_UART4_Initv+0x58>)
 8002df4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <_ZL13MX_UART4_Initv+0x54>)
 8002df8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002dfc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <_ZL13MX_UART4_Initv+0x54>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <_ZL13MX_UART4_Initv+0x54>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <_ZL13MX_UART4_Initv+0x54>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <_ZL13MX_UART4_Initv+0x54>)
 8002e12:	220c      	movs	r2, #12
 8002e14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <_ZL13MX_UART4_Initv+0x54>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <_ZL13MX_UART4_Initv+0x54>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e22:	4807      	ldr	r0, [pc, #28]	; (8002e40 <_ZL13MX_UART4_Initv+0x54>)
 8002e24:	f00d fba8 	bl	8010578 <HAL_UART_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8002e38:	f000 f9f0 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	200006e0 	.word	0x200006e0
 8002e44:	40004c00 	.word	0x40004c00

08002e48 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e4e:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e6e:	220c      	movs	r2, #12
 8002e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e7e:	4807      	ldr	r0, [pc, #28]	; (8002e9c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e80:	f00d fb7a 	bl	8010578 <HAL_UART_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002e94:	f000 f9c2 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000724 	.word	0x20000724
 8002ea0:	40011000 	.word	0x40011000

08002ea4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002eaa:	4a14      	ldr	r2, [pc, #80]	; (8002efc <_ZL19MX_USART2_UART_Initv+0x58>)
 8002eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002eb0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002eca:	220c      	movs	r2, #12
 8002ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eda:	4807      	ldr	r0, [pc, #28]	; (8002ef8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002edc:	f00d fb4c 	bl	8010578 <HAL_UART_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002ef0:	f000 f994 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000768 	.word	0x20000768
 8002efc:	40004400 	.word	0x40004400

08002f00 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f06:	4a15      	ldr	r2, [pc, #84]	; (8002f5c <_ZL19MX_USART3_UART_Initv+0x5c>)
 8002f08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <_ZL19MX_USART3_UART_Initv+0x60>)
 8002f0e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f24:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f28:	220c      	movs	r2, #12
 8002f2a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f3a:	f00d fb1d 	bl	8010578 <HAL_UART_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <_ZL19MX_USART3_UART_Initv+0x52>
  {
    Error_Handler();
 8002f4e:	f000 f965 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200007ac 	.word	0x200007ac
 8002f5c:	40004800 	.word	0x40004800
 8002f60:	000186a0 	.word	0x000186a0

08002f64 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002f6a:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <_ZL19MX_USART6_UART_Initv+0x58>)
 8002f6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002f70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f9a:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002f9c:	f00d faec 	bl	8010578 <HAL_UART_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8002fb0:	f000 f934 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200007f0 	.word	0x200007f0
 8002fbc:	40011400 	.word	0x40011400

08002fc0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <_ZL11MX_DMA_Initv+0xd8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a32      	ldr	r2, [pc, #200]	; (8003098 <_ZL11MX_DMA_Initv+0xd8>)
 8002fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <_ZL11MX_DMA_Initv+0xd8>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <_ZL11MX_DMA_Initv+0xd8>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a2b      	ldr	r2, [pc, #172]	; (8003098 <_ZL11MX_DMA_Initv+0xd8>)
 8002fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b29      	ldr	r3, [pc, #164]	; (8003098 <_ZL11MX_DMA_Initv+0xd8>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2105      	movs	r1, #5
 8003002:	200c      	movs	r0, #12
 8003004:	f007 fc0a 	bl	800a81c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003008:	200c      	movs	r0, #12
 800300a:	f007 fc23 	bl	800a854 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2105      	movs	r1, #5
 8003012:	200d      	movs	r0, #13
 8003014:	f007 fc02 	bl	800a81c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003018:	200d      	movs	r0, #13
 800301a:	f007 fc1b 	bl	800a854 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	2105      	movs	r1, #5
 8003022:	200e      	movs	r0, #14
 8003024:	f007 fbfa 	bl	800a81c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003028:	200e      	movs	r0, #14
 800302a:	f007 fc13 	bl	800a854 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2105      	movs	r1, #5
 8003032:	200f      	movs	r0, #15
 8003034:	f007 fbf2 	bl	800a81c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003038:	200f      	movs	r0, #15
 800303a:	f007 fc0b 	bl	800a854 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2105      	movs	r1, #5
 8003042:	2010      	movs	r0, #16
 8003044:	f007 fbea 	bl	800a81c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003048:	2010      	movs	r0, #16
 800304a:	f007 fc03 	bl	800a854 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2105      	movs	r1, #5
 8003052:	2038      	movs	r0, #56	; 0x38
 8003054:	f007 fbe2 	bl	800a81c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003058:	2038      	movs	r0, #56	; 0x38
 800305a:	f007 fbfb 	bl	800a854 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800305e:	2200      	movs	r2, #0
 8003060:	2105      	movs	r1, #5
 8003062:	2039      	movs	r0, #57	; 0x39
 8003064:	f007 fbda 	bl	800a81c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003068:	2039      	movs	r0, #57	; 0x39
 800306a:	f007 fbf3 	bl	800a854 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2105      	movs	r1, #5
 8003072:	2045      	movs	r0, #69	; 0x45
 8003074:	f007 fbd2 	bl	800a81c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003078:	2045      	movs	r0, #69	; 0x45
 800307a:	f007 fbeb 	bl	800a854 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2105      	movs	r1, #5
 8003082:	2046      	movs	r0, #70	; 0x46
 8003084:	f007 fbca 	bl	800a81c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003088:	2046      	movs	r0, #70	; 0x46
 800308a:	f007 fbe3 	bl	800a854 <HAL_NVIC_EnableIRQ>

}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800

0800309c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	4b55      	ldr	r3, [pc, #340]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a54      	ldr	r2, [pc, #336]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 80030bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b52      	ldr	r3, [pc, #328]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	4b4e      	ldr	r3, [pc, #312]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a4d      	ldr	r2, [pc, #308]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	4b47      	ldr	r3, [pc, #284]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a46      	ldr	r2, [pc, #280]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b44      	ldr	r3, [pc, #272]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	4b40      	ldr	r3, [pc, #256]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a3f      	ldr	r2, [pc, #252]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b3d      	ldr	r3, [pc, #244]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	4b39      	ldr	r3, [pc, #228]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a38      	ldr	r2, [pc, #224]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <_ZL12MX_GPIO_Initv+0x170>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800313e:	2200      	movs	r2, #0
 8003140:	2130      	movs	r1, #48	; 0x30
 8003142:	4833      	ldr	r0, [pc, #204]	; (8003210 <_ZL12MX_GPIO_Initv+0x174>)
 8003144:	f008 faf4 	bl	800b730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8003148:	2200      	movs	r2, #0
 800314a:	2120      	movs	r1, #32
 800314c:	4831      	ldr	r0, [pc, #196]	; (8003214 <_ZL12MX_GPIO_Initv+0x178>)
 800314e:	f008 faef 	bl	800b730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003152:	2200      	movs	r2, #0
 8003154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003158:	482f      	ldr	r0, [pc, #188]	; (8003218 <_ZL12MX_GPIO_Initv+0x17c>)
 800315a:	f008 fae9 	bl	800b730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800315e:	2330      	movs	r3, #48	; 0x30
 8003160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003162:	2301      	movs	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	f107 0314 	add.w	r3, r7, #20
 8003172:	4619      	mov	r1, r3
 8003174:	4826      	ldr	r0, [pc, #152]	; (8003210 <_ZL12MX_GPIO_Initv+0x174>)
 8003176:	f008 f93f 	bl	800b3f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800317a:	2310      	movs	r3, #16
 800317c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800317e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4619      	mov	r1, r3
 800318e:	4821      	ldr	r0, [pc, #132]	; (8003214 <_ZL12MX_GPIO_Initv+0x178>)
 8003190:	f008 f932 	bl	800b3f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003194:	2320      	movs	r3, #32
 8003196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003198:	2301      	movs	r3, #1
 800319a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a0:	2300      	movs	r3, #0
 80031a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4619      	mov	r1, r3
 80031aa:	481a      	ldr	r0, [pc, #104]	; (8003214 <_ZL12MX_GPIO_Initv+0x178>)
 80031ac:	f008 f924 	bl	800b3f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031b0:	2304      	movs	r3, #4
 80031b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	4814      	ldr	r0, [pc, #80]	; (8003218 <_ZL12MX_GPIO_Initv+0x17c>)
 80031c6:	f008 f917 	bl	800b3f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d0:	2301      	movs	r3, #1
 80031d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d8:	2300      	movs	r3, #0
 80031da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031dc:	f107 0314 	add.w	r3, r7, #20
 80031e0:	4619      	mov	r1, r3
 80031e2:	480d      	ldr	r0, [pc, #52]	; (8003218 <_ZL12MX_GPIO_Initv+0x17c>)
 80031e4:	f008 f908 	bl	800b3f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	4619      	mov	r1, r3
 80031fe:	4804      	ldr	r0, [pc, #16]	; (8003210 <_ZL12MX_GPIO_Initv+0x174>)
 8003200:	f008 f8fa 	bl	800b3f8 <HAL_GPIO_Init>
}
 8003204:	bf00      	nop
 8003206:	3728      	adds	r7, #40	; 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	40020000 	.word	0x40020000
 8003214:	40020800 	.word	0x40020800
 8003218:	40020400 	.word	0x40020400

0800321c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003220:	b672      	cpsid	i
}
 8003222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003224:	e7fe      	b.n	8003224 <Error_Handler+0x8>

08003226 <_ZNSt8__detail14__to_chars_lenIyEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8003226:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800322a:	b08c      	sub	sp, #48	; 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003232:	617a      	str	r2, [r7, #20]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8003234:	2301      	movs	r3, #1
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
      const unsigned __b2 = __base  * __base;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fb03 f303 	mul.w	r3, r3, r3
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
      const unsigned __b3 = __b2 * __base;
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	fb02 f303 	mul.w	r3, r2, r3
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
      const unsigned long __b4 = __b3 * __base;
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	623b      	str	r3, [r7, #32]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2200      	movs	r2, #0
 8003258:	461c      	mov	r4, r3
 800325a:	4615      	mov	r5, r2
 800325c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003260:	42a2      	cmp	r2, r4
 8003262:	41ab      	sbcs	r3, r5
 8003264:	d201      	bcs.n	800326a <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x44>
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	e039      	b.n	80032de <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b2) return __n + 1;
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	2200      	movs	r2, #0
 800326e:	4698      	mov	r8, r3
 8003270:	4691      	mov	r9, r2
 8003272:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003276:	4542      	cmp	r2, r8
 8003278:	eb73 0309 	sbcs.w	r3, r3, r9
 800327c:	d202      	bcs.n	8003284 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x5e>
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	3301      	adds	r3, #1
 8003282:	e02c      	b.n	80032de <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b3) return __n + 2;
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	2200      	movs	r2, #0
 8003288:	469a      	mov	sl, r3
 800328a:	4693      	mov	fp, r2
 800328c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003290:	4552      	cmp	r2, sl
 8003292:	eb73 030b 	sbcs.w	r3, r3, fp
 8003296:	d202      	bcs.n	800329e <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x78>
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	3302      	adds	r3, #2
 800329c:	e01f      	b.n	80032de <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b4) return __n + 3;
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2200      	movs	r2, #0
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	60fa      	str	r2, [r7, #12]
 80032a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	428a      	cmp	r2, r1
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	418b      	sbcs	r3, r1
 80032b2:	d202      	bcs.n	80032ba <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x94>
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	3303      	adds	r3, #3
 80032b8:	e011      	b.n	80032de <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  __value /= __b4;
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	2200      	movs	r2, #0
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032ca:	f7fd fcc7 	bl	8000c5c <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  __n += 4;
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	3304      	adds	r3, #4
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (__value < (unsigned)__base) return __n;
 80032dc:	e7ba      	b.n	8003254 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x2e>
	}
    }
 80032de:	4618      	mov	r0, r3
 80032e0:	3730      	adds	r7, #48	; 0x30
 80032e2:	46bd      	mov	sp, r7
 80032e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032e8 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b08c      	sub	sp, #48	; 0x30
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6178      	str	r0, [r7, #20]
 80032f2:	6139      	str	r1, [r7, #16]
 80032f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__val >= 100)
 80032fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003302:	2a64      	cmp	r2, #100	; 0x64
 8003304:	f173 0300 	sbcs.w	r3, r3, #0
 8003308:	d335      	bcc.n	8003376 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x8e>
	{
	  auto const __num = (__val % 100) * 2;
 800330a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800330e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	f7fd fca1 	bl	8000c5c <__aeabi_uldivmod>
 800331a:	1891      	adds	r1, r2, r2
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	415b      	adcs	r3, r3
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003326:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  __val /= 100;
 800332a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800332e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	f7fd fc91 	bl	8000c5c <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  __first[__pos] = __digits[__num + 1];
 8003342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003346:	f112 0a01 	adds.w	sl, r2, #1
 800334a:	f143 0b00 	adc.w	fp, r3, #0
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	4413      	add	r3, r2
 8003354:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 8003356:	4452      	add	r2, sl
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	3b01      	subs	r3, #1
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4413      	add	r3, r2
 8003364:	4919      	ldr	r1, [pc, #100]	; (80033cc <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 8003366:	6a3a      	ldr	r2, [r7, #32]
 8003368:	440a      	add	r2, r1
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	3b02      	subs	r3, #2
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__val >= 100)
 8003374:	e7c3      	b.n	80032fe <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x16>
	}
      if (__val >= 10)
 8003376:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800337a:	2a0a      	cmp	r2, #10
 800337c:	f173 0300 	sbcs.w	r3, r3, #0
 8003380:	d319      	bcc.n	80033b6 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xce>
	{
	  auto const __num = __val * 2;
 8003382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003386:	eb12 0802 	adds.w	r8, r2, r2
 800338a:	eb43 0903 	adc.w	r9, r3, r3
 800338e:	e9c7 8906 	strd	r8, r9, [r7, #24]
	  __first[1] = __digits[__num + 1];
 8003392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003396:	1c54      	adds	r4, r2, #1
 8003398:	f143 0500 	adc.w	r5, r3, #0
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 80033a2:	4422      	add	r2, r4
 80033a4:	7812      	ldrb	r2, [r2, #0]
 80033a6:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4413      	add	r3, r2
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 80033b4:	e004      	b.n	80033c0 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xd8>
	__first[0] = '0' + __val;
 80033b6:	7a3b      	ldrb	r3, [r7, #8]
 80033b8:	3330      	adds	r3, #48	; 0x30
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	701a      	strb	r2, [r3, #0]
    }
 80033c0:	bf00      	nop
 80033c2:	3730      	adds	r7, #48	; 0x30
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	0801e534 	.word	0x0801e534

080033d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_MspInit+0x54>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	4a11      	ldr	r2, [pc, #68]	; (8003424 <HAL_MspInit+0x54>)
 80033e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e4:	6453      	str	r3, [r2, #68]	; 0x44
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_MspInit+0x54>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_MspInit+0x54>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_MspInit+0x54>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HAL_MspInit+0x54>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	210f      	movs	r1, #15
 8003412:	f06f 0001 	mvn.w	r0, #1
 8003416:	f007 fa01 	bl	800a81c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800

08003428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2e      	ldr	r2, [pc, #184]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d156      	bne.n	80034f8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <HAL_ADC_MspInit+0xdc>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	4a2c      	ldr	r2, [pc, #176]	; (8003504 <HAL_ADC_MspInit+0xdc>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6453      	str	r3, [r2, #68]	; 0x44
 800345a:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <HAL_ADC_MspInit+0xdc>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_ADC_MspInit+0xdc>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a25      	ldr	r2, [pc, #148]	; (8003504 <HAL_ADC_MspInit+0xdc>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b23      	ldr	r3, [pc, #140]	; (8003504 <HAL_ADC_MspInit+0xdc>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003482:	2301      	movs	r3, #1
 8003484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003486:	2303      	movs	r3, #3
 8003488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4619      	mov	r1, r3
 8003494:	481c      	ldr	r0, [pc, #112]	; (8003508 <HAL_ADC_MspInit+0xe0>)
 8003496:	f007 ffaf 	bl	800b3f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800349a:	4b1c      	ldr	r3, [pc, #112]	; (800350c <HAL_ADC_MspInit+0xe4>)
 800349c:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_ADC_MspInit+0xe8>)
 800349e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ac:	4b17      	ldr	r3, [pc, #92]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034d8:	2200      	movs	r2, #0
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034dc:	480b      	ldr	r0, [pc, #44]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034de:	f007 f9c7 	bl	800a870 <HAL_DMA_Init>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80034e8:	f7ff fe98 	bl	800321c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
 80034f2:	4a06      	ldr	r2, [pc, #24]	; (800350c <HAL_ADC_MspInit+0xe4>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034f8:	bf00      	nop
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40012000 	.word	0x40012000
 8003504:	40023800 	.word	0x40023800
 8003508:	40020800 	.word	0x40020800
 800350c:	20000454 	.word	0x20000454
 8003510:	40026410 	.word	0x40026410

08003514 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a28      	ldr	r2, [pc, #160]	; (80035d4 <HAL_SD_MspInit+0xc0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d14a      	bne.n	80035cc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <HAL_SD_MspInit+0xc4>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a26      	ldr	r2, [pc, #152]	; (80035d8 <HAL_SD_MspInit+0xc4>)
 8003540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_SD_MspInit+0xc4>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_SD_MspInit+0xc4>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_SD_MspInit+0xc4>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_SD_MspInit+0xc4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_SD_MspInit+0xc4>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <HAL_SD_MspInit+0xc4>)
 8003578:	f043 0308 	orr.w	r3, r3, #8
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <HAL_SD_MspInit+0xc4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800358a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800358e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003590:	2302      	movs	r3, #2
 8003592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003598:	2303      	movs	r3, #3
 800359a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800359c:	230c      	movs	r3, #12
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	480d      	ldr	r0, [pc, #52]	; (80035dc <HAL_SD_MspInit+0xc8>)
 80035a8:	f007 ff26 	bl	800b3f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035ac:	2304      	movs	r3, #4
 80035ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b0:	2302      	movs	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b8:	2303      	movs	r3, #3
 80035ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80035bc:	230c      	movs	r3, #12
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4619      	mov	r1, r3
 80035c6:	4806      	ldr	r0, [pc, #24]	; (80035e0 <HAL_SD_MspInit+0xcc>)
 80035c8:	f007 ff16 	bl	800b3f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80035cc:	bf00      	nop
 80035ce:	3728      	adds	r7, #40	; 0x28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40020800 	.word	0x40020800
 80035e0:	40020c00 	.word	0x40020c00

080035e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a47      	ldr	r2, [pc, #284]	; (8003720 <HAL_SPI_MspInit+0x13c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	f040 8087 	bne.w	8003716 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	4b45      	ldr	r3, [pc, #276]	; (8003724 <HAL_SPI_MspInit+0x140>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	4a44      	ldr	r2, [pc, #272]	; (8003724 <HAL_SPI_MspInit+0x140>)
 8003612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003616:	6413      	str	r3, [r2, #64]	; 0x40
 8003618:	4b42      	ldr	r3, [pc, #264]	; (8003724 <HAL_SPI_MspInit+0x140>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <HAL_SPI_MspInit+0x140>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	4a3d      	ldr	r2, [pc, #244]	; (8003724 <HAL_SPI_MspInit+0x140>)
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	6313      	str	r3, [r2, #48]	; 0x30
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_SPI_MspInit+0x140>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003640:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003646:	2302      	movs	r3, #2
 8003648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364e:	2303      	movs	r3, #3
 8003650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003652:	2305      	movs	r3, #5
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4619      	mov	r1, r3
 800365c:	4832      	ldr	r0, [pc, #200]	; (8003728 <HAL_SPI_MspInit+0x144>)
 800365e:	f007 fecb 	bl	800b3f8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003662:	4b32      	ldr	r3, [pc, #200]	; (800372c <HAL_SPI_MspInit+0x148>)
 8003664:	4a32      	ldr	r2, [pc, #200]	; (8003730 <HAL_SPI_MspInit+0x14c>)
 8003666:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003668:	4b30      	ldr	r3, [pc, #192]	; (800372c <HAL_SPI_MspInit+0x148>)
 800366a:	2200      	movs	r2, #0
 800366c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_SPI_MspInit+0x148>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <HAL_SPI_MspInit+0x148>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_SPI_MspInit+0x148>)
 800367c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003680:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003682:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_SPI_MspInit+0x148>)
 8003684:	2200      	movs	r2, #0
 8003686:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003688:	4b28      	ldr	r3, [pc, #160]	; (800372c <HAL_SPI_MspInit+0x148>)
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800368e:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_SPI_MspInit+0x148>)
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003694:	4b25      	ldr	r3, [pc, #148]	; (800372c <HAL_SPI_MspInit+0x148>)
 8003696:	2200      	movs	r2, #0
 8003698:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369a:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_SPI_MspInit+0x148>)
 800369c:	2200      	movs	r2, #0
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80036a0:	4822      	ldr	r0, [pc, #136]	; (800372c <HAL_SPI_MspInit+0x148>)
 80036a2:	f007 f8e5 	bl	800a870 <HAL_DMA_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80036ac:	f7ff fdb6 	bl	800321c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <HAL_SPI_MspInit+0x148>)
 80036b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80036b6:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_SPI_MspInit+0x148>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036be:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <HAL_SPI_MspInit+0x154>)
 80036c0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036c8:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036ca:	2240      	movs	r2, #64	; 0x40
 80036cc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ce:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036d4:	4b17      	ldr	r3, [pc, #92]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036da:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036de:	2200      	movs	r2, #0
 80036e0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80036fa:	480e      	ldr	r0, [pc, #56]	; (8003734 <HAL_SPI_MspInit+0x150>)
 80036fc:	f007 f8b8 	bl	800a870 <HAL_DMA_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8003706:	f7ff fd89 	bl	800321c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a09      	ldr	r2, [pc, #36]	; (8003734 <HAL_SPI_MspInit+0x150>)
 800370e:	649a      	str	r2, [r3, #72]	; 0x48
 8003710:	4a08      	ldr	r2, [pc, #32]	; (8003734 <HAL_SPI_MspInit+0x150>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003716:	bf00      	nop
 8003718:	3728      	adds	r7, #40	; 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40003800 	.word	0x40003800
 8003724:	40023800 	.word	0x40023800
 8003728:	40020400 	.word	0x40020400
 800372c:	20000590 	.word	0x20000590
 8003730:	40026058 	.word	0x40026058
 8003734:	200005f0 	.word	0x200005f0
 8003738:	40026070 	.word	0x40026070

0800373c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_TIM_Base_MspInit+0x70>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10e      	bne.n	800376c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <HAL_TIM_Base_MspInit+0x74>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_TIM_Base_MspInit+0x74>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <HAL_TIM_Base_MspInit+0x74>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800376a:	e01a      	b.n	80037a2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <HAL_TIM_Base_MspInit+0x78>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d115      	bne.n	80037a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <HAL_TIM_Base_MspInit+0x74>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <HAL_TIM_Base_MspInit+0x74>)
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_TIM_Base_MspInit+0x74>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2105      	movs	r1, #5
 8003796:	201e      	movs	r0, #30
 8003798:	f007 f840 	bl	800a81c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800379c:	201e      	movs	r0, #30
 800379e:	f007 f859 	bl	800a854 <HAL_NVIC_EnableIRQ>
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40000800 	.word	0x40000800

080037b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a21      	ldr	r2, [pc, #132]	; (800385c <HAL_TIM_MspPostInit+0xa4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d13b      	bne.n	8003852 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_TIM_MspPostInit+0xa8>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <HAL_TIM_MspPostInit+0xa8>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_TIM_MspPostInit+0xa8>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_TIM_MspPostInit+0xa8>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_TIM_MspPostInit+0xa8>)
 8003800:	f043 0302 	orr.w	r3, r3, #2
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <HAL_TIM_MspPostInit+0xa8>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003812:	23c0      	movs	r3, #192	; 0xc0
 8003814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003822:	2302      	movs	r3, #2
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4619      	mov	r1, r3
 800382c:	480d      	ldr	r0, [pc, #52]	; (8003864 <HAL_TIM_MspPostInit+0xac>)
 800382e:	f007 fde3 	bl	800b3f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003832:	2303      	movs	r3, #3
 8003834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003836:	2302      	movs	r3, #2
 8003838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383e:	2300      	movs	r3, #0
 8003840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003842:	2302      	movs	r3, #2
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003846:	f107 0314 	add.w	r3, r7, #20
 800384a:	4619      	mov	r1, r3
 800384c:	4806      	ldr	r0, [pc, #24]	; (8003868 <HAL_TIM_MspPostInit+0xb0>)
 800384e:	f007 fdd3 	bl	800b3f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003852:	bf00      	nop
 8003854:	3728      	adds	r7, #40	; 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40000400 	.word	0x40000400
 8003860:	40023800 	.word	0x40023800
 8003864:	40020000 	.word	0x40020000
 8003868:	40020400 	.word	0x40020400

0800386c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b092      	sub	sp, #72	; 0x48
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a93      	ldr	r2, [pc, #588]	; (8003ad8 <HAL_UART_MspInit+0x26c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d15a      	bne.n	8003944 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
 8003892:	4b92      	ldr	r3, [pc, #584]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a91      	ldr	r2, [pc, #580]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b8f      	ldr	r3, [pc, #572]	; (8003adc <HAL_UART_MspInit+0x270>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ae:	4b8b      	ldr	r3, [pc, #556]	; (8003adc <HAL_UART_MspInit+0x270>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a8a      	ldr	r2, [pc, #552]	; (8003adc <HAL_UART_MspInit+0x270>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b88      	ldr	r3, [pc, #544]	; (8003adc <HAL_UART_MspInit+0x270>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038c6:	2303      	movs	r3, #3
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ca:	2302      	movs	r3, #2
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d2:	2303      	movs	r3, #3
 80038d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038d6:	2308      	movs	r3, #8
 80038d8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038de:	4619      	mov	r1, r3
 80038e0:	487f      	ldr	r0, [pc, #508]	; (8003ae0 <HAL_UART_MspInit+0x274>)
 80038e2:	f007 fd89 	bl	800b3f8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80038e6:	4b7f      	ldr	r3, [pc, #508]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 80038e8:	4a7f      	ldr	r2, [pc, #508]	; (8003ae8 <HAL_UART_MspInit+0x27c>)
 80038ea:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80038ec:	4b7d      	ldr	r3, [pc, #500]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 80038ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038f2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038f4:	4b7b      	ldr	r3, [pc, #492]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038fa:	4b7a      	ldr	r3, [pc, #488]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003900:	4b78      	ldr	r3, [pc, #480]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 8003902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003906:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003908:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 800390a:	2200      	movs	r2, #0
 800390c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800390e:	4b75      	ldr	r3, [pc, #468]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003914:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800391a:	4b72      	ldr	r3, [pc, #456]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 800391c:	2200      	movs	r2, #0
 800391e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003920:	4b70      	ldr	r3, [pc, #448]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 8003922:	2200      	movs	r2, #0
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003926:	486f      	ldr	r0, [pc, #444]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 8003928:	f006 ffa2 	bl	800a870 <HAL_DMA_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003932:	f7ff fc73 	bl	800321c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a6a      	ldr	r2, [pc, #424]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
 800393c:	4a69      	ldr	r2, [pc, #420]	; (8003ae4 <HAL_UART_MspInit+0x278>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003942:	e1d6      	b.n	8003cf2 <HAL_UART_MspInit+0x486>
  else if(huart->Instance==USART1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a68      	ldr	r2, [pc, #416]	; (8003aec <HAL_UART_MspInit+0x280>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d163      	bne.n	8003a16 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART1_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
 8003952:	4b62      	ldr	r3, [pc, #392]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	4a61      	ldr	r2, [pc, #388]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003958:	f043 0310 	orr.w	r3, r3, #16
 800395c:	6453      	str	r3, [r2, #68]	; 0x44
 800395e:	4b5f      	ldr	r3, [pc, #380]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	4b5b      	ldr	r3, [pc, #364]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	4a5a      	ldr	r2, [pc, #360]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6313      	str	r3, [r2, #48]	; 0x30
 800397a:	4b58      	ldr	r3, [pc, #352]	; (8003adc <HAL_UART_MspInit+0x270>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003986:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003994:	2303      	movs	r3, #3
 8003996:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003998:	2307      	movs	r3, #7
 800399a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039a0:	4619      	mov	r1, r3
 80039a2:	484f      	ldr	r0, [pc, #316]	; (8003ae0 <HAL_UART_MspInit+0x274>)
 80039a4:	f007 fd28 	bl	800b3f8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80039a8:	4b51      	ldr	r3, [pc, #324]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039aa:	4a52      	ldr	r2, [pc, #328]	; (8003af4 <HAL_UART_MspInit+0x288>)
 80039ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80039ae:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039b6:	4b4e      	ldr	r3, [pc, #312]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039b8:	2240      	movs	r2, #64	; 0x40
 80039ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039bc:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039be:	2200      	movs	r2, #0
 80039c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039c2:	4b4b      	ldr	r3, [pc, #300]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ca:	4b49      	ldr	r3, [pc, #292]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039d0:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80039d6:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039d8:	2200      	movs	r2, #0
 80039da:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039dc:	4b44      	ldr	r3, [pc, #272]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039de:	2200      	movs	r2, #0
 80039e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039e2:	4b43      	ldr	r3, [pc, #268]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80039e8:	4841      	ldr	r0, [pc, #260]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039ea:	f006 ff41 	bl	800a870 <HAL_DMA_Init>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80039f4:	f7ff fc12 	bl	800321c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a3d      	ldr	r2, [pc, #244]	; (8003af0 <HAL_UART_MspInit+0x284>)
 80039fc:	635a      	str	r2, [r3, #52]	; 0x34
 80039fe:	4a3c      	ldr	r2, [pc, #240]	; (8003af0 <HAL_UART_MspInit+0x284>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2105      	movs	r1, #5
 8003a08:	2025      	movs	r0, #37	; 0x25
 8003a0a:	f006 ff07 	bl	800a81c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a0e:	2025      	movs	r0, #37	; 0x25
 8003a10:	f006 ff20 	bl	800a854 <HAL_NVIC_EnableIRQ>
}
 8003a14:	e16d      	b.n	8003cf2 <HAL_UART_MspInit+0x486>
  else if(huart->Instance==USART2)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a37      	ldr	r2, [pc, #220]	; (8003af8 <HAL_UART_MspInit+0x28c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d171      	bne.n	8003b04 <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a20:	2300      	movs	r3, #0
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	4a2c      	ldr	r2, [pc, #176]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	623b      	str	r3, [r7, #32]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4c:	4b23      	ldr	r3, [pc, #140]	; (8003adc <HAL_UART_MspInit+0x270>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a58:	230c      	movs	r3, #12
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a68:	2307      	movs	r3, #7
 8003a6a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a70:	4619      	mov	r1, r3
 8003a72:	481b      	ldr	r0, [pc, #108]	; (8003ae0 <HAL_UART_MspInit+0x274>)
 8003a74:	f007 fcc0 	bl	800b3f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003a78:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003a7a:	4a21      	ldr	r2, [pc, #132]	; (8003b00 <HAL_UART_MspInit+0x294>)
 8003a7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a7e:	4b1f      	ldr	r3, [pc, #124]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003a80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a92:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a98:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aa0:	4b16      	ldr	r3, [pc, #88]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ab2:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ab8:	4810      	ldr	r0, [pc, #64]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003aba:	f006 fed9 	bl	800a870 <HAL_DMA_Init>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8003ac4:	f7ff fbaa 	bl	800321c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
 8003ace:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <HAL_UART_MspInit+0x290>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003ad4:	e10d      	b.n	8003cf2 <HAL_UART_MspInit+0x486>
 8003ad6:	bf00      	nop
 8003ad8:	40004c00 	.word	0x40004c00
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	20000834 	.word	0x20000834
 8003ae8:	40026040 	.word	0x40026040
 8003aec:	40011000 	.word	0x40011000
 8003af0:	20000894 	.word	0x20000894
 8003af4:	400264b8 	.word	0x400264b8
 8003af8:	40004400 	.word	0x40004400
 8003afc:	200008f4 	.word	0x200008f4
 8003b00:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a7c      	ldr	r2, [pc, #496]	; (8003cfc <HAL_UART_MspInit+0x490>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d15b      	bne.n	8003bc6 <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	4b7b      	ldr	r3, [pc, #492]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	4a7a      	ldr	r2, [pc, #488]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1e:	4b78      	ldr	r3, [pc, #480]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	4b74      	ldr	r3, [pc, #464]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a73      	ldr	r2, [pc, #460]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b71      	ldr	r3, [pc, #452]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b54:	2303      	movs	r3, #3
 8003b56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b58:	2307      	movs	r3, #7
 8003b5a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b60:	4619      	mov	r1, r3
 8003b62:	4868      	ldr	r0, [pc, #416]	; (8003d04 <HAL_UART_MspInit+0x498>)
 8003b64:	f007 fc48 	bl	800b3f8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003b68:	4b67      	ldr	r3, [pc, #412]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003b6a:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <HAL_UART_MspInit+0x4a0>)
 8003b6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003b6e:	4b66      	ldr	r3, [pc, #408]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003b70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b74:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b76:	4b64      	ldr	r3, [pc, #400]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b7c:	4b62      	ldr	r3, [pc, #392]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b82:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b88:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b90:	4b5d      	ldr	r3, [pc, #372]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003b96:	4b5c      	ldr	r3, [pc, #368]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b9c:	4b5a      	ldr	r3, [pc, #360]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ba2:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ba8:	4857      	ldr	r0, [pc, #348]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003baa:	f006 fe61 	bl	800a870 <HAL_DMA_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8003bb4:	f7ff fb32 	bl	800321c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a53      	ldr	r2, [pc, #332]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8003bbe:	4a52      	ldr	r2, [pc, #328]	; (8003d08 <HAL_UART_MspInit+0x49c>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003bc4:	e095      	b.n	8003cf2 <HAL_UART_MspInit+0x486>
  else if(huart->Instance==USART6)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a51      	ldr	r2, [pc, #324]	; (8003d10 <HAL_UART_MspInit+0x4a4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	f040 8090 	bne.w	8003cf2 <HAL_UART_MspInit+0x486>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	4b4a      	ldr	r3, [pc, #296]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	4a49      	ldr	r2, [pc, #292]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003bdc:	f043 0320 	orr.w	r3, r3, #32
 8003be0:	6453      	str	r3, [r2, #68]	; 0x44
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a42      	ldr	r2, [pc, #264]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <HAL_UART_MspInit+0x494>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c0a:	23c0      	movs	r3, #192	; 0xc0
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c16:	2303      	movs	r3, #3
 8003c18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c22:	4619      	mov	r1, r3
 8003c24:	483b      	ldr	r0, [pc, #236]	; (8003d14 <HAL_UART_MspInit+0x4a8>)
 8003c26:	f007 fbe7 	bl	800b3f8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c2c:	4a3b      	ldr	r2, [pc, #236]	; (8003d1c <HAL_UART_MspInit+0x4b0>)
 8003c2e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003c30:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c32:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003c36:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c38:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3e:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c44:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c4a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c4c:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003c58:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c64:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003c6a:	482b      	ldr	r0, [pc, #172]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c6c:	f006 fe00 	bl	800a870 <HAL_DMA_Init>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_UART_MspInit+0x40e>
      Error_Handler();
 8003c76:	f7ff fad1 	bl	800321c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c80:	4a25      	ldr	r2, [pc, #148]	; (8003d18 <HAL_UART_MspInit+0x4ac>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003c86:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003c88:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <HAL_UART_MspInit+0x4b8>)
 8003c8a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003c8e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003c92:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c94:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003c96:	2240      	movs	r2, #64	; 0x40
 8003c98:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c9a:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ca6:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003cc6:	4816      	ldr	r0, [pc, #88]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003cc8:	f006 fdd2 	bl	800a870 <HAL_DMA_Init>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_UART_MspInit+0x46a>
      Error_Handler();
 8003cd2:	f7ff faa3 	bl	800321c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34
 8003cdc:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <HAL_UART_MspInit+0x4b4>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2105      	movs	r1, #5
 8003ce6:	2047      	movs	r0, #71	; 0x47
 8003ce8:	f006 fd98 	bl	800a81c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003cec:	2047      	movs	r0, #71	; 0x47
 8003cee:	f006 fdb1 	bl	800a854 <HAL_NVIC_EnableIRQ>
}
 8003cf2:	bf00      	nop
 8003cf4:	3748      	adds	r7, #72	; 0x48
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40004800 	.word	0x40004800
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020400 	.word	0x40020400
 8003d08:	20000954 	.word	0x20000954
 8003d0c:	40026028 	.word	0x40026028
 8003d10:	40011400 	.word	0x40011400
 8003d14:	40020800 	.word	0x40020800
 8003d18:	200009b4 	.word	0x200009b4
 8003d1c:	40026428 	.word	0x40026428
 8003d20:	20000a14 	.word	0x20000a14
 8003d24:	400264a0 	.word	0x400264a0

08003d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	; 0x30
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_InitTick+0xd4>)
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	4a2e      	ldr	r2, [pc, #184]	; (8003dfc <HAL_InitTick+0xd4>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6453      	str	r3, [r2, #68]	; 0x44
 8003d48:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <HAL_InitTick+0xd4>)
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d54:	f107 020c 	add.w	r2, r7, #12
 8003d58:	f107 0310 	add.w	r3, r7, #16
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f009 fc58 	bl	800d614 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003d64:	f009 fc42 	bl	800d5ec <HAL_RCC_GetPCLK2Freq>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <HAL_InitTick+0xd8>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	0c9b      	lsrs	r3, r3, #18
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003d7c:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_InitTick+0xdc>)
 8003d7e:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_InitTick+0xe0>)
 8003d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003d82:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <HAL_InitTick+0xdc>)
 8003d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <HAL_InitTick+0xdc>)
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003d90:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <HAL_InitTick+0xdc>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d96:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <HAL_InitTick+0xdc>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d9c:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_InitTick+0xdc>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003da2:	4818      	ldr	r0, [pc, #96]	; (8003e04 <HAL_InitTick+0xdc>)
 8003da4:	f00b fbac 	bl	800f500 <HAL_TIM_Base_Init>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11b      	bne.n	8003dee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003db6:	4813      	ldr	r0, [pc, #76]	; (8003e04 <HAL_InitTick+0xdc>)
 8003db8:	f00b fbf2 	bl	800f5a0 <HAL_TIM_Base_Start_IT>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d111      	bne.n	8003dee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003dca:	2019      	movs	r0, #25
 8003dcc:	f006 fd42 	bl	800a854 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	d808      	bhi.n	8003de8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	2019      	movs	r0, #25
 8003ddc:	f006 fd1e 	bl	800a81c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <HAL_InitTick+0xe4>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e002      	b.n	8003dee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3730      	adds	r7, #48	; 0x30
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	431bde83 	.word	0x431bde83
 8003e04:	20000ad8 	.word	0x20000ad8
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	20000008 	.word	0x20000008

08003e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e14:	e7fe      	b.n	8003e14 <NMI_Handler+0x4>

08003e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e1a:	e7fe      	b.n	8003e1a <HardFault_Handler+0x4>

08003e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e20:	e7fe      	b.n	8003e20 <MemManage_Handler+0x4>

08003e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e26:	e7fe      	b.n	8003e26 <BusFault_Handler+0x4>

08003e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e2c:	e7fe      	b.n	8003e2c <UsageFault_Handler+0x4>

08003e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003e40:	2004      	movs	r0, #4
 8003e42:	f007 fc8f 	bl	800b764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003e4e:	2010      	movs	r0, #16
 8003e50:	f007 fc88 	bl	800b764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e5c:	4802      	ldr	r0, [pc, #8]	; (8003e68 <DMA1_Stream1_IRQHandler+0x10>)
 8003e5e:	f006 fe9f 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000954 	.word	0x20000954

08003e6c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003e70:	4802      	ldr	r0, [pc, #8]	; (8003e7c <DMA1_Stream2_IRQHandler+0x10>)
 8003e72:	f006 fe95 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000834 	.word	0x20000834

08003e80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <DMA1_Stream3_IRQHandler+0x10>)
 8003e86:	f006 fe8b 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000590 	.word	0x20000590

08003e94 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003e98:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <DMA1_Stream4_IRQHandler+0x10>)
 8003e9a:	f006 fe81 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200005f0 	.word	0x200005f0

08003ea8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003eac:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <DMA1_Stream5_IRQHandler+0x10>)
 8003eae:	f006 fe77 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200008f4 	.word	0x200008f4

08003ebc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003ec0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003ec4:	f007 fc4e 	bl	800b764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ed0:	4802      	ldr	r0, [pc, #8]	; (8003edc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003ed2:	f00b fcf7 	bl	800f8c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000ad8 	.word	0x20000ad8

08003ee0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ee4:	4802      	ldr	r0, [pc, #8]	; (8003ef0 <TIM4_IRQHandler+0x10>)
 8003ee6:	f00b fced 	bl	800f8c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000698 	.word	0x20000698

08003ef4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <USART1_IRQHandler+0x10>)
 8003efa:	f00c fccb 	bl	8010894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000724 	.word	0x20000724

08003f08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <DMA2_Stream0_IRQHandler+0x10>)
 8003f0e:	f006 fe47 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000454 	.word	0x20000454

08003f1c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003f20:	4802      	ldr	r0, [pc, #8]	; (8003f2c <DMA2_Stream1_IRQHandler+0x10>)
 8003f22:	f006 fe3d 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200009b4 	.word	0x200009b4

08003f30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003f34:	4802      	ldr	r0, [pc, #8]	; (8003f40 <OTG_FS_IRQHandler+0x10>)
 8003f36:	f007 fd7d 	bl	800ba34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000de38 	.word	0x2000de38

08003f44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <DMA2_Stream6_IRQHandler+0x10>)
 8003f4a:	f006 fe29 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000a14 	.word	0x20000a14

08003f58 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f5c:	4802      	ldr	r0, [pc, #8]	; (8003f68 <DMA2_Stream7_IRQHandler+0x10>)
 8003f5e:	f006 fe1f 	bl	800aba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000894 	.word	0x20000894

08003f6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <USART6_IRQHandler+0x10>)
 8003f72:	f00c fc8f 	bl	8010894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200007f0 	.word	0x200007f0

08003f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
	return 1;
 8003f84:	2301      	movs	r3, #1
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_kill>:

int _kill(int pid, int sig)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f9a:	f019 fbc1 	bl	801d720 <__errno>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2216      	movs	r2, #22
 8003fa2:	601a      	str	r2, [r3, #0]
	return -1;
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_exit>:

void _exit (int status)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff ffe7 	bl	8003f90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003fc2:	e7fe      	b.n	8003fc2 <_exit+0x12>

08003fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <_sbrk+0x5c>)
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <_sbrk+0x60>)
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <_sbrk+0x64>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <_sbrk+0x64>)
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <_sbrk+0x68>)
 8003fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <_sbrk+0x64>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d207      	bcs.n	8004004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ff4:	f019 fb94 	bl	801d720 <__errno>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8004002:	e009      	b.n	8004018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004004:	4b08      	ldr	r3, [pc, #32]	; (8004028 <_sbrk+0x64>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <_sbrk+0x64>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	4a05      	ldr	r2, [pc, #20]	; (8004028 <_sbrk+0x64>)
 8004014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20020000 	.word	0x20020000
 8004024:	00000400 	.word	0x00000400
 8004028:	20000b20 	.word	0x20000b20
 800402c:	2000e5d0 	.word	0x2000e5d0

08004030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <SystemInit+0x20>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	4a05      	ldr	r2, [pc, #20]	; (8004050 <SystemInit+0x20>)
 800403c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800408c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004058:	480d      	ldr	r0, [pc, #52]	; (8004090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800405a:	490e      	ldr	r1, [pc, #56]	; (8004094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800405c:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800405e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004060:	e002      	b.n	8004068 <LoopCopyDataInit>

08004062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004066:	3304      	adds	r3, #4

08004068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800406a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800406c:	d3f9      	bcc.n	8004062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800406e:	4a0b      	ldr	r2, [pc, #44]	; (800409c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004070:	4c0b      	ldr	r4, [pc, #44]	; (80040a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004074:	e001      	b.n	800407a <LoopFillZerobss>

08004076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004078:	3204      	adds	r2, #4

0800407a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800407a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800407c:	d3fb      	bcc.n	8004076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800407e:	f7ff ffd7 	bl	8004030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004082:	f019 fb53 	bl	801d72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004086:	f7fe fb1f 	bl	80026c8 <main>
  bx  lr    
 800408a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800408c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004094:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8004098:	080328d8 	.word	0x080328d8
  ldr r2, =_sbss
 800409c:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 80040a0:	2000e5d0 	.word	0x2000e5d0

080040a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040a4:	e7fe      	b.n	80040a4 <ADC_IRQHandler>

080040a6 <_ZNSt7__cxx119to_stringEi>:
  {
 80040a6:	b590      	push	{r4, r7, lr}
 80040a8:	b087      	sub	sp, #28
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	0fdb      	lsrs	r3, r3, #31
 80040b4:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <_ZNSt7__cxx119to_stringEi+0x1c>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	425b      	negs	r3, r3
 80040c0:	e000      	b.n	80040c4 <_ZNSt7__cxx119to_stringEi+0x1e>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 80040c6:	210a      	movs	r1, #10
 80040c8:	6938      	ldr	r0, [r7, #16]
 80040ca:	f000 ff81 	bl	8004fd0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 80040ce:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 80040d0:	7dfa      	ldrb	r2, [r7, #23]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	18d4      	adds	r4, r2, r3
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	4618      	mov	r0, r3
 80040dc:	f018 f92e 	bl	801c33c <_ZNSaIcEC1Ev>
 80040e0:	f107 0308 	add.w	r3, r7, #8
 80040e4:	222d      	movs	r2, #45	; 0x2d
 80040e6:	4621      	mov	r1, r4
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f018 fa22 	bl	801c532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 80040ee:	f107 0308 	add.w	r3, r7, #8
 80040f2:	4618      	mov	r0, r3
 80040f4:	f018 f923 	bl	801c33e <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f018 fa27 	bl	801c550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004102:	4603      	mov	r3, r0
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	4618      	mov	r0, r3
 800410a:	f000 ffa1 	bl	8005050 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 800410e:	bf00      	nop
  }
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	bd90      	pop	{r4, r7, pc}

08004118 <_ZN15PrintableSensor11toCharArrayEi>:
	const char* toCharArray(int value)
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
		return std::to_string(value).c_str();
 8004122:	f107 0308 	add.w	r3, r7, #8
 8004126:	6839      	ldr	r1, [r7, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ffbc 	bl	80040a6 <_ZNSt7__cxx119to_stringEi>
 800412e:	f107 0308 	add.w	r3, r7, #8
 8004132:	4618      	mov	r0, r3
 8004134:	f018 fa0f 	bl	801c556 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004138:	4604      	mov	r4, r0
 800413a:	bf00      	nop
 800413c:	f107 0308 	add.w	r3, r7, #8
 8004140:	4618      	mov	r0, r3
 8004142:	f018 f9ff 	bl	801c544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004146:	4623      	mov	r3, r4
	}
 8004148:	4618      	mov	r0, r3
 800414a:	3724      	adds	r7, #36	; 0x24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <_ZN5drone5utils9functions11concatBytesEhh>:
	}*/

	namespace functions
	{
		inline int16_t concatBytes(uint8_t msb, uint8_t lsb)
		{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	460a      	mov	r2, r1
 800415a:	71fb      	strb	r3, [r7, #7]
 800415c:	4613      	mov	r3, r2
 800415e:	71bb      	strb	r3, [r7, #6]
			return (((int16_t)msb << 8) | (int16_t)lsb);
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	b21a      	sxth	r2, r3
 8004166:	79bb      	ldrb	r3, [r7, #6]
 8004168:	b21b      	sxth	r3, r3
 800416a:	4313      	orrs	r3, r2
 800416c:	b21b      	sxth	r3, r3
		}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <_ZN8SPI_ConnC1Ev>:
class SPI_Conn
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	4a04      	ldr	r2, [pc, #16]	; (8004198 <_ZN8SPI_ConnC1Ev+0x1c>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	0801e70c 	.word	0x0801e70c

0800419c <_ZN15PrintableSensorC1Ev>:
class PrintableSensor
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <_ZN15PrintableSensorC1Ev+0x28>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3304      	adds	r3, #4
 80041ae:	2232      	movs	r2, #50	; 0x32
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f019 fb16 	bl	801d7e4 <memset>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	0801e71c 	.word	0x0801e71c

080041c8 <_ZN12CallsCounterC1Ev>:
	uint64_t getTaskCounterValue()
	{
		return this->interruptCounter;
	}
protected:
	CallsCounter() = default;
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	e9c1 2300 	strd	r2, r3, [r1]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <_ZN6BMP39010calib_coefC1Ev>:
#include "utils_functions.hpp"

class BMP390: SPI_Conn,public PrintableSensor, public CallsCounter
{
private:
	struct calib_coef
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	805a      	strh	r2, [r3, #2]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	711a      	strb	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	80da      	strh	r2, [r3, #6]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	811a      	strh	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	729a      	strb	r2, [r3, #10]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	72da      	strb	r2, [r3, #11]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	819a      	strh	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	81da      	strh	r2, [r3, #14]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	741a      	strb	r2, [r3, #16]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	745a      	strb	r2, [r3, #17]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	825a      	strh	r2, [r3, #18]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	751a      	strb	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	755a      	strb	r2, [r3, #21]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <_ZN6BMP39020quantized_calib_dataC1Ev>:
		int16_t par_p9 {0};
		int8_t par_p10 {0};
		int8_t par_p11 {0};
	} calibCoef;

	struct quantized_calib_data
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	e9c1 2300 	strd	r2, r3, [r1]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <_ZN6BMP390C1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "BMP390.hpp"

BMP390::BMP390(SPI_HandleTypeDef* spiPort):
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
	,_spiTxBuff {0U,0U}
	,_spiRxBuff {0U,0U}
	,_pressure {0.0}
	,_temp {0.0}
	,_rawPressure {0U}
	,_rawTemp {0U}
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff0f 	bl	800417c <_ZN8SPI_ConnC1Ev>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ff1a 	bl	800419c <_ZN15PrintableSensorC1Ev>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3340      	adds	r3, #64	; 0x40
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff2b 	bl	80041c8 <_ZN12CallsCounterC1Ev>
 8004372:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa4>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0xa8>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3350      	adds	r3, #80	; 0x50
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ff39 	bl	80041fa <_ZN6BMP39010calib_coefC1Ev>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3368      	adds	r3, #104	; 0x68
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff69 	bl	8004264 <_ZN6BMP39020quantized_calib_dataC1Ev>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
{
}
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	0801e6ec 	.word	0x0801e6ec
 80043f4:	0801e700 	.word	0x0801e700

080043f8 <_ZN6BMP39011defaultInitEv>:

bool BMP390::defaultInit()
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	6078      	str	r0, [r7, #4]
	this->SPI_write(CMD,CMD_SOFTRESET);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	22b6      	movs	r2, #182	; 0xb6
 8004408:	217e      	movs	r1, #126	; 0x7e
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
	HAL_Delay(20);
 800440e:	2014      	movs	r0, #20
 8004410:	f005 fd16 	bl	8009e40 <HAL_Delay>

	int debug = SPI_read(STATUS);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3304      	adds	r3, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2103      	movs	r1, #3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
 8004422:	4603      	mov	r3, r0
 8004424:	60fb      	str	r3, [r7, #12]
	while ((debug= SPI_read(STATUS))==0)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3304      	adds	r3, #4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2103      	movs	r1, #3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
 8004434:	4603      	mov	r3, r0
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf0c      	ite	eq
 800443e:	2301      	moveq	r3, #1
 8004440:	2300      	movne	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <_ZN6BMP39011defaultInitEv+0x58>
		HAL_Delay(50);
 8004448:	2032      	movs	r0, #50	; 0x32
 800444a:	f005 fcf9 	bl	8009e40 <HAL_Delay>
	while ((debug= SPI_read(STATUS))==0)
 800444e:	e7ea      	b.n	8004426 <_ZN6BMP39011defaultInitEv+0x2e>

	if (!this->initAndCheck(OSR,OSR_OSR_P_X16|OSR_OSR_T_X2,10))
 8004450:	2300      	movs	r3, #0
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	230a      	movs	r3, #10
 8004456:	220c      	movs	r2, #12
 8004458:	211c      	movs	r1, #28
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f84d 	bl	80044fa <_ZN6BMP39012initAndCheckEhhhb>
 8004460:	4603      	mov	r3, r0
 8004462:	f083 0301 	eor.w	r3, r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <_ZN6BMP39011defaultInitEv+0x78>
		return false;
 800446c:	2300      	movs	r3, #0
 800446e:	e040      	b.n	80044f2 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(CONFIG,CONFIG_COEF_3,10))
 8004470:	2300      	movs	r3, #0
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	230a      	movs	r3, #10
 8004476:	2202      	movs	r2, #2
 8004478:	211f      	movs	r1, #31
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f83d 	bl	80044fa <_ZN6BMP39012initAndCheckEhhhb>
 8004480:	4603      	mov	r3, r0
 8004482:	f083 0301 	eor.w	r3, r3, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <_ZN6BMP39011defaultInitEv+0x98>
		return false;
 800448c:	2300      	movs	r3, #0
 800448e:	e030      	b.n	80044f2 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(ODR,ODR_ODR_25,10))
 8004490:	2300      	movs	r3, #0
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	230a      	movs	r3, #10
 8004496:	2203      	movs	r2, #3
 8004498:	211d      	movs	r1, #29
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f82d 	bl	80044fa <_ZN6BMP39012initAndCheckEhhhb>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f083 0301 	eor.w	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <_ZN6BMP39011defaultInitEv+0xb8>
		return false;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e020      	b.n	80044f2 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(INT_CTRL,INT_CTRL_DRDY_EN|INT_CTRL_INT_LEVEL,10))
 80044b0:	2300      	movs	r3, #0
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	230a      	movs	r3, #10
 80044b6:	2242      	movs	r2, #66	; 0x42
 80044b8:	2119      	movs	r1, #25
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f81d 	bl	80044fa <_ZN6BMP39012initAndCheckEhhhb>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f083 0301 	eor.w	r3, r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <_ZN6BMP39011defaultInitEv+0xd8>
		return false;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e010      	b.n	80044f2 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(PWR_CTRL,PWR_CTRL_PRESS_EN|PWR_CTRL_TEMP_EN|PWR_CTRL_MODE_NORMAL,10))
 80044d0:	2300      	movs	r3, #0
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	230a      	movs	r3, #10
 80044d6:	2233      	movs	r2, #51	; 0x33
 80044d8:	211b      	movs	r1, #27
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f80d 	bl	80044fa <_ZN6BMP39012initAndCheckEhhhb>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f083 0301 	eor.w	r3, r3, #1
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <_ZN6BMP39011defaultInitEv+0xf8>
		return false;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <_ZN6BMP39011defaultInitEv+0xfa>

	return true;
 80044f0:	2301      	movs	r3, #1
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <_ZN6BMP39012initAndCheckEhhhb>:

bool BMP390::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	4608      	mov	r0, r1
 8004504:	4611      	mov	r1, r2
 8004506:	461a      	mov	r2, r3
 8004508:	4603      	mov	r3, r0
 800450a:	70fb      	strb	r3, [r7, #3]
 800450c:	460b      	mov	r3, r1
 800450e:	70bb      	strb	r3, [r7, #2]
 8004510:	4613      	mov	r3, r2
 8004512:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	787b      	ldrb	r3, [r7, #1]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	429a      	cmp	r2, r3
 800451e:	da21      	bge.n	8004564 <_ZN6BMP39012initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8004520:	7e3b      	ldrb	r3, [r7, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <_ZN6BMP39012initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	78ba      	ldrb	r2, [r7, #2]
 800452e:	78f9      	ldrb	r1, [r7, #3]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3

		if (SPI_read(addr)==val)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3304      	adds	r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	4611      	mov	r1, r2
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	4798      	blx	r3
 8004544:	4603      	mov	r3, r0
 8004546:	461a      	mov	r2, r3
 8004548:	78bb      	ldrb	r3, [r7, #2]
 800454a:	4293      	cmp	r3, r2
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <_ZN6BMP39012initAndCheckEhhhb+0x62>
			return true;
 8004558:	2301      	movs	r3, #1
 800455a:	e004      	b.n	8004566 <_ZN6BMP39012initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e7d9      	b.n	8004518 <_ZN6BMP39012initAndCheckEhhhb+0x1e>
	}
	return false;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <_ZN6BMP3906updateEv>:

void BMP390::update()
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
	uint8_t DATA0=SPI_read(DATA_0);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3304      	adds	r3, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2104      	movs	r1, #4
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4798      	blx	r3
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]
	uint8_t DATA1=SPI_read(DATA_1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3304      	adds	r3, #4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2105      	movs	r1, #5
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
 8004596:	4603      	mov	r3, r0
 8004598:	73bb      	strb	r3, [r7, #14]
	uint8_t DATA2=SPI_read(DATA_2);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3304      	adds	r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2106      	movs	r1, #6
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
 80045a8:	4603      	mov	r3, r0
 80045aa:	737b      	strb	r3, [r7, #13]

	uint8_t TEMP0=SPI_read(DATA_3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3304      	adds	r3, #4
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2107      	movs	r1, #7
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	4798      	blx	r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	733b      	strb	r3, [r7, #12]
	uint8_t TEMP1=SPI_read(DATA_4);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3304      	adds	r3, #4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2108      	movs	r1, #8
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4798      	blx	r3
 80045cc:	4603      	mov	r3, r0
 80045ce:	72fb      	strb	r3, [r7, #11]
	uint8_t TEMP2=SPI_read(DATA_5);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3304      	adds	r3, #4
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2109      	movs	r1, #9
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
 80045de:	4603      	mov	r3, r0
 80045e0:	72bb      	strb	r3, [r7, #10]

	this->_rawPressure = ((uint32_t)DATA2<<16)|((uint16_t)DATA1<<8)|DATA0;
 80045e2:	7b7b      	ldrb	r3, [r7, #13]
 80045e4:	041b      	lsls	r3, r3, #16
 80045e6:	7bba      	ldrb	r2, [r7, #14]
 80045e8:	0212      	lsls	r2, r2, #8
 80045ea:	431a      	orrs	r2, r3
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	this->_rawTemp = ((uint32_t)TEMP2<<16)|((uint16_t)TEMP1<<8)|TEMP0;
 80045f6:	7abb      	ldrb	r3, [r7, #10]
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	7afa      	ldrb	r2, [r7, #11]
 80045fc:	0212      	lsls	r2, r2, #8
 80045fe:	431a      	orrs	r2, r3
 8004600:	7b3b      	ldrb	r3, [r7, #12]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	this->read_calib_data();
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fa72 	bl	8004af4 <_ZN6BMP39015read_calib_dataEv>
	this->compensate_data();
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f804 	bl	800461e <_ZN6BMP39015compensate_dataEv>
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <_ZN6BMP39015compensate_dataEv>:

void BMP390::compensate_data()
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
	this->read_calib_data();
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa64 	bl	8004af4 <_ZN6BMP39015read_calib_dataEv>
	this->compensate_temperature();
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f807 	bl	8004640 <_ZN6BMP39022compensate_temperatureEv>
	this->compensate_pressure();
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f854 	bl	80046e0 <_ZN6BMP39019compensate_pressureEv>
}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_ZN6BMP39022compensate_temperatureEv>:

void BMP390::compensate_temperature()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
    double partial_data1 = 0;
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double partial_data2 = 0;
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    partial_data1 = static_cast<double>(this->_rawTemp) - quantizedCalibCoef.par_t1;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004666:	4618      	mov	r0, r3
 8004668:	f7fb ff56 	bl	8000518 <__aeabi_ui2d>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004672:	f7fb fe13 	bl	800029c <__aeabi_dsub>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = partial_data1 * quantizedCalibCoef.par_t2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004684:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004688:	f7fb ffc0 	bl	800060c <__aeabi_dmul>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->quantizedCalibCoef.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantizedCalibCoef.par_t3;
 8004694:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004698:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800469c:	f7fb ffb6 	bl	800060c <__aeabi_dmul>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4610      	mov	r0, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80046ae:	f7fb ffad 	bl	800060c <__aeabi_dmul>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046be:	f7fb fdef 	bl	80002a0 <__adddf3>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8

    this->_temp = static_cast<double>(quantizedCalibCoef.t_lin);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
}
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZN6BMP39019compensate_pressureEv>:

void BMP390::compensate_pressure()
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = this->quantizedCalibCoef.par_p6 * this->quantizedCalibCoef.t_lin;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80046f4:	f7fb ff8a 	bl	800060c <__aeabi_dmul>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p7 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8004712:	f7fb ff7b 	bl	800060c <__aeabi_dmul>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f7fb ff75 	bl	800060c <__aeabi_dmul>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p8 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800473c:	f7fb ff66 	bl	800060c <__aeabi_dmul>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800474e:	f7fb ff5d 	bl	800060c <__aeabi_dmul>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4620      	mov	r0, r4
 8004758:	4629      	mov	r1, r5
 800475a:	f7fb ff57 	bl	800060c <__aeabi_dmul>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out1 = this->quantizedCalibCoef.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800476c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004770:	f7fb fd96 	bl	80002a0 <__adddf3>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004780:	f7fb fd8e 	bl	80002a0 <__adddf3>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800478c:	f7fb fd88 	bl	80002a0 <__adddf3>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	e9c7 2306 	strd	r2, r3, [r7, #24]

    partial_data1 = this->quantizedCalibCoef.par_p2 * this->quantizedCalibCoef.t_lin;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80047a4:	f7fb ff32 	bl	800060c <__aeabi_dmul>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p3 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80047c2:	f7fb ff23 	bl	800060c <__aeabi_dmul>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4620      	mov	r0, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	f7fb ff1d 	bl	800060c <__aeabi_dmul>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p4 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80047ec:	f7fb ff0e 	bl	800060c <__aeabi_dmul>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4610      	mov	r0, r2
 80047f6:	4619      	mov	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80047fe:	f7fb ff05 	bl	800060c <__aeabi_dmul>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4620      	mov	r0, r4
 8004808:	4629      	mov	r1, r5
 800480a:	f7fb feff 	bl	800060c <__aeabi_dmul>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out2 = static_cast<double>(this->_rawPressure) * (this->quantizedCalibCoef.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800481c:	4618      	mov	r0, r3
 800481e:	f7fb fe7b 	bl	8000518 <__aeabi_ui2d>
 8004822:	4604      	mov	r4, r0
 8004824:	460d      	mov	r5, r1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800482c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004830:	f7fb fd36 	bl	80002a0 <__adddf3>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004840:	f7fb fd2e 	bl	80002a0 <__adddf3>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004850:	f7fb fd26 	bl	80002a0 <__adddf3>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4620      	mov	r0, r4
 800485a:	4629      	mov	r1, r5
 800485c:	f7fb fed6 	bl	800060c <__aeabi_dmul>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	e9c7 2304 	strd	r2, r3, [r7, #16]

    partial_data1 = static_cast<double>(this->_rawPressure) * static_cast<double>(this->_rawPressure);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800486e:	4618      	mov	r0, r3
 8004870:	f7fb fe52 	bl	8000518 <__aeabi_ui2d>
 8004874:	4604      	mov	r4, r0
 8004876:	460d      	mov	r5, r1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800487e:	4618      	mov	r0, r3
 8004880:	f7fb fe4a 	bl	8000518 <__aeabi_ui2d>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4620      	mov	r0, r4
 800488a:	4629      	mov	r1, r5
 800488c:	f7fb febe 	bl	800060c <__aeabi_dmul>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p9 + this->quantizedCalibCoef.par_p10 * this->quantizedCalibCoef.t_lin;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 80048aa:	f7fb feaf 	bl	800060c <__aeabi_dmul>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4620      	mov	r0, r4
 80048b4:	4629      	mov	r1, r5
 80048b6:	f7fb fcf3 	bl	80002a0 <__adddf3>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = partial_data1 * partial_data2;
 80048c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80048ca:	f7fb fe9f 	bl	800060c <__aeabi_dmul>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data4 = partial_data3 + (static_cast<double>(this->_rawPressure) * static_cast<double>(this->_rawPressure) * static_cast<double>(this->_rawPressure)) * this->quantizedCalibCoef.par_p11;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fb fe1b 	bl	8000518 <__aeabi_ui2d>
 80048e2:	4604      	mov	r4, r0
 80048e4:	460d      	mov	r5, r1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fb fe13 	bl	8000518 <__aeabi_ui2d>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4620      	mov	r0, r4
 80048f8:	4629      	mov	r1, r5
 80048fa:	f7fb fe87 	bl	800060c <__aeabi_dmul>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4614      	mov	r4, r2
 8004904:	461d      	mov	r5, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800490c:	4618      	mov	r0, r3
 800490e:	f7fb fe03 	bl	8000518 <__aeabi_ui2d>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4620      	mov	r0, r4
 8004918:	4629      	mov	r1, r5
 800491a:	f7fb fe77 	bl	800060c <__aeabi_dmul>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800492c:	f7fb fe6e 	bl	800060c <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004938:	f7fb fcb2 	bl	80002a0 <__adddf3>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->_pressure = (partial_out1 + partial_out2 + partial_data4) / 100.0f;
 8004944:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004948:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800494c:	f7fb fca8 	bl	80002a0 <__adddf3>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800495c:	f7fb fca0 	bl	80002a0 <__adddf3>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <_ZN6BMP39019compensate_pressureEv+0x2a4>)
 800496e:	f7fb ff77 	bl	8000860 <__aeabi_ddiv>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
}
 800497c:	bf00      	nop
 800497e:	3738      	adds	r7, #56	; 0x38
 8004980:	46bd      	mov	sp, r7
 8004982:	bdb0      	pop	{r4, r5, r7, pc}
 8004984:	40590000 	.word	0x40590000

08004988 <_ZN6BMP39019getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:

const char* BMP390::getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList)
{
 8004988:	b5b0      	push	{r4, r5, r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3308      	adds	r3, #8
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(SENSOR_DATA_PARAMETER::BMP_RAW_PRESS)!=senorsList.end())
 800499a:	230f      	movs	r3, #15
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	f107 0310 	add.w	r3, r7, #16
 80049a2:	4619      	mov	r1, r3
 80049a4:	6838      	ldr	r0, [r7, #0]
 80049a6:	f000 fba9 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 80049aa:	4603      	mov	r3, r0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	6838      	ldr	r0, [r7, #0]
 80049b0:	f000 fbbd 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 80049b4:	4603      	mov	r3, r0
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	f107 0214 	add.w	r2, r7, #20
 80049bc:	f107 030c 	add.w	r3, r7, #12
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fbc0 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d022      	beq.n	8004a14 <_ZN6BMP39019getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x8c>
	{
		strcat(packet,toCharArray(_pressure));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f103 0408 	add.w	r4, r3, #8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1d1d      	adds	r5, r3, #4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80049de:	4610      	mov	r0, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	f7fc f8c3 	bl	8000b6c <__aeabi_d2iz>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4619      	mov	r1, r3
 80049ea:	4628      	mov	r0, r5
 80049ec:	f7ff fb94 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4619      	mov	r1, r3
 80049f4:	4620      	mov	r0, r4
 80049f6:	f019 f851 	bl	801da9c <strcat>
		strcat(packet,",");
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f103 0408 	add.w	r4, r3, #8
 8004a00:	4620      	mov	r0, r4
 8004a02:	f7fb fc3f 	bl	8000284 <strlen>
 8004a06:	4603      	mov	r3, r0
 8004a08:	4423      	add	r3, r4
 8004a0a:	4905      	ldr	r1, [pc, #20]	; (8004a20 <_ZN6BMP39019getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x98>)
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	460b      	mov	r3, r1
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3308      	adds	r3, #8
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a20:	0801e2ac 	.word	0x0801e2ac

08004a24 <_ZThn4_N6BMP39019getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:
	bool defaultInit();
	void update();
	int32_t getPressure();
	int32_t getTemp();
	uint8_t getChipID();
	const char* getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList);
 8004a24:	f1a0 0004 	sub.w	r0, r0, #4
 8004a28:	f7ff bfae 	b.w	8004988 <_ZN6BMP39019getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>

08004a2c <_ZN6BMP3909SPI_writeEhh>:
{
	return this->SPI_read(CHIP_ID);
}

void BMP390::SPI_write(uint8_t reg,uint8_t data)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	70fb      	strb	r3, [r7, #3]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_RESET);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a42:	480f      	ldr	r0, [pc, #60]	; (8004a80 <_ZN6BMP3909SPI_writeEhh+0x54>)
 8004a44:	f006 fe74 	bl	800b730 <HAL_GPIO_WritePin>
	this->_spiTxBuff[0] = reg;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	this->_spiTxBuff[1] = data;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	78ba      	ldrb	r2, [r7, #2]
 8004a54:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	HAL_SPI_Transmit_DMA(this->_spiPort, (uint8_t*)_spiTxBuff,2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	33e4      	adds	r3, #228	; 0xe4
 8004a62:	2202      	movs	r2, #2
 8004a64:	4619      	mov	r1, r3
 8004a66:	f00a f81b 	bl	800eaa0 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_SET);
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a70:	4803      	ldr	r0, [pc, #12]	; (8004a80 <_ZN6BMP3909SPI_writeEhh+0x54>)
 8004a72:	f006 fe5d 	bl	800b730 <HAL_GPIO_WritePin>
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40020400 	.word	0x40020400

08004a84 <_ZN6BMP3908SPI_readEh>:

uint8_t BMP390::SPI_read(uint8_t reg)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_RESET);
 8004a90:	2200      	movs	r2, #0
 8004a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a96:	4816      	ldr	r0, [pc, #88]	; (8004af0 <_ZN6BMP3908SPI_readEh+0x6c>)
 8004a98:	f006 fe4a 	bl	800b730 <HAL_GPIO_WritePin>
	this->_spiTxBuff[0]=reg|0x80;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	this->_spiTxBuff[1]=0x00;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	HAL_SPI_Transmit_DMA(this->_spiPort, (uint8_t*)_spiTxBuff, 2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	33e4      	adds	r3, #228	; 0xe4
 8004abc:	2202      	movs	r2, #2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f009 ffee 	bl	800eaa0 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(this->_spiPort, (uint8_t*)_spiRxBuff, 1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	33e6      	adds	r3, #230	; 0xe6
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f00a f89b 	bl	800ec0c <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_SET);
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004adc:	4804      	ldr	r0, [pc, #16]	; (8004af0 <_ZN6BMP3908SPI_readEh+0x6c>)
 8004ade:	f006 fe27 	bl	800b730 <HAL_GPIO_WritePin>

	return this->_spiRxBuff[0];
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40020400 	.word	0x40020400

08004af4 <_ZN6BMP39015read_calib_dataEv>:

void BMP390::read_calib_data()
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	double temp_var = 0;
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uint8_t NVM_PAR_T1_1_value = this->SPI_read(NVM_PAR_T1_1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2131      	movs	r1, #49	; 0x31
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	77fb      	strb	r3, [r7, #31]
	uint8_t NVM_PAR_T1_2_value = this->SPI_read(NVM_PAR_T1_2);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2132      	movs	r1, #50	; 0x32
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
 8004b28:	4603      	mov	r3, r0
 8004b2a:	77bb      	strb	r3, [r7, #30]
	uint8_t NVM_PAR_T2_1_value = this->SPI_read(NVM_PAR_T2_1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3304      	adds	r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2133      	movs	r1, #51	; 0x33
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	777b      	strb	r3, [r7, #29]
	uint8_t NVM_PAR_T2_2_value = this->SPI_read(NVM_PAR_T2_2);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3304      	adds	r3, #4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2134      	movs	r1, #52	; 0x34
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	773b      	strb	r3, [r7, #28]
	uint8_t NVM_PAR_T3_value = this->SPI_read(NVM_PAR_T3);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3304      	adds	r3, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2135      	movs	r1, #53	; 0x35
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	76fb      	strb	r3, [r7, #27]
	uint8_t NVM_PAR_P1_1_value = this->SPI_read(NVM_PAR_P1_1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3304      	adds	r3, #4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2136      	movs	r1, #54	; 0x36
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4798      	blx	r3
 8004b70:	4603      	mov	r3, r0
 8004b72:	76bb      	strb	r3, [r7, #26]
	uint8_t NVM_PAR_P1_2_value = this->SPI_read(NVM_PAR_P1_2);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2137      	movs	r1, #55	; 0x37
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	767b      	strb	r3, [r7, #25]
	uint8_t NVM_PAR_P2_1_value = this->SPI_read(NVM_PAR_P2_1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2138      	movs	r1, #56	; 0x38
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	4798      	blx	r3
 8004b94:	4603      	mov	r3, r0
 8004b96:	763b      	strb	r3, [r7, #24]
	uint8_t NVM_PAR_P2_2_value = this->SPI_read(NVM_PAR_P2_2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2139      	movs	r1, #57	; 0x39
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	75fb      	strb	r3, [r7, #23]
	uint8_t NVM_PAR_P3_value = this->SPI_read(NVM_PAR_P3);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	213a      	movs	r1, #58	; 0x3a
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
 8004bb8:	4603      	mov	r3, r0
 8004bba:	75bb      	strb	r3, [r7, #22]
	uint8_t NVM_PAR_P4_value = this->SPI_read(NVM_PAR_P4);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	213b      	movs	r1, #59	; 0x3b
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	4798      	blx	r3
 8004bca:	4603      	mov	r3, r0
 8004bcc:	757b      	strb	r3, [r7, #21]
	uint8_t NVM_PAR_P5_1_value = this->SPI_read(NVM_PAR_P5_1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	213c      	movs	r1, #60	; 0x3c
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
 8004bdc:	4603      	mov	r3, r0
 8004bde:	753b      	strb	r3, [r7, #20]
	uint8_t NVM_PAR_P5_2_value = this->SPI_read(NVM_PAR_P5_2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3304      	adds	r3, #4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	213d      	movs	r1, #61	; 0x3d
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	74fb      	strb	r3, [r7, #19]
	uint8_t NVM_PAR_P6_1_value = this->SPI_read(NVM_PAR_P6_1);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	213e      	movs	r1, #62	; 0x3e
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	4798      	blx	r3
 8004c00:	4603      	mov	r3, r0
 8004c02:	74bb      	strb	r3, [r7, #18]
	uint8_t NVM_PAR_P6_2_value = this->SPI_read(NVM_PAR_P6_2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	213f      	movs	r1, #63	; 0x3f
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	747b      	strb	r3, [r7, #17]
	uint8_t NVM_PAR_P7_value = this->SPI_read(NVM_PAR_P7);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2140      	movs	r1, #64	; 0x40
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
 8004c24:	4603      	mov	r3, r0
 8004c26:	743b      	strb	r3, [r7, #16]
	uint8_t NVM_PAR_P8_value = this->SPI_read(NVM_PAR_P8);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2141      	movs	r1, #65	; 0x41
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	73fb      	strb	r3, [r7, #15]
	uint8_t NVM_PAR_P9_1_value = this->SPI_read(NVM_PAR_P9_1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2142      	movs	r1, #66	; 0x42
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73bb      	strb	r3, [r7, #14]
	uint8_t NVM_PAR_P9_2_value = this->SPI_read(NVM_PAR_P9_2);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3304      	adds	r3, #4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2143      	movs	r1, #67	; 0x43
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	737b      	strb	r3, [r7, #13]
	uint8_t NVM_PAR_P10_value = this->SPI_read(NVM_PAR_P10);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3304      	adds	r3, #4
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2144      	movs	r1, #68	; 0x44
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	4798      	blx	r3
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	733b      	strb	r3, [r7, #12]
	uint8_t NVM_PAR_P11_value = this->SPI_read(NVM_PAR_P11);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3304      	adds	r3, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2145      	movs	r1, #69	; 0x45
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	4798      	blx	r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	72fb      	strb	r3, [r7, #11]

    this->calibCoef.par_t1 = drone::utils::functions::concatBytes(NVM_PAR_T1_2_value, NVM_PAR_T1_1_value);
 8004c82:	7ffa      	ldrb	r2, [r7, #31]
 8004c84:	7fbb      	ldrb	r3, [r7, #30]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fa61 	bl	8004150 <_ZN5drone5utils9functions11concatBytesEhh>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    this->calibCoef.par_t2 = drone::utils::functions::concatBytes(NVM_PAR_T2_2_value, NVM_PAR_T2_1_value);
 8004c98:	7f7a      	ldrb	r2, [r7, #29]
 8004c9a:	7f3b      	ldrb	r3, [r7, #28]
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fa56 	bl	8004150 <_ZN5drone5utils9functions11concatBytesEhh>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    this->calibCoef.par_t3 = static_cast<int8_t>(NVM_PAR_T3_value);
 8004cae:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    this->calibCoef.par_p1 = drone::utils::functions::concatBytes(NVM_PAR_P1_2_value, NVM_PAR_P1_1_value);
 8004cb8:	7eba      	ldrb	r2, [r7, #26]
 8004cba:	7e7b      	ldrb	r3, [r7, #25]
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fa46 	bl	8004150 <_ZN5drone5utils9functions11concatBytesEhh>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    this->calibCoef.par_p2 = drone::utils::functions::concatBytes(NVM_PAR_P2_2_value, NVM_PAR_P2_1_value);
 8004cce:	7e3a      	ldrb	r2, [r7, #24]
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fa3b 	bl	8004150 <_ZN5drone5utils9functions11concatBytesEhh>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	461a      	mov	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    this->calibCoef.par_p3 = static_cast<int8_t>(NVM_PAR_P3_value);
 8004ce4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    this->calibCoef.par_p4 = static_cast<int8_t>(NVM_PAR_P4_value);
 8004cee:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    this->calibCoef.par_p5 = drone::utils::functions::concatBytes(NVM_PAR_P5_2_value, NVM_PAR_P5_1_value);
 8004cf8:	7d3a      	ldrb	r2, [r7, #20]
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff fa26 	bl	8004150 <_ZN5drone5utils9functions11concatBytesEhh>
 8004d04:	4603      	mov	r3, r0
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    this->calibCoef.par_p6 = drone::utils::functions::concatBytes(NVM_PAR_P6_2_value, NVM_PAR_P6_1_value);
 8004d0e:	7cba      	ldrb	r2, [r7, #18]
 8004d10:	7c7b      	ldrb	r3, [r7, #17]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fa1b 	bl	8004150 <_ZN5drone5utils9functions11concatBytesEhh>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    this->calibCoef.par_p7 = static_cast<int8_t>(NVM_PAR_P7_value);
 8004d24:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    this->calibCoef.par_p8 = static_cast<int8_t>(NVM_PAR_P8_value);
 8004d2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    this->calibCoef.par_p9 = drone::utils::functions::concatBytes(NVM_PAR_P9_2_value, NVM_PAR_P9_1_value);
 8004d38:	7bba      	ldrb	r2, [r7, #14]
 8004d3a:	7b7b      	ldrb	r3, [r7, #13]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fa06 	bl	8004150 <_ZN5drone5utils9functions11concatBytesEhh>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    this->calibCoef.par_p10 = static_cast<int8_t>(NVM_PAR_P10_value);
 8004d4e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    this->calibCoef.par_p11 = static_cast<int8_t>(NVM_PAR_P11_value);
 8004d58:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

    temp_var = 0.00390625f;
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	4b90      	ldr	r3, [pc, #576]	; (8004fa8 <_ZN6BMP39015read_calib_dataEv+0x4b4>)
 8004d68:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t1 = static_cast<double>(this->calibCoef.par_t1) / temp_var;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb fbd0 	bl	8000518 <__aeabi_ui2d>
 8004d78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d7c:	f7fb fd70 	bl	8000860 <__aeabi_ddiv>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    temp_var = 1073741824.0f;
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	4b87      	ldr	r3, [pc, #540]	; (8004fac <_ZN6BMP39015read_calib_dataEv+0x4b8>)
 8004d90:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t2 = static_cast<double>(this->calibCoef.par_t2) / temp_var;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb fbbc 	bl	8000518 <__aeabi_ui2d>
 8004da0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004da4:	f7fb fd5c 	bl	8000860 <__aeabi_ddiv>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    temp_var = 281474976710656.0f;
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	4b7e      	ldr	r3, [pc, #504]	; (8004fb0 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004db8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t3 = static_cast<double>(this->calibCoef.par_t3) / temp_var;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fb fbb8 	bl	8000538 <__aeabi_i2d>
 8004dc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dcc:	f7fb fd48 	bl	8000860 <__aeabi_ddiv>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    temp_var = 1048576.0f;
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	4b75      	ldr	r3, [pc, #468]	; (8004fb4 <_ZN6BMP39015read_calib_dataEv+0x4c0>)
 8004de0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p1 = static_cast<double>(this->calibCoef.par_p1 - 16384) / temp_var;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8004dea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fb fba2 	bl	8000538 <__aeabi_i2d>
 8004df4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004df8:	f7fb fd32 	bl	8000860 <__aeabi_ddiv>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    temp_var = 536870912.0f;
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	4b6b      	ldr	r3, [pc, #428]	; (8004fb8 <_ZN6BMP39015read_calib_dataEv+0x4c4>)
 8004e0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p2 = static_cast<double>(this->calibCoef.par_p2 - 16384) / temp_var;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8004e16:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fb fb8c 	bl	8000538 <__aeabi_i2d>
 8004e20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e24:	f7fb fd1c 	bl	8000860 <__aeabi_ddiv>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    temp_var = 4294967296.0f;
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	4b61      	ldr	r3, [pc, #388]	; (8004fbc <_ZN6BMP39015read_calib_dataEv+0x4c8>)
 8004e38:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p3 = static_cast<double>(this->calibCoef.par_p3) / temp_var;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f993 305a 	ldrsb.w	r3, [r3, #90]	; 0x5a
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fb fb78 	bl	8000538 <__aeabi_i2d>
 8004e48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e4c:	f7fb fd08 	bl	8000860 <__aeabi_ddiv>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    temp_var = 137438953472.0f;
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	4b58      	ldr	r3, [pc, #352]	; (8004fc0 <_ZN6BMP39015read_calib_dataEv+0x4cc>)
 8004e60:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p4 = static_cast<double>(this->calibCoef.par_p4) / temp_var;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f993 305b 	ldrsb.w	r3, [r3, #91]	; 0x5b
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fb fb64 	bl	8000538 <__aeabi_i2d>
 8004e70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e74:	f7fb fcf4 	bl	8000860 <__aeabi_ddiv>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    temp_var = 0.125f;
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p5 = static_cast<double>(this->calibCoef.par_p5) / temp_var;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fb fb3f 	bl	8000518 <__aeabi_ui2d>
 8004e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e9e:	f7fb fcdf 	bl	8000860 <__aeabi_ddiv>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    temp_var = 64.0f;
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	4b44      	ldr	r3, [pc, #272]	; (8004fc4 <_ZN6BMP39015read_calib_dataEv+0x4d0>)
 8004eb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p6 = static_cast<double>(this->calibCoef.par_p6) / temp_var;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fb fb2b 	bl	8000518 <__aeabi_ui2d>
 8004ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ec6:	f7fb fccb 	bl	8000860 <__aeabi_ddiv>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    temp_var = 256.0f;
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	4b3b      	ldr	r3, [pc, #236]	; (8004fc8 <_ZN6BMP39015read_calib_dataEv+0x4d4>)
 8004eda:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p7 = static_cast<double>(this->calibCoef.par_p7) / temp_var;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fb fb27 	bl	8000538 <__aeabi_i2d>
 8004eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eee:	f7fb fcb7 	bl	8000860 <__aeabi_ddiv>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    temp_var = 32768.0f;
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	4b32      	ldr	r3, [pc, #200]	; (8004fcc <_ZN6BMP39015read_calib_dataEv+0x4d8>)
 8004f02:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p8 = static_cast<double>(this->calibCoef.par_p8) / temp_var;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f993 3061 	ldrsb.w	r3, [r3, #97]	; 0x61
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb fb13 	bl	8000538 <__aeabi_i2d>
 8004f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f16:	f7fb fca3 	bl	8000860 <__aeabi_ddiv>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    temp_var = 281474976710656.0f;
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004f2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p9 = static_cast<double>(this->calibCoef.par_p9) / temp_var;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fb faff 	bl	8000538 <__aeabi_i2d>
 8004f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f3e:	f7fb fc8f 	bl	8000860 <__aeabi_ddiv>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    temp_var = 281474976710656.0f;
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8004f52:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p10 = static_cast<double>(this->calibCoef.par_p10) / temp_var;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f993 3064 	ldrsb.w	r3, [r3, #100]	; 0x64
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb faeb 	bl	8000538 <__aeabi_i2d>
 8004f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f66:	f7fb fc7b 	bl	8000860 <__aeabi_ddiv>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    temp_var = 36893488147419103232.0f;
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8004f7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p11 = static_cast<double>(this->calibCoef.par_p11) / temp_var;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fb fad6 	bl	8000538 <__aeabi_i2d>
 8004f8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f90:	f7fb fc66 	bl	8000860 <__aeabi_ddiv>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
}
 8004f9e:	bf00      	nop
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	3f700000 	.word	0x3f700000
 8004fac:	41d00000 	.word	0x41d00000
 8004fb0:	42f00000 	.word	0x42f00000
 8004fb4:	41300000 	.word	0x41300000
 8004fb8:	41c00000 	.word	0x41c00000
 8004fbc:	41f00000 	.word	0x41f00000
 8004fc0:	42400000 	.word	0x42400000
 8004fc4:	40500000 	.word	0x40500000
 8004fc8:	40700000 	.word	0x40700000
 8004fcc:	40e00000 	.word	0x40e00000

08004fd0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
      unsigned __n = 1;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	fb03 f303 	mul.w	r3, r3, r3
 8004fe4:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	60bb      	str	r3, [r7, #8]
	  if (__value < (unsigned)__base) return __n;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d201      	bcs.n	8005006 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	e01d      	b.n	8005042 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	429a      	cmp	r2, r3
 800500c:	d202      	bcs.n	8005014 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3301      	adds	r3, #1
 8005012:	e016      	b.n	8005042 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	429a      	cmp	r2, r3
 800501a:	d202      	bcs.n	8005022 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3302      	adds	r3, #2
 8005020:	e00f      	b.n	8005042 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	429a      	cmp	r2, r3
 8005028:	d202      	bcs.n	8005030 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	3303      	adds	r3, #3
 800502e:	e008      	b.n	8005042 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	3304      	adds	r3, #4
 800503e:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8005040:	e7db      	b.n	8004ffa <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
    }
 8005042:	4618      	mov	r0, r3
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	; 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
      unsigned __pos = __len - 1;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	3b01      	subs	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b63      	cmp	r3, #99	; 0x63
 8005066:	d925      	bls.n	80050b4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	  auto const __num = (__val % 100) * 2;
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 800506c:	fba3 1302 	umull	r1, r3, r3, r2
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	2164      	movs	r1, #100	; 0x64
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	440b      	add	r3, r1
 8005094:	4918      	ldr	r1, [pc, #96]	; (80050f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8005096:	5c8a      	ldrb	r2, [r1, r2]
 8005098:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3b01      	subs	r3, #1
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	4915      	ldr	r1, [pc, #84]	; (80050f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	440a      	add	r2, r1
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	3b02      	subs	r3, #2
 80050b0:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80050b2:	e7d6      	b.n	8005062 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
      if (__val >= 10)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b09      	cmp	r3, #9
 80050b8:	d910      	bls.n	80050dc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	  auto const __num = __val * 2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3301      	adds	r3, #1
 80050c8:	490b      	ldr	r1, [pc, #44]	; (80050f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80050ca:	5c8a      	ldrb	r2, [r1, r2]
 80050cc:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	701a      	strb	r2, [r3, #0]
    }
 80050da:	e005      	b.n	80050e8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	3330      	adds	r3, #48	; 0x30
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	701a      	strb	r2, [r3, #0]
    }
 80050e8:	bf00      	nop
 80050ea:	3724      	adds	r7, #36	; 0x24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	51eb851f 	.word	0x51eb851f
 80050f8:	0801e618 	.word	0x0801e618

080050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6839      	ldr	r1, [r7, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f830 	bl	8005170 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE4findERKS0_>
 8005110:	4603      	mov	r3, r0
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	f107 020c 	add.w	r2, r7, #12
 8005118:	f107 0308 	add.w	r3, r7, #8
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f862 	bl	80051e8 <_ZNSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETEREC1ERKSt17_Rb_tree_iteratorIS0_E>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	f000 f865 	bl	8005208 <_ZNKSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE3endEv>
 800513e:	4603      	mov	r3, r0
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      { return __x._M_node == __y._M_node; }

#if ! __cpp_lib_three_way_comparison
      friend bool
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	bf14      	ite	ne
 800515e:	2301      	movne	r3, #1
 8005160:	2300      	moveq	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE4findERKS0_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005170:	b590      	push	{r4, r7, lr}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f855 	bl	800522a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE8_M_beginEv>
 8005180:	4604      	mov	r4, r0
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f85d 	bl	8005242 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_M_endEv>
 8005188:	4602      	mov	r2, r0
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	4621      	mov	r1, r4
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f863 	bl	800525a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS0_EPSt18_Rb_tree_node_baseRKS0_>
 8005194:	4603      	mov	r3, r0
 8005196:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f88f 	bl	80052bc <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE3endEv>
 800519e:	4603      	mov	r3, r0
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	f107 020c 	add.w	r2, r7, #12
 80051a6:	f107 0308 	add.w	r3, r7, #8
 80051aa:	4611      	mov	r1, r2
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 f896 	bl	80052de <_ZSteqRKSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETERES3_>
 80051b2:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10d      	bne.n	80051d4 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE4findERKS0_+0x64>
	      || _M_impl._M_key_compare(__k,
 80051b8:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 80051ba:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 f8a2 	bl	8005306 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80051c2:	4603      	mov	r3, r0
 80051c4:	461a      	mov	r2, r3
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	4620      	mov	r0, r4
 80051ca:	f000 f8a8 	bl	800531e <_ZNKSt4lessI21SENSOR_DATA_PARAMETEREclERKS0_S3_>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE4findERKS0_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f871 	bl	80052bc <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE3endEv>
 80051da:	4603      	mov	r3, r0
 80051dc:	e000      	b.n	80051e0 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE4findERKS0_+0x70>
 80051de:	68bb      	ldr	r3, [r7, #8]
    }
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd90      	pop	{r4, r7, pc}

080051e8 <_ZNSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETEREC1ERKSt17_Rb_tree_iteratorIS0_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <_ZNKSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	1d1a      	adds	r2, r3, #4
 8005214:	f107 030c 	add.w	r3, r7, #12
 8005218:	4611      	mov	r1, r2
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f894 	bl	8005348 <_ZNSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETEREC1EPKSt18_Rb_tree_node_base>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS0_EPSt18_Rb_tree_node_baseRKS0_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800525a:	b590      	push	{r4, r7, lr}
 800525c:	b087      	sub	sp, #28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01b      	beq.n	80052a6 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS0_EPSt18_Rb_tree_node_baseRKS0_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800526e:	68fc      	ldr	r4, [r7, #12]
 8005270:	68b8      	ldr	r0, [r7, #8]
 8005272:	f000 f878 	bl	8005366 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_S_keyEPKSt13_Rb_tree_nodeIS0_E>
 8005276:	4603      	mov	r3, r0
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	4620      	mov	r0, r4
 800527e:	f000 f84e 	bl	800531e <_ZNKSt4lessI21SENSOR_DATA_PARAMETEREclERKS0_S3_>
 8005282:	4603      	mov	r3, r0
 8005284:	f083 0301 	eor.w	r3, r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d006      	beq.n	800529c <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS0_EPSt18_Rb_tree_node_baseRKS0_+0x42>
	  __y = __x, __x = _S_left(__x);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	607b      	str	r3, [r7, #4]
 8005292:	68b8      	ldr	r0, [r7, #8]
 8005294:	f000 f87a 	bl	800538c <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005298:	60b8      	str	r0, [r7, #8]
 800529a:	e7e5      	b.n	8005268 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS0_EPSt18_Rb_tree_node_baseRKS0_+0xe>
	  __x = _S_right(__x);
 800529c:	68b8      	ldr	r0, [r7, #8]
 800529e:	f000 f881 	bl	80053a4 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE8_S_rightEPSt18_Rb_tree_node_base>
 80052a2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80052a4:	e7e0      	b.n	8005268 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS0_EPSt18_Rb_tree_node_baseRKS0_+0xe>
      return iterator(__y);
 80052a6:	f107 0314 	add.w	r3, r7, #20
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f885 	bl	80053bc <_ZNSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREC1EPSt18_Rb_tree_node_base>
 80052b2:	697b      	ldr	r3, [r7, #20]
    }
 80052b4:	4618      	mov	r0, r3
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd90      	pop	{r4, r7, pc}

080052bc <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1d1a      	adds	r2, r3, #4
 80052c8:	f107 030c 	add.w	r3, r7, #12
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 f874 	bl	80053bc <_ZNSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREC1EPSt18_Rb_tree_node_base>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <_ZSteqRKSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETERES3_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f829 	bl	8005366 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_S_keyEPKSt13_Rb_tree_nodeIS0_E>
 8005314:	4603      	mov	r3, r0
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <_ZNKSt4lessI21SENSOR_DATA_PARAMETEREclERKS0_S3_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	bfb4      	ite	lt
 8005336:	2301      	movlt	r3, #1
 8005338:	2300      	movge	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <_ZNSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETEREC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_S_keyEPKSt13_Rb_tree_nodeIS0_E>:
      _S_key(_Const_Link_type __x)
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f833 	bl	80053da <_ZNKSt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETERE9_M_valptrEv>
 8005374:	4602      	mov	r2, r0
 8005376:	f107 030c 	add.w	r3, r7, #12
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f83a 	bl	80053f6 <_ZNKSt9_IdentityI21SENSOR_DATA_PARAMETEREclERKS0_>
 8005382:	4603      	mov	r3, r0
      }
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <_ZNSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <_ZNKSt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETERE9_M_valptrEv>:
      _M_valptr() const
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3310      	adds	r3, #16
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f811 	bl	800540e <_ZNK9__gnu_cxx16__aligned_membufI21SENSOR_DATA_PARAMETERE6_M_ptrEv>
 80053ec:	4603      	mov	r3, r0
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <_ZNKSt9_IdentityI21SENSOR_DATA_PARAMETEREclERKS0_>:
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
      { return __x; }
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <_ZNK9__gnu_cxx16__aligned_membufI21SENSOR_DATA_PARAMETERE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f805 	bl	8005426 <_ZNK9__gnu_cxx16__aligned_membufI21SENSOR_DATA_PARAMETERE7_M_addrEv>
 800541c:	4603      	mov	r3, r0
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZNK9__gnu_cxx16__aligned_membufI21SENSOR_DATA_PARAMETERE7_M_addrEv>:
      _M_addr() const noexcept
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <_ZN17BatteryManagement3runEv>:
//#include "../BatteryManagement_lib/BaterryManagement.hpp"

#include "BatteryManagement.hpp"

void BatteryManagement::run()
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	_tickCounter++;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	619a      	str	r2, [r3, #24]
	toPercentage();
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f82a 	bl	80054a8 <_ZN17BatteryManagement12toPercentageEv>

	if (_tickCounter>=_frequencyTick)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	8a92      	ldrh	r2, [r2, #20]
 800545c:	4293      	cmp	r3, r2
 800545e:	d31e      	bcc.n	800549e <_ZN17BatteryManagement3runEv+0x62>
	{
		HAL_ADC_Start_DMA(_adcPort, &_batteryVal,1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68d8      	ldr	r0, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	331c      	adds	r3, #28
 8005468:	2201      	movs	r2, #1
 800546a:	4619      	mov	r1, r3
 800546c:	f004 fd50 	bl	8009f10 <HAL_ADC_Start_DMA>

		if (_batteryVal<=BATERRY_MIN_3V2 && _batteryVal > BATTERY_CONNECTED_THRESHOLD)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	8852      	ldrh	r2, [r2, #2]
 8005478:	4293      	cmp	r3, r2
 800547a:	d80d      	bhi.n	8005498 <_ZN17BatteryManagement3runEv+0x5c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	8892      	ldrh	r2, [r2, #4]
 8005484:	4293      	cmp	r3, r2
 8005486:	d907      	bls.n	8005498 <_ZN17BatteryManagement3runEv+0x5c>
		{
			_buzz->beep(2000U,200U,1U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6918      	ldr	r0, [r3, #16]
 800548c:	2301      	movs	r3, #1
 800548e:	22c8      	movs	r2, #200	; 0xc8
 8005490:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005494:	f000 f8fb 	bl	800568e <_ZN6Buzzer4beepEiii>
		}

		_tickCounter = 0;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	619a      	str	r2, [r3, #24]
	}
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <_ZN17BatteryManagement12toPercentageEv>:

void BatteryManagement::toPercentage()
{
 80054a8:	b5b0      	push	{r4, r5, r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	if(_batteryVal>BATERRY_MAX_4V2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	8812      	ldrh	r2, [r2, #0]
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d906      	bls.n	80054ca <_ZN17BatteryManagement12toPercentageEv+0x22>
	{
		_batteryPercentage = 100;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a54      	ldr	r2, [pc, #336]	; (8005610 <_ZN17BatteryManagement12toPercentageEv+0x168>)
 80054c0:	621a      	str	r2, [r3, #32]
		_batteryVoltage = 4.2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a53      	ldr	r2, [pc, #332]	; (8005614 <_ZN17BatteryManagement12toPercentageEv+0x16c>)
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24
	else
	{
		_batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-_batteryVoltage))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
		_batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(_batteryVoltage/3.7,80)),0.165);
	}
}
 80054c8:	e087      	b.n	80055da <_ZN17BatteryManagement12toPercentageEv+0x132>
	else if(_batteryVal<BATERRY_MIN_3V2)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	8852      	ldrh	r2, [r2, #2]
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d207      	bcs.n	80054e6 <_ZN17BatteryManagement12toPercentageEv+0x3e>
		_batteryPercentage = 0;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	621a      	str	r2, [r3, #32]
		_batteryVoltage = 3.2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a4d      	ldr	r2, [pc, #308]	; (8005618 <_ZN17BatteryManagement12toPercentageEv+0x170>)
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80054e4:	e079      	b.n	80055da <_ZN17BatteryManagement12toPercentageEv+0x132>
		_batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-_batteryVoltage))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80054f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054fc:	ee17 0a90 	vmov	r0, s15
 8005500:	f7fb f82c 	bl	800055c <__aeabi_f2d>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	a137      	add	r1, pc, #220	; (adr r1, 80055e8 <_ZN17BatteryManagement12toPercentageEv+0x140>)
 800550a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800550e:	f7fa fec5 	bl	800029c <__aeabi_dsub>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4614      	mov	r4, r2
 8005518:	461d      	mov	r5, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	885b      	ldrh	r3, [r3, #2]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	4618      	mov	r0, r3
 8005528:	f7fb f806 	bl	8000538 <__aeabi_i2d>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fb f994 	bl	8000860 <__aeabi_ddiv>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	a32b      	add	r3, pc, #172	; (adr r3, 80055f0 <_ZN17BatteryManagement12toPercentageEv+0x148>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f7fa feab 	bl	80002a0 <__adddf3>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	f7fb fb33 	bl	8000bbc <__aeabi_d2f>
 8005556:	4602      	mov	r2, r0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	625a      	str	r2, [r3, #36]	; 0x24
		_batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(_batteryVoltage/3.7,80)),0.165);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	4618      	mov	r0, r3
 8005562:	f7fa fffb 	bl	800055c <__aeabi_f2d>
 8005566:	a324      	add	r3, pc, #144	; (adr r3, 80055f8 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f7fb f978 	bl	8000860 <__aeabi_ddiv>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	ec43 2b17 	vmov	d7, r2, r3
 8005578:	2050      	movs	r0, #80	; 0x50
 800557a:	eeb0 0a47 	vmov.f32	s0, s14
 800557e:	eef0 0a67 	vmov.f32	s1, s15
 8005582:	f000 f868 	bl	8005656 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005586:	ec51 0b10 	vmov	r0, r1, d0
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	4b23      	ldr	r3, [pc, #140]	; (800561c <_ZN17BatteryManagement12toPercentageEv+0x174>)
 8005590:	f7fa fe86 	bl	80002a0 <__adddf3>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	ec43 2b17 	vmov	d7, r2, r3
 800559c:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8005600 <_ZN17BatteryManagement12toPercentageEv+0x158>
 80055a0:	eeb0 0a47 	vmov.f32	s0, s14
 80055a4:	eef0 0a67 	vmov.f32	s1, s15
 80055a8:	f016 fff4 	bl	801c594 <pow>
 80055ac:	ec53 2b10 	vmov	r2, r3, d0
 80055b0:	a115      	add	r1, pc, #84	; (adr r1, 8005608 <_ZN17BatteryManagement12toPercentageEv+0x160>)
 80055b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055b6:	f7fb f953 	bl	8000860 <__aeabi_ddiv>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	a112      	add	r1, pc, #72	; (adr r1, 8005608 <_ZN17BatteryManagement12toPercentageEv+0x160>)
 80055c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055c4:	f7fa fe6a 	bl	800029c <__aeabi_dsub>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	f7fb faf4 	bl	8000bbc <__aeabi_d2f>
 80055d4:	4602      	mov	r2, r0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bdb0      	pop	{r4, r5, r7, pc}
 80055e2:	bf00      	nop
 80055e4:	f3af 8000 	nop.w
 80055e8:	00000000 	.word	0x00000000
 80055ec:	407c2000 	.word	0x407c2000
 80055f0:	9999999a 	.word	0x9999999a
 80055f4:	40099999 	.word	0x40099999
 80055f8:	9999999a 	.word	0x9999999a
 80055fc:	400d9999 	.word	0x400d9999
 8005600:	51eb851f 	.word	0x51eb851f
 8005604:	3fc51eb8 	.word	0x3fc51eb8
 8005608:	00000000 	.word	0x00000000
 800560c:	405ec000 	.word	0x405ec000
 8005610:	42c80000 	.word	0x42c80000
 8005614:	40866666 	.word	0x40866666
 8005618:	404ccccd 	.word	0x404ccccd
 800561c:	3ff00000 	.word	0x3ff00000

08005620 <_ZN17BatteryManagement8msToTickEt>:
{
	return _batteryPercentage;
}

uint16_t BatteryManagement::msToTick(uint16_t ms)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 800562c:	887b      	ldrh	r3, [r7, #2]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	ed93 7a02 	vldr	s14, [r3, #8]
 800563c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005644:	ee17 3a90 	vmov	r3, s15
 8005648:	b29b      	uxth	r3, r3
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	ed87 0b02 	vstr	d0, [r7, #8]
 8005660:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fa ff68 	bl	8000538 <__aeabi_i2d>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	ec43 2b11 	vmov	d1, r2, r3
 8005670:	ed97 0b02 	vldr	d0, [r7, #8]
 8005674:	f016 ff8e 	bl	801c594 <pow>
 8005678:	eeb0 7a40 	vmov.f32	s14, s0
 800567c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8005680:	eeb0 0a47 	vmov.f32	s0, s14
 8005684:	eef0 0a67 	vmov.f32	s1, s15
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <_ZN6Buzzer4beepEiii>:
 */

#include "Buzzer.hpp"

bool Buzzer::beep(int duration_ms,int freq_ms,int repetition_count)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	603b      	str	r3, [r7, #0]
	if (!this->_busy)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	7b9b      	ldrb	r3, [r3, #14]
 80056a0:	f083 0301 	eor.w	r3, r3, #1
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d029      	beq.n	80056fe <_ZN6Buzzer4beepEiii+0x70>
	{
		this->_busy = true;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	739a      	strb	r2, [r3, #14]

		this->_counterEnd = this->msToTick(duration_ms);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4619      	mov	r1, r3
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f877 	bl	80057aa <_ZN6Buzzer8msToTickEt>
 80056bc:	4603      	mov	r3, r0
 80056be:	461a      	mov	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	815a      	strh	r2, [r3, #10]
		this->_freqTick = this->msToTick(freq_ms);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	4619      	mov	r1, r3
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f86d 	bl	80057aa <_ZN6Buzzer8msToTickEt>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	809a      	strh	r2, [r3, #4]
		this->_repetitions = this->_freqTick * repetition_count * 2U - 1U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	889a      	ldrh	r2, [r3, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	fb12 f303 	smulbb	r3, r2, r3
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	819a      	strh	r2, [r3, #12]

		Buzz_on();
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f870 	bl	80057d8 <_ZN6Buzzer7Buzz_onEv>

		return _busy;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	7b9b      	ldrb	r3, [r3, #14]
 80056fc:	e001      	b.n	8005702 <_ZN6Buzzer4beepEiii+0x74>
	}

	return _busy;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	7b9b      	ldrb	r3, [r3, #14]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <_ZN6Buzzer3runEv>:

void Buzzer::run()
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
	if (this->_busy)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7b9b      	ldrb	r3, [r3, #14]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d032      	beq.n	8005780 <_ZN6Buzzer3runEv+0x76>
	{
		this->_counterStart++;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	891b      	ldrh	r3, [r3, #8]
 800571e:	3301      	adds	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	811a      	strh	r2, [r3, #8]

		if ((this->_repetitions > 0U) && (this->_freqTick!=0U))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	899b      	ldrh	r3, [r3, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01c      	beq.n	8005768 <_ZN6Buzzer3runEv+0x5e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	889b      	ldrh	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d018      	beq.n	8005768 <_ZN6Buzzer3runEv+0x5e>
		{
			if (!((this->_counterStart/this->_freqTick) % 2U))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	891a      	ldrh	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	889b      	ldrh	r3, [r3, #4]
 800573e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005742:	b29b      	uxth	r3, r3
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <_ZN6Buzzer3runEv+0x4a>
			{
				this->Buzz_on();
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f843 	bl	80057d8 <_ZN6Buzzer7Buzz_onEv>
 8005752:	e002      	b.n	800575a <_ZN6Buzzer3runEv+0x50>
			}
			else
			{
				this->Buzz_off();
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f84f 	bl	80057f8 <_ZN6Buzzer8Buzz_offEv>
			}
			this->_repetitions--;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	899b      	ldrh	r3, [r3, #12]
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	819a      	strh	r2, [r3, #12]
 8005766:	e002      	b.n	800576e <_ZN6Buzzer3runEv+0x64>
		} else
		{
			this->Buzz_off();
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f845 	bl	80057f8 <_ZN6Buzzer8Buzz_offEv>
		}

		if (this->_counterStart >= this->_counterEnd)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	891a      	ldrh	r2, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	895b      	ldrh	r3, [r3, #10]
 8005776:	429a      	cmp	r2, r3
 8005778:	d302      	bcc.n	8005780 <_ZN6Buzzer3runEv+0x76>
		{
			this->stop();
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f804 	bl	8005788 <_ZN6Buzzer4stopEv>
		}
	}
}
 8005780:	bf00      	nop
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <_ZN6Buzzer4stopEv>:

void Buzzer::stop()
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	this->_busy = false;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	739a      	strb	r2, [r3, #14]
	this->_counterStart = 0U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	811a      	strh	r2, [r3, #8]
	this->Buzz_off();
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f82b 	bl	80057f8 <_ZN6Buzzer8Buzz_offEv>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <_ZN6Buzzer8msToTickEt>:
{
	return _busy;
}

uint16_t Buzzer::msToTick(uint16_t ms)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 80057b6:	887b      	ldrh	r3, [r7, #2]
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c4:	ee17 3a90 	vmov	r3, s15
 80057c8:	b29b      	uxth	r3, r3
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <_ZN6Buzzer7Buzz_onEv>:

void Buzzer::Buzz_on()
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
//#if DISABLE_ALL_BEEPS == 5
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80057e0:	2201      	movs	r2, #1
 80057e2:	2110      	movs	r1, #16
 80057e4:	4803      	ldr	r0, [pc, #12]	; (80057f4 <_ZN6Buzzer7Buzz_onEv+0x1c>)
 80057e6:	f005 ffa3 	bl	800b730 <HAL_GPIO_WritePin>
//#endif
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40020000 	.word	0x40020000

080057f8 <_ZN6Buzzer8Buzz_offEv>:

void Buzzer::Buzz_off()
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8005800:	2200      	movs	r2, #0
 8005802:	2110      	movs	r1, #16
 8005804:	4803      	ldr	r0, [pc, #12]	; (8005814 <_ZN6Buzzer8Buzz_offEv+0x1c>)
 8005806:	f005 ff93 	bl	800b730 <HAL_GPIO_WritePin>
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40020000 	.word	0x40020000

08005818 <_ZN7Timeout15setTimeoutValueEh>:
	uint8_t* getTimeoutCounter()
	{
		return &timeout_counter;
	}

	void setTimeoutValue(uint8_t value)
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
	{
		timeout_value = value;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	78fa      	ldrb	r2, [r7, #3]
 8005828:	709a      	strb	r2, [r3, #2]
	}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <_ZN7TimeoutC1Ev>:
class Timeout
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	705a      	strb	r2, [r3, #1]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	709a      	strb	r2, [r3, #2]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>:
 *      Author: DragosDarie
 */

#include "FrSkyRX.hpp"

FrSkyRX::FrSkyRX(
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
	,_rxOk {0U}
	,_currentState {FrSkyRXState::NOT_CONNECTED}
	,throttle {0.0F}
	,target_roll {0.0F}
	,target_pitch {0.0F}
	,target_yaw {0.0F}
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3336      	adds	r3, #54	; 0x36
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff ffdf 	bl	8005836 <_ZN7TimeoutC1Ev>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3340      	adds	r3, #64	; 0x40
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fca3 	bl	80041c8 <_ZN12CallsCounterC1Ev>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe fc89 	bl	800419c <_ZN15PrintableSensorC1Ev>
 800588a:	4a31      	ldr	r2, [pc, #196]	; (8005950 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh+0xf0>)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	651a      	str	r2, [r3, #80]	; 0x50
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	655a      	str	r2, [r3, #84]	; 0x54
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	659a      	str	r2, [r3, #88]	; 0x58
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	335c      	adds	r3, #92	; 0x5c
 80058a6:	2232      	movs	r2, #50	; 0x32
 80058a8:	2100      	movs	r1, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	f017 ff9a 	bl	801d7e4 <memset>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3390      	adds	r3, #144	; 0x90
 80058bc:	2220      	movs	r2, #32
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f017 ff8f 	bl	801d7e4 <memset>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
{
	setTimeoutValue(timeout);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3336      	adds	r3, #54	; 0x36
 800593a:	7e3a      	ldrb	r2, [r7, #24]
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff ff6a 	bl	8005818 <_ZN7Timeout15setTimeoutValueEh>
}
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	0801e728 	.word	0x0801e728

08005954 <_ZN7FrSkyRX5beginEv>:

void FrSkyRX::begin()
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->_uartPort, this->_rxBuff, this->packetLength);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	335c      	adds	r3, #92	; 0x5c
 8005964:	2219      	movs	r2, #25
 8005966:	4619      	mov	r1, r3
 8005968:	f00a ff64 	bl	8010834 <HAL_UART_Receive_DMA>
}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <_ZN7FrSkyRX6updateEv>:

void FrSkyRX::update()
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->_rxBuff[0] == this->BEGIN_BIT) && (this->_rxBuff[24]==this->END_BIT);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d106      	bne.n	8005994 <_ZN7FrSkyRX6updateEv+0x20>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <_ZN7FrSkyRX6updateEv+0x20>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <_ZN7FrSkyRX6updateEv+0x22>
 8005994:	2300      	movs	r3, #0
 8005996:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 8005998:	7bbb      	ldrb	r3, [r7, #14]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01a      	beq.n	80059d4 <_ZN7FrSkyRX6updateEv+0x60>
	{
		this->updateValues();
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f95f 	bl	8005c62 <_ZN7FrSkyRX12updateValuesEv>
		this->processStateMachine();
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f861 	bl	8005a6c <_ZN7FrSkyRX19processStateMachineEv>

		if (this->isDisconnected() || this->_rb == 0U)
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fb2c 	bl	8006008 <_ZNK7FrSkyRX14isDisconnectedEv>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <_ZN7FrSkyRX6updateEv+0x4c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <_ZN7FrSkyRX6updateEv+0x50>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <_ZN7FrSkyRX6updateEv+0x52>
 80059c4:	2300      	movs	r3, #0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d032      	beq.n	8005a30 <_ZN7FrSkyRX6updateEv+0xbc>
			this->_currentState = FrSkyRXState::TIMEOUT;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2204      	movs	r2, #4
 80059ce:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 80059d2:	e02d      	b.n	8005a30 <_ZN7FrSkyRX6updateEv+0xbc>
	}
	else if (this->_wrongDataReceived==false)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d128      	bne.n	8005a30 <_ZN7FrSkyRX6updateEv+0xbc>
	{
		for (uint8_t iter=0;iter<this->packetLength-1U;iter++)
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
 80059e4:	2b17      	cmp	r3, #23
 80059e6:	d823      	bhi.n	8005a30 <_ZN7FrSkyRX6updateEv+0xbc>
		{
			if ((this->_rxBuff[iter]==this->END_BIT) && (this->_rxBuff[iter+1U]==this->BEGIN_BIT))
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d118      	bne.n	8005a28 <_ZN7FrSkyRX6updateEv+0xb4>
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	3301      	adds	r3, #1
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a02:	2b0f      	cmp	r3, #15
 8005a04:	d110      	bne.n	8005a28 <_ZN7FrSkyRX6updateEv+0xb4>
			{
				HAL_UART_Receive_DMA (this->_uartPort, this->_rxBuff, this->packetLength+iter+1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	331a      	adds	r3, #26
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f00a ff0b 	bl	8010834 <HAL_UART_Receive_DMA>
				this->_wrongDataReceived = true;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
				return;
 8005a26:	e01e      	b.n	8005a66 <_ZN7FrSkyRX6updateEv+0xf2>
		for (uint8_t iter=0;iter<this->packetLength-1U;iter++)
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
 8005a2e:	e7d8      	b.n	80059e2 <_ZN7FrSkyRX6updateEv+0x6e>
			}
		}
	}

	if (this->_wrongDataReceived == true)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d103      	bne.n	8005a42 <_ZN7FrSkyRX6updateEv+0xce>
		this->_wrongDataReceived = false;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

	HAL_UART_Receive_DMA(this->_uartPort, this->_rxBuff, this->packetLength);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	335c      	adds	r3, #92	; 0x5c
 8005a4a:	2219      	movs	r2, #25
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f00a fef1 	bl	8010834 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->_uartPortDMA, DMA_IT_HT);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0208 	bic.w	r2, r2, #8
 8005a64:	601a      	str	r2, [r3, #0]
}
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <_ZN7FrSkyRX19processStateMachineEv>:

void FrSkyRX::processStateMachine()
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	switch (this->_currentState)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	f200 80d7 	bhi.w	8005c2e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <_ZN7FrSkyRX19processStateMachineEv+0x1c>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005a9d 	.word	0x08005a9d
 8005a8c:	08005afb 	.word	0x08005afb
 8005a90:	08005b31 	.word	0x08005b31
 8005a94:	08005b73 	.word	0x08005b73
 8005a98:	08005c21 	.word	0x08005c21
	{
	case FrSkyRXState::NOT_CONNECTED:
		if ((this->_lu == 0U) && (this->throttle < 300U) && (this->_rb == 1U))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d120      	bne.n	8005ae8 <_ZN7FrSkyRX19processStateMachineEv+0x7c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8005aac:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8005c38 <_ZN7FrSkyRX19processStateMachineEv+0x1cc>
 8005ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab8:	d516      	bpl.n	8005ae8 <_ZN7FrSkyRX19processStateMachineEv+0x7c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d111      	bne.n	8005ae8 <_ZN7FrSkyRX19processStateMachineEv+0x7c>
		{
			this->_currentState = FrSkyRXState::CONNECTED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			this->_buzz->stop();
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fe59 	bl	8005788 <_ZN6Buzzer4stopEv>
			this->_buzz->beep(600U,100U,3U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005ada:	2303      	movs	r3, #3
 8005adc:	2264      	movs	r2, #100	; 0x64
 8005ade:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005ae2:	f7ff fdd4 	bl	800568e <_ZN6Buzzer4beepEiii>
		}
		else
		{
			this->_buzz->beep(3000U,100U,2U);
		}
		break;
 8005ae6:	e0a2      	b.n	8005c2e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
			this->_buzz->beep(3000U,100U,2U);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005aec:	2302      	movs	r3, #2
 8005aee:	2264      	movs	r2, #100	; 0x64
 8005af0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8005af4:	f7ff fdcb 	bl	800568e <_ZN6Buzzer4beepEiii>
		break;
 8005af8:	e099      	b.n	8005c2e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
	case FrSkyRXState::CONNECTED:
		if (this->_lu == 1U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	f040 808f 	bne.w	8005c24 <_ZN7FrSkyRX19processStateMachineEv+0x1b8>
		{
			TIM3 -> CCR1 = 3000;
 8005b06:	4b4d      	ldr	r3, [pc, #308]	; (8005c3c <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005b08:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005b0c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3000;
 8005b0e:	4b4b      	ldr	r3, [pc, #300]	; (8005c3c <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005b10:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005b14:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3000;
 8005b16:	4b49      	ldr	r3, [pc, #292]	; (8005c3c <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005b18:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005b1c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3000;
 8005b1e:	4b47      	ldr	r3, [pc, #284]	; (8005c3c <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005b20:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
			this->_currentState = FrSkyRXState::ARMED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
		}
		break;
 8005b2e:	e079      	b.n	8005c24 <_ZN7FrSkyRX19processStateMachineEv+0x1b8>
	case FrSkyRXState::ARMED:
		if (this->_lu == 2U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d176      	bne.n	8005c28 <_ZN7FrSkyRX19processStateMachineEv+0x1bc>
		{
			TIM3 -> CCR1 = 3300;
 8005b3a:	4b40      	ldr	r3, [pc, #256]	; (8005c3c <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005b3c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005b40:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3300;
 8005b42:	4b3e      	ldr	r3, [pc, #248]	; (8005c3c <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005b44:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3300;
 8005b4a:	4b3c      	ldr	r3, [pc, #240]	; (8005c3c <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005b4c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005b50:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3300;
 8005b52:	4b3a      	ldr	r3, [pc, #232]	; (8005c3c <_ZN7FrSkyRX19processStateMachineEv+0x1d0>)
 8005b54:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
			this->_buzz->beep(200U,100U,1U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005b5e:	2301      	movs	r3, #1
 8005b60:	2264      	movs	r2, #100	; 0x64
 8005b62:	21c8      	movs	r1, #200	; 0xc8
 8005b64:	f7ff fd93 	bl	800568e <_ZN6Buzzer4beepEiii>
			this->_currentState = FrSkyRXState::READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
		}
		break;
 8005b70:	e05a      	b.n	8005c28 <_ZN7FrSkyRX19processStateMachineEv+0x1bc>
	case FrSkyRXState::READY:
		if (_rawRoll > 1150 || _rawRoll < 800 || _rawPitch > 1150 || _rawPitch < 800)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8005b78:	f240 427e 	movw	r2, #1150	; 0x47e
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d812      	bhi.n	8005ba6 <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8005b86:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005b8a:	d30c      	bcc.n	8005ba6 <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8005b92:	f240 427e 	movw	r2, #1150	; 0x47e
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d805      	bhi.n	8005ba6 <_ZN7FrSkyRX19processStateMachineEv+0x13a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8005ba0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005ba4:	d242      	bcs.n	8005c2c <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
		{
			target_roll += -static_cast<float>(mid_position - _rawRoll) * roll_scaleFactor;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8005bb2:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bbe:	eef1 7a67 	vneg.f32	s15, s15
 8005bc2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005c40 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
 8005bc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
			target_pitch += static_cast<float>(mid_position - _rawPitch) * pitch_scaleFactor;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8005be0:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005be4:	ee07 3a90 	vmov	s15, r3
 8005be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bec:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005c40 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
 8005bf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
			target_yaw = static_cast<float>(mid_position - _rawYaw) * yaw_scaleFactor;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005c04:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 8005c08:	ee07 3a90 	vmov	s15, r3
 8005c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c10:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005c44 <_ZN7FrSkyRX19processStateMachineEv+0x1d8>
 8005c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

			//target_roll = ((target_roll > 2.0F) || (target_roll < -2.0F)) ? target_roll : 0.0F;
			//target_pitch = ((target_pitch > 2.0F) || (target_pitch < -2.0F)) ? target_pitch : 0.0F;
		}
		break;
 8005c1e:	e005      	b.n	8005c2c <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
	case FrSkyRXState::TIMEOUT:

		break;
 8005c20:	bf00      	nop
 8005c22:	e004      	b.n	8005c2e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 8005c24:	bf00      	nop
 8005c26:	e002      	b.n	8005c2e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 8005c28:	bf00      	nop
 8005c2a:	e000      	b.n	8005c2e <_ZN7FrSkyRX19processStateMachineEv+0x1c2>
		break;
 8005c2c:	bf00      	nop
	}
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	43960000 	.word	0x43960000
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	3851b717 	.word	0x3851b717
 8005c44:	3a83126f 	.word	0x3a83126f

08005c48 <_ZNK7FrSkyRX15getCurrentStateEv>:

FrSkyRXState FrSkyRX::getCurrentState() const
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	return this->_currentState;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <_ZN7FrSkyRX12updateValuesEv>:

void FrSkyRX::updateValues()
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
	this->_channels[0]  = static_cast<int16_t>(_rxBuff[1] | (_rxBuff[2] << 8 & 0x07FF));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c70:	b21a      	sxth	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	b21b      	sxth	r3, r3
 8005c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c80:	b21b      	sxth	r3, r3
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b21b      	sxth	r3, r3
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	this->_channels[1]  = static_cast<int16_t>(_rxBuff[2] >> 3 | (_rxBuff[3] << 5 & 0x07FF));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8005c94:	08db      	lsrs	r3, r3, #3
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	b21a      	sxth	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8005ca0:	015b      	lsls	r3, r3, #5
 8005ca2:	b21b      	sxth	r3, r3
 8005ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ca8:	b21b      	sxth	r3, r3
 8005caa:	4313      	orrs	r3, r2
 8005cac:	b21b      	sxth	r3, r3
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	this->_channels[2]  = static_cast<int16_t>(_rxBuff[3] >> 6 | (_rxBuff[4] << 2 | (_rxBuff[5] << 10 & 0x07FF)));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8005cbc:	099b      	lsrs	r3, r3, #6
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	b21a      	sxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	b219      	sxth	r1, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005cd2:	029b      	lsls	r3, r3, #10
 8005cd4:	b21b      	sxth	r3, r3
 8005cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cda:	b21b      	sxth	r3, r3
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	b21b      	sxth	r3, r3
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	this->_channels[3]  = static_cast<int16_t>(_rxBuff[5] >> 1 | (_rxBuff[6] << 7 & 0x07FF));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	b21a      	sxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005cfe:	01db      	lsls	r3, r3, #7
 8005d00:	b21b      	sxth	r3, r3
 8005d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d06:	b21b      	sxth	r3, r3
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	b21b      	sxth	r3, r3
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	this->_channels[4]  = static_cast<int16_t>(_rxBuff[6] >> 4 | (_rxBuff[7] << 4 & 0x07FF));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	b21a      	sxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	b21b      	sxth	r3, r3
 8005d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d2e:	b21b      	sxth	r3, r3
 8005d30:	4313      	orrs	r3, r2
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	this->_channels[5]  = static_cast<int16_t>(_rxBuff[7] >> 7 | (_rxBuff[8] << 1 | (_rxBuff[9] << 9 & 0x07FF)));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005d42:	09db      	lsrs	r3, r3, #7
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	b21a      	sxth	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	b219      	sxth	r1, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8005d58:	025b      	lsls	r3, r3, #9
 8005d5a:	b21b      	sxth	r3, r3
 8005d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d60:	b21b      	sxth	r3, r3
 8005d62:	430b      	orrs	r3, r1
 8005d64:	b21b      	sxth	r3, r3
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b21b      	sxth	r3, r3
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	this->_channels[6]  = static_cast<int16_t>(_rxBuff[9] >> 2 | (_rxBuff[10] << 6 & 0x07FF));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8005d78:	089b      	lsrs	r3, r3, #2
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	b21a      	sxth	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005d84:	019b      	lsls	r3, r3, #6
 8005d86:	b21b      	sxth	r3, r3
 8005d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d8c:	b21b      	sxth	r3, r3
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	b21b      	sxth	r3, r3
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	this->_channels[7]  = static_cast<int16_t>(_rxBuff[10] >> 5 | (_rxBuff[11] << 3 & 0x07FF));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	b21a      	sxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	b21b      	sxth	r3, r3
 8005db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005db4:	b21b      	sxth	r3, r3
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b21b      	sxth	r3, r3
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	this->_channels[8]  = static_cast<int16_t>(_rxBuff[12] | (_rxBuff[13] << 8 & 0x07FF));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005dc8:	b21a      	sxth	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	b21b      	sxth	r3, r3
 8005dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dd8:	b21b      	sxth	r3, r3
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	b21b      	sxth	r3, r3
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	this->_channels[9]  = static_cast<int16_t>(_rxBuff[13] >> 3 | (_rxBuff[14] << 5 & 0x07FF));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005dec:	08db      	lsrs	r3, r3, #3
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	b21a      	sxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005df8:	015b      	lsls	r3, r3, #5
 8005dfa:	b21b      	sxth	r3, r3
 8005dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e00:	b21b      	sxth	r3, r3
 8005e02:	4313      	orrs	r3, r2
 8005e04:	b21b      	sxth	r3, r3
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	this->_channels[10] = static_cast<int16_t>(_rxBuff[14] >> 6 | (_rxBuff[15] << 2 | (_rxBuff[16] << 10 & 0x07FF)));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005e14:	099b      	lsrs	r3, r3, #6
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	b21a      	sxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	b219      	sxth	r1, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005e2a:	029b      	lsls	r3, r3, #10
 8005e2c:	b21b      	sxth	r3, r3
 8005e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e32:	b21b      	sxth	r3, r3
 8005e34:	430b      	orrs	r3, r1
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	this->_channels[11] = static_cast<int16_t>(_rxBuff[16] >> 1 | (_rxBuff[17] << 7 & 0x07FF));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	b21a      	sxth	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005e56:	01db      	lsls	r3, r3, #7
 8005e58:	b21b      	sxth	r3, r3
 8005e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e5e:	b21b      	sxth	r3, r3
 8005e60:	4313      	orrs	r3, r2
 8005e62:	b21b      	sxth	r3, r3
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	this->_channels[12] = static_cast<int16_t>(_rxBuff[17] >> 4 | (_rxBuff[18] << 4 & 0x07FF));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	b21a      	sxth	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e86:	b21b      	sxth	r3, r3
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	b21b      	sxth	r3, r3
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	this->_channels[13] = static_cast<int16_t>(_rxBuff[18] >> 7 | (_rxBuff[19] << 1 | (_rxBuff[20] << 9 & 0x07FF)));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8005e9a:	09db      	lsrs	r3, r3, #7
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	b21a      	sxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	b219      	sxth	r1, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005eb0:	025b      	lsls	r3, r3, #9
 8005eb2:	b21b      	sxth	r3, r3
 8005eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb8:	b21b      	sxth	r3, r3
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	b21b      	sxth	r3, r3
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	b21b      	sxth	r3, r3
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	this->_channels[14] = static_cast<int16_t>(_rxBuff[20] >> 2 | (_rxBuff[21] << 6 & 0x07FF));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ed0:	089b      	lsrs	r3, r3, #2
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	b21a      	sxth	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	b21b      	sxth	r3, r3
 8005ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ee4:	b21b      	sxth	r3, r3
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	b21b      	sxth	r3, r3
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	this->_channels[15] = static_cast<int16_t>(_rxBuff[21] >> 5 | (_rxBuff[22] << 3 & 0x07FF));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	b21a      	sxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	b21b      	sxth	r3, r3
 8005f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	b21b      	sxth	r3, r3
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	this->throttle = static_cast<float>(_channels[2]);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	this->_rawRoll = this->_channels[0];
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	this->_rawPitch = this->_channels[1];
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	this->_rawYaw = this->_channels[3];
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	if (this->_channels[4]<1000)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5c:	d204      	bcs.n	8005f68 <_ZN7FrSkyRX12updateValuesEv+0x306>
		this->_lb=0;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8005f66:	e003      	b.n	8005f70 <_ZN7FrSkyRX12updateValuesEv+0x30e>
	else
		this->_lb=1;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

	if (this->_channels[7]<1000)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8005f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f7a:	d204      	bcs.n	8005f86 <_ZN7FrSkyRX12updateValuesEv+0x324>
		this->_rb=0;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8005f84:	e003      	b.n	8005f8e <_ZN7FrSkyRX12updateValuesEv+0x32c>
	else
		this->_rb=1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

	if (this->_channels[5]<500)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8005f94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f98:	d204      	bcs.n	8005fa4 <_ZN7FrSkyRX12updateValuesEv+0x342>
		this->_lu = 0;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8005fa2:	e00f      	b.n	8005fc4 <_ZN7FrSkyRX12updateValuesEv+0x362>
	else if(this->_channels[5]<1500)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8005faa:	f240 52db 	movw	r2, #1499	; 0x5db
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d804      	bhi.n	8005fbc <_ZN7FrSkyRX12updateValuesEv+0x35a>
		this->_lu = 1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8005fba:	e003      	b.n	8005fc4 <_ZN7FrSkyRX12updateValuesEv+0x362>
	else
		this->_lu = 2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

	if (this->_channels[6]<500)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005fca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005fce:	d204      	bcs.n	8005fda <_ZN7FrSkyRX12updateValuesEv+0x378>
		this->_ru = 0;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	else if(this->_channels[6]<1500)
		this->_ru = 1;
	else
		this->_ru = 2;
}
 8005fd8:	e00f      	b.n	8005ffa <_ZN7FrSkyRX12updateValuesEv+0x398>
	else if(this->_channels[6]<1500)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005fe0:	f240 52db 	movw	r2, #1499	; 0x5db
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d804      	bhi.n	8005ff2 <_ZN7FrSkyRX12updateValuesEv+0x390>
		this->_ru = 1;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
}
 8005ff0:	e003      	b.n	8005ffa <_ZN7FrSkyRX12updateValuesEv+0x398>
		this->_ru = 2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <_ZNK7FrSkyRX14isDisconnectedEv>:

bool FrSkyRX::isDisconnected() const
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	const bool failsafe =
			(this->_rb == 0) &&
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
			(this->_ru == 0) &&
			(this->_lb == 0) &&
			(this->_lu == 0) &&
			(this->throttle > 1800) &&
			(this->_rawRoll > 1800) &&
			(this->_rawPitch > 1800) &&
 8006016:	2b00      	cmp	r3, #0
 8006018:	d12c      	bne.n	8006074 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->_ru == 0) &&
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			(this->_rb == 0) &&
 8006020:	2b00      	cmp	r3, #0
 8006022:	d127      	bne.n	8006074 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->_lb == 0) &&
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
			(this->_ru == 0) &&
 800602a:	2b00      	cmp	r3, #0
 800602c:	d122      	bne.n	8006074 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->_lu == 0) &&
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
			(this->_lb == 0) &&
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11d      	bne.n	8006074 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->throttle > 1800) &&
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
			(this->_lu == 0) &&
 800603e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006088 <_ZNK7FrSkyRX14isDisconnectedEv+0x80>
 8006042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604a:	dd13      	ble.n	8006074 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->_rawRoll > 1800) &&
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
			(this->throttle > 1800) &&
 8006052:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8006056:	d90d      	bls.n	8006074 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->_rawPitch > 1800) &&
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
			(this->_rawRoll > 1800) &&
 800605e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8006062:	d907      	bls.n	8006074 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->_rawYaw > 1800);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			(this->_rawPitch > 1800) &&
 800606a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800606e:	d901      	bls.n	8006074 <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <_ZNK7FrSkyRX14isDisconnectedEv+0x6e>
 8006074:	2300      	movs	r3, #0
	const bool failsafe =
 8006076:	73fb      	strb	r3, [r7, #15]

	return failsafe;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	44e10000 	.word	0x44e10000

0800608c <_ZN7FrSkyRX19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:

const char* FrSkyRX::getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3304      	adds	r3, #4
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(SENSOR_DATA_PARAMETER::FRSKY_THROTTLE)!=senorsList.end())
 800609e:	231a      	movs	r3, #26
 80060a0:	613b      	str	r3, [r7, #16]
 80060a2:	f107 0310 	add.w	r3, r7, #16
 80060a6:	4619      	mov	r1, r3
 80060a8:	6838      	ldr	r0, [r7, #0]
 80060aa:	f7ff f827 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 80060ae:	4603      	mov	r3, r0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	6838      	ldr	r0, [r7, #0]
 80060b4:	f7ff f83b 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 80060b8:	4603      	mov	r3, r0
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	f107 0214 	add.w	r2, r7, #20
 80060c0:	f107 030c 	add.w	r3, r7, #12
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff f83e 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01d      	beq.n	800610e <_ZN7FrSkyRX19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x82>
	{
		strcat(packet,toCharArray(this->throttle));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	1d1c      	adds	r4, r3, #4
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80060de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060e2:	ee17 1a90 	vmov	r1, s15
 80060e6:	4610      	mov	r0, r2
 80060e8:	f7fe f816 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 80060ec:	4603      	mov	r3, r0
 80060ee:	4619      	mov	r1, r3
 80060f0:	4620      	mov	r0, r4
 80060f2:	f017 fcd3 	bl	801da9c <strcat>
		strcat(packet,",");
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	1d1c      	adds	r4, r3, #4
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7fa f8c2 	bl	8000284 <strlen>
 8006100:	4603      	mov	r3, r0
 8006102:	4423      	add	r3, r4
 8006104:	4905      	ldr	r1, [pc, #20]	; (800611c <_ZN7FrSkyRX19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x90>)
 8006106:	461a      	mov	r2, r3
 8006108:	460b      	mov	r3, r1
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3304      	adds	r3, #4
}
 8006112:	4618      	mov	r0, r3
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd90      	pop	{r4, r7, pc}
 800611a:	bf00      	nop
 800611c:	0801e2b0 	.word	0x0801e2b0

08006120 <_ZN7FrSkyRX5getRUEv>:

uint8_t& FrSkyRX::getRU()
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	return this->_ru;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	33b3      	adds	r3, #179	; 0xb3
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <_ZN7FrSkyRX11getThrottleEv>:

float& FrSkyRX::getThrottle()
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
	return this->throttle;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	33bc      	adds	r3, #188	; 0xbc
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <_ZN7FrSkyRX13getTargetRollEv>:

float& FrSkyRX::getTargetRoll()
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	return this->target_roll;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	33c0      	adds	r3, #192	; 0xc0
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <_ZN7FrSkyRX14getTargetPitchEv>:

float& FrSkyRX::getTargetPitch()
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	return this->target_pitch;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	33c4      	adds	r3, #196	; 0xc4
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
      _M_reset();
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f805 	bl	80061b6 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_ZNSt15_Rb_tree_header8_M_resetEv>:
    _M_reset()
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
      _M_header._M_parent = 0;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	611a      	str	r2, [r3, #16]
    }
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f8d9 	bl	80063a4 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff ffeb 	bl	80061e2 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EEC1Ev>:
      _Rb_tree() = default;
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f8cf 	bl	80063c4 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE13_Rb_tree_implIS4_Lb1EEC1Ev>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EEC1Ev>:
      set() = default;
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff ffeb 	bl	8006216 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EEC1Ev>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZN4HC05C1EP20__UART_HandleTypeDef>:
 *      Author: DragosDarie
 */

#include "HC05.hpp"

HC05::HC05(UART_HandleTypeDef *uartPort):
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
	_uartPort {uartPort}
	,_senorsList {}
	,_USART1TxBuffer {}
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3304      	adds	r3, #4
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff ffcc 	bl	80061fc <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3310      	adds	r3, #16
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	609a      	str	r2, [r3, #8]
 8006270:	60da      	str	r2, [r3, #12]
 8006272:	611a      	str	r2, [r3, #16]
 8006274:	615a      	str	r2, [r3, #20]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3310      	adds	r3, #16
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff ffd8 	bl	8006230 <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EEC1Ev>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3328      	adds	r3, #40	; 0x28
 8006284:	2264      	movs	r2, #100	; 0x64
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f017 faab 	bl	801d7e4 <memset>
{
}
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <_ZN4HC054sendEv>:

void HC05::send()
{
 8006298:	b5b0      	push	{r4, r5, r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(_uartPort, (uint8_t*)_USART1TxBuffer, strlen(_USART1TxBuffer));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681c      	ldr	r4, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3328      	adds	r3, #40	; 0x28
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7f9 ffe8 	bl	8000284 <strlen>
 80062b4:	4603      	mov	r3, r0
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	4629      	mov	r1, r5
 80062bc:	4620      	mov	r0, r4
 80062be:	f00a fa3b 	bl	8010738 <HAL_UART_Transmit_DMA>
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bdb0      	pop	{r4, r5, r7, pc}

080062ca <_ZN4HC059addSensorEP15PrintableSensor>:
{
	HAL_UART_Transmit_DMA(_uartPort, (uint8_t*)data, len);
}

void HC05::addSensor(PrintableSensor* sen)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
	_senList.push_back(sen);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3304      	adds	r3, #4
 80062d8:	463a      	mov	r2, r7
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f886 	bl	80063ee <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <_ZN4HC0519printfSensorsValuesEv>:

void HC05::printfSensorsValues()
{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	strcpy(_USART1TxBuffer,"");
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3328      	adds	r3, #40	; 0x28
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]

	for (int i=0;i<(int)_senList.size();i++)
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	4618      	mov	r0, r3
 8006306:	f000 f897 	bl	8006438 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 800630a:	4603      	mov	r3, r0
 800630c:	461a      	mov	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4293      	cmp	r3, r2
 8006312:	bfb4      	ite	lt
 8006314:	2301      	movlt	r3, #1
 8006316:	2300      	movge	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01a      	beq.n	8006354 <_ZN4HC0519printfSensorsValuesEv+0x68>
	{
		strcat(_USART1TxBuffer,_senList[i]->getSensorValues_str(_senorsList));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3304      	adds	r3, #4
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4611      	mov	r1, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f000 f893 	bl	8006458 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>
 8006332:	4603      	mov	r3, r0
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	3110      	adds	r1, #16
 800633e:	4618      	mov	r0, r3
 8006340:	4790      	blx	r2
 8006342:	4603      	mov	r3, r0
 8006344:	4619      	mov	r1, r3
 8006346:	4620      	mov	r0, r4
 8006348:	f017 fba8 	bl	801da9c <strcat>
	for (int i=0;i<(int)_senList.size();i++)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3301      	adds	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e7d5      	b.n	8006300 <_ZN4HC0519printfSensorsValuesEv+0x14>
	}

	strcat(_USART1TxBuffer,"\n\r");
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800635a:	4620      	mov	r0, r4
 800635c:	f7f9 ff92 	bl	8000284 <strlen>
 8006360:	4603      	mov	r3, r0
 8006362:	4423      	add	r3, r4
 8006364:	4a05      	ldr	r2, [pc, #20]	; (800637c <_ZN4HC0519printfSensorsValuesEv+0x90>)
 8006366:	8811      	ldrh	r1, [r2, #0]
 8006368:	7892      	ldrb	r2, [r2, #2]
 800636a:	8019      	strh	r1, [r3, #0]
 800636c:	709a      	strb	r2, [r3, #2]

	send();
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ff92 	bl	8006298 <_ZN4HC054sendEv>
}
 8006374:	bf00      	nop
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	bd90      	pop	{r4, r7, pc}
 800637c:	0801e2b4 	.word	0x0801e2b4

08006380 <_ZN4HC0518addSensorParameterE21SENSOR_DATA_PARAMETER>:

void HC05::addSensorParameter(SENSOR_DATA_PARAMETER sen)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
 	this->_senorsList.insert(sen);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f103 0110 	add.w	r1, r3, #16
 8006390:	f107 0308 	add.w	r3, r7, #8
 8006394:	463a      	mov	r2, r7
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f86e 	bl	8006478 <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE6insertERKS0_>
}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f87d 	bl	80064ac <_ZNSaIP15PrintableSensorEC1Ev>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f885 	bl	80064c4 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE13_Rb_tree_implIS4_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f8b9 	bl	8006544 <_ZNSaISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEC1Ev>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 f8c1 	bl	800655c <_ZNSt20_Rb_tree_key_compareISt4lessI21SENSOR_DATA_PARAMETEREEC1Ev>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3304      	adds	r3, #4
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff feda 	bl	8006198 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	429a      	cmp	r2, r3
 8006402:	d00c      	beq.n	800641e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	4619      	mov	r1, r3
 800640e:	f000 f8b0 	bl	8006572 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	1d1a      	adds	r2, r3, #4
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800641c:	e008      	b.n	8006430 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f8ba 	bl	8006598 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>
 8006424:	4603      	mov	r3, r0
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f8dc 	bl	80065e8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	109b      	asrs	r3, r3, #2
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
      }
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE6insertERKS0_>:
      insert(const value_type& __x)
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
	  _M_t._M_insert_unique(__x);
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	f107 0310 	add.w	r3, r7, #16
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4618      	mov	r0, r3
 800648e:	f000 f967 	bl	8006760 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE16_M_insert_uniqueIRKS0_EESt4pairISt17_Rb_tree_iteratorIS0_EbEOT_>
	return std::pair<iterator, bool>(__p.first, __p.second);
 8006492:	f107 0310 	add.w	r3, r7, #16
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	f107 0310 	add.w	r3, r7, #16
 800649c:	4619      	mov	r1, r3
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f9ad 	bl	80067fe <_ZNSt4pairISt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETEREbEC1IRSt17_Rb_tree_iteratorIS1_ERbLb1EEEOT_OT0_>
      }
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <_ZNSaIP15PrintableSensorEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f9bd 	bl	8006834 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	605a      	str	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	609a      	str	r2, [r3, #8]
	{ }
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
	if (__p)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 f9a0 	bl	800684a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>
      }
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f996 	bl	8006868 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>
    }
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <_ZNSaISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEC1Ev>:
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f998 	bl	8006882 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEC1Ev>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <_ZNSt20_Rb_tree_key_compareISt4lessI21SENSOR_DATA_PARAMETEREEC1Ev>:
      _Rb_tree_key_compare()
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
      { }
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f98a 	bl	8006898 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 8006584:	4603      	mov	r3, r0
 8006586:	461a      	mov	r2, r3
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f98f 	bl	80068ae <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8006590:	bf00      	nop
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	f107 030c 	add.w	r3, r7, #12
 80065a8:	4611      	mov	r1, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f995 	bl	80068da <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 f805 	bl	80065d0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80065c6:	4603      	mov	r3, r0
      }
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80065d8:	2301      	movs	r3, #1
      }
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
	...

080065e8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80065e8:	b5b0      	push	{r4, r5, r7, lr}
 80065ea:	b08c      	sub	sp, #48	; 0x30
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80065f4:	4a59      	ldr	r2, [pc, #356]	; (800675c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 80065f6:	2101      	movs	r1, #1
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f97e 	bl	80068fa <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>
 80065fe:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f9bb 	bl	8006988 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>
 8006612:	4603      	mov	r3, r0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	f107 0214 	add.w	r2, r7, #20
 800661a:	f107 0308 	add.w	r3, r7, #8
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f000 f9c1 	bl	80069a8 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006626:	4603      	mov	r3, r0
 8006628:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f9cf 	bl	80069d2 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>
 8006634:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800663a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	18d5      	adds	r5, r2, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f927 	bl	8006898 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 800664a:	4603      	mov	r3, r0
 800664c:	461a      	mov	r2, r3
 800664e:	4629      	mov	r1, r5
 8006650:	4620      	mov	r0, r4
 8006652:	f7ff ff8e 	bl	8006572 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006656:	2300      	movs	r3, #0
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800665a:	f7ff ffae 	bl	80065ba <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d027      	beq.n	80066b4 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006664:	f107 0308 	add.w	r3, r7, #8
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f9da 	bl	8006a22 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800666e:	4603      	mov	r3, r0
 8006670:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff ff4c 	bl	8006512 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800667a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4621      	mov	r1, r4
 8006680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006682:	f000 f9ba 	bl	80069fa <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006686:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	3304      	adds	r3, #4
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800668e:	f107 0308 	add.w	r3, r7, #8
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f9c5 	bl	8006a22 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8006698:	4603      	mov	r3, r0
 800669a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff ff37 	bl	8006512 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80066a4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80066a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a8:	6a39      	ldr	r1, [r7, #32]
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 f9a5 	bl	80069fa <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80066b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80066b2:	e026      	b.n	8006702 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80066b4:	f107 0308 	add.w	r3, r7, #8
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f9b2 	bl	8006a22 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80066be:	4603      	mov	r3, r0
 80066c0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff ff24 	bl	8006512 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80066ca:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4621      	mov	r1, r4
 80066d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066d2:	f000 f9b1 	bl	8006a38 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 80066d6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	3304      	adds	r3, #4
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80066de:	f107 0308 	add.w	r3, r7, #8
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f99d 	bl	8006a22 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80066e8:	4603      	mov	r3, r0
 80066ea:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff ff0f 	bl	8006512 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80066f4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80066f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f8:	6a39      	ldr	r1, [r7, #32]
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 f99c 	bl	8006a38 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006700:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006702:	f7ff ff5a 	bl	80065ba <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 8006706:	4603      	mov	r3, r0
 8006708:	f083 0301 	eor.w	r3, r3, #1
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fefc 	bl	8006512 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800671a:	4603      	mov	r3, r0
 800671c:	461a      	mov	r2, r3
 800671e:	6a39      	ldr	r1, [r7, #32]
 8006720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006722:	f7ff ff01 	bl	8006528 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006726:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006732:	461a      	mov	r2, r3
 8006734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006736:	f7ff fed9 	bl	80064ec <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006744:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	441a      	add	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	609a      	str	r2, [r3, #8]
    }
 8006752:	bf00      	nop
 8006754:	3730      	adds	r7, #48	; 0x30
 8006756:	46bd      	mov	sp, r7
 8006758:	bdb0      	pop	{r4, r5, r7, pc}
 800675a:	bf00      	nop
 800675c:	0801e2b8 	.word	0x0801e2b8

08006760 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE16_M_insert_uniqueIRKS0_EESt4pairISt17_Rb_tree_iteratorIS0_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006760:	b5b0      	push	{r4, r5, r7, lr}
 8006762:	b08e      	sub	sp, #56	; 0x38
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 800676c:	f107 031c 	add.w	r3, r7, #28
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fe3f 	bl	80053f6 <_ZNKSt9_IdentityI21SENSOR_DATA_PARAMETEREclERKS0_>
 8006778:	4602      	mov	r2, r0
 800677a:	f107 0314 	add.w	r3, r7, #20
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	4618      	mov	r0, r3
 8006782:	f000 f972 	bl	8006a6a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_>
      if (__res.second)
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d022      	beq.n	80067d2 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE16_M_insert_uniqueIRKS0_EESt4pairISt17_Rb_tree_iteratorIS0_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 f9ee 	bl	8006b74 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE11_Alloc_nodeC1ERS6_>
	  return _Res(_M_insert_(__res.first, __res.second,
 8006798:	697c      	ldr	r4, [r7, #20]
 800679a:	69bd      	ldr	r5, [r7, #24]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f9f8 	bl	8006b92 <_ZSt7forwardIRK21SENSOR_DATA_PARAMETEREOT_RNSt16remove_referenceIS3_E4typeE>
 80067a2:	4602      	mov	r2, r0
 80067a4:	f107 0310 	add.w	r3, r7, #16
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4613      	mov	r3, r2
 80067ac:	462a      	mov	r2, r5
 80067ae:	4621      	mov	r1, r4
 80067b0:	68b8      	ldr	r0, [r7, #8]
 80067b2:	f000 f9f9 	bl	8006ba8 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE10_M_insert_IRKS0_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS0_EPSt18_Rb_tree_node_baseSE_OT_RT0_>
 80067b6:	4603      	mov	r3, r0
 80067b8:	623b      	str	r3, [r7, #32]
		      true);
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80067c0:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80067c4:	f107 0320 	add.w	r3, r7, #32
 80067c8:	4619      	mov	r1, r3
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fa35 	bl	8006c3a <_ZNSt4pairISt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREbEC1IS2_bLb1EEEOT_OT0_>
    }
 80067d0:	e011      	b.n	80067f6 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE16_M_insert_uniqueIRKS0_EESt4pairISt17_Rb_tree_iteratorIS0_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067d8:	4611      	mov	r1, r2
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fdee 	bl	80053bc <_ZNSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREC1EPSt18_Rb_tree_node_base>
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80067e6:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 80067ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fa22 	bl	8006c3a <_ZNSt4pairISt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREbEC1IS2_bLb1EEEOT_OT0_>
    }
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	3730      	adds	r7, #48	; 0x30
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bdb0      	pop	{r4, r5, r7, pc}

080067fe <_ZNSt4pairISt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETEREbEC1IRSt17_Rb_tree_iteratorIS1_ERbLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80067fe:	b590      	push	{r4, r7, lr}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800680a:	68fc      	ldr	r4, [r7, #12]
 800680c:	68b8      	ldr	r0, [r7, #8]
 800680e:	f000 fa2d 	bl	8006c6c <_ZSt7forwardIRSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8006812:	4603      	mov	r3, r0
 8006814:	4619      	mov	r1, r3
 8006816:	4620      	mov	r0, r4
 8006818:	f7fe fce6 	bl	80051e8 <_ZNSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETEREC1ERKSt17_Rb_tree_iteratorIS0_E>
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa30 	bl	8006c82 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8006822:	4603      	mov	r3, r0
 8006824:	781a      	ldrb	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	711a      	strb	r2, [r3, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	bd90      	pop	{r4, r7, pc}

08006834 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fa1c 	bl	8006c98 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa1f 	bl	8006cb8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>
    }
 800687a:	bf00      	nop
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEC1Ev>:
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80068ae:	b590      	push	{r4, r7, lr}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ffec 	bl	8006898 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 80068c0:	4603      	mov	r3, r0
 80068c2:	681c      	ldr	r4, [r3, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4619      	mov	r1, r3
 80068c8:	2004      	movs	r0, #4
 80068ca:	f7ff fc59 	bl	8006180 <_ZnwjPv>
 80068ce:	4603      	mov	r3, r0
 80068d0:	601c      	str	r4, [r3, #0]
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd90      	pop	{r4, r7, pc}

080068da <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80068fa:	b590      	push	{r4, r7, lr}
 80068fc:	b087      	sub	sp, #28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f9e1 	bl	8006cce <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 800690c:	4604      	mov	r4, r0
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7ff fd92 	bl	8006438 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006914:	4603      	mov	r3, r0
 8006916:	1ae2      	subs	r2, r4, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	bf34      	ite	cc
 800691e:	2301      	movcc	r3, #1
 8006920:	2300      	movcs	r3, #0
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f015 fdaa 	bl	801c482 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff fd82 	bl	8006438 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8006934:	4604      	mov	r4, r0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fd7e 	bl	8006438 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 800693c:	4603      	mov	r3, r0
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	f107 0208 	add.w	r2, r7, #8
 8006944:	f107 0310 	add.w	r3, r7, #16
 8006948:	4611      	mov	r1, r2
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f9d0 	bl	8006cf0 <_ZSt3maxIjERKT_S2_S2_>
 8006950:	4603      	mov	r3, r0
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4423      	add	r3, r4
 8006956:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff fd6d 	bl	8006438 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 800695e:	4602      	mov	r2, r0
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	4293      	cmp	r3, r2
 8006964:	d306      	bcc.n	8006974 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f9b1 	bl	8006cce <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 800696c:	4602      	mov	r2, r0
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	4293      	cmp	r3, r2
 8006972:	d904      	bls.n	800697e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f9aa 	bl	8006cce <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 800697a:	4603      	mov	r3, r0
 800697c:	e000      	b.n	8006980 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 800697e:	697b      	ldr	r3, [r7, #20]
      }
 8006980:	4618      	mov	r0, r3
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	bd90      	pop	{r4, r7, pc}

08006988 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	f107 030c 	add.w	r3, r7, #12
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff ff9e 	bl	80068da <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f835 	bl	8006a22 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80069b8:	4603      	mov	r3, r0
 80069ba:	681c      	ldr	r4, [r3, #0]
 80069bc:	6838      	ldr	r0, [r7, #0]
 80069be:	f000 f830 	bl	8006a22 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80069c2:	4603      	mov	r3, r0
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	1ae3      	subs	r3, r4, r3
 80069c8:	109b      	asrs	r3, r3, #2
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd90      	pop	{r4, r7, pc}

080069d2 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x1e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f996 	bl	8006d18 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>
 80069ec:	4603      	mov	r3, r0
 80069ee:	e000      	b.n	80069f2 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x20>
 80069f0:	2300      	movs	r3, #0
      }
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80069fa:	b590      	push	{r4, r7, lr}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af02      	add	r7, sp, #8
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	607a      	str	r2, [r7, #4]
 8006a06:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006a08:	f88d 4000 	strb.w	r4, [sp]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f98f 	bl	8006d36 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8006a18:	4603      	mov	r3, r0
      }
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd90      	pop	{r4, r7, pc}

08006a22 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006a38:	b590      	push	{r4, r7, lr}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 f987 	bl	8006d5a <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	68b8      	ldr	r0, [r7, #8]
 8006a50:	f000 f983 	bl	8006d5a <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 8006a54:	4601      	mov	r1, r0
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 f98c 	bl	8006d78 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8006a60:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd90      	pop	{r4, r7, pc}

08006a6a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006a6a:	b590      	push	{r4, r7, lr}
 8006a6c:	b08b      	sub	sp, #44	; 0x2c
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8006a76:	68b8      	ldr	r0, [r7, #8]
 8006a78:	f7fe fbd7 	bl	800522a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE8_M_beginEv>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	f7fe fbde 	bl	8005242 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_M_endEv>
 8006a86:	4603      	mov	r3, r0
 8006a88:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d020      	beq.n	8006ad8 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_+0x6e>
	  __y = __x;
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8006a9a:	68bc      	ldr	r4, [r7, #8]
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fc61 	bl	8005366 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_S_keyEPKSt13_Rb_tree_nodeIS0_E>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f7fe fc37 	bl	800531e <_ZNKSt4lessI21SENSOR_DATA_PARAMETEREclERKS0_S3_>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8006ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_+0x60>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe fc63 	bl	800538c <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE7_S_leftEPSt18_Rb_tree_node_base>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	e004      	b.n	8006ad4 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_+0x6a>
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe fc69 	bl	80053a4 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8006ad6:	e7db      	b.n	8006a90 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_+0x26>
      iterator __j = iterator(__y);
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	f107 0310 	add.w	r3, r7, #16
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe fc6b 	bl	80053bc <_ZNSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8006ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01d      	beq.n	8006b2a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_+0xc0>
	  if (__j == begin())
 8006aee:	68b8      	ldr	r0, [r7, #8]
 8006af0:	f000 f953 	bl	8006d9a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE5beginEv>
 8006af4:	4603      	mov	r3, r0
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	f107 021c 	add.w	r2, r7, #28
 8006afc:	f107 0310 	add.w	r3, r7, #16
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fbeb 	bl	80052de <_ZSteqRKSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d008      	beq.n	8006b20 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_+0xb6>
	    return _Res(__x, __y);
 8006b0e:	f107 0214 	add.w	r2, r7, #20
 8006b12:	f107 0318 	add.w	r3, r7, #24
 8006b16:	4619      	mov	r1, r3
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f94f 	bl	8006dbc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETERERS1_Lb1EEEOT_OT0_>
 8006b1e:	e025      	b.n	8006b6c <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_+0x102>
	    --__j;
 8006b20:	f107 0310 	add.w	r3, r7, #16
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 f962 	bl	8006dee <_ZNSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8006b2a:	68bc      	ldr	r4, [r7, #8]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe fbe9 	bl	8005306 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006b34:	4603      	mov	r3, r0
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f7fe fbef 	bl	800531e <_ZNKSt4lessI21SENSOR_DATA_PARAMETEREclERKS0_S3_>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_+0xee>
	return _Res(__x, __y);
 8006b46:	f107 0214 	add.w	r2, r7, #20
 8006b4a:	f107 0318 	add.w	r3, r7, #24
 8006b4e:	4619      	mov	r1, r3
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f933 	bl	8006dbc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETERERS1_Lb1EEEOT_OT0_>
 8006b56:	e009      	b.n	8006b6c <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE24_M_get_insert_unique_posERKS0_+0x102>
      return _Res(__j._M_node, 0);
 8006b58:	2300      	movs	r3, #0
 8006b5a:	623b      	str	r3, [r7, #32]
 8006b5c:	f107 0220 	add.w	r2, r7, #32
 8006b60:	f107 0310 	add.w	r3, r7, #16
 8006b64:	4619      	mov	r1, r3
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 f952 	bl	8006e10 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	372c      	adds	r7, #44	; 0x2c
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd90      	pop	{r4, r7, pc}

08006b74 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE11_Alloc_nodeC1ERS6_>:
	_Alloc_node(_Rb_tree& __t)
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <_ZSt7forwardIRK21SENSOR_DATA_PARAMETEREOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE10_M_insert_IRKS0_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS0_EPSt18_Rb_tree_node_baseSE_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006ba8:	b5b0      	push	{r4, r5, r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d11a      	bne.n	8006bf2 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE10_M_insert_IRKS0_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS0_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f7fe fb40 	bl	8005242 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_M_endEv>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE10_M_insert_IRKS0_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS0_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006bca:	68fc      	ldr	r4, [r7, #12]
 8006bcc:	f107 0310 	add.w	r3, r7, #16
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fc0f 	bl	80053f6 <_ZNKSt9_IdentityI21SENSOR_DATA_PARAMETEREclERKS0_>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fe fb93 	bl	8005306 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006be0:	4603      	mov	r3, r0
 8006be2:	461a      	mov	r2, r3
 8006be4:	4629      	mov	r1, r5
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7fe fb99 	bl	800531e <_ZNKSt4lessI21SENSOR_DATA_PARAMETEREclERKS0_S3_>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE10_M_insert_IRKS0_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS0_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x4e>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE10_M_insert_IRKS0_NS6_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS0_EPSt18_Rb_tree_node_baseSE_OT_RT0_+0x50>
 8006bf6:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006bf8:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8006bfa:	6838      	ldr	r0, [r7, #0]
 8006bfc:	f7ff ffc9 	bl	8006b92 <_ZSt7forwardIRK21SENSOR_DATA_PARAMETEREOT_RNSt16remove_referenceIS3_E4typeE>
 8006c00:	4603      	mov	r3, r0
 8006c02:	4619      	mov	r1, r3
 8006c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c06:	f000 f919 	bl	8006e3c <_ZNKSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE11_Alloc_nodeclIRKS0_EEPSt13_Rb_tree_nodeIS0_EOT_>
 8006c0a:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8006c10:	7ff8      	ldrb	r0, [r7, #31]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	69b9      	ldr	r1, [r7, #24]
 8006c16:	f015 fbd6 	bl	801c3c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8006c24:	f107 0314 	add.w	r3, r7, #20
 8006c28:	69b9      	ldr	r1, [r7, #24]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fbc6 	bl	80053bc <_ZNSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREC1EPSt18_Rb_tree_node_base>
 8006c30:	697b      	ldr	r3, [r7, #20]
      }
 8006c32:	4618      	mov	r0, r3
 8006c34:	3720      	adds	r7, #32
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bdb0      	pop	{r4, r5, r7, pc}

08006c3a <_ZNSt4pairISt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREbEC1IS2_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006c46:	68b8      	ldr	r0, [r7, #8]
 8006c48:	f000 f90c 	bl	8006e64 <_ZSt7forwardISt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS3_E4typeE>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f910 	bl	8006e7a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	711a      	strb	r2, [r3, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <_ZSt7forwardIRSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	68b8      	ldr	r0, [r7, #8]
 8006cac:	f015 fb30 	bl	801c310 <_ZdlPvj>
      }
 8006cb0:	bf00      	nop
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f90c 	bl	8006ef6 <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 f8ee 	bl	8006ec2 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d201      	bcs.n	8006d0a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	e000      	b.n	8006d0c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006d0a:	687b      	ldr	r3, [r7, #4]
    }
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006d22:	2200      	movs	r2, #0
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f8f0 	bl	8006f0c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	607a      	str	r2, [r7, #4]
 8006d42:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f8fc 	bl	8006f48 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006d50:	4603      	mov	r3, r0
      }
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006d62:	f107 030c 	add.w	r3, r7, #12
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 f90a 	bl	8006f82 <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f90b 	bl	8006fa6 <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8006d90:	4603      	mov	r3, r0
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	f107 030c 	add.w	r3, r7, #12
 8006daa:	4611      	mov	r1, r2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fe fb05 	bl	80053bc <_ZNSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREC1EPSt18_Rb_tree_node_base>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETERERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006dc8:	68b8      	ldr	r0, [r7, #8]
 8006dca:	f000 f8fe 	bl	8006fca <_ZSt7forwardIRPSt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS5_E4typeE>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f902 	bl	8006fe0 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	605a      	str	r2, [r3, #4]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <_ZNSt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f015 fae1 	bl	801c3c2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8006e00:	4602      	mov	r2, r0
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
	return *this;
 8006e06:	687b      	ldr	r3, [r7, #4]
      }
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8006e1c:	68b8      	ldr	r0, [r7, #8]
 8006e1e:	f000 f8df 	bl	8006fe0 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8006e22:	4603      	mov	r3, r0
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	605a      	str	r2, [r3, #4]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <_ZNKSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE11_Alloc_nodeclIRKS0_EEPSt13_Rb_tree_nodeIS0_EOT_>:
	  operator()(_Arg&& __arg) const
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681c      	ldr	r4, [r3, #0]
 8006e4a:	6838      	ldr	r0, [r7, #0]
 8006e4c:	f7ff fea1 	bl	8006b92 <_ZSt7forwardIRK21SENSOR_DATA_PARAMETEREOT_RNSt16remove_referenceIS3_E4typeE>
 8006e50:	4603      	mov	r3, r0
 8006e52:	4619      	mov	r1, r3
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 f8ce 	bl	8006ff6 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE14_M_create_nodeIJRKS0_EEEPSt13_Rb_tree_nodeIS0_EDpOT_>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd90      	pop	{r4, r7, pc}

08006e64 <_ZSt7forwardISt17_Rb_tree_iteratorI21SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <_ZNSt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETERE9_M_valptrEv>:
      _M_valptr()
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3310      	adds	r3, #16
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f8b6 	bl	8007024 <_ZN9__gnu_cxx16__aligned_membufI21SENSOR_DATA_PARAMETERE6_M_ptrEv>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006eca:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006ece:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f8b3 	bl	800703c <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006eda:	f107 0208 	add.w	r2, r7, #8
 8006ede:	f107 030c 	add.w	r3, r7, #12
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f8b5 	bl	8007054 <_ZSt3minIjERKT_S2_S2_>
 8006eea:	4603      	mov	r3, r0
 8006eec:	681b      	ldr	r3, [r3, #0]
      }
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f8af 	bl	800707c <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4293      	cmp	r3, r2
 8006f24:	bf8c      	ite	hi
 8006f26:	2301      	movhi	r3, #1
 8006f28:	2300      	movls	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006f30:	f015 faa4 	bl	801c47c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f015 f9eb 	bl	801c314 <_Znwj>
 8006f3e:	4603      	mov	r3, r0
      }
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006f48:	b5b0      	push	{r4, r5, r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f89c 	bl	8007094 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	68b8      	ldr	r0, [r7, #8]
 8006f60:	f000 f898 	bl	8007094 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006f64:	4605      	mov	r5, r0
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f894 	bl	8007094 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	4629      	mov	r1, r5
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 f899 	bl	80070aa <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8006f78:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bdb0      	pop	{r4, r5, r7, pc}

08006f82 <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 f8a9 	bl	80070e6 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>
 8006f94:	4603      	mov	r3, r0
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f89e 	bl	80070fc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>
 8006fc0:	4603      	mov	r3, r0
    }
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <_ZSt7forwardIRPSt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE14_M_create_nodeIJRKS0_EEEPSt13_Rb_tree_nodeIS0_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f88b 	bl	800711c <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE11_M_get_nodeEv>
 8007006:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8007008:	6838      	ldr	r0, [r7, #0]
 800700a:	f7ff fdc2 	bl	8006b92 <_ZSt7forwardIRK21SENSOR_DATA_PARAMETEREOT_RNSt16remove_referenceIS3_E4typeE>
 800700e:	4603      	mov	r3, r0
 8007010:	461a      	mov	r2, r3
 8007012:	68f9      	ldr	r1, [r7, #12]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f892 	bl	800713e <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE17_M_construct_nodeIJRKS0_EEEvPSt13_Rb_tree_nodeIS0_EDpOT_>
	  return __tmp;
 800701a:	68fb      	ldr	r3, [r7, #12]
	}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <_ZN9__gnu_cxx16__aligned_membufI21SENSOR_DATA_PARAMETERE6_M_ptrEv>:
      _M_ptr() noexcept
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f8a6 	bl	800717e <_ZN9__gnu_cxx16__aligned_membufI21SENSOR_DATA_PARAMETERE7_M_addrEv>
 8007032:	4603      	mov	r3, r0
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f8a5 	bl	8007194 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>
 800704a:	4603      	mov	r3, r0
      }
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d201      	bcs.n	800706e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	e000      	b.n	8007070 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800706e:	687b      	ldr	r3, [r7, #4]
    }
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007084:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b086      	sub	sp, #24
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
 80070b6:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	109b      	asrs	r3, r3, #2
 80070c0:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dd06      	ble.n	80070d6 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	461a      	mov	r2, r3
 80070ce:	68f9      	ldr	r1, [r7, #12]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f016 fb6d 	bl	801d7b0 <memmove>
      return __result + __count;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	4413      	add	r3, r2
    }
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f84d 	bl	80071ac <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8007112:	4603      	mov	r3, r0
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE11_M_get_nodeEv>:
      _M_get_node()
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff feb3 	bl	8006e90 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE21_M_get_Node_allocatorEv>
 800712a:	4603      	mov	r3, r0
 800712c:	2101      	movs	r1, #1
 800712e:	4618      	mov	r0, r3
 8007130:	f000 f854 	bl	80071dc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEE8allocateERS3_j>
 8007134:	4603      	mov	r3, r0
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE17_M_construct_nodeIJRKS0_EEEvPSt13_Rb_tree_nodeIS0_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800713e:	b5b0      	push	{r4, r5, r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	4619      	mov	r1, r3
 800714e:	2014      	movs	r0, #20
 8007150:	f7ff f816 	bl	8006180 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff fe9b 	bl	8006e90 <_ZNSt8_Rb_treeI21SENSOR_DATA_PARAMETERS0_St9_IdentityIS0_ESt4lessIS0_ESaIS0_EE21_M_get_Node_allocatorEv>
 800715a:	4604      	mov	r4, r0
 800715c:	68b8      	ldr	r0, [r7, #8]
 800715e:	f7ff fea2 	bl	8006ea6 <_ZNSt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETERE9_M_valptrEv>
 8007162:	4605      	mov	r5, r0
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff fd14 	bl	8006b92 <_ZSt7forwardIRK21SENSOR_DATA_PARAMETEREOT_RNSt16remove_referenceIS3_E4typeE>
 800716a:	4603      	mov	r3, r0
 800716c:	461a      	mov	r2, r3
 800716e:	4629      	mov	r1, r5
 8007170:	4620      	mov	r0, r4
 8007172:	f000 f842 	bl	80071fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEE9constructIS1_JRKS1_EEEvRS3_PT_DpOT0_>
	}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bdb0      	pop	{r4, r5, r7, pc}

0800717e <_ZN9__gnu_cxx16__aligned_membufI21SENSOR_DATA_PARAMETERE7_M_addrEv>:
      _M_addr() noexcept
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ff6d 	bl	800707c <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 80071a2:	4603      	mov	r3, r0
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f831 	bl	8007220 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80071be:	4604      	mov	r4, r0
 80071c0:	68b8      	ldr	r0, [r7, #8]
 80071c2:	f000 f82d 	bl	8007220 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80071c6:	4603      	mov	r3, r0
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4619      	mov	r1, r3
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 f838 	bl	8007242 <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 80071d2:	4603      	mov	r3, r0
    }
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd90      	pop	{r4, r7, pc}

080071dc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80071e6:	2200      	movs	r2, #0
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f84c 	bl	8007288 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREE8allocateEjPKv>
 80071f0:	4603      	mov	r3, r0
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREEE9constructIS1_JRKS1_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff fcc3 	bl	8006b92 <_ZSt7forwardIRK21SENSOR_DATA_PARAMETEREOT_RNSt16remove_referenceIS3_E4typeE>
 800720c:	4603      	mov	r3, r0
 800720e:	461a      	mov	r2, r3
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 f859 	bl	80072ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007228:	1d3b      	adds	r3, r7, #4
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f863 	bl	80072f6 <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>
 8007230:	4603      	mov	r3, r0
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f86b 	bl	800730e <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>
 8007238:	4603      	mov	r3, r0
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007242:	b5b0      	push	{r4, r5, r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7ff ff20 	bl	8007094 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8007254:	4604      	mov	r4, r0
 8007256:	68b8      	ldr	r0, [r7, #8]
 8007258:	f7ff ff1c 	bl	8007094 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 800725c:	4605      	mov	r5, r0
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff ff17 	bl	8007094 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	4629      	mov	r1, r5
 800726c:	4620      	mov	r0, r4
 800726e:	f000 f859 	bl	8007324 <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8007272:	4602      	mov	r2, r0
 8007274:	1d3b      	adds	r3, r7, #4
 8007276:	4611      	mov	r1, r2
 8007278:	4618      	mov	r0, r3
 800727a:	f000 f863 	bl	8007344 <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>
 800727e:	4603      	mov	r3, r0
    }
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bdb0      	pop	{r4, r5, r7, pc}

08007288 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f861 	bl	800735c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREE11_M_max_sizeEv>
 800729a:	4602      	mov	r2, r0
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4293      	cmp	r3, r2
 80072a0:	bf8c      	ite	hi
 80072a2:	2301      	movhi	r3, #1
 80072a4:	2300      	movls	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80072ac:	f015 f8e6 	bl	801c47c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f015 f82a 	bl	801c314 <_Znwj>
 80072c0:	4603      	mov	r3, r0
      }
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80072ca:	b590      	push	{r4, r7, lr}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fc5b 	bl	8006b92 <_ZSt7forwardIRK21SENSOR_DATA_PARAMETEREOT_RNSt16remove_referenceIS3_E4typeE>
 80072dc:	4603      	mov	r3, r0
 80072de:	681c      	ldr	r4, [r3, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4619      	mov	r1, r3
 80072e4:	2004      	movs	r0, #4
 80072e6:	f7fe ff4b 	bl	8006180 <_ZnwjPv>
 80072ea:	4603      	mov	r3, r0
 80072ec:	601c      	str	r4, [r3, #0]
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd90      	pop	{r4, r7, pc}

080072f6 <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>:
      base() const
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 f81f 	bl	8007378 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 800733a:	4603      	mov	r3, r0
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007364:	4b03      	ldr	r3, [pc, #12]	; (8007374 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeI21SENSOR_DATA_PARAMETEREE11_M_max_sizeEv+0x18>)
      }
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	06666666 	.word	0x06666666

08007378 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 f805 	bl	8007398 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>
 800738e:	4603      	mov	r3, r0
    }
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	109b      	asrs	r3, r3, #2
 80073ac:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d006      	beq.n	80073c2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	461a      	mov	r2, r3
 80073ba:	68f9      	ldr	r1, [r7, #12]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f016 f9f7 	bl	801d7b0 <memmove>
	  return __result + _Num;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4413      	add	r3, r2
	}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	ed87 0a01 	vstr	s0, [r7, #4]
 80073dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80073e0:	eef0 7ae7 	vabs.f32	s15, s15
 80073e4:	eeb0 0a67 	vmov.f32	s0, s15
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	ed87 0a01 	vstr	s0, [r7, #4]
 80073fc:	edc7 0a00 	vstr	s1, [r7]
 8007400:	edd7 0a00 	vldr	s1, [r7]
 8007404:	ed97 0a01 	vldr	s0, [r7, #4]
 8007408:	f015 f934 	bl	801c674 <atan2f>
 800740c:	eef0 7a40 	vmov.f32	s15, s0
 8007410:	eeb0 0a67 	vmov.f32	s0, s15
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	ed87 0a01 	vstr	s0, [r7, #4]
 8007424:	edd7 7a01 	vldr	s15, [r7, #4]
 8007428:	eef0 7ae7 	vabs.f32	s15, s15
 800742c:	eeb0 0a67 	vmov.f32	s0, s15
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	ed87 0a01 	vstr	s0, [r7, #4]
 8007444:	ed97 0a01 	vldr	s0, [r7, #4]
 8007448:	f015 f916 	bl	801c678 <sqrtf>
 800744c:	eef0 7a40 	vmov.f32	s15, s0
 8007450:	eeb0 0a67 	vmov.f32	s0, s15
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_>:
 */

#include "ICM42688P.hpp"
#include "Constants.hpp"

ICM42688P::ICM42688P(
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
	,_prevRawAz {0.0F}
	,_maxAxDt {0.0F}
	,_maxAyDt {0.0F}
	,_maxAzDt {0.0F}
	,_crashState {false}
	,_criticalState {false}
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4618      	mov	r0, r3
 800746e:	f7fc fe85 	bl	800417c <_ZN8SPI_ConnC1Ev>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3304      	adds	r3, #4
 8007476:	4618      	mov	r0, r3
 8007478:	f7fc fe90 	bl	800419c <_ZN15PrintableSensorC1Ev>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3340      	adds	r3, #64	; 0x40
 8007480:	4618      	mov	r0, r3
 8007482:	f7fc fea1 	bl	80041c8 <_ZN12CallsCounterC1Ev>
 8007486:	4a60      	ldr	r2, [pc, #384]	; (8007608 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1ac>)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	4a5f      	ldr	r2, [pc, #380]	; (800760c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1b0>)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	605a      	str	r2, [r3, #4]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	651a      	str	r2, [r3, #80]	; 0x50
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	655a      	str	r2, [r3, #84]	; 0x54
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	659a      	str	r2, [r3, #88]	; 0x58
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	661a      	str	r2, [r3, #96]	; 0x60
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	669a      	str	r2, [r3, #104]	; 0x68
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	66da      	str	r2, [r3, #108]	; 0x6c
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f04f 0200 	mov.w	r2, #0
 80074e6:	671a      	str	r2, [r3, #112]	; 0x70
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f04f 0200 	mov.w	r2, #0
 80074ee:	675a      	str	r2, [r3, #116]	; 0x74
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	679a      	str	r2, [r3, #120]	; 0x78
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	67da      	str	r2, [r3, #124]	; 0x7c
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4a2a      	ldr	r2, [pc, #168]	; (8007610 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1b4>)
 8007568:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a29      	ldr	r2, [pc, #164]	; (8007614 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1b8>)
 8007570:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a28      	ldr	r2, [pc, #160]	; (8007618 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1bc>)
 8007578:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a27      	ldr	r2, [pc, #156]	; (800761c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1c0>)
 8007580:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4a26      	ldr	r2, [pc, #152]	; (8007620 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1c4>)
 8007588:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4a25      	ldr	r2, [pc, #148]	; (8007624 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDefP6BuzzerR11PID_ControlS5_S5_+0x1c8>)
 8007590:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800759a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80075a4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80075ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f04f 0200 	mov.w	r2, #0
 80075c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f04f 0200 	mov.w	r2, #0
 80075cc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
{
}
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	0801e734 	.word	0x0801e734
 800760c:	0801e748 	.word	0x0801e748
 8007610:	c1400000 	.word	0xc1400000
 8007614:	c1500000 	.word	0xc1500000
 8007618:	40e00000 	.word	0x40e00000
 800761c:	4480c000 	.word	0x4480c000
 8007620:	c3f38000 	.word	0xc3f38000
 8007624:	44a0a000 	.word	0x44a0a000

08007628 <_ZN9ICM42688P11defaultInitEv>:

bool ICM42688P::defaultInit()
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af02      	add	r7, sp, #8
 800762e:	6078      	str	r0, [r7, #4]
	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 8007630:	2300      	movs	r3, #0
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	230a      	movs	r3, #10
 8007636:	2200      	movs	r2, #0
 8007638:	214d      	movs	r1, #77	; 0x4d
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f8ac 	bl	8007798 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007640:	4603      	mov	r3, r0
 8007642:	f083 0301 	eor.w	r3, r3, #1
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <_ZN9ICM42688P11defaultInitEv+0x28>
		return false;
 800764c:	2300      	movs	r3, #0
 800764e:	e09f      	b.n	8007790 <_ZN9ICM42688P11defaultInitEv+0x168>

	SPI_write(DEVICE_CONFIG,DEVICE_CONFIG_SOFT_RESET_CONFIG);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2201      	movs	r2, #1
 8007658:	2111      	movs	r1, #17
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
	HAL_Delay(20);
 800765e:	2014      	movs	r0, #20
 8007660:	f002 fbee 	bl	8009e40 <HAL_Delay>

	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 8007664:	2300      	movs	r3, #0
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	230a      	movs	r3, #10
 800766a:	2200      	movs	r2, #0
 800766c:	214d      	movs	r1, #77	; 0x4d
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f892 	bl	8007798 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007674:	4603      	mov	r3, r0
 8007676:	f083 0301 	eor.w	r3, r3, #1
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <_ZN9ICM42688P11defaultInitEv+0x5c>
		return false;
 8007680:	2300      	movs	r3, #0
 8007682:	e085      	b.n	8007790 <_ZN9ICM42688P11defaultInitEv+0x168>

	if (!initAndCheck(INT_CONFIG0,INT_CONFIG0_UI_DRDY_INT_CLEAR_ONSENSORREGREAD,10))
 8007684:	2300      	movs	r3, #0
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	230a      	movs	r3, #10
 800768a:	2220      	movs	r2, #32
 800768c:	2163      	movs	r1, #99	; 0x63
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f882 	bl	8007798 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007694:	4603      	mov	r3, r0
 8007696:	f083 0301 	eor.w	r3, r3, #1
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <_ZN9ICM42688P11defaultInitEv+0x7c>
		return false;
 80076a0:	2300      	movs	r3, #0
 80076a2:	e075      	b.n	8007790 <_ZN9ICM42688P11defaultInitEv+0x168>

	if (!initAndCheck(INT_CONFIG,INT_CONFIG_INT1_POLARITY_ACTIVE_HIGH|INT_CONFIG_INT1_DRIVE_CIRCUIT_PUSH_PULL,10))
 80076a4:	2300      	movs	r3, #0
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	230a      	movs	r3, #10
 80076aa:	2203      	movs	r2, #3
 80076ac:	2114      	movs	r1, #20
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f872 	bl	8007798 <_ZN9ICM42688P12initAndCheckEhhhb>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f083 0301 	eor.w	r3, r3, #1
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <_ZN9ICM42688P11defaultInitEv+0x9c>
		return false;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e065      	b.n	8007790 <_ZN9ICM42688P11defaultInitEv+0x168>

	if (!initAndCheck(INT_SOURCE0,INT_SOURCE0_UI_DRDY_INT1_EN,10))
 80076c4:	2300      	movs	r3, #0
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	230a      	movs	r3, #10
 80076ca:	2208      	movs	r2, #8
 80076cc:	2165      	movs	r1, #101	; 0x65
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f862 	bl	8007798 <_ZN9ICM42688P12initAndCheckEhhhb>
 80076d4:	4603      	mov	r3, r0
 80076d6:	f083 0301 	eor.w	r3, r3, #1
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <_ZN9ICM42688P11defaultInitEv+0xbc>
		return false;
 80076e0:	2300      	movs	r3, #0
 80076e2:	e055      	b.n	8007790 <_ZN9ICM42688P11defaultInitEv+0x168>

	if (!initAndCheck(GYRO_CONFIG_STATIC2,0b11,10))
 80076e4:	2300      	movs	r3, #0
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	230a      	movs	r3, #10
 80076ea:	2203      	movs	r2, #3
 80076ec:	210b      	movs	r1, #11
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f852 	bl	8007798 <_ZN9ICM42688P12initAndCheckEhhhb>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f083 0301 	eor.w	r3, r3, #1
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <_ZN9ICM42688P11defaultInitEv+0xdc>
		return false;
 8007700:	2300      	movs	r3, #0
 8007702:	e045      	b.n	8007790 <_ZN9ICM42688P11defaultInitEv+0x168>

	if (!initAndCheck(GYRO_CONFIG0,GYRO_CONFIG0_GYRO_ODR_1KHZ|GYRO_CONFIG0_GYRO_FS_SEL_2000DPS,10))
 8007704:	2300      	movs	r3, #0
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	230a      	movs	r3, #10
 800770a:	2206      	movs	r2, #6
 800770c:	214f      	movs	r1, #79	; 0x4f
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f842 	bl	8007798 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007714:	4603      	mov	r3, r0
 8007716:	f083 0301 	eor.w	r3, r3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <_ZN9ICM42688P11defaultInitEv+0xfc>
		return false;
 8007720:	2300      	movs	r3, #0
 8007722:	e035      	b.n	8007790 <_ZN9ICM42688P11defaultInitEv+0x168>

	if (!initAndCheck(ACCEL_CONFIG0,ACCEL_CONFIG0_ACCEL_ODR_1KHZ|ACCEL_CONFIG0_ACCEL_FS_SEL_4G,10))
 8007724:	2300      	movs	r3, #0
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	230a      	movs	r3, #10
 800772a:	2246      	movs	r2, #70	; 0x46
 800772c:	2150      	movs	r1, #80	; 0x50
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f832 	bl	8007798 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007734:	4603      	mov	r3, r0
 8007736:	f083 0301 	eor.w	r3, r3, #1
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <_ZN9ICM42688P11defaultInitEv+0x11c>
		return false;
 8007740:	2300      	movs	r3, #0
 8007742:	e025      	b.n	8007790 <_ZN9ICM42688P11defaultInitEv+0x168>

	if (!initAndCheck(PWR_MGMT0,0x0F,10))
 8007744:	2300      	movs	r3, #0
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	230a      	movs	r3, #10
 800774a:	220f      	movs	r2, #15
 800774c:	214e      	movs	r1, #78	; 0x4e
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f822 	bl	8007798 <_ZN9ICM42688P12initAndCheckEhhhb>
 8007754:	4603      	mov	r3, r0
 8007756:	f083 0301 	eor.w	r3, r3, #1
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <_ZN9ICM42688P11defaultInitEv+0x13c>
		return false;
 8007760:	2300      	movs	r3, #0
 8007762:	e015      	b.n	8007790 <_ZN9ICM42688P11defaultInitEv+0x168>

	HAL_Delay(50);
 8007764:	2032      	movs	r0, #50	; 0x32
 8007766:	f002 fb6b 	bl	8009e40 <HAL_Delay>

	this->update();
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa7c 	bl	8007c68 <_ZN9ICM42688P6updateEv>
	this->_eulerX = this->_ay;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	this->_eulerY = this->_ax;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	this->_eulerZ = this->_az;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	return true;
 800778e:	2301      	movs	r3, #1
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <_ZN9ICM42688P12initAndCheckEhhhb>:

bool ICM42688P::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	4608      	mov	r0, r1
 80077a2:	4611      	mov	r1, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	70fb      	strb	r3, [r7, #3]
 80077aa:	460b      	mov	r3, r1
 80077ac:	70bb      	strb	r3, [r7, #2]
 80077ae:	4613      	mov	r3, r2
 80077b0:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	787b      	ldrb	r3, [r7, #1]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	da21      	bge.n	8007802 <_ZN9ICM42688P12initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 80077be:	7e3b      	ldrb	r3, [r7, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d106      	bne.n	80077d2 <_ZN9ICM42688P12initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	78ba      	ldrb	r2, [r7, #2]
 80077cc:	78f9      	ldrb	r1, [r7, #3]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
		if (SPI_read(addr)==val)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3304      	adds	r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	4611      	mov	r1, r2
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
 80077e2:	4603      	mov	r3, r0
 80077e4:	461a      	mov	r2, r3
 80077e6:	78bb      	ldrb	r3, [r7, #2]
 80077e8:	4293      	cmp	r3, r2
 80077ea:	bf0c      	ite	eq
 80077ec:	2301      	moveq	r3, #1
 80077ee:	2300      	movne	r3, #0
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <_ZN9ICM42688P12initAndCheckEhhhb+0x62>
			return true;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e004      	b.n	8007804 <_ZN9ICM42688P12initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3301      	adds	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	e7d9      	b.n	80077b6 <_ZN9ICM42688P12initAndCheckEhhhb+0x1e>
	}
	return false;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:

const char* ICM42688P::getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b09f      	sub	sp, #124	; 0x7c
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3308      	adds	r3, #8
 800781a:	2200      	movs	r2, #0
 800781c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(SENSOR_DATA_PARAMETER::ICM_RAW_GX)!=senorsList.end())
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	f107 0310 	add.w	r3, r7, #16
 8007826:	4619      	mov	r1, r3
 8007828:	6838      	ldr	r0, [r7, #0]
 800782a:	f7fd fc67 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 800782e:	4603      	mov	r3, r0
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	6838      	ldr	r0, [r7, #0]
 8007834:	f7fd fc7b 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8007838:	4603      	mov	r3, r0
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	f107 0214 	add.w	r2, r7, #20
 8007840:	f107 030c 	add.w	r3, r7, #12
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fd fc7e 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d020      	beq.n	8007894 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x88>
	{
		strcat(packet,toCharArray(_eulerX));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f103 0408 	add.w	r4, r3, #8
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	1d1a      	adds	r2, r3, #4
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007866:	ee17 1a90 	vmov	r1, s15
 800786a:	4610      	mov	r0, r2
 800786c:	f7fc fc54 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8007870:	4603      	mov	r3, r0
 8007872:	4619      	mov	r1, r3
 8007874:	4620      	mov	r0, r4
 8007876:	f016 f911 	bl	801da9c <strcat>
		strcat(packet,",");
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f103 0408 	add.w	r4, r3, #8
 8007880:	4620      	mov	r0, r4
 8007882:	f7f8 fcff 	bl	8000284 <strlen>
 8007886:	4603      	mov	r3, r0
 8007888:	4423      	add	r3, r4
 800788a:	49d2      	ldr	r1, [pc, #840]	; (8007bd4 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3c8>)
 800788c:	461a      	mov	r2, r3
 800788e:	460b      	mov	r3, r1
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::ICM_RAW_GY)!=senorsList.end())
 8007894:	2301      	movs	r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
 8007898:	f107 031c 	add.w	r3, r7, #28
 800789c:	4619      	mov	r1, r3
 800789e:	6838      	ldr	r0, [r7, #0]
 80078a0:	f7fd fc2c 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 80078a4:	4603      	mov	r3, r0
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	6838      	ldr	r0, [r7, #0]
 80078aa:	f7fd fc40 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 80078ae:	4603      	mov	r3, r0
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	f107 0220 	add.w	r2, r7, #32
 80078b6:	f107 0318 	add.w	r3, r7, #24
 80078ba:	4611      	mov	r1, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fd fc43 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d020      	beq.n	800790a <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0xfe>
	{
		strcat(packet,toCharArray(_eulerY));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f103 0408 	add.w	r4, r3, #8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	1d1a      	adds	r2, r3, #4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80078d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078dc:	ee17 1a90 	vmov	r1, s15
 80078e0:	4610      	mov	r0, r2
 80078e2:	f7fc fc19 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 80078e6:	4603      	mov	r3, r0
 80078e8:	4619      	mov	r1, r3
 80078ea:	4620      	mov	r0, r4
 80078ec:	f016 f8d6 	bl	801da9c <strcat>
		strcat(packet,",");
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f103 0408 	add.w	r4, r3, #8
 80078f6:	4620      	mov	r0, r4
 80078f8:	f7f8 fcc4 	bl	8000284 <strlen>
 80078fc:	4603      	mov	r3, r0
 80078fe:	4423      	add	r3, r4
 8007900:	49b4      	ldr	r1, [pc, #720]	; (8007bd4 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3c8>)
 8007902:	461a      	mov	r2, r3
 8007904:	460b      	mov	r3, r1
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::ICM_RAW_GZ)!=senorsList.end())
 800790a:	2302      	movs	r3, #2
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28
 800790e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007912:	4619      	mov	r1, r3
 8007914:	6838      	ldr	r0, [r7, #0]
 8007916:	f7fd fbf1 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 800791a:	4603      	mov	r3, r0
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
 800791e:	6838      	ldr	r0, [r7, #0]
 8007920:	f7fd fc05 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8007924:	4603      	mov	r3, r0
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007928:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800792c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007930:	4611      	mov	r1, r2
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd fc08 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d020      	beq.n	8007980 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x174>
	{
		strcat(packet,toCharArray(_eulerZ));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f103 0408 	add.w	r4, r3, #8
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1d1a      	adds	r2, r3, #4
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800794e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007952:	ee17 1a90 	vmov	r1, s15
 8007956:	4610      	mov	r0, r2
 8007958:	f7fc fbde 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 800795c:	4603      	mov	r3, r0
 800795e:	4619      	mov	r1, r3
 8007960:	4620      	mov	r0, r4
 8007962:	f016 f89b 	bl	801da9c <strcat>
		strcat(packet,",");
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f103 0408 	add.w	r4, r3, #8
 800796c:	4620      	mov	r0, r4
 800796e:	f7f8 fc89 	bl	8000284 <strlen>
 8007972:	4603      	mov	r3, r0
 8007974:	4423      	add	r3, r4
 8007976:	4997      	ldr	r1, [pc, #604]	; (8007bd4 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3c8>)
 8007978:	461a      	mov	r2, r3
 800797a:	460b      	mov	r3, r1
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::ICM_RAW_AX)!=senorsList.end())
 8007980:	2306      	movs	r3, #6
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
 8007984:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007988:	4619      	mov	r1, r3
 800798a:	6838      	ldr	r0, [r7, #0]
 800798c:	f7fd fbb6 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8007990:	4603      	mov	r3, r0
 8007992:	633b      	str	r3, [r7, #48]	; 0x30
 8007994:	6838      	ldr	r0, [r7, #0]
 8007996:	f7fd fbca 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 800799a:	4603      	mov	r3, r0
 800799c:	63bb      	str	r3, [r7, #56]	; 0x38
 800799e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80079a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fd fbcd 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d022      	beq.n	80079fa <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x1ee>
	{
		strcat(packet,toCharArray(-_ax));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f103 0408 	add.w	r4, r3, #8
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	1d1a      	adds	r2, r3, #4
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80079c4:	eef1 7a67 	vneg.f32	s15, s15
 80079c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079cc:	ee17 1a90 	vmov	r1, s15
 80079d0:	4610      	mov	r0, r2
 80079d2:	f7fc fba1 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 80079d6:	4603      	mov	r3, r0
 80079d8:	4619      	mov	r1, r3
 80079da:	4620      	mov	r0, r4
 80079dc:	f016 f85e 	bl	801da9c <strcat>
		strcat(packet,",");
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f103 0408 	add.w	r4, r3, #8
 80079e6:	4620      	mov	r0, r4
 80079e8:	f7f8 fc4c 	bl	8000284 <strlen>
 80079ec:	4603      	mov	r3, r0
 80079ee:	4423      	add	r3, r4
 80079f0:	4978      	ldr	r1, [pc, #480]	; (8007bd4 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3c8>)
 80079f2:	461a      	mov	r2, r3
 80079f4:	460b      	mov	r3, r1
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::ICM_RAW_AY)!=senorsList.end())
 80079fa:	2307      	movs	r3, #7
 80079fc:	643b      	str	r3, [r7, #64]	; 0x40
 80079fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a02:	4619      	mov	r1, r3
 8007a04:	6838      	ldr	r0, [r7, #0]
 8007a06:	f7fd fb79 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a0e:	6838      	ldr	r0, [r7, #0]
 8007a10:	f7fd fb8d 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8007a14:	4603      	mov	r3, r0
 8007a16:	647b      	str	r3, [r7, #68]	; 0x44
 8007a18:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007a1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fd fb90 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d020      	beq.n	8007a70 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x264>
	{
		strcat(packet,toCharArray(_ay));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f103 0408 	add.w	r4, r3, #8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	1d1a      	adds	r2, r3, #4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8007a3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a42:	ee17 1a90 	vmov	r1, s15
 8007a46:	4610      	mov	r0, r2
 8007a48:	f7fc fb66 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4620      	mov	r0, r4
 8007a52:	f016 f823 	bl	801da9c <strcat>
		strcat(packet,",");
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f103 0408 	add.w	r4, r3, #8
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f7f8 fc11 	bl	8000284 <strlen>
 8007a62:	4603      	mov	r3, r0
 8007a64:	4423      	add	r3, r4
 8007a66:	495b      	ldr	r1, [pc, #364]	; (8007bd4 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3c8>)
 8007a68:	461a      	mov	r2, r3
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::ICM_RAW_AZ)!=senorsList.end())
 8007a70:	2308      	movs	r3, #8
 8007a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6838      	ldr	r0, [r7, #0]
 8007a7c:	f7fd fb3e 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8007a80:	4603      	mov	r3, r0
 8007a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a84:	6838      	ldr	r0, [r7, #0]
 8007a86:	f7fd fb52 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	653b      	str	r3, [r7, #80]	; 0x50
 8007a8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007a92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007a96:	4611      	mov	r1, r2
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fd fb55 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d020      	beq.n	8007ae6 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x2da>
	{
		strcat(packet,toCharArray(_az));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f103 0408 	add.w	r4, r3, #8
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	1d1a      	adds	r2, r3, #4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8007ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ab8:	ee17 1a90 	vmov	r1, s15
 8007abc:	4610      	mov	r0, r2
 8007abe:	f7fc fb2b 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f015 ffe8 	bl	801da9c <strcat>
		strcat(packet,",");
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f103 0408 	add.w	r4, r3, #8
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7f8 fbd6 	bl	8000284 <strlen>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	4423      	add	r3, r4
 8007adc:	493d      	ldr	r1, [pc, #244]	; (8007bd4 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3c8>)
 8007ade:	461a      	mov	r2, r3
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::ICM_AX)!=senorsList.end())
 8007ae6:	2309      	movs	r3, #9
 8007ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007aea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007aee:	4619      	mov	r1, r3
 8007af0:	6838      	ldr	r0, [r7, #0]
 8007af2:	f7fd fb03 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8007af6:	4603      	mov	r3, r0
 8007af8:	657b      	str	r3, [r7, #84]	; 0x54
 8007afa:	6838      	ldr	r0, [r7, #0]
 8007afc:	f7fd fb17 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8007b00:	4603      	mov	r3, r0
 8007b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b04:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007b08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fd fb1a 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d020      	beq.n	8007b5c <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x350>
	{
		strcat(packet,toCharArray(_maxAxDt));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f103 0408 	add.w	r4, r3, #8
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	1d1a      	adds	r2, r3, #4
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8007b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b2e:	ee17 1a90 	vmov	r1, s15
 8007b32:	4610      	mov	r0, r2
 8007b34:	f7fc faf0 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f015 ffad 	bl	801da9c <strcat>
		strcat(packet,",");
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f103 0408 	add.w	r4, r3, #8
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f7f8 fb9b 	bl	8000284 <strlen>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4423      	add	r3, r4
 8007b52:	4920      	ldr	r1, [pc, #128]	; (8007bd4 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3c8>)
 8007b54:	461a      	mov	r2, r3
 8007b56:	460b      	mov	r3, r1
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::ICM_AY)!=senorsList.end())
 8007b5c:	230a      	movs	r3, #10
 8007b5e:	667b      	str	r3, [r7, #100]	; 0x64
 8007b60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007b64:	4619      	mov	r1, r3
 8007b66:	6838      	ldr	r0, [r7, #0]
 8007b68:	f7fd fac8 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8007b70:	6838      	ldr	r0, [r7, #0]
 8007b72:	f7fd fadc 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8007b76:	4603      	mov	r3, r0
 8007b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b7a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007b7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007b82:	4611      	mov	r1, r2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fd fadf 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d023      	beq.n	8007bd8 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3cc>
	{
		strcat(packet,toCharArray(_maxAyDt));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f103 0408 	add.w	r4, r3, #8
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8007ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ba4:	ee17 1a90 	vmov	r1, s15
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7fc fab5 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f015 ff72 	bl	801da9c <strcat>
		strcat(packet,",");
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f103 0408 	add.w	r4, r3, #8
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7f8 fb60 	bl	8000284 <strlen>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	4423      	add	r3, r4
 8007bc8:	4902      	ldr	r1, [pc, #8]	; (8007bd4 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3c8>)
 8007bca:	461a      	mov	r2, r3
 8007bcc:	460b      	mov	r3, r1
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	8013      	strh	r3, [r2, #0]
 8007bd2:	e001      	b.n	8007bd8 <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x3cc>
 8007bd4:	0801e2d4 	.word	0x0801e2d4
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::ICM_AZ)!=senorsList.end())
 8007bd8:	230b      	movs	r3, #11
 8007bda:	673b      	str	r3, [r7, #112]	; 0x70
 8007bdc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007be0:	4619      	mov	r1, r3
 8007be2:	6838      	ldr	r0, [r7, #0]
 8007be4:	f7fd fa8a 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8007be8:	4603      	mov	r3, r0
 8007bea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bec:	6838      	ldr	r0, [r7, #0]
 8007bee:	f7fd fa9e 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	677b      	str	r3, [r7, #116]	; 0x74
 8007bf6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8007bfa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd faa1 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d020      	beq.n	8007c4e <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x442>
	{
		strcat(packet,toCharArray(_maxAzDt));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f103 0408 	add.w	r4, r3, #8
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	1d1a      	adds	r2, r3, #4
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8007c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c20:	ee17 1a90 	vmov	r1, s15
 8007c24:	4610      	mov	r0, r2
 8007c26:	f7fc fa77 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f015 ff34 	bl	801da9c <strcat>
		strcat(packet,",");
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f103 0408 	add.w	r4, r3, #8
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f7f8 fb22 	bl	8000284 <strlen>
 8007c40:	4603      	mov	r3, r0
 8007c42:	4423      	add	r3, r4
 8007c44:	4905      	ldr	r1, [pc, #20]	; (8007c5c <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x450>)
 8007c46:	461a      	mov	r2, r3
 8007c48:	460b      	mov	r3, r1
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3308      	adds	r3, #8
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	377c      	adds	r7, #124	; 0x7c
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd90      	pop	{r4, r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	0801e2d4 	.word	0x0801e2d4

08007c60 <_ZThn4_N9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:
	void computeGyroDrift(uint32_t count);
	void computeAccOffset(uint32_t count);
	void calibrate(uint32_t count);
	bool isCriticalStateDetected();
	bool isCrashDetected();
	const char* getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList);
 8007c60:	f1a0 0004 	sub.w	r0, r0, #4
 8007c64:	f7ff bdd2 	b.w	800780c <_ZN9ICM42688P19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>

08007c68 <_ZN9ICM42688P6updateEv>:

void ICM42688P::update()
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	uint8_t axL = SPI_read(ACCEL_DATA_X0);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3304      	adds	r3, #4
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2120      	movs	r1, #32
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]
	uint8_t axH = SPI_read(ACCEL_DATA_X1);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3304      	adds	r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	211f      	movs	r1, #31
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
 8007c90:	4603      	mov	r3, r0
 8007c92:	75bb      	strb	r3, [r7, #22]
	uint8_t ayL = SPI_read(ACCEL_DATA_Y0);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2122      	movs	r1, #34	; 0x22
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	757b      	strb	r3, [r7, #21]
	uint8_t ayH = SPI_read(ACCEL_DATA_Y1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3304      	adds	r3, #4
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2121      	movs	r1, #33	; 0x21
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	753b      	strb	r3, [r7, #20]
	uint8_t azL = SPI_read(ACCEL_DATA_Z0);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2124      	movs	r1, #36	; 0x24
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	74fb      	strb	r3, [r7, #19]
	uint8_t azH = SPI_read(ACCEL_DATA_Z1);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2123      	movs	r1, #35	; 0x23
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
 8007cd8:	4603      	mov	r3, r0
 8007cda:	74bb      	strb	r3, [r7, #18]

	uint8_t gxL = SPI_read(GYRO_DATA_X0);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2126      	movs	r1, #38	; 0x26
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
 8007cea:	4603      	mov	r3, r0
 8007cec:	747b      	strb	r3, [r7, #17]
	uint8_t gxH = SPI_read(GYRO_DATA_X1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2125      	movs	r1, #37	; 0x25
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	743b      	strb	r3, [r7, #16]
	uint8_t gyL = SPI_read(GYRO_DATA_Y0);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3304      	adds	r3, #4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2128      	movs	r1, #40	; 0x28
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
	uint8_t gyH = SPI_read(GYRO_DATA_Y1);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3304      	adds	r3, #4
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2127      	movs	r1, #39	; 0x27
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
 8007d20:	4603      	mov	r3, r0
 8007d22:	73bb      	strb	r3, [r7, #14]
	uint8_t gzL = SPI_read(GYRO_DATA_Z0);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	212a      	movs	r1, #42	; 0x2a
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4798      	blx	r3
 8007d32:	4603      	mov	r3, r0
 8007d34:	737b      	strb	r3, [r7, #13]
	uint8_t gzH = SPI_read(GYRO_DATA_Z1);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2129      	movs	r1, #41	; 0x29
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
 8007d44:	4603      	mov	r3, r0
 8007d46:	733b      	strb	r3, [r7, #12]

	uint8_t tempL = SPI_read(TEMP_DATA0);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	211e      	movs	r1, #30
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	72fb      	strb	r3, [r7, #11]
	uint8_t tempH = SPI_read(TEMP_DATA1);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	211d      	movs	r1, #29
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
 8007d68:	4603      	mov	r3, r0
 8007d6a:	72bb      	strb	r3, [r7, #10]

	this->_rawAx = (static_cast<float>(((int16_t)(((int16_t)axH<<8) | axL))) - this->_axOffset);// * this->axScale;
 8007d6c:	7dbb      	ldrb	r3, [r7, #22]
 8007d6e:	021b      	lsls	r3, r3, #8
 8007d70:	b21a      	sxth	r2, r3
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	b21b      	sxth	r3, r3
 8007d76:	4313      	orrs	r3, r2
 8007d78:	b21b      	sxth	r3, r3
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8007d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	this->_rawAy = (static_cast<float>(((int16_t)(((int16_t)ayH<<8) | ayL))) - this->_ayOffset);// * this->ayScale;
 8007d92:	7d3b      	ldrb	r3, [r7, #20]
 8007d94:	021b      	lsls	r3, r3, #8
 8007d96:	b21a      	sxth	r2, r3
 8007d98:	7d7b      	ldrb	r3, [r7, #21]
 8007d9a:	b21b      	sxth	r3, r3
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	b21b      	sxth	r3, r3
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8007dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	this->_rawAz = (static_cast<float>(((int16_t)(((int16_t)azH<<8) | azL))) - this->_azOffset);// * this->azScale;
 8007db8:	7cbb      	ldrb	r3, [r7, #18]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	b21a      	sxth	r2, r3
 8007dbe:	7cfb      	ldrb	r3, [r7, #19]
 8007dc0:	b21b      	sxth	r3, r3
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	b21b      	sxth	r3, r3
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8007dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	this->_rawGx = static_cast<float>((int16_t)(((int16_t)gxH<<8) | gxL)) - this->_gxDrift;
 8007dde:	7c3b      	ldrb	r3, [r7, #16]
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	b21a      	sxth	r2, r3
 8007de4:	7c7b      	ldrb	r3, [r7, #17]
 8007de6:	b21b      	sxth	r3, r3
 8007de8:	4313      	orrs	r3, r2
 8007dea:	b21b      	sxth	r3, r3
 8007dec:	ee07 3a90 	vmov	s15, r3
 8007df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8007dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	this->_rawGy = static_cast<float>((int16_t)(((int16_t)gyH<<8) | gyL)) - this->_gyDrift;
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	b21a      	sxth	r2, r3
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	b21b      	sxth	r3, r3
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	b21b      	sxth	r3, r3
 8007e12:	ee07 3a90 	vmov	s15, r3
 8007e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8007e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	this->_rawGz = static_cast<float>((int16_t)(((int16_t)gzH<<8) | gzL)) - this->_gzDrift;
 8007e2a:	7b3b      	ldrb	r3, [r7, #12]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	b21a      	sxth	r2, r3
 8007e30:	7b7b      	ldrb	r3, [r7, #13]
 8007e32:	b21b      	sxth	r3, r3
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8007e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	this->_temp = static_cast<float>((int16_t)(((int16_t)tempH<<8) | tempL)) / 132.48F + 25.0F;
 8007e50:	7abb      	ldrb	r3, [r7, #10]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	b21a      	sxth	r2, r3
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	b21b      	sxth	r3, r3
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	b21b      	sxth	r3, r3
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e66:	eddf 6a13 	vldr	s13, [pc, #76]	; 8007eb4 <_ZN9ICM42688P6updateEv+0x24c>
 8007e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e6e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

	this->toEuler();
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f917 	bl	80080b0 <_ZN9ICM42688P7toEulerEv>

	this->checkCrashState();
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f84a 	bl	8007f1c <_ZN9ICM42688P15checkCrashStateEv>
	this->checkCriticalState();
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f815 	bl	8007eb8 <_ZN9ICM42688P18checkCriticalStateEv>

	this->_rollPID.update();
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 fa33 	bl	80092fe <_ZN11PID_Control6updateEv>
	this->_pitchPID.update();
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fa2e 	bl	80092fe <_ZN11PID_Control6updateEv>
	this->_yawPID.update();
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 fa29 	bl	80092fe <_ZN11PID_Control6updateEv>
}
 8007eac:	bf00      	nop
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	43047ae1 	.word	0x43047ae1

08007eb8 <_ZN9ICM42688P18checkCriticalStateEv>:

void ICM42688P::checkCriticalState()
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	if (abs(this->_eulerX) >=criticalStateAngleThreshold || abs(this->_eulerY) >=criticalStateAngleThreshold)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8007eca:	f7ff fa82 	bl	80073d2 <_ZSt3absf>
 8007ece:	eef0 7a40 	vmov.f32	s15, s0
 8007ed2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ede:	da0f      	bge.n	8007f00 <_ZN9ICM42688P18checkCriticalStateEv+0x48>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8007ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8007eea:	f7ff fa72 	bl	80073d2 <_ZSt3absf>
 8007eee:	eef0 7a40 	vmov.f32	s15, s0
 8007ef2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efe:	db01      	blt.n	8007f04 <_ZN9ICM42688P18checkCriticalStateEv+0x4c>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e000      	b.n	8007f06 <_ZN9ICM42688P18checkCriticalStateEv+0x4e>
 8007f04:	2300      	movs	r3, #0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <_ZN9ICM42688P18checkCriticalStateEv+0x5a>
	{
		this->_criticalState = true;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	}
}
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <_ZN9ICM42688P15checkCrashStateEv>:

void ICM42688P::checkCrashState()
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	if (this->_prevRawAx == 0.0F)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8007f2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f32:	d105      	bne.n	8007f40 <_ZN9ICM42688P15checkCrashStateEv+0x24>
		this->_prevRawAx = this->_rawAx;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	if (this->_prevRawAy == 0.0F)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8007f46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4e:	d105      	bne.n	8007f5c <_ZN9ICM42688P15checkCrashStateEv+0x40>
		this->_prevRawAy = this->_rawAy;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	if (this->_prevRawAz == 0.0F)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8007f62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6a:	d105      	bne.n	8007f78 <_ZN9ICM42688P15checkCrashStateEv+0x5c>
		this->_prevRawAz = this->_rawAz;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	float ax_dt = fabs(this->_rawAx-this->_prevRawAx);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8007f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f88:	eeb0 0a67 	vmov.f32	s0, s15
 8007f8c:	f7ff fa45 	bl	800741a <_ZSt4fabsf>
 8007f90:	ed87 0a05 	vstr	s0, [r7, #20]
	float ay_dt = fabs(this->_rawAy-this->_prevRawAy);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8007fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8007fa8:	f7ff fa37 	bl	800741a <_ZSt4fabsf>
 8007fac:	ed87 0a04 	vstr	s0, [r7, #16]
	float az_dt = fabs(this->_rawAz-this->_prevRawAz);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8007fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8007fc4:	f7ff fa29 	bl	800741a <_ZSt4fabsf>
 8007fc8:	ed87 0a03 	vstr	s0, [r7, #12]

	if (ax_dt > constCrashAccDtThreshold ||
 8007fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8007fd0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800808c <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fdc:	dc11      	bgt.n	8008002 <_ZN9ICM42688P15checkCrashStateEv+0xe6>
 8007fde:	edd7 7a04 	vldr	s15, [r7, #16]
 8007fe2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800808c <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fee:	dc08      	bgt.n	8008002 <_ZN9ICM42688P15checkCrashStateEv+0xe6>
			ay_dt > constCrashAccDtThreshold ||
 8007ff0:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ff4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800808c <_ZN9ICM42688P15checkCrashStateEv+0x170>
 8007ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008000:	dd03      	ble.n	800800a <_ZN9ICM42688P15checkCrashStateEv+0xee>
			az_dt > constCrashAccDtThreshold)
	{
		this->_crashState = true;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	}

	if (ax_dt > _maxAxDt)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8008010:	ed97 7a05 	vldr	s14, [r7, #20]
 8008014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801c:	dd03      	ble.n	8008026 <_ZN9ICM42688P15checkCrashStateEv+0x10a>
		_maxAxDt = ax_dt;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	if (ay_dt > _maxAyDt)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800802c:	ed97 7a04 	vldr	s14, [r7, #16]
 8008030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008038:	dd03      	ble.n	8008042 <_ZN9ICM42688P15checkCrashStateEv+0x126>
		_maxAyDt = ay_dt;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	if (az_dt > _maxAzDt)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8008048:	ed97 7a03 	vldr	s14, [r7, #12]
 800804c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008054:	dd03      	ble.n	800805e <_ZN9ICM42688P15checkCrashStateEv+0x142>
		_maxAzDt = az_dt;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	this->_prevRawAx=this->_rawAx;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->_prevRawAy=this->_rawAy;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	this->_prevRawAz=this->_rawAz;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 8008082:	bf00      	nop
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	471c4000 	.word	0x471c4000

08008090 <_ZN9ICM42688P23isCriticalStateDetectedEv>:

bool ICM42688P::isCriticalStateDetected()
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
	return this->_criticalState;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	0000      	movs	r0, r0
 80080ac:	0000      	movs	r0, r0
	...

080080b0 <_ZN9ICM42688P7toEulerEv>:
	return this->_crashState;
}


void ICM42688P::toEuler()
{
 80080b0:	b5b0      	push	{r4, r5, r7, lr}
 80080b2:	ed2d 8b02 	vpush	{d8}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	this->_gx = this->_gx + this->_rawGx*(DT/GYRO_FULLSCALE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80080c8:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8008338 <_ZN9ICM42688P7toEulerEv+0x288>
 80080cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	this->_gy = this->_gy + this->_rawGy*(DT/GYRO_FULLSCALE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80080e6:	eddf 6a94 	vldr	s13, [pc, #592]	; 8008338 <_ZN9ICM42688P7toEulerEv+0x288>
 80080ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	this->_gz = this->_gz + this->_rawGz*(DT/GYRO_FULLSCALE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8008104:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8008338 <_ZN9ICM42688P7toEulerEv+0x288>
 8008108:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800810c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	this->_eulerX = this->_eulerX + this->_rawGx*(DT/GYRO_FULLSCALE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8008122:	eddf 6a85 	vldr	s13, [pc, #532]	; 8008338 <_ZN9ICM42688P7toEulerEv+0x288>
 8008126:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800812a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	this->_eulerY = this->_eulerY + this->_rawGy*(DT/GYRO_FULLSCALE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8008140:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8008338 <_ZN9ICM42688P7toEulerEv+0x288>
 8008144:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->_eulerZ = this->_eulerZ + this->_rawGz*(DT/GYRO_FULLSCALE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800815e:	eddf 6a76 	vldr	s13, [pc, #472]	; 8008338 <_ZN9ICM42688P7toEulerEv+0x288>
 8008162:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

	this->_ax = atan2(this->_rawAx,sqrt(this->_rawAy*this->_rawAy + this->_rawAz*this->_rawAz))*RADIANS_TO_DEGREES;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	ed93 8a23 	vldr	s16, [r3, #140]	; 0x8c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8008182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8008192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800819a:	eeb0 0a67 	vmov.f32	s0, s15
 800819e:	f7ff f94c 	bl	800743a <_ZSt4sqrtf>
 80081a2:	eef0 7a40 	vmov.f32	s15, s0
 80081a6:	eef0 0a67 	vmov.f32	s1, s15
 80081aa:	eeb0 0a48 	vmov.f32	s0, s16
 80081ae:	f7ff f920 	bl	80073f2 <_ZSt5atan2ff>
 80081b2:	eef0 7a40 	vmov.f32	s15, s0
 80081b6:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800833c <_ZN9ICM42688P7toEulerEv+0x28c>
 80081ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	this->_ay = atan2(this->_rawAy,sqrt(this->_rawAx*this->_rawAx + this->_rawAz*this->_rawAz))*RADIANS_TO_DEGREES;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	ed93 8a24 	vldr	s16, [r3, #144]	; 0x90
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80081d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80081e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80081ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081ee:	eeb0 0a67 	vmov.f32	s0, s15
 80081f2:	f7ff f922 	bl	800743a <_ZSt4sqrtf>
 80081f6:	eef0 7a40 	vmov.f32	s15, s0
 80081fa:	eef0 0a67 	vmov.f32	s1, s15
 80081fe:	eeb0 0a48 	vmov.f32	s0, s16
 8008202:	f7ff f8f6 	bl	80073f2 <_ZSt5atan2ff>
 8008206:	eef0 7a40 	vmov.f32	s15, s0
 800820a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800833c <_ZN9ICM42688P7toEulerEv+0x28c>
 800820e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	this->_az = atan2(this->_rawAz,sqrt(this->_rawAx*this->_rawAx + this->_rawAy*this->_rawAy))*RADIANS_TO_DEGREES -90.0F;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	ed93 8a25 	vldr	s16, [r3, #148]	; 0x94
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800822a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800823a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800823e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008242:	eeb0 0a67 	vmov.f32	s0, s15
 8008246:	f7ff f8f8 	bl	800743a <_ZSt4sqrtf>
 800824a:	eef0 7a40 	vmov.f32	s15, s0
 800824e:	eef0 0a67 	vmov.f32	s1, s15
 8008252:	eeb0 0a48 	vmov.f32	s0, s16
 8008256:	f7ff f8cc 	bl	80073f2 <_ZSt5atan2ff>
 800825a:	eef0 7a40 	vmov.f32	s15, s0
 800825e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800833c <_ZN9ICM42688P7toEulerEv+0x28c>
 8008262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008266:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008340 <_ZN9ICM42688P7toEulerEv+0x290>
 800826a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

	this->_eulerX = this->_eulerX*0.9999+this->_ay*0.0001;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800827a:	4618      	mov	r0, r3
 800827c:	f7f8 f96e 	bl	800055c <__aeabi_f2d>
 8008280:	a329      	add	r3, pc, #164	; (adr r3, 8008328 <_ZN9ICM42688P7toEulerEv+0x278>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	f7f8 f9c1 	bl	800060c <__aeabi_dmul>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4614      	mov	r4, r2
 8008290:	461d      	mov	r5, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008296:	4618      	mov	r0, r3
 8008298:	f7f8 f960 	bl	800055c <__aeabi_f2d>
 800829c:	a324      	add	r3, pc, #144	; (adr r3, 8008330 <_ZN9ICM42688P7toEulerEv+0x280>)
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f7f8 f9b3 	bl	800060c <__aeabi_dmul>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4620      	mov	r0, r4
 80082ac:	4629      	mov	r1, r5
 80082ae:	f7f7 fff7 	bl	80002a0 <__adddf3>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4610      	mov	r0, r2
 80082b8:	4619      	mov	r1, r3
 80082ba:	f7f8 fc7f 	bl	8000bbc <__aeabi_d2f>
 80082be:	4602      	mov	r2, r0
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	this->_eulerY = this->_eulerY*0.9999-this->_ax*0.0001;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7f8 f945 	bl	800055c <__aeabi_f2d>
 80082d2:	a315      	add	r3, pc, #84	; (adr r3, 8008328 <_ZN9ICM42688P7toEulerEv+0x278>)
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	f7f8 f998 	bl	800060c <__aeabi_dmul>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4614      	mov	r4, r2
 80082e2:	461d      	mov	r5, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7f8 f937 	bl	800055c <__aeabi_f2d>
 80082ee:	a310      	add	r3, pc, #64	; (adr r3, 8008330 <_ZN9ICM42688P7toEulerEv+0x280>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f8 f98a 	bl	800060c <__aeabi_dmul>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4620      	mov	r0, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	f7f7 ffcc 	bl	800029c <__aeabi_dsub>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4610      	mov	r0, r2
 800830a:	4619      	mov	r1, r3
 800830c:	f7f8 fc56 	bl	8000bbc <__aeabi_d2f>
 8008310:	4602      	mov	r2, r0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8008318:	bf00      	nop
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	ecbd 8b02 	vpop	{d8}
 8008322:	bdb0      	pop	{r4, r5, r7, pc}
 8008324:	f3af 8000 	nop.w
 8008328:	48e8a71e 	.word	0x48e8a71e
 800832c:	3fefff2e 	.word	0x3fefff2e
 8008330:	eb1c432d 	.word	0xeb1c432d
 8008334:	3f1a36e2 	.word	0x3f1a36e2
 8008338:	38800000 	.word	0x38800000
 800833c:	42652ee1 	.word	0x42652ee1
 8008340:	42b40000 	.word	0x42b40000

08008344 <_ZN9ICM42688P9getEulerXEv>:
	this->computeAccOffset(count);
	this->_buzz->beep(200U,100U,1U);
}

float ICM42688P::getEulerX()
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	return this->_eulerX;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008352:	ee07 3a90 	vmov	s15, r3
}
 8008356:	eeb0 0a67 	vmov.f32	s0, s15
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <_ZN9ICM42688P12getEulerXrefEv>:

float& ICM42688P::getEulerXref()
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
	return this->_eulerX;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	339c      	adds	r3, #156	; 0x9c
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <_ZN9ICM42688P9getEulerYEv>:

float ICM42688P::getEulerY()
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	return this->_eulerY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800838a:	ee07 3a90 	vmov	s15, r3
}
 800838e:	eeb0 0a67 	vmov.f32	s0, s15
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <_ZN9ICM42688P12getEulerYrefEv>:

float& ICM42688P::getEulerYref()
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
	return this->_eulerY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	33a0      	adds	r3, #160	; 0xa0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <_ZN9ICM42688P12getEulerZrefEv>:
{
	return this->_eulerZ;
}

float& ICM42688P::getEulerZref()
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	return this->_eulerZ;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	33a4      	adds	r3, #164	; 0xa4
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <_ZN9ICM42688P9SPI_writeEhh>:
{
	return this->SPI_read(INT_STATUS);
}

void ICM42688P::SPI_write(uint8_t reg,uint8_t data)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
 80083d8:	4613      	mov	r3, r2
 80083da:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_RESET);
 80083dc:	2200      	movs	r2, #0
 80083de:	2120      	movs	r1, #32
 80083e0:	480d      	ldr	r0, [pc, #52]	; (8008418 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 80083e2:	f003 f9a5 	bl	800b730 <HAL_GPIO_WritePin>
	this->_spiTxBuff[0] = reg;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	78fa      	ldrb	r2, [r7, #3]
 80083ea:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	this->_spiTxBuff[1] = data;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	78ba      	ldrb	r2, [r7, #2]
 80083f2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	HAL_SPI_Transmit_DMA(_spiPort, (uint8_t*)_spiTxBuff,2);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3364      	adds	r3, #100	; 0x64
 80083fe:	2202      	movs	r2, #2
 8008400:	4619      	mov	r1, r3
 8008402:	f006 fb4d 	bl	800eaa0 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_SET);
 8008406:	2201      	movs	r2, #1
 8008408:	2120      	movs	r1, #32
 800840a:	4803      	ldr	r0, [pc, #12]	; (8008418 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 800840c:	f003 f990 	bl	800b730 <HAL_GPIO_WritePin>
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	40020800 	.word	0x40020800

0800841c <_ZN9ICM42688P8SPI_readEh>:

uint8_t ICM42688P::SPI_read(uint8_t reg)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_RESET);
 8008428:	2200      	movs	r2, #0
 800842a:	2120      	movs	r1, #32
 800842c:	4812      	ldr	r0, [pc, #72]	; (8008478 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 800842e:	f003 f97f 	bl	800b730 <HAL_GPIO_WritePin>
	this->_spiTxBuff[0]=reg|0x80;
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008438:	b2da      	uxtb	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	HAL_SPI_Transmit_DMA(this->_spiPort, (uint8_t*)_spiTxBuff, 1);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3364      	adds	r3, #100	; 0x64
 8008448:	2201      	movs	r2, #1
 800844a:	4619      	mov	r1, r3
 800844c:	f006 fb28 	bl	800eaa0 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(this->_spiPort, (uint8_t*)_spiRxBuff, 1);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3366      	adds	r3, #102	; 0x66
 8008458:	2201      	movs	r2, #1
 800845a:	4619      	mov	r1, r3
 800845c:	f006 fbd6 	bl	800ec0c <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_SET);
 8008460:	2201      	movs	r2, #1
 8008462:	2120      	movs	r1, #32
 8008464:	4804      	ldr	r0, [pc, #16]	; (8008478 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 8008466:	f003 f963 	bl	800b730 <HAL_GPIO_WritePin>

	return this->_spiRxBuff[0];
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	40020800 	.word	0x40020800

0800847c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "LIS3MDLTR.hpp"

LIS3MDLTR::LIS3MDLTR(SPI_HandleTypeDef* spiPort):
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
	,_zMag {0}
	,_zAngle {0}
	,_xRaw {0}
	,_yRaw {0}
	,_zRaw {0}
	,_temp {0}
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4618      	mov	r0, r3
 800848a:	f7fb fe77 	bl	800417c <_ZN8SPI_ConnC1Ev>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3304      	adds	r3, #4
 8008492:	4618      	mov	r0, r3
 8008494:	f7fb fe82 	bl	800419c <_ZN15PrintableSensorC1Ev>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3340      	adds	r3, #64	; 0x40
 800849c:	4618      	mov	r0, r3
 800849e:	f7fb fe93 	bl	80041c8 <_ZN12CallsCounterC1Ev>
 80084a2:	4a1f      	ldr	r2, [pc, #124]	; (8008520 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0xa4>)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	4a1e      	ldr	r2, [pc, #120]	; (8008524 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0xa8>)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	605a      	str	r2, [r3, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	651a      	str	r2, [r3, #80]	; 0x50
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	659a      	str	r2, [r3, #88]	; 0x58
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f04f 0200 	mov.w	r2, #0
 80084e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	661a      	str	r2, [r3, #96]	; 0x60
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f04f 0200 	mov.w	r2, #0
 80084f2:	665a      	str	r2, [r3, #100]	; 0x64
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
{
}
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	0801e754 	.word	0x0801e754
 8008524:	0801e768 	.word	0x0801e768

08008528 <_ZN9LIS3MDLTR6updateEv>:
{
	return SPI_read(LIS_WHO_AM_I);
}

void LIS3MDLTR::update()
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
	uint8_t x_high=SPI_read(OUT_X_H);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3304      	adds	r3, #4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2129      	movs	r1, #41	; 0x29
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]
	uint8_t x_low=SPI_read(OUT_X_L);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3304      	adds	r3, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2128      	movs	r1, #40	; 0x28
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
 8008550:	4603      	mov	r3, r0
 8008552:	73bb      	strb	r3, [r7, #14]
	uint8_t y_high=SPI_read(OUT_Y_H);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3304      	adds	r3, #4
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	212b      	movs	r1, #43	; 0x2b
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
 8008562:	4603      	mov	r3, r0
 8008564:	737b      	strb	r3, [r7, #13]
	uint8_t y_low=SPI_read(OUT_Y_L);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3304      	adds	r3, #4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	212a      	movs	r1, #42	; 0x2a
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
 8008574:	4603      	mov	r3, r0
 8008576:	733b      	strb	r3, [r7, #12]
	uint8_t z_high=SPI_read(OUT_Z_H);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3304      	adds	r3, #4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	212d      	movs	r1, #45	; 0x2d
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
 8008586:	4603      	mov	r3, r0
 8008588:	72fb      	strb	r3, [r7, #11]
	uint8_t z_low=SPI_read(OUT_Z_L);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3304      	adds	r3, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	212c      	movs	r1, #44	; 0x2c
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
 8008598:	4603      	mov	r3, r0
 800859a:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_high=SPI_read(TEMP_OUT_H);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3304      	adds	r3, #4
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	212f      	movs	r1, #47	; 0x2f
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	727b      	strb	r3, [r7, #9]
	uint8_t temp_low=SPI_read(TEMP_OUT_L);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3304      	adds	r3, #4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	212e      	movs	r1, #46	; 0x2e
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
 80085bc:	4603      	mov	r3, r0
 80085be:	723b      	strb	r3, [r7, #8]

	this->_xRaw = ((int16_t)x_high)<<8 | x_low;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	b21a      	sxth	r2, r3
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	b21b      	sxth	r3, r3
 80085ca:	4313      	orrs	r3, r2
 80085cc:	b21a      	sxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	this->_yRaw = ((int16_t)y_high)<<8 | y_low;
 80085d4:	7b7b      	ldrb	r3, [r7, #13]
 80085d6:	021b      	lsls	r3, r3, #8
 80085d8:	b21a      	sxth	r2, r3
 80085da:	7b3b      	ldrb	r3, [r7, #12]
 80085dc:	b21b      	sxth	r3, r3
 80085de:	4313      	orrs	r3, r2
 80085e0:	b21a      	sxth	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	this->_zRaw = ((int16_t)z_high)<<8 | z_low;
 80085e8:	7afb      	ldrb	r3, [r7, #11]
 80085ea:	021b      	lsls	r3, r3, #8
 80085ec:	b21a      	sxth	r2, r3
 80085ee:	7abb      	ldrb	r3, [r7, #10]
 80085f0:	b21b      	sxth	r3, r3
 80085f2:	4313      	orrs	r3, r2
 80085f4:	b21a      	sxth	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	this->_temp = ((int16_t)temp_high)<<8 | temp_low;
 80085fc:	7a7b      	ldrb	r3, [r7, #9]
 80085fe:	021b      	lsls	r3, r3, #8
 8008600:	b21a      	sxth	r2, r3
 8008602:	7a3b      	ldrb	r3, [r7, #8]
 8008604:	b21b      	sxth	r3, r3
 8008606:	4313      	orrs	r3, r2
 8008608:	b21a      	sxth	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
 8008610:	bf00      	nop
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:

const char* LIS3MDLTR::getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList)
{
 8008618:	b590      	push	{r4, r7, lr}
 800861a:	b08d      	sub	sp, #52	; 0x34
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3308      	adds	r3, #8
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(SENSOR_DATA_PARAMETER::LIS_RAW_MAG_X)!=senorsList.end())
 800862a:	2310      	movs	r3, #16
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	f107 0310 	add.w	r3, r7, #16
 8008632:	4619      	mov	r1, r3
 8008634:	6838      	ldr	r0, [r7, #0]
 8008636:	f7fc fd61 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 800863a:	4603      	mov	r3, r0
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	6838      	ldr	r0, [r7, #0]
 8008640:	f7fc fd75 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8008644:	4603      	mov	r3, r0
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	f107 0214 	add.w	r2, r7, #20
 800864c:	f107 030c 	add.w	r3, r7, #12
 8008650:	4611      	mov	r1, r2
 8008652:	4618      	mov	r0, r3
 8008654:	f7fc fd78 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d01d      	beq.n	800869a <_ZN9LIS3MDLTR19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x82>
	{
		strcat(packet,toCharArray(_xRaw));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f103 0408 	add.w	r4, r3, #8
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	1d1a      	adds	r2, r3, #4
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f7fb fd51 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8008676:	4603      	mov	r3, r0
 8008678:	4619      	mov	r1, r3
 800867a:	4620      	mov	r0, r4
 800867c:	f015 fa0e 	bl	801da9c <strcat>
		strcat(packet,",");
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f103 0408 	add.w	r4, r3, #8
 8008686:	4620      	mov	r0, r4
 8008688:	f7f7 fdfc 	bl	8000284 <strlen>
 800868c:	4603      	mov	r3, r0
 800868e:	4423      	add	r3, r4
 8008690:	493d      	ldr	r1, [pc, #244]	; (8008788 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x170>)
 8008692:	461a      	mov	r2, r3
 8008694:	460b      	mov	r3, r1
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Y)!=senorsList.end())
 800869a:	2311      	movs	r3, #17
 800869c:	61fb      	str	r3, [r7, #28]
 800869e:	f107 031c 	add.w	r3, r7, #28
 80086a2:	4619      	mov	r1, r3
 80086a4:	6838      	ldr	r0, [r7, #0]
 80086a6:	f7fc fd29 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 80086aa:	4603      	mov	r3, r0
 80086ac:	61bb      	str	r3, [r7, #24]
 80086ae:	6838      	ldr	r0, [r7, #0]
 80086b0:	f7fc fd3d 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 80086b4:	4603      	mov	r3, r0
 80086b6:	623b      	str	r3, [r7, #32]
 80086b8:	f107 0220 	add.w	r2, r7, #32
 80086bc:	f107 0318 	add.w	r3, r7, #24
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fc fd40 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d01d      	beq.n	800870a <_ZN9LIS3MDLTR19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0xf2>
	{
		strcat(packet,toCharArray(_yRaw));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f103 0408 	add.w	r4, r3, #8
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f7fb fd19 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 80086e6:	4603      	mov	r3, r0
 80086e8:	4619      	mov	r1, r3
 80086ea:	4620      	mov	r0, r4
 80086ec:	f015 f9d6 	bl	801da9c <strcat>
		strcat(packet,",");
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f103 0408 	add.w	r4, r3, #8
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7f7 fdc4 	bl	8000284 <strlen>
 80086fc:	4603      	mov	r3, r0
 80086fe:	4423      	add	r3, r4
 8008700:	4921      	ldr	r1, [pc, #132]	; (8008788 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x170>)
 8008702:	461a      	mov	r2, r3
 8008704:	460b      	mov	r3, r1
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Z)!=senorsList.end())
 800870a:	2312      	movs	r3, #18
 800870c:	62bb      	str	r3, [r7, #40]	; 0x28
 800870e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008712:	4619      	mov	r1, r3
 8008714:	6838      	ldr	r0, [r7, #0]
 8008716:	f7fc fcf1 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 800871a:	4603      	mov	r3, r0
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
 800871e:	6838      	ldr	r0, [r7, #0]
 8008720:	f7fc fd05 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8008724:	4603      	mov	r3, r0
 8008726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008728:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800872c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f7fc fd08 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d01d      	beq.n	800877a <_ZN9LIS3MDLTR19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x162>
	{
		strcat(packet,toCharArray(_zRaw));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f103 0408 	add.w	r4, r3, #8
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	1d1a      	adds	r2, r3, #4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800874e:	4619      	mov	r1, r3
 8008750:	4610      	mov	r0, r2
 8008752:	f7fb fce1 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8008756:	4603      	mov	r3, r0
 8008758:	4619      	mov	r1, r3
 800875a:	4620      	mov	r0, r4
 800875c:	f015 f99e 	bl	801da9c <strcat>
		strcat(packet,",");
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f103 0408 	add.w	r4, r3, #8
 8008766:	4620      	mov	r0, r4
 8008768:	f7f7 fd8c 	bl	8000284 <strlen>
 800876c:	4603      	mov	r3, r0
 800876e:	4423      	add	r3, r4
 8008770:	4905      	ldr	r1, [pc, #20]	; (8008788 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x170>)
 8008772:	461a      	mov	r2, r3
 8008774:	460b      	mov	r3, r1
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	8013      	strh	r3, [r2, #0]
	}


	return packet;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3308      	adds	r3, #8
}
 800877e:	4618      	mov	r0, r3
 8008780:	3734      	adds	r7, #52	; 0x34
 8008782:	46bd      	mov	sp, r7
 8008784:	bd90      	pop	{r4, r7, pc}
 8008786:	bf00      	nop
 8008788:	0801e2d8 	.word	0x0801e2d8

0800878c <_ZThn4_N9LIS3MDLTR19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:
	void update();
	int16_t getX();
	int16_t getY();
	int16_t getZ();
	int16_t getTemp();
	const char* getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList);
 800878c:	f1a0 0004 	sub.w	r0, r0, #4
 8008790:	f7ff bf42 	b.w	8008618 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>

08008794 <_ZN9LIS3MDLTR11defaultInitEv>:

bool LIS3MDLTR::defaultInit()
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	  this->SPI_write(CTRL_REG1,0b11111100);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	22fc      	movs	r2, #252	; 0xfc
 80087a4:	2120      	movs	r1, #32
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
	  uint8_t ctrl1 = this->SPI_read(CTRL_REG1);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3304      	adds	r3, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2120      	movs	r1, #32
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]

	  SPI_write(CTRL_REG2,0b01100000);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2260      	movs	r2, #96	; 0x60
 80087c4:	2121      	movs	r1, #33	; 0x21
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
	  uint8_t ctrl2 = SPI_read(CTRL_REG2);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3304      	adds	r3, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2121      	movs	r1, #33	; 0x21
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	4798      	blx	r3
 80087d8:	4603      	mov	r3, r0
 80087da:	73bb      	strb	r3, [r7, #14]

	  SPI_write(CTRL_REG3,0b00000000);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2200      	movs	r2, #0
 80087e4:	2122      	movs	r1, #34	; 0x22
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	4798      	blx	r3
	  uint8_t ctrl3 = SPI_read(CTRL_REG3);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3304      	adds	r3, #4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2122      	movs	r1, #34	; 0x22
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	4798      	blx	r3
 80087f8:	4603      	mov	r3, r0
 80087fa:	737b      	strb	r3, [r7, #13]

	  SPI_write(CTRL_REG4,0b00001100);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	220c      	movs	r2, #12
 8008804:	2123      	movs	r1, #35	; 0x23
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	4798      	blx	r3
	  uint8_t ctrl4 = SPI_read(CTRL_REG4);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3304      	adds	r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2123      	movs	r1, #35	; 0x23
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	4798      	blx	r3
 8008818:	4603      	mov	r3, r0
 800881a:	733b      	strb	r3, [r7, #12]

	  SPI_write(CTRL_REG5,0b00000000);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2200      	movs	r2, #0
 8008824:	2124      	movs	r1, #36	; 0x24
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	4798      	blx	r3
	  uint8_t ctrl5 = SPI_read(CTRL_REG5);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3304      	adds	r3, #4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2124      	movs	r1, #36	; 0x24
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	4798      	blx	r3
 8008838:	4603      	mov	r3, r0
 800883a:	72fb      	strb	r3, [r7, #11]
		return false;

	if (!initAndCheck(CTRL_REG5,0b00000000,10))
		return false;*/

	return true;
 800883c:	2301      	movs	r3, #1
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
	...

08008848 <_ZN9LIS3MDLTR9SPI_writeEhh>:
	}
	return false;
}

void LIS3MDLTR::SPI_write(uint8_t reg,uint8_t data)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
 8008854:	4613      	mov	r3, r2
 8008856:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_RESET);
 8008858:	2200      	movs	r2, #0
 800885a:	2120      	movs	r1, #32
 800885c:	480f      	ldr	r0, [pc, #60]	; (800889c <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 800885e:	f002 ff67 	bl	800b730 <HAL_GPIO_WritePin>
	_spiTxBuff[0] = reg & 0x7f;
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008868:	b2da      	uxtb	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	_spiTxBuff[1] = data;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	78ba      	ldrb	r2, [r7, #2]
 8008874:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_SPI_Transmit_DMA(_spiPort, (uint8_t*)_spiTxBuff,2);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3354      	adds	r3, #84	; 0x54
 8008880:	2202      	movs	r2, #2
 8008882:	4619      	mov	r1, r3
 8008884:	f006 f90c 	bl	800eaa0 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_SET);
 8008888:	2201      	movs	r2, #1
 800888a:	2120      	movs	r1, #32
 800888c:	4803      	ldr	r0, [pc, #12]	; (800889c <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 800888e:	f002 ff4f 	bl	800b730 <HAL_GPIO_WritePin>
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	40020000 	.word	0x40020000

080088a0 <_ZN9LIS3MDLTR8SPI_readEh>:

uint8_t LIS3MDLTR::SPI_read(uint8_t reg)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_RESET);
 80088ac:	2200      	movs	r2, #0
 80088ae:	2120      	movs	r1, #32
 80088b0:	4812      	ldr	r0, [pc, #72]	; (80088fc <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 80088b2:	f002 ff3d 	bl	800b730 <HAL_GPIO_WritePin>
	_spiTxBuff[0]=(reg & 0x3f)|0x80|0x40;
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	HAL_SPI_Transmit_DMA(_spiPort, (uint8_t*)_spiTxBuff, 1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3354      	adds	r3, #84	; 0x54
 80088cc:	2201      	movs	r2, #1
 80088ce:	4619      	mov	r1, r3
 80088d0:	f006 f8e6 	bl	800eaa0 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(_spiPort, (uint8_t*)_spiRxBuff, 1);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3356      	adds	r3, #86	; 0x56
 80088dc:	2201      	movs	r2, #1
 80088de:	4619      	mov	r1, r3
 80088e0:	f006 f994 	bl	800ec0c <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_SET);
 80088e4:	2201      	movs	r2, #1
 80088e6:	2120      	movs	r1, #32
 80088e8:	4804      	ldr	r0, [pc, #16]	; (80088fc <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 80088ea:	f002 ff21 	bl	800b730 <HAL_GPIO_WritePin>

	return _spiRxBuff[0];
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	40020000 	.word	0x40020000

08008900 <_ZN7Timeout19resetTimeoutCounterEv>:
	void resetTimeoutCounter()
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
		timeout_counter=0;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	705a      	strb	r2, [r3, #1]
	}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
	...

0800891c <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 */

#include "MB1043.hpp"
#include <stdlib.h>

MB1043::MB1043(
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	70fb      	strb	r3, [r7, #3]
	_uartPort {uartPort}
	,_uartPortDMA {uartPortDMA}
	,_wrongDataReceived {false}
	,_rxBuff {}
	,_distanceStr {}
	,_distance {}
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3336      	adds	r3, #54	; 0x36
 800892e:	4618      	mov	r0, r3
 8008930:	f7fc ff81 	bl	8005836 <_ZN7TimeoutC1Ev>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fb fc30 	bl	800419c <_ZN15PrintableSensorC1Ev>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3340      	adds	r3, #64	; 0x40
 8008940:	4618      	mov	r0, r3
 8008942:	f7fb fc41 	bl	80041c8 <_ZN12CallsCounterC1Ev>
 8008946:	4a17      	ldr	r2, [pc, #92]	; (80089a4 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x88>)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2252      	movs	r2, #82	; 0x52
 8008950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	220d      	movs	r2, #13
 8008958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	655a      	str	r2, [r3, #84]	; 0x54
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	659a      	str	r2, [r3, #88]	; 0x58
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	335d      	adds	r3, #93	; 0x5d
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	605a      	str	r2, [r3, #4]
 800897a:	609a      	str	r2, [r3, #8]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3369      	adds	r3, #105	; 0x69
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
{
	setTimeoutValue(timeout);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3336      	adds	r3, #54	; 0x36
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f7fc ff3f 	bl	8005818 <_ZN7Timeout15setTimeoutValueEh>
}
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	0801e774 	.word	0x0801e774

080089a8 <_ZN6MB10435beginEv>:

void MB1043::begin()
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->_uartPort, this->_rxBuff, this->packetLength);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	335d      	adds	r3, #93	; 0x5d
 80089b8:	2206      	movs	r2, #6
 80089ba:	4619      	mov	r1, r3
 80089bc:	f007 ff3a 	bl	8010834 <HAL_UART_Receive_DMA>
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <_ZN6MB10436updateEv>:

void MB1043::update()
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->_rxBuff[0] == this->BEGIN_BIT) && (this->_rxBuff[5]==this->END_BIT);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089dc:	429a      	cmp	r2, r3
 80089de:	d109      	bne.n	80089f4 <_ZN6MB10436updateEv+0x2c>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d101      	bne.n	80089f4 <_ZN6MB10436updateEv+0x2c>
 80089f0:	2301      	movs	r3, #1
 80089f2:	e000      	b.n	80089f6 <_ZN6MB10436updateEv+0x2e>
 80089f4:	2300      	movs	r3, #0
 80089f6:	73bb      	strb	r3, [r7, #14]

	if (isPacketOk)
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d027      	beq.n	8008a4e <_ZN6MB10436updateEv+0x86>
	{
		_distanceStr[0]=_rxBuff[1];
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		_distanceStr[1]=_rxBuff[2],
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		_distanceStr[2]=_rxBuff[3],
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
		_distanceStr[3]=_rxBuff[4];
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

		_distance = atoi(_distanceStr);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3369      	adds	r3, #105	; 0x69
 8008a32:	4618      	mov	r0, r3
 8008a34:	f014 fe70 	bl	801d718 <atoi>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		resetTimeoutCounter();
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3336      	adds	r3, #54	; 0x36
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff ff5a 	bl	8008900 <_ZN7Timeout19resetTimeoutCounterEv>
 8008a4c:	e033      	b.n	8008ab6 <_ZN6MB10436updateEv+0xee>
	}
	else if (this->_wrongDataReceived==false)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d12e      	bne.n	8008ab6 <_ZN6MB10436updateEv+0xee>
	{
		for (uint8_t iter=0;iter<this->packetLength-1U;iter++)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d829      	bhi.n	8008ab6 <_ZN6MB10436updateEv+0xee>
		{
			if ((this->_rxBuff[iter]==this->END_BIT) && (this->_rxBuff[iter+1U]==this->BEGIN_BIT))
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	4413      	add	r3, r2
 8008a68:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d11b      	bne.n	8008aae <_ZN6MB10436updateEv+0xe6>
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d110      	bne.n	8008aae <_ZN6MB10436updateEv+0xe6>
			{
				HAL_UART_Receive_DMA (this->_uartPort, this->_rxBuff, this->packetLength+iter+1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f103 015d 	add.w	r1, r3, #93	; 0x5d
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3307      	adds	r3, #7
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f007 fec8 	bl	8010834 <HAL_UART_Receive_DMA>
				this->_wrongDataReceived = true;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				return;
 8008aac:	e01e      	b.n	8008aec <_ZN6MB10436updateEv+0x124>
		for (uint8_t iter=0;iter<this->packetLength-1U;iter++)
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	73fb      	strb	r3, [r7, #15]
 8008ab4:	e7d2      	b.n	8008a5c <_ZN6MB10436updateEv+0x94>
			}
		}
	}

	if (this->_wrongDataReceived == true)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d103      	bne.n	8008ac8 <_ZN6MB10436updateEv+0x100>
	{
		this->_wrongDataReceived = false;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}

	HAL_UART_Receive_DMA(this->_uartPort, this->_rxBuff, this->packetLength);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	335d      	adds	r3, #93	; 0x5d
 8008ad0:	2206      	movs	r2, #6
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	f007 feae 	bl	8010834 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->_uartPortDMA, DMA_IT_HT);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0208 	bic.w	r2, r2, #8
 8008aea:	601a      	str	r2, [r3, #0]
}
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <_ZN6MB104319getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:

const char* MB1043::getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList)
{
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3304      	adds	r3, #4
 8008b02:	2200      	movs	r2, #0
 8008b04:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(SENSOR_DATA_PARAMETER::SONAR_DISTANCE)!=senorsList.end())
 8008b06:	2313      	movs	r3, #19
 8008b08:	613b      	str	r3, [r7, #16]
 8008b0a:	f107 0310 	add.w	r3, r7, #16
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6838      	ldr	r0, [r7, #0]
 8008b12:	f7fc faf3 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8008b16:	4603      	mov	r3, r0
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	6838      	ldr	r0, [r7, #0]
 8008b1c:	f7fc fb07 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8008b20:	4603      	mov	r3, r0
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	f107 0214 	add.w	r2, r7, #20
 8008b28:	f107 030c 	add.w	r3, r7, #12
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fc fb0a 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01a      	beq.n	8008b70 <_ZN6MB104319getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x7c>
	{
		strcat(packet,toCharArray(_distance));
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	1d1c      	adds	r4, r3, #4
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8008b46:	4619      	mov	r1, r3
 8008b48:	4610      	mov	r0, r2
 8008b4a:	f7fb fae5 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4619      	mov	r1, r3
 8008b52:	4620      	mov	r0, r4
 8008b54:	f014 ffa2 	bl	801da9c <strcat>
		strcat(packet,",");
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	1d1c      	adds	r4, r3, #4
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f7f7 fb91 	bl	8000284 <strlen>
 8008b62:	4603      	mov	r3, r0
 8008b64:	4423      	add	r3, r4
 8008b66:	4905      	ldr	r1, [pc, #20]	; (8008b7c <_ZN6MB104319getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x88>)
 8008b68:	461a      	mov	r2, r3
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3304      	adds	r3, #4
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	371c      	adds	r7, #28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd90      	pop	{r4, r7, pc}
 8008b7c:	0801e2dc 	.word	0x0801e2dc

08008b80 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_>:
 *      Author: Asus
 */

#include "PMW3901UY.hpp"

PMW3901UY::PMW3901UY(
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	70fb      	strb	r3, [r7, #3]
	,_xCmPos {0}
	,_yCmPos {0}
	,_targetX {0}
	,_targetY {0}
	,_lastAngleX {0}
	,_lastAngleY {0}
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3336      	adds	r3, #54	; 0x36
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fc fe4f 	bl	8005836 <_ZN7TimeoutC1Ev>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fb fafe 	bl	800419c <_ZN15PrintableSensorC1Ev>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3340      	adds	r3, #64	; 0x40
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fb fb0f 	bl	80041c8 <_ZN12CallsCounterC1Ev>
 8008baa:	4a30      	ldr	r2, [pc, #192]	; (8008c6c <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688PR7VL53L0XR11PID_ControlS9_+0xec>)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	651a      	str	r2, [r3, #80]	; 0x50
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	655a      	str	r2, [r3, #84]	; 0x54
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	659a      	str	r2, [r3, #88]	; 0x58
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a3a      	ldr	r2, [r7, #32]
 8008bcc:	661a      	str	r2, [r3, #96]	; 0x60
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd2:	665a      	str	r2, [r3, #100]	; 0x64
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3368      	adds	r3, #104	; 0x68
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	605a      	str	r2, [r3, #4]
 8008bde:	609a      	str	r2, [r3, #8]
 8008be0:	60da      	str	r2, [r3, #12]
 8008be2:	821a      	strh	r2, [r3, #16]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f04f 0200 	mov.w	r2, #0
 8008c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f04f 0200 	mov.w	r2, #0
 8008c3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f04f 0200 	mov.w	r2, #0
 8008c46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f04f 0200 	mov.w	r2, #0
 8008c50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
{
	setTimeoutValue(timeout);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3336      	adds	r3, #54	; 0x36
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fc fddb 	bl	8005818 <_ZN7Timeout15setTimeoutValueEh>
}
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	0801e780 	.word	0x0801e780

08008c70 <_ZN9PMW3901UY5beginEv>:

void PMW3901UY::begin()
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (_uartPort, _rxBuff, packetLength);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3368      	adds	r3, #104	; 0x68
 8008c80:	2209      	movs	r2, #9
 8008c82:	4619      	mov	r1, r3
 8008c84:	f007 fdd6 	bl	8010834 <HAL_UART_Receive_DMA>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <_ZN9PMW3901UY6updateEv>:

void PMW3901UY::update()
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->_rxBuff[0]==this->BEGIN_BIT && this->_rxBuff[1]==this->DATA_LEN_BIT && this->_rxBuff[8]==this->END_BIT);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008c9e:	2bfe      	cmp	r3, #254	; 0xfe
 8008ca0:	d10b      	bne.n	8008cba <_ZN9PMW3901UY6updateEv+0x2a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d106      	bne.n	8008cba <_ZN9PMW3901UY6updateEv+0x2a>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008cb2:	2baa      	cmp	r3, #170	; 0xaa
 8008cb4:	d101      	bne.n	8008cba <_ZN9PMW3901UY6updateEv+0x2a>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e000      	b.n	8008cbc <_ZN9PMW3901UY6updateEv+0x2c>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d052      	beq.n	8008d6a <_ZN9PMW3901UY6updateEv+0xda>
	{
		this->_flowX = (int16_t)(this->_rxBuff[3]<<8 | this->_rxBuff[2]);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	b21a      	sxth	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8008cd4:	b21b      	sxth	r3, r3
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	b21a      	sxth	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		this->_flowY = (int16_t)(this->_rxBuff[5]<<8 | this->_rxBuff[4]);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	b21a      	sxth	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008cf0:	b21b      	sxth	r3, r3
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	b21a      	sxth	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		this->_quality = this->_rxBuff[7];
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		this->_xPos += this->_flowX;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		this->_yPos += this->_flowY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

		this->process();
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f85d 	bl	8008e04 <_ZN9PMW3901UY7processEv>

		this->_pidX.update();
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fad5 	bl	80092fe <_ZN11PID_Control6updateEv>
		this->_pidY.update();
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 fad0 	bl	80092fe <_ZN11PID_Control6updateEv>

		this->resetTimeoutCounter();
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	3336      	adds	r3, #54	; 0x36
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff fdcc 	bl	8008900 <_ZN7Timeout19resetTimeoutCounterEv>
 8008d68:	e02d      	b.n	8008dc6 <_ZN9PMW3901UY6updateEv+0x136>
	}
	else if (this->_wrongDataReceived==false)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d128      	bne.n	8008dc6 <_ZN9PMW3901UY6updateEv+0x136>
	{
		for (uint8_t iter=0;iter<this->packetLength-1U;iter++)
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	2b07      	cmp	r3, #7
 8008d7c:	d823      	bhi.n	8008dc6 <_ZN9PMW3901UY6updateEv+0x136>
		{
			if ((this->_rxBuff[iter]==this->END_BIT) && (this->_rxBuff[iter+1U]==this->BEGIN_BIT))
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008d88:	2baa      	cmp	r3, #170	; 0xaa
 8008d8a:	d118      	bne.n	8008dbe <_ZN9PMW3901UY6updateEv+0x12e>
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	4413      	add	r3, r2
 8008d94:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008d98:	2bfe      	cmp	r3, #254	; 0xfe
 8008d9a:	d110      	bne.n	8008dbe <_ZN9PMW3901UY6updateEv+0x12e>
			{
				HAL_UART_Receive_DMA (this->_uartPort, this->_rxBuff, this->packetLength+iter+1);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	330a      	adds	r3, #10
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	461a      	mov	r2, r3
 8008db0:	f007 fd40 	bl	8010834 <HAL_UART_Receive_DMA>
				this->_wrongDataReceived = true;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
				return;
 8008dbc:	e01e      	b.n	8008dfc <_ZN9PMW3901UY6updateEv+0x16c>
		for (uint8_t iter=0;iter<this->packetLength-1U;iter++)
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	73fb      	strb	r3, [r7, #15]
 8008dc4:	e7d8      	b.n	8008d78 <_ZN9PMW3901UY6updateEv+0xe8>
			}
		}
	}

	if (this->_wrongDataReceived == true)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d103      	bne.n	8008dd8 <_ZN9PMW3901UY6updateEv+0x148>
		this->_wrongDataReceived = false;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

	HAL_UART_Receive_DMA(this->_uartPort, this->_rxBuff, this->packetLength);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3368      	adds	r3, #104	; 0x68
 8008de0:	2209      	movs	r2, #9
 8008de2:	4619      	mov	r1, r3
 8008de4:	f007 fd26 	bl	8010834 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->_uartPortDMA, DMA_IT_HT);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 0208 	bic.w	r2, r2, #8
 8008dfa:	601a      	str	r2, [r3, #0]
}
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <_ZN9PMW3901UY7processEv>:

void PMW3901UY::process()
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	float cpi = (this->_vl53.getAltitudeM() / 11.914F) * 2.54F;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 fecf 	bl	8009bb4 <_ZN7VL53L0X12getAltitudeMEv>
 8008e16:	eeb0 7a40 	vmov.f32	s14, s0
 8008e1a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008eac <_ZN9PMW3901UY7processEv+0xa8>
 8008e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e22:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008eb0 <_ZN9PMW3901UY7processEv+0xac>
 8008e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e2a:	edc7 7a03 	vstr	s15, [r7, #12]
	this->_xCmPos = this->_xCmPos + static_cast<float>(this->_flowX)*cpi;// - this->_lastAngleY * cpi * 10.0F;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008e42:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	this->_yCmPos = this->_yCmPos + static_cast<float>(this->_flowY)*cpi;// - this->_lastAngleX * cpi * 10.0F;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8008e60:	ee07 3a90 	vmov	s15, r3
 8008e64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008e68:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	_lastAngleX = this->_icm.getEulerX();
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff fa60 	bl	8008344 <_ZN9ICM42688P9getEulerXEv>
 8008e84:	eef0 7a40 	vmov.f32	s15, s0
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	_lastAngleY = this->_icm.getEulerY();
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff fa72 	bl	800837c <_ZN9ICM42688P9getEulerYEv>
 8008e98:	eef0 7a40 	vmov.f32	s15, s0
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 8008ea2:	bf00      	nop
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	413e9fbe 	.word	0x413e9fbe
 8008eb0:	40228f5c 	.word	0x40228f5c

08008eb4 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:

const char* PMW3901UY::getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList)
{
 8008eb4:	b590      	push	{r4, r7, lr}
 8008eb6:	b093      	sub	sp, #76	; 0x4c
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(SENSOR_DATA_PARAMETER::PMW_POS_X)!=senorsList.end())
 8008ec6:	2315      	movs	r3, #21
 8008ec8:	613b      	str	r3, [r7, #16]
 8008eca:	f107 0310 	add.w	r3, r7, #16
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6838      	ldr	r0, [r7, #0]
 8008ed2:	f7fc f913 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	6838      	ldr	r0, [r7, #0]
 8008edc:	f7fc f927 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	f107 0214 	add.w	r2, r7, #20
 8008ee8:	f107 030c 	add.w	r3, r7, #12
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fc f92a 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d01d      	beq.n	8008f36 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x82>
	{
		strcat(packet,toCharArray(_xCmPos));
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	1d1c      	adds	r4, r3, #4
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8008f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f0a:	ee17 1a90 	vmov	r1, s15
 8008f0e:	4610      	mov	r0, r2
 8008f10:	f7fb f902 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8008f14:	4603      	mov	r3, r0
 8008f16:	4619      	mov	r1, r3
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f014 fdbf 	bl	801da9c <strcat>
		strcat(packet,",");
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	1d1c      	adds	r4, r3, #4
 8008f22:	4620      	mov	r0, r4
 8008f24:	f7f7 f9ae 	bl	8000284 <strlen>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	4423      	add	r3, r4
 8008f2c:	4970      	ldr	r1, [pc, #448]	; (80090f0 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x23c>)
 8008f2e:	461a      	mov	r2, r3
 8008f30:	460b      	mov	r3, r1
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::PMW_POS_Y)!=senorsList.end())
 8008f36:	2316      	movs	r3, #22
 8008f38:	61fb      	str	r3, [r7, #28]
 8008f3a:	f107 031c 	add.w	r3, r7, #28
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6838      	ldr	r0, [r7, #0]
 8008f42:	f7fc f8db 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8008f46:	4603      	mov	r3, r0
 8008f48:	61bb      	str	r3, [r7, #24]
 8008f4a:	6838      	ldr	r0, [r7, #0]
 8008f4c:	f7fc f8ef 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8008f50:	4603      	mov	r3, r0
 8008f52:	623b      	str	r3, [r7, #32]
 8008f54:	f107 0220 	add.w	r2, r7, #32
 8008f58:	f107 0318 	add.w	r3, r7, #24
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fc f8f2 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d01d      	beq.n	8008fa6 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0xf2>
	{
		strcat(packet,toCharArray(_yCmPos));
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	1d1c      	adds	r4, r3, #4
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8008f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f7a:	ee17 1a90 	vmov	r1, s15
 8008f7e:	4610      	mov	r0, r2
 8008f80:	f7fb f8ca 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8008f84:	4603      	mov	r3, r0
 8008f86:	4619      	mov	r1, r3
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f014 fd87 	bl	801da9c <strcat>
		strcat(packet,",");
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	1d1c      	adds	r4, r3, #4
 8008f92:	4620      	mov	r0, r4
 8008f94:	f7f7 f976 	bl	8000284 <strlen>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	4423      	add	r3, r4
 8008f9c:	4954      	ldr	r1, [pc, #336]	; (80090f0 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x23c>)
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::PMW_FLOW_X)!=senorsList.end())
 8008fa6:	2317      	movs	r3, #23
 8008fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6838      	ldr	r0, [r7, #0]
 8008fb2:	f7fc f8a3 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fba:	6838      	ldr	r0, [r7, #0]
 8008fbc:	f7fc f8b7 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fc4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fc f8ba 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d01a      	beq.n	8009010 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x15c>
	{
		strcat(packet,toCharArray(_flowX));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	1d1c      	adds	r4, r3, #4
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4610      	mov	r0, r2
 8008fea:	f7fb f895 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f014 fd52 	bl	801da9c <strcat>
		strcat(packet,",");
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	1d1c      	adds	r4, r3, #4
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7f7 f941 	bl	8000284 <strlen>
 8009002:	4603      	mov	r3, r0
 8009004:	4423      	add	r3, r4
 8009006:	493a      	ldr	r1, [pc, #232]	; (80090f0 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x23c>)
 8009008:	461a      	mov	r2, r3
 800900a:	460b      	mov	r3, r1
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::PMW_FLOW_Y)!=senorsList.end())
 8009010:	2318      	movs	r3, #24
 8009012:	637b      	str	r3, [r7, #52]	; 0x34
 8009014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009018:	4619      	mov	r1, r3
 800901a:	6838      	ldr	r0, [r7, #0]
 800901c:	f7fc f86e 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8009020:	4603      	mov	r3, r0
 8009022:	633b      	str	r3, [r7, #48]	; 0x30
 8009024:	6838      	ldr	r0, [r7, #0]
 8009026:	f7fc f882 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 800902a:	4603      	mov	r3, r0
 800902c:	63bb      	str	r3, [r7, #56]	; 0x38
 800902e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009036:	4611      	mov	r1, r2
 8009038:	4618      	mov	r0, r3
 800903a:	f7fc f885 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01a      	beq.n	800907a <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x1c6>
	{
		strcat(packet,toCharArray(_flowY));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	1d1c      	adds	r4, r3, #4
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8009050:	4619      	mov	r1, r3
 8009052:	4610      	mov	r0, r2
 8009054:	f7fb f860 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8009058:	4603      	mov	r3, r0
 800905a:	4619      	mov	r1, r3
 800905c:	4620      	mov	r0, r4
 800905e:	f014 fd1d 	bl	801da9c <strcat>
		strcat(packet,",");
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	1d1c      	adds	r4, r3, #4
 8009066:	4620      	mov	r0, r4
 8009068:	f7f7 f90c 	bl	8000284 <strlen>
 800906c:	4603      	mov	r3, r0
 800906e:	4423      	add	r3, r4
 8009070:	491f      	ldr	r1, [pc, #124]	; (80090f0 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x23c>)
 8009072:	461a      	mov	r2, r3
 8009074:	460b      	mov	r3, r1
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(SENSOR_DATA_PARAMETER::PMW_QUALITY)!=senorsList.end())
 800907a:	2319      	movs	r3, #25
 800907c:	643b      	str	r3, [r7, #64]	; 0x40
 800907e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009082:	4619      	mov	r1, r3
 8009084:	6838      	ldr	r0, [r7, #0]
 8009086:	f7fc f839 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 800908a:	4603      	mov	r3, r0
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800908e:	6838      	ldr	r0, [r7, #0]
 8009090:	f7fc f84d 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8009094:	4603      	mov	r3, r0
 8009096:	647b      	str	r3, [r7, #68]	; 0x44
 8009098:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800909c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fc f850 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d01a      	beq.n	80090e4 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x230>
	{
		strcat(packet,toCharArray(_quality));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	1d1c      	adds	r4, r3, #4
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f7fb f82b 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 80090c2:	4603      	mov	r3, r0
 80090c4:	4619      	mov	r1, r3
 80090c6:	4620      	mov	r0, r4
 80090c8:	f014 fce8 	bl	801da9c <strcat>
		strcat(packet,",");
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	1d1c      	adds	r4, r3, #4
 80090d0:	4620      	mov	r0, r4
 80090d2:	f7f7 f8d7 	bl	8000284 <strlen>
 80090d6:	4603      	mov	r3, r0
 80090d8:	4423      	add	r3, r4
 80090da:	4905      	ldr	r1, [pc, #20]	; (80090f0 <_ZN9PMW3901UY19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0x23c>)
 80090dc:	461a      	mov	r2, r3
 80090de:	460b      	mov	r3, r1
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	374c      	adds	r7, #76	; 0x4c
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd90      	pop	{r4, r7, pc}
 80090f0:	0801e2e0 	.word	0x0801e2e0

080090f4 <_ZN9PMW3901UY7getXposEv>:
{
	return _quality;
}

float& PMW3901UY::getXpos()
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	return _xCmPos;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	338c      	adds	r3, #140	; 0x8c
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <_ZN9PMW3901UY7getYposEv>:

float& PMW3901UY::getYpos()
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
	return _yCmPos;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	3390      	adds	r3, #144	; 0x90
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	0000      	movs	r0, r0
	...

08009128 <_ZN5drone5utils9functions8HzToRadsEf>:
		{
			return (((int16_t)msb << 8) | (int16_t)lsb);
		}

		inline float HzToRads(float val)
		{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	ed87 0a01 	vstr	s0, [r7, #4]
		  return val * 2 * M_PI;
 8009132:	edd7 7a01 	vldr	s15, [r7, #4]
 8009136:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800913a:	ee17 0a90 	vmov	r0, s15
 800913e:	f7f7 fa0d 	bl	800055c <__aeabi_f2d>
 8009142:	a309      	add	r3, pc, #36	; (adr r3, 8009168 <_ZN5drone5utils9functions8HzToRadsEf+0x40>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f7f7 fa60 	bl	800060c <__aeabi_dmul>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4610      	mov	r0, r2
 8009152:	4619      	mov	r1, r3
 8009154:	f7f7 fd32 	bl	8000bbc <__aeabi_d2f>
 8009158:	4603      	mov	r3, r0
 800915a:	ee07 3a90 	vmov	s15, r3
		}
 800915e:	eeb0 0a67 	vmov.f32	s0, s15
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	54442d18 	.word	0x54442d18
 800916c:	400921fb 	.word	0x400921fb

08009170 <_ZN13LowPassFilterC1Efff>:

#include <math.h>
#include "LowPassFilter.hpp"
#include "utils_functions.hpp"

LowPassFilter::LowPassFilter(float wo, float Te, float u0)
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	ed87 0a02 	vstr	s0, [r7, #8]
 800917c:	edc7 0a01 	vstr	s1, [r7, #4]
 8009180:	ed87 1a00 	vstr	s2, [r7]
{
	this->Te = Te;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	601a      	str	r2, [r3, #0]
	this->wo = drone::utils::functions::HzToRads(wo);
 800918a:	ed97 0a02 	vldr	s0, [r7, #8]
 800918e:	f7ff ffcb 	bl	8009128 <_ZN5drone5utils9functions8HzToRadsEf>
 8009192:	eef0 7a40 	vmov.f32	s15, s0
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	edc3 7a01 	vstr	s15, [r3, #4]
	this->u0(u0);
 800919c:	ed97 0a00 	vldr	s0, [r7]
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 f808 	bl	80091b6 <_ZN13LowPassFilter2u0Ef>

	getTf();
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f81d 	bl	80091e6 <_ZN13LowPassFilter5getTfEv>
}
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <_ZN13LowPassFilter2u0Ef>:

void LowPassFilter::u0(float u0)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	ed87 0a00 	vstr	s0, [r7]
	u[0] = u0;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	611a      	str	r2, [r3, #16]
	u[1] = u0;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	615a      	str	r2, [r3, #20]
	y[0] = u0;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	609a      	str	r2, [r3, #8]
	y[1] = u0;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	60da      	str	r2, [r3, #12]
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <_ZN13LowPassFilter5getTfEv>:

void LowPassFilter::getTf()
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
	b[0] = wo/(2/Te+wo);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	edd3 7a00 	vldr	s15, [r3]
 80091fa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80091fe:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	edd3 7a01 	vldr	s15, [r3, #4]
 8009208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800920c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	edc3 7a07 	vstr	s15, [r3, #28]
	b[1] = wo/(2/Te+wo);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	edd3 6a01 	vldr	s13, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	edd3 7a00 	vldr	s15, [r3]
 8009222:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009226:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	edc3 7a08 	vstr	s15, [r3, #32]

	a[0] = (wo-2/Te)/(2/Te+wo);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	ed93 7a01 	vldr	s14, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	edd3 6a00 	vldr	s13, [r3]
 800924a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800924e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009252:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	edd3 7a00 	vldr	s15, [r3]
 800925c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009260:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	edd3 7a01 	vldr	s15, [r3, #4]
 800926a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800926e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <_ZN13LowPassFilter4lsimEf>:

float LowPassFilter::lsim(float input)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	ed87 0a00 	vstr	s0, [r7]
  y[0] = y[1];
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	609a      	str	r2, [r3, #8]

  u[0] = u[1];
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	695a      	ldr	r2, [r3, #20]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	611a      	str	r2, [r3, #16]
  u[1] = input;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	615a      	str	r2, [r3, #20]

  y[1] = -a[0] * y[0] + b[1] * u[0] + b[0] * u[1];
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80092ac:	eeb1 7a67 	vneg.f32	s14, s15
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80092b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	edd3 6a08 	vldr	s13, [r3, #32]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80092c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	edd3 6a07 	vldr	s13, [r3, #28]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80092da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	edc3 7a03 	vstr	s15, [r3, #12]

  return y[1];
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	ee07 3a90 	vmov	s15, r3
}
 80092f0:	eeb0 0a67 	vmov.f32	s0, s15
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <_ZN11PID_Control6updateEv>:
 */

#include "PID_Control.hpp"

void PID_Control::update()
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
	this->_error = this->_reference - this->_signal;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	ed93 7a00 	vldr	s14, [r3]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	edd3 7a00 	vldr	s15, [r3]
 8009316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	edc3 7a06 	vstr	s15, [r3, #24]

	this->_pidP = this->_error;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699a      	ldr	r2, [r3, #24]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	61da      	str	r2, [r3, #28]
	this->_pidI = this->_pidI + this->_error;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	ed93 7a08 	vldr	s14, [r3, #32]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	edd3 7a06 	vldr	s15, [r3, #24]
 8009334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	edc3 7a08 	vstr	s15, [r3, #32]
	this->_pidD = -(this->_signal-this->_lastSignal);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	ed93 7a00 	vldr	s14, [r3]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	edd3 7a01 	vldr	s15, [r3, #4]
 800934c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009350:	eef1 7a67 	vneg.f32	s15, s15
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->_pidD = this->_lowPassFilter.lsim(this->_pidD);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009366:	eeb0 0a67 	vmov.f32	s0, s15
 800936a:	4610      	mov	r0, r2
 800936c:	f7ff ff8a 	bl	8009284 <_ZN13LowPassFilter4lsimEf>
 8009370:	eef0 7a40 	vmov.f32	s15, s0
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->_lastSignal = this->_signal;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	605a      	str	r2, [r3, #4]

	this->_pid =  this->_Kp * this->_pidP + this->_Ki * this->_pidI + this->_Kd * this->_pidD;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	ed93 7a03 	vldr	s14, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	edd3 7a07 	vldr	s15, [r3, #28]
 8009390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	edd3 6a04 	vldr	s13, [r3, #16]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	edd3 7a08 	vldr	s15, [r3, #32]
 80093a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	edd3 6a05 	vldr	s13, [r3, #20]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80093b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80093c2:	bf00      	nop
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <_ZN11PID_Control6getOutEv>:

float PID_Control::getOut()
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
	return this->_pid;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	ee07 3a90 	vmov	s15, r3
}
 80093da:	eeb0 0a67 	vmov.f32	s0, s15
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <_ZN10SDIODriver8Mount_SDEPKc>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void SDIODriver::Mount_SD (const TCHAR* path)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
	fresult = f_mount(&fs, path, 1);
 80093f2:	2201      	movs	r2, #1
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	4805      	ldr	r0, [pc, #20]	; (800940c <_ZN10SDIODriver8Mount_SDEPKc+0x24>)
 80093f8:	f00f ff8c 	bl	8019314 <f_mount>
 80093fc:	4603      	mov	r3, r0
 80093fe:	461a      	mov	r2, r3
 8009400:	4b03      	ldr	r3, [pc, #12]	; (8009410 <_ZN10SDIODriver8Mount_SDEPKc+0x28>)
 8009402:	701a      	strb	r2, [r3, #0]
	//if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
	//else Send_Uart("SD CARD mounted successfully...\n");
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	20000b24 	.word	0x20000b24
 8009410:	20000f9c 	.word	0x20000f9c

08009414 <_ZN10SDIODriver10Unmount_SDEPKc>:

void SDIODriver::Unmount_SD (const TCHAR* path)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
	fresult = f_mount(NULL, path, 1);
 800941e:	2201      	movs	r2, #1
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	2000      	movs	r0, #0
 8009424:	f00f ff76 	bl	8019314 <f_mount>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	4b02      	ldr	r3, [pc, #8]	; (8009438 <_ZN10SDIODriver10Unmount_SDEPKc+0x24>)
 800942e:	701a      	strb	r2, [r3, #0]
	//if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
	//else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	20000f9c 	.word	0x20000f9c

0800943c <_ZN10SDIODriver9Format_SDEv>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT SDIODriver::Format_SD (void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b090      	sub	sp, #64	; 0x40
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
    DIR dir;
    char *path = (char*)malloc(20*sizeof (char));
 8009444:	2014      	movs	r0, #20
 8009446:	f014 f995 	bl	801d774 <malloc>
 800944a:	4603      	mov	r3, r0
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sprintf (path, "%s","/");
 800944e:	4a2a      	ldr	r2, [pc, #168]	; (80094f8 <_ZN10SDIODriver9Format_SDEv+0xbc>)
 8009450:	492a      	ldr	r1, [pc, #168]	; (80094fc <_ZN10SDIODriver9Format_SDEv+0xc0>)
 8009452:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009454:	f014 fb02 	bl	801da5c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8009458:	f107 030c 	add.w	r3, r7, #12
 800945c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800945e:	4618      	mov	r0, r3
 8009460:	f010 fb79 	bl	8019b56 <f_opendir>
 8009464:	4603      	mov	r3, r0
 8009466:	461a      	mov	r2, r3
 8009468:	4b25      	ldr	r3, [pc, #148]	; (8009500 <_ZN10SDIODriver9Format_SDEv+0xc4>)
 800946a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800946c:	4b24      	ldr	r3, [pc, #144]	; (8009500 <_ZN10SDIODriver9Format_SDEv+0xc4>)
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d138      	bne.n	80094e6 <_ZN10SDIODriver9Format_SDEv+0xaa>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8009474:	f107 030c 	add.w	r3, r7, #12
 8009478:	4922      	ldr	r1, [pc, #136]	; (8009504 <_ZN10SDIODriver9Format_SDEv+0xc8>)
 800947a:	4618      	mov	r0, r3
 800947c:	f010 fc04 	bl	8019c88 <f_readdir>
 8009480:	4603      	mov	r3, r0
 8009482:	461a      	mov	r2, r3
 8009484:	4b1e      	ldr	r3, [pc, #120]	; (8009500 <_ZN10SDIODriver9Format_SDEv+0xc4>)
 8009486:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8009488:	4b1d      	ldr	r3, [pc, #116]	; (8009500 <_ZN10SDIODriver9Format_SDEv+0xc4>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d125      	bne.n	80094dc <_ZN10SDIODriver9Format_SDEv+0xa0>
 8009490:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <_ZN10SDIODriver9Format_SDEv+0xc8>)
 8009492:	7a5b      	ldrb	r3, [r3, #9]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d021      	beq.n	80094dc <_ZN10SDIODriver9Format_SDEv+0xa0>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <_ZN10SDIODriver9Format_SDEv+0xc8>)
 800949a:	7a1b      	ldrb	r3, [r3, #8]
 800949c:	f003 0310 	and.w	r3, r3, #16
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d011      	beq.n	80094c8 <_ZN10SDIODriver9Format_SDEv+0x8c>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80094a4:	4918      	ldr	r1, [pc, #96]	; (8009508 <_ZN10SDIODriver9Format_SDEv+0xcc>)
 80094a6:	4819      	ldr	r0, [pc, #100]	; (800950c <_ZN10SDIODriver9Format_SDEv+0xd0>)
 80094a8:	f7f6 fee2 	bl	8000270 <strcmp>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d012      	beq.n	80094d8 <_ZN10SDIODriver9Format_SDEv+0x9c>
            	fresult = f_unlink(fno.fname);
 80094b2:	4815      	ldr	r0, [pc, #84]	; (8009508 <_ZN10SDIODriver9Format_SDEv+0xcc>)
 80094b4:	f010 fc5e 	bl	8019d74 <f_unlink>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	4b10      	ldr	r3, [pc, #64]	; (8009500 <_ZN10SDIODriver9Format_SDEv+0xc4>)
 80094be:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80094c0:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <_ZN10SDIODriver9Format_SDEv+0xc4>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b07      	cmp	r3, #7
 80094c6:	e7d5      	b.n	8009474 <_ZN10SDIODriver9Format_SDEv+0x38>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80094c8:	480f      	ldr	r0, [pc, #60]	; (8009508 <_ZN10SDIODriver9Format_SDEv+0xcc>)
 80094ca:	f010 fc53 	bl	8019d74 <f_unlink>
 80094ce:	4603      	mov	r3, r0
 80094d0:	461a      	mov	r2, r3
 80094d2:	4b0b      	ldr	r3, [pc, #44]	; (8009500 <_ZN10SDIODriver9Format_SDEv+0xc4>)
 80094d4:	701a      	strb	r2, [r3, #0]
 80094d6:	e7cd      	b.n	8009474 <_ZN10SDIODriver9Format_SDEv+0x38>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80094d8:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80094da:	e7cb      	b.n	8009474 <_ZN10SDIODriver9Format_SDEv+0x38>
            }
        }
        f_closedir(&dir);
 80094dc:	f107 030c 	add.w	r3, r7, #12
 80094e0:	4618      	mov	r0, r3
 80094e2:	f010 fbab 	bl	8019c3c <f_closedir>
    }
    free(path);
 80094e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80094e8:	f014 f94c 	bl	801d784 <free>
    return fresult;
 80094ec:	4b04      	ldr	r3, [pc, #16]	; (8009500 <_ZN10SDIODriver9Format_SDEv+0xc4>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3740      	adds	r7, #64	; 0x40
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	0801e2f8 	.word	0x0801e2f8
 80094fc:	0801e2e4 	.word	0x0801e2e4
 8009500:	20000f9c 	.word	0x20000f9c
 8009504:	20000f84 	.word	0x20000f84
 8009508:	20000f8d 	.word	0x20000f8d
 800950c:	0801e2e8 	.word	0x0801e2e8

08009510 <_ZN10SDIODriver11Create_FileEPc>:
	    return fresult;
	}
}

FRESULT SDIODriver::Create_File (char *name)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
	fresult = f_stat (name, &fno);
 800951a:	4911      	ldr	r1, [pc, #68]	; (8009560 <_ZN10SDIODriver11Create_FileEPc+0x50>)
 800951c:	6838      	ldr	r0, [r7, #0]
 800951e:	f010 fbf0 	bl	8019d02 <f_stat>
 8009522:	4603      	mov	r3, r0
 8009524:	461a      	mov	r2, r3
 8009526:	4b0f      	ldr	r3, [pc, #60]	; (8009564 <_ZN10SDIODriver11Create_FileEPc+0x54>)
 8009528:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800952a:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <_ZN10SDIODriver11Create_FileEPc+0x54>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00f      	beq.n	8009552 <_ZN10SDIODriver11Create_FileEPc+0x42>
		//free(buf);
	    //return fresult;
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8009532:	220b      	movs	r2, #11
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	480c      	ldr	r0, [pc, #48]	; (8009568 <_ZN10SDIODriver11Create_FileEPc+0x58>)
 8009538:	f00f ff32 	bl	80193a0 <f_open>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	4b08      	ldr	r3, [pc, #32]	; (8009564 <_ZN10SDIODriver11Create_FileEPc+0x54>)
 8009542:	701a      	strb	r2, [r3, #0]
			//sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
			//Send_Uart(buf);
			//free(buf);
		}

		fresult = f_close(&fil);
 8009544:	4808      	ldr	r0, [pc, #32]	; (8009568 <_ZN10SDIODriver11Create_FileEPc+0x58>)
 8009546:	f010 fadc 	bl	8019b02 <f_close>
 800954a:	4603      	mov	r3, r0
 800954c:	461a      	mov	r2, r3
 800954e:	4b05      	ldr	r3, [pc, #20]	; (8009564 <_ZN10SDIODriver11Create_FileEPc+0x54>)
 8009550:	701a      	strb	r2, [r3, #0]
			//sprintf (buf, "File *%s* CLOSED successfully\n", name);
			//Send_Uart(buf);
			//free(buf);
		}
	}
    return fresult;
 8009552:	4b04      	ldr	r3, [pc, #16]	; (8009564 <_ZN10SDIODriver11Create_FileEPc+0x54>)
 8009554:	781b      	ldrb	r3, [r3, #0]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20000f84 	.word	0x20000f84
 8009564:	20000f9c 	.word	0x20000f9c
 8009568:	20000d54 	.word	0x20000d54

0800956c <_ZN10SDIODriver11Update_FileEPcS0_>:

FRESULT SDIODriver::Update_File (char *name, char *data)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8009578:	4917      	ldr	r1, [pc, #92]	; (80095d8 <_ZN10SDIODriver11Update_FileEPcS0_+0x6c>)
 800957a:	68b8      	ldr	r0, [r7, #8]
 800957c:	f010 fbc1 	bl	8019d02 <f_stat>
 8009580:	4603      	mov	r3, r0
 8009582:	461a      	mov	r2, r3
 8009584:	4b15      	ldr	r3, [pc, #84]	; (80095dc <_ZN10SDIODriver11Update_FileEPcS0_+0x70>)
 8009586:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8009588:	4b14      	ldr	r3, [pc, #80]	; (80095dc <_ZN10SDIODriver11Update_FileEPcS0_+0x70>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d11c      	bne.n	80095ca <_ZN10SDIODriver11Update_FileEPcS0_+0x5e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8009590:	2232      	movs	r2, #50	; 0x32
 8009592:	68b9      	ldr	r1, [r7, #8]
 8009594:	4812      	ldr	r0, [pc, #72]	; (80095e0 <_ZN10SDIODriver11Update_FileEPcS0_+0x74>)
 8009596:	f00f ff03 	bl	80193a0 <f_open>
 800959a:	4603      	mov	r3, r0
 800959c:	461a      	mov	r2, r3
 800959e:	4b0f      	ldr	r3, [pc, #60]	; (80095dc <_ZN10SDIODriver11Update_FileEPcS0_+0x70>)
 80095a0:	701a      	strb	r2, [r3, #0]
	        //free(buf);
	        //return fresult;
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f6 fe6e 	bl	8000284 <strlen>
 80095a8:	4602      	mov	r2, r0
 80095aa:	4b0e      	ldr	r3, [pc, #56]	; (80095e4 <_ZN10SDIODriver11Update_FileEPcS0_+0x78>)
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	480c      	ldr	r0, [pc, #48]	; (80095e0 <_ZN10SDIODriver11Update_FileEPcS0_+0x74>)
 80095b0:	f010 f8b4 	bl	801971c <f_write>
 80095b4:	4603      	mov	r3, r0
 80095b6:	461a      	mov	r2, r3
 80095b8:	4b08      	ldr	r3, [pc, #32]	; (80095dc <_ZN10SDIODriver11Update_FileEPcS0_+0x70>)
 80095ba:	701a      	strb	r2, [r3, #0]
	    	//Send_Uart(buf);
	    	//free(buf);
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80095bc:	4808      	ldr	r0, [pc, #32]	; (80095e0 <_ZN10SDIODriver11Update_FileEPcS0_+0x74>)
 80095be:	f010 faa0 	bl	8019b02 <f_close>
 80095c2:	4603      	mov	r3, r0
 80095c4:	461a      	mov	r2, r3
 80095c6:	4b05      	ldr	r3, [pc, #20]	; (80095dc <_ZN10SDIODriver11Update_FileEPcS0_+0x70>)
 80095c8:	701a      	strb	r2, [r3, #0]
	    	//sprintf (buf, "File *%s* CLOSED successfully\n", name);
	    	//Send_Uart(buf);
	    	//free(buf);
	     }
	}
    return fresult;
 80095ca:	4b04      	ldr	r3, [pc, #16]	; (80095dc <_ZN10SDIODriver11Update_FileEPcS0_+0x70>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20000f84 	.word	0x20000f84
 80095dc:	20000f9c 	.word	0x20000f9c
 80095e0:	20000d54 	.word	0x20000d54
 80095e4:	20000fa0 	.word	0x20000fa0

080095e8 <_ZSt17__size_to_integeri>:
      std::__fill_a(__first, __last, __value);
    }

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
	...

08009600 <_ZN14MPC_ControllerC1Ev>:
};

class MPC_Controller
{
public:
	MPC_Controller()
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
	{
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	701a      	strb	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f04f 0200 	mov.w	r2, #0
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	609a      	str	r2, [r3, #8]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	611a      	str	r2, [r3, #16]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f04f 0200 	mov.w	r2, #0
 8009634:	615a      	str	r2, [r3, #20]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	619a      	str	r2, [r3, #24]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f04f 0200 	mov.w	r2, #0
 8009644:	61da      	str	r2, [r3, #28]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a32      	ldr	r2, [pc, #200]	; (8009714 <_ZN14MPC_ControllerC1Ev+0x114>)
 800964a:	621a      	str	r2, [r3, #32]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a32      	ldr	r2, [pc, #200]	; (8009718 <_ZN14MPC_ControllerC1Ev+0x118>)
 8009650:	625a      	str	r2, [r3, #36]	; 0x24
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a31      	ldr	r2, [pc, #196]	; (800971c <_ZN14MPC_ControllerC1Ev+0x11c>)
 8009656:	3358      	adds	r3, #88	; 0x58
 8009658:	4611      	mov	r1, r2
 800965a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800965e:	4618      	mov	r0, r3
 8009660:	f014 f898 	bl	801d794 <memcpy>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800966a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f014 f8b7 	bl	801d7e4 <memset>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800967c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009680:	2100      	movs	r1, #0
 8009682:	4618      	mov	r0, r3
 8009684:	f014 f8ae 	bl	801d7e4 <memset>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800968e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009692:	2100      	movs	r1, #0
 8009694:	4618      	mov	r0, r3
 8009696:	f014 f8a5 	bl	801d7e4 <memset>
		arm_mat_init_f32(&_ft, 1, 100, (float32_t*)_ftData);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096a6:	2264      	movs	r2, #100	; 0x64
 80096a8:	2101      	movs	r1, #1
 80096aa:	f012 fe2d 	bl	801c308 <arm_mat_init_f32>
		arm_mat_init_f32(&_ftT, 100, 1, (float32_t*)_ftTData);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f503 7362 	add.w	r3, r3, #904	; 0x388
 80096ba:	2201      	movs	r2, #1
 80096bc:	2164      	movs	r1, #100	; 0x64
 80096be:	f012 fe23 	bl	801c308 <arm_mat_init_f32>
		arm_mat_init_f32(&_du, 100, 1, (float32_t*)_duData);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80096ce:	2201      	movs	r2, #1
 80096d0:	2164      	movs	r1, #100	; 0x64
 80096d2:	f012 fe19 	bl	801c308 <arm_mat_init_f32>

		arm_mat_init_f32(&_fdbt, 104, 100, (float32_t*)Fdbt_data);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80096dc:	4b10      	ldr	r3, [pc, #64]	; (8009720 <_ZN14MPC_ControllerC1Ev+0x120>)
 80096de:	2264      	movs	r2, #100	; 0x64
 80096e0:	2168      	movs	r1, #104	; 0x68
 80096e2:	f012 fe11 	bl	801c308 <arm_mat_init_f32>
		arm_mat_init_f32(&_hdbInv, 100, 100, (float32_t*)HdbInv_data);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80096ec:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <_ZN14MPC_ControllerC1Ev+0x124>)
 80096ee:	2264      	movs	r2, #100	; 0x64
 80096f0:	2164      	movs	r1, #100	; 0x64
 80096f2:	f012 fe09 	bl	801c308 <arm_mat_init_f32>
		arm_mat_init_f32(&_xr, 1, 104, (float32_t*)_xrData);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3358      	adds	r3, #88	; 0x58
 8009700:	2268      	movs	r2, #104	; 0x68
 8009702:	2101      	movs	r1, #1
 8009704:	f012 fe00 	bl	801c308 <arm_mat_init_f32>
	}
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	3e4ccccd 	.word	0x3e4ccccd
 8009718:	3d4ccccd 	.word	0x3d4ccccd
 800971c:	0801e300 	.word	0x0801e300
 8009720:	0801e784 	.word	0x0801e784
 8009724:	08028a04 	.word	0x08028a04

08009728 <_ZN14MPC_Controller7predictEff>:

	float32_t predict(float32_t x1,float32_t ref)
 8009728:	b5b0      	push	{r4, r5, r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	ed87 0a02 	vstr	s0, [r7, #8]
 8009734:	edc7 0a01 	vstr	s1, [r7, #4]
	{
		arm_status status1 = arm_mat_mult_f32(&_xr, &_fdbt, &_ft);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3340      	adds	r3, #64	; 0x40
 8009748:	461a      	mov	r2, r3
 800974a:	f012 fd39 	bl	801c1c0 <arm_mat_mult_f32>
 800974e:	4603      	mov	r3, r0
 8009750:	75fb      	strb	r3, [r7, #23]
		arm_status status2 = arm_mat_trans_f32(&_ft, &_ftT);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3348      	adds	r3, #72	; 0x48
 800975c:	4619      	mov	r1, r3
 800975e:	4610      	mov	r0, r2
 8009760:	f012 fcbc 	bl	801c0dc <arm_mat_trans_f32>
 8009764:	4603      	mov	r3, r0
 8009766:	75bb      	strb	r3, [r7, #22]
		arm_status status3 = arm_mat_mult_f32(&_hdbInv, &_ftT, &_du);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3350      	adds	r3, #80	; 0x50
 8009778:	461a      	mov	r2, r3
 800977a:	f012 fd21 	bl	801c1c0 <arm_mat_mult_f32>
 800977e:	4603      	mov	r3, r0
 8009780:	757b      	strb	r3, [r7, #21]

		this->_du0 = *(this->_du.pData+0);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	605a      	str	r2, [r3, #4]
		this->_xAug = this->_xAug + this->_du0;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	edd3 7a01 	vldr	s15, [r3, #4]
 8009798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	edc3 7a02 	vstr	s15, [r3, #8]

		if (x1<0.05 && this->_firstOverThreshold==false)
 80097a2:	68b8      	ldr	r0, [r7, #8]
 80097a4:	f7f6 feda 	bl	800055c <__aeabi_f2d>
 80097a8:	a347      	add	r3, pc, #284	; (adr r3, 80098c8 <_ZN14MPC_Controller7predictEff+0x1a0>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f7 f99f 	bl	8000af0 <__aeabi_dcmplt>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00f      	beq.n	80097d8 <_ZN14MPC_Controller7predictEff+0xb0>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10b      	bne.n	80097d8 <_ZN14MPC_Controller7predictEff+0xb0>
		{
			this->_err = this->_err + this->_Ki;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	ed93 7a05 	vldr	s14, [r3, #20]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80097cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	edc3 7a05 	vstr	s15, [r3, #20]
 80097d6:	e015      	b.n	8009804 <_ZN14MPC_Controller7predictEff+0xdc>
		} else
		{
			this->_err = this->_err + (ref-x1)*this->_KiS;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	ed93 7a05 	vldr	s14, [r3, #20]
 80097de:	edd7 6a01 	vldr	s13, [r7, #4]
 80097e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80097e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80097f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	edc3 7a05 	vstr	s15, [r3, #20]
			this->_firstOverThreshold = true;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2201      	movs	r2, #1
 8009802:	701a      	strb	r2, [r3, #0]
		}

		this->_x3 = this->_xAug*0.8 - this->_prevX3*0.666666666666667;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	4618      	mov	r0, r3
 800980a:	f7f6 fea7 	bl	800055c <__aeabi_f2d>
 800980e:	a330      	add	r3, pc, #192	; (adr r3, 80098d0 <_ZN14MPC_Controller7predictEff+0x1a8>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f6 fefa 	bl	800060c <__aeabi_dmul>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4614      	mov	r4, r2
 800981e:	461d      	mov	r5, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	4618      	mov	r0, r3
 8009826:	f7f6 fe99 	bl	800055c <__aeabi_f2d>
 800982a:	a32b      	add	r3, pc, #172	; (adr r3, 80098d8 <_ZN14MPC_Controller7predictEff+0x1b0>)
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	f7f6 feec 	bl	800060c <__aeabi_dmul>
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	4620      	mov	r0, r4
 800983a:	4629      	mov	r1, r5
 800983c:	f7f6 fd2e 	bl	800029c <__aeabi_dsub>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4610      	mov	r0, r2
 8009846:	4619      	mov	r1, r3
 8009848:	f7f7 f9b8 	bl	8000bbc <__aeabi_d2f>
 800984c:	4602      	mov	r2, r0
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	60da      	str	r2, [r3, #12]
		this->_x1Dt = x1 - this->_prevX1;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	edd3 7a06 	vldr	s15, [r3, #24]
 8009858:	ed97 7a02 	vldr	s14, [r7, #8]
 800985c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	edc3 7a07 	vstr	s15, [r3, #28]

		std::fill_n(this->_xrData, 104, this->_err);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3314      	adds	r3, #20
 8009870:	461a      	mov	r2, r3
 8009872:	2168      	movs	r1, #104	; 0x68
 8009874:	f000 fa36 	bl	8009ce4 <_ZSt6fill_nIPfifET_S1_T0_RKT1_>

		this->_xrData[0] = x1;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	659a      	str	r2, [r3, #88]	; 0x58
		this->_xrData[1] = this->_x1Dt * 5.0F;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	edd3 7a07 	vldr	s15, [r3, #28]
 8009884:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8009888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		this->_xrData[2] = this->_x3;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	661a      	str	r2, [r3, #96]	; 0x60
		this->_xrData[3] = this->_xAug;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689a      	ldr	r2, [r3, #8]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	665a      	str	r2, [r3, #100]	; 0x64

		this->_prevX1 = x1;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	619a      	str	r2, [r3, #24]
		this->_prevX3 = this->_x3;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	68da      	ldr	r2, [r3, #12]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	611a      	str	r2, [r3, #16]

		return _xAug;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	ee07 3a90 	vmov	s15, r3
	}
 80098b8:	eeb0 0a67 	vmov.f32	s0, s15
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bdb0      	pop	{r4, r5, r7, pc}
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
 80098c8:	9999999a 	.word	0x9999999a
 80098cc:	3fa99999 	.word	0x3fa99999
 80098d0:	9999999a 	.word	0x9999999a
 80098d4:	3fe99999 	.word	0x3fe99999
 80098d8:	55555558 	.word	0x55555558
 80098dc:	3fe55555 	.word	0x3fe55555

080098e0 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 */

#include "VL53L0X.hpp"
#include "FlightControllerImplementation.hpp"

VL53L0X::VL53L0X(
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	70fb      	strb	r3, [r7, #3]
	,_mpc {}
	,_lpf (1,0.1)
	,_mpcOut {0}
	,_rxBuff {}
	,_wrongDataReceived {false}
	,_distance {0U}
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3336      	adds	r3, #54	; 0x36
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fb ff9f 	bl	8005836 <_ZN7TimeoutC1Ev>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fa fc4e 	bl	800419c <_ZN15PrintableSensorC1Ev>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3340      	adds	r3, #64	; 0x40
 8009904:	4618      	mov	r0, r3
 8009906:	f7fa fc5f 	bl	80041c8 <_ZN12CallsCounterC1Ev>
 800990a:	4a1e      	ldr	r2, [pc, #120]	; (8009984 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0xa4>)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	651a      	str	r2, [r3, #80]	; 0x50
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	655a      	str	r2, [r3, #84]	; 0x54
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3358      	adds	r3, #88	; 0x58
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff fe6d 	bl	8009600 <_ZN14MPC_ControllerC1Ev>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800992c:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8009988 <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0xa8>
 8009930:	eddf 0a16 	vldr	s1, [pc, #88]	; 800998c <_ZN7VL53L0XC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0xac>
 8009934:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fc19 	bl	8009170 <_ZN13LowPassFilterC1Efff>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	601a      	str	r2, [r3, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	605a      	str	r2, [r3, #4]
 8009956:	609a      	str	r2, [r3, #8]
 8009958:	60da      	str	r2, [r3, #12]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
{
	setTimeoutValue(timeout);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3336      	adds	r3, #54	; 0x36
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f7fb ff50 	bl	8005818 <_ZN7Timeout15setTimeoutValueEh>
}
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	0803264c 	.word	0x0803264c
 8009988:	00000000 	.word	0x00000000
 800998c:	3dcccccd 	.word	0x3dcccccd

08009990 <_ZN7VL53L0X5beginEv>:

void VL53L0X::begin()
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (_uartPort, _rxBuff, packetLength);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 80099a2:	2208      	movs	r2, #8
 80099a4:	4619      	mov	r1, r3
 80099a6:	f006 ff45 	bl	8010834 <HAL_UART_Receive_DMA>
}
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <_ZN7VL53L0X6updateEv>:

void VL53L0X::update()
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->_rxBuff[0]==this->FIRST_BIT && this->_rxBuff[1]==this->SECOND_BIT);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3728 	ldrb.w	r3, [r3, #1832]	; 0x728
 80099c0:	2b5a      	cmp	r3, #90	; 0x5a
 80099c2:	d106      	bne.n	80099d2 <_ZN7VL53L0X6updateEv+0x20>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3729 	ldrb.w	r3, [r3, #1833]	; 0x729
 80099ca:	2b5a      	cmp	r3, #90	; 0x5a
 80099cc:	d101      	bne.n	80099d2 <_ZN7VL53L0X6updateEv+0x20>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e000      	b.n	80099d4 <_ZN7VL53L0X6updateEv+0x22>
 80099d2:	2300      	movs	r3, #0
 80099d4:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 80099d6:	7bbb      	ldrb	r3, [r7, #14]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d014      	beq.n	8009a06 <_ZN7VL53L0X6updateEv+0x54>
	{
	    this->_distance = _rxBuff[4] << 8 | _rxBuff[5];
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 372c 	ldrb.w	r3, [r3, #1836]	; 0x72c
 80099e2:	021b      	lsls	r3, r3, #8
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	f892 272d 	ldrb.w	r2, [r2, #1837]	; 0x72d
 80099ea:	4313      	orrs	r3, r2
 80099ec:	461a      	mov	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
	    this->computeMPC();
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f853 	bl	8009aa0 <_ZN7VL53L0X10computeMPCEv>

		this->resetTimeoutCounter();
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3336      	adds	r3, #54	; 0x36
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe ff7e 	bl	8008900 <_ZN7Timeout19resetTimeoutCounterEv>
 8009a04:	e02d      	b.n	8009a62 <_ZN7VL53L0X6updateEv+0xb0>
	}
	else if (this->_wrongDataReceived==false)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d128      	bne.n	8009a62 <_ZN7VL53L0X6updateEv+0xb0>
	{
		for (uint8_t iter=0;iter<this->packetLength-1U;++iter)
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b06      	cmp	r3, #6
 8009a18:	d823      	bhi.n	8009a62 <_ZN7VL53L0X6updateEv+0xb0>
		{
			if ((this->_rxBuff[iter]==this->FIRST_BIT) && (this->_rxBuff[iter+1U]==this->SECOND_BIT))
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f893 3728 	ldrb.w	r3, [r3, #1832]	; 0x728
 8009a24:	2b5a      	cmp	r3, #90	; 0x5a
 8009a26:	d118      	bne.n	8009a5a <_ZN7VL53L0X6updateEv+0xa8>
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f893 3728 	ldrb.w	r3, [r3, #1832]	; 0x728
 8009a34:	2b5a      	cmp	r3, #90	; 0x5a
 8009a36:	d110      	bne.n	8009a5a <_ZN7VL53L0X6updateEv+0xa8>
			{
				HAL_UART_Receive_DMA (this->_uartPort, this->_rxBuff, this->packetLength+iter);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f503 61e5 	add.w	r1, r3, #1832	; 0x728
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	3308      	adds	r3, #8
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f006 fef2 	bl	8010834 <HAL_UART_Receive_DMA>
				this->_wrongDataReceived = true;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
				return;
 8009a58:	e01f      	b.n	8009a9a <_ZN7VL53L0X6updateEv+0xe8>
		for (uint8_t iter=0;iter<this->packetLength-1U;++iter)
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	73fb      	strb	r3, [r7, #15]
 8009a60:	e7d8      	b.n	8009a14 <_ZN7VL53L0X6updateEv+0x62>
			}
		}
	}

	if (this->_wrongDataReceived == true)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 3738 	ldrb.w	r3, [r3, #1848]	; 0x738
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d103      	bne.n	8009a74 <_ZN7VL53L0X6updateEv+0xc2>
	{
		this->_wrongDataReceived = false;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
	}

	HAL_UART_Receive_DMA(this->_uartPort, this->_rxBuff, this->packetLength);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8009a7e:	2208      	movs	r2, #8
 8009a80:	4619      	mov	r1, r3
 8009a82:	f006 fed7 	bl	8010834 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->_uartPortDMA, DMA_IT_HT);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0208 	bic.w	r2, r2, #8
 8009a98:	601a      	str	r2, [r3, #0]
}
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <_ZN7VL53L0X10computeMPCEv>:

void VL53L0X::computeMPC()
{
 8009aa0:	b590      	push	{r4, r7, lr}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8009aa8:	f7f7 feaa 	bl	8001800 <_ZN30FlightControllorImplementation11getInstanceEv>
 8009aac:	60f8      	str	r0, [r7, #12]

	if (flightControllerInstance->getCurrentFaultsStatus() == FaultsStatus::OKAY)
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7f7 fb3e 	bl	8001130 <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bf0c      	ite	eq
 8009aba:	2301      	moveq	r3, #1
 8009abc:	2300      	movne	r3, #0
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d06d      	beq.n	8009ba0 <_ZN7VL53L0X10computeMPCEv+0x100>
	{
		this->_filteredDistance = this->_lpf.lsim(this->getAltitudeM());
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f503 64e0 	add.w	r4, r3, #1792	; 0x700
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f872 	bl	8009bb4 <_ZN7VL53L0X12getAltitudeMEv>
 8009ad0:	eef0 7a40 	vmov.f32	s15, s0
 8009ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f7ff fbd3 	bl	8009284 <_ZN13LowPassFilter4lsimEf>
 8009ade:	eef0 7a40 	vmov.f32	s15, s0
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009ae8:	edc3 7a00 	vstr	s15, [r3]

		if (flightControllerInstance->getFrSkyRXinstance().getRU()==0)
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f7f7 fac4 	bl	800107a <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8009af2:	4603      	mov	r3, r0
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fc fb13 	bl	8006120 <_ZN7FrSkyRX5getRUEv>
 8009afa:	4603      	mov	r3, r0
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	bf0c      	ite	eq
 8009b02:	2301      	moveq	r3, #1
 8009b04:	2300      	movne	r3, #0
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d005      	beq.n	8009b18 <_ZN7VL53L0X10computeMPCEv+0x78>
		{
			altRef = -1;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 8009b12:	4a25      	ldr	r2, [pc, #148]	; (8009ba8 <_ZN7VL53L0X10computeMPCEv+0x108>)
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	e004      	b.n	8009b22 <_ZN7VL53L0X10computeMPCEv+0x82>
		} else
		{
			altRef = 0.15;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 8009b1e:	4a23      	ldr	r2, [pc, #140]	; (8009bac <_ZN7VL53L0X10computeMPCEv+0x10c>)
 8009b20:	601a      	str	r2, [r3, #0]
		}

		this->_mpcOut = this->_mpc.predict(_filteredDistance,altRef);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009b2e:	edd3 7a00 	vldr	s15, [r3]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 8009b38:	ed93 7a00 	vldr	s14, [r3]
 8009b3c:	eef0 0a47 	vmov.f32	s1, s14
 8009b40:	eeb0 0a67 	vmov.f32	s0, s15
 8009b44:	4610      	mov	r0, r2
 8009b46:	f7ff fdef 	bl	8009728 <_ZN14MPC_Controller7predictEff>
 8009b4a:	eef0 7a40 	vmov.f32	s15, s0
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8009b54:	edc3 7a00 	vstr	s15, [r3]

		this->_mpcOut = this->_mpcOut-(this->_filteredDistance - this->_prevFilteredDistance)*5000;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8009b5e:	ed93 7a00 	vldr	s14, [r3]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009b68:	edd3 6a00 	vldr	s13, [r3]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8009b72:	edd3 7a00 	vldr	s15, [r3]
 8009b76:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009b7a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8009bb0 <_ZN7VL53L0X10computeMPCEv+0x110>
 8009b7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8009b8c:	edc3 7a00 	vstr	s15, [r3]
		this->_prevFilteredDistance = _filteredDistance;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8009b9e:	601a      	str	r2, [r3, #0]
		if (this->_mpcOut<0)
		{
			this->_mpcOut = 0;
		}*/
	}
}
 8009ba0:	bf00      	nop
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd90      	pop	{r4, r7, pc}
 8009ba8:	bf800000 	.word	0xbf800000
 8009bac:	3e19999a 	.word	0x3e19999a
 8009bb0:	459c4000 	.word	0x459c4000

08009bb4 <_ZN7VL53L0X12getAltitudeMEv>:

float VL53L0X::getAltitudeM(void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	return static_cast<float>(this->_distance)/1000.0F;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 373c 	ldr.w	r3, [r3, #1852]	; 0x73c
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8009be4 <_ZN7VL53L0X12getAltitudeMEv+0x30>
 8009bce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009bd2:	eef0 7a66 	vmov.f32	s15, s13
}
 8009bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	447a0000 	.word	0x447a0000

08009be8 <_ZN7VL53L0X9getMPCoutEv>:

float VL53L0X::getMPCout(void)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	return this->_mpcOut;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	ee07 3a90 	vmov	s15, r3
}
 8009bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
	...

08009c0c <_ZN7VL53L0X19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE>:
{
	return this->_distance;
}

const char* VL53L0X::getSensorValues_str(std::set<SENSOR_DATA_PARAMETER> &senorsList)
{
 8009c0c:	b590      	push	{r4, r7, lr}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(SENSOR_DATA_PARAMETER::VL53_DISTANCE)!=senorsList.end())
 8009c1e:	2314      	movs	r3, #20
 8009c20:	613b      	str	r3, [r7, #16]
 8009c22:	f107 0310 	add.w	r3, r7, #16
 8009c26:	4619      	mov	r1, r3
 8009c28:	6838      	ldr	r0, [r7, #0]
 8009c2a:	f7fb fa67 	bl	80050fc <_ZNSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE4findERKS0_>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	6838      	ldr	r0, [r7, #0]
 8009c34:	f7fb fa7b 	bl	800512e <_ZNKSt3setI21SENSOR_DATA_PARAMETERSt4lessIS0_ESaIS0_EE3endEv>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	617b      	str	r3, [r7, #20]
 8009c3c:	f107 0214 	add.w	r2, r7, #20
 8009c40:	f107 030c 	add.w	r3, r7, #12
 8009c44:	4611      	mov	r1, r2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fb fa7e 	bl	8005148 <_ZStneRKSt23_Rb_tree_const_iteratorI21SENSOR_DATA_PARAMETERES3_>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d03f      	beq.n	8009cd2 <_ZN7VL53L0X19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0xc6>
	{
		strcat(packet,toCharArray(_distanceM));
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	1d1c      	adds	r4, r3, #4
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8009c5e:	edd3 7a00 	vldr	s15, [r3]
 8009c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c66:	ee17 1a90 	vmov	r1, s15
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fa fa54 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8009c70:	4603      	mov	r3, r0
 8009c72:	4619      	mov	r1, r3
 8009c74:	4620      	mov	r0, r4
 8009c76:	f013 ff11 	bl	801da9c <strcat>
		strcat(packet,",");
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	1d1c      	adds	r4, r3, #4
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7f6 fb00 	bl	8000284 <strlen>
 8009c84:	4603      	mov	r3, r0
 8009c86:	4423      	add	r3, r4
 8009c88:	4915      	ldr	r1, [pc, #84]	; (8009ce0 <_ZN7VL53L0X19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0xd4>)
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	8013      	strh	r3, [r2, #0]
		strcat(packet,toCharArray(_filteredDistance));
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	1d1c      	adds	r4, r3, #4
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009c9e:	edd3 7a00 	vldr	s15, [r3]
 8009ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ca6:	ee17 1a90 	vmov	r1, s15
 8009caa:	4610      	mov	r0, r2
 8009cac:	f7fa fa34 	bl	8004118 <_ZN15PrintableSensor11toCharArrayEi>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f013 fef1 	bl	801da9c <strcat>
		strcat(packet,",");
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	1d1c      	adds	r4, r3, #4
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7f6 fae0 	bl	8000284 <strlen>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	4423      	add	r3, r4
 8009cc8:	4905      	ldr	r1, [pc, #20]	; (8009ce0 <_ZN7VL53L0X19getSensorValues_strERSt3setI21SENSOR_DATA_PARAMETERSt4lessIS1_ESaIS1_EE+0xd4>)
 8009cca:	461a      	mov	r2, r3
 8009ccc:	460b      	mov	r3, r1
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	8013      	strh	r3, [r2, #0]
	}
	return packet;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3304      	adds	r3, #4
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	371c      	adds	r7, #28
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd90      	pop	{r4, r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	0801e4a0 	.word	0x0801e4a0

08009ce4 <_ZSt6fill_nIPfifET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8009ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8009cf0:	68fc      	ldr	r4, [r7, #12]
 8009cf2:	68b8      	ldr	r0, [r7, #8]
 8009cf4:	f7ff fc78 	bl	80095e8 <_ZSt17__size_to_integeri>
 8009cf8:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8009cfa:	f107 030c 	add.w	r3, r7, #12
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 f80b 	bl	8009d1a <_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8009d04:	4633      	mov	r3, r6
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	4629      	mov	r1, r5
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 f810 	bl	8009d30 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag>
 8009d10:	4603      	mov	r3, r0
    }
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d1a <_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8009d22:	bf00      	nop
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	dc01      	bgt.n	8009d48 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	e00c      	b.n	8009d62 <_ZSt10__fill_n_aIPfifET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4413      	add	r3, r2
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	4619      	mov	r1, r3
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f808 	bl	8009d6a <_ZSt8__fill_aIPffEvT_S1_RKT0_>
      return __first + __n;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	4413      	add	r3, r2
    }
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <_ZSt8__fill_aIPffEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	68b9      	ldr	r1, [r7, #8]
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 f804 	bl	8009d88 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8009d80:	bf00      	nop
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d006      	beq.n	8009db0 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3304      	adds	r3, #4
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	e7f4      	b.n	8009d9a <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 8009db0:	bf00      	nop
 8009db2:	371c      	adds	r7, #28
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009dc0:	4b0e      	ldr	r3, [pc, #56]	; (8009dfc <HAL_Init+0x40>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a0d      	ldr	r2, [pc, #52]	; (8009dfc <HAL_Init+0x40>)
 8009dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009dcc:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <HAL_Init+0x40>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a0a      	ldr	r2, [pc, #40]	; (8009dfc <HAL_Init+0x40>)
 8009dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009dd8:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <HAL_Init+0x40>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a07      	ldr	r2, [pc, #28]	; (8009dfc <HAL_Init+0x40>)
 8009dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009de4:	2003      	movs	r0, #3
 8009de6:	f000 fd0e 	bl	800a806 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009dea:	200f      	movs	r0, #15
 8009dec:	f7f9 ff9c 	bl	8003d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009df0:	f7f9 faee 	bl	80033d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	40023c00 	.word	0x40023c00

08009e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009e00:	b480      	push	{r7}
 8009e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009e04:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <HAL_IncTick+0x20>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <HAL_IncTick+0x24>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4413      	add	r3, r2
 8009e10:	4a04      	ldr	r2, [pc, #16]	; (8009e24 <HAL_IncTick+0x24>)
 8009e12:	6013      	str	r3, [r2, #0]
}
 8009e14:	bf00      	nop
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	2000000c 	.word	0x2000000c
 8009e24:	20000fa4 	.word	0x20000fa4

08009e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8009e2c:	4b03      	ldr	r3, [pc, #12]	; (8009e3c <HAL_GetTick+0x14>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	20000fa4 	.word	0x20000fa4

08009e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009e48:	f7ff ffee 	bl	8009e28 <HAL_GetTick>
 8009e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e58:	d005      	beq.n	8009e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <HAL_Delay+0x44>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009e66:	bf00      	nop
 8009e68:	f7ff ffde 	bl	8009e28 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d8f7      	bhi.n	8009e68 <HAL_Delay+0x28>
  {
  }
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	2000000c 	.word	0x2000000c

08009e88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e033      	b.n	8009f06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d109      	bne.n	8009eba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7f9 fabe 	bl	8003428 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f003 0310 	and.w	r3, r3, #16
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d118      	bne.n	8009ef8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009ece:	f023 0302 	bic.w	r3, r3, #2
 8009ed2:	f043 0202 	orr.w	r2, r3, #2
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa68 	bl	800a3b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	f023 0303 	bic.w	r3, r3, #3
 8009eee:	f043 0201 	orr.w	r2, r3, #1
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8009ef6:	e001      	b.n	8009efc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d101      	bne.n	8009f2e <HAL_ADC_Start_DMA+0x1e>
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e0e9      	b.n	800a102 <HAL_ADC_Start_DMA+0x1f2>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d018      	beq.n	8009f76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689a      	ldr	r2, [r3, #8]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0201 	orr.w	r2, r2, #1
 8009f52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009f54:	4b6d      	ldr	r3, [pc, #436]	; (800a10c <HAL_ADC_Start_DMA+0x1fc>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a6d      	ldr	r2, [pc, #436]	; (800a110 <HAL_ADC_Start_DMA+0x200>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	0c9a      	lsrs	r2, r3, #18
 8009f60:	4613      	mov	r3, r2
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	4413      	add	r3, r2
 8009f66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009f68:	e002      	b.n	8009f70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1f9      	bne.n	8009f6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f84:	d107      	bne.n	8009f96 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f94:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	f040 80a1 	bne.w	800a0e8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009fae:	f023 0301 	bic.w	r3, r3, #1
 8009fb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d007      	beq.n	8009fd8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009fd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fe4:	d106      	bne.n	8009ff4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fea:	f023 0206 	bic.w	r2, r3, #6
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	645a      	str	r2, [r3, #68]	; 0x44
 8009ff2:	e002      	b.n	8009ffa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a002:	4b44      	ldr	r3, [pc, #272]	; (800a114 <HAL_ADC_Start_DMA+0x204>)
 800a004:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00a:	4a43      	ldr	r2, [pc, #268]	; (800a118 <HAL_ADC_Start_DMA+0x208>)
 800a00c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a012:	4a42      	ldr	r2, [pc, #264]	; (800a11c <HAL_ADC_Start_DMA+0x20c>)
 800a014:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01a:	4a41      	ldr	r2, [pc, #260]	; (800a120 <HAL_ADC_Start_DMA+0x210>)
 800a01c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a026:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a036:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a046:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	334c      	adds	r3, #76	; 0x4c
 800a052:	4619      	mov	r1, r3
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f000 fcb8 	bl	800a9cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f003 031f 	and.w	r3, r3, #31
 800a064:	2b00      	cmp	r3, #0
 800a066:	d12a      	bne.n	800a0be <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a2d      	ldr	r2, [pc, #180]	; (800a124 <HAL_ADC_Start_DMA+0x214>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d015      	beq.n	800a09e <HAL_ADC_Start_DMA+0x18e>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a2c      	ldr	r2, [pc, #176]	; (800a128 <HAL_ADC_Start_DMA+0x218>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d105      	bne.n	800a088 <HAL_ADC_Start_DMA+0x178>
 800a07c:	4b25      	ldr	r3, [pc, #148]	; (800a114 <HAL_ADC_Start_DMA+0x204>)
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f003 031f 	and.w	r3, r3, #31
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00a      	beq.n	800a09e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a27      	ldr	r2, [pc, #156]	; (800a12c <HAL_ADC_Start_DMA+0x21c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d136      	bne.n	800a100 <HAL_ADC_Start_DMA+0x1f0>
 800a092:	4b20      	ldr	r3, [pc, #128]	; (800a114 <HAL_ADC_Start_DMA+0x204>)
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f003 0310 	and.w	r3, r3, #16
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d130      	bne.n	800a100 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d129      	bne.n	800a100 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a0ba:	609a      	str	r2, [r3, #8]
 800a0bc:	e020      	b.n	800a100 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a18      	ldr	r2, [pc, #96]	; (800a124 <HAL_ADC_Start_DMA+0x214>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d11b      	bne.n	800a100 <HAL_ADC_Start_DMA+0x1f0>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d114      	bne.n	800a100 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a0e4:	609a      	str	r2, [r3, #8]
 800a0e6:	e00b      	b.n	800a100 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ec:	f043 0210 	orr.w	r2, r3, #16
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f8:	f043 0201 	orr.w	r2, r3, #1
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000004 	.word	0x20000004
 800a110:	431bde83 	.word	0x431bde83
 800a114:	40012300 	.word	0x40012300
 800a118:	0800a5a9 	.word	0x0800a5a9
 800a11c:	0800a663 	.word	0x0800a663
 800a120:	0800a67f 	.word	0x0800a67f
 800a124:	40012000 	.word	0x40012000
 800a128:	40012100 	.word	0x40012100
 800a12c:	40012200 	.word	0x40012200

0800a130 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a180:	2b01      	cmp	r3, #1
 800a182:	d101      	bne.n	800a188 <HAL_ADC_ConfigChannel+0x1c>
 800a184:	2302      	movs	r3, #2
 800a186:	e105      	b.n	800a394 <HAL_ADC_ConfigChannel+0x228>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b09      	cmp	r3, #9
 800a196:	d925      	bls.n	800a1e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68d9      	ldr	r1, [r3, #12]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	4413      	add	r3, r2
 800a1ac:	3b1e      	subs	r3, #30
 800a1ae:	2207      	movs	r2, #7
 800a1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b4:	43da      	mvns	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	400a      	ands	r2, r1
 800a1bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68d9      	ldr	r1, [r3, #12]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	4403      	add	r3, r0
 800a1d6:	3b1e      	subs	r3, #30
 800a1d8:	409a      	lsls	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	60da      	str	r2, [r3, #12]
 800a1e2:	e022      	b.n	800a22a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6919      	ldr	r1, [r3, #16]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	005b      	lsls	r3, r3, #1
 800a1f6:	4413      	add	r3, r2
 800a1f8:	2207      	movs	r2, #7
 800a1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fe:	43da      	mvns	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	400a      	ands	r2, r1
 800a206:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6919      	ldr	r1, [r3, #16]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	b29b      	uxth	r3, r3
 800a218:	4618      	mov	r0, r3
 800a21a:	4603      	mov	r3, r0
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	4403      	add	r3, r0
 800a220:	409a      	lsls	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2b06      	cmp	r3, #6
 800a230:	d824      	bhi.n	800a27c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	4613      	mov	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	3b05      	subs	r3, #5
 800a244:	221f      	movs	r2, #31
 800a246:	fa02 f303 	lsl.w	r3, r2, r3
 800a24a:	43da      	mvns	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	400a      	ands	r2, r1
 800a252:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4618      	mov	r0, r3
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	4613      	mov	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	3b05      	subs	r3, #5
 800a26e:	fa00 f203 	lsl.w	r2, r0, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	635a      	str	r2, [r3, #52]	; 0x34
 800a27a:	e04c      	b.n	800a316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	2b0c      	cmp	r3, #12
 800a282:	d824      	bhi.n	800a2ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	3b23      	subs	r3, #35	; 0x23
 800a296:	221f      	movs	r2, #31
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	43da      	mvns	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	400a      	ands	r2, r1
 800a2a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	3b23      	subs	r3, #35	; 0x23
 800a2c0:	fa00 f203 	lsl.w	r2, r0, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	631a      	str	r2, [r3, #48]	; 0x30
 800a2cc:	e023      	b.n	800a316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	3b41      	subs	r3, #65	; 0x41
 800a2e0:	221f      	movs	r2, #31
 800a2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e6:	43da      	mvns	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	400a      	ands	r2, r1
 800a2ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	3b41      	subs	r3, #65	; 0x41
 800a30a:	fa00 f203 	lsl.w	r2, r0, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a316:	4b22      	ldr	r3, [pc, #136]	; (800a3a0 <HAL_ADC_ConfigChannel+0x234>)
 800a318:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a21      	ldr	r2, [pc, #132]	; (800a3a4 <HAL_ADC_ConfigChannel+0x238>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d109      	bne.n	800a338 <HAL_ADC_ConfigChannel+0x1cc>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b12      	cmp	r3, #18
 800a32a:	d105      	bne.n	800a338 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a19      	ldr	r2, [pc, #100]	; (800a3a4 <HAL_ADC_ConfigChannel+0x238>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d123      	bne.n	800a38a <HAL_ADC_ConfigChannel+0x21e>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b10      	cmp	r3, #16
 800a348:	d003      	beq.n	800a352 <HAL_ADC_ConfigChannel+0x1e6>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b11      	cmp	r3, #17
 800a350:	d11b      	bne.n	800a38a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b10      	cmp	r3, #16
 800a364:	d111      	bne.n	800a38a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a366:	4b10      	ldr	r3, [pc, #64]	; (800a3a8 <HAL_ADC_ConfigChannel+0x23c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a10      	ldr	r2, [pc, #64]	; (800a3ac <HAL_ADC_ConfigChannel+0x240>)
 800a36c:	fba2 2303 	umull	r2, r3, r2, r3
 800a370:	0c9a      	lsrs	r2, r3, #18
 800a372:	4613      	mov	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4413      	add	r3, r2
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a37c:	e002      	b.n	800a384 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	3b01      	subs	r3, #1
 800a382:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1f9      	bne.n	800a37e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	40012300 	.word	0x40012300
 800a3a4:	40012000 	.word	0x40012000
 800a3a8:	20000004 	.word	0x20000004
 800a3ac:	431bde83 	.word	0x431bde83

0800a3b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a3b8:	4b79      	ldr	r3, [pc, #484]	; (800a5a0 <ADC_Init+0x1f0>)
 800a3ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6859      	ldr	r1, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	021a      	lsls	r2, r3, #8
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6859      	ldr	r1, [r3, #4]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689a      	ldr	r2, [r3, #8]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a42a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6899      	ldr	r1, [r3, #8]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a442:	4a58      	ldr	r2, [pc, #352]	; (800a5a4 <ADC_Init+0x1f4>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d022      	beq.n	800a48e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a456:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6899      	ldr	r1, [r3, #8]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6899      	ldr	r1, [r3, #8]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	609a      	str	r2, [r3, #8]
 800a48c:	e00f      	b.n	800a4ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	689a      	ldr	r2, [r3, #8]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a49c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a4ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	689a      	ldr	r2, [r3, #8]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0202 	bic.w	r2, r2, #2
 800a4bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6899      	ldr	r1, [r3, #8]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	7e1b      	ldrb	r3, [r3, #24]
 800a4c8:	005a      	lsls	r2, r3, #1
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d01b      	beq.n	800a514 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685a      	ldr	r2, [r3, #4]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a4fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6859      	ldr	r1, [r3, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	3b01      	subs	r3, #1
 800a508:	035a      	lsls	r2, r3, #13
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	430a      	orrs	r2, r1
 800a510:	605a      	str	r2, [r3, #4]
 800a512:	e007      	b.n	800a524 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a522:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	3b01      	subs	r3, #1
 800a540:	051a      	lsls	r2, r3, #20
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	689a      	ldr	r2, [r3, #8]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6899      	ldr	r1, [r3, #8]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a566:	025a      	lsls	r2, r3, #9
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a57e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6899      	ldr	r1, [r3, #8]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	029a      	lsls	r2, r3, #10
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	430a      	orrs	r2, r1
 800a592:	609a      	str	r2, [r3, #8]
}
 800a594:	bf00      	nop
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	40012300 	.word	0x40012300
 800a5a4:	0f000001 	.word	0x0f000001

0800a5a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d13c      	bne.n	800a63c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d12b      	bne.n	800a634 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d127      	bne.n	800a634 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d006      	beq.n	800a600 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d119      	bne.n	800a634 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f022 0220 	bic.w	r2, r2, #32
 800a60e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a624:	2b00      	cmp	r3, #0
 800a626:	d105      	bne.n	800a634 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	f043 0201 	orr.w	r2, r3, #1
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f7ff fd7b 	bl	800a130 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a63a:	e00e      	b.n	800a65a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f7ff fd85 	bl	800a158 <HAL_ADC_ErrorCallback>
}
 800a64e:	e004      	b.n	800a65a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	4798      	blx	r3
}
 800a65a:	bf00      	nop
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f7ff fd67 	bl	800a144 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a676:	bf00      	nop
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b084      	sub	sp, #16
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2240      	movs	r2, #64	; 0x40
 800a690:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a696:	f043 0204 	orr.w	r2, r3, #4
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7ff fd5a 	bl	800a158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a6a4:	bf00      	nop
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <__NVIC_SetPriorityGrouping>:
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6bc:	4b0c      	ldr	r3, [pc, #48]	; (800a6f0 <__NVIC_SetPriorityGrouping+0x44>)
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a6d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a6d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a6de:	4a04      	ldr	r2, [pc, #16]	; (800a6f0 <__NVIC_SetPriorityGrouping+0x44>)
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	60d3      	str	r3, [r2, #12]
}
 800a6e4:	bf00      	nop
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	e000ed00 	.word	0xe000ed00

0800a6f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a6f8:	4b04      	ldr	r3, [pc, #16]	; (800a70c <__NVIC_GetPriorityGrouping+0x18>)
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	0a1b      	lsrs	r3, r3, #8
 800a6fe:	f003 0307 	and.w	r3, r3, #7
}
 800a702:	4618      	mov	r0, r3
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	e000ed00 	.word	0xe000ed00

0800a710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a71a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	db0b      	blt.n	800a73a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	f003 021f 	and.w	r2, r3, #31
 800a728:	4907      	ldr	r1, [pc, #28]	; (800a748 <__NVIC_EnableIRQ+0x38>)
 800a72a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a72e:	095b      	lsrs	r3, r3, #5
 800a730:	2001      	movs	r0, #1
 800a732:	fa00 f202 	lsl.w	r2, r0, r2
 800a736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	e000e100 	.word	0xe000e100

0800a74c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	6039      	str	r1, [r7, #0]
 800a756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	db0a      	blt.n	800a776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	b2da      	uxtb	r2, r3
 800a764:	490c      	ldr	r1, [pc, #48]	; (800a798 <__NVIC_SetPriority+0x4c>)
 800a766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a76a:	0112      	lsls	r2, r2, #4
 800a76c:	b2d2      	uxtb	r2, r2
 800a76e:	440b      	add	r3, r1
 800a770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a774:	e00a      	b.n	800a78c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	4908      	ldr	r1, [pc, #32]	; (800a79c <__NVIC_SetPriority+0x50>)
 800a77c:	79fb      	ldrb	r3, [r7, #7]
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	3b04      	subs	r3, #4
 800a784:	0112      	lsls	r2, r2, #4
 800a786:	b2d2      	uxtb	r2, r2
 800a788:	440b      	add	r3, r1
 800a78a:	761a      	strb	r2, [r3, #24]
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	e000e100 	.word	0xe000e100
 800a79c:	e000ed00 	.word	0xe000ed00

0800a7a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b089      	sub	sp, #36	; 0x24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f003 0307 	and.w	r3, r3, #7
 800a7b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	f1c3 0307 	rsb	r3, r3, #7
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	bf28      	it	cs
 800a7be:	2304      	movcs	r3, #4
 800a7c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	2b06      	cmp	r3, #6
 800a7c8:	d902      	bls.n	800a7d0 <NVIC_EncodePriority+0x30>
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	3b03      	subs	r3, #3
 800a7ce:	e000      	b.n	800a7d2 <NVIC_EncodePriority+0x32>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	fa02 f303 	lsl.w	r3, r2, r3
 800a7de:	43da      	mvns	r2, r3
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	401a      	ands	r2, r3
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a7e8:	f04f 31ff 	mov.w	r1, #4294967295
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f2:	43d9      	mvns	r1, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7f8:	4313      	orrs	r3, r2
         );
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3724      	adds	r7, #36	; 0x24
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7ff ff4c 	bl	800a6ac <__NVIC_SetPriorityGrouping>
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a82e:	f7ff ff61 	bl	800a6f4 <__NVIC_GetPriorityGrouping>
 800a832:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	68b9      	ldr	r1, [r7, #8]
 800a838:	6978      	ldr	r0, [r7, #20]
 800a83a:	f7ff ffb1 	bl	800a7a0 <NVIC_EncodePriority>
 800a83e:	4602      	mov	r2, r0
 800a840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff ff80 	bl	800a74c <__NVIC_SetPriority>
}
 800a84c:	bf00      	nop
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a85e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff ff54 	bl	800a710 <__NVIC_EnableIRQ>
}
 800a868:	bf00      	nop
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a878:	2300      	movs	r3, #0
 800a87a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a87c:	f7ff fad4 	bl	8009e28 <HAL_GetTick>
 800a880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e099      	b.n	800a9c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 0201 	bic.w	r2, r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8ac:	e00f      	b.n	800a8ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a8ae:	f7ff fabb 	bl	8009e28 <HAL_GetTick>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	2b05      	cmp	r3, #5
 800a8ba:	d908      	bls.n	800a8ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2203      	movs	r2, #3
 800a8c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e078      	b.n	800a9c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1e8      	bne.n	800a8ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	4b38      	ldr	r3, [pc, #224]	; (800a9c8 <HAL_DMA_Init+0x158>)
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a8fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a1b      	ldr	r3, [r3, #32]
 800a918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	2b04      	cmp	r3, #4
 800a926:	d107      	bne.n	800a938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a930:	4313      	orrs	r3, r2
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	4313      	orrs	r3, r2
 800a936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f023 0307 	bic.w	r3, r3, #7
 800a94e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	4313      	orrs	r3, r2
 800a958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95e:	2b04      	cmp	r3, #4
 800a960:	d117      	bne.n	800a992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	4313      	orrs	r3, r2
 800a96a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00e      	beq.n	800a992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fb01 	bl	800af7c <DMA_CheckFifoParam>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d008      	beq.n	800a992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2240      	movs	r2, #64	; 0x40
 800a984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a98e:	2301      	movs	r3, #1
 800a990:	e016      	b.n	800a9c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	697a      	ldr	r2, [r7, #20]
 800a998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fab8 	bl	800af10 <DMA_CalcBaseAndBitshift>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a8:	223f      	movs	r2, #63	; 0x3f
 800a9aa:	409a      	lsls	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	f010803f 	.word	0xf010803f

0800a9cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d101      	bne.n	800a9f2 <HAL_DMA_Start_IT+0x26>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	e040      	b.n	800aa74 <HAL_DMA_Start_IT+0xa8>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d12f      	bne.n	800aa66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2202      	movs	r2, #2
 800aa0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	68b9      	ldr	r1, [r7, #8]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 fa4a 	bl	800aeb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa24:	223f      	movs	r2, #63	; 0x3f
 800aa26:	409a      	lsls	r2, r3
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f042 0216 	orr.w	r2, r2, #22
 800aa3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d007      	beq.n	800aa54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f042 0208 	orr.w	r2, r2, #8
 800aa52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0201 	orr.w	r2, r2, #1
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e005      	b.n	800aa72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800aa6e:	2302      	movs	r3, #2
 800aa70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800aa8a:	f7ff f9cd 	bl	8009e28 <HAL_GetTick>
 800aa8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d008      	beq.n	800aaae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2280      	movs	r2, #128	; 0x80
 800aaa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e052      	b.n	800ab54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f022 0216 	bic.w	r2, r2, #22
 800aabc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	695a      	ldr	r2, [r3, #20]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aacc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d103      	bne.n	800aade <HAL_DMA_Abort+0x62>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d007      	beq.n	800aaee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f022 0208 	bic.w	r2, r2, #8
 800aaec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0201 	bic.w	r2, r2, #1
 800aafc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aafe:	e013      	b.n	800ab28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ab00:	f7ff f992 	bl	8009e28 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b05      	cmp	r3, #5
 800ab0c:	d90c      	bls.n	800ab28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2220      	movs	r2, #32
 800ab12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2203      	movs	r2, #3
 800ab18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e015      	b.n	800ab54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1e4      	bne.n	800ab00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3a:	223f      	movs	r2, #63	; 0x3f
 800ab3c:	409a      	lsls	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d004      	beq.n	800ab7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2280      	movs	r2, #128	; 0x80
 800ab74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e00c      	b.n	800ab94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f022 0201 	bic.w	r2, r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aba8:	2300      	movs	r3, #0
 800abaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800abac:	4b8e      	ldr	r3, [pc, #568]	; (800ade8 <HAL_DMA_IRQHandler+0x248>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a8e      	ldr	r2, [pc, #568]	; (800adec <HAL_DMA_IRQHandler+0x24c>)
 800abb2:	fba2 2303 	umull	r2, r3, r2, r3
 800abb6:	0a9b      	lsrs	r3, r3, #10
 800abb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abca:	2208      	movs	r2, #8
 800abcc:	409a      	lsls	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	4013      	ands	r3, r2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d01a      	beq.n	800ac0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0304 	and.w	r3, r3, #4
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d013      	beq.n	800ac0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f022 0204 	bic.w	r2, r2, #4
 800abf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf8:	2208      	movs	r2, #8
 800abfa:	409a      	lsls	r2, r3
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac04:	f043 0201 	orr.w	r2, r3, #1
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac10:	2201      	movs	r2, #1
 800ac12:	409a      	lsls	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4013      	ands	r3, r2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d012      	beq.n	800ac42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00b      	beq.n	800ac42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac2e:	2201      	movs	r2, #1
 800ac30:	409a      	lsls	r2, r3
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3a:	f043 0202 	orr.w	r2, r3, #2
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac46:	2204      	movs	r2, #4
 800ac48:	409a      	lsls	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d012      	beq.n	800ac78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00b      	beq.n	800ac78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac64:	2204      	movs	r2, #4
 800ac66:	409a      	lsls	r2, r3
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac70:	f043 0204 	orr.w	r2, r3, #4
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac7c:	2210      	movs	r2, #16
 800ac7e:	409a      	lsls	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4013      	ands	r3, r2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d043      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0308 	and.w	r3, r3, #8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d03c      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9a:	2210      	movs	r2, #16
 800ac9c:	409a      	lsls	r2, r3
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d018      	beq.n	800ace2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d108      	bne.n	800acd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d024      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	4798      	blx	r3
 800acce:	e01f      	b.n	800ad10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d01b      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	4798      	blx	r3
 800ace0:	e016      	b.n	800ad10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acec:	2b00      	cmp	r3, #0
 800acee:	d107      	bne.n	800ad00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0208 	bic.w	r2, r2, #8
 800acfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad14:	2220      	movs	r2, #32
 800ad16:	409a      	lsls	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 808f 	beq.w	800ae40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0310 	and.w	r3, r3, #16
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 8087 	beq.w	800ae40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad36:	2220      	movs	r2, #32
 800ad38:	409a      	lsls	r2, r3
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b05      	cmp	r3, #5
 800ad48:	d136      	bne.n	800adb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f022 0216 	bic.w	r2, r2, #22
 800ad58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	695a      	ldr	r2, [r3, #20]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d103      	bne.n	800ad7a <HAL_DMA_IRQHandler+0x1da>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d007      	beq.n	800ad8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 0208 	bic.w	r2, r2, #8
 800ad88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad8e:	223f      	movs	r2, #63	; 0x3f
 800ad90:	409a      	lsls	r2, r3
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d07e      	beq.n	800aeac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	4798      	blx	r3
        }
        return;
 800adb6:	e079      	b.n	800aeac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d01d      	beq.n	800ae02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10d      	bne.n	800adf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add8:	2b00      	cmp	r3, #0
 800adda:	d031      	beq.n	800ae40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	4798      	blx	r3
 800ade4:	e02c      	b.n	800ae40 <HAL_DMA_IRQHandler+0x2a0>
 800ade6:	bf00      	nop
 800ade8:	20000004 	.word	0x20000004
 800adec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d023      	beq.n	800ae40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	4798      	blx	r3
 800ae00:	e01e      	b.n	800ae40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10f      	bne.n	800ae30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f022 0210 	bic.w	r2, r2, #16
 800ae1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d003      	beq.n	800ae40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d032      	beq.n	800aeae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d022      	beq.n	800ae9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2205      	movs	r2, #5
 800ae58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f022 0201 	bic.w	r2, r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	60bb      	str	r3, [r7, #8]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d307      	bcc.n	800ae88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1f2      	bne.n	800ae6c <HAL_DMA_IRQHandler+0x2cc>
 800ae86:	e000      	b.n	800ae8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ae88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d005      	beq.n	800aeae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	4798      	blx	r3
 800aeaa:	e000      	b.n	800aeae <HAL_DMA_IRQHandler+0x30e>
        return;
 800aeac:	bf00      	nop
    }
  }
}
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
 800aec0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aed0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	2b40      	cmp	r3, #64	; 0x40
 800aee0:	d108      	bne.n	800aef4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800aef2:	e007      	b.n	800af04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	60da      	str	r2, [r3, #12]
}
 800af04:	bf00      	nop
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	3b10      	subs	r3, #16
 800af20:	4a14      	ldr	r2, [pc, #80]	; (800af74 <DMA_CalcBaseAndBitshift+0x64>)
 800af22:	fba2 2303 	umull	r2, r3, r2, r3
 800af26:	091b      	lsrs	r3, r3, #4
 800af28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af2a:	4a13      	ldr	r2, [pc, #76]	; (800af78 <DMA_CalcBaseAndBitshift+0x68>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d909      	bls.n	800af52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af46:	f023 0303 	bic.w	r3, r3, #3
 800af4a:	1d1a      	adds	r2, r3, #4
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	659a      	str	r2, [r3, #88]	; 0x58
 800af50:	e007      	b.n	800af62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af5a:	f023 0303 	bic.w	r3, r3, #3
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800af66:	4618      	mov	r0, r3
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	aaaaaaab 	.word	0xaaaaaaab
 800af78:	08032650 	.word	0x08032650

0800af7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d11f      	bne.n	800afd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d856      	bhi.n	800b04a <DMA_CheckFifoParam+0xce>
 800af9c:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <DMA_CheckFifoParam+0x28>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afb5 	.word	0x0800afb5
 800afa8:	0800afc7 	.word	0x0800afc7
 800afac:	0800afb5 	.word	0x0800afb5
 800afb0:	0800b04b 	.word	0x0800b04b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d046      	beq.n	800b04e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800afc4:	e043      	b.n	800b04e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800afce:	d140      	bne.n	800b052 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800afd4:	e03d      	b.n	800b052 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afde:	d121      	bne.n	800b024 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d837      	bhi.n	800b056 <DMA_CheckFifoParam+0xda>
 800afe6:	a201      	add	r2, pc, #4	; (adr r2, 800afec <DMA_CheckFifoParam+0x70>)
 800afe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afec:	0800affd 	.word	0x0800affd
 800aff0:	0800b003 	.word	0x0800b003
 800aff4:	0800affd 	.word	0x0800affd
 800aff8:	0800b015 	.word	0x0800b015
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	73fb      	strb	r3, [r7, #15]
      break;
 800b000:	e030      	b.n	800b064 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d025      	beq.n	800b05a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b012:	e022      	b.n	800b05a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b01c:	d11f      	bne.n	800b05e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b022:	e01c      	b.n	800b05e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2b02      	cmp	r3, #2
 800b028:	d903      	bls.n	800b032 <DMA_CheckFifoParam+0xb6>
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d003      	beq.n	800b038 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b030:	e018      	b.n	800b064 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	73fb      	strb	r3, [r7, #15]
      break;
 800b036:	e015      	b.n	800b064 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00e      	beq.n	800b062 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	73fb      	strb	r3, [r7, #15]
      break;
 800b048:	e00b      	b.n	800b062 <DMA_CheckFifoParam+0xe6>
      break;
 800b04a:	bf00      	nop
 800b04c:	e00a      	b.n	800b064 <DMA_CheckFifoParam+0xe8>
      break;
 800b04e:	bf00      	nop
 800b050:	e008      	b.n	800b064 <DMA_CheckFifoParam+0xe8>
      break;
 800b052:	bf00      	nop
 800b054:	e006      	b.n	800b064 <DMA_CheckFifoParam+0xe8>
      break;
 800b056:	bf00      	nop
 800b058:	e004      	b.n	800b064 <DMA_CheckFifoParam+0xe8>
      break;
 800b05a:	bf00      	nop
 800b05c:	e002      	b.n	800b064 <DMA_CheckFifoParam+0xe8>
      break;   
 800b05e:	bf00      	nop
 800b060:	e000      	b.n	800b064 <DMA_CheckFifoParam+0xe8>
      break;
 800b062:	bf00      	nop
    }
  } 
  
  return status; 
 800b064:	7bfb      	ldrb	r3, [r7, #15]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop

0800b074 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b086:	4b23      	ldr	r3, [pc, #140]	; (800b114 <HAL_FLASH_Program+0xa0>)
 800b088:	7e1b      	ldrb	r3, [r3, #24]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d101      	bne.n	800b092 <HAL_FLASH_Program+0x1e>
 800b08e:	2302      	movs	r3, #2
 800b090:	e03b      	b.n	800b10a <HAL_FLASH_Program+0x96>
 800b092:	4b20      	ldr	r3, [pc, #128]	; (800b114 <HAL_FLASH_Program+0xa0>)
 800b094:	2201      	movs	r2, #1
 800b096:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b09c:	f000 f87c 	bl	800b198 <FLASH_WaitForLastOperation>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d12b      	bne.n	800b102 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d105      	bne.n	800b0bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800b0b0:	783b      	ldrb	r3, [r7, #0]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	68b8      	ldr	r0, [r7, #8]
 800b0b6:	f000 f927 	bl	800b308 <FLASH_Program_Byte>
 800b0ba:	e016      	b.n	800b0ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d105      	bne.n	800b0ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800b0c2:	883b      	ldrh	r3, [r7, #0]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	68b8      	ldr	r0, [r7, #8]
 800b0c8:	f000 f8fa 	bl	800b2c0 <FLASH_Program_HalfWord>
 800b0cc:	e00d      	b.n	800b0ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d105      	bne.n	800b0e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	68b8      	ldr	r0, [r7, #8]
 800b0da:	f000 f8cf 	bl	800b27c <FLASH_Program_Word>
 800b0de:	e004      	b.n	800b0ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800b0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0e4:	68b8      	ldr	r0, [r7, #8]
 800b0e6:	f000 f897 	bl	800b218 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b0ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b0ee:	f000 f853 	bl	800b198 <FLASH_WaitForLastOperation>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800b0f6:	4b08      	ldr	r3, [pc, #32]	; (800b118 <HAL_FLASH_Program+0xa4>)
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	4a07      	ldr	r2, [pc, #28]	; (800b118 <HAL_FLASH_Program+0xa4>)
 800b0fc:	f023 0301 	bic.w	r3, r3, #1
 800b100:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b102:	4b04      	ldr	r3, [pc, #16]	; (800b114 <HAL_FLASH_Program+0xa0>)
 800b104:	2200      	movs	r2, #0
 800b106:	761a      	strb	r2, [r3, #24]
  
  return status;
 800b108:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	20000fa8 	.word	0x20000fa8
 800b118:	40023c00 	.word	0x40023c00

0800b11c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <HAL_FLASH_Unlock+0x38>)
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	da0b      	bge.n	800b146 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b12e:	4b09      	ldr	r3, [pc, #36]	; (800b154 <HAL_FLASH_Unlock+0x38>)
 800b130:	4a09      	ldr	r2, [pc, #36]	; (800b158 <HAL_FLASH_Unlock+0x3c>)
 800b132:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b134:	4b07      	ldr	r3, [pc, #28]	; (800b154 <HAL_FLASH_Unlock+0x38>)
 800b136:	4a09      	ldr	r2, [pc, #36]	; (800b15c <HAL_FLASH_Unlock+0x40>)
 800b138:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b13a:	4b06      	ldr	r3, [pc, #24]	; (800b154 <HAL_FLASH_Unlock+0x38>)
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	da01      	bge.n	800b146 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800b146:	79fb      	ldrb	r3, [r7, #7]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	40023c00 	.word	0x40023c00
 800b158:	45670123 	.word	0x45670123
 800b15c:	cdef89ab 	.word	0xcdef89ab

0800b160 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800b160:	b480      	push	{r7}
 800b162:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800b164:	4b05      	ldr	r3, [pc, #20]	; (800b17c <HAL_FLASH_Lock+0x1c>)
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	4a04      	ldr	r2, [pc, #16]	; (800b17c <HAL_FLASH_Lock+0x1c>)
 800b16a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b16e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	40023c00 	.word	0x40023c00

0800b180 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800b180:	b480      	push	{r7}
 800b182:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800b184:	4b03      	ldr	r3, [pc, #12]	; (800b194 <HAL_FLASH_GetError+0x14>)
 800b186:	69db      	ldr	r3, [r3, #28]
}  
 800b188:	4618      	mov	r0, r3
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	20000fa8 	.word	0x20000fa8

0800b198 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b1a4:	4b1a      	ldr	r3, [pc, #104]	; (800b210 <FLASH_WaitForLastOperation+0x78>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800b1aa:	f7fe fe3d 	bl	8009e28 <HAL_GetTick>
 800b1ae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b1b0:	e010      	b.n	800b1d4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b8:	d00c      	beq.n	800b1d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d007      	beq.n	800b1d0 <FLASH_WaitForLastOperation+0x38>
 800b1c0:	f7fe fe32 	bl	8009e28 <HAL_GetTick>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d201      	bcs.n	800b1d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e019      	b.n	800b208 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b1d4:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <FLASH_WaitForLastOperation+0x7c>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1e8      	bne.n	800b1b2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800b1e0:	4b0c      	ldr	r3, [pc, #48]	; (800b214 <FLASH_WaitForLastOperation+0x7c>)
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b1ec:	4b09      	ldr	r3, [pc, #36]	; (800b214 <FLASH_WaitForLastOperation+0x7c>)
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800b1f2:	4b08      	ldr	r3, [pc, #32]	; (800b214 <FLASH_WaitForLastOperation+0x7c>)
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800b1fe:	f000 f8a5 	bl	800b34c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e000      	b.n	800b208 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800b206:	2300      	movs	r3, #0
  
}  
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20000fa8 	.word	0x20000fa8
 800b214:	40023c00 	.word	0x40023c00

0800b218 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b224:	4b14      	ldr	r3, [pc, #80]	; (800b278 <FLASH_Program_DoubleWord+0x60>)
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	4a13      	ldr	r2, [pc, #76]	; (800b278 <FLASH_Program_DoubleWord+0x60>)
 800b22a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b22e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b230:	4b11      	ldr	r3, [pc, #68]	; (800b278 <FLASH_Program_DoubleWord+0x60>)
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	4a10      	ldr	r2, [pc, #64]	; (800b278 <FLASH_Program_DoubleWord+0x60>)
 800b236:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b23a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b23c:	4b0e      	ldr	r3, [pc, #56]	; (800b278 <FLASH_Program_DoubleWord+0x60>)
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	4a0d      	ldr	r2, [pc, #52]	; (800b278 <FLASH_Program_DoubleWord+0x60>)
 800b242:	f043 0301 	orr.w	r3, r3, #1
 800b246:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800b24e:	f3bf 8f6f 	isb	sy
}
 800b252:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800b254:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b258:	f04f 0200 	mov.w	r2, #0
 800b25c:	f04f 0300 	mov.w	r3, #0
 800b260:	000a      	movs	r2, r1
 800b262:	2300      	movs	r3, #0
 800b264:	68f9      	ldr	r1, [r7, #12]
 800b266:	3104      	adds	r1, #4
 800b268:	4613      	mov	r3, r2
 800b26a:	600b      	str	r3, [r1, #0]
}
 800b26c:	bf00      	nop
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	40023c00 	.word	0x40023c00

0800b27c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b286:	4b0d      	ldr	r3, [pc, #52]	; (800b2bc <FLASH_Program_Word+0x40>)
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	4a0c      	ldr	r2, [pc, #48]	; (800b2bc <FLASH_Program_Word+0x40>)
 800b28c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b290:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800b292:	4b0a      	ldr	r3, [pc, #40]	; (800b2bc <FLASH_Program_Word+0x40>)
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	4a09      	ldr	r2, [pc, #36]	; (800b2bc <FLASH_Program_Word+0x40>)
 800b298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b29c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b29e:	4b07      	ldr	r3, [pc, #28]	; (800b2bc <FLASH_Program_Word+0x40>)
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	4a06      	ldr	r2, [pc, #24]	; (800b2bc <FLASH_Program_Word+0x40>)
 800b2a4:	f043 0301 	orr.w	r3, r3, #1
 800b2a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	601a      	str	r2, [r3, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	40023c00 	.word	0x40023c00

0800b2c0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b2cc:	4b0d      	ldr	r3, [pc, #52]	; (800b304 <FLASH_Program_HalfWord+0x44>)
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	4a0c      	ldr	r2, [pc, #48]	; (800b304 <FLASH_Program_HalfWord+0x44>)
 800b2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <FLASH_Program_HalfWord+0x44>)
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	4a09      	ldr	r2, [pc, #36]	; (800b304 <FLASH_Program_HalfWord+0x44>)
 800b2de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b2e4:	4b07      	ldr	r3, [pc, #28]	; (800b304 <FLASH_Program_HalfWord+0x44>)
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	4a06      	ldr	r2, [pc, #24]	; (800b304 <FLASH_Program_HalfWord+0x44>)
 800b2ea:	f043 0301 	orr.w	r3, r3, #1
 800b2ee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	887a      	ldrh	r2, [r7, #2]
 800b2f4:	801a      	strh	r2, [r3, #0]
}
 800b2f6:	bf00      	nop
 800b2f8:	370c      	adds	r7, #12
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	40023c00 	.word	0x40023c00

0800b308 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	460b      	mov	r3, r1
 800b312:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b314:	4b0c      	ldr	r3, [pc, #48]	; (800b348 <FLASH_Program_Byte+0x40>)
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	4a0b      	ldr	r2, [pc, #44]	; (800b348 <FLASH_Program_Byte+0x40>)
 800b31a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b31e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800b320:	4b09      	ldr	r3, [pc, #36]	; (800b348 <FLASH_Program_Byte+0x40>)
 800b322:	4a09      	ldr	r2, [pc, #36]	; (800b348 <FLASH_Program_Byte+0x40>)
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b328:	4b07      	ldr	r3, [pc, #28]	; (800b348 <FLASH_Program_Byte+0x40>)
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	4a06      	ldr	r2, [pc, #24]	; (800b348 <FLASH_Program_Byte+0x40>)
 800b32e:	f043 0301 	orr.w	r3, r3, #1
 800b332:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	78fa      	ldrb	r2, [r7, #3]
 800b338:	701a      	strb	r2, [r3, #0]
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	40023c00 	.word	0x40023c00

0800b34c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800b34c:	b480      	push	{r7}
 800b34e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800b350:	4b27      	ldr	r3, [pc, #156]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f003 0310 	and.w	r3, r3, #16
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d008      	beq.n	800b36e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b35c:	4b25      	ldr	r3, [pc, #148]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b35e:	69db      	ldr	r3, [r3, #28]
 800b360:	f043 0310 	orr.w	r3, r3, #16
 800b364:	4a23      	ldr	r2, [pc, #140]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b366:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800b368:	4b21      	ldr	r3, [pc, #132]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b36a:	2210      	movs	r2, #16
 800b36c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800b36e:	4b20      	ldr	r3, [pc, #128]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	f003 0320 	and.w	r3, r3, #32
 800b376:	2b00      	cmp	r3, #0
 800b378:	d008      	beq.n	800b38c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b37a:	4b1e      	ldr	r3, [pc, #120]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	f043 0308 	orr.w	r3, r3, #8
 800b382:	4a1c      	ldr	r2, [pc, #112]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b384:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800b386:	4b1a      	ldr	r3, [pc, #104]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b388:	2220      	movs	r2, #32
 800b38a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800b38c:	4b18      	ldr	r3, [pc, #96]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b394:	2b00      	cmp	r3, #0
 800b396:	d008      	beq.n	800b3aa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800b398:	4b16      	ldr	r3, [pc, #88]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	f043 0304 	orr.w	r3, r3, #4
 800b3a0:	4a14      	ldr	r2, [pc, #80]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b3a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800b3a4:	4b12      	ldr	r3, [pc, #72]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b3a6:	2240      	movs	r2, #64	; 0x40
 800b3a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800b3aa:	4b11      	ldr	r3, [pc, #68]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d008      	beq.n	800b3c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800b3b6:	4b0f      	ldr	r3, [pc, #60]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	f043 0302 	orr.w	r3, r3, #2
 800b3be:	4a0d      	ldr	r2, [pc, #52]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b3c0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800b3c2:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b3c4:	2280      	movs	r2, #128	; 0x80
 800b3c6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800b3c8:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	f003 0302 	and.w	r3, r3, #2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d008      	beq.n	800b3e6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800b3d4:	4b07      	ldr	r3, [pc, #28]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	f043 0320 	orr.w	r3, r3, #32
 800b3dc:	4a05      	ldr	r2, [pc, #20]	; (800b3f4 <FLASH_SetErrorCode+0xa8>)
 800b3de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800b3e0:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <FLASH_SetErrorCode+0xa4>)
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	60da      	str	r2, [r3, #12]
  }
}
 800b3e6:	bf00      	nop
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	40023c00 	.word	0x40023c00
 800b3f4:	20000fa8 	.word	0x20000fa8

0800b3f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b089      	sub	sp, #36	; 0x24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b402:	2300      	movs	r3, #0
 800b404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b406:	2300      	movs	r3, #0
 800b408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b40a:	2300      	movs	r3, #0
 800b40c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b40e:	2300      	movs	r3, #0
 800b410:	61fb      	str	r3, [r7, #28]
 800b412:	e16b      	b.n	800b6ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b414:	2201      	movs	r2, #1
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	fa02 f303 	lsl.w	r3, r2, r3
 800b41c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	4013      	ands	r3, r2
 800b426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	f040 815a 	bne.w	800b6e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	f003 0303 	and.w	r3, r3, #3
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d005      	beq.n	800b44a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b446:	2b02      	cmp	r3, #2
 800b448:	d130      	bne.n	800b4ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	2203      	movs	r2, #3
 800b456:	fa02 f303 	lsl.w	r3, r2, r3
 800b45a:	43db      	mvns	r3, r3
 800b45c:	69ba      	ldr	r2, [r7, #24]
 800b45e:	4013      	ands	r3, r2
 800b460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	68da      	ldr	r2, [r3, #12]
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	005b      	lsls	r3, r3, #1
 800b46a:	fa02 f303 	lsl.w	r3, r2, r3
 800b46e:	69ba      	ldr	r2, [r7, #24]
 800b470:	4313      	orrs	r3, r2
 800b472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	69ba      	ldr	r2, [r7, #24]
 800b478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b480:	2201      	movs	r2, #1
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	fa02 f303 	lsl.w	r3, r2, r3
 800b488:	43db      	mvns	r3, r3
 800b48a:	69ba      	ldr	r2, [r7, #24]
 800b48c:	4013      	ands	r3, r2
 800b48e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	091b      	lsrs	r3, r3, #4
 800b496:	f003 0201 	and.w	r2, r3, #1
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a0:	69ba      	ldr	r2, [r7, #24]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	f003 0303 	and.w	r3, r3, #3
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	d017      	beq.n	800b4e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	005b      	lsls	r3, r3, #1
 800b4c2:	2203      	movs	r2, #3
 800b4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c8:	43db      	mvns	r3, r3
 800b4ca:	69ba      	ldr	r2, [r7, #24]
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4dc:	69ba      	ldr	r2, [r7, #24]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	69ba      	ldr	r2, [r7, #24]
 800b4e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f003 0303 	and.w	r3, r3, #3
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d123      	bne.n	800b53c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	08da      	lsrs	r2, r3, #3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3208      	adds	r2, #8
 800b4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	f003 0307 	and.w	r3, r3, #7
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	220f      	movs	r2, #15
 800b50c:	fa02 f303 	lsl.w	r3, r2, r3
 800b510:	43db      	mvns	r3, r3
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	4013      	ands	r3, r2
 800b516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	691a      	ldr	r2, [r3, #16]
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	f003 0307 	and.w	r3, r3, #7
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	fa02 f303 	lsl.w	r3, r2, r3
 800b528:	69ba      	ldr	r2, [r7, #24]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	08da      	lsrs	r2, r3, #3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	3208      	adds	r2, #8
 800b536:	69b9      	ldr	r1, [r7, #24]
 800b538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	2203      	movs	r2, #3
 800b548:	fa02 f303 	lsl.w	r3, r2, r3
 800b54c:	43db      	mvns	r3, r3
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	4013      	ands	r3, r2
 800b552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f003 0203 	and.w	r2, r3, #3
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	fa02 f303 	lsl.w	r3, r2, r3
 800b564:	69ba      	ldr	r2, [r7, #24]
 800b566:	4313      	orrs	r3, r2
 800b568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	69ba      	ldr	r2, [r7, #24]
 800b56e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f000 80b4 	beq.w	800b6e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b57e:	2300      	movs	r3, #0
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	4b60      	ldr	r3, [pc, #384]	; (800b704 <HAL_GPIO_Init+0x30c>)
 800b584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b586:	4a5f      	ldr	r2, [pc, #380]	; (800b704 <HAL_GPIO_Init+0x30c>)
 800b588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b58c:	6453      	str	r3, [r2, #68]	; 0x44
 800b58e:	4b5d      	ldr	r3, [pc, #372]	; (800b704 <HAL_GPIO_Init+0x30c>)
 800b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b59a:	4a5b      	ldr	r2, [pc, #364]	; (800b708 <HAL_GPIO_Init+0x310>)
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	089b      	lsrs	r3, r3, #2
 800b5a0:	3302      	adds	r3, #2
 800b5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	f003 0303 	and.w	r3, r3, #3
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	220f      	movs	r2, #15
 800b5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b6:	43db      	mvns	r3, r3
 800b5b8:	69ba      	ldr	r2, [r7, #24]
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a52      	ldr	r2, [pc, #328]	; (800b70c <HAL_GPIO_Init+0x314>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d02b      	beq.n	800b61e <HAL_GPIO_Init+0x226>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a51      	ldr	r2, [pc, #324]	; (800b710 <HAL_GPIO_Init+0x318>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d025      	beq.n	800b61a <HAL_GPIO_Init+0x222>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a50      	ldr	r2, [pc, #320]	; (800b714 <HAL_GPIO_Init+0x31c>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d01f      	beq.n	800b616 <HAL_GPIO_Init+0x21e>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a4f      	ldr	r2, [pc, #316]	; (800b718 <HAL_GPIO_Init+0x320>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d019      	beq.n	800b612 <HAL_GPIO_Init+0x21a>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a4e      	ldr	r2, [pc, #312]	; (800b71c <HAL_GPIO_Init+0x324>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d013      	beq.n	800b60e <HAL_GPIO_Init+0x216>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a4d      	ldr	r2, [pc, #308]	; (800b720 <HAL_GPIO_Init+0x328>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00d      	beq.n	800b60a <HAL_GPIO_Init+0x212>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a4c      	ldr	r2, [pc, #304]	; (800b724 <HAL_GPIO_Init+0x32c>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d007      	beq.n	800b606 <HAL_GPIO_Init+0x20e>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a4b      	ldr	r2, [pc, #300]	; (800b728 <HAL_GPIO_Init+0x330>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d101      	bne.n	800b602 <HAL_GPIO_Init+0x20a>
 800b5fe:	2307      	movs	r3, #7
 800b600:	e00e      	b.n	800b620 <HAL_GPIO_Init+0x228>
 800b602:	2308      	movs	r3, #8
 800b604:	e00c      	b.n	800b620 <HAL_GPIO_Init+0x228>
 800b606:	2306      	movs	r3, #6
 800b608:	e00a      	b.n	800b620 <HAL_GPIO_Init+0x228>
 800b60a:	2305      	movs	r3, #5
 800b60c:	e008      	b.n	800b620 <HAL_GPIO_Init+0x228>
 800b60e:	2304      	movs	r3, #4
 800b610:	e006      	b.n	800b620 <HAL_GPIO_Init+0x228>
 800b612:	2303      	movs	r3, #3
 800b614:	e004      	b.n	800b620 <HAL_GPIO_Init+0x228>
 800b616:	2302      	movs	r3, #2
 800b618:	e002      	b.n	800b620 <HAL_GPIO_Init+0x228>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e000      	b.n	800b620 <HAL_GPIO_Init+0x228>
 800b61e:	2300      	movs	r3, #0
 800b620:	69fa      	ldr	r2, [r7, #28]
 800b622:	f002 0203 	and.w	r2, r2, #3
 800b626:	0092      	lsls	r2, r2, #2
 800b628:	4093      	lsls	r3, r2
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b630:	4935      	ldr	r1, [pc, #212]	; (800b708 <HAL_GPIO_Init+0x310>)
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	089b      	lsrs	r3, r3, #2
 800b636:	3302      	adds	r3, #2
 800b638:	69ba      	ldr	r2, [r7, #24]
 800b63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b63e:	4b3b      	ldr	r3, [pc, #236]	; (800b72c <HAL_GPIO_Init+0x334>)
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	43db      	mvns	r3, r3
 800b648:	69ba      	ldr	r2, [r7, #24]
 800b64a:	4013      	ands	r3, r2
 800b64c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b65a:	69ba      	ldr	r2, [r7, #24]
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	4313      	orrs	r3, r2
 800b660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b662:	4a32      	ldr	r2, [pc, #200]	; (800b72c <HAL_GPIO_Init+0x334>)
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b668:	4b30      	ldr	r3, [pc, #192]	; (800b72c <HAL_GPIO_Init+0x334>)
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	43db      	mvns	r3, r3
 800b672:	69ba      	ldr	r2, [r7, #24]
 800b674:	4013      	ands	r3, r2
 800b676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d003      	beq.n	800b68c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b684:	69ba      	ldr	r2, [r7, #24]
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	4313      	orrs	r3, r2
 800b68a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b68c:	4a27      	ldr	r2, [pc, #156]	; (800b72c <HAL_GPIO_Init+0x334>)
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b692:	4b26      	ldr	r3, [pc, #152]	; (800b72c <HAL_GPIO_Init+0x334>)
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	43db      	mvns	r3, r3
 800b69c:	69ba      	ldr	r2, [r7, #24]
 800b69e:	4013      	ands	r3, r2
 800b6a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b6ae:	69ba      	ldr	r2, [r7, #24]
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b6b6:	4a1d      	ldr	r2, [pc, #116]	; (800b72c <HAL_GPIO_Init+0x334>)
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b6bc:	4b1b      	ldr	r3, [pc, #108]	; (800b72c <HAL_GPIO_Init+0x334>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	43db      	mvns	r3, r3
 800b6c6:	69ba      	ldr	r2, [r7, #24]
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d003      	beq.n	800b6e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b6d8:	69ba      	ldr	r2, [r7, #24]
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b6e0:	4a12      	ldr	r2, [pc, #72]	; (800b72c <HAL_GPIO_Init+0x334>)
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	61fb      	str	r3, [r7, #28]
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	2b0f      	cmp	r3, #15
 800b6f0:	f67f ae90 	bls.w	800b414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop
 800b6f8:	3724      	adds	r7, #36	; 0x24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	40023800 	.word	0x40023800
 800b708:	40013800 	.word	0x40013800
 800b70c:	40020000 	.word	0x40020000
 800b710:	40020400 	.word	0x40020400
 800b714:	40020800 	.word	0x40020800
 800b718:	40020c00 	.word	0x40020c00
 800b71c:	40021000 	.word	0x40021000
 800b720:	40021400 	.word	0x40021400
 800b724:	40021800 	.word	0x40021800
 800b728:	40021c00 	.word	0x40021c00
 800b72c:	40013c00 	.word	0x40013c00

0800b730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	807b      	strh	r3, [r7, #2]
 800b73c:	4613      	mov	r3, r2
 800b73e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b740:	787b      	ldrb	r3, [r7, #1]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b746:	887a      	ldrh	r2, [r7, #2]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b74c:	e003      	b.n	800b756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b74e:	887b      	ldrh	r3, [r7, #2]
 800b750:	041a      	lsls	r2, r3, #16
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	619a      	str	r2, [r3, #24]
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
	...

0800b764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	4603      	mov	r3, r0
 800b76c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b76e:	4b08      	ldr	r3, [pc, #32]	; (800b790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b770:	695a      	ldr	r2, [r3, #20]
 800b772:	88fb      	ldrh	r3, [r7, #6]
 800b774:	4013      	ands	r3, r2
 800b776:	2b00      	cmp	r3, #0
 800b778:	d006      	beq.n	800b788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b77a:	4a05      	ldr	r2, [pc, #20]	; (800b790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b77c:	88fb      	ldrh	r3, [r7, #6]
 800b77e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b780:	88fb      	ldrh	r3, [r7, #6]
 800b782:	4618      	mov	r0, r3
 800b784:	f7f6 fe7e 	bl	8002484 <HAL_GPIO_EXTI_Callback>
  }
}
 800b788:	bf00      	nop
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	40013c00 	.word	0x40013c00

0800b794 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b796:	b08f      	sub	sp, #60	; 0x3c
 800b798:	af0a      	add	r7, sp, #40	; 0x28
 800b79a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e10f      	b.n	800b9c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d106      	bne.n	800b7c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f010 f957 	bl	801ba74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2203      	movs	r2, #3
 800b7ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d102      	bne.n	800b7e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f007 f82c 	bl	8012842 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	603b      	str	r3, [r7, #0]
 800b7f0:	687e      	ldr	r6, [r7, #4]
 800b7f2:	466d      	mov	r5, sp
 800b7f4:	f106 0410 	add.w	r4, r6, #16
 800b7f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b7fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b800:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b804:	e885 0003 	stmia.w	r5, {r0, r1}
 800b808:	1d33      	adds	r3, r6, #4
 800b80a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b80c:	6838      	ldr	r0, [r7, #0]
 800b80e:	f006 ff03 	bl	8012618 <USB_CoreInit>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d005      	beq.n	800b824 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2202      	movs	r2, #2
 800b81c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	e0d0      	b.n	800b9c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2100      	movs	r1, #0
 800b82a:	4618      	mov	r0, r3
 800b82c:	f007 f81a 	bl	8012864 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b830:	2300      	movs	r3, #0
 800b832:	73fb      	strb	r3, [r7, #15]
 800b834:	e04a      	b.n	800b8cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b836:	7bfa      	ldrb	r2, [r7, #15]
 800b838:	6879      	ldr	r1, [r7, #4]
 800b83a:	4613      	mov	r3, r2
 800b83c:	00db      	lsls	r3, r3, #3
 800b83e:	4413      	add	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	440b      	add	r3, r1
 800b844:	333d      	adds	r3, #61	; 0x3d
 800b846:	2201      	movs	r2, #1
 800b848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b84a:	7bfa      	ldrb	r2, [r7, #15]
 800b84c:	6879      	ldr	r1, [r7, #4]
 800b84e:	4613      	mov	r3, r2
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	4413      	add	r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	440b      	add	r3, r1
 800b858:	333c      	adds	r3, #60	; 0x3c
 800b85a:	7bfa      	ldrb	r2, [r7, #15]
 800b85c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b85e:	7bfa      	ldrb	r2, [r7, #15]
 800b860:	7bfb      	ldrb	r3, [r7, #15]
 800b862:	b298      	uxth	r0, r3
 800b864:	6879      	ldr	r1, [r7, #4]
 800b866:	4613      	mov	r3, r2
 800b868:	00db      	lsls	r3, r3, #3
 800b86a:	4413      	add	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	440b      	add	r3, r1
 800b870:	3344      	adds	r3, #68	; 0x44
 800b872:	4602      	mov	r2, r0
 800b874:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b876:	7bfa      	ldrb	r2, [r7, #15]
 800b878:	6879      	ldr	r1, [r7, #4]
 800b87a:	4613      	mov	r3, r2
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	4413      	add	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	440b      	add	r3, r1
 800b884:	3340      	adds	r3, #64	; 0x40
 800b886:	2200      	movs	r2, #0
 800b888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b88a:	7bfa      	ldrb	r2, [r7, #15]
 800b88c:	6879      	ldr	r1, [r7, #4]
 800b88e:	4613      	mov	r3, r2
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	4413      	add	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	440b      	add	r3, r1
 800b898:	3348      	adds	r3, #72	; 0x48
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b89e:	7bfa      	ldrb	r2, [r7, #15]
 800b8a0:	6879      	ldr	r1, [r7, #4]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	00db      	lsls	r3, r3, #3
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	334c      	adds	r3, #76	; 0x4c
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b8b2:	7bfa      	ldrb	r2, [r7, #15]
 800b8b4:	6879      	ldr	r1, [r7, #4]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	00db      	lsls	r3, r3, #3
 800b8ba:	4413      	add	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	440b      	add	r3, r1
 800b8c0:	3354      	adds	r3, #84	; 0x54
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	73fb      	strb	r3, [r7, #15]
 800b8cc:	7bfa      	ldrb	r2, [r7, #15]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d3af      	bcc.n	800b836 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	73fb      	strb	r3, [r7, #15]
 800b8da:	e044      	b.n	800b966 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b8dc:	7bfa      	ldrb	r2, [r7, #15]
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	440b      	add	r3, r1
 800b8ea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b8f2:	7bfa      	ldrb	r2, [r7, #15]
 800b8f4:	6879      	ldr	r1, [r7, #4]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	00db      	lsls	r3, r3, #3
 800b8fa:	4413      	add	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	440b      	add	r3, r1
 800b900:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b904:	7bfa      	ldrb	r2, [r7, #15]
 800b906:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b908:	7bfa      	ldrb	r2, [r7, #15]
 800b90a:	6879      	ldr	r1, [r7, #4]
 800b90c:	4613      	mov	r3, r2
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	4413      	add	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	440b      	add	r3, r1
 800b916:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b91a:	2200      	movs	r2, #0
 800b91c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b91e:	7bfa      	ldrb	r2, [r7, #15]
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	4613      	mov	r3, r2
 800b924:	00db      	lsls	r3, r3, #3
 800b926:	4413      	add	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	440b      	add	r3, r1
 800b92c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b934:	7bfa      	ldrb	r2, [r7, #15]
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	4613      	mov	r3, r2
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	440b      	add	r3, r1
 800b942:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b946:	2200      	movs	r2, #0
 800b948:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b94a:	7bfa      	ldrb	r2, [r7, #15]
 800b94c:	6879      	ldr	r1, [r7, #4]
 800b94e:	4613      	mov	r3, r2
 800b950:	00db      	lsls	r3, r3, #3
 800b952:	4413      	add	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	440b      	add	r3, r1
 800b958:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b95c:	2200      	movs	r2, #0
 800b95e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	3301      	adds	r3, #1
 800b964:	73fb      	strb	r3, [r7, #15]
 800b966:	7bfa      	ldrb	r2, [r7, #15]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d3b5      	bcc.n	800b8dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	603b      	str	r3, [r7, #0]
 800b976:	687e      	ldr	r6, [r7, #4]
 800b978:	466d      	mov	r5, sp
 800b97a:	f106 0410 	add.w	r4, r6, #16
 800b97e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b986:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b98a:	e885 0003 	stmia.w	r5, {r0, r1}
 800b98e:	1d33      	adds	r3, r6, #4
 800b990:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b992:	6838      	ldr	r0, [r7, #0]
 800b994:	f006 ffb2 	bl	80128fc <USB_DevInit>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d005      	beq.n	800b9aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e00d      	b.n	800b9c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f008 f901 	bl	8013bc6 <USB_DevDisconnect>

  return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d101      	bne.n	800b9ea <HAL_PCD_Start+0x1c>
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	e020      	b.n	800ba2c <HAL_PCD_Start+0x5e>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d109      	bne.n	800ba0e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d005      	beq.n	800ba0e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4618      	mov	r0, r3
 800ba14:	f006 ff04 	bl	8012820 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f008 f8b1 	bl	8013b84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ba34:	b590      	push	{r4, r7, lr}
 800ba36:	b08d      	sub	sp, #52	; 0x34
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f008 f96f 	bl	8013d2e <USB_GetMode>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f040 848a 	bne.w	800c36c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f008 f8d3 	bl	8013c08 <USB_ReadInterrupts>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 8480 	beq.w	800c36a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	0a1b      	lsrs	r3, r3, #8
 800ba74:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f008 f8c0 	bl	8013c08 <USB_ReadInterrupts>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	f003 0302 	and.w	r3, r3, #2
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d107      	bne.n	800baa2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	695a      	ldr	r2, [r3, #20]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f002 0202 	and.w	r2, r2, #2
 800baa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f008 f8ae 	bl	8013c08 <USB_ReadInterrupts>
 800baac:	4603      	mov	r3, r0
 800baae:	f003 0310 	and.w	r3, r3, #16
 800bab2:	2b10      	cmp	r3, #16
 800bab4:	d161      	bne.n	800bb7a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	699a      	ldr	r2, [r3, #24]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f022 0210 	bic.w	r2, r2, #16
 800bac4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	f003 020f 	and.w	r2, r3, #15
 800bad2:	4613      	mov	r3, r2
 800bad4:	00db      	lsls	r3, r3, #3
 800bad6:	4413      	add	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	4413      	add	r3, r2
 800bae2:	3304      	adds	r3, #4
 800bae4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	0c5b      	lsrs	r3, r3, #17
 800baea:	f003 030f 	and.w	r3, r3, #15
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d124      	bne.n	800bb3c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800baf2:	69ba      	ldr	r2, [r7, #24]
 800baf4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800baf8:	4013      	ands	r3, r2
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d035      	beq.n	800bb6a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	091b      	lsrs	r3, r3, #4
 800bb06:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bb08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	461a      	mov	r2, r3
 800bb10:	6a38      	ldr	r0, [r7, #32]
 800bb12:	f007 fee5 	bl	80138e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	691a      	ldr	r2, [r3, #16]
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	091b      	lsrs	r3, r3, #4
 800bb1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb22:	441a      	add	r2, r3
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	6a1a      	ldr	r2, [r3, #32]
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	091b      	lsrs	r3, r3, #4
 800bb30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb34:	441a      	add	r2, r3
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	621a      	str	r2, [r3, #32]
 800bb3a:	e016      	b.n	800bb6a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	0c5b      	lsrs	r3, r3, #17
 800bb40:	f003 030f 	and.w	r3, r3, #15
 800bb44:	2b06      	cmp	r3, #6
 800bb46:	d110      	bne.n	800bb6a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bb4e:	2208      	movs	r2, #8
 800bb50:	4619      	mov	r1, r3
 800bb52:	6a38      	ldr	r0, [r7, #32]
 800bb54:	f007 fec4 	bl	80138e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	6a1a      	ldr	r2, [r3, #32]
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	091b      	lsrs	r3, r3, #4
 800bb60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb64:	441a      	add	r2, r3
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	699a      	ldr	r2, [r3, #24]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f042 0210 	orr.w	r2, r2, #16
 800bb78:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f008 f842 	bl	8013c08 <USB_ReadInterrupts>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bb8e:	f040 80a7 	bne.w	800bce0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800bb92:	2300      	movs	r3, #0
 800bb94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f008 f847 	bl	8013c2e <USB_ReadDevAllOutEpInterrupt>
 800bba0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800bba2:	e099      	b.n	800bcd8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 808e 	beq.w	800bccc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbb6:	b2d2      	uxtb	r2, r2
 800bbb8:	4611      	mov	r1, r2
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f008 f86b 	bl	8013c96 <USB_ReadDevOutEPInterrupt>
 800bbc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	f003 0301 	and.w	r3, r3, #1
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00c      	beq.n	800bbe6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	015a      	lsls	r2, r3, #5
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd8:	461a      	mov	r2, r3
 800bbda:	2301      	movs	r3, #1
 800bbdc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800bbde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 feef 	bl	800c9c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f003 0308 	and.w	r3, r3, #8
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00c      	beq.n	800bc0a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	015a      	lsls	r2, r3, #5
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	2308      	movs	r3, #8
 800bc00:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800bc02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 ffc5 	bl	800cb94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f003 0310 	and.w	r3, r3, #16
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d008      	beq.n	800bc26 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	015a      	lsls	r2, r3, #5
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc20:	461a      	mov	r2, r3
 800bc22:	2310      	movs	r3, #16
 800bc24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f003 0302 	and.w	r3, r3, #2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d030      	beq.n	800bc92 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	695b      	ldr	r3, [r3, #20]
 800bc34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc38:	2b80      	cmp	r3, #128	; 0x80
 800bc3a:	d109      	bne.n	800bc50 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	69fa      	ldr	r2, [r7, #28]
 800bc46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc4e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800bc50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc52:	4613      	mov	r3, r2
 800bc54:	00db      	lsls	r3, r3, #3
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	4413      	add	r3, r2
 800bc62:	3304      	adds	r3, #4
 800bc64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	78db      	ldrb	r3, [r3, #3]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d108      	bne.n	800bc80 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	2200      	movs	r2, #0
 800bc72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f010 f800 	bl	801bc80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc82:	015a      	lsls	r2, r3, #5
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	4413      	add	r3, r2
 800bc88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	2302      	movs	r3, #2
 800bc90:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f003 0320 	and.w	r3, r3, #32
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d008      	beq.n	800bcae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca8:	461a      	mov	r2, r3
 800bcaa:	2320      	movs	r3, #32
 800bcac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d009      	beq.n	800bccc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	015a      	lsls	r2, r3, #5
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bcca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800bccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcce:	3301      	adds	r3, #1
 800bcd0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	085b      	lsrs	r3, r3, #1
 800bcd6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800bcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f47f af62 	bne.w	800bba4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f007 ff8f 	bl	8013c08 <USB_ReadInterrupts>
 800bcea:	4603      	mov	r3, r0
 800bcec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcf4:	f040 80db 	bne.w	800beae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f007 ffb0 	bl	8013c62 <USB_ReadDevAllInEpInterrupt>
 800bd02:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800bd04:	2300      	movs	r3, #0
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800bd08:	e0cd      	b.n	800bea6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800bd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 80c2 	beq.w	800be9a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd1c:	b2d2      	uxtb	r2, r2
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f007 ffd6 	bl	8013cd2 <USB_ReadDevInEPInterrupt>
 800bd26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d057      	beq.n	800bde2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd34:	f003 030f 	and.w	r3, r3, #15
 800bd38:	2201      	movs	r2, #1
 800bd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	43db      	mvns	r3, r3
 800bd4c:	69f9      	ldr	r1, [r7, #28]
 800bd4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd52:	4013      	ands	r3, r2
 800bd54:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd62:	461a      	mov	r2, r3
 800bd64:	2301      	movs	r3, #1
 800bd66:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d132      	bne.n	800bdd6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd74:	4613      	mov	r3, r2
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	4413      	add	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	440b      	add	r3, r1
 800bd7e:	334c      	adds	r3, #76	; 0x4c
 800bd80:	6819      	ldr	r1, [r3, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd86:	4613      	mov	r3, r2
 800bd88:	00db      	lsls	r3, r3, #3
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4403      	add	r3, r0
 800bd90:	3348      	adds	r3, #72	; 0x48
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4419      	add	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	4413      	add	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4403      	add	r3, r0
 800bda4:	334c      	adds	r3, #76	; 0x4c
 800bda6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d113      	bne.n	800bdd6 <HAL_PCD_IRQHandler+0x3a2>
 800bdae:	6879      	ldr	r1, [r7, #4]
 800bdb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	00db      	lsls	r3, r3, #3
 800bdb6:	4413      	add	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	440b      	add	r3, r1
 800bdbc:	3354      	adds	r3, #84	; 0x54
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d108      	bne.n	800bdd6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6818      	ldr	r0, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bdce:	461a      	mov	r2, r3
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	f007 ffdd 	bl	8013d90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f00f feca 	bl	801bb76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	f003 0308 	and.w	r3, r3, #8
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d008      	beq.n	800bdfe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	2308      	movs	r3, #8
 800bdfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f003 0310 	and.w	r3, r3, #16
 800be04:	2b00      	cmp	r3, #0
 800be06:	d008      	beq.n	800be1a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	015a      	lsls	r2, r3, #5
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	4413      	add	r3, r2
 800be10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be14:	461a      	mov	r2, r3
 800be16:	2310      	movs	r3, #16
 800be18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be20:	2b00      	cmp	r3, #0
 800be22:	d008      	beq.n	800be36 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	015a      	lsls	r2, r3, #5
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	4413      	add	r3, r2
 800be2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be30:	461a      	mov	r2, r3
 800be32:	2340      	movs	r3, #64	; 0x40
 800be34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	f003 0302 	and.w	r3, r3, #2
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d023      	beq.n	800be88 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800be40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be42:	6a38      	ldr	r0, [r7, #32]
 800be44:	f006 febe 	bl	8012bc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800be48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be4a:	4613      	mov	r3, r2
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	4413      	add	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	3338      	adds	r3, #56	; 0x38
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	4413      	add	r3, r2
 800be58:	3304      	adds	r3, #4
 800be5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	78db      	ldrb	r3, [r3, #3]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d108      	bne.n	800be76 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2200      	movs	r2, #0
 800be68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800be6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	4619      	mov	r1, r3
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f00f ff17 	bl	801bca4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be78:	015a      	lsls	r2, r3, #5
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	4413      	add	r3, r2
 800be7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be82:	461a      	mov	r2, r3
 800be84:	2302      	movs	r3, #2
 800be86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800be92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fd08 	bl	800c8aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	3301      	adds	r3, #1
 800be9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	085b      	lsrs	r3, r3, #1
 800bea4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f47f af2e 	bne.w	800bd0a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f007 fea8 	bl	8013c08 <USB_ReadInterrupts>
 800beb8:	4603      	mov	r3, r0
 800beba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bec2:	d122      	bne.n	800bf0a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	69fa      	ldr	r2, [r7, #28]
 800bece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bed2:	f023 0301 	bic.w	r3, r3, #1
 800bed6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d108      	bne.n	800bef4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800beea:	2100      	movs	r1, #0
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 feef 	bl	800ccd0 <HAL_PCDEx_LPM_Callback>
 800bef2:	e002      	b.n	800befa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f00f feb5 	bl	801bc64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	695a      	ldr	r2, [r3, #20]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800bf08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f007 fe7a 	bl	8013c08 <USB_ReadInterrupts>
 800bf14:	4603      	mov	r3, r0
 800bf16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf1e:	d112      	bne.n	800bf46 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f003 0301 	and.w	r3, r3, #1
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d102      	bne.n	800bf36 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f00f fe71 	bl	801bc18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	695a      	ldr	r2, [r3, #20]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800bf44:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f007 fe5c 	bl	8013c08 <USB_ReadInterrupts>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf5a:	f040 80b7 	bne.w	800c0cc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	69fa      	ldr	r2, [r7, #28]
 800bf68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf6c:	f023 0301 	bic.w	r3, r3, #1
 800bf70:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2110      	movs	r1, #16
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f006 fe23 	bl	8012bc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf7e:	2300      	movs	r3, #0
 800bf80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf82:	e046      	b.n	800c012 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	015a      	lsls	r2, r3, #5
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf90:	461a      	mov	r2, r3
 800bf92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf96:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	015a      	lsls	r2, r3, #5
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfa8:	0151      	lsls	r1, r2, #5
 800bfaa:	69fa      	ldr	r2, [r7, #28]
 800bfac:	440a      	add	r2, r1
 800bfae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bfb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfba:	015a      	lsls	r2, r3, #5
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bfca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	015a      	lsls	r2, r3, #5
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfdc:	0151      	lsls	r1, r2, #5
 800bfde:	69fa      	ldr	r2, [r7, #28]
 800bfe0:	440a      	add	r2, r1
 800bfe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfe6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bfea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	015a      	lsls	r2, r3, #5
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	4413      	add	r3, r2
 800bff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bffc:	0151      	lsls	r1, r2, #5
 800bffe:	69fa      	ldr	r2, [r7, #28]
 800c000:	440a      	add	r2, r1
 800c002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c006:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c00a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00e:	3301      	adds	r3, #1
 800c010:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c018:	429a      	cmp	r2, r3
 800c01a:	d3b3      	bcc.n	800bf84 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c022:	69db      	ldr	r3, [r3, #28]
 800c024:	69fa      	ldr	r2, [r7, #28]
 800c026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c02a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c02e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c034:	2b00      	cmp	r3, #0
 800c036:	d016      	beq.n	800c066 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c042:	69fa      	ldr	r2, [r7, #28]
 800c044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c048:	f043 030b 	orr.w	r3, r3, #11
 800c04c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c058:	69fa      	ldr	r2, [r7, #28]
 800c05a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c05e:	f043 030b 	orr.w	r3, r3, #11
 800c062:	6453      	str	r3, [r2, #68]	; 0x44
 800c064:	e015      	b.n	800c092 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	69fa      	ldr	r2, [r7, #28]
 800c070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c074:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c078:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c07c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	69fa      	ldr	r2, [r7, #28]
 800c088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c08c:	f043 030b 	orr.w	r3, r3, #11
 800c090:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69fa      	ldr	r2, [r7, #28]
 800c09c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c0a4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6818      	ldr	r0, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	f007 fe6a 	bl	8013d90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	695a      	ldr	r2, [r3, #20]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c0ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f007 fd99 	bl	8013c08 <USB_ReadInterrupts>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0e0:	d124      	bne.n	800c12c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f007 fe2f 	bl	8013d4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f006 fde4 	bl	8012cbe <USB_GetDevSpeed>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681c      	ldr	r4, [r3, #0]
 800c102:	f001 fa53 	bl	800d5ac <HAL_RCC_GetHCLKFreq>
 800c106:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	461a      	mov	r2, r3
 800c110:	4620      	mov	r0, r4
 800c112:	f006 fae3 	bl	80126dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f00f fd55 	bl	801bbc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	695a      	ldr	r2, [r3, #20]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c12a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4618      	mov	r0, r3
 800c132:	f007 fd69 	bl	8013c08 <USB_ReadInterrupts>
 800c136:	4603      	mov	r3, r0
 800c138:	f003 0308 	and.w	r3, r3, #8
 800c13c:	2b08      	cmp	r3, #8
 800c13e:	d10a      	bne.n	800c156 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f00f fd32 	bl	801bbaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	695a      	ldr	r2, [r3, #20]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f002 0208 	and.w	r2, r2, #8
 800c154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f007 fd54 	bl	8013c08 <USB_ReadInterrupts>
 800c160:	4603      	mov	r3, r0
 800c162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c166:	2b80      	cmp	r3, #128	; 0x80
 800c168:	d122      	bne.n	800c1b0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	699b      	ldr	r3, [r3, #24]
 800c16e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c172:	6a3b      	ldr	r3, [r7, #32]
 800c174:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c176:	2301      	movs	r3, #1
 800c178:	627b      	str	r3, [r7, #36]	; 0x24
 800c17a:	e014      	b.n	800c1a6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c17c:	6879      	ldr	r1, [r7, #4]
 800c17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c180:	4613      	mov	r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	4413      	add	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	440b      	add	r3, r1
 800c18a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d105      	bne.n	800c1a0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	b2db      	uxtb	r3, r3
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fb27 	bl	800c7ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d3e5      	bcc.n	800c17c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f007 fd27 	bl	8013c08 <USB_ReadInterrupts>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1c4:	d13b      	bne.n	800c23e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ca:	e02b      	b.n	800c224 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	015a      	lsls	r2, r3, #5
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c1dc:	6879      	ldr	r1, [r7, #4]
 800c1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	440b      	add	r3, r1
 800c1ea:	3340      	adds	r3, #64	; 0x40
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d115      	bne.n	800c21e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c1f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	da12      	bge.n	800c21e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	00db      	lsls	r3, r3, #3
 800c200:	4413      	add	r3, r2
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	440b      	add	r3, r1
 800c206:	333f      	adds	r3, #63	; 0x3f
 800c208:	2201      	movs	r2, #1
 800c20a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c214:	b2db      	uxtb	r3, r3
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 fae8 	bl	800c7ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c220:	3301      	adds	r3, #1
 800c222:	627b      	str	r3, [r7, #36]	; 0x24
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d3ce      	bcc.n	800c1cc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	695a      	ldr	r2, [r3, #20]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c23c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4618      	mov	r0, r3
 800c244:	f007 fce0 	bl	8013c08 <USB_ReadInterrupts>
 800c248:	4603      	mov	r3, r0
 800c24a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c24e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c252:	d155      	bne.n	800c300 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c254:	2301      	movs	r3, #1
 800c256:	627b      	str	r3, [r7, #36]	; 0x24
 800c258:	e045      	b.n	800c2e6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	015a      	lsls	r2, r3, #5
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	4413      	add	r3, r2
 800c262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c26a:	6879      	ldr	r1, [r7, #4]
 800c26c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c26e:	4613      	mov	r3, r2
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	4413      	add	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	440b      	add	r3, r1
 800c278:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d12e      	bne.n	800c2e0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c282:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c284:	2b00      	cmp	r3, #0
 800c286:	da2b      	bge.n	800c2e0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800c294:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c298:	429a      	cmp	r2, r3
 800c29a:	d121      	bne.n	800c2e0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c29c:	6879      	ldr	r1, [r7, #4]
 800c29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	4413      	add	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	440b      	add	r3, r1
 800c2aa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c2b2:	6a3b      	ldr	r3, [r7, #32]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	695b      	ldr	r3, [r3, #20]
 800c2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d10a      	bne.n	800c2e0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	69fa      	ldr	r2, [r7, #28]
 800c2d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c2dc:	6053      	str	r3, [r2, #4]
            break;
 800c2de:	e007      	b.n	800c2f0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d3b4      	bcc.n	800c25a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	695a      	ldr	r2, [r3, #20]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c2fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4618      	mov	r0, r3
 800c306:	f007 fc7f 	bl	8013c08 <USB_ReadInterrupts>
 800c30a:	4603      	mov	r3, r0
 800c30c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c314:	d10a      	bne.n	800c32c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f00f fcd6 	bl	801bcc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	695a      	ldr	r2, [r3, #20]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c32a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4618      	mov	r0, r3
 800c332:	f007 fc69 	bl	8013c08 <USB_ReadInterrupts>
 800c336:	4603      	mov	r3, r0
 800c338:	f003 0304 	and.w	r3, r3, #4
 800c33c:	2b04      	cmp	r3, #4
 800c33e:	d115      	bne.n	800c36c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	f003 0304 	and.w	r3, r3, #4
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d002      	beq.n	800c358 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f00f fcc6 	bl	801bce4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6859      	ldr	r1, [r3, #4]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	69ba      	ldr	r2, [r7, #24]
 800c364:	430a      	orrs	r2, r1
 800c366:	605a      	str	r2, [r3, #4]
 800c368:	e000      	b.n	800c36c <HAL_PCD_IRQHandler+0x938>
      return;
 800c36a:	bf00      	nop
    }
  }
}
 800c36c:	3734      	adds	r7, #52	; 0x34
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd90      	pop	{r4, r7, pc}

0800c372 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	460b      	mov	r3, r1
 800c37c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c384:	2b01      	cmp	r3, #1
 800c386:	d101      	bne.n	800c38c <HAL_PCD_SetAddress+0x1a>
 800c388:	2302      	movs	r3, #2
 800c38a:	e013      	b.n	800c3b4 <HAL_PCD_SetAddress+0x42>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	78fa      	ldrb	r2, [r7, #3]
 800c398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	78fa      	ldrb	r2, [r7, #3]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f007 fbc7 	bl	8013b38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	4608      	mov	r0, r1
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	70fb      	strb	r3, [r7, #3]
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	803b      	strh	r3, [r7, #0]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c3da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	da0f      	bge.n	800c402 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3e2:	78fb      	ldrb	r3, [r7, #3]
 800c3e4:	f003 020f 	and.w	r2, r3, #15
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	3338      	adds	r3, #56	; 0x38
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	3304      	adds	r3, #4
 800c3f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	705a      	strb	r2, [r3, #1]
 800c400:	e00f      	b.n	800c422 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c402:	78fb      	ldrb	r3, [r7, #3]
 800c404:	f003 020f 	and.w	r2, r3, #15
 800c408:	4613      	mov	r3, r2
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	4413      	add	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	4413      	add	r3, r2
 800c418:	3304      	adds	r3, #4
 800c41a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2200      	movs	r2, #0
 800c420:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c422:	78fb      	ldrb	r3, [r7, #3]
 800c424:	f003 030f 	and.w	r3, r3, #15
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c42e:	883a      	ldrh	r2, [r7, #0]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	78ba      	ldrb	r2, [r7, #2]
 800c438:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	785b      	ldrb	r3, [r3, #1]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d004      	beq.n	800c44c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	b29a      	uxth	r2, r3
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c44c:	78bb      	ldrb	r3, [r7, #2]
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d102      	bne.n	800c458 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d101      	bne.n	800c466 <HAL_PCD_EP_Open+0xaa>
 800c462:	2302      	movs	r3, #2
 800c464:	e00e      	b.n	800c484 <HAL_PCD_EP_Open+0xc8>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68f9      	ldr	r1, [r7, #12]
 800c474:	4618      	mov	r0, r3
 800c476:	f006 fc47 	bl	8012d08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800c482:	7afb      	ldrb	r3, [r7, #11]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c498:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	da0f      	bge.n	800c4c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4a0:	78fb      	ldrb	r3, [r7, #3]
 800c4a2:	f003 020f 	and.w	r2, r3, #15
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	4413      	add	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	3338      	adds	r3, #56	; 0x38
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	705a      	strb	r2, [r3, #1]
 800c4be:	e00f      	b.n	800c4e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c4c0:	78fb      	ldrb	r3, [r7, #3]
 800c4c2:	f003 020f 	and.w	r2, r3, #15
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	00db      	lsls	r3, r3, #3
 800c4ca:	4413      	add	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	f003 030f 	and.w	r3, r3, #15
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d101      	bne.n	800c4fa <HAL_PCD_EP_Close+0x6e>
 800c4f6:	2302      	movs	r3, #2
 800c4f8:	e00e      	b.n	800c518 <HAL_PCD_EP_Close+0x8c>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68f9      	ldr	r1, [r7, #12]
 800c508:	4618      	mov	r0, r3
 800c50a:	f006 fc85 	bl	8012e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	607a      	str	r2, [r7, #4]
 800c52a:	603b      	str	r3, [r7, #0]
 800c52c:	460b      	mov	r3, r1
 800c52e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c530:	7afb      	ldrb	r3, [r7, #11]
 800c532:	f003 020f 	and.w	r2, r3, #15
 800c536:	4613      	mov	r3, r2
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	4413      	add	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	3304      	adds	r3, #4
 800c548:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2200      	movs	r2, #0
 800c55a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	2200      	movs	r2, #0
 800c560:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c562:	7afb      	ldrb	r3, [r7, #11]
 800c564:	f003 030f 	and.w	r3, r3, #15
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d102      	bne.n	800c57c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c57c:	7afb      	ldrb	r3, [r7, #11]
 800c57e:	f003 030f 	and.w	r3, r3, #15
 800c582:	2b00      	cmp	r3, #0
 800c584:	d109      	bne.n	800c59a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6818      	ldr	r0, [r3, #0]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	461a      	mov	r2, r3
 800c592:	6979      	ldr	r1, [r7, #20]
 800c594:	f006 ff64 	bl	8013460 <USB_EP0StartXfer>
 800c598:	e008      	b.n	800c5ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6818      	ldr	r0, [r3, #0]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	691b      	ldr	r3, [r3, #16]
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	6979      	ldr	r1, [r7, #20]
 800c5a8:	f006 fd12 	bl	8012fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b083      	sub	sp, #12
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c5c2:	78fb      	ldrb	r3, [r7, #3]
 800c5c4:	f003 020f 	and.w	r2, r3, #15
 800c5c8:	6879      	ldr	r1, [r7, #4]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	4413      	add	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	440b      	add	r3, r1
 800c5d4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c5d8:	681b      	ldr	r3, [r3, #0]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b086      	sub	sp, #24
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	60f8      	str	r0, [r7, #12]
 800c5ee:	607a      	str	r2, [r7, #4]
 800c5f0:	603b      	str	r3, [r7, #0]
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c5f6:	7afb      	ldrb	r3, [r7, #11]
 800c5f8:	f003 020f 	and.w	r2, r3, #15
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	00db      	lsls	r3, r3, #3
 800c600:	4413      	add	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	3338      	adds	r3, #56	; 0x38
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	4413      	add	r3, r2
 800c60a:	3304      	adds	r3, #4
 800c60c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2200      	movs	r2, #0
 800c61e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2201      	movs	r2, #1
 800c624:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	f003 030f 	and.w	r3, r3, #15
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d102      	bne.n	800c640 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c640:	7afb      	ldrb	r3, [r7, #11]
 800c642:	f003 030f 	and.w	r3, r3, #15
 800c646:	2b00      	cmp	r3, #0
 800c648:	d109      	bne.n	800c65e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6818      	ldr	r0, [r3, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	461a      	mov	r2, r3
 800c656:	6979      	ldr	r1, [r7, #20]
 800c658:	f006 ff02 	bl	8013460 <USB_EP0StartXfer>
 800c65c:	e008      	b.n	800c670 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6818      	ldr	r0, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	b2db      	uxtb	r3, r3
 800c668:	461a      	mov	r2, r3
 800c66a:	6979      	ldr	r1, [r7, #20]
 800c66c:	f006 fcb0 	bl	8012fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	460b      	mov	r3, r1
 800c684:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c686:	78fb      	ldrb	r3, [r7, #3]
 800c688:	f003 020f 	and.w	r2, r3, #15
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d901      	bls.n	800c698 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e050      	b.n	800c73a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da0f      	bge.n	800c6c0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6a0:	78fb      	ldrb	r3, [r7, #3]
 800c6a2:	f003 020f 	and.w	r2, r3, #15
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	00db      	lsls	r3, r3, #3
 800c6aa:	4413      	add	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	3338      	adds	r3, #56	; 0x38
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	705a      	strb	r2, [r3, #1]
 800c6be:	e00d      	b.n	800c6dc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c6c0:	78fa      	ldrb	r2, [r7, #3]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	00db      	lsls	r3, r3, #3
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c6e2:	78fb      	ldrb	r3, [r7, #3]
 800c6e4:	f003 030f 	and.w	r3, r3, #15
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d101      	bne.n	800c6fc <HAL_PCD_EP_SetStall+0x82>
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	e01e      	b.n	800c73a <HAL_PCD_EP_SetStall+0xc0>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68f9      	ldr	r1, [r7, #12]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f007 f940 	bl	8013990 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c710:	78fb      	ldrb	r3, [r7, #3]
 800c712:	f003 030f 	and.w	r3, r3, #15
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10a      	bne.n	800c730 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6818      	ldr	r0, [r3, #0]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	b2d9      	uxtb	r1, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c72a:	461a      	mov	r2, r3
 800c72c:	f007 fb30 	bl	8013d90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	460b      	mov	r3, r1
 800c74c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c74e:	78fb      	ldrb	r3, [r7, #3]
 800c750:	f003 020f 	and.w	r2, r3, #15
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d901      	bls.n	800c760 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	e042      	b.n	800c7e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c764:	2b00      	cmp	r3, #0
 800c766:	da0f      	bge.n	800c788 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c768:	78fb      	ldrb	r3, [r7, #3]
 800c76a:	f003 020f 	and.w	r2, r3, #15
 800c76e:	4613      	mov	r3, r2
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	4413      	add	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	3338      	adds	r3, #56	; 0x38
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	4413      	add	r3, r2
 800c77c:	3304      	adds	r3, #4
 800c77e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2201      	movs	r2, #1
 800c784:	705a      	strb	r2, [r3, #1]
 800c786:	e00f      	b.n	800c7a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c788:	78fb      	ldrb	r3, [r7, #3]
 800c78a:	f003 020f 	and.w	r2, r3, #15
 800c78e:	4613      	mov	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	4413      	add	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	4413      	add	r3, r2
 800c79e:	3304      	adds	r3, #4
 800c7a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c7ae:	78fb      	ldrb	r3, [r7, #3]
 800c7b0:	f003 030f 	and.w	r3, r3, #15
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d101      	bne.n	800c7c8 <HAL_PCD_EP_ClrStall+0x86>
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	e00e      	b.n	800c7e6 <HAL_PCD_EP_ClrStall+0xa4>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68f9      	ldr	r1, [r7, #12]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f007 f948 	bl	8013a6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c7fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	da0c      	bge.n	800c81c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c802:	78fb      	ldrb	r3, [r7, #3]
 800c804:	f003 020f 	and.w	r2, r3, #15
 800c808:	4613      	mov	r3, r2
 800c80a:	00db      	lsls	r3, r3, #3
 800c80c:	4413      	add	r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	3338      	adds	r3, #56	; 0x38
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	4413      	add	r3, r2
 800c816:	3304      	adds	r3, #4
 800c818:	60fb      	str	r3, [r7, #12]
 800c81a:	e00c      	b.n	800c836 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c81c:	78fb      	ldrb	r3, [r7, #3]
 800c81e:	f003 020f 	and.w	r2, r3, #15
 800c822:	4613      	mov	r3, r2
 800c824:	00db      	lsls	r3, r3, #3
 800c826:	4413      	add	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	4413      	add	r3, r2
 800c832:	3304      	adds	r3, #4
 800c834:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68f9      	ldr	r1, [r7, #12]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f006 ff67 	bl	8013710 <USB_EPStopXfer>
 800c842:	4603      	mov	r3, r0
 800c844:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c846:	7afb      	ldrb	r3, [r7, #11]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	460b      	mov	r3, r1
 800c85a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800c862:	2b01      	cmp	r3, #1
 800c864:	d101      	bne.n	800c86a <HAL_PCD_EP_Flush+0x1a>
 800c866:	2302      	movs	r3, #2
 800c868:	e01b      	b.n	800c8a2 <HAL_PCD_EP_Flush+0x52>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800c872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c876:	2b00      	cmp	r3, #0
 800c878:	da09      	bge.n	800c88e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	78fb      	ldrb	r3, [r7, #3]
 800c880:	f003 030f 	and.w	r3, r3, #15
 800c884:	4619      	mov	r1, r3
 800c886:	4610      	mov	r0, r2
 800c888:	f006 f99c 	bl	8012bc4 <USB_FlushTxFifo>
 800c88c:	e004      	b.n	800c898 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4618      	mov	r0, r3
 800c894:	f006 f9ca 	bl	8012c2c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b08a      	sub	sp, #40	; 0x28
 800c8ae:	af02      	add	r7, sp, #8
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	00db      	lsls	r3, r3, #3
 800c8c4:	4413      	add	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	3338      	adds	r3, #56	; 0x38
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6a1a      	ldr	r2, [r3, #32]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d901      	bls.n	800c8e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e06c      	b.n	800c9bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	699a      	ldr	r2, [r3, #24]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	69fa      	ldr	r2, [r7, #28]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d902      	bls.n	800c8fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	3303      	adds	r3, #3
 800c902:	089b      	lsrs	r3, r3, #2
 800c904:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c906:	e02b      	b.n	800c960 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	699a      	ldr	r2, [r3, #24]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	69fa      	ldr	r2, [r7, #28]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d902      	bls.n	800c924 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	3303      	adds	r3, #3
 800c928:	089b      	lsrs	r3, r3, #2
 800c92a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6919      	ldr	r1, [r3, #16]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	b2da      	uxtb	r2, r3
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	4603      	mov	r3, r0
 800c942:	6978      	ldr	r0, [r7, #20]
 800c944:	f006 ff8e 	bl	8013864 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	691a      	ldr	r2, [r3, #16]
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	441a      	add	r2, r3
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6a1a      	ldr	r2, [r3, #32]
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	441a      	add	r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	015a      	lsls	r2, r3, #5
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	4413      	add	r3, r2
 800c968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c96c:	699b      	ldr	r3, [r3, #24]
 800c96e:	b29b      	uxth	r3, r3
 800c970:	69ba      	ldr	r2, [r7, #24]
 800c972:	429a      	cmp	r2, r3
 800c974:	d809      	bhi.n	800c98a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6a1a      	ldr	r2, [r3, #32]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c97e:	429a      	cmp	r2, r3
 800c980:	d203      	bcs.n	800c98a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1be      	bne.n	800c908 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	699a      	ldr	r2, [r3, #24]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	429a      	cmp	r2, r3
 800c994:	d811      	bhi.n	800c9ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	f003 030f 	and.w	r3, r3, #15
 800c99c:	2201      	movs	r2, #1
 800c99e:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	43db      	mvns	r3, r3
 800c9b0:	6939      	ldr	r1, [r7, #16]
 800c9b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3720      	adds	r7, #32
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b088      	sub	sp, #32
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	333c      	adds	r3, #60	; 0x3c
 800c9dc:	3304      	adds	r3, #4
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d17b      	bne.n	800caf2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	f003 0308 	and.w	r3, r3, #8
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d015      	beq.n	800ca30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	4a61      	ldr	r2, [pc, #388]	; (800cb8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	f240 80b9 	bls.w	800cb80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 80b3 	beq.w	800cb80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	015a      	lsls	r2, r3, #5
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	4413      	add	r3, r2
 800ca22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca26:	461a      	mov	r2, r3
 800ca28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca2c:	6093      	str	r3, [r2, #8]
 800ca2e:	e0a7      	b.n	800cb80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	f003 0320 	and.w	r3, r3, #32
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d009      	beq.n	800ca4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	015a      	lsls	r2, r3, #5
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	4413      	add	r3, r2
 800ca42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca46:	461a      	mov	r2, r3
 800ca48:	2320      	movs	r3, #32
 800ca4a:	6093      	str	r3, [r2, #8]
 800ca4c:	e098      	b.n	800cb80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f040 8093 	bne.w	800cb80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	4a4b      	ldr	r2, [pc, #300]	; (800cb8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d90f      	bls.n	800ca82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00a      	beq.n	800ca82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca78:	461a      	mov	r2, r3
 800ca7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca7e:	6093      	str	r3, [r2, #8]
 800ca80:	e07e      	b.n	800cb80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	4613      	mov	r3, r2
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	4413      	add	r3, r2
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	4413      	add	r3, r2
 800ca94:	3304      	adds	r3, #4
 800ca96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	69da      	ldr	r2, [r3, #28]
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	0159      	lsls	r1, r3, #5
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	440b      	add	r3, r1
 800caa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caae:	1ad2      	subs	r2, r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d114      	bne.n	800cae4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	699b      	ldr	r3, [r3, #24]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d109      	bne.n	800cad6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6818      	ldr	r0, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cacc:	461a      	mov	r2, r3
 800cace:	2101      	movs	r1, #1
 800cad0:	f007 f95e 	bl	8013d90 <USB_EP0_OutStart>
 800cad4:	e006      	b.n	800cae4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	691a      	ldr	r2, [r3, #16]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	441a      	add	r2, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f00f f828 	bl	801bb40 <HAL_PCD_DataOutStageCallback>
 800caf0:	e046      	b.n	800cb80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	4a26      	ldr	r2, [pc, #152]	; (800cb90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d124      	bne.n	800cb44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00a      	beq.n	800cb1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb10:	461a      	mov	r2, r3
 800cb12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb16:	6093      	str	r3, [r2, #8]
 800cb18:	e032      	b.n	800cb80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	f003 0320 	and.w	r3, r3, #32
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d008      	beq.n	800cb36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	015a      	lsls	r2, r3, #5
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb30:	461a      	mov	r2, r3
 800cb32:	2320      	movs	r3, #32
 800cb34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f00e ffff 	bl	801bb40 <HAL_PCD_DataOutStageCallback>
 800cb42:	e01d      	b.n	800cb80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d114      	bne.n	800cb74 <PCD_EP_OutXfrComplete_int+0x1b0>
 800cb4a:	6879      	ldr	r1, [r7, #4]
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	4413      	add	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	440b      	add	r3, r1
 800cb58:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d108      	bne.n	800cb74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6818      	ldr	r0, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	2100      	movs	r1, #0
 800cb70:	f007 f90e 	bl	8013d90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f00e ffe0 	bl	801bb40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3720      	adds	r7, #32
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	4f54300a 	.word	0x4f54300a
 800cb90:	4f54310a 	.word	0x4f54310a

0800cb94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	333c      	adds	r3, #60	; 0x3c
 800cbac:	3304      	adds	r3, #4
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	015a      	lsls	r2, r3, #5
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	4413      	add	r3, r2
 800cbba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	4a15      	ldr	r2, [pc, #84]	; (800cc1c <PCD_EP_OutSetupPacket_int+0x88>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d90e      	bls.n	800cbe8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d009      	beq.n	800cbe8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbe6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f00e ff97 	bl	801bb1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	4a0a      	ldr	r2, [pc, #40]	; (800cc1c <PCD_EP_OutSetupPacket_int+0x88>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d90c      	bls.n	800cc10 <PCD_EP_OutSetupPacket_int+0x7c>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d108      	bne.n	800cc10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6818      	ldr	r0, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cc08:	461a      	mov	r2, r3
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	f007 f8c0 	bl	8013d90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3718      	adds	r7, #24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	4f54300a 	.word	0x4f54300a

0800cc20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	70fb      	strb	r3, [r7, #3]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800cc38:	78fb      	ldrb	r3, [r7, #3]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d107      	bne.n	800cc4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cc3e:	883b      	ldrh	r3, [r7, #0]
 800cc40:	0419      	lsls	r1, r3, #16
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	430a      	orrs	r2, r1
 800cc4a:	629a      	str	r2, [r3, #40]	; 0x28
 800cc4c:	e028      	b.n	800cca0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc54:	0c1b      	lsrs	r3, r3, #16
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	4413      	add	r3, r2
 800cc5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73fb      	strb	r3, [r7, #15]
 800cc60:	e00d      	b.n	800cc7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	7bfb      	ldrb	r3, [r7, #15]
 800cc68:	3340      	adds	r3, #64	; 0x40
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	0c1b      	lsrs	r3, r3, #16
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	4413      	add	r3, r2
 800cc76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	73fb      	strb	r3, [r7, #15]
 800cc7e:	7bfa      	ldrb	r2, [r7, #15]
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	3b01      	subs	r3, #1
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d3ec      	bcc.n	800cc62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cc88:	883b      	ldrh	r3, [r7, #0]
 800cc8a:	0418      	lsls	r0, r3, #16
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6819      	ldr	r1, [r3, #0]
 800cc90:	78fb      	ldrb	r3, [r7, #3]
 800cc92:	3b01      	subs	r3, #1
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	4302      	orrs	r2, r0
 800cc98:	3340      	adds	r3, #64	; 0x40
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	440b      	add	r3, r1
 800cc9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b083      	sub	sp, #12
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	887a      	ldrh	r2, [r7, #2]
 800ccc0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b086      	sub	sp, #24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e267      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d075      	beq.n	800cdf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cd06:	4b88      	ldr	r3, [pc, #544]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f003 030c 	and.w	r3, r3, #12
 800cd0e:	2b04      	cmp	r3, #4
 800cd10:	d00c      	beq.n	800cd2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd12:	4b85      	ldr	r3, [pc, #532]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cd1a:	2b08      	cmp	r3, #8
 800cd1c:	d112      	bne.n	800cd44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd1e:	4b82      	ldr	r3, [pc, #520]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd2a:	d10b      	bne.n	800cd44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd2c:	4b7e      	ldr	r3, [pc, #504]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d05b      	beq.n	800cdf0 <HAL_RCC_OscConfig+0x108>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d157      	bne.n	800cdf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	e242      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd4c:	d106      	bne.n	800cd5c <HAL_RCC_OscConfig+0x74>
 800cd4e:	4b76      	ldr	r3, [pc, #472]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a75      	ldr	r2, [pc, #468]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	e01d      	b.n	800cd98 <HAL_RCC_OscConfig+0xb0>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd64:	d10c      	bne.n	800cd80 <HAL_RCC_OscConfig+0x98>
 800cd66:	4b70      	ldr	r3, [pc, #448]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a6f      	ldr	r2, [pc, #444]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	4b6d      	ldr	r3, [pc, #436]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a6c      	ldr	r2, [pc, #432]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd7c:	6013      	str	r3, [r2, #0]
 800cd7e:	e00b      	b.n	800cd98 <HAL_RCC_OscConfig+0xb0>
 800cd80:	4b69      	ldr	r3, [pc, #420]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a68      	ldr	r2, [pc, #416]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd8a:	6013      	str	r3, [r2, #0]
 800cd8c:	4b66      	ldr	r3, [pc, #408]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a65      	ldr	r2, [pc, #404]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cd92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d013      	beq.n	800cdc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cda0:	f7fd f842 	bl	8009e28 <HAL_GetTick>
 800cda4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cda6:	e008      	b.n	800cdba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cda8:	f7fd f83e 	bl	8009e28 <HAL_GetTick>
 800cdac:	4602      	mov	r2, r0
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	2b64      	cmp	r3, #100	; 0x64
 800cdb4:	d901      	bls.n	800cdba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	e207      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cdba:	4b5b      	ldr	r3, [pc, #364]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d0f0      	beq.n	800cda8 <HAL_RCC_OscConfig+0xc0>
 800cdc6:	e014      	b.n	800cdf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdc8:	f7fd f82e 	bl	8009e28 <HAL_GetTick>
 800cdcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cdce:	e008      	b.n	800cde2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cdd0:	f7fd f82a 	bl	8009e28 <HAL_GetTick>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	2b64      	cmp	r3, #100	; 0x64
 800cddc:	d901      	bls.n	800cde2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cdde:	2303      	movs	r3, #3
 800cde0:	e1f3      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cde2:	4b51      	ldr	r3, [pc, #324]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1f0      	bne.n	800cdd0 <HAL_RCC_OscConfig+0xe8>
 800cdee:	e000      	b.n	800cdf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cdf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 0302 	and.w	r3, r3, #2
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d063      	beq.n	800cec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cdfe:	4b4a      	ldr	r3, [pc, #296]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	f003 030c 	and.w	r3, r3, #12
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00b      	beq.n	800ce22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce0a:	4b47      	ldr	r3, [pc, #284]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ce12:	2b08      	cmp	r3, #8
 800ce14:	d11c      	bne.n	800ce50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce16:	4b44      	ldr	r3, [pc, #272]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d116      	bne.n	800ce50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce22:	4b41      	ldr	r3, [pc, #260]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0302 	and.w	r3, r3, #2
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d005      	beq.n	800ce3a <HAL_RCC_OscConfig+0x152>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d001      	beq.n	800ce3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ce36:	2301      	movs	r3, #1
 800ce38:	e1c7      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce3a:	4b3b      	ldr	r3, [pc, #236]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	00db      	lsls	r3, r3, #3
 800ce48:	4937      	ldr	r1, [pc, #220]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce4e:	e03a      	b.n	800cec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d020      	beq.n	800ce9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ce58:	4b34      	ldr	r3, [pc, #208]	; (800cf2c <HAL_RCC_OscConfig+0x244>)
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce5e:	f7fc ffe3 	bl	8009e28 <HAL_GetTick>
 800ce62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce64:	e008      	b.n	800ce78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce66:	f7fc ffdf 	bl	8009e28 <HAL_GetTick>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d901      	bls.n	800ce78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ce74:	2303      	movs	r3, #3
 800ce76:	e1a8      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce78:	4b2b      	ldr	r3, [pc, #172]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 0302 	and.w	r3, r3, #2
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d0f0      	beq.n	800ce66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce84:	4b28      	ldr	r3, [pc, #160]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	4925      	ldr	r1, [pc, #148]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	600b      	str	r3, [r1, #0]
 800ce98:	e015      	b.n	800cec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce9a:	4b24      	ldr	r3, [pc, #144]	; (800cf2c <HAL_RCC_OscConfig+0x244>)
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cea0:	f7fc ffc2 	bl	8009e28 <HAL_GetTick>
 800cea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cea6:	e008      	b.n	800ceba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cea8:	f7fc ffbe 	bl	8009e28 <HAL_GetTick>
 800ceac:	4602      	mov	r2, r0
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d901      	bls.n	800ceba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ceb6:	2303      	movs	r3, #3
 800ceb8:	e187      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ceba:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 0302 	and.w	r3, r3, #2
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1f0      	bne.n	800cea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f003 0308 	and.w	r3, r3, #8
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d036      	beq.n	800cf40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	695b      	ldr	r3, [r3, #20]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d016      	beq.n	800cf08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ceda:	4b15      	ldr	r3, [pc, #84]	; (800cf30 <HAL_RCC_OscConfig+0x248>)
 800cedc:	2201      	movs	r2, #1
 800cede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cee0:	f7fc ffa2 	bl	8009e28 <HAL_GetTick>
 800cee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cee6:	e008      	b.n	800cefa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cee8:	f7fc ff9e 	bl	8009e28 <HAL_GetTick>
 800ceec:	4602      	mov	r2, r0
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d901      	bls.n	800cefa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cef6:	2303      	movs	r3, #3
 800cef8:	e167      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cefa:	4b0b      	ldr	r3, [pc, #44]	; (800cf28 <HAL_RCC_OscConfig+0x240>)
 800cefc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cefe:	f003 0302 	and.w	r3, r3, #2
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d0f0      	beq.n	800cee8 <HAL_RCC_OscConfig+0x200>
 800cf06:	e01b      	b.n	800cf40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf08:	4b09      	ldr	r3, [pc, #36]	; (800cf30 <HAL_RCC_OscConfig+0x248>)
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cf0e:	f7fc ff8b 	bl	8009e28 <HAL_GetTick>
 800cf12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf14:	e00e      	b.n	800cf34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf16:	f7fc ff87 	bl	8009e28 <HAL_GetTick>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d907      	bls.n	800cf34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cf24:	2303      	movs	r3, #3
 800cf26:	e150      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
 800cf28:	40023800 	.word	0x40023800
 800cf2c:	42470000 	.word	0x42470000
 800cf30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf34:	4b88      	ldr	r3, [pc, #544]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cf36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf38:	f003 0302 	and.w	r3, r3, #2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1ea      	bne.n	800cf16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f003 0304 	and.w	r3, r3, #4
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 8097 	beq.w	800d07c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf52:	4b81      	ldr	r3, [pc, #516]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10f      	bne.n	800cf7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf5e:	2300      	movs	r3, #0
 800cf60:	60bb      	str	r3, [r7, #8]
 800cf62:	4b7d      	ldr	r3, [pc, #500]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf66:	4a7c      	ldr	r2, [pc, #496]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cf68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf6c:	6413      	str	r3, [r2, #64]	; 0x40
 800cf6e:	4b7a      	ldr	r3, [pc, #488]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf76:	60bb      	str	r3, [r7, #8]
 800cf78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf7e:	4b77      	ldr	r3, [pc, #476]	; (800d15c <HAL_RCC_OscConfig+0x474>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d118      	bne.n	800cfbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf8a:	4b74      	ldr	r3, [pc, #464]	; (800d15c <HAL_RCC_OscConfig+0x474>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a73      	ldr	r2, [pc, #460]	; (800d15c <HAL_RCC_OscConfig+0x474>)
 800cf90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf96:	f7fc ff47 	bl	8009e28 <HAL_GetTick>
 800cf9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf9c:	e008      	b.n	800cfb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf9e:	f7fc ff43 	bl	8009e28 <HAL_GetTick>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d901      	bls.n	800cfb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cfac:	2303      	movs	r3, #3
 800cfae:	e10c      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfb0:	4b6a      	ldr	r3, [pc, #424]	; (800d15c <HAL_RCC_OscConfig+0x474>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d0f0      	beq.n	800cf9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d106      	bne.n	800cfd2 <HAL_RCC_OscConfig+0x2ea>
 800cfc4:	4b64      	ldr	r3, [pc, #400]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cfc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc8:	4a63      	ldr	r2, [pc, #396]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cfca:	f043 0301 	orr.w	r3, r3, #1
 800cfce:	6713      	str	r3, [r2, #112]	; 0x70
 800cfd0:	e01c      	b.n	800d00c <HAL_RCC_OscConfig+0x324>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	2b05      	cmp	r3, #5
 800cfd8:	d10c      	bne.n	800cff4 <HAL_RCC_OscConfig+0x30c>
 800cfda:	4b5f      	ldr	r3, [pc, #380]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cfdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfde:	4a5e      	ldr	r2, [pc, #376]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cfe0:	f043 0304 	orr.w	r3, r3, #4
 800cfe4:	6713      	str	r3, [r2, #112]	; 0x70
 800cfe6:	4b5c      	ldr	r3, [pc, #368]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cfe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfea:	4a5b      	ldr	r2, [pc, #364]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cfec:	f043 0301 	orr.w	r3, r3, #1
 800cff0:	6713      	str	r3, [r2, #112]	; 0x70
 800cff2:	e00b      	b.n	800d00c <HAL_RCC_OscConfig+0x324>
 800cff4:	4b58      	ldr	r3, [pc, #352]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff8:	4a57      	ldr	r2, [pc, #348]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800cffa:	f023 0301 	bic.w	r3, r3, #1
 800cffe:	6713      	str	r3, [r2, #112]	; 0x70
 800d000:	4b55      	ldr	r3, [pc, #340]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d004:	4a54      	ldr	r2, [pc, #336]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d006:	f023 0304 	bic.w	r3, r3, #4
 800d00a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d015      	beq.n	800d040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d014:	f7fc ff08 	bl	8009e28 <HAL_GetTick>
 800d018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d01a:	e00a      	b.n	800d032 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d01c:	f7fc ff04 	bl	8009e28 <HAL_GetTick>
 800d020:	4602      	mov	r2, r0
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	f241 3288 	movw	r2, #5000	; 0x1388
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d901      	bls.n	800d032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800d02e:	2303      	movs	r3, #3
 800d030:	e0cb      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d032:	4b49      	ldr	r3, [pc, #292]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d036:	f003 0302 	and.w	r3, r3, #2
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d0ee      	beq.n	800d01c <HAL_RCC_OscConfig+0x334>
 800d03e:	e014      	b.n	800d06a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d040:	f7fc fef2 	bl	8009e28 <HAL_GetTick>
 800d044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d046:	e00a      	b.n	800d05e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d048:	f7fc feee 	bl	8009e28 <HAL_GetTick>
 800d04c:	4602      	mov	r2, r0
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	f241 3288 	movw	r2, #5000	; 0x1388
 800d056:	4293      	cmp	r3, r2
 800d058:	d901      	bls.n	800d05e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e0b5      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d05e:	4b3e      	ldr	r3, [pc, #248]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d062:	f003 0302 	and.w	r3, r3, #2
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1ee      	bne.n	800d048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d105      	bne.n	800d07c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d070:	4b39      	ldr	r3, [pc, #228]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d074:	4a38      	ldr	r2, [pc, #224]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d07a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	699b      	ldr	r3, [r3, #24]
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 80a1 	beq.w	800d1c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d086:	4b34      	ldr	r3, [pc, #208]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	f003 030c 	and.w	r3, r3, #12
 800d08e:	2b08      	cmp	r3, #8
 800d090:	d05c      	beq.n	800d14c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	2b02      	cmp	r3, #2
 800d098:	d141      	bne.n	800d11e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d09a:	4b31      	ldr	r3, [pc, #196]	; (800d160 <HAL_RCC_OscConfig+0x478>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0a0:	f7fc fec2 	bl	8009e28 <HAL_GetTick>
 800d0a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0a6:	e008      	b.n	800d0ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0a8:	f7fc febe 	bl	8009e28 <HAL_GetTick>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d901      	bls.n	800d0ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800d0b6:	2303      	movs	r3, #3
 800d0b8:	e087      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0ba:	4b27      	ldr	r3, [pc, #156]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1f0      	bne.n	800d0a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	69da      	ldr	r2, [r3, #28]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	431a      	orrs	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d4:	019b      	lsls	r3, r3, #6
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0dc:	085b      	lsrs	r3, r3, #1
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	041b      	lsls	r3, r3, #16
 800d0e2:	431a      	orrs	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e8:	061b      	lsls	r3, r3, #24
 800d0ea:	491b      	ldr	r1, [pc, #108]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d0f0:	4b1b      	ldr	r3, [pc, #108]	; (800d160 <HAL_RCC_OscConfig+0x478>)
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0f6:	f7fc fe97 	bl	8009e28 <HAL_GetTick>
 800d0fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0fc:	e008      	b.n	800d110 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0fe:	f7fc fe93 	bl	8009e28 <HAL_GetTick>
 800d102:	4602      	mov	r2, r0
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	1ad3      	subs	r3, r2, r3
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d901      	bls.n	800d110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d10c:	2303      	movs	r3, #3
 800d10e:	e05c      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d110:	4b11      	ldr	r3, [pc, #68]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d0f0      	beq.n	800d0fe <HAL_RCC_OscConfig+0x416>
 800d11c:	e054      	b.n	800d1c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d11e:	4b10      	ldr	r3, [pc, #64]	; (800d160 <HAL_RCC_OscConfig+0x478>)
 800d120:	2200      	movs	r2, #0
 800d122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d124:	f7fc fe80 	bl	8009e28 <HAL_GetTick>
 800d128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d12a:	e008      	b.n	800d13e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d12c:	f7fc fe7c 	bl	8009e28 <HAL_GetTick>
 800d130:	4602      	mov	r2, r0
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	1ad3      	subs	r3, r2, r3
 800d136:	2b02      	cmp	r3, #2
 800d138:	d901      	bls.n	800d13e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800d13a:	2303      	movs	r3, #3
 800d13c:	e045      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d13e:	4b06      	ldr	r3, [pc, #24]	; (800d158 <HAL_RCC_OscConfig+0x470>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1f0      	bne.n	800d12c <HAL_RCC_OscConfig+0x444>
 800d14a:	e03d      	b.n	800d1c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	699b      	ldr	r3, [r3, #24]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d107      	bne.n	800d164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	e038      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
 800d158:	40023800 	.word	0x40023800
 800d15c:	40007000 	.word	0x40007000
 800d160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d164:	4b1b      	ldr	r3, [pc, #108]	; (800d1d4 <HAL_RCC_OscConfig+0x4ec>)
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d028      	beq.n	800d1c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d121      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d11a      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d194:	4013      	ands	r3, r2
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d19a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d111      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1aa:	085b      	lsrs	r3, r3, #1
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d107      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d001      	beq.n	800d1c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e000      	b.n	800d1ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3718      	adds	r7, #24
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	40023800 	.word	0x40023800

0800d1d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e0cc      	b.n	800d386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d1ec:	4b68      	ldr	r3, [pc, #416]	; (800d390 <HAL_RCC_ClockConfig+0x1b8>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f003 0307 	and.w	r3, r3, #7
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d90c      	bls.n	800d214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1fa:	4b65      	ldr	r3, [pc, #404]	; (800d390 <HAL_RCC_ClockConfig+0x1b8>)
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	b2d2      	uxtb	r2, r2
 800d200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d202:	4b63      	ldr	r3, [pc, #396]	; (800d390 <HAL_RCC_ClockConfig+0x1b8>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f003 0307 	and.w	r3, r3, #7
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d001      	beq.n	800d214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	e0b8      	b.n	800d386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0302 	and.w	r3, r3, #2
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d020      	beq.n	800d262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f003 0304 	and.w	r3, r3, #4
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d005      	beq.n	800d238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d22c:	4b59      	ldr	r3, [pc, #356]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	4a58      	ldr	r2, [pc, #352]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f003 0308 	and.w	r3, r3, #8
 800d240:	2b00      	cmp	r3, #0
 800d242:	d005      	beq.n	800d250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d244:	4b53      	ldr	r3, [pc, #332]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	4a52      	ldr	r2, [pc, #328]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d24a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d24e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d250:	4b50      	ldr	r3, [pc, #320]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	494d      	ldr	r1, [pc, #308]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d25e:	4313      	orrs	r3, r2
 800d260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 0301 	and.w	r3, r3, #1
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d044      	beq.n	800d2f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	2b01      	cmp	r3, #1
 800d274:	d107      	bne.n	800d286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d276:	4b47      	ldr	r3, [pc, #284]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d119      	bne.n	800d2b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	e07f      	b.n	800d386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d003      	beq.n	800d296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d292:	2b03      	cmp	r3, #3
 800d294:	d107      	bne.n	800d2a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d296:	4b3f      	ldr	r3, [pc, #252]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d109      	bne.n	800d2b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e06f      	b.n	800d386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d2a6:	4b3b      	ldr	r3, [pc, #236]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f003 0302 	and.w	r3, r3, #2
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e067      	b.n	800d386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d2b6:	4b37      	ldr	r3, [pc, #220]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	f023 0203 	bic.w	r2, r3, #3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	4934      	ldr	r1, [pc, #208]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d2c8:	f7fc fdae 	bl	8009e28 <HAL_GetTick>
 800d2cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2ce:	e00a      	b.n	800d2e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2d0:	f7fc fdaa 	bl	8009e28 <HAL_GetTick>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d901      	bls.n	800d2e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e04f      	b.n	800d386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2e6:	4b2b      	ldr	r3, [pc, #172]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	f003 020c 	and.w	r2, r3, #12
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d1eb      	bne.n	800d2d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d2f8:	4b25      	ldr	r3, [pc, #148]	; (800d390 <HAL_RCC_ClockConfig+0x1b8>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0307 	and.w	r3, r3, #7
 800d300:	683a      	ldr	r2, [r7, #0]
 800d302:	429a      	cmp	r2, r3
 800d304:	d20c      	bcs.n	800d320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d306:	4b22      	ldr	r3, [pc, #136]	; (800d390 <HAL_RCC_ClockConfig+0x1b8>)
 800d308:	683a      	ldr	r2, [r7, #0]
 800d30a:	b2d2      	uxtb	r2, r2
 800d30c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d30e:	4b20      	ldr	r3, [pc, #128]	; (800d390 <HAL_RCC_ClockConfig+0x1b8>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 0307 	and.w	r3, r3, #7
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d001      	beq.n	800d320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	e032      	b.n	800d386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 0304 	and.w	r3, r3, #4
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d008      	beq.n	800d33e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d32c:	4b19      	ldr	r3, [pc, #100]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	4916      	ldr	r1, [pc, #88]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d33a:	4313      	orrs	r3, r2
 800d33c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f003 0308 	and.w	r3, r3, #8
 800d346:	2b00      	cmp	r3, #0
 800d348:	d009      	beq.n	800d35e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d34a:	4b12      	ldr	r3, [pc, #72]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	00db      	lsls	r3, r3, #3
 800d358:	490e      	ldr	r1, [pc, #56]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d35a:	4313      	orrs	r3, r2
 800d35c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d35e:	f000 f821 	bl	800d3a4 <HAL_RCC_GetSysClockFreq>
 800d362:	4602      	mov	r2, r0
 800d364:	4b0b      	ldr	r3, [pc, #44]	; (800d394 <HAL_RCC_ClockConfig+0x1bc>)
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	091b      	lsrs	r3, r3, #4
 800d36a:	f003 030f 	and.w	r3, r3, #15
 800d36e:	490a      	ldr	r1, [pc, #40]	; (800d398 <HAL_RCC_ClockConfig+0x1c0>)
 800d370:	5ccb      	ldrb	r3, [r1, r3]
 800d372:	fa22 f303 	lsr.w	r3, r2, r3
 800d376:	4a09      	ldr	r2, [pc, #36]	; (800d39c <HAL_RCC_ClockConfig+0x1c4>)
 800d378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d37a:	4b09      	ldr	r3, [pc, #36]	; (800d3a0 <HAL_RCC_ClockConfig+0x1c8>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f6 fcd2 	bl	8003d28 <HAL_InitTick>

  return HAL_OK;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	40023c00 	.word	0x40023c00
 800d394:	40023800 	.word	0x40023800
 800d398:	0801e600 	.word	0x0801e600
 800d39c:	20000004 	.word	0x20000004
 800d3a0:	20000008 	.word	0x20000008

0800d3a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d3a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d3a8:	b094      	sub	sp, #80	; 0x50
 800d3aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	647b      	str	r3, [r7, #68]	; 0x44
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d3bc:	4b79      	ldr	r3, [pc, #484]	; (800d5a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	f003 030c 	and.w	r3, r3, #12
 800d3c4:	2b08      	cmp	r3, #8
 800d3c6:	d00d      	beq.n	800d3e4 <HAL_RCC_GetSysClockFreq+0x40>
 800d3c8:	2b08      	cmp	r3, #8
 800d3ca:	f200 80e1 	bhi.w	800d590 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d002      	beq.n	800d3d8 <HAL_RCC_GetSysClockFreq+0x34>
 800d3d2:	2b04      	cmp	r3, #4
 800d3d4:	d003      	beq.n	800d3de <HAL_RCC_GetSysClockFreq+0x3a>
 800d3d6:	e0db      	b.n	800d590 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d3d8:	4b73      	ldr	r3, [pc, #460]	; (800d5a8 <HAL_RCC_GetSysClockFreq+0x204>)
 800d3da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800d3dc:	e0db      	b.n	800d596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d3de:	4b72      	ldr	r3, [pc, #456]	; (800d5a8 <HAL_RCC_GetSysClockFreq+0x204>)
 800d3e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d3e2:	e0d8      	b.n	800d596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d3e4:	4b6f      	ldr	r3, [pc, #444]	; (800d5a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d3ee:	4b6d      	ldr	r3, [pc, #436]	; (800d5a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d063      	beq.n	800d4c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d3fa:	4b6a      	ldr	r3, [pc, #424]	; (800d5a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	099b      	lsrs	r3, r3, #6
 800d400:	2200      	movs	r2, #0
 800d402:	63bb      	str	r3, [r7, #56]	; 0x38
 800d404:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d40c:	633b      	str	r3, [r7, #48]	; 0x30
 800d40e:	2300      	movs	r3, #0
 800d410:	637b      	str	r3, [r7, #52]	; 0x34
 800d412:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d416:	4622      	mov	r2, r4
 800d418:	462b      	mov	r3, r5
 800d41a:	f04f 0000 	mov.w	r0, #0
 800d41e:	f04f 0100 	mov.w	r1, #0
 800d422:	0159      	lsls	r1, r3, #5
 800d424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d428:	0150      	lsls	r0, r2, #5
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4621      	mov	r1, r4
 800d430:	1a51      	subs	r1, r2, r1
 800d432:	6139      	str	r1, [r7, #16]
 800d434:	4629      	mov	r1, r5
 800d436:	eb63 0301 	sbc.w	r3, r3, r1
 800d43a:	617b      	str	r3, [r7, #20]
 800d43c:	f04f 0200 	mov.w	r2, #0
 800d440:	f04f 0300 	mov.w	r3, #0
 800d444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d448:	4659      	mov	r1, fp
 800d44a:	018b      	lsls	r3, r1, #6
 800d44c:	4651      	mov	r1, sl
 800d44e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d452:	4651      	mov	r1, sl
 800d454:	018a      	lsls	r2, r1, #6
 800d456:	4651      	mov	r1, sl
 800d458:	ebb2 0801 	subs.w	r8, r2, r1
 800d45c:	4659      	mov	r1, fp
 800d45e:	eb63 0901 	sbc.w	r9, r3, r1
 800d462:	f04f 0200 	mov.w	r2, #0
 800d466:	f04f 0300 	mov.w	r3, #0
 800d46a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d46e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d476:	4690      	mov	r8, r2
 800d478:	4699      	mov	r9, r3
 800d47a:	4623      	mov	r3, r4
 800d47c:	eb18 0303 	adds.w	r3, r8, r3
 800d480:	60bb      	str	r3, [r7, #8]
 800d482:	462b      	mov	r3, r5
 800d484:	eb49 0303 	adc.w	r3, r9, r3
 800d488:	60fb      	str	r3, [r7, #12]
 800d48a:	f04f 0200 	mov.w	r2, #0
 800d48e:	f04f 0300 	mov.w	r3, #0
 800d492:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d496:	4629      	mov	r1, r5
 800d498:	028b      	lsls	r3, r1, #10
 800d49a:	4621      	mov	r1, r4
 800d49c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	028a      	lsls	r2, r1, #10
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d4b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d4b4:	f7f3 fbd2 	bl	8000c5c <__aeabi_uldivmod>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4613      	mov	r3, r2
 800d4be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4c0:	e058      	b.n	800d574 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d4c2:	4b38      	ldr	r3, [pc, #224]	; (800d5a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	099b      	lsrs	r3, r3, #6
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d4d2:	623b      	str	r3, [r7, #32]
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d4dc:	4642      	mov	r2, r8
 800d4de:	464b      	mov	r3, r9
 800d4e0:	f04f 0000 	mov.w	r0, #0
 800d4e4:	f04f 0100 	mov.w	r1, #0
 800d4e8:	0159      	lsls	r1, r3, #5
 800d4ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d4ee:	0150      	lsls	r0, r2, #5
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4641      	mov	r1, r8
 800d4f6:	ebb2 0a01 	subs.w	sl, r2, r1
 800d4fa:	4649      	mov	r1, r9
 800d4fc:	eb63 0b01 	sbc.w	fp, r3, r1
 800d500:	f04f 0200 	mov.w	r2, #0
 800d504:	f04f 0300 	mov.w	r3, #0
 800d508:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d50c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d510:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d514:	ebb2 040a 	subs.w	r4, r2, sl
 800d518:	eb63 050b 	sbc.w	r5, r3, fp
 800d51c:	f04f 0200 	mov.w	r2, #0
 800d520:	f04f 0300 	mov.w	r3, #0
 800d524:	00eb      	lsls	r3, r5, #3
 800d526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d52a:	00e2      	lsls	r2, r4, #3
 800d52c:	4614      	mov	r4, r2
 800d52e:	461d      	mov	r5, r3
 800d530:	4643      	mov	r3, r8
 800d532:	18e3      	adds	r3, r4, r3
 800d534:	603b      	str	r3, [r7, #0]
 800d536:	464b      	mov	r3, r9
 800d538:	eb45 0303 	adc.w	r3, r5, r3
 800d53c:	607b      	str	r3, [r7, #4]
 800d53e:	f04f 0200 	mov.w	r2, #0
 800d542:	f04f 0300 	mov.w	r3, #0
 800d546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d54a:	4629      	mov	r1, r5
 800d54c:	028b      	lsls	r3, r1, #10
 800d54e:	4621      	mov	r1, r4
 800d550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d554:	4621      	mov	r1, r4
 800d556:	028a      	lsls	r2, r1, #10
 800d558:	4610      	mov	r0, r2
 800d55a:	4619      	mov	r1, r3
 800d55c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d55e:	2200      	movs	r2, #0
 800d560:	61bb      	str	r3, [r7, #24]
 800d562:	61fa      	str	r2, [r7, #28]
 800d564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d568:	f7f3 fb78 	bl	8000c5c <__aeabi_uldivmod>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4613      	mov	r3, r2
 800d572:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d574:	4b0b      	ldr	r3, [pc, #44]	; (800d5a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	0c1b      	lsrs	r3, r3, #16
 800d57a:	f003 0303 	and.w	r3, r3, #3
 800d57e:	3301      	adds	r3, #1
 800d580:	005b      	lsls	r3, r3, #1
 800d582:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800d584:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d588:	fbb2 f3f3 	udiv	r3, r2, r3
 800d58c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d58e:	e002      	b.n	800d596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d590:	4b05      	ldr	r3, [pc, #20]	; (800d5a8 <HAL_RCC_GetSysClockFreq+0x204>)
 800d592:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d594:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3750      	adds	r7, #80	; 0x50
 800d59c:	46bd      	mov	sp, r7
 800d59e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5a2:	bf00      	nop
 800d5a4:	40023800 	.word	0x40023800
 800d5a8:	00f42400 	.word	0x00f42400

0800d5ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d5b0:	4b03      	ldr	r3, [pc, #12]	; (800d5c0 <HAL_RCC_GetHCLKFreq+0x14>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	20000004 	.word	0x20000004

0800d5c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d5c8:	f7ff fff0 	bl	800d5ac <HAL_RCC_GetHCLKFreq>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	4b05      	ldr	r3, [pc, #20]	; (800d5e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	0a9b      	lsrs	r3, r3, #10
 800d5d4:	f003 0307 	and.w	r3, r3, #7
 800d5d8:	4903      	ldr	r1, [pc, #12]	; (800d5e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d5da:	5ccb      	ldrb	r3, [r1, r3]
 800d5dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	40023800 	.word	0x40023800
 800d5e8:	0801e610 	.word	0x0801e610

0800d5ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d5f0:	f7ff ffdc 	bl	800d5ac <HAL_RCC_GetHCLKFreq>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	4b05      	ldr	r3, [pc, #20]	; (800d60c <HAL_RCC_GetPCLK2Freq+0x20>)
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	0b5b      	lsrs	r3, r3, #13
 800d5fc:	f003 0307 	and.w	r3, r3, #7
 800d600:	4903      	ldr	r1, [pc, #12]	; (800d610 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d602:	5ccb      	ldrb	r3, [r1, r3]
 800d604:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d608:	4618      	mov	r0, r3
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	40023800 	.word	0x40023800
 800d610:	0801e610 	.word	0x0801e610

0800d614 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	220f      	movs	r2, #15
 800d622:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d624:	4b12      	ldr	r3, [pc, #72]	; (800d670 <HAL_RCC_GetClockConfig+0x5c>)
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	f003 0203 	and.w	r2, r3, #3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d630:	4b0f      	ldr	r3, [pc, #60]	; (800d670 <HAL_RCC_GetClockConfig+0x5c>)
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d63c:	4b0c      	ldr	r3, [pc, #48]	; (800d670 <HAL_RCC_GetClockConfig+0x5c>)
 800d63e:	689b      	ldr	r3, [r3, #8]
 800d640:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d648:	4b09      	ldr	r3, [pc, #36]	; (800d670 <HAL_RCC_GetClockConfig+0x5c>)
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	08db      	lsrs	r3, r3, #3
 800d64e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d656:	4b07      	ldr	r3, [pc, #28]	; (800d674 <HAL_RCC_GetClockConfig+0x60>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f003 0207 	and.w	r2, r3, #7
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	601a      	str	r2, [r3, #0]
}
 800d662:	bf00      	nop
 800d664:	370c      	adds	r7, #12
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	40023800 	.word	0x40023800
 800d674:	40023c00 	.word	0x40023c00

0800d678 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d101      	bne.n	800d68a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e022      	b.n	800d6d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d105      	bne.n	800d6a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7f5 ff39 	bl	8003514 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2203      	movs	r2, #3
 800d6a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f814 	bl	800d6d8 <HAL_SD_InitCard>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e00a      	b.n	800d6d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d6d8:	b5b0      	push	{r4, r5, r7, lr}
 800d6da:	b08e      	sub	sp, #56	; 0x38
 800d6dc:	af04      	add	r7, sp, #16
 800d6de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d6f4:	2376      	movs	r3, #118	; 0x76
 800d6f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681d      	ldr	r5, [r3, #0]
 800d6fc:	466c      	mov	r4, sp
 800d6fe:	f107 0314 	add.w	r3, r7, #20
 800d702:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d70a:	f107 0308 	add.w	r3, r7, #8
 800d70e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d710:	4628      	mov	r0, r5
 800d712:	f004 fa0d 	bl	8011b30 <SDIO_Init>
 800d716:	4603      	mov	r3, r0
 800d718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d720:	2b00      	cmp	r3, #0
 800d722:	d001      	beq.n	800d728 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d724:	2301      	movs	r3, #1
 800d726:	e04f      	b.n	800d7c8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d728:	4b29      	ldr	r3, [pc, #164]	; (800d7d0 <HAL_SD_InitCard+0xf8>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4618      	mov	r0, r3
 800d734:	f004 fa45 	bl	8011bc2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d738:	4b25      	ldr	r3, [pc, #148]	; (800d7d0 <HAL_SD_InitCard+0xf8>)
 800d73a:	2201      	movs	r2, #1
 800d73c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d73e:	2002      	movs	r0, #2
 800d740:	f7fc fb7e 	bl	8009e40 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 ff03 	bl	800e550 <SD_PowerON>
 800d74a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00b      	beq.n	800d76a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d75e:	6a3b      	ldr	r3, [r7, #32]
 800d760:	431a      	orrs	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d766:	2301      	movs	r3, #1
 800d768:	e02e      	b.n	800d7c8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fe22 	bl	800e3b4 <SD_InitCard>
 800d770:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00b      	beq.n	800d790 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	431a      	orrs	r2, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d78c:	2301      	movs	r3, #1
 800d78e:	e01b      	b.n	800d7c8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d798:	4618      	mov	r0, r3
 800d79a:	f004 faa4 	bl	8011ce6 <SDMMC_CmdBlockLength>
 800d79e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7a0:	6a3b      	ldr	r3, [r7, #32]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00f      	beq.n	800d7c6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a0a      	ldr	r2, [pc, #40]	; (800d7d4 <HAL_SD_InitCard+0xfc>)
 800d7ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7b2:	6a3b      	ldr	r3, [r7, #32]
 800d7b4:	431a      	orrs	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e000      	b.n	800d7c8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3728      	adds	r7, #40	; 0x28
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bdb0      	pop	{r4, r5, r7, pc}
 800d7d0:	422580a0 	.word	0x422580a0
 800d7d4:	004005ff 	.word	0x004005ff

0800d7d8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b092      	sub	sp, #72	; 0x48
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
 800d7e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d7e6:	f7fc fb1f 	bl	8009e28 <HAL_GetTick>
 800d7ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d107      	bne.n	800d80a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e1bd      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b01      	cmp	r3, #1
 800d814:	f040 81b0 	bne.w	800db78 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2200      	movs	r2, #0
 800d81c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d81e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	441a      	add	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d828:	429a      	cmp	r2, r3
 800d82a:	d907      	bls.n	800d83c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d830:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d838:	2301      	movs	r3, #1
 800d83a:	e1a4      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2203      	movs	r2, #3
 800d840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2200      	movs	r2, #0
 800d84a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d850:	2b01      	cmp	r3, #1
 800d852:	d002      	beq.n	800d85a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d856:	025b      	lsls	r3, r3, #9
 800d858:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d85a:	f04f 33ff 	mov.w	r3, #4294967295
 800d85e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	025b      	lsls	r3, r3, #9
 800d864:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d866:	2390      	movs	r3, #144	; 0x90
 800d868:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d86a:	2302      	movs	r3, #2
 800d86c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d86e:	2300      	movs	r3, #0
 800d870:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d872:	2301      	movs	r3, #1
 800d874:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f107 0214 	add.w	r2, r7, #20
 800d87e:	4611      	mov	r1, r2
 800d880:	4618      	mov	r0, r3
 800d882:	f004 fa04 	bl	8011c8e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d90a      	bls.n	800d8a2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2202      	movs	r2, #2
 800d890:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d898:	4618      	mov	r0, r3
 800d89a:	f004 fa68 	bl	8011d6e <SDMMC_CmdReadMultiBlock>
 800d89e:	6478      	str	r0, [r7, #68]	; 0x44
 800d8a0:	e009      	b.n	800d8b6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f004 fa3b 	bl	8011d2a <SDMMC_CmdReadSingleBlock>
 800d8b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d012      	beq.n	800d8e2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a7a      	ldr	r2, [pc, #488]	; (800daac <HAL_SD_ReadBlocks+0x2d4>)
 800d8c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8ca:	431a      	orrs	r2, r3
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e151      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d8e6:	e061      	b.n	800d9ac <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d03c      	beq.n	800d970 <HAL_SD_ReadBlocks+0x198>
 800d8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d039      	beq.n	800d970 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	643b      	str	r3, [r7, #64]	; 0x40
 800d900:	e033      	b.n	800d96a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	f004 f93d 	bl	8011b86 <SDIO_ReadFIFO>
 800d90c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d910:	b2da      	uxtb	r2, r3
 800d912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d914:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d918:	3301      	adds	r3, #1
 800d91a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d91e:	3b01      	subs	r3, #1
 800d920:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d924:	0a1b      	lsrs	r3, r3, #8
 800d926:	b2da      	uxtb	r2, r3
 800d928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d92a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d92e:	3301      	adds	r3, #1
 800d930:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d934:	3b01      	subs	r3, #1
 800d936:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93a:	0c1b      	lsrs	r3, r3, #16
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d940:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d944:	3301      	adds	r3, #1
 800d946:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94a:	3b01      	subs	r3, #1
 800d94c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d950:	0e1b      	lsrs	r3, r3, #24
 800d952:	b2da      	uxtb	r2, r3
 800d954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d956:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d95a:	3301      	adds	r3, #1
 800d95c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d960:	3b01      	subs	r3, #1
 800d962:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800d964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d966:	3301      	adds	r3, #1
 800d968:	643b      	str	r3, [r7, #64]	; 0x40
 800d96a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d96c:	2b07      	cmp	r3, #7
 800d96e:	d9c8      	bls.n	800d902 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d970:	f7fc fa5a 	bl	8009e28 <HAL_GetTick>
 800d974:	4602      	mov	r2, r0
 800d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d902      	bls.n	800d986 <HAL_SD_ReadBlocks+0x1ae>
 800d980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d982:	2b00      	cmp	r3, #0
 800d984:	d112      	bne.n	800d9ac <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a48      	ldr	r2, [pc, #288]	; (800daac <HAL_SD_ReadBlocks+0x2d4>)
 800d98c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d992:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2201      	movs	r2, #1
 800d99e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d9a8:	2303      	movs	r3, #3
 800d9aa:	e0ec      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9b2:	f240 332a 	movw	r3, #810	; 0x32a
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d095      	beq.n	800d8e8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d022      	beq.n	800da10 <HAL_SD_ReadBlocks+0x238>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d91f      	bls.n	800da10 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9d4:	2b03      	cmp	r3, #3
 800d9d6:	d01b      	beq.n	800da10 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f004 fa2d 	bl	8011e3c <SDMMC_CmdStopTransfer>
 800d9e2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d9e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d012      	beq.n	800da10 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4a2f      	ldr	r2, [pc, #188]	; (800daac <HAL_SD_ReadBlocks+0x2d4>)
 800d9f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9f8:	431a      	orrs	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2201      	movs	r2, #1
 800da02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2200      	movs	r2, #0
 800da0a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	e0ba      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da16:	f003 0308 	and.w	r3, r3, #8
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d012      	beq.n	800da44 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a22      	ldr	r2, [pc, #136]	; (800daac <HAL_SD_ReadBlocks+0x2d4>)
 800da24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2a:	f043 0208 	orr.w	r2, r3, #8
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2201      	movs	r2, #1
 800da36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	e0a0      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da4a:	f003 0302 	and.w	r3, r3, #2
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d012      	beq.n	800da78 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a15      	ldr	r2, [pc, #84]	; (800daac <HAL_SD_ReadBlocks+0x2d4>)
 800da58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da5e:	f043 0202 	orr.w	r2, r3, #2
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2201      	movs	r2, #1
 800da6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2200      	movs	r2, #0
 800da72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	e086      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7e:	f003 0320 	and.w	r3, r3, #32
 800da82:	2b00      	cmp	r3, #0
 800da84:	d063      	beq.n	800db4e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a08      	ldr	r2, [pc, #32]	; (800daac <HAL_SD_ReadBlocks+0x2d4>)
 800da8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da92:	f043 0220 	orr.w	r2, r3, #32
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800daa8:	2301      	movs	r3, #1
 800daaa:	e06c      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
 800daac:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f004 f866 	bl	8011b86 <SDIO_ReadFIFO>
 800daba:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800dabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800dac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac6:	3301      	adds	r3, #1
 800dac8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800daca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dacc:	3b01      	subs	r3, #1
 800dace:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	0a1b      	lsrs	r3, r3, #8
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800dada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dadc:	3301      	adds	r3, #1
 800dade:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800dae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae2:	3b01      	subs	r3, #1
 800dae4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	0c1b      	lsrs	r3, r3, #16
 800daea:	b2da      	uxtb	r2, r3
 800daec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800daf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf2:	3301      	adds	r3, #1
 800daf4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800daf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daf8:	3b01      	subs	r3, #1
 800dafa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafe:	0e1b      	lsrs	r3, r3, #24
 800db00:	b2da      	uxtb	r2, r3
 800db02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db04:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800db06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db08:	3301      	adds	r3, #1
 800db0a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800db0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db0e:	3b01      	subs	r3, #1
 800db10:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800db12:	f7fc f989 	bl	8009e28 <HAL_GetTick>
 800db16:	4602      	mov	r2, r0
 800db18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1a:	1ad3      	subs	r3, r2, r3
 800db1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db1e:	429a      	cmp	r2, r3
 800db20:	d902      	bls.n	800db28 <HAL_SD_ReadBlocks+0x350>
 800db22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db24:	2b00      	cmp	r3, #0
 800db26:	d112      	bne.n	800db4e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a18      	ldr	r2, [pc, #96]	; (800db90 <HAL_SD_ReadBlocks+0x3b8>)
 800db2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	e01b      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d002      	beq.n	800db62 <HAL_SD_ReadBlocks+0x38a>
 800db5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d1a6      	bne.n	800dab0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f240 523a 	movw	r2, #1338	; 0x53a
 800db6a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	e006      	b.n	800db86 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800db84:	2301      	movs	r3, #1
  }
}
 800db86:	4618      	mov	r0, r3
 800db88:	3748      	adds	r7, #72	; 0x48
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	004005ff 	.word	0x004005ff

0800db94 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b092      	sub	sp, #72	; 0x48
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dba2:	f7fc f941 	bl	8009e28 <HAL_GetTick>
 800dba6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d107      	bne.n	800dbc6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e166      	b.n	800de94 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	f040 8159 	bne.w	800de86 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dbda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	441a      	add	r2, r3
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d907      	bls.n	800dbf8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e14d      	b.n	800de94 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2203      	movs	r2, #3
 800dbfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2200      	movs	r2, #0
 800dc06:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d002      	beq.n	800dc16 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	025b      	lsls	r3, r3, #9
 800dc14:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc16:	f04f 33ff 	mov.w	r3, #4294967295
 800dc1a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	025b      	lsls	r3, r3, #9
 800dc20:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800dc22:	2390      	movs	r3, #144	; 0x90
 800dc24:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800dc26:	2300      	movs	r3, #0
 800dc28:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f107 0218 	add.w	r2, r7, #24
 800dc3a:	4611      	mov	r1, r2
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f004 f826 	bl	8011c8e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d90a      	bls.n	800dc5e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2220      	movs	r2, #32
 800dc4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc54:	4618      	mov	r0, r3
 800dc56:	f004 f8ce 	bl	8011df6 <SDMMC_CmdWriteMultiBlock>
 800dc5a:	6478      	str	r0, [r7, #68]	; 0x44
 800dc5c:	e009      	b.n	800dc72 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2210      	movs	r2, #16
 800dc62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f004 f8a1 	bl	8011db2 <SDMMC_CmdWriteSingleBlock>
 800dc70:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d012      	beq.n	800dc9e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a87      	ldr	r2, [pc, #540]	; (800de9c <HAL_SD_WriteBlocks+0x308>)
 800dc7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc86:	431a      	orrs	r2, r3
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e0fa      	b.n	800de94 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800dca2:	e065      	b.n	800dd70 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d040      	beq.n	800dd34 <HAL_SD_WriteBlocks+0x1a0>
 800dcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d03d      	beq.n	800dd34 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800dcb8:	2300      	movs	r3, #0
 800dcba:	643b      	str	r3, [r7, #64]	; 0x40
 800dcbc:	e037      	b.n	800dd2e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800dcbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800dcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800dcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dccc:	3b01      	subs	r3, #1
 800dcce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800dcd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	021a      	lsls	r2, r3, #8
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800dcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcde:	3301      	adds	r3, #1
 800dce0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800dce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce4:	3b01      	subs	r3, #1
 800dce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800dce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	041a      	lsls	r2, r3, #16
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800dcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800dcfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800dd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	061a      	lsls	r2, r3, #24
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800dd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd0e:	3301      	adds	r3, #1
 800dd10:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800dd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd14:	3b01      	subs	r3, #1
 800dd16:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f107 0214 	add.w	r2, r7, #20
 800dd20:	4611      	mov	r1, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f003 ff3c 	bl	8011ba0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800dd28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	643b      	str	r3, [r7, #64]	; 0x40
 800dd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd30:	2b07      	cmp	r3, #7
 800dd32:	d9c4      	bls.n	800dcbe <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800dd34:	f7fc f878 	bl	8009e28 <HAL_GetTick>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3c:	1ad3      	subs	r3, r2, r3
 800dd3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d902      	bls.n	800dd4a <HAL_SD_WriteBlocks+0x1b6>
 800dd44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d112      	bne.n	800dd70 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a53      	ldr	r2, [pc, #332]	; (800de9c <HAL_SD_WriteBlocks+0x308>)
 800dd50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd58:	431a      	orrs	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2201      	movs	r2, #1
 800dd62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800dd6c:	2303      	movs	r3, #3
 800dd6e:	e091      	b.n	800de94 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd76:	f240 331a 	movw	r3, #794	; 0x31a
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d091      	beq.n	800dca4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d022      	beq.n	800ddd4 <HAL_SD_WriteBlocks+0x240>
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d91f      	bls.n	800ddd4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd98:	2b03      	cmp	r3, #3
 800dd9a:	d01b      	beq.n	800ddd4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f004 f84b 	bl	8011e3c <SDMMC_CmdStopTransfer>
 800dda6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800dda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d012      	beq.n	800ddd4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a3a      	ldr	r2, [pc, #232]	; (800de9c <HAL_SD_WriteBlocks+0x308>)
 800ddb4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddbc:	431a      	orrs	r2, r3
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e05f      	b.n	800de94 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddda:	f003 0308 	and.w	r3, r3, #8
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d012      	beq.n	800de08 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a2d      	ldr	r2, [pc, #180]	; (800de9c <HAL_SD_WriteBlocks+0x308>)
 800dde8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddee:	f043 0208 	orr.w	r2, r3, #8
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800de04:	2301      	movs	r3, #1
 800de06:	e045      	b.n	800de94 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0e:	f003 0302 	and.w	r3, r3, #2
 800de12:	2b00      	cmp	r3, #0
 800de14:	d012      	beq.n	800de3c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a20      	ldr	r2, [pc, #128]	; (800de9c <HAL_SD_WriteBlocks+0x308>)
 800de1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de22:	f043 0202 	orr.w	r2, r3, #2
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2201      	movs	r2, #1
 800de2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800de38:	2301      	movs	r3, #1
 800de3a:	e02b      	b.n	800de94 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de42:	f003 0310 	and.w	r3, r3, #16
 800de46:	2b00      	cmp	r3, #0
 800de48:	d012      	beq.n	800de70 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a13      	ldr	r2, [pc, #76]	; (800de9c <HAL_SD_WriteBlocks+0x308>)
 800de50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de56:	f043 0210 	orr.w	r2, r3, #16
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	e011      	b.n	800de94 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f240 523a 	movw	r2, #1338	; 0x53a
 800de78:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2201      	movs	r2, #1
 800de7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800de82:	2300      	movs	r3, #0
 800de84:	e006      	b.n	800de94 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
  }
}
 800de94:	4618      	mov	r0, r3
 800de96:	3748      	adds	r7, #72	; 0x48
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	004005ff 	.word	0x004005ff

0800dea0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deae:	0f9b      	lsrs	r3, r3, #30
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deba:	0e9b      	lsrs	r3, r3, #26
 800debc:	b2db      	uxtb	r3, r3
 800debe:	f003 030f 	and.w	r3, r3, #15
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800decc:	0e1b      	lsrs	r3, r3, #24
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 0303 	and.w	r3, r3, #3
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dede:	0c1b      	lsrs	r3, r3, #16
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deea:	0a1b      	lsrs	r3, r3, #8
 800deec:	b2da      	uxtb	r2, r3
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800def6:	b2da      	uxtb	r2, r3
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df00:	0d1b      	lsrs	r3, r3, #20
 800df02:	b29a      	uxth	r2, r3
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df0c:	0c1b      	lsrs	r3, r3, #16
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	f003 030f 	and.w	r3, r3, #15
 800df14:	b2da      	uxtb	r2, r3
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df1e:	0bdb      	lsrs	r3, r3, #15
 800df20:	b2db      	uxtb	r3, r3
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	b2da      	uxtb	r2, r3
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df30:	0b9b      	lsrs	r3, r3, #14
 800df32:	b2db      	uxtb	r3, r3
 800df34:	f003 0301 	and.w	r3, r3, #1
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df42:	0b5b      	lsrs	r3, r3, #13
 800df44:	b2db      	uxtb	r3, r3
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	b2da      	uxtb	r2, r3
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df54:	0b1b      	lsrs	r3, r3, #12
 800df56:	b2db      	uxtb	r3, r3
 800df58:	f003 0301 	and.w	r3, r3, #1
 800df5c:	b2da      	uxtb	r2, r3
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	2200      	movs	r2, #0
 800df66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d163      	bne.n	800e038 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df74:	009a      	lsls	r2, r3, #2
 800df76:	f640 73fc 	movw	r3, #4092	; 0xffc
 800df7a:	4013      	ands	r3, r2
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800df80:	0f92      	lsrs	r2, r2, #30
 800df82:	431a      	orrs	r2, r3
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df8c:	0edb      	lsrs	r3, r3, #27
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	f003 0307 	and.w	r3, r3, #7
 800df94:	b2da      	uxtb	r2, r3
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df9e:	0e1b      	lsrs	r3, r3, #24
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	f003 0307 	and.w	r3, r3, #7
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfb0:	0d5b      	lsrs	r3, r3, #21
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	f003 0307 	and.w	r3, r3, #7
 800dfb8:	b2da      	uxtb	r2, r3
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfc2:	0c9b      	lsrs	r3, r3, #18
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	f003 0307 	and.w	r3, r3, #7
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfd4:	0bdb      	lsrs	r3, r3, #15
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	f003 0307 	and.w	r3, r3, #7
 800dfdc:	b2da      	uxtb	r2, r3
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	7e1b      	ldrb	r3, [r3, #24]
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	f003 0307 	and.w	r3, r3, #7
 800dff6:	3302      	adds	r3, #2
 800dff8:	2201      	movs	r2, #1
 800dffa:	fa02 f303 	lsl.w	r3, r2, r3
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e002:	fb03 f202 	mul.w	r2, r3, r2
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	7a1b      	ldrb	r3, [r3, #8]
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	f003 030f 	and.w	r3, r3, #15
 800e014:	2201      	movs	r2, #1
 800e016:	409a      	lsls	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e024:	0a52      	lsrs	r2, r2, #9
 800e026:	fb03 f202 	mul.w	r2, r3, r2
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e034:	661a      	str	r2, [r3, #96]	; 0x60
 800e036:	e031      	b.n	800e09c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d11d      	bne.n	800e07c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e044:	041b      	lsls	r3, r3, #16
 800e046:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e04e:	0c1b      	lsrs	r3, r3, #16
 800e050:	431a      	orrs	r2, r3
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	691b      	ldr	r3, [r3, #16]
 800e05a:	3301      	adds	r3, #1
 800e05c:	029a      	lsls	r2, r3, #10
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e070:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	661a      	str	r2, [r3, #96]	; 0x60
 800e07a:	e00f      	b.n	800e09c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a58      	ldr	r2, [pc, #352]	; (800e1e4 <HAL_SD_GetCardCSD+0x344>)
 800e082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e088:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e098:	2301      	movs	r3, #1
 800e09a:	e09d      	b.n	800e1d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0a0:	0b9b      	lsrs	r3, r3, #14
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	f003 0301 	and.w	r3, r3, #1
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0b2:	09db      	lsrs	r3, r3, #7
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0d4:	0fdb      	lsrs	r3, r3, #31
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0e0:	0f5b      	lsrs	r3, r3, #29
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f003 0303 	and.w	r3, r3, #3
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0f2:	0e9b      	lsrs	r3, r3, #26
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	f003 0307 	and.w	r3, r3, #7
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e104:	0d9b      	lsrs	r3, r3, #22
 800e106:	b2db      	uxtb	r3, r3
 800e108:	f003 030f 	and.w	r3, r3, #15
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e116:	0d5b      	lsrs	r3, r3, #21
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	f003 0301 	and.w	r3, r3, #1
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e132:	0c1b      	lsrs	r3, r3, #16
 800e134:	b2db      	uxtb	r3, r3
 800e136:	f003 0301 	and.w	r3, r3, #1
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e146:	0bdb      	lsrs	r3, r3, #15
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	f003 0301 	and.w	r3, r3, #1
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e15a:	0b9b      	lsrs	r3, r3, #14
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	b2da      	uxtb	r2, r3
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e16e:	0b5b      	lsrs	r3, r3, #13
 800e170:	b2db      	uxtb	r3, r3
 800e172:	f003 0301 	and.w	r3, r3, #1
 800e176:	b2da      	uxtb	r2, r3
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e182:	0b1b      	lsrs	r3, r3, #12
 800e184:	b2db      	uxtb	r3, r3
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e196:	0a9b      	lsrs	r3, r3, #10
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	f003 0303 	and.w	r3, r3, #3
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1aa:	0a1b      	lsrs	r3, r3, #8
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	f003 0303 	and.w	r3, r3, #3
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1be:	085b      	lsrs	r3, r3, #1
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e1d6:	2300      	movs	r3, #0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	370c      	adds	r7, #12
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr
 800e1e4:	004005ff 	.word	0x004005ff

0800e1e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e240:	b5b0      	push	{r4, r5, r7, lr}
 800e242:	b08e      	sub	sp, #56	; 0x38
 800e244:	af04      	add	r7, sp, #16
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2203      	movs	r2, #3
 800e254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e25c:	2b03      	cmp	r3, #3
 800e25e:	d02e      	beq.n	800e2be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e266:	d106      	bne.n	800e276 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	639a      	str	r2, [r3, #56]	; 0x38
 800e274:	e029      	b.n	800e2ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e27c:	d10a      	bne.n	800e294 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 fa1c 	bl	800e6bc <SD_WideBus_Enable>
 800e284:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e28a:	6a3b      	ldr	r3, [r7, #32]
 800e28c:	431a      	orrs	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	639a      	str	r2, [r3, #56]	; 0x38
 800e292:	e01a      	b.n	800e2ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10a      	bne.n	800e2b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fa59 	bl	800e752 <SD_WideBus_Disable>
 800e2a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2a6:	6a3b      	ldr	r3, [r7, #32]
 800e2a8:	431a      	orrs	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	639a      	str	r2, [r3, #56]	; 0x38
 800e2ae:	e00c      	b.n	800e2ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	639a      	str	r2, [r3, #56]	; 0x38
 800e2bc:	e005      	b.n	800e2ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00b      	beq.n	800e2ea <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a26      	ldr	r2, [pc, #152]	; (800e370 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e2d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2e8:	e01f      	b.n	800e32a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	695b      	ldr	r3, [r3, #20]
 800e304:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681d      	ldr	r5, [r3, #0]
 800e310:	466c      	mov	r4, sp
 800e312:	f107 0314 	add.w	r3, r7, #20
 800e316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e31a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e31e:	f107 0308 	add.w	r3, r7, #8
 800e322:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e324:	4628      	mov	r0, r5
 800e326:	f003 fc03 	bl	8011b30 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e332:	4618      	mov	r0, r3
 800e334:	f003 fcd7 	bl	8011ce6 <SDMMC_CmdBlockLength>
 800e338:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e33a:	6a3b      	ldr	r3, [r7, #32]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00c      	beq.n	800e35a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a0a      	ldr	r2, [pc, #40]	; (800e370 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e34c:	6a3b      	ldr	r3, [r7, #32]
 800e34e:	431a      	orrs	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e354:	2301      	movs	r3, #1
 800e356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2201      	movs	r2, #1
 800e35e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e366:	4618      	mov	r0, r3
 800e368:	3728      	adds	r7, #40	; 0x28
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bdb0      	pop	{r4, r5, r7, pc}
 800e36e:	bf00      	nop
 800e370:	004005ff 	.word	0x004005ff

0800e374 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e37c:	2300      	movs	r3, #0
 800e37e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e380:	f107 030c 	add.w	r3, r7, #12
 800e384:	4619      	mov	r1, r3
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 f970 	bl	800e66c <SD_SendStatus>
 800e38c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d005      	beq.n	800e3a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	431a      	orrs	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	0a5b      	lsrs	r3, r3, #9
 800e3a4:	f003 030f 	and.w	r3, r3, #15
 800e3a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e3aa:	693b      	ldr	r3, [r7, #16]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3718      	adds	r7, #24
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e3b4:	b5b0      	push	{r4, r5, r7, lr}
 800e3b6:	b094      	sub	sp, #80	; 0x50
 800e3b8:	af04      	add	r7, sp, #16
 800e3ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f003 fc0a 	bl	8011bde <SDIO_GetPowerState>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d102      	bne.n	800e3d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e3d4:	e0b8      	b.n	800e548 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3da:	2b03      	cmp	r3, #3
 800e3dc:	d02f      	beq.n	800e43e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f003 fe34 	bl	8012050 <SDMMC_CmdSendCID>
 800e3e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <SD_InitCard+0x40>
    {
      return errorstate;
 800e3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f2:	e0a9      	b.n	800e548 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f003 fc34 	bl	8011c68 <SDIO_GetResponse>
 800e400:	4602      	mov	r2, r0
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2104      	movs	r1, #4
 800e40c:	4618      	mov	r0, r3
 800e40e:	f003 fc2b 	bl	8011c68 <SDIO_GetResponse>
 800e412:	4602      	mov	r2, r0
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2108      	movs	r1, #8
 800e41e:	4618      	mov	r0, r3
 800e420:	f003 fc22 	bl	8011c68 <SDIO_GetResponse>
 800e424:	4602      	mov	r2, r0
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	210c      	movs	r1, #12
 800e430:	4618      	mov	r0, r3
 800e432:	f003 fc19 	bl	8011c68 <SDIO_GetResponse>
 800e436:	4602      	mov	r2, r0
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e442:	2b03      	cmp	r3, #3
 800e444:	d00d      	beq.n	800e462 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f107 020e 	add.w	r2, r7, #14
 800e44e:	4611      	mov	r1, r2
 800e450:	4618      	mov	r0, r3
 800e452:	f003 fe3a 	bl	80120ca <SDMMC_CmdSetRelAdd>
 800e456:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <SD_InitCard+0xae>
    {
      return errorstate;
 800e45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e460:	e072      	b.n	800e548 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e466:	2b03      	cmp	r3, #3
 800e468:	d036      	beq.n	800e4d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e46a:	89fb      	ldrh	r3, [r7, #14]
 800e46c:	461a      	mov	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e47a:	041b      	lsls	r3, r3, #16
 800e47c:	4619      	mov	r1, r3
 800e47e:	4610      	mov	r0, r2
 800e480:	f003 fe04 	bl	801208c <SDMMC_CmdSendCSD>
 800e484:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48e:	e05b      	b.n	800e548 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2100      	movs	r1, #0
 800e496:	4618      	mov	r0, r3
 800e498:	f003 fbe6 	bl	8011c68 <SDIO_GetResponse>
 800e49c:	4602      	mov	r2, r0
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2104      	movs	r1, #4
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f003 fbdd 	bl	8011c68 <SDIO_GetResponse>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2108      	movs	r1, #8
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f003 fbd4 	bl	8011c68 <SDIO_GetResponse>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	210c      	movs	r1, #12
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f003 fbcb 	bl	8011c68 <SDIO_GetResponse>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2104      	movs	r1, #4
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f003 fbc2 	bl	8011c68 <SDIO_GetResponse>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	0d1a      	lsrs	r2, r3, #20
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e4ec:	f107 0310 	add.w	r3, r7, #16
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff fcd4 	bl	800dea0 <HAL_SD_GetCardCSD>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d002      	beq.n	800e504 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e502:	e021      	b.n	800e548 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6819      	ldr	r1, [r3, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e50c:	041b      	lsls	r3, r3, #16
 800e50e:	2200      	movs	r2, #0
 800e510:	461c      	mov	r4, r3
 800e512:	4615      	mov	r5, r2
 800e514:	4622      	mov	r2, r4
 800e516:	462b      	mov	r3, r5
 800e518:	4608      	mov	r0, r1
 800e51a:	f003 fcb1 	bl	8011e80 <SDMMC_CmdSelDesel>
 800e51e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <SD_InitCard+0x176>
  {
    return errorstate;
 800e526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e528:	e00e      	b.n	800e548 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681d      	ldr	r5, [r3, #0]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	466c      	mov	r4, sp
 800e532:	f103 0210 	add.w	r2, r3, #16
 800e536:	ca07      	ldmia	r2, {r0, r1, r2}
 800e538:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e53c:	3304      	adds	r3, #4
 800e53e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e540:	4628      	mov	r0, r5
 800e542:	f003 faf5 	bl	8011b30 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e546:	2300      	movs	r3, #0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3740      	adds	r7, #64	; 0x40
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bdb0      	pop	{r4, r5, r7, pc}

0800e550 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b086      	sub	sp, #24
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e558:	2300      	movs	r3, #0
 800e55a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e55c:	2300      	movs	r3, #0
 800e55e:	617b      	str	r3, [r7, #20]
 800e560:	2300      	movs	r3, #0
 800e562:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4618      	mov	r0, r3
 800e56a:	f003 fcac 	bl	8011ec6 <SDMMC_CmdGoIdleState>
 800e56e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <SD_PowerON+0x2a>
  {
    return errorstate;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	e072      	b.n	800e660 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4618      	mov	r0, r3
 800e580:	f003 fcbf 	bl	8011f02 <SDMMC_CmdOperCond>
 800e584:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00d      	beq.n	800e5a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4618      	mov	r0, r3
 800e598:	f003 fc95 	bl	8011ec6 <SDMMC_CmdGoIdleState>
 800e59c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d004      	beq.n	800e5ae <SD_PowerON+0x5e>
    {
      return errorstate;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	e05b      	b.n	800e660 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d137      	bne.n	800e626 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2100      	movs	r1, #0
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f003 fcbf 	bl	8011f40 <SDMMC_CmdAppCommand>
 800e5c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d02d      	beq.n	800e626 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5ce:	e047      	b.n	800e660 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f003 fcb2 	bl	8011f40 <SDMMC_CmdAppCommand>
 800e5dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <SD_PowerON+0x98>
    {
      return errorstate;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	e03b      	b.n	800e660 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	491e      	ldr	r1, [pc, #120]	; (800e668 <SD_PowerON+0x118>)
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f003 fcc8 	bl	8011f84 <SDMMC_CmdAppOperCommand>
 800e5f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e600:	e02e      	b.n	800e660 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2100      	movs	r1, #0
 800e608:	4618      	mov	r0, r3
 800e60a:	f003 fb2d 	bl	8011c68 <SDIO_GetResponse>
 800e60e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	0fdb      	lsrs	r3, r3, #31
 800e614:	2b01      	cmp	r3, #1
 800e616:	d101      	bne.n	800e61c <SD_PowerON+0xcc>
 800e618:	2301      	movs	r3, #1
 800e61a:	e000      	b.n	800e61e <SD_PowerON+0xce>
 800e61c:	2300      	movs	r3, #0
 800e61e:	613b      	str	r3, [r7, #16]

    count++;
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	3301      	adds	r3, #1
 800e624:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d802      	bhi.n	800e636 <SD_PowerON+0xe6>
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0cc      	beq.n	800e5d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d902      	bls.n	800e646 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e644:	e00c      	b.n	800e660 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d003      	beq.n	800e658 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2201      	movs	r2, #1
 800e654:	645a      	str	r2, [r3, #68]	; 0x44
 800e656:	e002      	b.n	800e65e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3718      	adds	r7, #24
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	c1100000 	.word	0xc1100000

0800e66c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d102      	bne.n	800e682 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e67c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e680:	e018      	b.n	800e6b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e68a:	041b      	lsls	r3, r3, #16
 800e68c:	4619      	mov	r1, r3
 800e68e:	4610      	mov	r0, r2
 800e690:	f003 fd3c 	bl	801210c <SDMMC_CmdSendStatus>
 800e694:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d001      	beq.n	800e6a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	e009      	b.n	800e6b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f003 fade 	bl	8011c68 <SDIO_GetResponse>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b086      	sub	sp, #24
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	60fb      	str	r3, [r7, #12]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f003 fac8 	bl	8011c68 <SDIO_GetResponse>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6e2:	d102      	bne.n	800e6ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e6e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6e8:	e02f      	b.n	800e74a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e6ea:	f107 030c 	add.w	r3, r7, #12
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 f879 	bl	800e7e8 <SD_FindSCR>
 800e6f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d001      	beq.n	800e702 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	e023      	b.n	800e74a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d01c      	beq.n	800e746 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e714:	041b      	lsls	r3, r3, #16
 800e716:	4619      	mov	r1, r3
 800e718:	4610      	mov	r0, r2
 800e71a:	f003 fc11 	bl	8011f40 <SDMMC_CmdAppCommand>
 800e71e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	e00f      	b.n	800e74a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2102      	movs	r1, #2
 800e730:	4618      	mov	r0, r3
 800e732:	f003 fc4a 	bl	8011fca <SDMMC_CmdBusWidth>
 800e736:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	e003      	b.n	800e74a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e742:	2300      	movs	r3, #0
 800e744:	e001      	b.n	800e74a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e746:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3718      	adds	r7, #24
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b086      	sub	sp, #24
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e75a:	2300      	movs	r3, #0
 800e75c:	60fb      	str	r3, [r7, #12]
 800e75e:	2300      	movs	r3, #0
 800e760:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2100      	movs	r1, #0
 800e768:	4618      	mov	r0, r3
 800e76a:	f003 fa7d 	bl	8011c68 <SDIO_GetResponse>
 800e76e:	4603      	mov	r3, r0
 800e770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e778:	d102      	bne.n	800e780 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e77a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e77e:	e02f      	b.n	800e7e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e780:	f107 030c 	add.w	r3, r7, #12
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f82e 	bl	800e7e8 <SD_FindSCR>
 800e78c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d001      	beq.n	800e798 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	e023      	b.n	800e7e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d01c      	beq.n	800e7dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7aa:	041b      	lsls	r3, r3, #16
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	4610      	mov	r0, r2
 800e7b0:	f003 fbc6 	bl	8011f40 <SDMMC_CmdAppCommand>
 800e7b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d001      	beq.n	800e7c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	e00f      	b.n	800e7e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f003 fbff 	bl	8011fca <SDMMC_CmdBusWidth>
 800e7cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d001      	beq.n	800e7d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	e003      	b.n	800e7e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	e001      	b.n	800e7e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e7dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3718      	adds	r7, #24
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e7e8:	b590      	push	{r4, r7, lr}
 800e7ea:	b08f      	sub	sp, #60	; 0x3c
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e7f2:	f7fb fb19 	bl	8009e28 <HAL_GetTick>
 800e7f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	60bb      	str	r3, [r7, #8]
 800e800:	2300      	movs	r3, #0
 800e802:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2108      	movs	r1, #8
 800e80e:	4618      	mov	r0, r3
 800e810:	f003 fa69 	bl	8011ce6 <SDMMC_CmdBlockLength>
 800e814:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d001      	beq.n	800e820 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81e:	e0b2      	b.n	800e986 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e828:	041b      	lsls	r3, r3, #16
 800e82a:	4619      	mov	r1, r3
 800e82c:	4610      	mov	r0, r2
 800e82e:	f003 fb87 	bl	8011f40 <SDMMC_CmdAppCommand>
 800e832:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e836:	2b00      	cmp	r3, #0
 800e838:	d001      	beq.n	800e83e <SD_FindSCR+0x56>
  {
    return errorstate;
 800e83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83c:	e0a3      	b.n	800e986 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e83e:	f04f 33ff 	mov.w	r3, #4294967295
 800e842:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e844:	2308      	movs	r3, #8
 800e846:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e848:	2330      	movs	r3, #48	; 0x30
 800e84a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e84c:	2302      	movs	r3, #2
 800e84e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e850:	2300      	movs	r3, #0
 800e852:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e854:	2301      	movs	r3, #1
 800e856:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f107 0210 	add.w	r2, r7, #16
 800e860:	4611      	mov	r1, r2
 800e862:	4618      	mov	r0, r3
 800e864:	f003 fa13 	bl	8011c8e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f003 fbce 	bl	801200e <SDMMC_CmdSendSCR>
 800e872:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e876:	2b00      	cmp	r3, #0
 800e878:	d02a      	beq.n	800e8d0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87c:	e083      	b.n	800e986 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00f      	beq.n	800e8ac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6819      	ldr	r1, [r3, #0]
 800e890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	f107 0208 	add.w	r2, r7, #8
 800e898:	18d4      	adds	r4, r2, r3
 800e89a:	4608      	mov	r0, r1
 800e89c:	f003 f973 	bl	8011b86 <SDIO_ReadFIFO>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	6023      	str	r3, [r4, #0]
      index++;
 800e8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e8aa:	e006      	b.n	800e8ba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d012      	beq.n	800e8e0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e8ba:	f7fb fab5 	bl	8009e28 <HAL_GetTick>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c8:	d102      	bne.n	800e8d0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e8ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8ce:	e05a      	b.n	800e986 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d0cf      	beq.n	800e87e <SD_FindSCR+0x96>
 800e8de:	e000      	b.n	800e8e2 <SD_FindSCR+0xfa>
      break;
 800e8e0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e8:	f003 0308 	and.w	r3, r3, #8
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d005      	beq.n	800e8fc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2208      	movs	r2, #8
 800e8f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e8f8:	2308      	movs	r3, #8
 800e8fa:	e044      	b.n	800e986 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e902:	f003 0302 	and.w	r3, r3, #2
 800e906:	2b00      	cmp	r3, #0
 800e908:	d005      	beq.n	800e916 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2202      	movs	r2, #2
 800e910:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e912:	2302      	movs	r3, #2
 800e914:	e037      	b.n	800e986 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e91c:	f003 0320 	and.w	r3, r3, #32
 800e920:	2b00      	cmp	r3, #0
 800e922:	d005      	beq.n	800e930 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2220      	movs	r2, #32
 800e92a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e92c:	2320      	movs	r3, #32
 800e92e:	e02a      	b.n	800e986 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f240 523a 	movw	r2, #1338	; 0x53a
 800e938:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	061a      	lsls	r2, r3, #24
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	021b      	lsls	r3, r3, #8
 800e942:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e946:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	0a1b      	lsrs	r3, r3, #8
 800e94c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e950:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	0e1b      	lsrs	r3, r3, #24
 800e956:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	601a      	str	r2, [r3, #0]
    scr++;
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	3304      	adds	r3, #4
 800e960:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	061a      	lsls	r2, r3, #24
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	021b      	lsls	r3, r3, #8
 800e96a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e96e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	0a1b      	lsrs	r3, r3, #8
 800e974:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e978:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	0e1b      	lsrs	r3, r3, #24
 800e97e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	373c      	adds	r7, #60	; 0x3c
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd90      	pop	{r4, r7, pc}

0800e98e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b082      	sub	sp, #8
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d101      	bne.n	800e9a0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e07b      	b.n	800ea98 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d108      	bne.n	800e9ba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9b0:	d009      	beq.n	800e9c6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	61da      	str	r2, [r3, #28]
 800e9b8:	e005      	b.n	800e9c6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d106      	bne.n	800e9e6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7f4 fdff 	bl	80035e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2202      	movs	r2, #2
 800e9ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	689b      	ldr	r3, [r3, #8]
 800ea0a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ea0e:	431a      	orrs	r2, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea18:	431a      	orrs	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	691b      	ldr	r3, [r3, #16]
 800ea1e:	f003 0302 	and.w	r3, r3, #2
 800ea22:	431a      	orrs	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	695b      	ldr	r3, [r3, #20]
 800ea28:	f003 0301 	and.w	r3, r3, #1
 800ea2c:	431a      	orrs	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	699b      	ldr	r3, [r3, #24]
 800ea32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea36:	431a      	orrs	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	69db      	ldr	r3, [r3, #28]
 800ea3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea40:	431a      	orrs	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6a1b      	ldr	r3, [r3, #32]
 800ea46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea4a:	ea42 0103 	orr.w	r1, r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	430a      	orrs	r2, r1
 800ea5c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	699b      	ldr	r3, [r3, #24]
 800ea62:	0c1b      	lsrs	r3, r3, #16
 800ea64:	f003 0104 	and.w	r1, r3, #4
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6c:	f003 0210 	and.w	r2, r3, #16
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	430a      	orrs	r2, r1
 800ea76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	69da      	ldr	r2, [r3, #28]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2201      	movs	r2, #1
 800ea92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ea96:	2300      	movs	r3, #0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b086      	sub	sp, #24
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d101      	bne.n	800eac0 <HAL_SPI_Transmit_DMA+0x20>
 800eabc:	2302      	movs	r3, #2
 800eabe:	e09b      	b.n	800ebf8 <HAL_SPI_Transmit_DMA+0x158>
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d002      	beq.n	800eada <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800ead4:	2302      	movs	r3, #2
 800ead6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ead8:	e089      	b.n	800ebee <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d002      	beq.n	800eae6 <HAL_SPI_Transmit_DMA+0x46>
 800eae0:	88fb      	ldrh	r3, [r7, #6]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d102      	bne.n	800eaec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800eae6:	2301      	movs	r3, #1
 800eae8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eaea:	e080      	b.n	800ebee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2203      	movs	r2, #3
 800eaf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	88fa      	ldrh	r2, [r7, #6]
 800eb04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	88fa      	ldrh	r2, [r7, #6]
 800eb0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2200      	movs	r2, #0
 800eb28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb32:	d10f      	bne.n	800eb54 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eb52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb58:	4a29      	ldr	r2, [pc, #164]	; (800ec00 <HAL_SPI_Transmit_DMA+0x160>)
 800eb5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb60:	4a28      	ldr	r2, [pc, #160]	; (800ec04 <HAL_SPI_Transmit_DMA+0x164>)
 800eb62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb68:	4a27      	ldr	r2, [pc, #156]	; (800ec08 <HAL_SPI_Transmit_DMA+0x168>)
 800eb6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb70:	2200      	movs	r2, #0
 800eb72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	330c      	adds	r3, #12
 800eb84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800eb8c:	f7fb ff1e 	bl	800a9cc <HAL_DMA_Start_IT>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00c      	beq.n	800ebb0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb9a:	f043 0210 	orr.w	r2, r3, #16
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ebae:	e01e      	b.n	800ebee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebba:	2b40      	cmp	r3, #64	; 0x40
 800ebbc:	d007      	beq.n	800ebce <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebcc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f042 0220 	orr.w	r2, r2, #32
 800ebdc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	685a      	ldr	r2, [r3, #4]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f042 0202 	orr.w	r2, r2, #2
 800ebec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ebf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3718      	adds	r7, #24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	0800f20d 	.word	0x0800f20d
 800ec04:	0800f02d 	.word	0x0800f02d
 800ec08:	0800f261 	.word	0x0800f261

0800ec0c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	4613      	mov	r3, r2
 800ec18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	689b      	ldr	r3, [r3, #8]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d110      	bne.n	800ec48 <HAL_SPI_Receive_DMA+0x3c>
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec2e:	d10b      	bne.n	800ec48 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2204      	movs	r2, #4
 800ec34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ec38:	88fb      	ldrh	r3, [r7, #6]
 800ec3a:	68ba      	ldr	r2, [r7, #8]
 800ec3c:	68b9      	ldr	r1, [r7, #8]
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	f000 f8ac 	bl	800ed9c <HAL_SPI_TransmitReceive_DMA>
 800ec44:	4603      	mov	r3, r0
 800ec46:	e09f      	b.n	800ed88 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d101      	bne.n	800ec56 <HAL_SPI_Receive_DMA+0x4a>
 800ec52:	2302      	movs	r3, #2
 800ec54:	e098      	b.n	800ed88 <HAL_SPI_Receive_DMA+0x17c>
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d002      	beq.n	800ec70 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800ec6a:	2302      	movs	r3, #2
 800ec6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ec6e:	e086      	b.n	800ed7e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d002      	beq.n	800ec7c <HAL_SPI_Receive_DMA+0x70>
 800ec76:	88fb      	ldrh	r3, [r7, #6]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d102      	bne.n	800ec82 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ec80:	e07d      	b.n	800ed7e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2204      	movs	r2, #4
 800ec86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	88fa      	ldrh	r2, [r7, #6]
 800ec9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	88fa      	ldrh	r2, [r7, #6]
 800eca0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2200      	movs	r2, #0
 800eca6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecc2:	d10f      	bne.n	800ece4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ece2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ece8:	4a29      	ldr	r2, [pc, #164]	; (800ed90 <HAL_SPI_Receive_DMA+0x184>)
 800ecea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecf0:	4a28      	ldr	r2, [pc, #160]	; (800ed94 <HAL_SPI_Receive_DMA+0x188>)
 800ecf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecf8:	4a27      	ldr	r2, [pc, #156]	; (800ed98 <HAL_SPI_Receive_DMA+0x18c>)
 800ecfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed00:	2200      	movs	r2, #0
 800ed02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	330c      	adds	r3, #12
 800ed0e:	4619      	mov	r1, r3
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed14:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed1a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ed1c:	f7fb fe56 	bl	800a9cc <HAL_DMA_Start_IT>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00c      	beq.n	800ed40 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed2a:	f043 0210 	orr.w	r2, r3, #16
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ed32:	2301      	movs	r3, #1
 800ed34:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2201      	movs	r2, #1
 800ed3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ed3e:	e01e      	b.n	800ed7e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed4a:	2b40      	cmp	r3, #64	; 0x40
 800ed4c:	d007      	beq.n	800ed5e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed5c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	685a      	ldr	r2, [r3, #4]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f042 0220 	orr.w	r2, r2, #32
 800ed6c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	685a      	ldr	r2, [r3, #4]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f042 0201 	orr.w	r2, r2, #1
 800ed7c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2200      	movs	r2, #0
 800ed82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ed86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3718      	adds	r7, #24
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	0800f229 	.word	0x0800f229
 800ed94:	0800f0d5 	.word	0x0800f0d5
 800ed98:	0800f261 	.word	0x0800f261

0800ed9c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b086      	sub	sp, #24
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	607a      	str	r2, [r7, #4]
 800eda8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d101      	bne.n	800edbc <HAL_SPI_TransmitReceive_DMA+0x20>
 800edb8:	2302      	movs	r3, #2
 800edba:	e0e3      	b.n	800ef84 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800edca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800edd2:	7dbb      	ldrb	r3, [r7, #22]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d00d      	beq.n	800edf4 <HAL_SPI_TransmitReceive_DMA+0x58>
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800edde:	d106      	bne.n	800edee <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d102      	bne.n	800edee <HAL_SPI_TransmitReceive_DMA+0x52>
 800ede8:	7dbb      	ldrb	r3, [r7, #22]
 800edea:	2b04      	cmp	r3, #4
 800edec:	d002      	beq.n	800edf4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800edee:	2302      	movs	r3, #2
 800edf0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800edf2:	e0c2      	b.n	800ef7a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d005      	beq.n	800ee06 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d002      	beq.n	800ee06 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ee00:	887b      	ldrh	r3, [r7, #2]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d102      	bne.n	800ee0c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ee06:	2301      	movs	r3, #1
 800ee08:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ee0a:	e0b6      	b.n	800ef7a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b04      	cmp	r3, #4
 800ee16:	d003      	beq.n	800ee20 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2205      	movs	r2, #5
 800ee1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	887a      	ldrh	r2, [r7, #2]
 800ee30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	887a      	ldrh	r2, [r7, #2]
 800ee36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	887a      	ldrh	r2, [r7, #2]
 800ee42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	887a      	ldrh	r2, [r7, #2]
 800ee48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b04      	cmp	r3, #4
 800ee60:	d108      	bne.n	800ee74 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee66:	4a49      	ldr	r2, [pc, #292]	; (800ef8c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800ee68:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee6e:	4a48      	ldr	r2, [pc, #288]	; (800ef90 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800ee70:	63da      	str	r2, [r3, #60]	; 0x3c
 800ee72:	e007      	b.n	800ee84 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee78:	4a46      	ldr	r2, [pc, #280]	; (800ef94 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800ee7a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee80:	4a45      	ldr	r2, [pc, #276]	; (800ef98 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800ee82:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee88:	4a44      	ldr	r2, [pc, #272]	; (800ef9c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800ee8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee90:	2200      	movs	r2, #0
 800ee92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	330c      	adds	r3, #12
 800ee9e:	4619      	mov	r1, r3
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eeaa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800eeac:	f7fb fd8e 	bl	800a9cc <HAL_DMA_Start_IT>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00c      	beq.n	800eed0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeba:	f043 0210 	orr.w	r2, r3, #16
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800eece:	e054      	b.n	800ef7a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	685a      	ldr	r2, [r3, #4]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f042 0201 	orr.w	r2, r2, #1
 800eede:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eee4:	2200      	movs	r2, #0
 800eee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eeec:	2200      	movs	r2, #0
 800eeee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eef4:	2200      	movs	r2, #0
 800eef6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eefc:	2200      	movs	r2, #0
 800eefe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef08:	4619      	mov	r1, r3
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	330c      	adds	r3, #12
 800ef10:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ef18:	f7fb fd58 	bl	800a9cc <HAL_DMA_Start_IT>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00c      	beq.n	800ef3c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef26:	f043 0210 	orr.w	r2, r3, #16
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2201      	movs	r2, #1
 800ef36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ef3a:	e01e      	b.n	800ef7a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef46:	2b40      	cmp	r3, #64	; 0x40
 800ef48:	d007      	beq.n	800ef5a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef58:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f042 0220 	orr.w	r2, r2, #32
 800ef68:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	685a      	ldr	r2, [r3, #4]
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f042 0202 	orr.w	r2, r2, #2
 800ef78:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ef82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3718      	adds	r7, #24
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	0800f229 	.word	0x0800f229
 800ef90:	0800f0d5 	.word	0x0800f0d5
 800ef94:	0800f245 	.word	0x0800f245
 800ef98:	0800f17d 	.word	0x0800f17d
 800ef9c:	0800f261 	.word	0x0800f261

0800efa0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800efa8:	bf00      	nop
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b083      	sub	sp, #12
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800efbc:	bf00      	nop
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800efd0:	bf00      	nop
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800efe4:	bf00      	nop
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800eff8:	bf00      	nop
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800f00c:	bf00      	nop
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr

0800f018 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f020:	bf00      	nop
 800f022:	370c      	adds	r7, #12
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr

0800f02c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b086      	sub	sp, #24
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f038:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f03a:	f7fa fef5 	bl	8009e28 <HAL_GetTick>
 800f03e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f04a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f04e:	d03b      	beq.n	800f0c8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	685a      	ldr	r2, [r3, #4]
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f022 0220 	bic.w	r2, r2, #32
 800f05e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	685a      	ldr	r2, [r3, #4]
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f022 0202 	bic.w	r2, r2, #2
 800f06e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f070:	693a      	ldr	r2, [r7, #16]
 800f072:	2164      	movs	r1, #100	; 0x64
 800f074:	6978      	ldr	r0, [r7, #20]
 800f076:	f000 fa01 	bl	800f47c <SPI_EndRxTxTransaction>
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d005      	beq.n	800f08c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f084:	f043 0220 	orr.w	r2, r3, #32
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d10a      	bne.n	800f0aa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f094:	2300      	movs	r3, #0
 800f096:	60fb      	str	r3, [r7, #12]
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	60fb      	str	r3, [r7, #12]
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	60fb      	str	r3, [r7, #12]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d003      	beq.n	800f0c8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f0c0:	6978      	ldr	r0, [r7, #20]
 800f0c2:	f7ff ffa9 	bl	800f018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f0c6:	e002      	b.n	800f0ce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f0c8:	6978      	ldr	r0, [r7, #20]
 800f0ca:	f7ff ff69 	bl	800efa0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f0ce:	3718      	adds	r7, #24
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0e2:	f7fa fea1 	bl	8009e28 <HAL_GetTick>
 800f0e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0f6:	d03b      	beq.n	800f170 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f022 0220 	bic.w	r2, r2, #32
 800f106:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10d      	bne.n	800f12c <SPI_DMAReceiveCplt+0x58>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f118:	d108      	bne.n	800f12c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	685a      	ldr	r2, [r3, #4]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f022 0203 	bic.w	r2, r2, #3
 800f128:	605a      	str	r2, [r3, #4]
 800f12a:	e007      	b.n	800f13c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	685a      	ldr	r2, [r3, #4]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f022 0201 	bic.w	r2, r2, #1
 800f13a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f13c:	68ba      	ldr	r2, [r7, #8]
 800f13e:	2164      	movs	r1, #100	; 0x64
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f000 f935 	bl	800f3b0 <SPI_EndRxTransaction>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2220      	movs	r2, #32
 800f150:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2200      	movs	r2, #0
 800f156:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2201      	movs	r2, #1
 800f15c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f164:	2b00      	cmp	r3, #0
 800f166:	d003      	beq.n	800f170 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f7ff ff55 	bl	800f018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f16e:	e002      	b.n	800f176 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f7ff ff1f 	bl	800efb4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f188:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f18a:	f7fa fe4d 	bl	8009e28 <HAL_GetTick>
 800f18e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f19a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f19e:	d02f      	beq.n	800f200 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	685a      	ldr	r2, [r3, #4]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f022 0220 	bic.w	r2, r2, #32
 800f1ae:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f1b0:	68ba      	ldr	r2, [r7, #8]
 800f1b2:	2164      	movs	r1, #100	; 0x64
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f000 f961 	bl	800f47c <SPI_EndRxTxTransaction>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d005      	beq.n	800f1cc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1c4:	f043 0220 	orr.w	r2, r3, #32
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	685a      	ldr	r2, [r3, #4]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f022 0203 	bic.w	r2, r2, #3
 800f1da:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d003      	beq.n	800f200 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f7ff ff0d 	bl	800f018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f1fe:	e002      	b.n	800f206 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f7ff fee1 	bl	800efc8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f218:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f7ff fede 	bl	800efdc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f220:	bf00      	nop
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f234:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	f7ff feda 	bl	800eff0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f23c:	bf00      	nop
 800f23e:	3710      	adds	r7, #16
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f250:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800f252:	68f8      	ldr	r0, [r7, #12]
 800f254:	f7ff fed6 	bl	800f004 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f258:	bf00      	nop
 800f25a:	3710      	adds	r7, #16
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f26c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	685a      	ldr	r2, [r3, #4]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f022 0203 	bic.w	r2, r2, #3
 800f27c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f282:	f043 0210 	orr.w	r2, r3, #16
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2201      	movs	r2, #1
 800f28e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f292:	68f8      	ldr	r0, [r7, #12]
 800f294:	f7ff fec0 	bl	800f018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f298:	bf00      	nop
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b088      	sub	sp, #32
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	603b      	str	r3, [r7, #0]
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f2b0:	f7fa fdba 	bl	8009e28 <HAL_GetTick>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b8:	1a9b      	subs	r3, r3, r2
 800f2ba:	683a      	ldr	r2, [r7, #0]
 800f2bc:	4413      	add	r3, r2
 800f2be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f2c0:	f7fa fdb2 	bl	8009e28 <HAL_GetTick>
 800f2c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f2c6:	4b39      	ldr	r3, [pc, #228]	; (800f3ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	015b      	lsls	r3, r3, #5
 800f2cc:	0d1b      	lsrs	r3, r3, #20
 800f2ce:	69fa      	ldr	r2, [r7, #28]
 800f2d0:	fb02 f303 	mul.w	r3, r2, r3
 800f2d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f2d6:	e054      	b.n	800f382 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2de:	d050      	beq.n	800f382 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f2e0:	f7fa fda2 	bl	8009e28 <HAL_GetTick>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	1ad3      	subs	r3, r2, r3
 800f2ea:	69fa      	ldr	r2, [r7, #28]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d902      	bls.n	800f2f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d13d      	bne.n	800f372 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	685a      	ldr	r2, [r3, #4]
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f304:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f30e:	d111      	bne.n	800f334 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f318:	d004      	beq.n	800f324 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	689b      	ldr	r3, [r3, #8]
 800f31e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f322:	d107      	bne.n	800f334 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f332:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f33c:	d10f      	bne.n	800f35e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f34c:	601a      	str	r2, [r3, #0]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f35c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2201      	movs	r2, #1
 800f362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2200      	movs	r2, #0
 800f36a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f36e:	2303      	movs	r3, #3
 800f370:	e017      	b.n	800f3a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d101      	bne.n	800f37c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f378:	2300      	movs	r3, #0
 800f37a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	3b01      	subs	r3, #1
 800f380:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	689a      	ldr	r2, [r3, #8]
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	4013      	ands	r3, r2
 800f38c:	68ba      	ldr	r2, [r7, #8]
 800f38e:	429a      	cmp	r2, r3
 800f390:	bf0c      	ite	eq
 800f392:	2301      	moveq	r3, #1
 800f394:	2300      	movne	r3, #0
 800f396:	b2db      	uxtb	r3, r3
 800f398:	461a      	mov	r2, r3
 800f39a:	79fb      	ldrb	r3, [r7, #7]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d19b      	bne.n	800f2d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3720      	adds	r7, #32
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	20000004 	.word	0x20000004

0800f3b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b086      	sub	sp, #24
 800f3b4:	af02      	add	r7, sp, #8
 800f3b6:	60f8      	str	r0, [r7, #12]
 800f3b8:	60b9      	str	r1, [r7, #8]
 800f3ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f3c4:	d111      	bne.n	800f3ea <SPI_EndRxTransaction+0x3a>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3ce:	d004      	beq.n	800f3da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3d8:	d107      	bne.n	800f3ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f3e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f3f2:	d12a      	bne.n	800f44a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3fc:	d012      	beq.n	800f424 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	9300      	str	r3, [sp, #0]
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	2200      	movs	r2, #0
 800f406:	2180      	movs	r1, #128	; 0x80
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	f7ff ff49 	bl	800f2a0 <SPI_WaitFlagStateUntilTimeout>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d02d      	beq.n	800f470 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f418:	f043 0220 	orr.w	r2, r3, #32
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f420:	2303      	movs	r3, #3
 800f422:	e026      	b.n	800f472 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	2200      	movs	r2, #0
 800f42c:	2101      	movs	r1, #1
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	f7ff ff36 	bl	800f2a0 <SPI_WaitFlagStateUntilTimeout>
 800f434:	4603      	mov	r3, r0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d01a      	beq.n	800f470 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f43e:	f043 0220 	orr.w	r2, r3, #32
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f446:	2303      	movs	r3, #3
 800f448:	e013      	b.n	800f472 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2200      	movs	r2, #0
 800f452:	2101      	movs	r1, #1
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f7ff ff23 	bl	800f2a0 <SPI_WaitFlagStateUntilTimeout>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d007      	beq.n	800f470 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f464:	f043 0220 	orr.w	r2, r3, #32
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f46c:	2303      	movs	r3, #3
 800f46e:	e000      	b.n	800f472 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
	...

0800f47c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b088      	sub	sp, #32
 800f480:	af02      	add	r7, sp, #8
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f488:	4b1b      	ldr	r3, [pc, #108]	; (800f4f8 <SPI_EndRxTxTransaction+0x7c>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4a1b      	ldr	r2, [pc, #108]	; (800f4fc <SPI_EndRxTxTransaction+0x80>)
 800f48e:	fba2 2303 	umull	r2, r3, r2, r3
 800f492:	0d5b      	lsrs	r3, r3, #21
 800f494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f498:	fb02 f303 	mul.w	r3, r2, r3
 800f49c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f4a6:	d112      	bne.n	800f4ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	2180      	movs	r1, #128	; 0x80
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f7ff fef4 	bl	800f2a0 <SPI_WaitFlagStateUntilTimeout>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d016      	beq.n	800f4ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4c2:	f043 0220 	orr.w	r2, r3, #32
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f4ca:	2303      	movs	r3, #3
 800f4cc:	e00f      	b.n	800f4ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00a      	beq.n	800f4ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	3b01      	subs	r3, #1
 800f4d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4e4:	2b80      	cmp	r3, #128	; 0x80
 800f4e6:	d0f2      	beq.n	800f4ce <SPI_EndRxTxTransaction+0x52>
 800f4e8:	e000      	b.n	800f4ec <SPI_EndRxTxTransaction+0x70>
        break;
 800f4ea:	bf00      	nop
  }

  return HAL_OK;
 800f4ec:	2300      	movs	r3, #0
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3718      	adds	r7, #24
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20000004 	.word	0x20000004
 800f4fc:	165e9f81 	.word	0x165e9f81

0800f500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d101      	bne.n	800f512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f50e:	2301      	movs	r3, #1
 800f510:	e041      	b.n	800f596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d106      	bne.n	800f52c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2200      	movs	r2, #0
 800f522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f7f4 f908 	bl	800373c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2202      	movs	r2, #2
 800f530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	3304      	adds	r3, #4
 800f53c:	4619      	mov	r1, r3
 800f53e:	4610      	mov	r0, r2
 800f540:	f000 fc7a 	bl	800fe38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2201      	movs	r2, #1
 800f548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2201      	movs	r2, #1
 800f550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2201      	movs	r2, #1
 800f590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3708      	adds	r7, #8
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
	...

0800f5a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b085      	sub	sp, #20
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d001      	beq.n	800f5b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e04e      	b.n	800f656 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	68da      	ldr	r2, [r3, #12]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f042 0201 	orr.w	r2, r2, #1
 800f5ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4a23      	ldr	r2, [pc, #140]	; (800f664 <HAL_TIM_Base_Start_IT+0xc4>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d022      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5e2:	d01d      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4a1f      	ldr	r2, [pc, #124]	; (800f668 <HAL_TIM_Base_Start_IT+0xc8>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d018      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a1e      	ldr	r2, [pc, #120]	; (800f66c <HAL_TIM_Base_Start_IT+0xcc>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d013      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a1c      	ldr	r2, [pc, #112]	; (800f670 <HAL_TIM_Base_Start_IT+0xd0>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d00e      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a1b      	ldr	r2, [pc, #108]	; (800f674 <HAL_TIM_Base_Start_IT+0xd4>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d009      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a19      	ldr	r2, [pc, #100]	; (800f678 <HAL_TIM_Base_Start_IT+0xd8>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d004      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a18      	ldr	r2, [pc, #96]	; (800f67c <HAL_TIM_Base_Start_IT+0xdc>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d111      	bne.n	800f644 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	f003 0307 	and.w	r3, r3, #7
 800f62a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2b06      	cmp	r3, #6
 800f630:	d010      	beq.n	800f654 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f042 0201 	orr.w	r2, r2, #1
 800f640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f642:	e007      	b.n	800f654 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f042 0201 	orr.w	r2, r2, #1
 800f652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	40010000 	.word	0x40010000
 800f668:	40000400 	.word	0x40000400
 800f66c:	40000800 	.word	0x40000800
 800f670:	40000c00 	.word	0x40000c00
 800f674:	40010400 	.word	0x40010400
 800f678:	40014000 	.word	0x40014000
 800f67c:	40001800 	.word	0x40001800

0800f680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d101      	bne.n	800f692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f68e:	2301      	movs	r3, #1
 800f690:	e041      	b.n	800f716 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d106      	bne.n	800f6ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 f839 	bl	800f71e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2202      	movs	r2, #2
 800f6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	4619      	mov	r1, r3
 800f6be:	4610      	mov	r0, r2
 800f6c0:	f000 fbba 	bl	800fe38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2201      	movs	r2, #1
 800f6e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2201      	movs	r2, #1
 800f708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f714:	2300      	movs	r3, #0
}
 800f716:	4618      	mov	r0, r3
 800f718:	3708      	adds	r7, #8
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f71e:	b480      	push	{r7}
 800f720:	b083      	sub	sp, #12
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f726:	bf00      	nop
 800f728:	370c      	adds	r7, #12
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
	...

0800f734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d109      	bne.n	800f758 <HAL_TIM_PWM_Start+0x24>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	bf14      	ite	ne
 800f750:	2301      	movne	r3, #1
 800f752:	2300      	moveq	r3, #0
 800f754:	b2db      	uxtb	r3, r3
 800f756:	e022      	b.n	800f79e <HAL_TIM_PWM_Start+0x6a>
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	2b04      	cmp	r3, #4
 800f75c:	d109      	bne.n	800f772 <HAL_TIM_PWM_Start+0x3e>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f764:	b2db      	uxtb	r3, r3
 800f766:	2b01      	cmp	r3, #1
 800f768:	bf14      	ite	ne
 800f76a:	2301      	movne	r3, #1
 800f76c:	2300      	moveq	r3, #0
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	e015      	b.n	800f79e <HAL_TIM_PWM_Start+0x6a>
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2b08      	cmp	r3, #8
 800f776:	d109      	bne.n	800f78c <HAL_TIM_PWM_Start+0x58>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	2b01      	cmp	r3, #1
 800f782:	bf14      	ite	ne
 800f784:	2301      	movne	r3, #1
 800f786:	2300      	moveq	r3, #0
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	e008      	b.n	800f79e <HAL_TIM_PWM_Start+0x6a>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f792:	b2db      	uxtb	r3, r3
 800f794:	2b01      	cmp	r3, #1
 800f796:	bf14      	ite	ne
 800f798:	2301      	movne	r3, #1
 800f79a:	2300      	moveq	r3, #0
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d001      	beq.n	800f7a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e07c      	b.n	800f8a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d104      	bne.n	800f7b6 <HAL_TIM_PWM_Start+0x82>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2202      	movs	r2, #2
 800f7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f7b4:	e013      	b.n	800f7de <HAL_TIM_PWM_Start+0xaa>
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	2b04      	cmp	r3, #4
 800f7ba:	d104      	bne.n	800f7c6 <HAL_TIM_PWM_Start+0x92>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2202      	movs	r2, #2
 800f7c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f7c4:	e00b      	b.n	800f7de <HAL_TIM_PWM_Start+0xaa>
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	2b08      	cmp	r3, #8
 800f7ca:	d104      	bne.n	800f7d6 <HAL_TIM_PWM_Start+0xa2>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2202      	movs	r2, #2
 800f7d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f7d4:	e003      	b.n	800f7de <HAL_TIM_PWM_Start+0xaa>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2202      	movs	r2, #2
 800f7da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	6839      	ldr	r1, [r7, #0]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f000 fe10 	bl	801040c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a2d      	ldr	r2, [pc, #180]	; (800f8a8 <HAL_TIM_PWM_Start+0x174>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d004      	beq.n	800f800 <HAL_TIM_PWM_Start+0xcc>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a2c      	ldr	r2, [pc, #176]	; (800f8ac <HAL_TIM_PWM_Start+0x178>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d101      	bne.n	800f804 <HAL_TIM_PWM_Start+0xd0>
 800f800:	2301      	movs	r3, #1
 800f802:	e000      	b.n	800f806 <HAL_TIM_PWM_Start+0xd2>
 800f804:	2300      	movs	r3, #0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d007      	beq.n	800f81a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a22      	ldr	r2, [pc, #136]	; (800f8a8 <HAL_TIM_PWM_Start+0x174>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d022      	beq.n	800f86a <HAL_TIM_PWM_Start+0x136>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f82c:	d01d      	beq.n	800f86a <HAL_TIM_PWM_Start+0x136>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	4a1f      	ldr	r2, [pc, #124]	; (800f8b0 <HAL_TIM_PWM_Start+0x17c>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d018      	beq.n	800f86a <HAL_TIM_PWM_Start+0x136>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4a1d      	ldr	r2, [pc, #116]	; (800f8b4 <HAL_TIM_PWM_Start+0x180>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d013      	beq.n	800f86a <HAL_TIM_PWM_Start+0x136>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a1c      	ldr	r2, [pc, #112]	; (800f8b8 <HAL_TIM_PWM_Start+0x184>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d00e      	beq.n	800f86a <HAL_TIM_PWM_Start+0x136>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4a16      	ldr	r2, [pc, #88]	; (800f8ac <HAL_TIM_PWM_Start+0x178>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d009      	beq.n	800f86a <HAL_TIM_PWM_Start+0x136>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4a18      	ldr	r2, [pc, #96]	; (800f8bc <HAL_TIM_PWM_Start+0x188>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d004      	beq.n	800f86a <HAL_TIM_PWM_Start+0x136>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a16      	ldr	r2, [pc, #88]	; (800f8c0 <HAL_TIM_PWM_Start+0x18c>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d111      	bne.n	800f88e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	f003 0307 	and.w	r3, r3, #7
 800f874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2b06      	cmp	r3, #6
 800f87a:	d010      	beq.n	800f89e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f042 0201 	orr.w	r2, r2, #1
 800f88a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f88c:	e007      	b.n	800f89e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f042 0201 	orr.w	r2, r2, #1
 800f89c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f89e:	2300      	movs	r3, #0
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	40010000 	.word	0x40010000
 800f8ac:	40010400 	.word	0x40010400
 800f8b0:	40000400 	.word	0x40000400
 800f8b4:	40000800 	.word	0x40000800
 800f8b8:	40000c00 	.word	0x40000c00
 800f8bc:	40014000 	.word	0x40014000
 800f8c0:	40001800 	.word	0x40001800

0800f8c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	691b      	ldr	r3, [r3, #16]
 800f8d2:	f003 0302 	and.w	r3, r3, #2
 800f8d6:	2b02      	cmp	r3, #2
 800f8d8:	d122      	bne.n	800f920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	f003 0302 	and.w	r3, r3, #2
 800f8e4:	2b02      	cmp	r3, #2
 800f8e6:	d11b      	bne.n	800f920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f06f 0202 	mvn.w	r2, #2
 800f8f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	699b      	ldr	r3, [r3, #24]
 800f8fe:	f003 0303 	and.w	r3, r3, #3
 800f902:	2b00      	cmp	r3, #0
 800f904:	d003      	beq.n	800f90e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 fa77 	bl	800fdfa <HAL_TIM_IC_CaptureCallback>
 800f90c:	e005      	b.n	800f91a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 fa69 	bl	800fde6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f000 fa7a 	bl	800fe0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2200      	movs	r2, #0
 800f91e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	691b      	ldr	r3, [r3, #16]
 800f926:	f003 0304 	and.w	r3, r3, #4
 800f92a:	2b04      	cmp	r3, #4
 800f92c:	d122      	bne.n	800f974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	f003 0304 	and.w	r3, r3, #4
 800f938:	2b04      	cmp	r3, #4
 800f93a:	d11b      	bne.n	800f974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f06f 0204 	mvn.w	r2, #4
 800f944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2202      	movs	r2, #2
 800f94a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	699b      	ldr	r3, [r3, #24]
 800f952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f956:	2b00      	cmp	r3, #0
 800f958:	d003      	beq.n	800f962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 fa4d 	bl	800fdfa <HAL_TIM_IC_CaptureCallback>
 800f960:	e005      	b.n	800f96e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 fa3f 	bl	800fde6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f000 fa50 	bl	800fe0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	691b      	ldr	r3, [r3, #16]
 800f97a:	f003 0308 	and.w	r3, r3, #8
 800f97e:	2b08      	cmp	r3, #8
 800f980:	d122      	bne.n	800f9c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	68db      	ldr	r3, [r3, #12]
 800f988:	f003 0308 	and.w	r3, r3, #8
 800f98c:	2b08      	cmp	r3, #8
 800f98e:	d11b      	bne.n	800f9c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f06f 0208 	mvn.w	r2, #8
 800f998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2204      	movs	r2, #4
 800f99e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	69db      	ldr	r3, [r3, #28]
 800f9a6:	f003 0303 	and.w	r3, r3, #3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d003      	beq.n	800f9b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 fa23 	bl	800fdfa <HAL_TIM_IC_CaptureCallback>
 800f9b4:	e005      	b.n	800f9c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fa15 	bl	800fde6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f000 fa26 	bl	800fe0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	691b      	ldr	r3, [r3, #16]
 800f9ce:	f003 0310 	and.w	r3, r3, #16
 800f9d2:	2b10      	cmp	r3, #16
 800f9d4:	d122      	bne.n	800fa1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	f003 0310 	and.w	r3, r3, #16
 800f9e0:	2b10      	cmp	r3, #16
 800f9e2:	d11b      	bne.n	800fa1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f06f 0210 	mvn.w	r2, #16
 800f9ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2208      	movs	r2, #8
 800f9f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	69db      	ldr	r3, [r3, #28]
 800f9fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d003      	beq.n	800fa0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f000 f9f9 	bl	800fdfa <HAL_TIM_IC_CaptureCallback>
 800fa08:	e005      	b.n	800fa16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f000 f9eb 	bl	800fde6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 f9fc 	bl	800fe0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	691b      	ldr	r3, [r3, #16]
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d10e      	bne.n	800fa48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	f003 0301 	and.w	r3, r3, #1
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d107      	bne.n	800fa48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f06f 0201 	mvn.w	r2, #1
 800fa40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7f2 fd0c 	bl	8002460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	691b      	ldr	r3, [r3, #16]
 800fa4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa52:	2b80      	cmp	r3, #128	; 0x80
 800fa54:	d10e      	bne.n	800fa74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa60:	2b80      	cmp	r3, #128	; 0x80
 800fa62:	d107      	bne.n	800fa74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fa6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 fd78 	bl	8010564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	691b      	ldr	r3, [r3, #16]
 800fa7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa7e:	2b40      	cmp	r3, #64	; 0x40
 800fa80:	d10e      	bne.n	800faa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa8c:	2b40      	cmp	r3, #64	; 0x40
 800fa8e:	d107      	bne.n	800faa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fa98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f000 f9c1 	bl	800fe22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	691b      	ldr	r3, [r3, #16]
 800faa6:	f003 0320 	and.w	r3, r3, #32
 800faaa:	2b20      	cmp	r3, #32
 800faac:	d10e      	bne.n	800facc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	f003 0320 	and.w	r3, r3, #32
 800fab8:	2b20      	cmp	r3, #32
 800faba:	d107      	bne.n	800facc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f06f 0220 	mvn.w	r2, #32
 800fac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 fd42 	bl	8010550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800facc:	bf00      	nop
 800face:	3708      	adds	r7, #8
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b086      	sub	sp, #24
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fae0:	2300      	movs	r3, #0
 800fae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800faea:	2b01      	cmp	r3, #1
 800faec:	d101      	bne.n	800faf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800faee:	2302      	movs	r3, #2
 800faf0:	e0ae      	b.n	800fc50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2201      	movs	r2, #1
 800faf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2b0c      	cmp	r3, #12
 800fafe:	f200 809f 	bhi.w	800fc40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fb02:	a201      	add	r2, pc, #4	; (adr r2, 800fb08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb08:	0800fb3d 	.word	0x0800fb3d
 800fb0c:	0800fc41 	.word	0x0800fc41
 800fb10:	0800fc41 	.word	0x0800fc41
 800fb14:	0800fc41 	.word	0x0800fc41
 800fb18:	0800fb7d 	.word	0x0800fb7d
 800fb1c:	0800fc41 	.word	0x0800fc41
 800fb20:	0800fc41 	.word	0x0800fc41
 800fb24:	0800fc41 	.word	0x0800fc41
 800fb28:	0800fbbf 	.word	0x0800fbbf
 800fb2c:	0800fc41 	.word	0x0800fc41
 800fb30:	0800fc41 	.word	0x0800fc41
 800fb34:	0800fc41 	.word	0x0800fc41
 800fb38:	0800fbff 	.word	0x0800fbff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	68b9      	ldr	r1, [r7, #8]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f000 fa18 	bl	800ff78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	699a      	ldr	r2, [r3, #24]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f042 0208 	orr.w	r2, r2, #8
 800fb56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	699a      	ldr	r2, [r3, #24]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f022 0204 	bic.w	r2, r2, #4
 800fb66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	6999      	ldr	r1, [r3, #24]
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	691a      	ldr	r2, [r3, #16]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	430a      	orrs	r2, r1
 800fb78:	619a      	str	r2, [r3, #24]
      break;
 800fb7a:	e064      	b.n	800fc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	68b9      	ldr	r1, [r7, #8]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f000 fa68 	bl	8010058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	699a      	ldr	r2, [r3, #24]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	699a      	ldr	r2, [r3, #24]
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	6999      	ldr	r1, [r3, #24]
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	691b      	ldr	r3, [r3, #16]
 800fbb2:	021a      	lsls	r2, r3, #8
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	430a      	orrs	r2, r1
 800fbba:	619a      	str	r2, [r3, #24]
      break;
 800fbbc:	e043      	b.n	800fc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	68b9      	ldr	r1, [r7, #8]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f000 fabd 	bl	8010144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	69da      	ldr	r2, [r3, #28]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f042 0208 	orr.w	r2, r2, #8
 800fbd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	69da      	ldr	r2, [r3, #28]
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	f022 0204 	bic.w	r2, r2, #4
 800fbe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	69d9      	ldr	r1, [r3, #28]
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	691a      	ldr	r2, [r3, #16]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	430a      	orrs	r2, r1
 800fbfa:	61da      	str	r2, [r3, #28]
      break;
 800fbfc:	e023      	b.n	800fc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68b9      	ldr	r1, [r7, #8]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f000 fb11 	bl	801022c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	69da      	ldr	r2, [r3, #28]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	69da      	ldr	r2, [r3, #28]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	69d9      	ldr	r1, [r3, #28]
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	021a      	lsls	r2, r3, #8
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	430a      	orrs	r2, r1
 800fc3c:	61da      	str	r2, [r3, #28]
      break;
 800fc3e:	e002      	b.n	800fc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800fc40:	2301      	movs	r3, #1
 800fc42:	75fb      	strb	r3, [r7, #23]
      break;
 800fc44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fc4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3718      	adds	r7, #24
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fc62:	2300      	movs	r3, #0
 800fc64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d101      	bne.n	800fc74 <HAL_TIM_ConfigClockSource+0x1c>
 800fc70:	2302      	movs	r3, #2
 800fc72:	e0b4      	b.n	800fdde <HAL_TIM_ConfigClockSource+0x186>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2202      	movs	r2, #2
 800fc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fc92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	68ba      	ldr	r2, [r7, #8]
 800fca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcac:	d03e      	beq.n	800fd2c <HAL_TIM_ConfigClockSource+0xd4>
 800fcae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcb2:	f200 8087 	bhi.w	800fdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800fcb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcba:	f000 8086 	beq.w	800fdca <HAL_TIM_ConfigClockSource+0x172>
 800fcbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcc2:	d87f      	bhi.n	800fdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800fcc4:	2b70      	cmp	r3, #112	; 0x70
 800fcc6:	d01a      	beq.n	800fcfe <HAL_TIM_ConfigClockSource+0xa6>
 800fcc8:	2b70      	cmp	r3, #112	; 0x70
 800fcca:	d87b      	bhi.n	800fdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800fccc:	2b60      	cmp	r3, #96	; 0x60
 800fcce:	d050      	beq.n	800fd72 <HAL_TIM_ConfigClockSource+0x11a>
 800fcd0:	2b60      	cmp	r3, #96	; 0x60
 800fcd2:	d877      	bhi.n	800fdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800fcd4:	2b50      	cmp	r3, #80	; 0x50
 800fcd6:	d03c      	beq.n	800fd52 <HAL_TIM_ConfigClockSource+0xfa>
 800fcd8:	2b50      	cmp	r3, #80	; 0x50
 800fcda:	d873      	bhi.n	800fdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800fcdc:	2b40      	cmp	r3, #64	; 0x40
 800fcde:	d058      	beq.n	800fd92 <HAL_TIM_ConfigClockSource+0x13a>
 800fce0:	2b40      	cmp	r3, #64	; 0x40
 800fce2:	d86f      	bhi.n	800fdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800fce4:	2b30      	cmp	r3, #48	; 0x30
 800fce6:	d064      	beq.n	800fdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800fce8:	2b30      	cmp	r3, #48	; 0x30
 800fcea:	d86b      	bhi.n	800fdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800fcec:	2b20      	cmp	r3, #32
 800fcee:	d060      	beq.n	800fdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800fcf0:	2b20      	cmp	r3, #32
 800fcf2:	d867      	bhi.n	800fdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d05c      	beq.n	800fdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800fcf8:	2b10      	cmp	r3, #16
 800fcfa:	d05a      	beq.n	800fdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800fcfc:	e062      	b.n	800fdc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6818      	ldr	r0, [r3, #0]
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	6899      	ldr	r1, [r3, #8]
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	685a      	ldr	r2, [r3, #4]
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	f000 fb5d 	bl	80103cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fd20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	609a      	str	r2, [r3, #8]
      break;
 800fd2a:	e04f      	b.n	800fdcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	6899      	ldr	r1, [r3, #8]
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	685a      	ldr	r2, [r3, #4]
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	68db      	ldr	r3, [r3, #12]
 800fd3c:	f000 fb46 	bl	80103cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	689a      	ldr	r2, [r3, #8]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd4e:	609a      	str	r2, [r3, #8]
      break;
 800fd50:	e03c      	b.n	800fdcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6818      	ldr	r0, [r3, #0]
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	6859      	ldr	r1, [r3, #4]
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	f000 faba 	bl	80102d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2150      	movs	r1, #80	; 0x50
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f000 fb13 	bl	8010396 <TIM_ITRx_SetConfig>
      break;
 800fd70:	e02c      	b.n	800fdcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6818      	ldr	r0, [r3, #0]
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	6859      	ldr	r1, [r3, #4]
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	461a      	mov	r2, r3
 800fd80:	f000 fad9 	bl	8010336 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2160      	movs	r1, #96	; 0x60
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f000 fb03 	bl	8010396 <TIM_ITRx_SetConfig>
      break;
 800fd90:	e01c      	b.n	800fdcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6818      	ldr	r0, [r3, #0]
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	6859      	ldr	r1, [r3, #4]
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	f000 fa9a 	bl	80102d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2140      	movs	r1, #64	; 0x40
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 faf3 	bl	8010396 <TIM_ITRx_SetConfig>
      break;
 800fdb0:	e00c      	b.n	800fdcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4619      	mov	r1, r3
 800fdbc:	4610      	mov	r0, r2
 800fdbe:	f000 faea 	bl	8010396 <TIM_ITRx_SetConfig>
      break;
 800fdc2:	e003      	b.n	800fdcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	73fb      	strb	r3, [r7, #15]
      break;
 800fdc8:	e000      	b.n	800fdcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fdca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2201      	movs	r2, #1
 800fdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fde6:	b480      	push	{r7}
 800fde8:	b083      	sub	sp, #12
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fdee:	bf00      	nop
 800fdf0:	370c      	adds	r7, #12
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr

0800fdfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fdfa:	b480      	push	{r7}
 800fdfc:	b083      	sub	sp, #12
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fe02:	bf00      	nop
 800fe04:	370c      	adds	r7, #12
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr

0800fe0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fe0e:	b480      	push	{r7}
 800fe10:	b083      	sub	sp, #12
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fe16:	bf00      	nop
 800fe18:	370c      	adds	r7, #12
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr

0800fe22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fe22:	b480      	push	{r7}
 800fe24:	b083      	sub	sp, #12
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fe2a:	bf00      	nop
 800fe2c:	370c      	adds	r7, #12
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
	...

0800fe38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	4a40      	ldr	r2, [pc, #256]	; (800ff4c <TIM_Base_SetConfig+0x114>)
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	d013      	beq.n	800fe78 <TIM_Base_SetConfig+0x40>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe56:	d00f      	beq.n	800fe78 <TIM_Base_SetConfig+0x40>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	4a3d      	ldr	r2, [pc, #244]	; (800ff50 <TIM_Base_SetConfig+0x118>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d00b      	beq.n	800fe78 <TIM_Base_SetConfig+0x40>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4a3c      	ldr	r2, [pc, #240]	; (800ff54 <TIM_Base_SetConfig+0x11c>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d007      	beq.n	800fe78 <TIM_Base_SetConfig+0x40>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4a3b      	ldr	r2, [pc, #236]	; (800ff58 <TIM_Base_SetConfig+0x120>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d003      	beq.n	800fe78 <TIM_Base_SetConfig+0x40>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4a3a      	ldr	r2, [pc, #232]	; (800ff5c <TIM_Base_SetConfig+0x124>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d108      	bne.n	800fe8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	68fa      	ldr	r2, [r7, #12]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4a2f      	ldr	r2, [pc, #188]	; (800ff4c <TIM_Base_SetConfig+0x114>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d02b      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe98:	d027      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4a2c      	ldr	r2, [pc, #176]	; (800ff50 <TIM_Base_SetConfig+0x118>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d023      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	4a2b      	ldr	r2, [pc, #172]	; (800ff54 <TIM_Base_SetConfig+0x11c>)
 800fea6:	4293      	cmp	r3, r2
 800fea8:	d01f      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4a2a      	ldr	r2, [pc, #168]	; (800ff58 <TIM_Base_SetConfig+0x120>)
 800feae:	4293      	cmp	r3, r2
 800feb0:	d01b      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4a29      	ldr	r2, [pc, #164]	; (800ff5c <TIM_Base_SetConfig+0x124>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d017      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4a28      	ldr	r2, [pc, #160]	; (800ff60 <TIM_Base_SetConfig+0x128>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d013      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4a27      	ldr	r2, [pc, #156]	; (800ff64 <TIM_Base_SetConfig+0x12c>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d00f      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4a26      	ldr	r2, [pc, #152]	; (800ff68 <TIM_Base_SetConfig+0x130>)
 800fece:	4293      	cmp	r3, r2
 800fed0:	d00b      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4a25      	ldr	r2, [pc, #148]	; (800ff6c <TIM_Base_SetConfig+0x134>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d007      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4a24      	ldr	r2, [pc, #144]	; (800ff70 <TIM_Base_SetConfig+0x138>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d003      	beq.n	800feea <TIM_Base_SetConfig+0xb2>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4a23      	ldr	r2, [pc, #140]	; (800ff74 <TIM_Base_SetConfig+0x13c>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d108      	bne.n	800fefc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	68fa      	ldr	r2, [r7, #12]
 800fef8:	4313      	orrs	r3, r2
 800fefa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	695b      	ldr	r3, [r3, #20]
 800ff06:	4313      	orrs	r3, r2
 800ff08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	68fa      	ldr	r2, [r7, #12]
 800ff0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	689a      	ldr	r2, [r3, #8]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	4a0a      	ldr	r2, [pc, #40]	; (800ff4c <TIM_Base_SetConfig+0x114>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d003      	beq.n	800ff30 <TIM_Base_SetConfig+0xf8>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4a0c      	ldr	r2, [pc, #48]	; (800ff5c <TIM_Base_SetConfig+0x124>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d103      	bne.n	800ff38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	691a      	ldr	r2, [r3, #16]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	615a      	str	r2, [r3, #20]
}
 800ff3e:	bf00      	nop
 800ff40:	3714      	adds	r7, #20
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	40010000 	.word	0x40010000
 800ff50:	40000400 	.word	0x40000400
 800ff54:	40000800 	.word	0x40000800
 800ff58:	40000c00 	.word	0x40000c00
 800ff5c:	40010400 	.word	0x40010400
 800ff60:	40014000 	.word	0x40014000
 800ff64:	40014400 	.word	0x40014400
 800ff68:	40014800 	.word	0x40014800
 800ff6c:	40001800 	.word	0x40001800
 800ff70:	40001c00 	.word	0x40001c00
 800ff74:	40002000 	.word	0x40002000

0800ff78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b087      	sub	sp, #28
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6a1b      	ldr	r3, [r3, #32]
 800ff86:	f023 0201 	bic.w	r2, r3, #1
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6a1b      	ldr	r3, [r3, #32]
 800ff92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	699b      	ldr	r3, [r3, #24]
 800ff9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f023 0303 	bic.w	r3, r3, #3
 800ffae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	f023 0302 	bic.w	r3, r3, #2
 800ffc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	697a      	ldr	r2, [r7, #20]
 800ffc8:	4313      	orrs	r3, r2
 800ffca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	4a20      	ldr	r2, [pc, #128]	; (8010050 <TIM_OC1_SetConfig+0xd8>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d003      	beq.n	800ffdc <TIM_OC1_SetConfig+0x64>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	4a1f      	ldr	r2, [pc, #124]	; (8010054 <TIM_OC1_SetConfig+0xdc>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d10c      	bne.n	800fff6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	f023 0308 	bic.w	r3, r3, #8
 800ffe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	697a      	ldr	r2, [r7, #20]
 800ffea:	4313      	orrs	r3, r2
 800ffec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	f023 0304 	bic.w	r3, r3, #4
 800fff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4a15      	ldr	r2, [pc, #84]	; (8010050 <TIM_OC1_SetConfig+0xd8>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d003      	beq.n	8010006 <TIM_OC1_SetConfig+0x8e>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4a14      	ldr	r2, [pc, #80]	; (8010054 <TIM_OC1_SetConfig+0xdc>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d111      	bne.n	801002a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801000c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	695b      	ldr	r3, [r3, #20]
 801001a:	693a      	ldr	r2, [r7, #16]
 801001c:	4313      	orrs	r3, r2
 801001e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	699b      	ldr	r3, [r3, #24]
 8010024:	693a      	ldr	r2, [r7, #16]
 8010026:	4313      	orrs	r3, r2
 8010028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	693a      	ldr	r2, [r7, #16]
 801002e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	68fa      	ldr	r2, [r7, #12]
 8010034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	685a      	ldr	r2, [r3, #4]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	697a      	ldr	r2, [r7, #20]
 8010042:	621a      	str	r2, [r3, #32]
}
 8010044:	bf00      	nop
 8010046:	371c      	adds	r7, #28
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr
 8010050:	40010000 	.word	0x40010000
 8010054:	40010400 	.word	0x40010400

08010058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010058:	b480      	push	{r7}
 801005a:	b087      	sub	sp, #28
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6a1b      	ldr	r3, [r3, #32]
 8010066:	f023 0210 	bic.w	r2, r3, #16
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6a1b      	ldr	r3, [r3, #32]
 8010072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	699b      	ldr	r3, [r3, #24]
 801007e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801008e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	021b      	lsls	r3, r3, #8
 8010096:	68fa      	ldr	r2, [r7, #12]
 8010098:	4313      	orrs	r3, r2
 801009a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	f023 0320 	bic.w	r3, r3, #32
 80100a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	011b      	lsls	r3, r3, #4
 80100aa:	697a      	ldr	r2, [r7, #20]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4a22      	ldr	r2, [pc, #136]	; (801013c <TIM_OC2_SetConfig+0xe4>)
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d003      	beq.n	80100c0 <TIM_OC2_SetConfig+0x68>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	4a21      	ldr	r2, [pc, #132]	; (8010140 <TIM_OC2_SetConfig+0xe8>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d10d      	bne.n	80100dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	011b      	lsls	r3, r3, #4
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	4313      	orrs	r3, r2
 80100d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	4a17      	ldr	r2, [pc, #92]	; (801013c <TIM_OC2_SetConfig+0xe4>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d003      	beq.n	80100ec <TIM_OC2_SetConfig+0x94>
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	4a16      	ldr	r2, [pc, #88]	; (8010140 <TIM_OC2_SetConfig+0xe8>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d113      	bne.n	8010114 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80100f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80100fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	695b      	ldr	r3, [r3, #20]
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	693a      	ldr	r2, [r7, #16]
 8010104:	4313      	orrs	r3, r2
 8010106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	699b      	ldr	r3, [r3, #24]
 801010c:	009b      	lsls	r3, r3, #2
 801010e:	693a      	ldr	r2, [r7, #16]
 8010110:	4313      	orrs	r3, r2
 8010112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	693a      	ldr	r2, [r7, #16]
 8010118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	685a      	ldr	r2, [r3, #4]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	697a      	ldr	r2, [r7, #20]
 801012c:	621a      	str	r2, [r3, #32]
}
 801012e:	bf00      	nop
 8010130:	371c      	adds	r7, #28
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	40010000 	.word	0x40010000
 8010140:	40010400 	.word	0x40010400

08010144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010144:	b480      	push	{r7}
 8010146:	b087      	sub	sp, #28
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a1b      	ldr	r3, [r3, #32]
 8010152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6a1b      	ldr	r3, [r3, #32]
 801015e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f023 0303 	bic.w	r3, r3, #3
 801017a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	68fa      	ldr	r2, [r7, #12]
 8010182:	4313      	orrs	r3, r2
 8010184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801018c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	689b      	ldr	r3, [r3, #8]
 8010192:	021b      	lsls	r3, r3, #8
 8010194:	697a      	ldr	r2, [r7, #20]
 8010196:	4313      	orrs	r3, r2
 8010198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4a21      	ldr	r2, [pc, #132]	; (8010224 <TIM_OC3_SetConfig+0xe0>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d003      	beq.n	80101aa <TIM_OC3_SetConfig+0x66>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4a20      	ldr	r2, [pc, #128]	; (8010228 <TIM_OC3_SetConfig+0xe4>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d10d      	bne.n	80101c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80101b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	68db      	ldr	r3, [r3, #12]
 80101b6:	021b      	lsls	r3, r3, #8
 80101b8:	697a      	ldr	r2, [r7, #20]
 80101ba:	4313      	orrs	r3, r2
 80101bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80101c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4a16      	ldr	r2, [pc, #88]	; (8010224 <TIM_OC3_SetConfig+0xe0>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d003      	beq.n	80101d6 <TIM_OC3_SetConfig+0x92>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4a15      	ldr	r2, [pc, #84]	; (8010228 <TIM_OC3_SetConfig+0xe4>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d113      	bne.n	80101fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80101dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80101e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	695b      	ldr	r3, [r3, #20]
 80101ea:	011b      	lsls	r3, r3, #4
 80101ec:	693a      	ldr	r2, [r7, #16]
 80101ee:	4313      	orrs	r3, r2
 80101f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	699b      	ldr	r3, [r3, #24]
 80101f6:	011b      	lsls	r3, r3, #4
 80101f8:	693a      	ldr	r2, [r7, #16]
 80101fa:	4313      	orrs	r3, r2
 80101fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	693a      	ldr	r2, [r7, #16]
 8010202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	685a      	ldr	r2, [r3, #4]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	697a      	ldr	r2, [r7, #20]
 8010216:	621a      	str	r2, [r3, #32]
}
 8010218:	bf00      	nop
 801021a:	371c      	adds	r7, #28
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr
 8010224:	40010000 	.word	0x40010000
 8010228:	40010400 	.word	0x40010400

0801022c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801022c:	b480      	push	{r7}
 801022e:	b087      	sub	sp, #28
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a1b      	ldr	r3, [r3, #32]
 801023a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6a1b      	ldr	r3, [r3, #32]
 8010246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	69db      	ldr	r3, [r3, #28]
 8010252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801025a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	021b      	lsls	r3, r3, #8
 801026a:	68fa      	ldr	r2, [r7, #12]
 801026c:	4313      	orrs	r3, r2
 801026e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	031b      	lsls	r3, r3, #12
 801027e:	693a      	ldr	r2, [r7, #16]
 8010280:	4313      	orrs	r3, r2
 8010282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4a12      	ldr	r2, [pc, #72]	; (80102d0 <TIM_OC4_SetConfig+0xa4>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d003      	beq.n	8010294 <TIM_OC4_SetConfig+0x68>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4a11      	ldr	r2, [pc, #68]	; (80102d4 <TIM_OC4_SetConfig+0xa8>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d109      	bne.n	80102a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801029a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	695b      	ldr	r3, [r3, #20]
 80102a0:	019b      	lsls	r3, r3, #6
 80102a2:	697a      	ldr	r2, [r7, #20]
 80102a4:	4313      	orrs	r3, r2
 80102a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	697a      	ldr	r2, [r7, #20]
 80102ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	68fa      	ldr	r2, [r7, #12]
 80102b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	685a      	ldr	r2, [r3, #4]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	693a      	ldr	r2, [r7, #16]
 80102c0:	621a      	str	r2, [r3, #32]
}
 80102c2:	bf00      	nop
 80102c4:	371c      	adds	r7, #28
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	40010000 	.word	0x40010000
 80102d4:	40010400 	.word	0x40010400

080102d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80102d8:	b480      	push	{r7}
 80102da:	b087      	sub	sp, #28
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	6a1b      	ldr	r3, [r3, #32]
 80102e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6a1b      	ldr	r3, [r3, #32]
 80102ee:	f023 0201 	bic.w	r2, r3, #1
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	699b      	ldr	r3, [r3, #24]
 80102fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	011b      	lsls	r3, r3, #4
 8010308:	693a      	ldr	r2, [r7, #16]
 801030a:	4313      	orrs	r3, r2
 801030c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	f023 030a 	bic.w	r3, r3, #10
 8010314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010316:	697a      	ldr	r2, [r7, #20]
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	4313      	orrs	r3, r2
 801031c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	693a      	ldr	r2, [r7, #16]
 8010322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	697a      	ldr	r2, [r7, #20]
 8010328:	621a      	str	r2, [r3, #32]
}
 801032a:	bf00      	nop
 801032c:	371c      	adds	r7, #28
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr

08010336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010336:	b480      	push	{r7}
 8010338:	b087      	sub	sp, #28
 801033a:	af00      	add	r7, sp, #0
 801033c:	60f8      	str	r0, [r7, #12]
 801033e:	60b9      	str	r1, [r7, #8]
 8010340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	6a1b      	ldr	r3, [r3, #32]
 8010346:	f023 0210 	bic.w	r2, r3, #16
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	699b      	ldr	r3, [r3, #24]
 8010352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6a1b      	ldr	r3, [r3, #32]
 8010358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	031b      	lsls	r3, r3, #12
 8010366:	697a      	ldr	r2, [r7, #20]
 8010368:	4313      	orrs	r3, r2
 801036a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010372:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	011b      	lsls	r3, r3, #4
 8010378:	693a      	ldr	r2, [r7, #16]
 801037a:	4313      	orrs	r3, r2
 801037c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	697a      	ldr	r2, [r7, #20]
 8010382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	693a      	ldr	r2, [r7, #16]
 8010388:	621a      	str	r2, [r3, #32]
}
 801038a:	bf00      	nop
 801038c:	371c      	adds	r7, #28
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr

08010396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010396:	b480      	push	{r7}
 8010398:	b085      	sub	sp, #20
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
 801039e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80103ae:	683a      	ldr	r2, [r7, #0]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	4313      	orrs	r3, r2
 80103b4:	f043 0307 	orr.w	r3, r3, #7
 80103b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	609a      	str	r2, [r3, #8]
}
 80103c0:	bf00      	nop
 80103c2:	3714      	adds	r7, #20
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b087      	sub	sp, #28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	607a      	str	r2, [r7, #4]
 80103d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	689b      	ldr	r3, [r3, #8]
 80103de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80103e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	021a      	lsls	r2, r3, #8
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	431a      	orrs	r2, r3
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	697a      	ldr	r2, [r7, #20]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	697a      	ldr	r2, [r7, #20]
 80103fe:	609a      	str	r2, [r3, #8]
}
 8010400:	bf00      	nop
 8010402:	371c      	adds	r7, #28
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801040c:	b480      	push	{r7}
 801040e:	b087      	sub	sp, #28
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	f003 031f 	and.w	r3, r3, #31
 801041e:	2201      	movs	r2, #1
 8010420:	fa02 f303 	lsl.w	r3, r2, r3
 8010424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	6a1a      	ldr	r2, [r3, #32]
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	43db      	mvns	r3, r3
 801042e:	401a      	ands	r2, r3
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6a1a      	ldr	r2, [r3, #32]
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	f003 031f 	and.w	r3, r3, #31
 801043e:	6879      	ldr	r1, [r7, #4]
 8010440:	fa01 f303 	lsl.w	r3, r1, r3
 8010444:	431a      	orrs	r2, r3
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	621a      	str	r2, [r3, #32]
}
 801044a:	bf00      	nop
 801044c:	371c      	adds	r7, #28
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr
	...

08010458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010458:	b480      	push	{r7}
 801045a:	b085      	sub	sp, #20
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010468:	2b01      	cmp	r3, #1
 801046a:	d101      	bne.n	8010470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801046c:	2302      	movs	r3, #2
 801046e:	e05a      	b.n	8010526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2202      	movs	r2, #2
 801047c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	4313      	orrs	r3, r2
 80104a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	68fa      	ldr	r2, [r7, #12]
 80104a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4a21      	ldr	r2, [pc, #132]	; (8010534 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d022      	beq.n	80104fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104bc:	d01d      	beq.n	80104fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	4a1d      	ldr	r2, [pc, #116]	; (8010538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d018      	beq.n	80104fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4a1b      	ldr	r2, [pc, #108]	; (801053c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d013      	beq.n	80104fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4a1a      	ldr	r2, [pc, #104]	; (8010540 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80104d8:	4293      	cmp	r3, r2
 80104da:	d00e      	beq.n	80104fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4a18      	ldr	r2, [pc, #96]	; (8010544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d009      	beq.n	80104fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	4a17      	ldr	r2, [pc, #92]	; (8010548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d004      	beq.n	80104fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4a15      	ldr	r2, [pc, #84]	; (801054c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d10c      	bne.n	8010514 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	68ba      	ldr	r2, [r7, #8]
 8010508:	4313      	orrs	r3, r2
 801050a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	68ba      	ldr	r2, [r7, #8]
 8010512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2201      	movs	r2, #1
 8010518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3714      	adds	r7, #20
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	40010000 	.word	0x40010000
 8010538:	40000400 	.word	0x40000400
 801053c:	40000800 	.word	0x40000800
 8010540:	40000c00 	.word	0x40000c00
 8010544:	40010400 	.word	0x40010400
 8010548:	40014000 	.word	0x40014000
 801054c:	40001800 	.word	0x40001800

08010550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010550:	b480      	push	{r7}
 8010552:	b083      	sub	sp, #12
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010558:	bf00      	nop
 801055a:	370c      	adds	r7, #12
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr

08010564 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010564:	b480      	push	{r7}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801056c:	bf00      	nop
 801056e:	370c      	adds	r7, #12
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010586:	2301      	movs	r3, #1
 8010588:	e03f      	b.n	801060a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010590:	b2db      	uxtb	r3, r3
 8010592:	2b00      	cmp	r3, #0
 8010594:	d106      	bne.n	80105a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2200      	movs	r2, #0
 801059a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7f3 f964 	bl	800386c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2224      	movs	r2, #36	; 0x24
 80105a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	68da      	ldr	r2, [r3, #12]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80105ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f001 f843 	bl	8011648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	691a      	ldr	r2, [r3, #16]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80105d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	695a      	ldr	r2, [r3, #20]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80105e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	68da      	ldr	r2, [r3, #12]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80105f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2200      	movs	r2, #0
 80105f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2220      	movs	r2, #32
 80105fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2220      	movs	r2, #32
 8010604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010608:	2300      	movs	r3, #0
}
 801060a:	4618      	mov	r0, r3
 801060c:	3708      	adds	r7, #8
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}

08010612 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010612:	b580      	push	{r7, lr}
 8010614:	b08a      	sub	sp, #40	; 0x28
 8010616:	af02      	add	r7, sp, #8
 8010618:	60f8      	str	r0, [r7, #12]
 801061a:	60b9      	str	r1, [r7, #8]
 801061c:	603b      	str	r3, [r7, #0]
 801061e:	4613      	mov	r3, r2
 8010620:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010622:	2300      	movs	r3, #0
 8010624:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b20      	cmp	r3, #32
 8010630:	d17c      	bne.n	801072c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d002      	beq.n	801063e <HAL_UART_Transmit+0x2c>
 8010638:	88fb      	ldrh	r3, [r7, #6]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d101      	bne.n	8010642 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801063e:	2301      	movs	r3, #1
 8010640:	e075      	b.n	801072e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010648:	2b01      	cmp	r3, #1
 801064a:	d101      	bne.n	8010650 <HAL_UART_Transmit+0x3e>
 801064c:	2302      	movs	r3, #2
 801064e:	e06e      	b.n	801072e <HAL_UART_Transmit+0x11c>
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2201      	movs	r2, #1
 8010654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2200      	movs	r2, #0
 801065c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2221      	movs	r2, #33	; 0x21
 8010662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010666:	f7f9 fbdf 	bl	8009e28 <HAL_GetTick>
 801066a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	88fa      	ldrh	r2, [r7, #6]
 8010670:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	88fa      	ldrh	r2, [r7, #6]
 8010676:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	689b      	ldr	r3, [r3, #8]
 801067c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010680:	d108      	bne.n	8010694 <HAL_UART_Transmit+0x82>
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d104      	bne.n	8010694 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801068a:	2300      	movs	r3, #0
 801068c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	61bb      	str	r3, [r7, #24]
 8010692:	e003      	b.n	801069c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010698:	2300      	movs	r3, #0
 801069a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2200      	movs	r2, #0
 80106a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80106a4:	e02a      	b.n	80106fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	2200      	movs	r2, #0
 80106ae:	2180      	movs	r1, #128	; 0x80
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f000 fcfa 	bl	80110aa <UART_WaitOnFlagUntilTimeout>
 80106b6:	4603      	mov	r3, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d001      	beq.n	80106c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80106bc:	2303      	movs	r3, #3
 80106be:	e036      	b.n	801072e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80106c0:	69fb      	ldr	r3, [r7, #28]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d10b      	bne.n	80106de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	881b      	ldrh	r3, [r3, #0]
 80106ca:	461a      	mov	r2, r3
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80106d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	3302      	adds	r3, #2
 80106da:	61bb      	str	r3, [r7, #24]
 80106dc:	e007      	b.n	80106ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	781a      	ldrb	r2, [r3, #0]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	3301      	adds	r3, #1
 80106ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	3b01      	subs	r3, #1
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010700:	b29b      	uxth	r3, r3
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1cf      	bne.n	80106a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	2200      	movs	r2, #0
 801070e:	2140      	movs	r1, #64	; 0x40
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	f000 fcca 	bl	80110aa <UART_WaitOnFlagUntilTimeout>
 8010716:	4603      	mov	r3, r0
 8010718:	2b00      	cmp	r3, #0
 801071a:	d001      	beq.n	8010720 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801071c:	2303      	movs	r3, #3
 801071e:	e006      	b.n	801072e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2220      	movs	r2, #32
 8010724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8010728:	2300      	movs	r3, #0
 801072a:	e000      	b.n	801072e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801072c:	2302      	movs	r3, #2
  }
}
 801072e:	4618      	mov	r0, r3
 8010730:	3720      	adds	r7, #32
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
	...

08010738 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b08c      	sub	sp, #48	; 0x30
 801073c:	af00      	add	r7, sp, #0
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	4613      	mov	r3, r2
 8010744:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801074c:	b2db      	uxtb	r3, r3
 801074e:	2b20      	cmp	r3, #32
 8010750:	d165      	bne.n	801081e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d002      	beq.n	801075e <HAL_UART_Transmit_DMA+0x26>
 8010758:	88fb      	ldrh	r3, [r7, #6]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d101      	bne.n	8010762 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801075e:	2301      	movs	r3, #1
 8010760:	e05e      	b.n	8010820 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010768:	2b01      	cmp	r3, #1
 801076a:	d101      	bne.n	8010770 <HAL_UART_Transmit_DMA+0x38>
 801076c:	2302      	movs	r3, #2
 801076e:	e057      	b.n	8010820 <HAL_UART_Transmit_DMA+0xe8>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2201      	movs	r2, #1
 8010774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	88fa      	ldrh	r2, [r7, #6]
 8010782:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	88fa      	ldrh	r2, [r7, #6]
 8010788:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2200      	movs	r2, #0
 801078e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2221      	movs	r2, #33	; 0x21
 8010794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801079c:	4a22      	ldr	r2, [pc, #136]	; (8010828 <HAL_UART_Transmit_DMA+0xf0>)
 801079e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107a4:	4a21      	ldr	r2, [pc, #132]	; (801082c <HAL_UART_Transmit_DMA+0xf4>)
 80107a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ac:	4a20      	ldr	r2, [pc, #128]	; (8010830 <HAL_UART_Transmit_DMA+0xf8>)
 80107ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107b4:	2200      	movs	r2, #0
 80107b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80107b8:	f107 0308 	add.w	r3, r7, #8
 80107bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80107c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c4:	6819      	ldr	r1, [r3, #0]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	3304      	adds	r3, #4
 80107cc:	461a      	mov	r2, r3
 80107ce:	88fb      	ldrh	r3, [r7, #6]
 80107d0:	f7fa f8fc 	bl	800a9cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80107dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	2200      	movs	r2, #0
 80107e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	3314      	adds	r3, #20
 80107ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	e853 3f00 	ldrex	r3, [r3]
 80107f4:	617b      	str	r3, [r7, #20]
   return(result);
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	3314      	adds	r3, #20
 8010804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010806:	627a      	str	r2, [r7, #36]	; 0x24
 8010808:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801080a:	6a39      	ldr	r1, [r7, #32]
 801080c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801080e:	e841 2300 	strex	r3, r2, [r1]
 8010812:	61fb      	str	r3, [r7, #28]
   return(result);
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1e5      	bne.n	80107e6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 801081a:	2300      	movs	r3, #0
 801081c:	e000      	b.n	8010820 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 801081e:	2302      	movs	r3, #2
  }
}
 8010820:	4618      	mov	r0, r3
 8010822:	3730      	adds	r7, #48	; 0x30
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	08010e05 	.word	0x08010e05
 801082c:	08010e9f 	.word	0x08010e9f
 8010830:	08011017 	.word	0x08011017

08010834 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b084      	sub	sp, #16
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	4613      	mov	r3, r2
 8010840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010848:	b2db      	uxtb	r3, r3
 801084a:	2b20      	cmp	r3, #32
 801084c:	d11d      	bne.n	801088a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <HAL_UART_Receive_DMA+0x26>
 8010854:	88fb      	ldrh	r3, [r7, #6]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d101      	bne.n	801085e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801085a:	2301      	movs	r3, #1
 801085c:	e016      	b.n	801088c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010864:	2b01      	cmp	r3, #1
 8010866:	d101      	bne.n	801086c <HAL_UART_Receive_DMA+0x38>
 8010868:	2302      	movs	r3, #2
 801086a:	e00f      	b.n	801088c <HAL_UART_Receive_DMA+0x58>
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2201      	movs	r2, #1
 8010870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2200      	movs	r2, #0
 8010878:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801087a:	88fb      	ldrh	r3, [r7, #6]
 801087c:	461a      	mov	r2, r3
 801087e:	68b9      	ldr	r1, [r7, #8]
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f000 fc81 	bl	8011188 <UART_Start_Receive_DMA>
 8010886:	4603      	mov	r3, r0
 8010888:	e000      	b.n	801088c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 801088a:	2302      	movs	r3, #2
  }
}
 801088c:	4618      	mov	r0, r3
 801088e:	3710      	adds	r7, #16
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b0ba      	sub	sp, #232	; 0xe8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	695b      	ldr	r3, [r3, #20]
 80108b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80108ba:	2300      	movs	r3, #0
 80108bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80108c0:	2300      	movs	r3, #0
 80108c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80108c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108ca:	f003 030f 	and.w	r3, r3, #15
 80108ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80108d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d10f      	bne.n	80108fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80108da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108de:	f003 0320 	and.w	r3, r3, #32
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d009      	beq.n	80108fa <HAL_UART_IRQHandler+0x66>
 80108e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108ea:	f003 0320 	and.w	r3, r3, #32
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d003      	beq.n	80108fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f000 fded 	bl	80114d2 <UART_Receive_IT>
      return;
 80108f8:	e256      	b.n	8010da8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80108fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 80de 	beq.w	8010ac0 <HAL_UART_IRQHandler+0x22c>
 8010904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010908:	f003 0301 	and.w	r3, r3, #1
 801090c:	2b00      	cmp	r3, #0
 801090e:	d106      	bne.n	801091e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010914:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010918:	2b00      	cmp	r3, #0
 801091a:	f000 80d1 	beq.w	8010ac0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801091e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010922:	f003 0301 	and.w	r3, r3, #1
 8010926:	2b00      	cmp	r3, #0
 8010928:	d00b      	beq.n	8010942 <HAL_UART_IRQHandler+0xae>
 801092a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801092e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010932:	2b00      	cmp	r3, #0
 8010934:	d005      	beq.n	8010942 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801093a:	f043 0201 	orr.w	r2, r3, #1
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010946:	f003 0304 	and.w	r3, r3, #4
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00b      	beq.n	8010966 <HAL_UART_IRQHandler+0xd2>
 801094e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010952:	f003 0301 	and.w	r3, r3, #1
 8010956:	2b00      	cmp	r3, #0
 8010958:	d005      	beq.n	8010966 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095e:	f043 0202 	orr.w	r2, r3, #2
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801096a:	f003 0302 	and.w	r3, r3, #2
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00b      	beq.n	801098a <HAL_UART_IRQHandler+0xf6>
 8010972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010976:	f003 0301 	and.w	r3, r3, #1
 801097a:	2b00      	cmp	r3, #0
 801097c:	d005      	beq.n	801098a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010982:	f043 0204 	orr.w	r2, r3, #4
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801098a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801098e:	f003 0308 	and.w	r3, r3, #8
 8010992:	2b00      	cmp	r3, #0
 8010994:	d011      	beq.n	80109ba <HAL_UART_IRQHandler+0x126>
 8010996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801099a:	f003 0320 	and.w	r3, r3, #32
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d105      	bne.n	80109ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80109a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109a6:	f003 0301 	and.w	r3, r3, #1
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d005      	beq.n	80109ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b2:	f043 0208 	orr.w	r2, r3, #8
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109be:	2b00      	cmp	r3, #0
 80109c0:	f000 81ed 	beq.w	8010d9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80109c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109c8:	f003 0320 	and.w	r3, r3, #32
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d008      	beq.n	80109e2 <HAL_UART_IRQHandler+0x14e>
 80109d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109d4:	f003 0320 	and.w	r3, r3, #32
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f000 fd78 	bl	80114d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	695b      	ldr	r3, [r3, #20]
 80109e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ec:	2b40      	cmp	r3, #64	; 0x40
 80109ee:	bf0c      	ite	eq
 80109f0:	2301      	moveq	r3, #1
 80109f2:	2300      	movne	r3, #0
 80109f4:	b2db      	uxtb	r3, r3
 80109f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109fe:	f003 0308 	and.w	r3, r3, #8
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d103      	bne.n	8010a0e <HAL_UART_IRQHandler+0x17a>
 8010a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d04f      	beq.n	8010aae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 fc80 	bl	8011314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	695b      	ldr	r3, [r3, #20]
 8010a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a1e:	2b40      	cmp	r3, #64	; 0x40
 8010a20:	d141      	bne.n	8010aa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	3314      	adds	r3, #20
 8010a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a30:	e853 3f00 	ldrex	r3, [r3]
 8010a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	3314      	adds	r3, #20
 8010a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010a5e:	e841 2300 	strex	r3, r2, [r1]
 8010a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d1d9      	bne.n	8010a22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d013      	beq.n	8010a9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a7a:	4a7d      	ldr	r2, [pc, #500]	; (8010c70 <HAL_UART_IRQHandler+0x3dc>)
 8010a7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fa f86a 	bl	800ab5c <HAL_DMA_Abort_IT>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d016      	beq.n	8010abc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010a98:	4610      	mov	r0, r2
 8010a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a9c:	e00e      	b.n	8010abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 f99a 	bl	8010dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010aa4:	e00a      	b.n	8010abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f000 f996 	bl	8010dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010aac:	e006      	b.n	8010abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f000 f992 	bl	8010dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010aba:	e170      	b.n	8010d9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010abc:	bf00      	nop
    return;
 8010abe:	e16e      	b.n	8010d9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	f040 814a 	bne.w	8010d5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ace:	f003 0310 	and.w	r3, r3, #16
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 8143 	beq.w	8010d5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010adc:	f003 0310 	and.w	r3, r3, #16
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f000 813c 	beq.w	8010d5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	60bb      	str	r3, [r7, #8]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	60bb      	str	r3, [r7, #8]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	685b      	ldr	r3, [r3, #4]
 8010af8:	60bb      	str	r3, [r7, #8]
 8010afa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	695b      	ldr	r3, [r3, #20]
 8010b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b06:	2b40      	cmp	r3, #64	; 0x40
 8010b08:	f040 80b4 	bne.w	8010c74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 8140 	beq.w	8010da2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	f080 8139 	bcs.w	8010da2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b3c:	69db      	ldr	r3, [r3, #28]
 8010b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b42:	f000 8088 	beq.w	8010c56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	330c      	adds	r3, #12
 8010b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b54:	e853 3f00 	ldrex	r3, [r3]
 8010b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	330c      	adds	r3, #12
 8010b6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010b7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b82:	e841 2300 	strex	r3, r2, [r1]
 8010b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1d9      	bne.n	8010b46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	3314      	adds	r3, #20
 8010b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b9c:	e853 3f00 	ldrex	r3, [r3]
 8010ba0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ba4:	f023 0301 	bic.w	r3, r3, #1
 8010ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	3314      	adds	r3, #20
 8010bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010bb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010bba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010bc2:	e841 2300 	strex	r3, r2, [r1]
 8010bc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d1e1      	bne.n	8010b92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	3314      	adds	r3, #20
 8010bd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bd8:	e853 3f00 	ldrex	r3, [r3]
 8010bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	3314      	adds	r3, #20
 8010bee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010bf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010bf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010bf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010bfa:	e841 2300 	strex	r3, r2, [r1]
 8010bfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d1e3      	bne.n	8010bce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2220      	movs	r2, #32
 8010c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	330c      	adds	r3, #12
 8010c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c1e:	e853 3f00 	ldrex	r3, [r3]
 8010c22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c26:	f023 0310 	bic.w	r3, r3, #16
 8010c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	330c      	adds	r3, #12
 8010c34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010c38:	65ba      	str	r2, [r7, #88]	; 0x58
 8010c3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c40:	e841 2300 	strex	r3, r2, [r1]
 8010c44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d1e3      	bne.n	8010c14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7f9 ff13 	bl	800aa7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	1ad3      	subs	r3, r2, r3
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	4619      	mov	r1, r3
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f000 f8c0 	bl	8010dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010c6c:	e099      	b.n	8010da2 <HAL_UART_IRQHandler+0x50e>
 8010c6e:	bf00      	nop
 8010c70:	080113db 	.word	0x080113db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	f000 808b 	beq.w	8010da6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f000 8086 	beq.w	8010da6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	330c      	adds	r3, #12
 8010ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca4:	e853 3f00 	ldrex	r3, [r3]
 8010ca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	330c      	adds	r3, #12
 8010cba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010cbe:	647a      	str	r2, [r7, #68]	; 0x44
 8010cc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cc6:	e841 2300 	strex	r3, r2, [r1]
 8010cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d1e3      	bne.n	8010c9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	3314      	adds	r3, #20
 8010cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cdc:	e853 3f00 	ldrex	r3, [r3]
 8010ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8010ce2:	6a3b      	ldr	r3, [r7, #32]
 8010ce4:	f023 0301 	bic.w	r3, r3, #1
 8010ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	3314      	adds	r3, #20
 8010cf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8010cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cfe:	e841 2300 	strex	r3, r2, [r1]
 8010d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d1e3      	bne.n	8010cd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2220      	movs	r2, #32
 8010d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2200      	movs	r2, #0
 8010d16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	330c      	adds	r3, #12
 8010d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	e853 3f00 	ldrex	r3, [r3]
 8010d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f023 0310 	bic.w	r3, r3, #16
 8010d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	330c      	adds	r3, #12
 8010d38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010d3c:	61fa      	str	r2, [r7, #28]
 8010d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d40:	69b9      	ldr	r1, [r7, #24]
 8010d42:	69fa      	ldr	r2, [r7, #28]
 8010d44:	e841 2300 	strex	r3, r2, [r1]
 8010d48:	617b      	str	r3, [r7, #20]
   return(result);
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d1e3      	bne.n	8010d18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d54:	4619      	mov	r1, r3
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 f848 	bl	8010dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010d5c:	e023      	b.n	8010da6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d009      	beq.n	8010d7e <HAL_UART_IRQHandler+0x4ea>
 8010d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d003      	beq.n	8010d7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f000 fb43 	bl	8011402 <UART_Transmit_IT>
    return;
 8010d7c:	e014      	b.n	8010da8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d00e      	beq.n	8010da8 <HAL_UART_IRQHandler+0x514>
 8010d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d008      	beq.n	8010da8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f000 fb83 	bl	80114a2 <UART_EndTransmit_IT>
    return;
 8010d9c:	e004      	b.n	8010da8 <HAL_UART_IRQHandler+0x514>
    return;
 8010d9e:	bf00      	nop
 8010da0:	e002      	b.n	8010da8 <HAL_UART_IRQHandler+0x514>
      return;
 8010da2:	bf00      	nop
 8010da4:	e000      	b.n	8010da8 <HAL_UART_IRQHandler+0x514>
      return;
 8010da6:	bf00      	nop
  }
}
 8010da8:	37e8      	adds	r7, #232	; 0xe8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop

08010db0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010db8:	bf00      	nop
 8010dba:	370c      	adds	r7, #12
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010dcc:	bf00      	nop
 8010dce:	370c      	adds	r7, #12
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr

08010dd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010dd8:	b480      	push	{r7}
 8010dda:	b083      	sub	sp, #12
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010de0:	bf00      	nop
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	460b      	mov	r3, r1
 8010df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010df8:	bf00      	nop
 8010dfa:	370c      	adds	r7, #12
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr

08010e04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b090      	sub	sp, #64	; 0x40
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d137      	bne.n	8010e90 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e22:	2200      	movs	r2, #0
 8010e24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	3314      	adds	r3, #20
 8010e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e30:	e853 3f00 	ldrex	r3, [r3]
 8010e34:	623b      	str	r3, [r7, #32]
   return(result);
 8010e36:	6a3b      	ldr	r3, [r7, #32]
 8010e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8010e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	3314      	adds	r3, #20
 8010e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e46:	633a      	str	r2, [r7, #48]	; 0x30
 8010e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e4e:	e841 2300 	strex	r3, r2, [r1]
 8010e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d1e5      	bne.n	8010e26 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	330c      	adds	r3, #12
 8010e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	e853 3f00 	ldrex	r3, [r3]
 8010e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e70:	637b      	str	r3, [r7, #52]	; 0x34
 8010e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	330c      	adds	r3, #12
 8010e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e7a:	61fa      	str	r2, [r7, #28]
 8010e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e7e:	69b9      	ldr	r1, [r7, #24]
 8010e80:	69fa      	ldr	r2, [r7, #28]
 8010e82:	e841 2300 	strex	r3, r2, [r1]
 8010e86:	617b      	str	r3, [r7, #20]
   return(result);
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d1e5      	bne.n	8010e5a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010e8e:	e002      	b.n	8010e96 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010e90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e92:	f7f1 facb 	bl	800242c <HAL_UART_TxCpltCallback>
}
 8010e96:	bf00      	nop
 8010e98:	3740      	adds	r7, #64	; 0x40
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b084      	sub	sp, #16
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eaa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f7ff ff7f 	bl	8010db0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010eb2:	bf00      	nop
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b09c      	sub	sp, #112	; 0x70
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d172      	bne.n	8010fbc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8010ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ed8:	2200      	movs	r2, #0
 8010eda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	330c      	adds	r3, #12
 8010ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ee6:	e853 3f00 	ldrex	r3, [r3]
 8010eea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	330c      	adds	r3, #12
 8010efa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010efc:	65ba      	str	r2, [r7, #88]	; 0x58
 8010efe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f04:	e841 2300 	strex	r3, r2, [r1]
 8010f08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d1e5      	bne.n	8010edc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	3314      	adds	r3, #20
 8010f16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1a:	e853 3f00 	ldrex	r3, [r3]
 8010f1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f22:	f023 0301 	bic.w	r3, r3, #1
 8010f26:	667b      	str	r3, [r7, #100]	; 0x64
 8010f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	3314      	adds	r3, #20
 8010f2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010f30:	647a      	str	r2, [r7, #68]	; 0x44
 8010f32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f38:	e841 2300 	strex	r3, r2, [r1]
 8010f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1e5      	bne.n	8010f10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	3314      	adds	r3, #20
 8010f4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4e:	e853 3f00 	ldrex	r3, [r3]
 8010f52:	623b      	str	r3, [r7, #32]
   return(result);
 8010f54:	6a3b      	ldr	r3, [r7, #32]
 8010f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8010f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	3314      	adds	r3, #20
 8010f62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010f64:	633a      	str	r2, [r7, #48]	; 0x30
 8010f66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f6c:	e841 2300 	strex	r3, r2, [r1]
 8010f70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1e5      	bne.n	8010f44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f7a:	2220      	movs	r2, #32
 8010f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d119      	bne.n	8010fbc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	330c      	adds	r3, #12
 8010f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	e853 3f00 	ldrex	r3, [r3]
 8010f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f023 0310 	bic.w	r3, r3, #16
 8010f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	330c      	adds	r3, #12
 8010fa6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010fa8:	61fa      	str	r2, [r7, #28]
 8010faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fac:	69b9      	ldr	r1, [r7, #24]
 8010fae:	69fa      	ldr	r2, [r7, #28]
 8010fb0:	e841 2300 	strex	r3, r2, [r1]
 8010fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d1e5      	bne.n	8010f88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d106      	bne.n	8010fd2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010fc8:	4619      	mov	r1, r3
 8010fca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010fcc:	f7ff ff0e 	bl	8010dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010fd0:	e002      	b.n	8010fd8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010fd2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010fd4:	f7f1 fad2 	bl	800257c <HAL_UART_RxCpltCallback>
}
 8010fd8:	bf00      	nop
 8010fda:	3770      	adds	r7, #112	; 0x70
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d108      	bne.n	8011008 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010ffa:	085b      	lsrs	r3, r3, #1
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	4619      	mov	r1, r3
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f7ff fef3 	bl	8010dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011006:	e002      	b.n	801100e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8011008:	68f8      	ldr	r0, [r7, #12]
 801100a:	f7ff fedb 	bl	8010dc4 <HAL_UART_RxHalfCpltCallback>
}
 801100e:	bf00      	nop
 8011010:	3710      	adds	r7, #16
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}

08011016 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011016:	b580      	push	{r7, lr}
 8011018:	b084      	sub	sp, #16
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801101e:	2300      	movs	r3, #0
 8011020:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011026:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	695b      	ldr	r3, [r3, #20]
 801102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011032:	2b80      	cmp	r3, #128	; 0x80
 8011034:	bf0c      	ite	eq
 8011036:	2301      	moveq	r3, #1
 8011038:	2300      	movne	r3, #0
 801103a:	b2db      	uxtb	r3, r3
 801103c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011044:	b2db      	uxtb	r3, r3
 8011046:	2b21      	cmp	r3, #33	; 0x21
 8011048:	d108      	bne.n	801105c <UART_DMAError+0x46>
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d005      	beq.n	801105c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	2200      	movs	r2, #0
 8011054:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8011056:	68b8      	ldr	r0, [r7, #8]
 8011058:	f000 f934 	bl	80112c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	695b      	ldr	r3, [r3, #20]
 8011062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011066:	2b40      	cmp	r3, #64	; 0x40
 8011068:	bf0c      	ite	eq
 801106a:	2301      	moveq	r3, #1
 801106c:	2300      	movne	r3, #0
 801106e:	b2db      	uxtb	r3, r3
 8011070:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011078:	b2db      	uxtb	r3, r3
 801107a:	2b22      	cmp	r3, #34	; 0x22
 801107c:	d108      	bne.n	8011090 <UART_DMAError+0x7a>
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d005      	beq.n	8011090 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	2200      	movs	r2, #0
 8011088:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801108a:	68b8      	ldr	r0, [r7, #8]
 801108c:	f000 f942 	bl	8011314 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011094:	f043 0210 	orr.w	r2, r3, #16
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801109c:	68b8      	ldr	r0, [r7, #8]
 801109e:	f7ff fe9b 	bl	8010dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80110a2:	bf00      	nop
 80110a4:	3710      	adds	r7, #16
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}

080110aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80110aa:	b580      	push	{r7, lr}
 80110ac:	b090      	sub	sp, #64	; 0x40
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	60f8      	str	r0, [r7, #12]
 80110b2:	60b9      	str	r1, [r7, #8]
 80110b4:	603b      	str	r3, [r7, #0]
 80110b6:	4613      	mov	r3, r2
 80110b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110ba:	e050      	b.n	801115e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110c2:	d04c      	beq.n	801115e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80110c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d007      	beq.n	80110da <UART_WaitOnFlagUntilTimeout+0x30>
 80110ca:	f7f8 fead 	bl	8009e28 <HAL_GetTick>
 80110ce:	4602      	mov	r2, r0
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	1ad3      	subs	r3, r2, r3
 80110d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d241      	bcs.n	801115e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	330c      	adds	r3, #12
 80110e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e4:	e853 3f00 	ldrex	r3, [r3]
 80110e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80110ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80110f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	330c      	adds	r3, #12
 80110f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110fa:	637a      	str	r2, [r7, #52]	; 0x34
 80110fc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011102:	e841 2300 	strex	r3, r2, [r1]
 8011106:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	2b00      	cmp	r3, #0
 801110c:	d1e5      	bne.n	80110da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	3314      	adds	r3, #20
 8011114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	e853 3f00 	ldrex	r3, [r3]
 801111c:	613b      	str	r3, [r7, #16]
   return(result);
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	f023 0301 	bic.w	r3, r3, #1
 8011124:	63bb      	str	r3, [r7, #56]	; 0x38
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	3314      	adds	r3, #20
 801112c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801112e:	623a      	str	r2, [r7, #32]
 8011130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011132:	69f9      	ldr	r1, [r7, #28]
 8011134:	6a3a      	ldr	r2, [r7, #32]
 8011136:	e841 2300 	strex	r3, r2, [r1]
 801113a:	61bb      	str	r3, [r7, #24]
   return(result);
 801113c:	69bb      	ldr	r3, [r7, #24]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d1e5      	bne.n	801110e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2220      	movs	r2, #32
 8011146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2220      	movs	r2, #32
 801114e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2200      	movs	r2, #0
 8011156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801115a:	2303      	movs	r3, #3
 801115c:	e00f      	b.n	801117e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	4013      	ands	r3, r2
 8011168:	68ba      	ldr	r2, [r7, #8]
 801116a:	429a      	cmp	r2, r3
 801116c:	bf0c      	ite	eq
 801116e:	2301      	moveq	r3, #1
 8011170:	2300      	movne	r3, #0
 8011172:	b2db      	uxtb	r3, r3
 8011174:	461a      	mov	r2, r3
 8011176:	79fb      	ldrb	r3, [r7, #7]
 8011178:	429a      	cmp	r2, r3
 801117a:	d09f      	beq.n	80110bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801117c:	2300      	movs	r3, #0
}
 801117e:	4618      	mov	r0, r3
 8011180:	3740      	adds	r7, #64	; 0x40
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
	...

08011188 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b098      	sub	sp, #96	; 0x60
 801118c:	af00      	add	r7, sp, #0
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	4613      	mov	r3, r2
 8011194:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8011196:	68ba      	ldr	r2, [r7, #8]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	88fa      	ldrh	r2, [r7, #6]
 80111a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2200      	movs	r2, #0
 80111a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	2222      	movs	r2, #34	; 0x22
 80111ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111b4:	4a40      	ldr	r2, [pc, #256]	; (80112b8 <UART_Start_Receive_DMA+0x130>)
 80111b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111bc:	4a3f      	ldr	r2, [pc, #252]	; (80112bc <UART_Start_Receive_DMA+0x134>)
 80111be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111c4:	4a3e      	ldr	r2, [pc, #248]	; (80112c0 <UART_Start_Receive_DMA+0x138>)
 80111c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111cc:	2200      	movs	r2, #0
 80111ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80111d0:	f107 0308 	add.w	r3, r7, #8
 80111d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	3304      	adds	r3, #4
 80111e0:	4619      	mov	r1, r3
 80111e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	88fb      	ldrh	r3, [r7, #6]
 80111e8:	f7f9 fbf0 	bl	800a9cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80111ec:	2300      	movs	r3, #0
 80111ee:	613b      	str	r3, [r7, #16]
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	613b      	str	r3, [r7, #16]
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	613b      	str	r3, [r7, #16]
 8011200:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2200      	movs	r2, #0
 8011206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	691b      	ldr	r3, [r3, #16]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d019      	beq.n	8011246 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	330c      	adds	r3, #12
 8011218:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801121a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801121c:	e853 3f00 	ldrex	r3, [r3]
 8011220:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011228:	65bb      	str	r3, [r7, #88]	; 0x58
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	330c      	adds	r3, #12
 8011230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011232:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011234:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011236:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801123a:	e841 2300 	strex	r3, r2, [r1]
 801123e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011242:	2b00      	cmp	r3, #0
 8011244:	d1e5      	bne.n	8011212 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	3314      	adds	r3, #20
 801124c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011250:	e853 3f00 	ldrex	r3, [r3]
 8011254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011258:	f043 0301 	orr.w	r3, r3, #1
 801125c:	657b      	str	r3, [r7, #84]	; 0x54
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	3314      	adds	r3, #20
 8011264:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011266:	63ba      	str	r2, [r7, #56]	; 0x38
 8011268:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801126a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801126c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801126e:	e841 2300 	strex	r3, r2, [r1]
 8011272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1e5      	bne.n	8011246 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	3314      	adds	r3, #20
 8011280:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	e853 3f00 	ldrex	r3, [r3]
 8011288:	617b      	str	r3, [r7, #20]
   return(result);
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011290:	653b      	str	r3, [r7, #80]	; 0x50
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	3314      	adds	r3, #20
 8011298:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801129a:	627a      	str	r2, [r7, #36]	; 0x24
 801129c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801129e:	6a39      	ldr	r1, [r7, #32]
 80112a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112a2:	e841 2300 	strex	r3, r2, [r1]
 80112a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d1e5      	bne.n	801127a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80112ae:	2300      	movs	r3, #0
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3760      	adds	r7, #96	; 0x60
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	08010ebb 	.word	0x08010ebb
 80112bc:	08010fe1 	.word	0x08010fe1
 80112c0:	08011017 	.word	0x08011017

080112c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b089      	sub	sp, #36	; 0x24
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	330c      	adds	r3, #12
 80112d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	e853 3f00 	ldrex	r3, [r3]
 80112da:	60bb      	str	r3, [r7, #8]
   return(result);
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80112e2:	61fb      	str	r3, [r7, #28]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	330c      	adds	r3, #12
 80112ea:	69fa      	ldr	r2, [r7, #28]
 80112ec:	61ba      	str	r2, [r7, #24]
 80112ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112f0:	6979      	ldr	r1, [r7, #20]
 80112f2:	69ba      	ldr	r2, [r7, #24]
 80112f4:	e841 2300 	strex	r3, r2, [r1]
 80112f8:	613b      	str	r3, [r7, #16]
   return(result);
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d1e5      	bne.n	80112cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2220      	movs	r2, #32
 8011304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8011308:	bf00      	nop
 801130a:	3724      	adds	r7, #36	; 0x24
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr

08011314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011314:	b480      	push	{r7}
 8011316:	b095      	sub	sp, #84	; 0x54
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	330c      	adds	r3, #12
 8011322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011326:	e853 3f00 	ldrex	r3, [r3]
 801132a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	330c      	adds	r3, #12
 801133a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801133c:	643a      	str	r2, [r7, #64]	; 0x40
 801133e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011344:	e841 2300 	strex	r3, r2, [r1]
 8011348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134c:	2b00      	cmp	r3, #0
 801134e:	d1e5      	bne.n	801131c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	3314      	adds	r3, #20
 8011356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011358:	6a3b      	ldr	r3, [r7, #32]
 801135a:	e853 3f00 	ldrex	r3, [r3]
 801135e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	f023 0301 	bic.w	r3, r3, #1
 8011366:	64bb      	str	r3, [r7, #72]	; 0x48
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	3314      	adds	r3, #20
 801136e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011378:	e841 2300 	strex	r3, r2, [r1]
 801137c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011380:	2b00      	cmp	r3, #0
 8011382:	d1e5      	bne.n	8011350 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011388:	2b01      	cmp	r3, #1
 801138a:	d119      	bne.n	80113c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	330c      	adds	r3, #12
 8011392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	e853 3f00 	ldrex	r3, [r3]
 801139a:	60bb      	str	r3, [r7, #8]
   return(result);
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	f023 0310 	bic.w	r3, r3, #16
 80113a2:	647b      	str	r3, [r7, #68]	; 0x44
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	330c      	adds	r3, #12
 80113aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113ac:	61ba      	str	r2, [r7, #24]
 80113ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113b0:	6979      	ldr	r1, [r7, #20]
 80113b2:	69ba      	ldr	r2, [r7, #24]
 80113b4:	e841 2300 	strex	r3, r2, [r1]
 80113b8:	613b      	str	r3, [r7, #16]
   return(result);
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d1e5      	bne.n	801138c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2220      	movs	r2, #32
 80113c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2200      	movs	r2, #0
 80113cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80113ce:	bf00      	nop
 80113d0:	3754      	adds	r7, #84	; 0x54
 80113d2:	46bd      	mov	sp, r7
 80113d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d8:	4770      	bx	lr

080113da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80113da:	b580      	push	{r7, lr}
 80113dc:	b084      	sub	sp, #16
 80113de:	af00      	add	r7, sp, #0
 80113e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2200      	movs	r2, #0
 80113ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2200      	movs	r2, #0
 80113f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80113f4:	68f8      	ldr	r0, [r7, #12]
 80113f6:	f7ff fcef 	bl	8010dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80113fa:	bf00      	nop
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011402:	b480      	push	{r7}
 8011404:	b085      	sub	sp, #20
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011410:	b2db      	uxtb	r3, r3
 8011412:	2b21      	cmp	r3, #33	; 0x21
 8011414:	d13e      	bne.n	8011494 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801141e:	d114      	bne.n	801144a <UART_Transmit_IT+0x48>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	691b      	ldr	r3, [r3, #16]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d110      	bne.n	801144a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a1b      	ldr	r3, [r3, #32]
 801142c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	461a      	mov	r2, r3
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801143c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6a1b      	ldr	r3, [r3, #32]
 8011442:	1c9a      	adds	r2, r3, #2
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	621a      	str	r2, [r3, #32]
 8011448:	e008      	b.n	801145c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6a1b      	ldr	r3, [r3, #32]
 801144e:	1c59      	adds	r1, r3, #1
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	6211      	str	r1, [r2, #32]
 8011454:	781a      	ldrb	r2, [r3, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011460:	b29b      	uxth	r3, r3
 8011462:	3b01      	subs	r3, #1
 8011464:	b29b      	uxth	r3, r3
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	4619      	mov	r1, r3
 801146a:	84d1      	strh	r1, [r2, #38]	; 0x26
 801146c:	2b00      	cmp	r3, #0
 801146e:	d10f      	bne.n	8011490 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	68da      	ldr	r2, [r3, #12]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801147e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	68da      	ldr	r2, [r3, #12]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801148e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011490:	2300      	movs	r3, #0
 8011492:	e000      	b.n	8011496 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011494:	2302      	movs	r3, #2
  }
}
 8011496:	4618      	mov	r0, r3
 8011498:	3714      	adds	r7, #20
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr

080114a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80114a2:	b580      	push	{r7, lr}
 80114a4:	b082      	sub	sp, #8
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68da      	ldr	r2, [r3, #12]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80114b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2220      	movs	r2, #32
 80114be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7f0 ffb2 	bl	800242c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80114c8:	2300      	movs	r3, #0
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3708      	adds	r7, #8
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}

080114d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80114d2:	b580      	push	{r7, lr}
 80114d4:	b08c      	sub	sp, #48	; 0x30
 80114d6:	af00      	add	r7, sp, #0
 80114d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	2b22      	cmp	r3, #34	; 0x22
 80114e4:	f040 80ab 	bne.w	801163e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	689b      	ldr	r3, [r3, #8]
 80114ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114f0:	d117      	bne.n	8011522 <UART_Receive_IT+0x50>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	691b      	ldr	r3, [r3, #16]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d113      	bne.n	8011522 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80114fa:	2300      	movs	r3, #0
 80114fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011502:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	b29b      	uxth	r3, r3
 801150c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011510:	b29a      	uxth	r2, r3
 8011512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011514:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801151a:	1c9a      	adds	r2, r3, #2
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	629a      	str	r2, [r3, #40]	; 0x28
 8011520:	e026      	b.n	8011570 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011526:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011528:	2300      	movs	r3, #0
 801152a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	689b      	ldr	r3, [r3, #8]
 8011530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011534:	d007      	beq.n	8011546 <UART_Receive_IT+0x74>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d10a      	bne.n	8011554 <UART_Receive_IT+0x82>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	691b      	ldr	r3, [r3, #16]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d106      	bne.n	8011554 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	b2da      	uxtb	r2, r3
 801154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011550:	701a      	strb	r2, [r3, #0]
 8011552:	e008      	b.n	8011566 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	b2db      	uxtb	r3, r3
 801155c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011560:	b2da      	uxtb	r2, r3
 8011562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011564:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801156a:	1c5a      	adds	r2, r3, #1
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011574:	b29b      	uxth	r3, r3
 8011576:	3b01      	subs	r3, #1
 8011578:	b29b      	uxth	r3, r3
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	4619      	mov	r1, r3
 801157e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011580:	2b00      	cmp	r3, #0
 8011582:	d15a      	bne.n	801163a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	68da      	ldr	r2, [r3, #12]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f022 0220 	bic.w	r2, r2, #32
 8011592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	68da      	ldr	r2, [r3, #12]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80115a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	695a      	ldr	r2, [r3, #20]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f022 0201 	bic.w	r2, r2, #1
 80115b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2220      	movs	r2, #32
 80115b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d135      	bne.n	8011630 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2200      	movs	r2, #0
 80115c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	330c      	adds	r3, #12
 80115d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	e853 3f00 	ldrex	r3, [r3]
 80115d8:	613b      	str	r3, [r7, #16]
   return(result);
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	f023 0310 	bic.w	r3, r3, #16
 80115e0:	627b      	str	r3, [r7, #36]	; 0x24
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	330c      	adds	r3, #12
 80115e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115ea:	623a      	str	r2, [r7, #32]
 80115ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ee:	69f9      	ldr	r1, [r7, #28]
 80115f0:	6a3a      	ldr	r2, [r7, #32]
 80115f2:	e841 2300 	strex	r3, r2, [r1]
 80115f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d1e5      	bne.n	80115ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f003 0310 	and.w	r3, r3, #16
 8011608:	2b10      	cmp	r3, #16
 801160a:	d10a      	bne.n	8011622 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801160c:	2300      	movs	r3, #0
 801160e:	60fb      	str	r3, [r7, #12]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	60fb      	str	r3, [r7, #12]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	60fb      	str	r3, [r7, #12]
 8011620:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011626:	4619      	mov	r1, r3
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7ff fbdf 	bl	8010dec <HAL_UARTEx_RxEventCallback>
 801162e:	e002      	b.n	8011636 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f7f0 ffa3 	bl	800257c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011636:	2300      	movs	r3, #0
 8011638:	e002      	b.n	8011640 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801163a:	2300      	movs	r3, #0
 801163c:	e000      	b.n	8011640 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801163e:	2302      	movs	r3, #2
  }
}
 8011640:	4618      	mov	r0, r3
 8011642:	3730      	adds	r7, #48	; 0x30
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801164c:	b0c0      	sub	sp, #256	; 0x100
 801164e:	af00      	add	r7, sp, #0
 8011650:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	691b      	ldr	r3, [r3, #16]
 801165c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011664:	68d9      	ldr	r1, [r3, #12]
 8011666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	ea40 0301 	orr.w	r3, r0, r1
 8011670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011676:	689a      	ldr	r2, [r3, #8]
 8011678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801167c:	691b      	ldr	r3, [r3, #16]
 801167e:	431a      	orrs	r2, r3
 8011680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011684:	695b      	ldr	r3, [r3, #20]
 8011686:	431a      	orrs	r2, r3
 8011688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801168c:	69db      	ldr	r3, [r3, #28]
 801168e:	4313      	orrs	r3, r2
 8011690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80116a0:	f021 010c 	bic.w	r1, r1, #12
 80116a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116a8:	681a      	ldr	r2, [r3, #0]
 80116aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80116ae:	430b      	orrs	r3, r1
 80116b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80116b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	695b      	ldr	r3, [r3, #20]
 80116ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80116be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116c2:	6999      	ldr	r1, [r3, #24]
 80116c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116c8:	681a      	ldr	r2, [r3, #0]
 80116ca:	ea40 0301 	orr.w	r3, r0, r1
 80116ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80116d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	4b8f      	ldr	r3, [pc, #572]	; (8011914 <UART_SetConfig+0x2cc>)
 80116d8:	429a      	cmp	r2, r3
 80116da:	d005      	beq.n	80116e8 <UART_SetConfig+0xa0>
 80116dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	4b8d      	ldr	r3, [pc, #564]	; (8011918 <UART_SetConfig+0x2d0>)
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d104      	bne.n	80116f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80116e8:	f7fb ff80 	bl	800d5ec <HAL_RCC_GetPCLK2Freq>
 80116ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80116f0:	e003      	b.n	80116fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80116f2:	f7fb ff67 	bl	800d5c4 <HAL_RCC_GetPCLK1Freq>
 80116f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116fe:	69db      	ldr	r3, [r3, #28]
 8011700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011704:	f040 810c 	bne.w	8011920 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801170c:	2200      	movs	r2, #0
 801170e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011712:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011716:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801171a:	4622      	mov	r2, r4
 801171c:	462b      	mov	r3, r5
 801171e:	1891      	adds	r1, r2, r2
 8011720:	65b9      	str	r1, [r7, #88]	; 0x58
 8011722:	415b      	adcs	r3, r3
 8011724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011726:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801172a:	4621      	mov	r1, r4
 801172c:	eb12 0801 	adds.w	r8, r2, r1
 8011730:	4629      	mov	r1, r5
 8011732:	eb43 0901 	adc.w	r9, r3, r1
 8011736:	f04f 0200 	mov.w	r2, #0
 801173a:	f04f 0300 	mov.w	r3, #0
 801173e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801174a:	4690      	mov	r8, r2
 801174c:	4699      	mov	r9, r3
 801174e:	4623      	mov	r3, r4
 8011750:	eb18 0303 	adds.w	r3, r8, r3
 8011754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011758:	462b      	mov	r3, r5
 801175a:	eb49 0303 	adc.w	r3, r9, r3
 801175e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	2200      	movs	r2, #0
 801176a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801176e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011776:	460b      	mov	r3, r1
 8011778:	18db      	adds	r3, r3, r3
 801177a:	653b      	str	r3, [r7, #80]	; 0x50
 801177c:	4613      	mov	r3, r2
 801177e:	eb42 0303 	adc.w	r3, r2, r3
 8011782:	657b      	str	r3, [r7, #84]	; 0x54
 8011784:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011788:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801178c:	f7ef fa66 	bl	8000c5c <__aeabi_uldivmod>
 8011790:	4602      	mov	r2, r0
 8011792:	460b      	mov	r3, r1
 8011794:	4b61      	ldr	r3, [pc, #388]	; (801191c <UART_SetConfig+0x2d4>)
 8011796:	fba3 2302 	umull	r2, r3, r3, r2
 801179a:	095b      	lsrs	r3, r3, #5
 801179c:	011c      	lsls	r4, r3, #4
 801179e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80117a2:	2200      	movs	r2, #0
 80117a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80117a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80117ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80117b0:	4642      	mov	r2, r8
 80117b2:	464b      	mov	r3, r9
 80117b4:	1891      	adds	r1, r2, r2
 80117b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80117b8:	415b      	adcs	r3, r3
 80117ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80117c0:	4641      	mov	r1, r8
 80117c2:	eb12 0a01 	adds.w	sl, r2, r1
 80117c6:	4649      	mov	r1, r9
 80117c8:	eb43 0b01 	adc.w	fp, r3, r1
 80117cc:	f04f 0200 	mov.w	r2, #0
 80117d0:	f04f 0300 	mov.w	r3, #0
 80117d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80117d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80117dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80117e0:	4692      	mov	sl, r2
 80117e2:	469b      	mov	fp, r3
 80117e4:	4643      	mov	r3, r8
 80117e6:	eb1a 0303 	adds.w	r3, sl, r3
 80117ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80117ee:	464b      	mov	r3, r9
 80117f0:	eb4b 0303 	adc.w	r3, fp, r3
 80117f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80117f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	2200      	movs	r2, #0
 8011800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011804:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011808:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801180c:	460b      	mov	r3, r1
 801180e:	18db      	adds	r3, r3, r3
 8011810:	643b      	str	r3, [r7, #64]	; 0x40
 8011812:	4613      	mov	r3, r2
 8011814:	eb42 0303 	adc.w	r3, r2, r3
 8011818:	647b      	str	r3, [r7, #68]	; 0x44
 801181a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801181e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011822:	f7ef fa1b 	bl	8000c5c <__aeabi_uldivmod>
 8011826:	4602      	mov	r2, r0
 8011828:	460b      	mov	r3, r1
 801182a:	4611      	mov	r1, r2
 801182c:	4b3b      	ldr	r3, [pc, #236]	; (801191c <UART_SetConfig+0x2d4>)
 801182e:	fba3 2301 	umull	r2, r3, r3, r1
 8011832:	095b      	lsrs	r3, r3, #5
 8011834:	2264      	movs	r2, #100	; 0x64
 8011836:	fb02 f303 	mul.w	r3, r2, r3
 801183a:	1acb      	subs	r3, r1, r3
 801183c:	00db      	lsls	r3, r3, #3
 801183e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011842:	4b36      	ldr	r3, [pc, #216]	; (801191c <UART_SetConfig+0x2d4>)
 8011844:	fba3 2302 	umull	r2, r3, r3, r2
 8011848:	095b      	lsrs	r3, r3, #5
 801184a:	005b      	lsls	r3, r3, #1
 801184c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011850:	441c      	add	r4, r3
 8011852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011856:	2200      	movs	r2, #0
 8011858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801185c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011860:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011864:	4642      	mov	r2, r8
 8011866:	464b      	mov	r3, r9
 8011868:	1891      	adds	r1, r2, r2
 801186a:	63b9      	str	r1, [r7, #56]	; 0x38
 801186c:	415b      	adcs	r3, r3
 801186e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011874:	4641      	mov	r1, r8
 8011876:	1851      	adds	r1, r2, r1
 8011878:	6339      	str	r1, [r7, #48]	; 0x30
 801187a:	4649      	mov	r1, r9
 801187c:	414b      	adcs	r3, r1
 801187e:	637b      	str	r3, [r7, #52]	; 0x34
 8011880:	f04f 0200 	mov.w	r2, #0
 8011884:	f04f 0300 	mov.w	r3, #0
 8011888:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801188c:	4659      	mov	r1, fp
 801188e:	00cb      	lsls	r3, r1, #3
 8011890:	4651      	mov	r1, sl
 8011892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011896:	4651      	mov	r1, sl
 8011898:	00ca      	lsls	r2, r1, #3
 801189a:	4610      	mov	r0, r2
 801189c:	4619      	mov	r1, r3
 801189e:	4603      	mov	r3, r0
 80118a0:	4642      	mov	r2, r8
 80118a2:	189b      	adds	r3, r3, r2
 80118a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80118a8:	464b      	mov	r3, r9
 80118aa:	460a      	mov	r2, r1
 80118ac:	eb42 0303 	adc.w	r3, r2, r3
 80118b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80118b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	2200      	movs	r2, #0
 80118bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80118c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80118c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80118c8:	460b      	mov	r3, r1
 80118ca:	18db      	adds	r3, r3, r3
 80118cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80118ce:	4613      	mov	r3, r2
 80118d0:	eb42 0303 	adc.w	r3, r2, r3
 80118d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80118da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80118de:	f7ef f9bd 	bl	8000c5c <__aeabi_uldivmod>
 80118e2:	4602      	mov	r2, r0
 80118e4:	460b      	mov	r3, r1
 80118e6:	4b0d      	ldr	r3, [pc, #52]	; (801191c <UART_SetConfig+0x2d4>)
 80118e8:	fba3 1302 	umull	r1, r3, r3, r2
 80118ec:	095b      	lsrs	r3, r3, #5
 80118ee:	2164      	movs	r1, #100	; 0x64
 80118f0:	fb01 f303 	mul.w	r3, r1, r3
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	00db      	lsls	r3, r3, #3
 80118f8:	3332      	adds	r3, #50	; 0x32
 80118fa:	4a08      	ldr	r2, [pc, #32]	; (801191c <UART_SetConfig+0x2d4>)
 80118fc:	fba2 2303 	umull	r2, r3, r2, r3
 8011900:	095b      	lsrs	r3, r3, #5
 8011902:	f003 0207 	and.w	r2, r3, #7
 8011906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4422      	add	r2, r4
 801190e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011910:	e105      	b.n	8011b1e <UART_SetConfig+0x4d6>
 8011912:	bf00      	nop
 8011914:	40011000 	.word	0x40011000
 8011918:	40011400 	.word	0x40011400
 801191c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011924:	2200      	movs	r2, #0
 8011926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801192a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801192e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011932:	4642      	mov	r2, r8
 8011934:	464b      	mov	r3, r9
 8011936:	1891      	adds	r1, r2, r2
 8011938:	6239      	str	r1, [r7, #32]
 801193a:	415b      	adcs	r3, r3
 801193c:	627b      	str	r3, [r7, #36]	; 0x24
 801193e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011942:	4641      	mov	r1, r8
 8011944:	1854      	adds	r4, r2, r1
 8011946:	4649      	mov	r1, r9
 8011948:	eb43 0501 	adc.w	r5, r3, r1
 801194c:	f04f 0200 	mov.w	r2, #0
 8011950:	f04f 0300 	mov.w	r3, #0
 8011954:	00eb      	lsls	r3, r5, #3
 8011956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801195a:	00e2      	lsls	r2, r4, #3
 801195c:	4614      	mov	r4, r2
 801195e:	461d      	mov	r5, r3
 8011960:	4643      	mov	r3, r8
 8011962:	18e3      	adds	r3, r4, r3
 8011964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011968:	464b      	mov	r3, r9
 801196a:	eb45 0303 	adc.w	r3, r5, r3
 801196e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	2200      	movs	r2, #0
 801197a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801197e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011982:	f04f 0200 	mov.w	r2, #0
 8011986:	f04f 0300 	mov.w	r3, #0
 801198a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801198e:	4629      	mov	r1, r5
 8011990:	008b      	lsls	r3, r1, #2
 8011992:	4621      	mov	r1, r4
 8011994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011998:	4621      	mov	r1, r4
 801199a:	008a      	lsls	r2, r1, #2
 801199c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80119a0:	f7ef f95c 	bl	8000c5c <__aeabi_uldivmod>
 80119a4:	4602      	mov	r2, r0
 80119a6:	460b      	mov	r3, r1
 80119a8:	4b60      	ldr	r3, [pc, #384]	; (8011b2c <UART_SetConfig+0x4e4>)
 80119aa:	fba3 2302 	umull	r2, r3, r3, r2
 80119ae:	095b      	lsrs	r3, r3, #5
 80119b0:	011c      	lsls	r4, r3, #4
 80119b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80119b6:	2200      	movs	r2, #0
 80119b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80119bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80119c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80119c4:	4642      	mov	r2, r8
 80119c6:	464b      	mov	r3, r9
 80119c8:	1891      	adds	r1, r2, r2
 80119ca:	61b9      	str	r1, [r7, #24]
 80119cc:	415b      	adcs	r3, r3
 80119ce:	61fb      	str	r3, [r7, #28]
 80119d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80119d4:	4641      	mov	r1, r8
 80119d6:	1851      	adds	r1, r2, r1
 80119d8:	6139      	str	r1, [r7, #16]
 80119da:	4649      	mov	r1, r9
 80119dc:	414b      	adcs	r3, r1
 80119de:	617b      	str	r3, [r7, #20]
 80119e0:	f04f 0200 	mov.w	r2, #0
 80119e4:	f04f 0300 	mov.w	r3, #0
 80119e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80119ec:	4659      	mov	r1, fp
 80119ee:	00cb      	lsls	r3, r1, #3
 80119f0:	4651      	mov	r1, sl
 80119f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80119f6:	4651      	mov	r1, sl
 80119f8:	00ca      	lsls	r2, r1, #3
 80119fa:	4610      	mov	r0, r2
 80119fc:	4619      	mov	r1, r3
 80119fe:	4603      	mov	r3, r0
 8011a00:	4642      	mov	r2, r8
 8011a02:	189b      	adds	r3, r3, r2
 8011a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011a08:	464b      	mov	r3, r9
 8011a0a:	460a      	mov	r2, r1
 8011a0c:	eb42 0303 	adc.w	r3, r2, r3
 8011a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8011a1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011a20:	f04f 0200 	mov.w	r2, #0
 8011a24:	f04f 0300 	mov.w	r3, #0
 8011a28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011a2c:	4649      	mov	r1, r9
 8011a2e:	008b      	lsls	r3, r1, #2
 8011a30:	4641      	mov	r1, r8
 8011a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011a36:	4641      	mov	r1, r8
 8011a38:	008a      	lsls	r2, r1, #2
 8011a3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011a3e:	f7ef f90d 	bl	8000c5c <__aeabi_uldivmod>
 8011a42:	4602      	mov	r2, r0
 8011a44:	460b      	mov	r3, r1
 8011a46:	4b39      	ldr	r3, [pc, #228]	; (8011b2c <UART_SetConfig+0x4e4>)
 8011a48:	fba3 1302 	umull	r1, r3, r3, r2
 8011a4c:	095b      	lsrs	r3, r3, #5
 8011a4e:	2164      	movs	r1, #100	; 0x64
 8011a50:	fb01 f303 	mul.w	r3, r1, r3
 8011a54:	1ad3      	subs	r3, r2, r3
 8011a56:	011b      	lsls	r3, r3, #4
 8011a58:	3332      	adds	r3, #50	; 0x32
 8011a5a:	4a34      	ldr	r2, [pc, #208]	; (8011b2c <UART_SetConfig+0x4e4>)
 8011a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8011a60:	095b      	lsrs	r3, r3, #5
 8011a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a66:	441c      	add	r4, r3
 8011a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	673b      	str	r3, [r7, #112]	; 0x70
 8011a70:	677a      	str	r2, [r7, #116]	; 0x74
 8011a72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011a76:	4642      	mov	r2, r8
 8011a78:	464b      	mov	r3, r9
 8011a7a:	1891      	adds	r1, r2, r2
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	415b      	adcs	r3, r3
 8011a80:	60fb      	str	r3, [r7, #12]
 8011a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011a86:	4641      	mov	r1, r8
 8011a88:	1851      	adds	r1, r2, r1
 8011a8a:	6039      	str	r1, [r7, #0]
 8011a8c:	4649      	mov	r1, r9
 8011a8e:	414b      	adcs	r3, r1
 8011a90:	607b      	str	r3, [r7, #4]
 8011a92:	f04f 0200 	mov.w	r2, #0
 8011a96:	f04f 0300 	mov.w	r3, #0
 8011a9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011a9e:	4659      	mov	r1, fp
 8011aa0:	00cb      	lsls	r3, r1, #3
 8011aa2:	4651      	mov	r1, sl
 8011aa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011aa8:	4651      	mov	r1, sl
 8011aaa:	00ca      	lsls	r2, r1, #3
 8011aac:	4610      	mov	r0, r2
 8011aae:	4619      	mov	r1, r3
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	4642      	mov	r2, r8
 8011ab4:	189b      	adds	r3, r3, r2
 8011ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8011ab8:	464b      	mov	r3, r9
 8011aba:	460a      	mov	r2, r1
 8011abc:	eb42 0303 	adc.w	r3, r2, r3
 8011ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	663b      	str	r3, [r7, #96]	; 0x60
 8011acc:	667a      	str	r2, [r7, #100]	; 0x64
 8011ace:	f04f 0200 	mov.w	r2, #0
 8011ad2:	f04f 0300 	mov.w	r3, #0
 8011ad6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8011ada:	4649      	mov	r1, r9
 8011adc:	008b      	lsls	r3, r1, #2
 8011ade:	4641      	mov	r1, r8
 8011ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011ae4:	4641      	mov	r1, r8
 8011ae6:	008a      	lsls	r2, r1, #2
 8011ae8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011aec:	f7ef f8b6 	bl	8000c5c <__aeabi_uldivmod>
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	4b0d      	ldr	r3, [pc, #52]	; (8011b2c <UART_SetConfig+0x4e4>)
 8011af6:	fba3 1302 	umull	r1, r3, r3, r2
 8011afa:	095b      	lsrs	r3, r3, #5
 8011afc:	2164      	movs	r1, #100	; 0x64
 8011afe:	fb01 f303 	mul.w	r3, r1, r3
 8011b02:	1ad3      	subs	r3, r2, r3
 8011b04:	011b      	lsls	r3, r3, #4
 8011b06:	3332      	adds	r3, #50	; 0x32
 8011b08:	4a08      	ldr	r2, [pc, #32]	; (8011b2c <UART_SetConfig+0x4e4>)
 8011b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b0e:	095b      	lsrs	r3, r3, #5
 8011b10:	f003 020f 	and.w	r2, r3, #15
 8011b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4422      	add	r2, r4
 8011b1c:	609a      	str	r2, [r3, #8]
}
 8011b1e:	bf00      	nop
 8011b20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011b24:	46bd      	mov	sp, r7
 8011b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b2a:	bf00      	nop
 8011b2c:	51eb851f 	.word	0x51eb851f

08011b30 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011b30:	b084      	sub	sp, #16
 8011b32:	b480      	push	{r7}
 8011b34:	b085      	sub	sp, #20
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
 8011b3a:	f107 001c 	add.w	r0, r7, #28
 8011b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011b42:	2300      	movs	r3, #0
 8011b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011b46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011b48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011b4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011b4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011b52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8011b56:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011b5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011b5c:	68fa      	ldr	r2, [r7, #12]
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011b6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	431a      	orrs	r2, r3
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011b76:	2300      	movs	r3, #0
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3714      	adds	r7, #20
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	b004      	add	sp, #16
 8011b84:	4770      	bx	lr

08011b86 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8011b86:	b480      	push	{r7}
 8011b88:	b083      	sub	sp, #12
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	370c      	adds	r7, #12
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr

08011ba0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011bb4:	2300      	movs	r3, #0
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	370c      	adds	r7, #12
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr

08011bc2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8011bc2:	b480      	push	{r7}
 8011bc4:	b083      	sub	sp, #12
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2203      	movs	r2, #3
 8011bce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011bd0:	2300      	movs	r3, #0
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	370c      	adds	r7, #12
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr

08011bde <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8011bde:	b480      	push	{r7}
 8011be0:	b083      	sub	sp, #12
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f003 0303 	and.w	r3, r3, #3
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	370c      	adds	r7, #12
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8011bfa:	b480      	push	{r7}
 8011bfc:	b085      	sub	sp, #20
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c04:	2300      	movs	r3, #0
 8011c06:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011c18:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011c1e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011c24:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011c26:	68fa      	ldr	r2, [r7, #12]
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	68db      	ldr	r3, [r3, #12]
 8011c30:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011c34:	f023 030f 	bic.w	r3, r3, #15
 8011c38:	68fa      	ldr	r2, [r7, #12]
 8011c3a:	431a      	orrs	r2, r3
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011c40:	2300      	movs	r3, #0
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3714      	adds	r7, #20
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr

08011c4e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011c4e:	b480      	push	{r7}
 8011c50:	b083      	sub	sp, #12
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	691b      	ldr	r3, [r3, #16]
 8011c5a:	b2db      	uxtb	r3, r3
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	3314      	adds	r3, #20
 8011c76:	461a      	mov	r2, r3
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	4413      	add	r3, r2
 8011c7c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
}  
 8011c82:	4618      	mov	r0, r3
 8011c84:	3714      	adds	r7, #20
 8011c86:	46bd      	mov	sp, r7
 8011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8c:	4770      	bx	lr

08011c8e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8011c8e:	b480      	push	{r7}
 8011c90:	b085      	sub	sp, #20
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
 8011c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	681a      	ldr	r2, [r3, #0]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	685a      	ldr	r2, [r3, #4]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011cb4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011cba:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011cc0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ccc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	431a      	orrs	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011cd8:	2300      	movs	r3, #0

}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3714      	adds	r7, #20
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr

08011ce6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b088      	sub	sp, #32
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011cf4:	2310      	movs	r3, #16
 8011cf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011cf8:	2340      	movs	r3, #64	; 0x40
 8011cfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011d06:	f107 0308 	add.w	r3, r7, #8
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f7ff ff74 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8011d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d16:	2110      	movs	r1, #16
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 fa19 	bl	8012150 <SDMMC_GetCmdResp1>
 8011d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d20:	69fb      	ldr	r3, [r7, #28]
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3720      	adds	r7, #32
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	b088      	sub	sp, #32
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
 8011d32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011d38:	2311      	movs	r3, #17
 8011d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011d3c:	2340      	movs	r3, #64	; 0x40
 8011d3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011d40:	2300      	movs	r3, #0
 8011d42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011d4a:	f107 0308 	add.w	r3, r7, #8
 8011d4e:	4619      	mov	r1, r3
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f7ff ff52 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d5a:	2111      	movs	r1, #17
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 f9f7 	bl	8012150 <SDMMC_GetCmdResp1>
 8011d62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d64:	69fb      	ldr	r3, [r7, #28]
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3720      	adds	r7, #32
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}

08011d6e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b088      	sub	sp, #32
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
 8011d76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011d7c:	2312      	movs	r3, #18
 8011d7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011d80:	2340      	movs	r3, #64	; 0x40
 8011d82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011d84:	2300      	movs	r3, #0
 8011d86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011d8e:	f107 0308 	add.w	r3, r7, #8
 8011d92:	4619      	mov	r1, r3
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f7ff ff30 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d9e:	2112      	movs	r1, #18
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f000 f9d5 	bl	8012150 <SDMMC_GetCmdResp1>
 8011da6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011da8:	69fb      	ldr	r3, [r7, #28]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3720      	adds	r7, #32
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}

08011db2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011db2:	b580      	push	{r7, lr}
 8011db4:	b088      	sub	sp, #32
 8011db6:	af00      	add	r7, sp, #0
 8011db8:	6078      	str	r0, [r7, #4]
 8011dba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011dc0:	2318      	movs	r3, #24
 8011dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011dc4:	2340      	movs	r3, #64	; 0x40
 8011dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011dd2:	f107 0308 	add.w	r3, r7, #8
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7ff ff0e 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8011de2:	2118      	movs	r1, #24
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f000 f9b3 	bl	8012150 <SDMMC_GetCmdResp1>
 8011dea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dec:	69fb      	ldr	r3, [r7, #28]
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3720      	adds	r7, #32
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}

08011df6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b088      	sub	sp, #32
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011e04:	2319      	movs	r3, #25
 8011e06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011e08:	2340      	movs	r3, #64	; 0x40
 8011e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011e16:	f107 0308 	add.w	r3, r7, #8
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f7ff feec 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e26:	2119      	movs	r1, #25
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f000 f991 	bl	8012150 <SDMMC_GetCmdResp1>
 8011e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e30:	69fb      	ldr	r3, [r7, #28]
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3720      	adds	r7, #32
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
	...

08011e3c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b088      	sub	sp, #32
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011e44:	2300      	movs	r3, #0
 8011e46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011e48:	230c      	movs	r3, #12
 8011e4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011e4c:	2340      	movs	r3, #64	; 0x40
 8011e4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011e50:	2300      	movs	r3, #0
 8011e52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011e5a:	f107 0308 	add.w	r3, r7, #8
 8011e5e:	4619      	mov	r1, r3
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff feca 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8011e66:	4a05      	ldr	r2, [pc, #20]	; (8011e7c <SDMMC_CmdStopTransfer+0x40>)
 8011e68:	210c      	movs	r1, #12
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 f970 	bl	8012150 <SDMMC_GetCmdResp1>
 8011e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e72:	69fb      	ldr	r3, [r7, #28]
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3720      	adds	r7, #32
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	05f5e100 	.word	0x05f5e100

08011e80 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b08a      	sub	sp, #40	; 0x28
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011e90:	2307      	movs	r3, #7
 8011e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011e94:	2340      	movs	r3, #64	; 0x40
 8011e96:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ea0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ea2:	f107 0310 	add.w	r3, r7, #16
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	68f8      	ldr	r0, [r7, #12]
 8011eaa:	f7ff fea6 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8011eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eb2:	2107      	movs	r1, #7
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	f000 f94b 	bl	8012150 <SDMMC_GetCmdResp1>
 8011eba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3728      	adds	r7, #40	; 0x28
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}

08011ec6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b088      	sub	sp, #32
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011eda:	2300      	movs	r3, #0
 8011edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ee4:	f107 0308 	add.w	r3, r7, #8
 8011ee8:	4619      	mov	r1, r3
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f7ff fe85 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 fb65 	bl	80125c0 <SDMMC_GetCmdError>
 8011ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ef8:	69fb      	ldr	r3, [r7, #28]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3720      	adds	r7, #32
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b088      	sub	sp, #32
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011f0a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011f10:	2308      	movs	r3, #8
 8011f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f14:	2340      	movs	r3, #64	; 0x40
 8011f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f22:	f107 0308 	add.w	r3, r7, #8
 8011f26:	4619      	mov	r1, r3
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f7ff fe66 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 faf8 	bl	8012524 <SDMMC_GetCmdResp7>
 8011f34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f36:	69fb      	ldr	r3, [r7, #28]
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3720      	adds	r7, #32
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b088      	sub	sp, #32
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011f4e:	2337      	movs	r3, #55	; 0x37
 8011f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f52:	2340      	movs	r3, #64	; 0x40
 8011f54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f56:	2300      	movs	r3, #0
 8011f58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f60:	f107 0308 	add.w	r3, r7, #8
 8011f64:	4619      	mov	r1, r3
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f7ff fe47 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8011f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f70:	2137      	movs	r1, #55	; 0x37
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f000 f8ec 	bl	8012150 <SDMMC_GetCmdResp1>
 8011f78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f7a:	69fb      	ldr	r3, [r7, #28]
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3720      	adds	r7, #32
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b088      	sub	sp, #32
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011f9a:	2329      	movs	r3, #41	; 0x29
 8011f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f9e:	2340      	movs	r3, #64	; 0x40
 8011fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011faa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fac:	f107 0308 	add.w	r3, r7, #8
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f7ff fe21 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f000 f9ff 	bl	80123bc <SDMMC_GetCmdResp3>
 8011fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fc0:	69fb      	ldr	r3, [r7, #28]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3720      	adds	r7, #32
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b088      	sub	sp, #32
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
 8011fd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011fd8:	2306      	movs	r3, #6
 8011fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011fdc:	2340      	movs	r3, #64	; 0x40
 8011fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fea:	f107 0308 	add.w	r3, r7, #8
 8011fee:	4619      	mov	r1, r3
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7ff fe02 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8011ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ffa:	2106      	movs	r1, #6
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f000 f8a7 	bl	8012150 <SDMMC_GetCmdResp1>
 8012002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012004:	69fb      	ldr	r3, [r7, #28]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3720      	adds	r7, #32
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}

0801200e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801200e:	b580      	push	{r7, lr}
 8012010:	b088      	sub	sp, #32
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012016:	2300      	movs	r3, #0
 8012018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801201a:	2333      	movs	r3, #51	; 0x33
 801201c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801201e:	2340      	movs	r3, #64	; 0x40
 8012020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012022:	2300      	movs	r3, #0
 8012024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801202a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801202c:	f107 0308 	add.w	r3, r7, #8
 8012030:	4619      	mov	r1, r3
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7ff fde1 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8012038:	f241 3288 	movw	r2, #5000	; 0x1388
 801203c:	2133      	movs	r1, #51	; 0x33
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f000 f886 	bl	8012150 <SDMMC_GetCmdResp1>
 8012044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012046:	69fb      	ldr	r3, [r7, #28]
}
 8012048:	4618      	mov	r0, r3
 801204a:	3720      	adds	r7, #32
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b088      	sub	sp, #32
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012058:	2300      	movs	r3, #0
 801205a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801205c:	2302      	movs	r3, #2
 801205e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012060:	23c0      	movs	r3, #192	; 0xc0
 8012062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012064:	2300      	movs	r3, #0
 8012066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801206c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801206e:	f107 0308 	add.w	r3, r7, #8
 8012072:	4619      	mov	r1, r3
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7ff fdc0 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 f956 	bl	801232c <SDMMC_GetCmdResp2>
 8012080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012082:	69fb      	ldr	r3, [r7, #28]
}
 8012084:	4618      	mov	r0, r3
 8012086:	3720      	adds	r7, #32
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b088      	sub	sp, #32
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801209a:	2309      	movs	r3, #9
 801209c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801209e:	23c0      	movs	r3, #192	; 0xc0
 80120a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120a2:	2300      	movs	r3, #0
 80120a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80120a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120ac:	f107 0308 	add.w	r3, r7, #8
 80120b0:	4619      	mov	r1, r3
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f7ff fda1 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 f937 	bl	801232c <SDMMC_GetCmdResp2>
 80120be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120c0:	69fb      	ldr	r3, [r7, #28]
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	3720      	adds	r7, #32
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}

080120ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80120ca:	b580      	push	{r7, lr}
 80120cc:	b088      	sub	sp, #32
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
 80120d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80120d4:	2300      	movs	r3, #0
 80120d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80120d8:	2303      	movs	r3, #3
 80120da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80120dc:	2340      	movs	r3, #64	; 0x40
 80120de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120e0:	2300      	movs	r3, #0
 80120e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80120e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120ea:	f107 0308 	add.w	r3, r7, #8
 80120ee:	4619      	mov	r1, r3
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f7ff fd82 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	2103      	movs	r1, #3
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f000 f99c 	bl	8012438 <SDMMC_GetCmdResp6>
 8012100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012102:	69fb      	ldr	r3, [r7, #28]
}
 8012104:	4618      	mov	r0, r3
 8012106:	3720      	adds	r7, #32
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b088      	sub	sp, #32
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801211a:	230d      	movs	r3, #13
 801211c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801211e:	2340      	movs	r3, #64	; 0x40
 8012120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012122:	2300      	movs	r3, #0
 8012124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801212a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801212c:	f107 0308 	add.w	r3, r7, #8
 8012130:	4619      	mov	r1, r3
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f7ff fd61 	bl	8011bfa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8012138:	f241 3288 	movw	r2, #5000	; 0x1388
 801213c:	210d      	movs	r1, #13
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f000 f806 	bl	8012150 <SDMMC_GetCmdResp1>
 8012144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012146:	69fb      	ldr	r3, [r7, #28]
}
 8012148:	4618      	mov	r0, r3
 801214a:	3720      	adds	r7, #32
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b088      	sub	sp, #32
 8012154:	af00      	add	r7, sp, #0
 8012156:	60f8      	str	r0, [r7, #12]
 8012158:	460b      	mov	r3, r1
 801215a:	607a      	str	r2, [r7, #4]
 801215c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801215e:	4b70      	ldr	r3, [pc, #448]	; (8012320 <SDMMC_GetCmdResp1+0x1d0>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	4a70      	ldr	r2, [pc, #448]	; (8012324 <SDMMC_GetCmdResp1+0x1d4>)
 8012164:	fba2 2303 	umull	r2, r3, r2, r3
 8012168:	0a5a      	lsrs	r2, r3, #9
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	fb02 f303 	mul.w	r3, r2, r3
 8012170:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	1e5a      	subs	r2, r3, #1
 8012176:	61fa      	str	r2, [r7, #28]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d102      	bne.n	8012182 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801217c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012180:	e0c9      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012186:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012188:	69bb      	ldr	r3, [r7, #24]
 801218a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801218e:	2b00      	cmp	r3, #0
 8012190:	d0ef      	beq.n	8012172 <SDMMC_GetCmdResp1+0x22>
 8012192:	69bb      	ldr	r3, [r7, #24]
 8012194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012198:	2b00      	cmp	r3, #0
 801219a:	d1ea      	bne.n	8012172 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121a0:	f003 0304 	and.w	r3, r3, #4
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d004      	beq.n	80121b2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2204      	movs	r2, #4
 80121ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80121ae:	2304      	movs	r3, #4
 80121b0:	e0b1      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121b6:	f003 0301 	and.w	r3, r3, #1
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d004      	beq.n	80121c8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2201      	movs	r2, #1
 80121c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80121c4:	2301      	movs	r3, #1
 80121c6:	e0a6      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	22c5      	movs	r2, #197	; 0xc5
 80121cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80121ce:	68f8      	ldr	r0, [r7, #12]
 80121d0:	f7ff fd3d 	bl	8011c4e <SDIO_GetCommandResponse>
 80121d4:	4603      	mov	r3, r0
 80121d6:	461a      	mov	r2, r3
 80121d8:	7afb      	ldrb	r3, [r7, #11]
 80121da:	4293      	cmp	r3, r2
 80121dc:	d001      	beq.n	80121e2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80121de:	2301      	movs	r3, #1
 80121e0:	e099      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80121e2:	2100      	movs	r1, #0
 80121e4:	68f8      	ldr	r0, [r7, #12]
 80121e6:	f7ff fd3f 	bl	8011c68 <SDIO_GetResponse>
 80121ea:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80121ec:	697a      	ldr	r2, [r7, #20]
 80121ee:	4b4e      	ldr	r3, [pc, #312]	; (8012328 <SDMMC_GetCmdResp1+0x1d8>)
 80121f0:	4013      	ands	r3, r2
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d101      	bne.n	80121fa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80121f6:	2300      	movs	r3, #0
 80121f8:	e08d      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	da02      	bge.n	8012206 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012204:	e087      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801220c:	2b00      	cmp	r3, #0
 801220e:	d001      	beq.n	8012214 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012210:	2340      	movs	r3, #64	; 0x40
 8012212:	e080      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801221e:	2380      	movs	r3, #128	; 0x80
 8012220:	e079      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012228:	2b00      	cmp	r3, #0
 801222a:	d002      	beq.n	8012232 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801222c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012230:	e071      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012238:	2b00      	cmp	r3, #0
 801223a:	d002      	beq.n	8012242 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801223c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012240:	e069      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012248:	2b00      	cmp	r3, #0
 801224a:	d002      	beq.n	8012252 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801224c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012250:	e061      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012258:	2b00      	cmp	r3, #0
 801225a:	d002      	beq.n	8012262 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801225c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012260:	e059      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012268:	2b00      	cmp	r3, #0
 801226a:	d002      	beq.n	8012272 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801226c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012270:	e051      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012278:	2b00      	cmp	r3, #0
 801227a:	d002      	beq.n	8012282 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801227c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012280:	e049      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012288:	2b00      	cmp	r3, #0
 801228a:	d002      	beq.n	8012292 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801228c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012290:	e041      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012298:	2b00      	cmp	r3, #0
 801229a:	d002      	beq.n	80122a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801229c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122a0:	e039      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d002      	beq.n	80122b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80122ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80122b0:	e031      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d002      	beq.n	80122c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80122bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80122c0:	e029      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d002      	beq.n	80122d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80122cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80122d0:	e021      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d002      	beq.n	80122e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80122dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80122e0:	e019      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d002      	beq.n	80122f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80122ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80122f0:	e011      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d002      	beq.n	8012302 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80122fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012300:	e009      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	f003 0308 	and.w	r3, r3, #8
 8012308:	2b00      	cmp	r3, #0
 801230a:	d002      	beq.n	8012312 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801230c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012310:	e001      	b.n	8012316 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012316:	4618      	mov	r0, r3
 8012318:	3720      	adds	r7, #32
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
 801231e:	bf00      	nop
 8012320:	20000004 	.word	0x20000004
 8012324:	10624dd3 	.word	0x10624dd3
 8012328:	fdffe008 	.word	0xfdffe008

0801232c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 801232c:	b480      	push	{r7}
 801232e:	b085      	sub	sp, #20
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012334:	4b1f      	ldr	r3, [pc, #124]	; (80123b4 <SDMMC_GetCmdResp2+0x88>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4a1f      	ldr	r2, [pc, #124]	; (80123b8 <SDMMC_GetCmdResp2+0x8c>)
 801233a:	fba2 2303 	umull	r2, r3, r2, r3
 801233e:	0a5b      	lsrs	r3, r3, #9
 8012340:	f241 3288 	movw	r2, #5000	; 0x1388
 8012344:	fb02 f303 	mul.w	r3, r2, r3
 8012348:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	1e5a      	subs	r2, r3, #1
 801234e:	60fa      	str	r2, [r7, #12]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d102      	bne.n	801235a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012358:	e026      	b.n	80123a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801235e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012366:	2b00      	cmp	r3, #0
 8012368:	d0ef      	beq.n	801234a <SDMMC_GetCmdResp2+0x1e>
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012370:	2b00      	cmp	r3, #0
 8012372:	d1ea      	bne.n	801234a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012378:	f003 0304 	and.w	r3, r3, #4
 801237c:	2b00      	cmp	r3, #0
 801237e:	d004      	beq.n	801238a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2204      	movs	r2, #4
 8012384:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012386:	2304      	movs	r3, #4
 8012388:	e00e      	b.n	80123a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801238e:	f003 0301 	and.w	r3, r3, #1
 8012392:	2b00      	cmp	r3, #0
 8012394:	d004      	beq.n	80123a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2201      	movs	r2, #1
 801239a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801239c:	2301      	movs	r3, #1
 801239e:	e003      	b.n	80123a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	22c5      	movs	r2, #197	; 0xc5
 80123a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80123a6:	2300      	movs	r3, #0
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3714      	adds	r7, #20
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr
 80123b4:	20000004 	.word	0x20000004
 80123b8:	10624dd3 	.word	0x10624dd3

080123bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80123bc:	b480      	push	{r7}
 80123be:	b085      	sub	sp, #20
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80123c4:	4b1a      	ldr	r3, [pc, #104]	; (8012430 <SDMMC_GetCmdResp3+0x74>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	4a1a      	ldr	r2, [pc, #104]	; (8012434 <SDMMC_GetCmdResp3+0x78>)
 80123ca:	fba2 2303 	umull	r2, r3, r2, r3
 80123ce:	0a5b      	lsrs	r3, r3, #9
 80123d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80123d4:	fb02 f303 	mul.w	r3, r2, r3
 80123d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	1e5a      	subs	r2, r3, #1
 80123de:	60fa      	str	r2, [r7, #12]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d102      	bne.n	80123ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80123e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80123e8:	e01b      	b.n	8012422 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d0ef      	beq.n	80123da <SDMMC_GetCmdResp3+0x1e>
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012400:	2b00      	cmp	r3, #0
 8012402:	d1ea      	bne.n	80123da <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012408:	f003 0304 	and.w	r3, r3, #4
 801240c:	2b00      	cmp	r3, #0
 801240e:	d004      	beq.n	801241a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2204      	movs	r2, #4
 8012414:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012416:	2304      	movs	r3, #4
 8012418:	e003      	b.n	8012422 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	22c5      	movs	r2, #197	; 0xc5
 801241e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012420:	2300      	movs	r3, #0
}
 8012422:	4618      	mov	r0, r3
 8012424:	3714      	adds	r7, #20
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr
 801242e:	bf00      	nop
 8012430:	20000004 	.word	0x20000004
 8012434:	10624dd3 	.word	0x10624dd3

08012438 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b088      	sub	sp, #32
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	460b      	mov	r3, r1
 8012442:	607a      	str	r2, [r7, #4]
 8012444:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012446:	4b35      	ldr	r3, [pc, #212]	; (801251c <SDMMC_GetCmdResp6+0xe4>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	4a35      	ldr	r2, [pc, #212]	; (8012520 <SDMMC_GetCmdResp6+0xe8>)
 801244c:	fba2 2303 	umull	r2, r3, r2, r3
 8012450:	0a5b      	lsrs	r3, r3, #9
 8012452:	f241 3288 	movw	r2, #5000	; 0x1388
 8012456:	fb02 f303 	mul.w	r3, r2, r3
 801245a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	1e5a      	subs	r2, r3, #1
 8012460:	61fa      	str	r2, [r7, #28]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d102      	bne.n	801246c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012466:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801246a:	e052      	b.n	8012512 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012470:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012478:	2b00      	cmp	r3, #0
 801247a:	d0ef      	beq.n	801245c <SDMMC_GetCmdResp6+0x24>
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012482:	2b00      	cmp	r3, #0
 8012484:	d1ea      	bne.n	801245c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801248a:	f003 0304 	and.w	r3, r3, #4
 801248e:	2b00      	cmp	r3, #0
 8012490:	d004      	beq.n	801249c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2204      	movs	r2, #4
 8012496:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012498:	2304      	movs	r3, #4
 801249a:	e03a      	b.n	8012512 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124a0:	f003 0301 	and.w	r3, r3, #1
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d004      	beq.n	80124b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2201      	movs	r2, #1
 80124ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124ae:	2301      	movs	r3, #1
 80124b0:	e02f      	b.n	8012512 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80124b2:	68f8      	ldr	r0, [r7, #12]
 80124b4:	f7ff fbcb 	bl	8011c4e <SDIO_GetCommandResponse>
 80124b8:	4603      	mov	r3, r0
 80124ba:	461a      	mov	r2, r3
 80124bc:	7afb      	ldrb	r3, [r7, #11]
 80124be:	4293      	cmp	r3, r2
 80124c0:	d001      	beq.n	80124c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124c2:	2301      	movs	r3, #1
 80124c4:	e025      	b.n	8012512 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	22c5      	movs	r2, #197	; 0xc5
 80124ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80124cc:	2100      	movs	r1, #0
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f7ff fbca 	bl	8011c68 <SDIO_GetResponse>
 80124d4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d106      	bne.n	80124ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	0c1b      	lsrs	r3, r3, #16
 80124e4:	b29a      	uxth	r2, r3
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80124ea:	2300      	movs	r3, #0
 80124ec:	e011      	b.n	8012512 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d002      	beq.n	80124fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80124f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80124fc:	e009      	b.n	8012512 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801250c:	e001      	b.n	8012512 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801250e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012512:	4618      	mov	r0, r3
 8012514:	3720      	adds	r7, #32
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	20000004 	.word	0x20000004
 8012520:	10624dd3 	.word	0x10624dd3

08012524 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8012524:	b480      	push	{r7}
 8012526:	b085      	sub	sp, #20
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801252c:	4b22      	ldr	r3, [pc, #136]	; (80125b8 <SDMMC_GetCmdResp7+0x94>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	4a22      	ldr	r2, [pc, #136]	; (80125bc <SDMMC_GetCmdResp7+0x98>)
 8012532:	fba2 2303 	umull	r2, r3, r2, r3
 8012536:	0a5b      	lsrs	r3, r3, #9
 8012538:	f241 3288 	movw	r2, #5000	; 0x1388
 801253c:	fb02 f303 	mul.w	r3, r2, r3
 8012540:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	1e5a      	subs	r2, r3, #1
 8012546:	60fa      	str	r2, [r7, #12]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d102      	bne.n	8012552 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801254c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012550:	e02c      	b.n	80125ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012556:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801255e:	2b00      	cmp	r3, #0
 8012560:	d0ef      	beq.n	8012542 <SDMMC_GetCmdResp7+0x1e>
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012568:	2b00      	cmp	r3, #0
 801256a:	d1ea      	bne.n	8012542 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012570:	f003 0304 	and.w	r3, r3, #4
 8012574:	2b00      	cmp	r3, #0
 8012576:	d004      	beq.n	8012582 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2204      	movs	r2, #4
 801257c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801257e:	2304      	movs	r3, #4
 8012580:	e014      	b.n	80125ac <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012586:	f003 0301 	and.w	r3, r3, #1
 801258a:	2b00      	cmp	r3, #0
 801258c:	d004      	beq.n	8012598 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2201      	movs	r2, #1
 8012592:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012594:	2301      	movs	r3, #1
 8012596:	e009      	b.n	80125ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d002      	beq.n	80125aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2240      	movs	r2, #64	; 0x40
 80125a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80125aa:	2300      	movs	r3, #0
  
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3714      	adds	r7, #20
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr
 80125b8:	20000004 	.word	0x20000004
 80125bc:	10624dd3 	.word	0x10624dd3

080125c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80125c8:	4b11      	ldr	r3, [pc, #68]	; (8012610 <SDMMC_GetCmdError+0x50>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	4a11      	ldr	r2, [pc, #68]	; (8012614 <SDMMC_GetCmdError+0x54>)
 80125ce:	fba2 2303 	umull	r2, r3, r2, r3
 80125d2:	0a5b      	lsrs	r3, r3, #9
 80125d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80125d8:	fb02 f303 	mul.w	r3, r2, r3
 80125dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	1e5a      	subs	r2, r3, #1
 80125e2:	60fa      	str	r2, [r7, #12]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d102      	bne.n	80125ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125ec:	e009      	b.n	8012602 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d0f1      	beq.n	80125de <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	22c5      	movs	r2, #197	; 0xc5
 80125fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012600:	2300      	movs	r3, #0
}
 8012602:	4618      	mov	r0, r3
 8012604:	3714      	adds	r7, #20
 8012606:	46bd      	mov	sp, r7
 8012608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260c:	4770      	bx	lr
 801260e:	bf00      	nop
 8012610:	20000004 	.word	0x20000004
 8012614:	10624dd3 	.word	0x10624dd3

08012618 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012618:	b084      	sub	sp, #16
 801261a:	b580      	push	{r7, lr}
 801261c:	b084      	sub	sp, #16
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]
 8012622:	f107 001c 	add.w	r0, r7, #28
 8012626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262c:	2b01      	cmp	r3, #1
 801262e:	d122      	bne.n	8012676 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8012644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	68db      	ldr	r3, [r3, #12]
 8012650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801265a:	2b01      	cmp	r3, #1
 801265c:	d105      	bne.n	801266a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	68db      	ldr	r3, [r3, #12]
 8012662:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f001 fbee 	bl	8013e4c <USB_CoreReset>
 8012670:	4603      	mov	r3, r0
 8012672:	73fb      	strb	r3, [r7, #15]
 8012674:	e01a      	b.n	80126ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f001 fbe2 	bl	8013e4c <USB_CoreReset>
 8012688:	4603      	mov	r3, r0
 801268a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801268e:	2b00      	cmp	r3, #0
 8012690:	d106      	bne.n	80126a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	639a      	str	r2, [r3, #56]	; 0x38
 801269e:	e005      	b.n	80126ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80126ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	d10b      	bne.n	80126ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	689b      	ldr	r3, [r3, #8]
 80126b6:	f043 0206 	orr.w	r2, r3, #6
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	689b      	ldr	r3, [r3, #8]
 80126c2:	f043 0220 	orr.w	r2, r3, #32
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3710      	adds	r7, #16
 80126d0:	46bd      	mov	sp, r7
 80126d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80126d6:	b004      	add	sp, #16
 80126d8:	4770      	bx	lr
	...

080126dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80126dc:	b480      	push	{r7}
 80126de:	b087      	sub	sp, #28
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	4613      	mov	r3, r2
 80126e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80126ea:	79fb      	ldrb	r3, [r7, #7]
 80126ec:	2b02      	cmp	r3, #2
 80126ee:	d165      	bne.n	80127bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	4a41      	ldr	r2, [pc, #260]	; (80127f8 <USB_SetTurnaroundTime+0x11c>)
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d906      	bls.n	8012706 <USB_SetTurnaroundTime+0x2a>
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	4a40      	ldr	r2, [pc, #256]	; (80127fc <USB_SetTurnaroundTime+0x120>)
 80126fc:	4293      	cmp	r3, r2
 80126fe:	d202      	bcs.n	8012706 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012700:	230f      	movs	r3, #15
 8012702:	617b      	str	r3, [r7, #20]
 8012704:	e062      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	4a3c      	ldr	r2, [pc, #240]	; (80127fc <USB_SetTurnaroundTime+0x120>)
 801270a:	4293      	cmp	r3, r2
 801270c:	d306      	bcc.n	801271c <USB_SetTurnaroundTime+0x40>
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	4a3b      	ldr	r2, [pc, #236]	; (8012800 <USB_SetTurnaroundTime+0x124>)
 8012712:	4293      	cmp	r3, r2
 8012714:	d202      	bcs.n	801271c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012716:	230e      	movs	r3, #14
 8012718:	617b      	str	r3, [r7, #20]
 801271a:	e057      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	4a38      	ldr	r2, [pc, #224]	; (8012800 <USB_SetTurnaroundTime+0x124>)
 8012720:	4293      	cmp	r3, r2
 8012722:	d306      	bcc.n	8012732 <USB_SetTurnaroundTime+0x56>
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	4a37      	ldr	r2, [pc, #220]	; (8012804 <USB_SetTurnaroundTime+0x128>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d202      	bcs.n	8012732 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801272c:	230d      	movs	r3, #13
 801272e:	617b      	str	r3, [r7, #20]
 8012730:	e04c      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012732:	68bb      	ldr	r3, [r7, #8]
 8012734:	4a33      	ldr	r2, [pc, #204]	; (8012804 <USB_SetTurnaroundTime+0x128>)
 8012736:	4293      	cmp	r3, r2
 8012738:	d306      	bcc.n	8012748 <USB_SetTurnaroundTime+0x6c>
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	4a32      	ldr	r2, [pc, #200]	; (8012808 <USB_SetTurnaroundTime+0x12c>)
 801273e:	4293      	cmp	r3, r2
 8012740:	d802      	bhi.n	8012748 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012742:	230c      	movs	r3, #12
 8012744:	617b      	str	r3, [r7, #20]
 8012746:	e041      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	4a2f      	ldr	r2, [pc, #188]	; (8012808 <USB_SetTurnaroundTime+0x12c>)
 801274c:	4293      	cmp	r3, r2
 801274e:	d906      	bls.n	801275e <USB_SetTurnaroundTime+0x82>
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	4a2e      	ldr	r2, [pc, #184]	; (801280c <USB_SetTurnaroundTime+0x130>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d802      	bhi.n	801275e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012758:	230b      	movs	r3, #11
 801275a:	617b      	str	r3, [r7, #20]
 801275c:	e036      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	4a2a      	ldr	r2, [pc, #168]	; (801280c <USB_SetTurnaroundTime+0x130>)
 8012762:	4293      	cmp	r3, r2
 8012764:	d906      	bls.n	8012774 <USB_SetTurnaroundTime+0x98>
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	4a29      	ldr	r2, [pc, #164]	; (8012810 <USB_SetTurnaroundTime+0x134>)
 801276a:	4293      	cmp	r3, r2
 801276c:	d802      	bhi.n	8012774 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801276e:	230a      	movs	r3, #10
 8012770:	617b      	str	r3, [r7, #20]
 8012772:	e02b      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	4a26      	ldr	r2, [pc, #152]	; (8012810 <USB_SetTurnaroundTime+0x134>)
 8012778:	4293      	cmp	r3, r2
 801277a:	d906      	bls.n	801278a <USB_SetTurnaroundTime+0xae>
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	4a25      	ldr	r2, [pc, #148]	; (8012814 <USB_SetTurnaroundTime+0x138>)
 8012780:	4293      	cmp	r3, r2
 8012782:	d202      	bcs.n	801278a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012784:	2309      	movs	r3, #9
 8012786:	617b      	str	r3, [r7, #20]
 8012788:	e020      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	4a21      	ldr	r2, [pc, #132]	; (8012814 <USB_SetTurnaroundTime+0x138>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d306      	bcc.n	80127a0 <USB_SetTurnaroundTime+0xc4>
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	4a20      	ldr	r2, [pc, #128]	; (8012818 <USB_SetTurnaroundTime+0x13c>)
 8012796:	4293      	cmp	r3, r2
 8012798:	d802      	bhi.n	80127a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801279a:	2308      	movs	r3, #8
 801279c:	617b      	str	r3, [r7, #20]
 801279e:	e015      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	4a1d      	ldr	r2, [pc, #116]	; (8012818 <USB_SetTurnaroundTime+0x13c>)
 80127a4:	4293      	cmp	r3, r2
 80127a6:	d906      	bls.n	80127b6 <USB_SetTurnaroundTime+0xda>
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	4a1c      	ldr	r2, [pc, #112]	; (801281c <USB_SetTurnaroundTime+0x140>)
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d202      	bcs.n	80127b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80127b0:	2307      	movs	r3, #7
 80127b2:	617b      	str	r3, [r7, #20]
 80127b4:	e00a      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80127b6:	2306      	movs	r3, #6
 80127b8:	617b      	str	r3, [r7, #20]
 80127ba:	e007      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80127bc:	79fb      	ldrb	r3, [r7, #7]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d102      	bne.n	80127c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80127c2:	2309      	movs	r3, #9
 80127c4:	617b      	str	r3, [r7, #20]
 80127c6:	e001      	b.n	80127cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80127c8:	2309      	movs	r3, #9
 80127ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	68db      	ldr	r3, [r3, #12]
 80127d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	68da      	ldr	r2, [r3, #12]
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	029b      	lsls	r3, r3, #10
 80127e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80127e4:	431a      	orrs	r2, r3
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80127ea:	2300      	movs	r3, #0
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	371c      	adds	r7, #28
 80127f0:	46bd      	mov	sp, r7
 80127f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f6:	4770      	bx	lr
 80127f8:	00d8acbf 	.word	0x00d8acbf
 80127fc:	00e4e1c0 	.word	0x00e4e1c0
 8012800:	00f42400 	.word	0x00f42400
 8012804:	01067380 	.word	0x01067380
 8012808:	011a499f 	.word	0x011a499f
 801280c:	01312cff 	.word	0x01312cff
 8012810:	014ca43f 	.word	0x014ca43f
 8012814:	016e3600 	.word	0x016e3600
 8012818:	01a6ab1f 	.word	0x01a6ab1f
 801281c:	01e84800 	.word	0x01e84800

08012820 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	689b      	ldr	r3, [r3, #8]
 801282c:	f043 0201 	orr.w	r2, r3, #1
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012834:	2300      	movs	r3, #0
}
 8012836:	4618      	mov	r0, r3
 8012838:	370c      	adds	r7, #12
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr

08012842 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012842:	b480      	push	{r7}
 8012844:	b083      	sub	sp, #12
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	689b      	ldr	r3, [r3, #8]
 801284e:	f023 0201 	bic.w	r2, r3, #1
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012856:	2300      	movs	r3, #0
}
 8012858:	4618      	mov	r0, r3
 801285a:	370c      	adds	r7, #12
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr

08012864 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	460b      	mov	r3, r1
 801286e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012870:	2300      	movs	r3, #0
 8012872:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012880:	78fb      	ldrb	r3, [r7, #3]
 8012882:	2b01      	cmp	r3, #1
 8012884:	d115      	bne.n	80128b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012892:	2001      	movs	r0, #1
 8012894:	f7f7 fad4 	bl	8009e40 <HAL_Delay>
      ms++;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	3301      	adds	r3, #1
 801289c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f001 fa45 	bl	8013d2e <USB_GetMode>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d01e      	beq.n	80128e8 <USB_SetCurrentMode+0x84>
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2b31      	cmp	r3, #49	; 0x31
 80128ae:	d9f0      	bls.n	8012892 <USB_SetCurrentMode+0x2e>
 80128b0:	e01a      	b.n	80128e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80128b2:	78fb      	ldrb	r3, [r7, #3]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d115      	bne.n	80128e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80128c4:	2001      	movs	r0, #1
 80128c6:	f7f7 fabb 	bl	8009e40 <HAL_Delay>
      ms++;
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	3301      	adds	r3, #1
 80128ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f001 fa2c 	bl	8013d2e <USB_GetMode>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d005      	beq.n	80128e8 <USB_SetCurrentMode+0x84>
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	2b31      	cmp	r3, #49	; 0x31
 80128e0:	d9f0      	bls.n	80128c4 <USB_SetCurrentMode+0x60>
 80128e2:	e001      	b.n	80128e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80128e4:	2301      	movs	r3, #1
 80128e6:	e005      	b.n	80128f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	2b32      	cmp	r3, #50	; 0x32
 80128ec:	d101      	bne.n	80128f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80128ee:	2301      	movs	r3, #1
 80128f0:	e000      	b.n	80128f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80128f2:	2300      	movs	r3, #0
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3710      	adds	r7, #16
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80128fc:	b084      	sub	sp, #16
 80128fe:	b580      	push	{r7, lr}
 8012900:	b086      	sub	sp, #24
 8012902:	af00      	add	r7, sp, #0
 8012904:	6078      	str	r0, [r7, #4]
 8012906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801290a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801290e:	2300      	movs	r3, #0
 8012910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012916:	2300      	movs	r3, #0
 8012918:	613b      	str	r3, [r7, #16]
 801291a:	e009      	b.n	8012930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801291c:	687a      	ldr	r2, [r7, #4]
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	3340      	adds	r3, #64	; 0x40
 8012922:	009b      	lsls	r3, r3, #2
 8012924:	4413      	add	r3, r2
 8012926:	2200      	movs	r2, #0
 8012928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	3301      	adds	r3, #1
 801292e:	613b      	str	r3, [r7, #16]
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	2b0e      	cmp	r3, #14
 8012934:	d9f2      	bls.n	801291c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012938:	2b00      	cmp	r3, #0
 801293a:	d11c      	bne.n	8012976 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	68fa      	ldr	r2, [r7, #12]
 8012946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801294a:	f043 0302 	orr.w	r3, r3, #2
 801294e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012954:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012960:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801296c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	639a      	str	r2, [r3, #56]	; 0x38
 8012974:	e00b      	b.n	801298e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801297a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012986:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012994:	461a      	mov	r2, r3
 8012996:	2300      	movs	r3, #0
 8012998:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129a0:	4619      	mov	r1, r3
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129a8:	461a      	mov	r2, r3
 80129aa:	680b      	ldr	r3, [r1, #0]
 80129ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80129ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d10c      	bne.n	80129ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80129b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d104      	bne.n	80129c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80129ba:	2100      	movs	r1, #0
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f000 f965 	bl	8012c8c <USB_SetDevSpeed>
 80129c2:	e008      	b.n	80129d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80129c4:	2101      	movs	r1, #1
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f000 f960 	bl	8012c8c <USB_SetDevSpeed>
 80129cc:	e003      	b.n	80129d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80129ce:	2103      	movs	r1, #3
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f000 f95b 	bl	8012c8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80129d6:	2110      	movs	r1, #16
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f000 f8f3 	bl	8012bc4 <USB_FlushTxFifo>
 80129de:	4603      	mov	r3, r0
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d001      	beq.n	80129e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80129e4:	2301      	movs	r3, #1
 80129e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f000 f91f 	bl	8012c2c <USB_FlushRxFifo>
 80129ee:	4603      	mov	r3, r0
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d001      	beq.n	80129f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80129f4:	2301      	movs	r3, #1
 80129f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129fe:	461a      	mov	r2, r3
 8012a00:	2300      	movs	r3, #0
 8012a02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a16:	461a      	mov	r2, r3
 8012a18:	2300      	movs	r3, #0
 8012a1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	613b      	str	r3, [r7, #16]
 8012a20:	e043      	b.n	8012aaa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	015a      	lsls	r2, r3, #5
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	4413      	add	r3, r2
 8012a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a38:	d118      	bne.n	8012a6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d10a      	bne.n	8012a56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	015a      	lsls	r2, r3, #5
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	4413      	add	r3, r2
 8012a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012a52:	6013      	str	r3, [r2, #0]
 8012a54:	e013      	b.n	8012a7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	015a      	lsls	r2, r3, #5
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a62:	461a      	mov	r2, r3
 8012a64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012a68:	6013      	str	r3, [r2, #0]
 8012a6a:	e008      	b.n	8012a7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	015a      	lsls	r2, r3, #5
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	4413      	add	r3, r2
 8012a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a78:	461a      	mov	r2, r3
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	015a      	lsls	r2, r3, #5
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	4413      	add	r3, r2
 8012a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	015a      	lsls	r2, r3, #5
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	4413      	add	r3, r2
 8012a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012aa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	613b      	str	r3, [r7, #16]
 8012aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aac:	693a      	ldr	r2, [r7, #16]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d3b7      	bcc.n	8012a22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	613b      	str	r3, [r7, #16]
 8012ab6:	e043      	b.n	8012b40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	015a      	lsls	r2, r3, #5
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	4413      	add	r3, r2
 8012ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ace:	d118      	bne.n	8012b02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d10a      	bne.n	8012aec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	015a      	lsls	r2, r3, #5
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	4413      	add	r3, r2
 8012ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012ae8:	6013      	str	r3, [r2, #0]
 8012aea:	e013      	b.n	8012b14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	015a      	lsls	r2, r3, #5
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	4413      	add	r3, r2
 8012af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012af8:	461a      	mov	r2, r3
 8012afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012afe:	6013      	str	r3, [r2, #0]
 8012b00:	e008      	b.n	8012b14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	015a      	lsls	r2, r3, #5
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	4413      	add	r3, r2
 8012b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b0e:	461a      	mov	r2, r3
 8012b10:	2300      	movs	r3, #0
 8012b12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	015a      	lsls	r2, r3, #5
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b20:	461a      	mov	r2, r3
 8012b22:	2300      	movs	r3, #0
 8012b24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	015a      	lsls	r2, r3, #5
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b32:	461a      	mov	r2, r3
 8012b34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012b38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	613b      	str	r3, [r7, #16]
 8012b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b42:	693a      	ldr	r2, [r7, #16]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d3b7      	bcc.n	8012ab8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b4e:	691b      	ldr	r3, [r3, #16]
 8012b50:	68fa      	ldr	r2, [r7, #12]
 8012b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012b68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d105      	bne.n	8012b7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	699b      	ldr	r3, [r3, #24]
 8012b74:	f043 0210 	orr.w	r2, r3, #16
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	699a      	ldr	r2, [r3, #24]
 8012b80:	4b0f      	ldr	r3, [pc, #60]	; (8012bc0 <USB_DevInit+0x2c4>)
 8012b82:	4313      	orrs	r3, r2
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d005      	beq.n	8012b9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	699b      	ldr	r3, [r3, #24]
 8012b92:	f043 0208 	orr.w	r2, r3, #8
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	d107      	bne.n	8012bb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	699b      	ldr	r3, [r3, #24]
 8012ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012ba8:	f043 0304 	orr.w	r3, r3, #4
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3718      	adds	r7, #24
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012bbc:	b004      	add	sp, #16
 8012bbe:	4770      	bx	lr
 8012bc0:	803c3800 	.word	0x803c3800

08012bc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b085      	sub	sp, #20
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	4a13      	ldr	r2, [pc, #76]	; (8012c28 <USB_FlushTxFifo+0x64>)
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	d901      	bls.n	8012be4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012be0:	2303      	movs	r3, #3
 8012be2:	e01b      	b.n	8012c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	691b      	ldr	r3, [r3, #16]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	daf2      	bge.n	8012bd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012bec:	2300      	movs	r3, #0
 8012bee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	019b      	lsls	r3, r3, #6
 8012bf4:	f043 0220 	orr.w	r2, r3, #32
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	4a08      	ldr	r2, [pc, #32]	; (8012c28 <USB_FlushTxFifo+0x64>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d901      	bls.n	8012c0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012c0a:	2303      	movs	r3, #3
 8012c0c:	e006      	b.n	8012c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	691b      	ldr	r3, [r3, #16]
 8012c12:	f003 0320 	and.w	r3, r3, #32
 8012c16:	2b20      	cmp	r3, #32
 8012c18:	d0f0      	beq.n	8012bfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012c1a:	2300      	movs	r3, #0
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3714      	adds	r7, #20
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr
 8012c28:	00030d40 	.word	0x00030d40

08012c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b085      	sub	sp, #20
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012c34:	2300      	movs	r3, #0
 8012c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	4a11      	ldr	r2, [pc, #68]	; (8012c88 <USB_FlushRxFifo+0x5c>)
 8012c42:	4293      	cmp	r3, r2
 8012c44:	d901      	bls.n	8012c4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012c46:	2303      	movs	r3, #3
 8012c48:	e018      	b.n	8012c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	691b      	ldr	r3, [r3, #16]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	daf2      	bge.n	8012c38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012c52:	2300      	movs	r3, #0
 8012c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2210      	movs	r2, #16
 8012c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	4a08      	ldr	r2, [pc, #32]	; (8012c88 <USB_FlushRxFifo+0x5c>)
 8012c66:	4293      	cmp	r3, r2
 8012c68:	d901      	bls.n	8012c6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012c6a:	2303      	movs	r3, #3
 8012c6c:	e006      	b.n	8012c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	691b      	ldr	r3, [r3, #16]
 8012c72:	f003 0310 	and.w	r3, r3, #16
 8012c76:	2b10      	cmp	r3, #16
 8012c78:	d0f0      	beq.n	8012c5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012c7a:	2300      	movs	r3, #0
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	3714      	adds	r7, #20
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr
 8012c88:	00030d40 	.word	0x00030d40

08012c8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	460b      	mov	r3, r1
 8012c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	78fb      	ldrb	r3, [r7, #3]
 8012ca6:	68f9      	ldr	r1, [r7, #12]
 8012ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012cac:	4313      	orrs	r3, r2
 8012cae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3714      	adds	r7, #20
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012cbe:	b480      	push	{r7}
 8012cc0:	b087      	sub	sp, #28
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cd0:	689b      	ldr	r3, [r3, #8]
 8012cd2:	f003 0306 	and.w	r3, r3, #6
 8012cd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d102      	bne.n	8012ce4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	75fb      	strb	r3, [r7, #23]
 8012ce2:	e00a      	b.n	8012cfa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	d002      	beq.n	8012cf0 <USB_GetDevSpeed+0x32>
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	2b06      	cmp	r3, #6
 8012cee:	d102      	bne.n	8012cf6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012cf0:	2302      	movs	r3, #2
 8012cf2:	75fb      	strb	r3, [r7, #23]
 8012cf4:	e001      	b.n	8012cfa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012cf6:	230f      	movs	r3, #15
 8012cf8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	371c      	adds	r7, #28
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b085      	sub	sp, #20
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	785b      	ldrb	r3, [r3, #1]
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d13a      	bne.n	8012d9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d2a:	69da      	ldr	r2, [r3, #28]
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	f003 030f 	and.w	r3, r3, #15
 8012d34:	2101      	movs	r1, #1
 8012d36:	fa01 f303 	lsl.w	r3, r1, r3
 8012d3a:	b29b      	uxth	r3, r3
 8012d3c:	68f9      	ldr	r1, [r7, #12]
 8012d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d42:	4313      	orrs	r3, r2
 8012d44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	015a      	lsls	r2, r3, #5
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d155      	bne.n	8012e08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	015a      	lsls	r2, r3, #5
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	4413      	add	r3, r2
 8012d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	68db      	ldr	r3, [r3, #12]
 8012d6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	791b      	ldrb	r3, [r3, #4]
 8012d76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012d78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	059b      	lsls	r3, r3, #22
 8012d7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012d80:	4313      	orrs	r3, r2
 8012d82:	68ba      	ldr	r2, [r7, #8]
 8012d84:	0151      	lsls	r1, r2, #5
 8012d86:	68fa      	ldr	r2, [r7, #12]
 8012d88:	440a      	add	r2, r1
 8012d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d96:	6013      	str	r3, [r2, #0]
 8012d98:	e036      	b.n	8012e08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012da0:	69da      	ldr	r2, [r3, #28]
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	f003 030f 	and.w	r3, r3, #15
 8012daa:	2101      	movs	r1, #1
 8012dac:	fa01 f303 	lsl.w	r3, r1, r3
 8012db0:	041b      	lsls	r3, r3, #16
 8012db2:	68f9      	ldr	r1, [r7, #12]
 8012db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012db8:	4313      	orrs	r3, r2
 8012dba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	015a      	lsls	r2, r3, #5
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d11a      	bne.n	8012e08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	015a      	lsls	r2, r3, #5
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	4413      	add	r3, r2
 8012dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	791b      	ldrb	r3, [r3, #4]
 8012dec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012dee:	430b      	orrs	r3, r1
 8012df0:	4313      	orrs	r3, r2
 8012df2:	68ba      	ldr	r2, [r7, #8]
 8012df4:	0151      	lsls	r1, r2, #5
 8012df6:	68fa      	ldr	r2, [r7, #12]
 8012df8:	440a      	add	r2, r1
 8012dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012e08:	2300      	movs	r3, #0
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3714      	adds	r7, #20
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e14:	4770      	bx	lr
	...

08012e18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b085      	sub	sp, #20
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
 8012e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	785b      	ldrb	r3, [r3, #1]
 8012e30:	2b01      	cmp	r3, #1
 8012e32:	d161      	bne.n	8012ef8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	015a      	lsls	r2, r3, #5
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e4a:	d11f      	bne.n	8012e8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	015a      	lsls	r2, r3, #5
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	4413      	add	r3, r2
 8012e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	68ba      	ldr	r2, [r7, #8]
 8012e5c:	0151      	lsls	r1, r2, #5
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	440a      	add	r2, r1
 8012e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012e6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	015a      	lsls	r2, r3, #5
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	4413      	add	r3, r2
 8012e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	68ba      	ldr	r2, [r7, #8]
 8012e7c:	0151      	lsls	r1, r2, #5
 8012e7e:	68fa      	ldr	r2, [r7, #12]
 8012e80:	440a      	add	r2, r1
 8012e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	f003 030f 	and.w	r3, r3, #15
 8012e9c:	2101      	movs	r1, #1
 8012e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	43db      	mvns	r3, r3
 8012ea6:	68f9      	ldr	r1, [r7, #12]
 8012ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012eac:	4013      	ands	r3, r2
 8012eae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eb6:	69da      	ldr	r2, [r3, #28]
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	f003 030f 	and.w	r3, r3, #15
 8012ec0:	2101      	movs	r1, #1
 8012ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8012ec6:	b29b      	uxth	r3, r3
 8012ec8:	43db      	mvns	r3, r3
 8012eca:	68f9      	ldr	r1, [r7, #12]
 8012ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ed0:	4013      	ands	r3, r2
 8012ed2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	015a      	lsls	r2, r3, #5
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	4413      	add	r3, r2
 8012edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	0159      	lsls	r1, r3, #5
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	440b      	add	r3, r1
 8012eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eee:	4619      	mov	r1, r3
 8012ef0:	4b35      	ldr	r3, [pc, #212]	; (8012fc8 <USB_DeactivateEndpoint+0x1b0>)
 8012ef2:	4013      	ands	r3, r2
 8012ef4:	600b      	str	r3, [r1, #0]
 8012ef6:	e060      	b.n	8012fba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	015a      	lsls	r2, r3, #5
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	4413      	add	r3, r2
 8012f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f0e:	d11f      	bne.n	8012f50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	015a      	lsls	r2, r3, #5
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	4413      	add	r3, r2
 8012f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	68ba      	ldr	r2, [r7, #8]
 8012f20:	0151      	lsls	r1, r2, #5
 8012f22:	68fa      	ldr	r2, [r7, #12]
 8012f24:	440a      	add	r2, r1
 8012f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012f2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	015a      	lsls	r2, r3, #5
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	4413      	add	r3, r2
 8012f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	68ba      	ldr	r2, [r7, #8]
 8012f40:	0151      	lsls	r1, r2, #5
 8012f42:	68fa      	ldr	r2, [r7, #12]
 8012f44:	440a      	add	r2, r1
 8012f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	f003 030f 	and.w	r3, r3, #15
 8012f60:	2101      	movs	r1, #1
 8012f62:	fa01 f303 	lsl.w	r3, r1, r3
 8012f66:	041b      	lsls	r3, r3, #16
 8012f68:	43db      	mvns	r3, r3
 8012f6a:	68f9      	ldr	r1, [r7, #12]
 8012f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f70:	4013      	ands	r3, r2
 8012f72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f7a:	69da      	ldr	r2, [r3, #28]
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	f003 030f 	and.w	r3, r3, #15
 8012f84:	2101      	movs	r1, #1
 8012f86:	fa01 f303 	lsl.w	r3, r1, r3
 8012f8a:	041b      	lsls	r3, r3, #16
 8012f8c:	43db      	mvns	r3, r3
 8012f8e:	68f9      	ldr	r1, [r7, #12]
 8012f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f94:	4013      	ands	r3, r2
 8012f96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	015a      	lsls	r2, r3, #5
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	4413      	add	r3, r2
 8012fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	0159      	lsls	r1, r3, #5
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	440b      	add	r3, r1
 8012fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fb2:	4619      	mov	r1, r3
 8012fb4:	4b05      	ldr	r3, [pc, #20]	; (8012fcc <USB_DeactivateEndpoint+0x1b4>)
 8012fb6:	4013      	ands	r3, r2
 8012fb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012fba:	2300      	movs	r3, #0
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3714      	adds	r7, #20
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr
 8012fc8:	ec337800 	.word	0xec337800
 8012fcc:	eff37800 	.word	0xeff37800

08012fd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b08a      	sub	sp, #40	; 0x28
 8012fd4:	af02      	add	r7, sp, #8
 8012fd6:	60f8      	str	r0, [r7, #12]
 8012fd8:	60b9      	str	r1, [r7, #8]
 8012fda:	4613      	mov	r3, r2
 8012fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	785b      	ldrb	r3, [r3, #1]
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	f040 815c 	bne.w	80132aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	699b      	ldr	r3, [r3, #24]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d132      	bne.n	8013060 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012ffa:	69bb      	ldr	r3, [r7, #24]
 8012ffc:	015a      	lsls	r2, r3, #5
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	4413      	add	r3, r2
 8013002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013006:	691b      	ldr	r3, [r3, #16]
 8013008:	69ba      	ldr	r2, [r7, #24]
 801300a:	0151      	lsls	r1, r2, #5
 801300c:	69fa      	ldr	r2, [r7, #28]
 801300e:	440a      	add	r2, r1
 8013010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013014:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013018:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801301c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	015a      	lsls	r2, r3, #5
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	4413      	add	r3, r2
 8013026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801302a:	691b      	ldr	r3, [r3, #16]
 801302c:	69ba      	ldr	r2, [r7, #24]
 801302e:	0151      	lsls	r1, r2, #5
 8013030:	69fa      	ldr	r2, [r7, #28]
 8013032:	440a      	add	r2, r1
 8013034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801303c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	015a      	lsls	r2, r3, #5
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	4413      	add	r3, r2
 8013046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801304a:	691b      	ldr	r3, [r3, #16]
 801304c:	69ba      	ldr	r2, [r7, #24]
 801304e:	0151      	lsls	r1, r2, #5
 8013050:	69fa      	ldr	r2, [r7, #28]
 8013052:	440a      	add	r2, r1
 8013054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013058:	0cdb      	lsrs	r3, r3, #19
 801305a:	04db      	lsls	r3, r3, #19
 801305c:	6113      	str	r3, [r2, #16]
 801305e:	e074      	b.n	801314a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013060:	69bb      	ldr	r3, [r7, #24]
 8013062:	015a      	lsls	r2, r3, #5
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	4413      	add	r3, r2
 8013068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801306c:	691b      	ldr	r3, [r3, #16]
 801306e:	69ba      	ldr	r2, [r7, #24]
 8013070:	0151      	lsls	r1, r2, #5
 8013072:	69fa      	ldr	r2, [r7, #28]
 8013074:	440a      	add	r2, r1
 8013076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801307a:	0cdb      	lsrs	r3, r3, #19
 801307c:	04db      	lsls	r3, r3, #19
 801307e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	015a      	lsls	r2, r3, #5
 8013084:	69fb      	ldr	r3, [r7, #28]
 8013086:	4413      	add	r3, r2
 8013088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801308c:	691b      	ldr	r3, [r3, #16]
 801308e:	69ba      	ldr	r2, [r7, #24]
 8013090:	0151      	lsls	r1, r2, #5
 8013092:	69fa      	ldr	r2, [r7, #28]
 8013094:	440a      	add	r2, r1
 8013096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801309a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801309e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80130a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80130a4:	69bb      	ldr	r3, [r7, #24]
 80130a6:	015a      	lsls	r2, r3, #5
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	4413      	add	r3, r2
 80130ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	6999      	ldr	r1, [r3, #24]
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	68db      	ldr	r3, [r3, #12]
 80130ba:	440b      	add	r3, r1
 80130bc:	1e59      	subs	r1, r3, #1
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	68db      	ldr	r3, [r3, #12]
 80130c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80130c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80130c8:	4b9d      	ldr	r3, [pc, #628]	; (8013340 <USB_EPStartXfer+0x370>)
 80130ca:	400b      	ands	r3, r1
 80130cc:	69b9      	ldr	r1, [r7, #24]
 80130ce:	0148      	lsls	r0, r1, #5
 80130d0:	69f9      	ldr	r1, [r7, #28]
 80130d2:	4401      	add	r1, r0
 80130d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80130d8:	4313      	orrs	r3, r2
 80130da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80130dc:	69bb      	ldr	r3, [r7, #24]
 80130de:	015a      	lsls	r2, r3, #5
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	4413      	add	r3, r2
 80130e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130e8:	691a      	ldr	r2, [r3, #16]
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	699b      	ldr	r3, [r3, #24]
 80130ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80130f2:	69b9      	ldr	r1, [r7, #24]
 80130f4:	0148      	lsls	r0, r1, #5
 80130f6:	69f9      	ldr	r1, [r7, #28]
 80130f8:	4401      	add	r1, r0
 80130fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80130fe:	4313      	orrs	r3, r2
 8013100:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	791b      	ldrb	r3, [r3, #4]
 8013106:	2b01      	cmp	r3, #1
 8013108:	d11f      	bne.n	801314a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	015a      	lsls	r2, r3, #5
 801310e:	69fb      	ldr	r3, [r7, #28]
 8013110:	4413      	add	r3, r2
 8013112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013116:	691b      	ldr	r3, [r3, #16]
 8013118:	69ba      	ldr	r2, [r7, #24]
 801311a:	0151      	lsls	r1, r2, #5
 801311c:	69fa      	ldr	r2, [r7, #28]
 801311e:	440a      	add	r2, r1
 8013120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013124:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013128:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	015a      	lsls	r2, r3, #5
 801312e:	69fb      	ldr	r3, [r7, #28]
 8013130:	4413      	add	r3, r2
 8013132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013136:	691b      	ldr	r3, [r3, #16]
 8013138:	69ba      	ldr	r2, [r7, #24]
 801313a:	0151      	lsls	r1, r2, #5
 801313c:	69fa      	ldr	r2, [r7, #28]
 801313e:	440a      	add	r2, r1
 8013140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013148:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801314a:	79fb      	ldrb	r3, [r7, #7]
 801314c:	2b01      	cmp	r3, #1
 801314e:	d14b      	bne.n	80131e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	695b      	ldr	r3, [r3, #20]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d009      	beq.n	801316c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013158:	69bb      	ldr	r3, [r7, #24]
 801315a:	015a      	lsls	r2, r3, #5
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	4413      	add	r3, r2
 8013160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013164:	461a      	mov	r2, r3
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	695b      	ldr	r3, [r3, #20]
 801316a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	791b      	ldrb	r3, [r3, #4]
 8013170:	2b01      	cmp	r3, #1
 8013172:	d128      	bne.n	80131c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013174:	69fb      	ldr	r3, [r7, #28]
 8013176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801317a:	689b      	ldr	r3, [r3, #8]
 801317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013180:	2b00      	cmp	r3, #0
 8013182:	d110      	bne.n	80131a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013184:	69bb      	ldr	r3, [r7, #24]
 8013186:	015a      	lsls	r2, r3, #5
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	4413      	add	r3, r2
 801318c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	69ba      	ldr	r2, [r7, #24]
 8013194:	0151      	lsls	r1, r2, #5
 8013196:	69fa      	ldr	r2, [r7, #28]
 8013198:	440a      	add	r2, r1
 801319a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801319e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80131a2:	6013      	str	r3, [r2, #0]
 80131a4:	e00f      	b.n	80131c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	015a      	lsls	r2, r3, #5
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	4413      	add	r3, r2
 80131ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	69ba      	ldr	r2, [r7, #24]
 80131b6:	0151      	lsls	r1, r2, #5
 80131b8:	69fa      	ldr	r2, [r7, #28]
 80131ba:	440a      	add	r2, r1
 80131bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80131c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	015a      	lsls	r2, r3, #5
 80131ca:	69fb      	ldr	r3, [r7, #28]
 80131cc:	4413      	add	r3, r2
 80131ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	69ba      	ldr	r2, [r7, #24]
 80131d6:	0151      	lsls	r1, r2, #5
 80131d8:	69fa      	ldr	r2, [r7, #28]
 80131da:	440a      	add	r2, r1
 80131dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80131e4:	6013      	str	r3, [r2, #0]
 80131e6:	e133      	b.n	8013450 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	015a      	lsls	r2, r3, #5
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	4413      	add	r3, r2
 80131f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	69ba      	ldr	r2, [r7, #24]
 80131f8:	0151      	lsls	r1, r2, #5
 80131fa:	69fa      	ldr	r2, [r7, #28]
 80131fc:	440a      	add	r2, r1
 80131fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013202:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013206:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	791b      	ldrb	r3, [r3, #4]
 801320c:	2b01      	cmp	r3, #1
 801320e:	d015      	beq.n	801323c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	699b      	ldr	r3, [r3, #24]
 8013214:	2b00      	cmp	r3, #0
 8013216:	f000 811b 	beq.w	8013450 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801321a:	69fb      	ldr	r3, [r7, #28]
 801321c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	f003 030f 	and.w	r3, r3, #15
 801322a:	2101      	movs	r1, #1
 801322c:	fa01 f303 	lsl.w	r3, r1, r3
 8013230:	69f9      	ldr	r1, [r7, #28]
 8013232:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013236:	4313      	orrs	r3, r2
 8013238:	634b      	str	r3, [r1, #52]	; 0x34
 801323a:	e109      	b.n	8013450 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013248:	2b00      	cmp	r3, #0
 801324a:	d110      	bne.n	801326e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801324c:	69bb      	ldr	r3, [r7, #24]
 801324e:	015a      	lsls	r2, r3, #5
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	4413      	add	r3, r2
 8013254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	69ba      	ldr	r2, [r7, #24]
 801325c:	0151      	lsls	r1, r2, #5
 801325e:	69fa      	ldr	r2, [r7, #28]
 8013260:	440a      	add	r2, r1
 8013262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801326a:	6013      	str	r3, [r2, #0]
 801326c:	e00f      	b.n	801328e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801326e:	69bb      	ldr	r3, [r7, #24]
 8013270:	015a      	lsls	r2, r3, #5
 8013272:	69fb      	ldr	r3, [r7, #28]
 8013274:	4413      	add	r3, r2
 8013276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	69ba      	ldr	r2, [r7, #24]
 801327e:	0151      	lsls	r1, r2, #5
 8013280:	69fa      	ldr	r2, [r7, #28]
 8013282:	440a      	add	r2, r1
 8013284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801328c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	6919      	ldr	r1, [r3, #16]
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	781a      	ldrb	r2, [r3, #0]
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	699b      	ldr	r3, [r3, #24]
 801329a:	b298      	uxth	r0, r3
 801329c:	79fb      	ldrb	r3, [r7, #7]
 801329e:	9300      	str	r3, [sp, #0]
 80132a0:	4603      	mov	r3, r0
 80132a2:	68f8      	ldr	r0, [r7, #12]
 80132a4:	f000 fade 	bl	8013864 <USB_WritePacket>
 80132a8:	e0d2      	b.n	8013450 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80132aa:	69bb      	ldr	r3, [r7, #24]
 80132ac:	015a      	lsls	r2, r3, #5
 80132ae:	69fb      	ldr	r3, [r7, #28]
 80132b0:	4413      	add	r3, r2
 80132b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b6:	691b      	ldr	r3, [r3, #16]
 80132b8:	69ba      	ldr	r2, [r7, #24]
 80132ba:	0151      	lsls	r1, r2, #5
 80132bc:	69fa      	ldr	r2, [r7, #28]
 80132be:	440a      	add	r2, r1
 80132c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132c4:	0cdb      	lsrs	r3, r3, #19
 80132c6:	04db      	lsls	r3, r3, #19
 80132c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	015a      	lsls	r2, r3, #5
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	4413      	add	r3, r2
 80132d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132d6:	691b      	ldr	r3, [r3, #16]
 80132d8:	69ba      	ldr	r2, [r7, #24]
 80132da:	0151      	lsls	r1, r2, #5
 80132dc:	69fa      	ldr	r2, [r7, #28]
 80132de:	440a      	add	r2, r1
 80132e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80132e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80132ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	699b      	ldr	r3, [r3, #24]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d126      	bne.n	8013344 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	015a      	lsls	r2, r3, #5
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	4413      	add	r3, r2
 80132fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013302:	691a      	ldr	r2, [r3, #16]
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801330c:	69b9      	ldr	r1, [r7, #24]
 801330e:	0148      	lsls	r0, r1, #5
 8013310:	69f9      	ldr	r1, [r7, #28]
 8013312:	4401      	add	r1, r0
 8013314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013318:	4313      	orrs	r3, r2
 801331a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	015a      	lsls	r2, r3, #5
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	4413      	add	r3, r2
 8013324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013328:	691b      	ldr	r3, [r3, #16]
 801332a:	69ba      	ldr	r2, [r7, #24]
 801332c:	0151      	lsls	r1, r2, #5
 801332e:	69fa      	ldr	r2, [r7, #28]
 8013330:	440a      	add	r2, r1
 8013332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801333a:	6113      	str	r3, [r2, #16]
 801333c:	e03a      	b.n	80133b4 <USB_EPStartXfer+0x3e4>
 801333e:	bf00      	nop
 8013340:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	699a      	ldr	r2, [r3, #24]
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	68db      	ldr	r3, [r3, #12]
 801334c:	4413      	add	r3, r2
 801334e:	1e5a      	subs	r2, r3, #1
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	68db      	ldr	r3, [r3, #12]
 8013354:	fbb2 f3f3 	udiv	r3, r2, r3
 8013358:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	68db      	ldr	r3, [r3, #12]
 801335e:	8afa      	ldrh	r2, [r7, #22]
 8013360:	fb03 f202 	mul.w	r2, r3, r2
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013368:	69bb      	ldr	r3, [r7, #24]
 801336a:	015a      	lsls	r2, r3, #5
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	4413      	add	r3, r2
 8013370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013374:	691a      	ldr	r2, [r3, #16]
 8013376:	8afb      	ldrh	r3, [r7, #22]
 8013378:	04d9      	lsls	r1, r3, #19
 801337a:	4b38      	ldr	r3, [pc, #224]	; (801345c <USB_EPStartXfer+0x48c>)
 801337c:	400b      	ands	r3, r1
 801337e:	69b9      	ldr	r1, [r7, #24]
 8013380:	0148      	lsls	r0, r1, #5
 8013382:	69f9      	ldr	r1, [r7, #28]
 8013384:	4401      	add	r1, r0
 8013386:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801338a:	4313      	orrs	r3, r2
 801338c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	015a      	lsls	r2, r3, #5
 8013392:	69fb      	ldr	r3, [r7, #28]
 8013394:	4413      	add	r3, r2
 8013396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801339a:	691a      	ldr	r2, [r3, #16]
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	69db      	ldr	r3, [r3, #28]
 80133a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133a4:	69b9      	ldr	r1, [r7, #24]
 80133a6:	0148      	lsls	r0, r1, #5
 80133a8:	69f9      	ldr	r1, [r7, #28]
 80133aa:	4401      	add	r1, r0
 80133ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80133b0:	4313      	orrs	r3, r2
 80133b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80133b4:	79fb      	ldrb	r3, [r7, #7]
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d10d      	bne.n	80133d6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	691b      	ldr	r3, [r3, #16]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d009      	beq.n	80133d6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	6919      	ldr	r1, [r3, #16]
 80133c6:	69bb      	ldr	r3, [r7, #24]
 80133c8:	015a      	lsls	r2, r3, #5
 80133ca:	69fb      	ldr	r3, [r7, #28]
 80133cc:	4413      	add	r3, r2
 80133ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d2:	460a      	mov	r2, r1
 80133d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	791b      	ldrb	r3, [r3, #4]
 80133da:	2b01      	cmp	r3, #1
 80133dc:	d128      	bne.n	8013430 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80133de:	69fb      	ldr	r3, [r7, #28]
 80133e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133e4:	689b      	ldr	r3, [r3, #8]
 80133e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d110      	bne.n	8013410 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80133ee:	69bb      	ldr	r3, [r7, #24]
 80133f0:	015a      	lsls	r2, r3, #5
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	4413      	add	r3, r2
 80133f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	69ba      	ldr	r2, [r7, #24]
 80133fe:	0151      	lsls	r1, r2, #5
 8013400:	69fa      	ldr	r2, [r7, #28]
 8013402:	440a      	add	r2, r1
 8013404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801340c:	6013      	str	r3, [r2, #0]
 801340e:	e00f      	b.n	8013430 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	015a      	lsls	r2, r3, #5
 8013414:	69fb      	ldr	r3, [r7, #28]
 8013416:	4413      	add	r3, r2
 8013418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	69ba      	ldr	r2, [r7, #24]
 8013420:	0151      	lsls	r1, r2, #5
 8013422:	69fa      	ldr	r2, [r7, #28]
 8013424:	440a      	add	r2, r1
 8013426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801342a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801342e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013430:	69bb      	ldr	r3, [r7, #24]
 8013432:	015a      	lsls	r2, r3, #5
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	4413      	add	r3, r2
 8013438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	69ba      	ldr	r2, [r7, #24]
 8013440:	0151      	lsls	r1, r2, #5
 8013442:	69fa      	ldr	r2, [r7, #28]
 8013444:	440a      	add	r2, r1
 8013446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801344a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801344e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013450:	2300      	movs	r3, #0
}
 8013452:	4618      	mov	r0, r3
 8013454:	3720      	adds	r7, #32
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	1ff80000 	.word	0x1ff80000

08013460 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013460:	b480      	push	{r7}
 8013462:	b087      	sub	sp, #28
 8013464:	af00      	add	r7, sp, #0
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	60b9      	str	r1, [r7, #8]
 801346a:	4613      	mov	r3, r2
 801346c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	785b      	ldrb	r3, [r3, #1]
 801347c:	2b01      	cmp	r3, #1
 801347e:	f040 80ce 	bne.w	801361e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	699b      	ldr	r3, [r3, #24]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d132      	bne.n	80134f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	015a      	lsls	r2, r3, #5
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	4413      	add	r3, r2
 8013492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013496:	691b      	ldr	r3, [r3, #16]
 8013498:	693a      	ldr	r2, [r7, #16]
 801349a:	0151      	lsls	r1, r2, #5
 801349c:	697a      	ldr	r2, [r7, #20]
 801349e:	440a      	add	r2, r1
 80134a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80134a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80134ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	015a      	lsls	r2, r3, #5
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	4413      	add	r3, r2
 80134b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134ba:	691b      	ldr	r3, [r3, #16]
 80134bc:	693a      	ldr	r2, [r7, #16]
 80134be:	0151      	lsls	r1, r2, #5
 80134c0:	697a      	ldr	r2, [r7, #20]
 80134c2:	440a      	add	r2, r1
 80134c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	015a      	lsls	r2, r3, #5
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	4413      	add	r3, r2
 80134d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134da:	691b      	ldr	r3, [r3, #16]
 80134dc:	693a      	ldr	r2, [r7, #16]
 80134de:	0151      	lsls	r1, r2, #5
 80134e0:	697a      	ldr	r2, [r7, #20]
 80134e2:	440a      	add	r2, r1
 80134e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134e8:	0cdb      	lsrs	r3, r3, #19
 80134ea:	04db      	lsls	r3, r3, #19
 80134ec:	6113      	str	r3, [r2, #16]
 80134ee:	e04e      	b.n	801358e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	015a      	lsls	r2, r3, #5
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	4413      	add	r3, r2
 80134f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134fc:	691b      	ldr	r3, [r3, #16]
 80134fe:	693a      	ldr	r2, [r7, #16]
 8013500:	0151      	lsls	r1, r2, #5
 8013502:	697a      	ldr	r2, [r7, #20]
 8013504:	440a      	add	r2, r1
 8013506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801350a:	0cdb      	lsrs	r3, r3, #19
 801350c:	04db      	lsls	r3, r3, #19
 801350e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	015a      	lsls	r2, r3, #5
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	4413      	add	r3, r2
 8013518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801351c:	691b      	ldr	r3, [r3, #16]
 801351e:	693a      	ldr	r2, [r7, #16]
 8013520:	0151      	lsls	r1, r2, #5
 8013522:	697a      	ldr	r2, [r7, #20]
 8013524:	440a      	add	r2, r1
 8013526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801352a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801352e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013532:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	699a      	ldr	r2, [r3, #24]
 8013538:	68bb      	ldr	r3, [r7, #8]
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	429a      	cmp	r2, r3
 801353e:	d903      	bls.n	8013548 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	68da      	ldr	r2, [r3, #12]
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	015a      	lsls	r2, r3, #5
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	4413      	add	r3, r2
 8013550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013554:	691b      	ldr	r3, [r3, #16]
 8013556:	693a      	ldr	r2, [r7, #16]
 8013558:	0151      	lsls	r1, r2, #5
 801355a:	697a      	ldr	r2, [r7, #20]
 801355c:	440a      	add	r2, r1
 801355e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	015a      	lsls	r2, r3, #5
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	4413      	add	r3, r2
 8013570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013574:	691a      	ldr	r2, [r3, #16]
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	699b      	ldr	r3, [r3, #24]
 801357a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801357e:	6939      	ldr	r1, [r7, #16]
 8013580:	0148      	lsls	r0, r1, #5
 8013582:	6979      	ldr	r1, [r7, #20]
 8013584:	4401      	add	r1, r0
 8013586:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801358a:	4313      	orrs	r3, r2
 801358c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801358e:	79fb      	ldrb	r3, [r7, #7]
 8013590:	2b01      	cmp	r3, #1
 8013592:	d11e      	bne.n	80135d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	695b      	ldr	r3, [r3, #20]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d009      	beq.n	80135b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801359c:	693b      	ldr	r3, [r7, #16]
 801359e:	015a      	lsls	r2, r3, #5
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	4413      	add	r3, r2
 80135a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135a8:	461a      	mov	r2, r3
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	695b      	ldr	r3, [r3, #20]
 80135ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	015a      	lsls	r2, r3, #5
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	4413      	add	r3, r2
 80135b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	693a      	ldr	r2, [r7, #16]
 80135c0:	0151      	lsls	r1, r2, #5
 80135c2:	697a      	ldr	r2, [r7, #20]
 80135c4:	440a      	add	r2, r1
 80135c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80135ce:	6013      	str	r3, [r2, #0]
 80135d0:	e097      	b.n	8013702 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	015a      	lsls	r2, r3, #5
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	4413      	add	r3, r2
 80135da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	693a      	ldr	r2, [r7, #16]
 80135e2:	0151      	lsls	r1, r2, #5
 80135e4:	697a      	ldr	r2, [r7, #20]
 80135e6:	440a      	add	r2, r1
 80135e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80135f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	699b      	ldr	r3, [r3, #24]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	f000 8083 	beq.w	8013702 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	f003 030f 	and.w	r3, r3, #15
 801360c:	2101      	movs	r1, #1
 801360e:	fa01 f303 	lsl.w	r3, r1, r3
 8013612:	6979      	ldr	r1, [r7, #20]
 8013614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013618:	4313      	orrs	r3, r2
 801361a:	634b      	str	r3, [r1, #52]	; 0x34
 801361c:	e071      	b.n	8013702 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	015a      	lsls	r2, r3, #5
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	4413      	add	r3, r2
 8013626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801362a:	691b      	ldr	r3, [r3, #16]
 801362c:	693a      	ldr	r2, [r7, #16]
 801362e:	0151      	lsls	r1, r2, #5
 8013630:	697a      	ldr	r2, [r7, #20]
 8013632:	440a      	add	r2, r1
 8013634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013638:	0cdb      	lsrs	r3, r3, #19
 801363a:	04db      	lsls	r3, r3, #19
 801363c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	015a      	lsls	r2, r3, #5
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	4413      	add	r3, r2
 8013646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801364a:	691b      	ldr	r3, [r3, #16]
 801364c:	693a      	ldr	r2, [r7, #16]
 801364e:	0151      	lsls	r1, r2, #5
 8013650:	697a      	ldr	r2, [r7, #20]
 8013652:	440a      	add	r2, r1
 8013654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013658:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801365c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013660:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	699b      	ldr	r3, [r3, #24]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d003      	beq.n	8013672 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	68da      	ldr	r2, [r3, #12]
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	68da      	ldr	r2, [r3, #12]
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	015a      	lsls	r2, r3, #5
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	4413      	add	r3, r2
 8013682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013686:	691b      	ldr	r3, [r3, #16]
 8013688:	693a      	ldr	r2, [r7, #16]
 801368a:	0151      	lsls	r1, r2, #5
 801368c:	697a      	ldr	r2, [r7, #20]
 801368e:	440a      	add	r2, r1
 8013690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	015a      	lsls	r2, r3, #5
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	4413      	add	r3, r2
 80136a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136a6:	691a      	ldr	r2, [r3, #16]
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	69db      	ldr	r3, [r3, #28]
 80136ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80136b0:	6939      	ldr	r1, [r7, #16]
 80136b2:	0148      	lsls	r0, r1, #5
 80136b4:	6979      	ldr	r1, [r7, #20]
 80136b6:	4401      	add	r1, r0
 80136b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80136bc:	4313      	orrs	r3, r2
 80136be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80136c0:	79fb      	ldrb	r3, [r7, #7]
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d10d      	bne.n	80136e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	691b      	ldr	r3, [r3, #16]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d009      	beq.n	80136e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	6919      	ldr	r1, [r3, #16]
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	015a      	lsls	r2, r3, #5
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	4413      	add	r3, r2
 80136da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136de:	460a      	mov	r2, r1
 80136e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	015a      	lsls	r2, r3, #5
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	4413      	add	r3, r2
 80136ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	693a      	ldr	r2, [r7, #16]
 80136f2:	0151      	lsls	r1, r2, #5
 80136f4:	697a      	ldr	r2, [r7, #20]
 80136f6:	440a      	add	r2, r1
 80136f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013700:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013702:	2300      	movs	r3, #0
}
 8013704:	4618      	mov	r0, r3
 8013706:	371c      	adds	r7, #28
 8013708:	46bd      	mov	sp, r7
 801370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370e:	4770      	bx	lr

08013710 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013710:	b480      	push	{r7}
 8013712:	b087      	sub	sp, #28
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801371a:	2300      	movs	r3, #0
 801371c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801371e:	2300      	movs	r3, #0
 8013720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	785b      	ldrb	r3, [r3, #1]
 801372a:	2b01      	cmp	r3, #1
 801372c:	d14a      	bne.n	80137c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	015a      	lsls	r2, r3, #5
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	4413      	add	r3, r2
 8013738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013746:	f040 8086 	bne.w	8013856 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	015a      	lsls	r2, r3, #5
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	4413      	add	r3, r2
 8013754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	683a      	ldr	r2, [r7, #0]
 801375c:	7812      	ldrb	r2, [r2, #0]
 801375e:	0151      	lsls	r1, r2, #5
 8013760:	693a      	ldr	r2, [r7, #16]
 8013762:	440a      	add	r2, r1
 8013764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801376c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	015a      	lsls	r2, r3, #5
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	4413      	add	r3, r2
 8013778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	683a      	ldr	r2, [r7, #0]
 8013780:	7812      	ldrb	r2, [r2, #0]
 8013782:	0151      	lsls	r1, r2, #5
 8013784:	693a      	ldr	r2, [r7, #16]
 8013786:	440a      	add	r2, r1
 8013788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801378c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	3301      	adds	r3, #1
 8013796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	f242 7210 	movw	r2, #10000	; 0x2710
 801379e:	4293      	cmp	r3, r2
 80137a0:	d902      	bls.n	80137a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80137a2:	2301      	movs	r3, #1
 80137a4:	75fb      	strb	r3, [r7, #23]
          break;
 80137a6:	e056      	b.n	8013856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	015a      	lsls	r2, r3, #5
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	4413      	add	r3, r2
 80137b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80137bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80137c0:	d0e7      	beq.n	8013792 <USB_EPStopXfer+0x82>
 80137c2:	e048      	b.n	8013856 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	015a      	lsls	r2, r3, #5
 80137ca:	693b      	ldr	r3, [r7, #16]
 80137cc:	4413      	add	r3, r2
 80137ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80137d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80137dc:	d13b      	bne.n	8013856 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	015a      	lsls	r2, r3, #5
 80137e4:	693b      	ldr	r3, [r7, #16]
 80137e6:	4413      	add	r3, r2
 80137e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	683a      	ldr	r2, [r7, #0]
 80137f0:	7812      	ldrb	r2, [r2, #0]
 80137f2:	0151      	lsls	r1, r2, #5
 80137f4:	693a      	ldr	r2, [r7, #16]
 80137f6:	440a      	add	r2, r1
 80137f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013800:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	015a      	lsls	r2, r3, #5
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	4413      	add	r3, r2
 801380c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	683a      	ldr	r2, [r7, #0]
 8013814:	7812      	ldrb	r2, [r2, #0]
 8013816:	0151      	lsls	r1, r2, #5
 8013818:	693a      	ldr	r2, [r7, #16]
 801381a:	440a      	add	r2, r1
 801381c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013824:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	3301      	adds	r3, #1
 801382a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013832:	4293      	cmp	r3, r2
 8013834:	d902      	bls.n	801383c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013836:	2301      	movs	r3, #1
 8013838:	75fb      	strb	r3, [r7, #23]
          break;
 801383a:	e00c      	b.n	8013856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	781b      	ldrb	r3, [r3, #0]
 8013840:	015a      	lsls	r2, r3, #5
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	4413      	add	r3, r2
 8013846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013854:	d0e7      	beq.n	8013826 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013856:	7dfb      	ldrb	r3, [r7, #23]
}
 8013858:	4618      	mov	r0, r3
 801385a:	371c      	adds	r7, #28
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr

08013864 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013864:	b480      	push	{r7}
 8013866:	b089      	sub	sp, #36	; 0x24
 8013868:	af00      	add	r7, sp, #0
 801386a:	60f8      	str	r0, [r7, #12]
 801386c:	60b9      	str	r1, [r7, #8]
 801386e:	4611      	mov	r1, r2
 8013870:	461a      	mov	r2, r3
 8013872:	460b      	mov	r3, r1
 8013874:	71fb      	strb	r3, [r7, #7]
 8013876:	4613      	mov	r3, r2
 8013878:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013886:	2b00      	cmp	r3, #0
 8013888:	d123      	bne.n	80138d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801388a:	88bb      	ldrh	r3, [r7, #4]
 801388c:	3303      	adds	r3, #3
 801388e:	089b      	lsrs	r3, r3, #2
 8013890:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013892:	2300      	movs	r3, #0
 8013894:	61bb      	str	r3, [r7, #24]
 8013896:	e018      	b.n	80138ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013898:	79fb      	ldrb	r3, [r7, #7]
 801389a:	031a      	lsls	r2, r3, #12
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	4413      	add	r3, r2
 80138a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80138a4:	461a      	mov	r2, r3
 80138a6:	69fb      	ldr	r3, [r7, #28]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	3301      	adds	r3, #1
 80138b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	3301      	adds	r3, #1
 80138b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	3301      	adds	r3, #1
 80138bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	3301      	adds	r3, #1
 80138c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80138c4:	69bb      	ldr	r3, [r7, #24]
 80138c6:	3301      	adds	r3, #1
 80138c8:	61bb      	str	r3, [r7, #24]
 80138ca:	69ba      	ldr	r2, [r7, #24]
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d3e2      	bcc.n	8013898 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80138d2:	2300      	movs	r3, #0
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3724      	adds	r7, #36	; 0x24
 80138d8:	46bd      	mov	sp, r7
 80138da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138de:	4770      	bx	lr

080138e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80138e0:	b480      	push	{r7}
 80138e2:	b08b      	sub	sp, #44	; 0x2c
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	4613      	mov	r3, r2
 80138ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80138f6:	88fb      	ldrh	r3, [r7, #6]
 80138f8:	089b      	lsrs	r3, r3, #2
 80138fa:	b29b      	uxth	r3, r3
 80138fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80138fe:	88fb      	ldrh	r3, [r7, #6]
 8013900:	f003 0303 	and.w	r3, r3, #3
 8013904:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013906:	2300      	movs	r3, #0
 8013908:	623b      	str	r3, [r7, #32]
 801390a:	e014      	b.n	8013936 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801390c:	69bb      	ldr	r3, [r7, #24]
 801390e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013916:	601a      	str	r2, [r3, #0]
    pDest++;
 8013918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801391a:	3301      	adds	r3, #1
 801391c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013920:	3301      	adds	r3, #1
 8013922:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013926:	3301      	adds	r3, #1
 8013928:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801392c:	3301      	adds	r3, #1
 801392e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013930:	6a3b      	ldr	r3, [r7, #32]
 8013932:	3301      	adds	r3, #1
 8013934:	623b      	str	r3, [r7, #32]
 8013936:	6a3a      	ldr	r2, [r7, #32]
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	429a      	cmp	r2, r3
 801393c:	d3e6      	bcc.n	801390c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801393e:	8bfb      	ldrh	r3, [r7, #30]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d01e      	beq.n	8013982 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013944:	2300      	movs	r3, #0
 8013946:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801394e:	461a      	mov	r2, r3
 8013950:	f107 0310 	add.w	r3, r7, #16
 8013954:	6812      	ldr	r2, [r2, #0]
 8013956:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013958:	693a      	ldr	r2, [r7, #16]
 801395a:	6a3b      	ldr	r3, [r7, #32]
 801395c:	b2db      	uxtb	r3, r3
 801395e:	00db      	lsls	r3, r3, #3
 8013960:	fa22 f303 	lsr.w	r3, r2, r3
 8013964:	b2da      	uxtb	r2, r3
 8013966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013968:	701a      	strb	r2, [r3, #0]
      i++;
 801396a:	6a3b      	ldr	r3, [r7, #32]
 801396c:	3301      	adds	r3, #1
 801396e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013972:	3301      	adds	r3, #1
 8013974:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013976:	8bfb      	ldrh	r3, [r7, #30]
 8013978:	3b01      	subs	r3, #1
 801397a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801397c:	8bfb      	ldrh	r3, [r7, #30]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d1ea      	bne.n	8013958 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013984:	4618      	mov	r0, r3
 8013986:	372c      	adds	r7, #44	; 0x2c
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr

08013990 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013990:	b480      	push	{r7}
 8013992:	b085      	sub	sp, #20
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	785b      	ldrb	r3, [r3, #1]
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d12c      	bne.n	8013a06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	015a      	lsls	r2, r3, #5
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	4413      	add	r3, r2
 80139b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	db12      	blt.n	80139e4 <USB_EPSetStall+0x54>
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d00f      	beq.n	80139e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	015a      	lsls	r2, r3, #5
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	4413      	add	r3, r2
 80139cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	68ba      	ldr	r2, [r7, #8]
 80139d4:	0151      	lsls	r1, r2, #5
 80139d6:	68fa      	ldr	r2, [r7, #12]
 80139d8:	440a      	add	r2, r1
 80139da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80139e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	015a      	lsls	r2, r3, #5
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	4413      	add	r3, r2
 80139ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	68ba      	ldr	r2, [r7, #8]
 80139f4:	0151      	lsls	r1, r2, #5
 80139f6:	68fa      	ldr	r2, [r7, #12]
 80139f8:	440a      	add	r2, r1
 80139fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013a02:	6013      	str	r3, [r2, #0]
 8013a04:	e02b      	b.n	8013a5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	015a      	lsls	r2, r3, #5
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	4413      	add	r3, r2
 8013a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	db12      	blt.n	8013a3e <USB_EPSetStall+0xae>
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00f      	beq.n	8013a3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	015a      	lsls	r2, r3, #5
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	4413      	add	r3, r2
 8013a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	68ba      	ldr	r2, [r7, #8]
 8013a2e:	0151      	lsls	r1, r2, #5
 8013a30:	68fa      	ldr	r2, [r7, #12]
 8013a32:	440a      	add	r2, r1
 8013a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013a3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	015a      	lsls	r2, r3, #5
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	4413      	add	r3, r2
 8013a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	68ba      	ldr	r2, [r7, #8]
 8013a4e:	0151      	lsls	r1, r2, #5
 8013a50:	68fa      	ldr	r2, [r7, #12]
 8013a52:	440a      	add	r2, r1
 8013a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013a5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013a5e:	2300      	movs	r3, #0
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3714      	adds	r7, #20
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr

08013a6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	781b      	ldrb	r3, [r3, #0]
 8013a7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	785b      	ldrb	r3, [r3, #1]
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d128      	bne.n	8013ada <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	015a      	lsls	r2, r3, #5
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	4413      	add	r3, r2
 8013a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	68ba      	ldr	r2, [r7, #8]
 8013a98:	0151      	lsls	r1, r2, #5
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	440a      	add	r2, r1
 8013a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013aa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013aa6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	791b      	ldrb	r3, [r3, #4]
 8013aac:	2b03      	cmp	r3, #3
 8013aae:	d003      	beq.n	8013ab8 <USB_EPClearStall+0x4c>
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	791b      	ldrb	r3, [r3, #4]
 8013ab4:	2b02      	cmp	r3, #2
 8013ab6:	d138      	bne.n	8013b2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	015a      	lsls	r2, r3, #5
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	4413      	add	r3, r2
 8013ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	68ba      	ldr	r2, [r7, #8]
 8013ac8:	0151      	lsls	r1, r2, #5
 8013aca:	68fa      	ldr	r2, [r7, #12]
 8013acc:	440a      	add	r2, r1
 8013ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ad6:	6013      	str	r3, [r2, #0]
 8013ad8:	e027      	b.n	8013b2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	015a      	lsls	r2, r3, #5
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	4413      	add	r3, r2
 8013ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	68ba      	ldr	r2, [r7, #8]
 8013aea:	0151      	lsls	r1, r2, #5
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	440a      	add	r2, r1
 8013af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013af8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	791b      	ldrb	r3, [r3, #4]
 8013afe:	2b03      	cmp	r3, #3
 8013b00:	d003      	beq.n	8013b0a <USB_EPClearStall+0x9e>
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	791b      	ldrb	r3, [r3, #4]
 8013b06:	2b02      	cmp	r3, #2
 8013b08:	d10f      	bne.n	8013b2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	015a      	lsls	r2, r3, #5
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	4413      	add	r3, r2
 8013b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	68ba      	ldr	r2, [r7, #8]
 8013b1a:	0151      	lsls	r1, r2, #5
 8013b1c:	68fa      	ldr	r2, [r7, #12]
 8013b1e:	440a      	add	r2, r1
 8013b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013b2a:	2300      	movs	r3, #0
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3714      	adds	r7, #20
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr

08013b38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013b38:	b480      	push	{r7}
 8013b3a:	b085      	sub	sp, #20
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	460b      	mov	r3, r1
 8013b42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013b56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013b5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b62:	681a      	ldr	r2, [r3, #0]
 8013b64:	78fb      	ldrb	r3, [r7, #3]
 8013b66:	011b      	lsls	r3, r3, #4
 8013b68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013b6c:	68f9      	ldr	r1, [r7, #12]
 8013b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b72:	4313      	orrs	r3, r2
 8013b74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013b76:	2300      	movs	r3, #0
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3714      	adds	r7, #20
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b82:	4770      	bx	lr

08013b84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013b84:	b480      	push	{r7}
 8013b86:	b085      	sub	sp, #20
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	68fa      	ldr	r2, [r7, #12]
 8013b9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013b9e:	f023 0303 	bic.w	r3, r3, #3
 8013ba2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013baa:	685b      	ldr	r3, [r3, #4]
 8013bac:	68fa      	ldr	r2, [r7, #12]
 8013bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bb2:	f023 0302 	bic.w	r3, r3, #2
 8013bb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013bb8:	2300      	movs	r3, #0
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3714      	adds	r7, #20
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr

08013bc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013bc6:	b480      	push	{r7}
 8013bc8:	b085      	sub	sp, #20
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	68fa      	ldr	r2, [r7, #12]
 8013bdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013be0:	f023 0303 	bic.w	r3, r3, #3
 8013be4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bec:	685b      	ldr	r3, [r3, #4]
 8013bee:	68fa      	ldr	r2, [r7, #12]
 8013bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bf4:	f043 0302 	orr.w	r3, r3, #2
 8013bf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013bfa:	2300      	movs	r3, #0
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3714      	adds	r7, #20
 8013c00:	46bd      	mov	sp, r7
 8013c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c06:	4770      	bx	lr

08013c08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b085      	sub	sp, #20
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	695b      	ldr	r3, [r3, #20]
 8013c14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	699b      	ldr	r3, [r3, #24]
 8013c1a:	68fa      	ldr	r2, [r7, #12]
 8013c1c:	4013      	ands	r3, r2
 8013c1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013c20:	68fb      	ldr	r3, [r7, #12]
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3714      	adds	r7, #20
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr

08013c2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c2e:	b480      	push	{r7}
 8013c30:	b085      	sub	sp, #20
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c40:	699b      	ldr	r3, [r3, #24]
 8013c42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c4a:	69db      	ldr	r3, [r3, #28]
 8013c4c:	68ba      	ldr	r2, [r7, #8]
 8013c4e:	4013      	ands	r3, r2
 8013c50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	0c1b      	lsrs	r3, r3, #16
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3714      	adds	r7, #20
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr

08013c62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c62:	b480      	push	{r7}
 8013c64:	b085      	sub	sp, #20
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c74:	699b      	ldr	r3, [r3, #24]
 8013c76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c7e:	69db      	ldr	r3, [r3, #28]
 8013c80:	68ba      	ldr	r2, [r7, #8]
 8013c82:	4013      	ands	r3, r2
 8013c84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	b29b      	uxth	r3, r3
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3714      	adds	r7, #20
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr

08013c96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013c96:	b480      	push	{r7}
 8013c98:	b085      	sub	sp, #20
 8013c9a:	af00      	add	r7, sp, #0
 8013c9c:	6078      	str	r0, [r7, #4]
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013ca6:	78fb      	ldrb	r3, [r7, #3]
 8013ca8:	015a      	lsls	r2, r3, #5
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	4413      	add	r3, r2
 8013cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cb2:	689b      	ldr	r3, [r3, #8]
 8013cb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cbc:	695b      	ldr	r3, [r3, #20]
 8013cbe:	68ba      	ldr	r2, [r7, #8]
 8013cc0:	4013      	ands	r3, r2
 8013cc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013cc4:	68bb      	ldr	r3, [r7, #8]
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	3714      	adds	r7, #20
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd0:	4770      	bx	lr

08013cd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013cd2:	b480      	push	{r7}
 8013cd4:	b087      	sub	sp, #28
 8013cd6:	af00      	add	r7, sp, #0
 8013cd8:	6078      	str	r0, [r7, #4]
 8013cda:	460b      	mov	r3, r1
 8013cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ce8:	691b      	ldr	r3, [r3, #16]
 8013cea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cf4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013cf6:	78fb      	ldrb	r3, [r7, #3]
 8013cf8:	f003 030f 	and.w	r3, r3, #15
 8013cfc:	68fa      	ldr	r2, [r7, #12]
 8013cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8013d02:	01db      	lsls	r3, r3, #7
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	693a      	ldr	r2, [r7, #16]
 8013d08:	4313      	orrs	r3, r2
 8013d0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013d0c:	78fb      	ldrb	r3, [r7, #3]
 8013d0e:	015a      	lsls	r2, r3, #5
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	4413      	add	r3, r2
 8013d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d18:	689b      	ldr	r3, [r3, #8]
 8013d1a:	693a      	ldr	r2, [r7, #16]
 8013d1c:	4013      	ands	r3, r2
 8013d1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013d20:	68bb      	ldr	r3, [r7, #8]
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	371c      	adds	r7, #28
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr

08013d2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013d2e:	b480      	push	{r7}
 8013d30:	b083      	sub	sp, #12
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	695b      	ldr	r3, [r3, #20]
 8013d3a:	f003 0301 	and.w	r3, r3, #1
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	370c      	adds	r7, #12
 8013d42:	46bd      	mov	sp, r7
 8013d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d48:	4770      	bx	lr

08013d4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013d4a:	b480      	push	{r7}
 8013d4c:	b085      	sub	sp, #20
 8013d4e:	af00      	add	r7, sp, #0
 8013d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	68fa      	ldr	r2, [r7, #12]
 8013d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013d68:	f023 0307 	bic.w	r3, r3, #7
 8013d6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	68fa      	ldr	r2, [r7, #12]
 8013d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013d80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013d82:	2300      	movs	r3, #0
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3714      	adds	r7, #20
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8e:	4770      	bx	lr

08013d90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013d90:	b480      	push	{r7}
 8013d92:	b087      	sub	sp, #28
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	60f8      	str	r0, [r7, #12]
 8013d98:	460b      	mov	r3, r1
 8013d9a:	607a      	str	r2, [r7, #4]
 8013d9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	333c      	adds	r3, #60	; 0x3c
 8013da6:	3304      	adds	r3, #4
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	4a26      	ldr	r2, [pc, #152]	; (8013e48 <USB_EP0_OutStart+0xb8>)
 8013db0:	4293      	cmp	r3, r2
 8013db2:	d90a      	bls.n	8013dca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013dc4:	d101      	bne.n	8013dca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	e037      	b.n	8013e3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ddc:	691b      	ldr	r3, [r3, #16]
 8013dde:	697a      	ldr	r2, [r7, #20]
 8013de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013de4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013df0:	691b      	ldr	r3, [r3, #16]
 8013df2:	697a      	ldr	r2, [r7, #20]
 8013df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013df8:	f043 0318 	orr.w	r3, r3, #24
 8013dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e04:	691b      	ldr	r3, [r3, #16]
 8013e06:	697a      	ldr	r2, [r7, #20]
 8013e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013e10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013e12:	7afb      	ldrb	r3, [r7, #11]
 8013e14:	2b01      	cmp	r3, #1
 8013e16:	d10f      	bne.n	8013e38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e1e:	461a      	mov	r2, r3
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	697a      	ldr	r2, [r7, #20]
 8013e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013e36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013e38:	2300      	movs	r3, #0
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	371c      	adds	r7, #28
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	4f54300a 	.word	0x4f54300a

08013e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b085      	sub	sp, #20
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013e54:	2300      	movs	r3, #0
 8013e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	4a13      	ldr	r2, [pc, #76]	; (8013eb0 <USB_CoreReset+0x64>)
 8013e62:	4293      	cmp	r3, r2
 8013e64:	d901      	bls.n	8013e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013e66:	2303      	movs	r3, #3
 8013e68:	e01b      	b.n	8013ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	691b      	ldr	r3, [r3, #16]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	daf2      	bge.n	8013e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013e72:	2300      	movs	r3, #0
 8013e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	691b      	ldr	r3, [r3, #16]
 8013e7a:	f043 0201 	orr.w	r2, r3, #1
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	3301      	adds	r3, #1
 8013e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	4a09      	ldr	r2, [pc, #36]	; (8013eb0 <USB_CoreReset+0x64>)
 8013e8c:	4293      	cmp	r3, r2
 8013e8e:	d901      	bls.n	8013e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013e90:	2303      	movs	r3, #3
 8013e92:	e006      	b.n	8013ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	691b      	ldr	r3, [r3, #16]
 8013e98:	f003 0301 	and.w	r3, r3, #1
 8013e9c:	2b01      	cmp	r3, #1
 8013e9e:	d0f0      	beq.n	8013e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8013ea0:	2300      	movs	r3, #0
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3714      	adds	r7, #20
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eac:	4770      	bx	lr
 8013eae:	bf00      	nop
 8013eb0:	00030d40 	.word	0x00030d40

08013eb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013eb8:	4904      	ldr	r1, [pc, #16]	; (8013ecc <MX_FATFS_Init+0x18>)
 8013eba:	4805      	ldr	r0, [pc, #20]	; (8013ed0 <MX_FATFS_Init+0x1c>)
 8013ebc:	f006 f852 	bl	8019f64 <FATFS_LinkDriver>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	461a      	mov	r2, r3
 8013ec4:	4b03      	ldr	r3, [pc, #12]	; (8013ed4 <MX_FATFS_Init+0x20>)
 8013ec6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013ec8:	bf00      	nop
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	20000fcc 	.word	0x20000fcc
 8013ed0:	08032658 	.word	0x08032658
 8013ed4:	20000fc8 	.word	0x20000fc8

08013ed8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013ed8:	b480      	push	{r7}
 8013eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013edc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee6:	4770      	bx	lr

08013ee8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b082      	sub	sp, #8
 8013eec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013ef2:	f000 f879 	bl	8013fe8 <BSP_SD_IsDetected>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2b01      	cmp	r3, #1
 8013efa:	d001      	beq.n	8013f00 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8013efc:	2301      	movs	r3, #1
 8013efe:	e012      	b.n	8013f26 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013f00:	480b      	ldr	r0, [pc, #44]	; (8013f30 <BSP_SD_Init+0x48>)
 8013f02:	f7f9 fbb9 	bl	800d678 <HAL_SD_Init>
 8013f06:	4603      	mov	r3, r0
 8013f08:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013f0a:	79fb      	ldrb	r3, [r7, #7]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d109      	bne.n	8013f24 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8013f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013f14:	4806      	ldr	r0, [pc, #24]	; (8013f30 <BSP_SD_Init+0x48>)
 8013f16:	f7fa f993 	bl	800e240 <HAL_SD_ConfigWideBusOperation>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d001      	beq.n	8013f24 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013f20:	2301      	movs	r3, #1
 8013f22:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013f24:	79fb      	ldrb	r3, [r7, #7]
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3708      	adds	r7, #8
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	200004b4 	.word	0x200004b4

08013f34 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b088      	sub	sp, #32
 8013f38:	af02      	add	r7, sp, #8
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
 8013f40:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013f42:	2300      	movs	r3, #0
 8013f44:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	9300      	str	r3, [sp, #0]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	68ba      	ldr	r2, [r7, #8]
 8013f4e:	68f9      	ldr	r1, [r7, #12]
 8013f50:	4806      	ldr	r0, [pc, #24]	; (8013f6c <BSP_SD_ReadBlocks+0x38>)
 8013f52:	f7f9 fc41 	bl	800d7d8 <HAL_SD_ReadBlocks>
 8013f56:	4603      	mov	r3, r0
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d001      	beq.n	8013f60 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3718      	adds	r7, #24
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	200004b4 	.word	0x200004b4

08013f70 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b088      	sub	sp, #32
 8013f74:	af02      	add	r7, sp, #8
 8013f76:	60f8      	str	r0, [r7, #12]
 8013f78:	60b9      	str	r1, [r7, #8]
 8013f7a:	607a      	str	r2, [r7, #4]
 8013f7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	9300      	str	r3, [sp, #0]
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	68ba      	ldr	r2, [r7, #8]
 8013f8a:	68f9      	ldr	r1, [r7, #12]
 8013f8c:	4806      	ldr	r0, [pc, #24]	; (8013fa8 <BSP_SD_WriteBlocks+0x38>)
 8013f8e:	f7f9 fe01 	bl	800db94 <HAL_SD_WriteBlocks>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d001      	beq.n	8013f9c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013f98:	2301      	movs	r3, #1
 8013f9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3718      	adds	r7, #24
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	200004b4 	.word	0x200004b4

08013fac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013fb0:	4805      	ldr	r0, [pc, #20]	; (8013fc8 <BSP_SD_GetCardState+0x1c>)
 8013fb2:	f7fa f9df 	bl	800e374 <HAL_SD_GetCardState>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b04      	cmp	r3, #4
 8013fba:	bf14      	ite	ne
 8013fbc:	2301      	movne	r3, #1
 8013fbe:	2300      	moveq	r3, #0
 8013fc0:	b2db      	uxtb	r3, r3
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	200004b4 	.word	0x200004b4

08013fcc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8013fd4:	6879      	ldr	r1, [r7, #4]
 8013fd6:	4803      	ldr	r0, [pc, #12]	; (8013fe4 <BSP_SD_GetCardInfo+0x18>)
 8013fd8:	f7fa f906 	bl	800e1e8 <HAL_SD_GetCardInfo>
}
 8013fdc:	bf00      	nop
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	200004b4 	.word	0x200004b4

08013fe8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013fe8:	b480      	push	{r7}
 8013fea:	b083      	sub	sp, #12
 8013fec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013fee:	2301      	movs	r3, #1
 8013ff0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8013ff2:	79fb      	ldrb	r3, [r7, #7]
 8013ff4:	b2db      	uxtb	r3, r3
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	370c      	adds	r7, #12
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr
	...

08014004 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b082      	sub	sp, #8
 8014008:	af00      	add	r7, sp, #0
 801400a:	4603      	mov	r3, r0
 801400c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801400e:	4b0b      	ldr	r3, [pc, #44]	; (801403c <SD_CheckStatus+0x38>)
 8014010:	2201      	movs	r2, #1
 8014012:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014014:	f7ff ffca 	bl	8013fac <BSP_SD_GetCardState>
 8014018:	4603      	mov	r3, r0
 801401a:	2b00      	cmp	r3, #0
 801401c:	d107      	bne.n	801402e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801401e:	4b07      	ldr	r3, [pc, #28]	; (801403c <SD_CheckStatus+0x38>)
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	b2db      	uxtb	r3, r3
 8014024:	f023 0301 	bic.w	r3, r3, #1
 8014028:	b2da      	uxtb	r2, r3
 801402a:	4b04      	ldr	r3, [pc, #16]	; (801403c <SD_CheckStatus+0x38>)
 801402c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801402e:	4b03      	ldr	r3, [pc, #12]	; (801403c <SD_CheckStatus+0x38>)
 8014030:	781b      	ldrb	r3, [r3, #0]
 8014032:	b2db      	uxtb	r3, r3
}
 8014034:	4618      	mov	r0, r3
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	2000000d 	.word	0x2000000d

08014040 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	4603      	mov	r3, r0
 8014048:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801404a:	4b0b      	ldr	r3, [pc, #44]	; (8014078 <SD_initialize+0x38>)
 801404c:	2201      	movs	r2, #1
 801404e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014050:	f7ff ff4a 	bl	8013ee8 <BSP_SD_Init>
 8014054:	4603      	mov	r3, r0
 8014056:	2b00      	cmp	r3, #0
 8014058:	d107      	bne.n	801406a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 801405a:	79fb      	ldrb	r3, [r7, #7]
 801405c:	4618      	mov	r0, r3
 801405e:	f7ff ffd1 	bl	8014004 <SD_CheckStatus>
 8014062:	4603      	mov	r3, r0
 8014064:	461a      	mov	r2, r3
 8014066:	4b04      	ldr	r3, [pc, #16]	; (8014078 <SD_initialize+0x38>)
 8014068:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801406a:	4b03      	ldr	r3, [pc, #12]	; (8014078 <SD_initialize+0x38>)
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	b2db      	uxtb	r3, r3
}
 8014070:	4618      	mov	r0, r3
 8014072:	3708      	adds	r7, #8
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}
 8014078:	2000000d 	.word	0x2000000d

0801407c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	4603      	mov	r3, r0
 8014084:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014086:	79fb      	ldrb	r3, [r7, #7]
 8014088:	4618      	mov	r0, r3
 801408a:	f7ff ffbb 	bl	8014004 <SD_CheckStatus>
 801408e:	4603      	mov	r3, r0
}
 8014090:	4618      	mov	r0, r3
 8014092:	3708      	adds	r7, #8
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b086      	sub	sp, #24
 801409c:	af00      	add	r7, sp, #0
 801409e:	60b9      	str	r1, [r7, #8]
 80140a0:	607a      	str	r2, [r7, #4]
 80140a2:	603b      	str	r3, [r7, #0]
 80140a4:	4603      	mov	r3, r0
 80140a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80140a8:	2301      	movs	r3, #1
 80140aa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80140ac:	f04f 33ff 	mov.w	r3, #4294967295
 80140b0:	683a      	ldr	r2, [r7, #0]
 80140b2:	6879      	ldr	r1, [r7, #4]
 80140b4:	68b8      	ldr	r0, [r7, #8]
 80140b6:	f7ff ff3d 	bl	8013f34 <BSP_SD_ReadBlocks>
 80140ba:	4603      	mov	r3, r0
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d107      	bne.n	80140d0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80140c0:	bf00      	nop
 80140c2:	f7ff ff73 	bl	8013fac <BSP_SD_GetCardState>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d1fa      	bne.n	80140c2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80140cc:	2300      	movs	r3, #0
 80140ce:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80140d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3718      	adds	r7, #24
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}

080140da <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80140da:	b580      	push	{r7, lr}
 80140dc:	b086      	sub	sp, #24
 80140de:	af00      	add	r7, sp, #0
 80140e0:	60b9      	str	r1, [r7, #8]
 80140e2:	607a      	str	r2, [r7, #4]
 80140e4:	603b      	str	r3, [r7, #0]
 80140e6:	4603      	mov	r3, r0
 80140e8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80140ea:	2301      	movs	r3, #1
 80140ec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80140ee:	f04f 33ff 	mov.w	r3, #4294967295
 80140f2:	683a      	ldr	r2, [r7, #0]
 80140f4:	6879      	ldr	r1, [r7, #4]
 80140f6:	68b8      	ldr	r0, [r7, #8]
 80140f8:	f7ff ff3a 	bl	8013f70 <BSP_SD_WriteBlocks>
 80140fc:	4603      	mov	r3, r0
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d107      	bne.n	8014112 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8014102:	bf00      	nop
 8014104:	f7ff ff52 	bl	8013fac <BSP_SD_GetCardState>
 8014108:	4603      	mov	r3, r0
 801410a:	2b00      	cmp	r3, #0
 801410c:	d1fa      	bne.n	8014104 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801410e:	2300      	movs	r3, #0
 8014110:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8014112:	7dfb      	ldrb	r3, [r7, #23]
}
 8014114:	4618      	mov	r0, r3
 8014116:	3718      	adds	r7, #24
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b08c      	sub	sp, #48	; 0x30
 8014120:	af00      	add	r7, sp, #0
 8014122:	4603      	mov	r3, r0
 8014124:	603a      	str	r2, [r7, #0]
 8014126:	71fb      	strb	r3, [r7, #7]
 8014128:	460b      	mov	r3, r1
 801412a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801412c:	2301      	movs	r3, #1
 801412e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014132:	4b25      	ldr	r3, [pc, #148]	; (80141c8 <SD_ioctl+0xac>)
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	b2db      	uxtb	r3, r3
 8014138:	f003 0301 	and.w	r3, r3, #1
 801413c:	2b00      	cmp	r3, #0
 801413e:	d001      	beq.n	8014144 <SD_ioctl+0x28>
 8014140:	2303      	movs	r3, #3
 8014142:	e03c      	b.n	80141be <SD_ioctl+0xa2>

  switch (cmd)
 8014144:	79bb      	ldrb	r3, [r7, #6]
 8014146:	2b03      	cmp	r3, #3
 8014148:	d834      	bhi.n	80141b4 <SD_ioctl+0x98>
 801414a:	a201      	add	r2, pc, #4	; (adr r2, 8014150 <SD_ioctl+0x34>)
 801414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014150:	08014161 	.word	0x08014161
 8014154:	08014169 	.word	0x08014169
 8014158:	08014181 	.word	0x08014181
 801415c:	0801419b 	.word	0x0801419b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014160:	2300      	movs	r3, #0
 8014162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014166:	e028      	b.n	80141ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014168:	f107 030c 	add.w	r3, r7, #12
 801416c:	4618      	mov	r0, r3
 801416e:	f7ff ff2d 	bl	8013fcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014178:	2300      	movs	r3, #0
 801417a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801417e:	e01c      	b.n	80141ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014180:	f107 030c 	add.w	r3, r7, #12
 8014184:	4618      	mov	r0, r3
 8014186:	f7ff ff21 	bl	8013fcc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801418c:	b29a      	uxth	r2, r3
 801418e:	683b      	ldr	r3, [r7, #0]
 8014190:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014192:	2300      	movs	r3, #0
 8014194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014198:	e00f      	b.n	80141ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801419a:	f107 030c 	add.w	r3, r7, #12
 801419e:	4618      	mov	r0, r3
 80141a0:	f7ff ff14 	bl	8013fcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80141a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a6:	0a5a      	lsrs	r2, r3, #9
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80141ac:	2300      	movs	r3, #0
 80141ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80141b2:	e002      	b.n	80141ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80141b4:	2304      	movs	r3, #4
 80141b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80141ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80141be:	4618      	mov	r0, r3
 80141c0:	3730      	adds	r7, #48	; 0x30
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
 80141c6:	bf00      	nop
 80141c8:	2000000d 	.word	0x2000000d

080141cc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b084      	sub	sp, #16
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	460b      	mov	r3, r1
 80141d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80141d8:	f44f 701d 	mov.w	r0, #628	; 0x274
 80141dc:	f007 ff3a 	bl	801c054 <USBD_static_malloc>
 80141e0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d109      	bne.n	80141fc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	32b0      	adds	r2, #176	; 0xb0
 80141f2:	2100      	movs	r1, #0
 80141f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80141f8:	2302      	movs	r3, #2
 80141fa:	e06e      	b.n	80142da <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	32b0      	adds	r2, #176	; 0xb0
 8014206:	68f9      	ldr	r1, [r7, #12]
 8014208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	32b0      	adds	r2, #176	; 0xb0
 8014216:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	7c1b      	ldrb	r3, [r3, #16]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d12b      	bne.n	8014280 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8014228:	4b2e      	ldr	r3, [pc, #184]	; (80142e4 <USBD_MSC_Init+0x118>)
 801422a:	7819      	ldrb	r1, [r3, #0]
 801422c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014230:	2202      	movs	r2, #2
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	f007 fdcb 	bl	801bdce <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8014238:	4b2a      	ldr	r3, [pc, #168]	; (80142e4 <USBD_MSC_Init+0x118>)
 801423a:	781b      	ldrb	r3, [r3, #0]
 801423c:	f003 020f 	and.w	r2, r3, #15
 8014240:	6879      	ldr	r1, [r7, #4]
 8014242:	4613      	mov	r3, r2
 8014244:	009b      	lsls	r3, r3, #2
 8014246:	4413      	add	r3, r2
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	440b      	add	r3, r1
 801424c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014250:	2201      	movs	r2, #1
 8014252:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8014254:	4b24      	ldr	r3, [pc, #144]	; (80142e8 <USBD_MSC_Init+0x11c>)
 8014256:	7819      	ldrb	r1, [r3, #0]
 8014258:	f44f 7300 	mov.w	r3, #512	; 0x200
 801425c:	2202      	movs	r2, #2
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f007 fdb5 	bl	801bdce <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8014264:	4b20      	ldr	r3, [pc, #128]	; (80142e8 <USBD_MSC_Init+0x11c>)
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	f003 020f 	and.w	r2, r3, #15
 801426c:	6879      	ldr	r1, [r7, #4]
 801426e:	4613      	mov	r3, r2
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	4413      	add	r3, r2
 8014274:	009b      	lsls	r3, r3, #2
 8014276:	440b      	add	r3, r1
 8014278:	3324      	adds	r3, #36	; 0x24
 801427a:	2201      	movs	r2, #1
 801427c:	801a      	strh	r2, [r3, #0]
 801427e:	e028      	b.n	80142d2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8014280:	4b18      	ldr	r3, [pc, #96]	; (80142e4 <USBD_MSC_Init+0x118>)
 8014282:	7819      	ldrb	r1, [r3, #0]
 8014284:	2340      	movs	r3, #64	; 0x40
 8014286:	2202      	movs	r2, #2
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f007 fda0 	bl	801bdce <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801428e:	4b15      	ldr	r3, [pc, #84]	; (80142e4 <USBD_MSC_Init+0x118>)
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	f003 020f 	and.w	r2, r3, #15
 8014296:	6879      	ldr	r1, [r7, #4]
 8014298:	4613      	mov	r3, r2
 801429a:	009b      	lsls	r3, r3, #2
 801429c:	4413      	add	r3, r2
 801429e:	009b      	lsls	r3, r3, #2
 80142a0:	440b      	add	r3, r1
 80142a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80142a6:	2201      	movs	r2, #1
 80142a8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80142aa:	4b0f      	ldr	r3, [pc, #60]	; (80142e8 <USBD_MSC_Init+0x11c>)
 80142ac:	7819      	ldrb	r1, [r3, #0]
 80142ae:	2340      	movs	r3, #64	; 0x40
 80142b0:	2202      	movs	r2, #2
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f007 fd8b 	bl	801bdce <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80142b8:	4b0b      	ldr	r3, [pc, #44]	; (80142e8 <USBD_MSC_Init+0x11c>)
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	f003 020f 	and.w	r2, r3, #15
 80142c0:	6879      	ldr	r1, [r7, #4]
 80142c2:	4613      	mov	r3, r2
 80142c4:	009b      	lsls	r3, r3, #2
 80142c6:	4413      	add	r3, r2
 80142c8:	009b      	lsls	r3, r3, #2
 80142ca:	440b      	add	r3, r1
 80142cc:	3324      	adds	r3, #36	; 0x24
 80142ce:	2201      	movs	r2, #1
 80142d0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f000 fa2c 	bl	8014730 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80142d8:	2300      	movs	r3, #0
}
 80142da:	4618      	mov	r0, r3
 80142dc:	3710      	adds	r7, #16
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}
 80142e2:	bf00      	nop
 80142e4:	20000073 	.word	0x20000073
 80142e8:	20000072 	.word	0x20000072

080142ec <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b082      	sub	sp, #8
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	460b      	mov	r3, r1
 80142f6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80142f8:	4b26      	ldr	r3, [pc, #152]	; (8014394 <USBD_MSC_DeInit+0xa8>)
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	4619      	mov	r1, r3
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f007 fd8b 	bl	801be1a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8014304:	4b23      	ldr	r3, [pc, #140]	; (8014394 <USBD_MSC_DeInit+0xa8>)
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	f003 020f 	and.w	r2, r3, #15
 801430c:	6879      	ldr	r1, [r7, #4]
 801430e:	4613      	mov	r3, r2
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	4413      	add	r3, r2
 8014314:	009b      	lsls	r3, r3, #2
 8014316:	440b      	add	r3, r1
 8014318:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801431c:	2200      	movs	r2, #0
 801431e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8014320:	4b1d      	ldr	r3, [pc, #116]	; (8014398 <USBD_MSC_DeInit+0xac>)
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	4619      	mov	r1, r3
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f007 fd77 	bl	801be1a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 801432c:	4b1a      	ldr	r3, [pc, #104]	; (8014398 <USBD_MSC_DeInit+0xac>)
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	f003 020f 	and.w	r2, r3, #15
 8014334:	6879      	ldr	r1, [r7, #4]
 8014336:	4613      	mov	r3, r2
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	4413      	add	r3, r2
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	440b      	add	r3, r1
 8014340:	3324      	adds	r3, #36	; 0x24
 8014342:	2200      	movs	r2, #0
 8014344:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	32b0      	adds	r2, #176	; 0xb0
 8014350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d018      	beq.n	801438a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f000 fa67 	bl	801482c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	32b0      	adds	r2, #176	; 0xb0
 8014368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801436c:	4618      	mov	r0, r3
 801436e:	f007 fe7f 	bl	801c070 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	32b0      	adds	r2, #176	; 0xb0
 801437c:	2100      	movs	r1, #0
 801437e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2200      	movs	r2, #0
 8014386:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801438a:	2300      	movs	r3, #0
}
 801438c:	4618      	mov	r0, r3
 801438e:	3708      	adds	r7, #8
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}
 8014394:	20000073 	.word	0x20000073
 8014398:	20000072 	.word	0x20000072

0801439c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b086      	sub	sp, #24
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
 80143a4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	32b0      	adds	r2, #176	; 0xb0
 80143b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143b4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80143b6:	2300      	movs	r3, #0
 80143b8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80143ba:	2300      	movs	r3, #0
 80143bc:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80143be:	693b      	ldr	r3, [r7, #16]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d101      	bne.n	80143c8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80143c4:	2303      	movs	r3, #3
 80143c6:	e0e1      	b.n	801458c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d053      	beq.n	801447c <USBD_MSC_Setup+0xe0>
 80143d4:	2b20      	cmp	r3, #32
 80143d6:	f040 80d1 	bne.w	801457c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	785b      	ldrb	r3, [r3, #1]
 80143de:	2bfe      	cmp	r3, #254	; 0xfe
 80143e0:	d002      	beq.n	80143e8 <USBD_MSC_Setup+0x4c>
 80143e2:	2bff      	cmp	r3, #255	; 0xff
 80143e4:	d02a      	beq.n	801443c <USBD_MSC_Setup+0xa0>
 80143e6:	e041      	b.n	801446c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	885b      	ldrh	r3, [r3, #2]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d11e      	bne.n	801442e <USBD_MSC_Setup+0x92>
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	88db      	ldrh	r3, [r3, #6]
 80143f4:	2b01      	cmp	r3, #1
 80143f6:	d11a      	bne.n	801442e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80143fe:	2b00      	cmp	r3, #0
 8014400:	da15      	bge.n	801442e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014408:	687a      	ldr	r2, [r7, #4]
 801440a:	33b0      	adds	r3, #176	; 0xb0
 801440c:	009b      	lsls	r3, r3, #2
 801440e:	4413      	add	r3, r2
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	699b      	ldr	r3, [r3, #24]
 8014414:	4798      	blx	r3
 8014416:	4603      	mov	r3, r0
 8014418:	461a      	mov	r2, r3
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	2201      	movs	r2, #1
 8014422:	4619      	mov	r1, r3
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f003 f8f9 	bl	801761c <USBD_CtlSendData>
 801442a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801442c:	e025      	b.n	801447a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801442e:	6839      	ldr	r1, [r7, #0]
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f003 f882 	bl	801753a <USBD_CtlError>
            ret = USBD_FAIL;
 8014436:	2303      	movs	r3, #3
 8014438:	75fb      	strb	r3, [r7, #23]
          break;
 801443a:	e01e      	b.n	801447a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	885b      	ldrh	r3, [r3, #2]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d10c      	bne.n	801445e <USBD_MSC_Setup+0xc2>
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	88db      	ldrh	r3, [r3, #6]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d108      	bne.n	801445e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014452:	2b00      	cmp	r3, #0
 8014454:	db03      	blt.n	801445e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f000 f9b4 	bl	80147c4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801445c:	e00d      	b.n	801447a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801445e:	6839      	ldr	r1, [r7, #0]
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f003 f86a 	bl	801753a <USBD_CtlError>
            ret = USBD_FAIL;
 8014466:	2303      	movs	r3, #3
 8014468:	75fb      	strb	r3, [r7, #23]
          break;
 801446a:	e006      	b.n	801447a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 801446c:	6839      	ldr	r1, [r7, #0]
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f003 f863 	bl	801753a <USBD_CtlError>
          ret = USBD_FAIL;
 8014474:	2303      	movs	r3, #3
 8014476:	75fb      	strb	r3, [r7, #23]
          break;
 8014478:	bf00      	nop
      }
      break;
 801447a:	e086      	b.n	801458a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	785b      	ldrb	r3, [r3, #1]
 8014480:	2b0b      	cmp	r3, #11
 8014482:	d872      	bhi.n	801456a <USBD_MSC_Setup+0x1ce>
 8014484:	a201      	add	r2, pc, #4	; (adr r2, 801448c <USBD_MSC_Setup+0xf0>)
 8014486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801448a:	bf00      	nop
 801448c:	080144bd 	.word	0x080144bd
 8014490:	08014539 	.word	0x08014539
 8014494:	0801456b 	.word	0x0801456b
 8014498:	0801456b 	.word	0x0801456b
 801449c:	0801456b 	.word	0x0801456b
 80144a0:	0801456b 	.word	0x0801456b
 80144a4:	0801456b 	.word	0x0801456b
 80144a8:	0801456b 	.word	0x0801456b
 80144ac:	0801456b 	.word	0x0801456b
 80144b0:	0801456b 	.word	0x0801456b
 80144b4:	080144e7 	.word	0x080144e7
 80144b8:	08014511 	.word	0x08014511
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	2b03      	cmp	r3, #3
 80144c6:	d107      	bne.n	80144d8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80144c8:	f107 030e 	add.w	r3, r7, #14
 80144cc:	2202      	movs	r2, #2
 80144ce:	4619      	mov	r1, r3
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f003 f8a3 	bl	801761c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80144d6:	e050      	b.n	801457a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80144d8:	6839      	ldr	r1, [r7, #0]
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f003 f82d 	bl	801753a <USBD_CtlError>
            ret = USBD_FAIL;
 80144e0:	2303      	movs	r3, #3
 80144e2:	75fb      	strb	r3, [r7, #23]
          break;
 80144e4:	e049      	b.n	801457a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	2b03      	cmp	r3, #3
 80144f0:	d107      	bne.n	8014502 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	3304      	adds	r3, #4
 80144f6:	2201      	movs	r2, #1
 80144f8:	4619      	mov	r1, r3
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f003 f88e 	bl	801761c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014500:	e03b      	b.n	801457a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8014502:	6839      	ldr	r1, [r7, #0]
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f003 f818 	bl	801753a <USBD_CtlError>
            ret = USBD_FAIL;
 801450a:	2303      	movs	r3, #3
 801450c:	75fb      	strb	r3, [r7, #23]
          break;
 801450e:	e034      	b.n	801457a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014516:	b2db      	uxtb	r3, r3
 8014518:	2b03      	cmp	r3, #3
 801451a:	d106      	bne.n	801452a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801451c:	683b      	ldr	r3, [r7, #0]
 801451e:	885b      	ldrh	r3, [r3, #2]
 8014520:	b2db      	uxtb	r3, r3
 8014522:	461a      	mov	r2, r3
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014528:	e027      	b.n	801457a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801452a:	6839      	ldr	r1, [r7, #0]
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f003 f804 	bl	801753a <USBD_CtlError>
            ret = USBD_FAIL;
 8014532:	2303      	movs	r3, #3
 8014534:	75fb      	strb	r3, [r7, #23]
          break;
 8014536:	e020      	b.n	801457a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801453e:	b2db      	uxtb	r3, r3
 8014540:	2b03      	cmp	r3, #3
 8014542:	d119      	bne.n	8014578 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	885b      	ldrh	r3, [r3, #2]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d115      	bne.n	8014578 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	889b      	ldrh	r3, [r3, #4]
 8014550:	b2db      	uxtb	r3, r3
 8014552:	4619      	mov	r1, r3
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f007 fc7f 	bl	801be58 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	889b      	ldrh	r3, [r3, #4]
 801455e:	b2db      	uxtb	r3, r3
 8014560:	4619      	mov	r1, r3
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 fb2e 	bl	8014bc4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8014568:	e006      	b.n	8014578 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801456a:	6839      	ldr	r1, [r7, #0]
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f002 ffe4 	bl	801753a <USBD_CtlError>
          ret = USBD_FAIL;
 8014572:	2303      	movs	r3, #3
 8014574:	75fb      	strb	r3, [r7, #23]
          break;
 8014576:	e000      	b.n	801457a <USBD_MSC_Setup+0x1de>
          break;
 8014578:	bf00      	nop
      }
      break;
 801457a:	e006      	b.n	801458a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 801457c:	6839      	ldr	r1, [r7, #0]
 801457e:	6878      	ldr	r0, [r7, #4]
 8014580:	f002 ffdb 	bl	801753a <USBD_CtlError>
      ret = USBD_FAIL;
 8014584:	2303      	movs	r3, #3
 8014586:	75fb      	strb	r3, [r7, #23]
      break;
 8014588:	bf00      	nop
  }

  return (uint8_t)ret;
 801458a:	7dfb      	ldrb	r3, [r7, #23]
}
 801458c:	4618      	mov	r0, r3
 801458e:	3718      	adds	r7, #24
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}

08014594 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b082      	sub	sp, #8
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	460b      	mov	r3, r1
 801459e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80145a0:	78fb      	ldrb	r3, [r7, #3]
 80145a2:	4619      	mov	r1, r3
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 f959 	bl	801485c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80145aa:	2300      	movs	r3, #0
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3708      	adds	r7, #8
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b082      	sub	sp, #8
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	460b      	mov	r3, r1
 80145be:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80145c0:	78fb      	ldrb	r3, [r7, #3]
 80145c2:	4619      	mov	r1, r3
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f000 f983 	bl	80148d0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80145ca:	2300      	movs	r3, #0
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	3708      	adds	r7, #8
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b084      	sub	sp, #16
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80145dc:	2181      	movs	r1, #129	; 0x81
 80145de:	4812      	ldr	r0, [pc, #72]	; (8014628 <USBD_MSC_GetHSCfgDesc+0x54>)
 80145e0:	f002 f972 	bl	80168c8 <USBD_GetEpDesc>
 80145e4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80145e6:	2101      	movs	r1, #1
 80145e8:	480f      	ldr	r0, [pc, #60]	; (8014628 <USBD_MSC_GetHSCfgDesc+0x54>)
 80145ea:	f002 f96d 	bl	80168c8 <USBD_GetEpDesc>
 80145ee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d006      	beq.n	8014604 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	2200      	movs	r2, #0
 80145fa:	711a      	strb	r2, [r3, #4]
 80145fc:	2200      	movs	r2, #0
 80145fe:	f042 0202 	orr.w	r2, r2, #2
 8014602:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d006      	beq.n	8014618 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	2200      	movs	r2, #0
 801460e:	711a      	strb	r2, [r3, #4]
 8014610:	2200      	movs	r2, #0
 8014612:	f042 0202 	orr.w	r2, r2, #2
 8014616:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2220      	movs	r2, #32
 801461c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801461e:	4b02      	ldr	r3, [pc, #8]	; (8014628 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8014620:	4618      	mov	r0, r3
 8014622:	3710      	adds	r7, #16
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}
 8014628:	20000048 	.word	0x20000048

0801462c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8014634:	2181      	movs	r1, #129	; 0x81
 8014636:	4812      	ldr	r0, [pc, #72]	; (8014680 <USBD_MSC_GetFSCfgDesc+0x54>)
 8014638:	f002 f946 	bl	80168c8 <USBD_GetEpDesc>
 801463c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801463e:	2101      	movs	r1, #1
 8014640:	480f      	ldr	r0, [pc, #60]	; (8014680 <USBD_MSC_GetFSCfgDesc+0x54>)
 8014642:	f002 f941 	bl	80168c8 <USBD_GetEpDesc>
 8014646:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d006      	beq.n	801465c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	2200      	movs	r2, #0
 8014652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014656:	711a      	strb	r2, [r3, #4]
 8014658:	2200      	movs	r2, #0
 801465a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d006      	beq.n	8014670 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	2200      	movs	r2, #0
 8014666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801466a:	711a      	strb	r2, [r3, #4]
 801466c:	2200      	movs	r2, #0
 801466e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2220      	movs	r2, #32
 8014674:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8014676:	4b02      	ldr	r3, [pc, #8]	; (8014680 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8014678:	4618      	mov	r0, r3
 801467a:	3710      	adds	r7, #16
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}
 8014680:	20000048 	.word	0x20000048

08014684 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801468c:	2181      	movs	r1, #129	; 0x81
 801468e:	4812      	ldr	r0, [pc, #72]	; (80146d8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8014690:	f002 f91a 	bl	80168c8 <USBD_GetEpDesc>
 8014694:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8014696:	2101      	movs	r1, #1
 8014698:	480f      	ldr	r0, [pc, #60]	; (80146d8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801469a:	f002 f915 	bl	80168c8 <USBD_GetEpDesc>
 801469e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d006      	beq.n	80146b4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	2200      	movs	r2, #0
 80146aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80146ae:	711a      	strb	r2, [r3, #4]
 80146b0:	2200      	movs	r2, #0
 80146b2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d006      	beq.n	80146c8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	2200      	movs	r2, #0
 80146be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80146c2:	711a      	strb	r2, [r3, #4]
 80146c4:	2200      	movs	r2, #0
 80146c6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2220      	movs	r2, #32
 80146cc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80146ce:	4b02      	ldr	r3, [pc, #8]	; (80146d8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3710      	adds	r7, #16
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}
 80146d8:	20000048 	.word	0x20000048

080146dc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80146dc:	b480      	push	{r7}
 80146de:	b083      	sub	sp, #12
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	220a      	movs	r2, #10
 80146e8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80146ea:	4b03      	ldr	r3, [pc, #12]	; (80146f8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	370c      	adds	r7, #12
 80146f0:	46bd      	mov	sp, r7
 80146f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f6:	4770      	bx	lr
 80146f8:	20000068 	.word	0x20000068

080146fc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80146fc:	b480      	push	{r7}
 80146fe:	b083      	sub	sp, #12
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d101      	bne.n	8014710 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801470c:	2303      	movs	r3, #3
 801470e:	e009      	b.n	8014724 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014716:	687a      	ldr	r2, [r7, #4]
 8014718:	33b0      	adds	r3, #176	; 0xb0
 801471a:	009b      	lsls	r3, r3, #2
 801471c:	4413      	add	r3, r2
 801471e:	683a      	ldr	r2, [r7, #0]
 8014720:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014722:	2300      	movs	r3, #0
}
 8014724:	4618      	mov	r0, r3
 8014726:	370c      	adds	r7, #12
 8014728:	46bd      	mov	sp, r7
 801472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472e:	4770      	bx	lr

08014730 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	32b0      	adds	r2, #176	; 0xb0
 8014742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014746:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d032      	beq.n	80147b4 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2200      	movs	r2, #0
 8014752:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	2200      	movs	r2, #0
 8014758:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	2200      	movs	r2, #0
 801475e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	2200      	movs	r2, #0
 8014766:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2200      	movs	r2, #0
 801476e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	33b0      	adds	r3, #176	; 0xb0
 801477c:	009b      	lsls	r3, r3, #2
 801477e:	4413      	add	r3, r2
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	2000      	movs	r0, #0
 8014786:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8014788:	4b0c      	ldr	r3, [pc, #48]	; (80147bc <MSC_BOT_Init+0x8c>)
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	4619      	mov	r1, r3
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f007 fb62 	bl	801be58 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8014794:	4b0a      	ldr	r3, [pc, #40]	; (80147c0 <MSC_BOT_Init+0x90>)
 8014796:	781b      	ldrb	r3, [r3, #0]
 8014798:	4619      	mov	r1, r3
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f007 fb5c 	bl	801be58 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80147a0:	4b06      	ldr	r3, [pc, #24]	; (80147bc <MSC_BOT_Init+0x8c>)
 80147a2:	7819      	ldrb	r1, [r3, #0]
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80147aa:	231f      	movs	r3, #31
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f007 fc1c 	bl	801bfea <USBD_LL_PrepareReceive>
 80147b2:	e000      	b.n	80147b6 <MSC_BOT_Init+0x86>
    return;
 80147b4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80147b6:	3710      	adds	r7, #16
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	20000073 	.word	0x20000073
 80147c0:	20000072 	.word	0x20000072

080147c4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b084      	sub	sp, #16
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	32b0      	adds	r2, #176	; 0xb0
 80147d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147da:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d01b      	beq.n	801481a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	2200      	movs	r2, #0
 80147e6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	2201      	movs	r2, #1
 80147ec:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80147ee:	4b0d      	ldr	r3, [pc, #52]	; (8014824 <MSC_BOT_Reset+0x60>)
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	4619      	mov	r1, r3
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f007 fb6d 	bl	801bed4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80147fa:	4b0b      	ldr	r3, [pc, #44]	; (8014828 <MSC_BOT_Reset+0x64>)
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	4619      	mov	r1, r3
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f007 fb67 	bl	801bed4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8014806:	4b08      	ldr	r3, [pc, #32]	; (8014828 <MSC_BOT_Reset+0x64>)
 8014808:	7819      	ldrb	r1, [r3, #0]
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8014810:	231f      	movs	r3, #31
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f007 fbe9 	bl	801bfea <USBD_LL_PrepareReceive>
 8014818:	e000      	b.n	801481c <MSC_BOT_Reset+0x58>
    return;
 801481a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801481c:	3710      	adds	r7, #16
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	20000072 	.word	0x20000072
 8014828:	20000073 	.word	0x20000073

0801482c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801482c:	b480      	push	{r7}
 801482e:	b085      	sub	sp, #20
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	32b0      	adds	r2, #176	; 0xb0
 801483e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014842:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d002      	beq.n	8014850 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	2200      	movs	r2, #0
 801484e:	721a      	strb	r2, [r3, #8]
  }
}
 8014850:	bf00      	nop
 8014852:	3714      	adds	r7, #20
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr

0801485c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	460b      	mov	r3, r1
 8014866:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	32b0      	adds	r2, #176	; 0xb0
 8014872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014876:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d020      	beq.n	80148c0 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	7a1b      	ldrb	r3, [r3, #8]
 8014882:	2b02      	cmp	r3, #2
 8014884:	d005      	beq.n	8014892 <MSC_BOT_DataIn+0x36>
 8014886:	2b02      	cmp	r3, #2
 8014888:	db1c      	blt.n	80148c4 <MSC_BOT_DataIn+0x68>
 801488a:	3b03      	subs	r3, #3
 801488c:	2b01      	cmp	r3, #1
 801488e:	d819      	bhi.n	80148c4 <MSC_BOT_DataIn+0x68>
 8014890:	e011      	b.n	80148b6 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801489e:	461a      	mov	r2, r3
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f000 f9c9 	bl	8014c38 <SCSI_ProcessCmd>
 80148a6:	4603      	mov	r3, r0
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	da0d      	bge.n	80148c8 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80148ac:	2101      	movs	r1, #1
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f000 f90c 	bl	8014acc <MSC_BOT_SendCSW>
      }
      break;
 80148b4:	e008      	b.n	80148c8 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80148b6:	2100      	movs	r1, #0
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f000 f907 	bl	8014acc <MSC_BOT_SendCSW>
      break;
 80148be:	e004      	b.n	80148ca <MSC_BOT_DataIn+0x6e>
    return;
 80148c0:	bf00      	nop
 80148c2:	e002      	b.n	80148ca <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80148c4:	bf00      	nop
 80148c6:	e000      	b.n	80148ca <MSC_BOT_DataIn+0x6e>
      break;
 80148c8:	bf00      	nop
  }
}
 80148ca:	3710      	adds	r7, #16
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	460b      	mov	r3, r1
 80148da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	32b0      	adds	r2, #176	; 0xb0
 80148e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d01c      	beq.n	801492c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	7a1b      	ldrb	r3, [r3, #8]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d002      	beq.n	8014900 <MSC_BOT_DataOut+0x30>
 80148fa:	2b01      	cmp	r3, #1
 80148fc:	d004      	beq.n	8014908 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80148fe:	e018      	b.n	8014932 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	f000 f819 	bl	8014938 <MSC_BOT_CBW_Decode>
      break;
 8014906:	e014      	b.n	8014932 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8014914:	461a      	mov	r2, r3
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f000 f98e 	bl	8014c38 <SCSI_ProcessCmd>
 801491c:	4603      	mov	r3, r0
 801491e:	2b00      	cmp	r3, #0
 8014920:	da06      	bge.n	8014930 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014922:	2101      	movs	r1, #1
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f000 f8d1 	bl	8014acc <MSC_BOT_SendCSW>
      break;
 801492a:	e001      	b.n	8014930 <MSC_BOT_DataOut+0x60>
    return;
 801492c:	bf00      	nop
 801492e:	e000      	b.n	8014932 <MSC_BOT_DataOut+0x62>
      break;
 8014930:	bf00      	nop
  }
}
 8014932:	3710      	adds	r7, #16
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}

08014938 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	32b0      	adds	r2, #176	; 0xb0
 801494a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801494e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d079      	beq.n	8014a4a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801496e:	4b3a      	ldr	r3, [pc, #232]	; (8014a58 <MSC_BOT_CBW_Decode+0x120>)
 8014970:	781b      	ldrb	r3, [r3, #0]
 8014972:	4619      	mov	r1, r3
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f007 fb59 	bl	801c02c <USBD_LL_GetRxDataSize>
 801497a:	4603      	mov	r3, r0
 801497c:	2b1f      	cmp	r3, #31
 801497e:	d114      	bne.n	80149aa <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8014986:	4a35      	ldr	r2, [pc, #212]	; (8014a5c <MSC_BOT_CBW_Decode+0x124>)
 8014988:	4293      	cmp	r3, r2
 801498a:	d10e      	bne.n	80149aa <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014992:	2b01      	cmp	r3, #1
 8014994:	d809      	bhi.n	80149aa <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801499c:	2b00      	cmp	r3, #0
 801499e:	d004      	beq.n	80149aa <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80149a6:	2b10      	cmp	r3, #16
 80149a8:	d90e      	bls.n	80149c8 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80149b0:	2320      	movs	r3, #32
 80149b2:	2205      	movs	r2, #5
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f000 fe28 	bl	801560a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2202      	movs	r2, #2
 80149be:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f000 f8bd 	bl	8014b40 <MSC_BOT_Abort>
 80149c6:	e043      	b.n	8014a50 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80149d4:	461a      	mov	r2, r3
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f000 f92e 	bl	8014c38 <SCSI_ProcessCmd>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	da0c      	bge.n	80149fc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	7a1b      	ldrb	r3, [r3, #8]
 80149e6:	2b05      	cmp	r3, #5
 80149e8:	d104      	bne.n	80149f4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80149ea:	2101      	movs	r1, #1
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 f86d 	bl	8014acc <MSC_BOT_SendCSW>
 80149f2:	e02d      	b.n	8014a50 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f000 f8a3 	bl	8014b40 <MSC_BOT_Abort>
 80149fa:	e029      	b.n	8014a50 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	7a1b      	ldrb	r3, [r3, #8]
 8014a00:	2b02      	cmp	r3, #2
 8014a02:	d024      	beq.n	8014a4e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8014a08:	2b01      	cmp	r3, #1
 8014a0a:	d020      	beq.n	8014a4e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8014a10:	2b03      	cmp	r3, #3
 8014a12:	d01c      	beq.n	8014a4e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	68db      	ldr	r3, [r3, #12]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d009      	beq.n	8014a30 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f103 0110 	add.w	r1, r3, #16
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	68db      	ldr	r3, [r3, #12]
 8014a26:	461a      	mov	r2, r3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f000 f819 	bl	8014a60 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8014a2e:	e00f      	b.n	8014a50 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	68db      	ldr	r3, [r3, #12]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d104      	bne.n	8014a42 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014a38:	2100      	movs	r1, #0
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f000 f846 	bl	8014acc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8014a40:	e006      	b.n	8014a50 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 f87c 	bl	8014b40 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8014a48:	e002      	b.n	8014a50 <MSC_BOT_CBW_Decode+0x118>
    return;
 8014a4a:	bf00      	nop
 8014a4c:	e000      	b.n	8014a50 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8014a4e:	bf00      	nop
    }
  }
}
 8014a50:	3710      	adds	r7, #16
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	20000073 	.word	0x20000073
 8014a5c:	43425355 	.word	0x43425355

08014a60 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b086      	sub	sp, #24
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	60b9      	str	r1, [r7, #8]
 8014a6a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	32b0      	adds	r2, #176	; 0xb0
 8014a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a7a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d01e      	beq.n	8014ac0 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014a88:	687a      	ldr	r2, [r7, #4]
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	bf28      	it	cs
 8014a8e:	4613      	movcs	r3, r2
 8014a90:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	1ad2      	subs	r2, r2, r3
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	2204      	movs	r2, #4
 8014aae:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8014ab0:	4b05      	ldr	r3, [pc, #20]	; (8014ac8 <MSC_BOT_SendData+0x68>)
 8014ab2:	7819      	ldrb	r1, [r3, #0]
 8014ab4:	693b      	ldr	r3, [r7, #16]
 8014ab6:	68ba      	ldr	r2, [r7, #8]
 8014ab8:	68f8      	ldr	r0, [r7, #12]
 8014aba:	f007 fa75 	bl	801bfa8 <USBD_LL_Transmit>
 8014abe:	e000      	b.n	8014ac2 <MSC_BOT_SendData+0x62>
    return;
 8014ac0:	bf00      	nop
}
 8014ac2:	3718      	adds	r7, #24
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}
 8014ac8:	20000072 	.word	0x20000072

08014acc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	32b0      	adds	r2, #176	; 0xb0
 8014ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ae6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d01d      	beq.n	8014b2a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	4a10      	ldr	r2, [pc, #64]	; (8014b34 <MSC_BOT_SendCSW+0x68>)
 8014af2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	78fa      	ldrb	r2, [r7, #3]
 8014afa:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2200      	movs	r2, #0
 8014b02:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8014b04:	4b0c      	ldr	r3, [pc, #48]	; (8014b38 <MSC_BOT_SendCSW+0x6c>)
 8014b06:	7819      	ldrb	r1, [r3, #0]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8014b0e:	230d      	movs	r3, #13
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f007 fa49 	bl	801bfa8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8014b16:	4b09      	ldr	r3, [pc, #36]	; (8014b3c <MSC_BOT_SendCSW+0x70>)
 8014b18:	7819      	ldrb	r1, [r3, #0]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8014b20:	231f      	movs	r3, #31
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f007 fa61 	bl	801bfea <USBD_LL_PrepareReceive>
 8014b28:	e000      	b.n	8014b2c <MSC_BOT_SendCSW+0x60>
    return;
 8014b2a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014b2c:	3710      	adds	r7, #16
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	bf00      	nop
 8014b34:	53425355 	.word	0x53425355
 8014b38:	20000072 	.word	0x20000072
 8014b3c:	20000073 	.word	0x20000073

08014b40 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	32b0      	adds	r2, #176	; 0xb0
 8014b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b56:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d02a      	beq.n	8014bb4 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10e      	bne.n	8014b86 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d009      	beq.n	8014b86 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d105      	bne.n	8014b86 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014b7a:	4b10      	ldr	r3, [pc, #64]	; (8014bbc <MSC_BOT_Abort+0x7c>)
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	4619      	mov	r1, r3
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f007 f988 	bl	801be96 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014b86:	4b0e      	ldr	r3, [pc, #56]	; (8014bc0 <MSC_BOT_Abort+0x80>)
 8014b88:	781b      	ldrb	r3, [r3, #0]
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f007 f982 	bl	801be96 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	7a5b      	ldrb	r3, [r3, #9]
 8014b96:	2b02      	cmp	r3, #2
 8014b98:	d10d      	bne.n	8014bb6 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014b9a:	4b09      	ldr	r3, [pc, #36]	; (8014bc0 <MSC_BOT_Abort+0x80>)
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f007 f978 	bl	801be96 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014ba6:	4b05      	ldr	r3, [pc, #20]	; (8014bbc <MSC_BOT_Abort+0x7c>)
 8014ba8:	781b      	ldrb	r3, [r3, #0]
 8014baa:	4619      	mov	r1, r3
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f007 f972 	bl	801be96 <USBD_LL_StallEP>
 8014bb2:	e000      	b.n	8014bb6 <MSC_BOT_Abort+0x76>
    return;
 8014bb4:	bf00      	nop
  }
}
 8014bb6:	3710      	adds	r7, #16
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	20000073 	.word	0x20000073
 8014bc0:	20000072 	.word	0x20000072

08014bc4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	460b      	mov	r3, r1
 8014bce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	32b0      	adds	r2, #176	; 0xb0
 8014bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bde:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d01d      	beq.n	8014c22 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	7a5b      	ldrb	r3, [r3, #9]
 8014bea:	2b02      	cmp	r3, #2
 8014bec:	d10c      	bne.n	8014c08 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014bee:	4b10      	ldr	r3, [pc, #64]	; (8014c30 <MSC_BOT_CplClrFeature+0x6c>)
 8014bf0:	781b      	ldrb	r3, [r3, #0]
 8014bf2:	4619      	mov	r1, r3
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f007 f94e 	bl	801be96 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014bfa:	4b0e      	ldr	r3, [pc, #56]	; (8014c34 <MSC_BOT_CplClrFeature+0x70>)
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	4619      	mov	r1, r3
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f007 f948 	bl	801be96 <USBD_LL_StallEP>
 8014c06:	e00f      	b.n	8014c28 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8014c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	da0a      	bge.n	8014c26 <MSC_BOT_CplClrFeature+0x62>
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	7a5b      	ldrb	r3, [r3, #9]
 8014c14:	2b01      	cmp	r3, #1
 8014c16:	d006      	beq.n	8014c26 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014c18:	2101      	movs	r1, #1
 8014c1a:	6878      	ldr	r0, [r7, #4]
 8014c1c:	f7ff ff56 	bl	8014acc <MSC_BOT_SendCSW>
 8014c20:	e002      	b.n	8014c28 <MSC_BOT_CplClrFeature+0x64>
    return;
 8014c22:	bf00      	nop
 8014c24:	e000      	b.n	8014c28 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8014c26:	bf00      	nop
  }
}
 8014c28:	3710      	adds	r7, #16
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
 8014c2e:	bf00      	nop
 8014c30:	20000072 	.word	0x20000072
 8014c34:	20000073 	.word	0x20000073

08014c38 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b086      	sub	sp, #24
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	460b      	mov	r3, r1
 8014c42:	607a      	str	r2, [r7, #4]
 8014c44:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	32b0      	adds	r2, #176	; 0xb0
 8014c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c54:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d102      	bne.n	8014c62 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8014c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c60:	e168      	b.n	8014f34 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	781b      	ldrb	r3, [r3, #0]
 8014c66:	2baa      	cmp	r3, #170	; 0xaa
 8014c68:	f000 8144 	beq.w	8014ef4 <SCSI_ProcessCmd+0x2bc>
 8014c6c:	2baa      	cmp	r3, #170	; 0xaa
 8014c6e:	f300 8153 	bgt.w	8014f18 <SCSI_ProcessCmd+0x2e0>
 8014c72:	2ba8      	cmp	r3, #168	; 0xa8
 8014c74:	f000 812c 	beq.w	8014ed0 <SCSI_ProcessCmd+0x298>
 8014c78:	2ba8      	cmp	r3, #168	; 0xa8
 8014c7a:	f300 814d 	bgt.w	8014f18 <SCSI_ProcessCmd+0x2e0>
 8014c7e:	2b5a      	cmp	r3, #90	; 0x5a
 8014c80:	f300 80c0 	bgt.w	8014e04 <SCSI_ProcessCmd+0x1cc>
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	f2c0 8147 	blt.w	8014f18 <SCSI_ProcessCmd+0x2e0>
 8014c8a:	2b5a      	cmp	r3, #90	; 0x5a
 8014c8c:	f200 8144 	bhi.w	8014f18 <SCSI_ProcessCmd+0x2e0>
 8014c90:	a201      	add	r2, pc, #4	; (adr r2, 8014c98 <SCSI_ProcessCmd+0x60>)
 8014c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c96:	bf00      	nop
 8014c98:	08014e0b 	.word	0x08014e0b
 8014c9c:	08014f19 	.word	0x08014f19
 8014ca0:	08014f19 	.word	0x08014f19
 8014ca4:	08014e1d 	.word	0x08014e1d
 8014ca8:	08014f19 	.word	0x08014f19
 8014cac:	08014f19 	.word	0x08014f19
 8014cb0:	08014f19 	.word	0x08014f19
 8014cb4:	08014f19 	.word	0x08014f19
 8014cb8:	08014f19 	.word	0x08014f19
 8014cbc:	08014f19 	.word	0x08014f19
 8014cc0:	08014f19 	.word	0x08014f19
 8014cc4:	08014f19 	.word	0x08014f19
 8014cc8:	08014f19 	.word	0x08014f19
 8014ccc:	08014f19 	.word	0x08014f19
 8014cd0:	08014f19 	.word	0x08014f19
 8014cd4:	08014f19 	.word	0x08014f19
 8014cd8:	08014f19 	.word	0x08014f19
 8014cdc:	08014f19 	.word	0x08014f19
 8014ce0:	08014e2f 	.word	0x08014e2f
 8014ce4:	08014f19 	.word	0x08014f19
 8014ce8:	08014f19 	.word	0x08014f19
 8014cec:	08014f19 	.word	0x08014f19
 8014cf0:	08014f19 	.word	0x08014f19
 8014cf4:	08014f19 	.word	0x08014f19
 8014cf8:	08014f19 	.word	0x08014f19
 8014cfc:	08014f19 	.word	0x08014f19
 8014d00:	08014e65 	.word	0x08014e65
 8014d04:	08014e41 	.word	0x08014e41
 8014d08:	08014f19 	.word	0x08014f19
 8014d0c:	08014f19 	.word	0x08014f19
 8014d10:	08014e53 	.word	0x08014e53
 8014d14:	08014f19 	.word	0x08014f19
 8014d18:	08014f19 	.word	0x08014f19
 8014d1c:	08014f19 	.word	0x08014f19
 8014d20:	08014f19 	.word	0x08014f19
 8014d24:	08014e89 	.word	0x08014e89
 8014d28:	08014f19 	.word	0x08014f19
 8014d2c:	08014e9b 	.word	0x08014e9b
 8014d30:	08014f19 	.word	0x08014f19
 8014d34:	08014f19 	.word	0x08014f19
 8014d38:	08014ebf 	.word	0x08014ebf
 8014d3c:	08014f19 	.word	0x08014f19
 8014d40:	08014ee3 	.word	0x08014ee3
 8014d44:	08014f19 	.word	0x08014f19
 8014d48:	08014f19 	.word	0x08014f19
 8014d4c:	08014f19 	.word	0x08014f19
 8014d50:	08014f19 	.word	0x08014f19
 8014d54:	08014f07 	.word	0x08014f07
 8014d58:	08014f19 	.word	0x08014f19
 8014d5c:	08014f19 	.word	0x08014f19
 8014d60:	08014f19 	.word	0x08014f19
 8014d64:	08014f19 	.word	0x08014f19
 8014d68:	08014f19 	.word	0x08014f19
 8014d6c:	08014f19 	.word	0x08014f19
 8014d70:	08014f19 	.word	0x08014f19
 8014d74:	08014f19 	.word	0x08014f19
 8014d78:	08014f19 	.word	0x08014f19
 8014d7c:	08014f19 	.word	0x08014f19
 8014d80:	08014f19 	.word	0x08014f19
 8014d84:	08014f19 	.word	0x08014f19
 8014d88:	08014f19 	.word	0x08014f19
 8014d8c:	08014f19 	.word	0x08014f19
 8014d90:	08014f19 	.word	0x08014f19
 8014d94:	08014f19 	.word	0x08014f19
 8014d98:	08014f19 	.word	0x08014f19
 8014d9c:	08014f19 	.word	0x08014f19
 8014da0:	08014f19 	.word	0x08014f19
 8014da4:	08014f19 	.word	0x08014f19
 8014da8:	08014f19 	.word	0x08014f19
 8014dac:	08014f19 	.word	0x08014f19
 8014db0:	08014f19 	.word	0x08014f19
 8014db4:	08014f19 	.word	0x08014f19
 8014db8:	08014f19 	.word	0x08014f19
 8014dbc:	08014f19 	.word	0x08014f19
 8014dc0:	08014f19 	.word	0x08014f19
 8014dc4:	08014f19 	.word	0x08014f19
 8014dc8:	08014f19 	.word	0x08014f19
 8014dcc:	08014f19 	.word	0x08014f19
 8014dd0:	08014f19 	.word	0x08014f19
 8014dd4:	08014f19 	.word	0x08014f19
 8014dd8:	08014f19 	.word	0x08014f19
 8014ddc:	08014f19 	.word	0x08014f19
 8014de0:	08014f19 	.word	0x08014f19
 8014de4:	08014f19 	.word	0x08014f19
 8014de8:	08014f19 	.word	0x08014f19
 8014dec:	08014f19 	.word	0x08014f19
 8014df0:	08014f19 	.word	0x08014f19
 8014df4:	08014f19 	.word	0x08014f19
 8014df8:	08014f19 	.word	0x08014f19
 8014dfc:	08014f19 	.word	0x08014f19
 8014e00:	08014e77 	.word	0x08014e77
 8014e04:	2b9e      	cmp	r3, #158	; 0x9e
 8014e06:	d051      	beq.n	8014eac <SCSI_ProcessCmd+0x274>
 8014e08:	e086      	b.n	8014f18 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8014e0a:	7afb      	ldrb	r3, [r7, #11]
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	4619      	mov	r1, r3
 8014e10:	68f8      	ldr	r0, [r7, #12]
 8014e12:	f000 f893 	bl	8014f3c <SCSI_TestUnitReady>
 8014e16:	4603      	mov	r3, r0
 8014e18:	75fb      	strb	r3, [r7, #23]
      break;
 8014e1a:	e089      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8014e1c:	7afb      	ldrb	r3, [r7, #11]
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	4619      	mov	r1, r3
 8014e22:	68f8      	ldr	r0, [r7, #12]
 8014e24:	f000 fb6e 	bl	8015504 <SCSI_RequestSense>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8014e2c:	e080      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8014e2e:	7afb      	ldrb	r3, [r7, #11]
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	4619      	mov	r1, r3
 8014e34:	68f8      	ldr	r0, [r7, #12]
 8014e36:	f000 f8db 	bl	8014ff0 <SCSI_Inquiry>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8014e3e:	e077      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8014e40:	7afb      	ldrb	r3, [r7, #11]
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	4619      	mov	r1, r3
 8014e46:	68f8      	ldr	r0, [r7, #12]
 8014e48:	f000 fc2a 	bl	80156a0 <SCSI_StartStopUnit>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8014e50:	e06e      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014e52:	7afb      	ldrb	r3, [r7, #11]
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	4619      	mov	r1, r3
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f000 fc76 	bl	801574a <SCSI_AllowPreventRemovable>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	75fb      	strb	r3, [r7, #23]
      break;
 8014e62:	e065      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014e64:	7afb      	ldrb	r3, [r7, #11]
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	4619      	mov	r1, r3
 8014e6a:	68f8      	ldr	r0, [r7, #12]
 8014e6c:	f000 faea 	bl	8015444 <SCSI_ModeSense6>
 8014e70:	4603      	mov	r3, r0
 8014e72:	75fb      	strb	r3, [r7, #23]
      break;
 8014e74:	e05c      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014e76:	7afb      	ldrb	r3, [r7, #11]
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	68f8      	ldr	r0, [r7, #12]
 8014e7e:	f000 fb11 	bl	80154a4 <SCSI_ModeSense10>
 8014e82:	4603      	mov	r3, r0
 8014e84:	75fb      	strb	r3, [r7, #23]
      break;
 8014e86:	e053      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014e88:	7afb      	ldrb	r3, [r7, #11]
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	68f8      	ldr	r0, [r7, #12]
 8014e90:	f000 fa5d 	bl	801534e <SCSI_ReadFormatCapacity>
 8014e94:	4603      	mov	r3, r0
 8014e96:	75fb      	strb	r3, [r7, #23]
      break;
 8014e98:	e04a      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8014e9a:	7afb      	ldrb	r3, [r7, #11]
 8014e9c:	687a      	ldr	r2, [r7, #4]
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	68f8      	ldr	r0, [r7, #12]
 8014ea2:	f000 f923 	bl	80150ec <SCSI_ReadCapacity10>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8014eaa:	e041      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8014eac:	7afb      	ldrb	r3, [r7, #11]
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	4619      	mov	r1, r3
 8014eb2:	68f8      	ldr	r0, [r7, #12]
 8014eb4:	f000 f998 	bl	80151e8 <SCSI_ReadCapacity16>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	75fb      	strb	r3, [r7, #23]
      break;
 8014ebc:	e038      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8014ebe:	7afb      	ldrb	r3, [r7, #11]
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f000 fc6d 	bl	80157a4 <SCSI_Read10>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8014ece:	e02f      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8014ed0:	7afb      	ldrb	r3, [r7, #11]
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	4619      	mov	r1, r3
 8014ed6:	68f8      	ldr	r0, [r7, #12]
 8014ed8:	f000 fd0e 	bl	80158f8 <SCSI_Read12>
 8014edc:	4603      	mov	r3, r0
 8014ede:	75fb      	strb	r3, [r7, #23]
      break;
 8014ee0:	e026      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8014ee2:	7afb      	ldrb	r3, [r7, #11]
 8014ee4:	687a      	ldr	r2, [r7, #4]
 8014ee6:	4619      	mov	r1, r3
 8014ee8:	68f8      	ldr	r0, [r7, #12]
 8014eea:	f000 fdb9 	bl	8015a60 <SCSI_Write10>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8014ef2:	e01d      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8014ef4:	7afb      	ldrb	r3, [r7, #11]
 8014ef6:	687a      	ldr	r2, [r7, #4]
 8014ef8:	4619      	mov	r1, r3
 8014efa:	68f8      	ldr	r0, [r7, #12]
 8014efc:	f000 fe86 	bl	8015c0c <SCSI_Write12>
 8014f00:	4603      	mov	r3, r0
 8014f02:	75fb      	strb	r3, [r7, #23]
      break;
 8014f04:	e014      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8014f06:	7afb      	ldrb	r3, [r7, #11]
 8014f08:	687a      	ldr	r2, [r7, #4]
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f000 ff63 	bl	8015dd8 <SCSI_Verify10>
 8014f12:	4603      	mov	r3, r0
 8014f14:	75fb      	strb	r3, [r7, #23]
      break;
 8014f16:	e00b      	b.n	8014f30 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014f18:	7af9      	ldrb	r1, [r7, #11]
 8014f1a:	2320      	movs	r3, #32
 8014f1c:	2205      	movs	r2, #5
 8014f1e:	68f8      	ldr	r0, [r7, #12]
 8014f20:	f000 fb73 	bl	801560a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	2202      	movs	r2, #2
 8014f28:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8014f2a:	23ff      	movs	r3, #255	; 0xff
 8014f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8014f2e:	bf00      	nop
  }

  return ret;
 8014f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	3718      	adds	r7, #24
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b086      	sub	sp, #24
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	60f8      	str	r0, [r7, #12]
 8014f44:	460b      	mov	r3, r1
 8014f46:	607a      	str	r2, [r7, #4]
 8014f48:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	32b0      	adds	r2, #176	; 0xb0
 8014f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f58:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d102      	bne.n	8014f66 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8014f60:	f04f 33ff 	mov.w	r3, #4294967295
 8014f64:	e03f      	b.n	8014fe6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d00a      	beq.n	8014f86 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8014f76:	2320      	movs	r3, #32
 8014f78:	2205      	movs	r2, #5
 8014f7a:	68f8      	ldr	r0, [r7, #12]
 8014f7c:	f000 fb45 	bl	801560a <SCSI_SenseCode>

    return -1;
 8014f80:	f04f 33ff 	mov.w	r3, #4294967295
 8014f84:	e02f      	b.n	8014fe6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8014f8c:	2b02      	cmp	r3, #2
 8014f8e:	d10b      	bne.n	8014fa8 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014f90:	7af9      	ldrb	r1, [r7, #11]
 8014f92:	233a      	movs	r3, #58	; 0x3a
 8014f94:	2202      	movs	r2, #2
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	f000 fb37 	bl	801560a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	2205      	movs	r2, #5
 8014fa0:	721a      	strb	r2, [r3, #8]
    return -1;
 8014fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8014fa6:	e01e      	b.n	8014fe6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fae:	68fa      	ldr	r2, [r7, #12]
 8014fb0:	33b0      	adds	r3, #176	; 0xb0
 8014fb2:	009b      	lsls	r3, r3, #2
 8014fb4:	4413      	add	r3, r2
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	689b      	ldr	r3, [r3, #8]
 8014fba:	7afa      	ldrb	r2, [r7, #11]
 8014fbc:	4610      	mov	r0, r2
 8014fbe:	4798      	blx	r3
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d00b      	beq.n	8014fde <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014fc6:	7af9      	ldrb	r1, [r7, #11]
 8014fc8:	233a      	movs	r3, #58	; 0x3a
 8014fca:	2202      	movs	r2, #2
 8014fcc:	68f8      	ldr	r0, [r7, #12]
 8014fce:	f000 fb1c 	bl	801560a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	2205      	movs	r2, #5
 8014fd6:	721a      	strb	r2, [r3, #8]

    return -1;
 8014fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fdc:	e003      	b.n	8014fe6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	60da      	str	r2, [r3, #12]

  return 0;
 8014fe4:	2300      	movs	r3, #0
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3718      	adds	r7, #24
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
	...

08014ff0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b088      	sub	sp, #32
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	607a      	str	r2, [r7, #4]
 8014ffc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	32b0      	adds	r2, #176	; 0xb0
 8015008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801500c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801500e:	69bb      	ldr	r3, [r7, #24]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d102      	bne.n	801501a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8015014:	f04f 33ff 	mov.w	r3, #4294967295
 8015018:	e05f      	b.n	80150da <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801501a:	69bb      	ldr	r3, [r7, #24]
 801501c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015020:	2b00      	cmp	r3, #0
 8015022:	d10a      	bne.n	801503a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801502a:	2320      	movs	r3, #32
 801502c:	2205      	movs	r2, #5
 801502e:	68f8      	ldr	r0, [r7, #12]
 8015030:	f000 faeb 	bl	801560a <SCSI_SenseCode>
    return -1;
 8015034:	f04f 33ff 	mov.w	r3, #4294967295
 8015038:	e04f      	b.n	80150da <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	3301      	adds	r3, #1
 801503e:	781b      	ldrb	r3, [r3, #0]
 8015040:	f003 0301 	and.w	r3, r3, #1
 8015044:	2b00      	cmp	r3, #0
 8015046:	d020      	beq.n	801508a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	3302      	adds	r3, #2
 801504c:	781b      	ldrb	r3, [r3, #0]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d105      	bne.n	801505e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8015052:	2206      	movs	r2, #6
 8015054:	4923      	ldr	r1, [pc, #140]	; (80150e4 <SCSI_Inquiry+0xf4>)
 8015056:	69b8      	ldr	r0, [r7, #24]
 8015058:	f001 f844 	bl	80160e4 <SCSI_UpdateBotData>
 801505c:	e03c      	b.n	80150d8 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	3302      	adds	r3, #2
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	2b80      	cmp	r3, #128	; 0x80
 8015066:	d105      	bne.n	8015074 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8015068:	2208      	movs	r2, #8
 801506a:	491f      	ldr	r1, [pc, #124]	; (80150e8 <SCSI_Inquiry+0xf8>)
 801506c:	69b8      	ldr	r0, [r7, #24]
 801506e:	f001 f839 	bl	80160e4 <SCSI_UpdateBotData>
 8015072:	e031      	b.n	80150d8 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801507a:	2324      	movs	r3, #36	; 0x24
 801507c:	2205      	movs	r2, #5
 801507e:	68f8      	ldr	r0, [r7, #12]
 8015080:	f000 fac3 	bl	801560a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8015084:	f04f 33ff 	mov.w	r3, #4294967295
 8015088:	e027      	b.n	80150da <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015090:	68fa      	ldr	r2, [r7, #12]
 8015092:	33b0      	adds	r3, #176	; 0xb0
 8015094:	009b      	lsls	r3, r3, #2
 8015096:	4413      	add	r3, r2
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	69d9      	ldr	r1, [r3, #28]
 801509c:	7afa      	ldrb	r2, [r7, #11]
 801509e:	4613      	mov	r3, r2
 80150a0:	00db      	lsls	r3, r3, #3
 80150a2:	4413      	add	r3, r2
 80150a4:	009b      	lsls	r3, r3, #2
 80150a6:	440b      	add	r3, r1
 80150a8:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	3304      	adds	r3, #4
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	3305      	adds	r3, #5
 80150b4:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	3304      	adds	r3, #4
 80150ba:	781b      	ldrb	r3, [r3, #0]
 80150bc:	b29b      	uxth	r3, r3
 80150be:	8bfa      	ldrh	r2, [r7, #30]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	d303      	bcc.n	80150cc <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	3304      	adds	r3, #4
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80150cc:	8bfb      	ldrh	r3, [r7, #30]
 80150ce:	461a      	mov	r2, r3
 80150d0:	6979      	ldr	r1, [r7, #20]
 80150d2:	69b8      	ldr	r0, [r7, #24]
 80150d4:	f001 f806 	bl	80160e4 <SCSI_UpdateBotData>
  }

  return 0;
 80150d8:	2300      	movs	r3, #0
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3720      	adds	r7, #32
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
 80150e2:	bf00      	nop
 80150e4:	20000074 	.word	0x20000074
 80150e8:	2000007c 	.word	0x2000007c

080150ec <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b086      	sub	sp, #24
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	60f8      	str	r0, [r7, #12]
 80150f4:	460b      	mov	r3, r1
 80150f6:	607a      	str	r2, [r7, #4]
 80150f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	32b0      	adds	r2, #176	; 0xb0
 8015104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015108:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d102      	bne.n	8015116 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8015110:	f04f 33ff 	mov.w	r3, #4294967295
 8015114:	e064      	b.n	80151e0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801511c:	68fa      	ldr	r2, [r7, #12]
 801511e:	33b0      	adds	r3, #176	; 0xb0
 8015120:	009b      	lsls	r3, r3, #2
 8015122:	4413      	add	r3, r2
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	697a      	ldr	r2, [r7, #20]
 801512a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801512e:	697a      	ldr	r2, [r7, #20]
 8015130:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8015134:	7af8      	ldrb	r0, [r7, #11]
 8015136:	4798      	blx	r3
 8015138:	4603      	mov	r3, r0
 801513a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801513c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d104      	bne.n	801514e <SCSI_ReadCapacity10+0x62>
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801514a:	2b02      	cmp	r3, #2
 801514c:	d108      	bne.n	8015160 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801514e:	7af9      	ldrb	r1, [r7, #11]
 8015150:	233a      	movs	r3, #58	; 0x3a
 8015152:	2202      	movs	r2, #2
 8015154:	68f8      	ldr	r0, [r7, #12]
 8015156:	f000 fa58 	bl	801560a <SCSI_SenseCode>
    return -1;
 801515a:	f04f 33ff 	mov.w	r3, #4294967295
 801515e:	e03f      	b.n	80151e0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8015166:	3b01      	subs	r3, #1
 8015168:	0e1b      	lsrs	r3, r3, #24
 801516a:	b2da      	uxtb	r2, r3
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8015176:	3b01      	subs	r3, #1
 8015178:	0c1b      	lsrs	r3, r3, #16
 801517a:	b2da      	uxtb	r2, r3
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8015186:	3b01      	subs	r3, #1
 8015188:	0a1b      	lsrs	r3, r3, #8
 801518a:	b2da      	uxtb	r2, r3
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8015196:	b2db      	uxtb	r3, r3
 8015198:	3b01      	subs	r3, #1
 801519a:	b2da      	uxtb	r2, r3
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80151a6:	161b      	asrs	r3, r3, #24
 80151a8:	b2da      	uxtb	r2, r3
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80151b4:	141b      	asrs	r3, r3, #16
 80151b6:	b2da      	uxtb	r2, r3
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80151c2:	0a1b      	lsrs	r3, r3, #8
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	b2da      	uxtb	r2, r3
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80151cc:	697b      	ldr	r3, [r7, #20]
 80151ce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80151d2:	b2da      	uxtb	r2, r3
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80151d8:	697b      	ldr	r3, [r7, #20]
 80151da:	2208      	movs	r2, #8
 80151dc:	60da      	str	r2, [r3, #12]

  return 0;
 80151de:	2300      	movs	r3, #0

}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3718      	adds	r7, #24
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b088      	sub	sp, #32
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	460b      	mov	r3, r1
 80151f2:	607a      	str	r2, [r7, #4]
 80151f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	32b0      	adds	r2, #176	; 0xb0
 8015200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015204:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d102      	bne.n	8015212 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 801520c:	f04f 33ff 	mov.w	r3, #4294967295
 8015210:	e099      	b.n	8015346 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015218:	68fa      	ldr	r2, [r7, #12]
 801521a:	33b0      	adds	r3, #176	; 0xb0
 801521c:	009b      	lsls	r3, r3, #2
 801521e:	4413      	add	r3, r2
 8015220:	685b      	ldr	r3, [r3, #4]
 8015222:	685b      	ldr	r3, [r3, #4]
 8015224:	69ba      	ldr	r2, [r7, #24]
 8015226:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801522a:	69ba      	ldr	r2, [r7, #24]
 801522c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8015230:	7af8      	ldrb	r0, [r7, #11]
 8015232:	4798      	blx	r3
 8015234:	4603      	mov	r3, r0
 8015236:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8015238:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d104      	bne.n	801524a <SCSI_ReadCapacity16+0x62>
 8015240:	69bb      	ldr	r3, [r7, #24]
 8015242:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8015246:	2b02      	cmp	r3, #2
 8015248:	d108      	bne.n	801525c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801524a:	7af9      	ldrb	r1, [r7, #11]
 801524c:	233a      	movs	r3, #58	; 0x3a
 801524e:	2202      	movs	r2, #2
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	f000 f9da 	bl	801560a <SCSI_SenseCode>
    return -1;
 8015256:	f04f 33ff 	mov.w	r3, #4294967295
 801525a:	e074      	b.n	8015346 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	330a      	adds	r3, #10
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	330b      	adds	r3, #11
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801526c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	330c      	adds	r3, #12
 8015272:	781b      	ldrb	r3, [r3, #0]
 8015274:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8015276:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8015278:	687a      	ldr	r2, [r7, #4]
 801527a:	320d      	adds	r2, #13
 801527c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801527e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015280:	69bb      	ldr	r3, [r7, #24]
 8015282:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015284:	2300      	movs	r3, #0
 8015286:	77fb      	strb	r3, [r7, #31]
 8015288:	e007      	b.n	801529a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 801528a:	7ffb      	ldrb	r3, [r7, #31]
 801528c:	69ba      	ldr	r2, [r7, #24]
 801528e:	4413      	add	r3, r2
 8015290:	2200      	movs	r2, #0
 8015292:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015294:	7ffb      	ldrb	r3, [r7, #31]
 8015296:	3301      	adds	r3, #1
 8015298:	77fb      	strb	r3, [r7, #31]
 801529a:	7ffa      	ldrb	r2, [r7, #31]
 801529c:	69bb      	ldr	r3, [r7, #24]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d3f2      	bcc.n	801528a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80152aa:	3b01      	subs	r3, #1
 80152ac:	0e1b      	lsrs	r3, r3, #24
 80152ae:	b2da      	uxtb	r2, r3
 80152b0:	69bb      	ldr	r3, [r7, #24]
 80152b2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80152b4:	69bb      	ldr	r3, [r7, #24]
 80152b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80152ba:	3b01      	subs	r3, #1
 80152bc:	0c1b      	lsrs	r3, r3, #16
 80152be:	b2da      	uxtb	r2, r3
 80152c0:	69bb      	ldr	r3, [r7, #24]
 80152c2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80152c4:	69bb      	ldr	r3, [r7, #24]
 80152c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80152ca:	3b01      	subs	r3, #1
 80152cc:	0a1b      	lsrs	r3, r3, #8
 80152ce:	b2da      	uxtb	r2, r3
 80152d0:	69bb      	ldr	r3, [r7, #24]
 80152d2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80152d4:	69bb      	ldr	r3, [r7, #24]
 80152d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80152da:	b2db      	uxtb	r3, r3
 80152dc:	3b01      	subs	r3, #1
 80152de:	b2da      	uxtb	r2, r3
 80152e0:	69bb      	ldr	r3, [r7, #24]
 80152e2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80152ea:	161b      	asrs	r3, r3, #24
 80152ec:	b2da      	uxtb	r2, r3
 80152ee:	69bb      	ldr	r3, [r7, #24]
 80152f0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80152f2:	69bb      	ldr	r3, [r7, #24]
 80152f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80152f8:	141b      	asrs	r3, r3, #16
 80152fa:	b2da      	uxtb	r2, r3
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8015300:	69bb      	ldr	r3, [r7, #24]
 8015302:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015306:	0a1b      	lsrs	r3, r3, #8
 8015308:	b29b      	uxth	r3, r3
 801530a:	b2da      	uxtb	r2, r3
 801530c:	69bb      	ldr	r3, [r7, #24]
 801530e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8015310:	69bb      	ldr	r3, [r7, #24]
 8015312:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015316:	b2da      	uxtb	r2, r3
 8015318:	69bb      	ldr	r3, [r7, #24]
 801531a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	330a      	adds	r3, #10
 8015320:	781b      	ldrb	r3, [r3, #0]
 8015322:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	330b      	adds	r3, #11
 8015328:	781b      	ldrb	r3, [r3, #0]
 801532a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801532c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	330c      	adds	r3, #12
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8015336:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8015338:	687a      	ldr	r2, [r7, #4]
 801533a:	320d      	adds	r2, #13
 801533c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801533e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015340:	69bb      	ldr	r3, [r7, #24]
 8015342:	60da      	str	r2, [r3, #12]

  return 0;
 8015344:	2300      	movs	r3, #0
}
 8015346:	4618      	mov	r0, r3
 8015348:	3720      	adds	r7, #32
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}

0801534e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801534e:	b580      	push	{r7, lr}
 8015350:	b088      	sub	sp, #32
 8015352:	af00      	add	r7, sp, #0
 8015354:	60f8      	str	r0, [r7, #12]
 8015356:	460b      	mov	r3, r1
 8015358:	607a      	str	r2, [r7, #4]
 801535a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	32b0      	adds	r2, #176	; 0xb0
 8015366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801536a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801536c:	69bb      	ldr	r3, [r7, #24]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d102      	bne.n	8015378 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8015372:	f04f 33ff 	mov.w	r3, #4294967295
 8015376:	e061      	b.n	801543c <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	33b0      	adds	r3, #176	; 0xb0
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	4413      	add	r3, r2
 8015386:	685b      	ldr	r3, [r3, #4]
 8015388:	685b      	ldr	r3, [r3, #4]
 801538a:	f107 0214 	add.w	r2, r7, #20
 801538e:	f107 0110 	add.w	r1, r7, #16
 8015392:	7af8      	ldrb	r0, [r7, #11]
 8015394:	4798      	blx	r3
 8015396:	4603      	mov	r3, r0
 8015398:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801539a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d104      	bne.n	80153ac <SCSI_ReadFormatCapacity+0x5e>
 80153a2:	69bb      	ldr	r3, [r7, #24]
 80153a4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80153a8:	2b02      	cmp	r3, #2
 80153aa:	d108      	bne.n	80153be <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80153ac:	7af9      	ldrb	r1, [r7, #11]
 80153ae:	233a      	movs	r3, #58	; 0x3a
 80153b0:	2202      	movs	r2, #2
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f000 f929 	bl	801560a <SCSI_SenseCode>
    return -1;
 80153b8:	f04f 33ff 	mov.w	r3, #4294967295
 80153bc:	e03e      	b.n	801543c <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80153be:	2300      	movs	r3, #0
 80153c0:	83fb      	strh	r3, [r7, #30]
 80153c2:	e007      	b.n	80153d4 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80153c4:	8bfb      	ldrh	r3, [r7, #30]
 80153c6:	69ba      	ldr	r2, [r7, #24]
 80153c8:	4413      	add	r3, r2
 80153ca:	2200      	movs	r2, #0
 80153cc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80153ce:	8bfb      	ldrh	r3, [r7, #30]
 80153d0:	3301      	adds	r3, #1
 80153d2:	83fb      	strh	r3, [r7, #30]
 80153d4:	8bfb      	ldrh	r3, [r7, #30]
 80153d6:	2b0b      	cmp	r3, #11
 80153d8:	d9f4      	bls.n	80153c4 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80153da:	69bb      	ldr	r3, [r7, #24]
 80153dc:	2208      	movs	r2, #8
 80153de:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	3b01      	subs	r3, #1
 80153e4:	0e1b      	lsrs	r3, r3, #24
 80153e6:	b2da      	uxtb	r2, r3
 80153e8:	69bb      	ldr	r3, [r7, #24]
 80153ea:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	3b01      	subs	r3, #1
 80153f0:	0c1b      	lsrs	r3, r3, #16
 80153f2:	b2da      	uxtb	r2, r3
 80153f4:	69bb      	ldr	r3, [r7, #24]
 80153f6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	3b01      	subs	r3, #1
 80153fc:	0a1b      	lsrs	r3, r3, #8
 80153fe:	b2da      	uxtb	r2, r3
 8015400:	69bb      	ldr	r3, [r7, #24]
 8015402:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	b2db      	uxtb	r3, r3
 8015408:	3b01      	subs	r3, #1
 801540a:	b2da      	uxtb	r2, r3
 801540c:	69bb      	ldr	r3, [r7, #24]
 801540e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8015410:	69bb      	ldr	r3, [r7, #24]
 8015412:	2202      	movs	r2, #2
 8015414:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8015416:	8abb      	ldrh	r3, [r7, #20]
 8015418:	141b      	asrs	r3, r3, #16
 801541a:	b2da      	uxtb	r2, r3
 801541c:	69bb      	ldr	r3, [r7, #24]
 801541e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8015420:	8abb      	ldrh	r3, [r7, #20]
 8015422:	0a1b      	lsrs	r3, r3, #8
 8015424:	b29b      	uxth	r3, r3
 8015426:	b2da      	uxtb	r2, r3
 8015428:	69bb      	ldr	r3, [r7, #24]
 801542a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801542c:	8abb      	ldrh	r3, [r7, #20]
 801542e:	b2da      	uxtb	r2, r3
 8015430:	69bb      	ldr	r3, [r7, #24]
 8015432:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8015434:	69bb      	ldr	r3, [r7, #24]
 8015436:	220c      	movs	r2, #12
 8015438:	60da      	str	r2, [r3, #12]

  return 0;
 801543a:	2300      	movs	r3, #0
}
 801543c:	4618      	mov	r0, r3
 801543e:	3720      	adds	r7, #32
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}

08015444 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b086      	sub	sp, #24
 8015448:	af00      	add	r7, sp, #0
 801544a:	60f8      	str	r0, [r7, #12]
 801544c:	460b      	mov	r3, r1
 801544e:	607a      	str	r2, [r7, #4]
 8015450:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	32b0      	adds	r2, #176	; 0xb0
 801545c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015460:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8015462:	2317      	movs	r3, #23
 8015464:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8015466:	693b      	ldr	r3, [r7, #16]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d102      	bne.n	8015472 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 801546c:	f04f 33ff 	mov.w	r3, #4294967295
 8015470:	e011      	b.n	8015496 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	3304      	adds	r3, #4
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	b29b      	uxth	r3, r3
 801547a:	8afa      	ldrh	r2, [r7, #22]
 801547c:	429a      	cmp	r2, r3
 801547e:	d303      	bcc.n	8015488 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	3304      	adds	r3, #4
 8015484:	781b      	ldrb	r3, [r3, #0]
 8015486:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8015488:	8afb      	ldrh	r3, [r7, #22]
 801548a:	461a      	mov	r2, r3
 801548c:	4904      	ldr	r1, [pc, #16]	; (80154a0 <SCSI_ModeSense6+0x5c>)
 801548e:	6938      	ldr	r0, [r7, #16]
 8015490:	f000 fe28 	bl	80160e4 <SCSI_UpdateBotData>

  return 0;
 8015494:	2300      	movs	r3, #0
}
 8015496:	4618      	mov	r0, r3
 8015498:	3718      	adds	r7, #24
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}
 801549e:	bf00      	nop
 80154a0:	20000084 	.word	0x20000084

080154a4 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b086      	sub	sp, #24
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	60f8      	str	r0, [r7, #12]
 80154ac:	460b      	mov	r3, r1
 80154ae:	607a      	str	r2, [r7, #4]
 80154b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	32b0      	adds	r2, #176	; 0xb0
 80154bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154c0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80154c2:	231b      	movs	r3, #27
 80154c4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d102      	bne.n	80154d2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80154cc:	f04f 33ff 	mov.w	r3, #4294967295
 80154d0:	e011      	b.n	80154f6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	3308      	adds	r3, #8
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	b29b      	uxth	r3, r3
 80154da:	8afa      	ldrh	r2, [r7, #22]
 80154dc:	429a      	cmp	r2, r3
 80154de:	d303      	bcc.n	80154e8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	3308      	adds	r3, #8
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80154e8:	8afb      	ldrh	r3, [r7, #22]
 80154ea:	461a      	mov	r2, r3
 80154ec:	4904      	ldr	r1, [pc, #16]	; (8015500 <SCSI_ModeSense10+0x5c>)
 80154ee:	6938      	ldr	r0, [r7, #16]
 80154f0:	f000 fdf8 	bl	80160e4 <SCSI_UpdateBotData>

  return 0;
 80154f4:	2300      	movs	r3, #0
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3718      	adds	r7, #24
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop
 8015500:	2000009c 	.word	0x2000009c

08015504 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b086      	sub	sp, #24
 8015508:	af00      	add	r7, sp, #0
 801550a:	60f8      	str	r0, [r7, #12]
 801550c:	460b      	mov	r3, r1
 801550e:	607a      	str	r2, [r7, #4]
 8015510:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	32b0      	adds	r2, #176	; 0xb0
 801551c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015520:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d102      	bne.n	801552e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8015528:	f04f 33ff 	mov.w	r3, #4294967295
 801552c:	e069      	b.n	8015602 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015534:	2b00      	cmp	r3, #0
 8015536:	d10a      	bne.n	801554e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801553e:	2320      	movs	r3, #32
 8015540:	2205      	movs	r2, #5
 8015542:	68f8      	ldr	r0, [r7, #12]
 8015544:	f000 f861 	bl	801560a <SCSI_SenseCode>
    return -1;
 8015548:	f04f 33ff 	mov.w	r3, #4294967295
 801554c:	e059      	b.n	8015602 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801554e:	2300      	movs	r3, #0
 8015550:	75fb      	strb	r3, [r7, #23]
 8015552:	e007      	b.n	8015564 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8015554:	7dfb      	ldrb	r3, [r7, #23]
 8015556:	693a      	ldr	r2, [r7, #16]
 8015558:	4413      	add	r3, r2
 801555a:	2200      	movs	r2, #0
 801555c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801555e:	7dfb      	ldrb	r3, [r7, #23]
 8015560:	3301      	adds	r3, #1
 8015562:	75fb      	strb	r3, [r7, #23]
 8015564:	7dfb      	ldrb	r3, [r7, #23]
 8015566:	2b11      	cmp	r3, #17
 8015568:	d9f4      	bls.n	8015554 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	2270      	movs	r2, #112	; 0x70
 801556e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	220c      	movs	r2, #12
 8015574:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8015576:	693b      	ldr	r3, [r7, #16]
 8015578:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8015582:	429a      	cmp	r2, r3
 8015584:	d02e      	beq.n	80155e4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8015586:	693b      	ldr	r3, [r7, #16]
 8015588:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801558c:	461a      	mov	r2, r3
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	3248      	adds	r2, #72	; 0x48
 8015592:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8015596:	693b      	ldr	r3, [r7, #16]
 8015598:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80155a0:	693a      	ldr	r2, [r7, #16]
 80155a2:	3348      	adds	r3, #72	; 0x48
 80155a4:	00db      	lsls	r3, r3, #3
 80155a6:	4413      	add	r3, r2
 80155a8:	791a      	ldrb	r2, [r3, #4]
 80155aa:	693b      	ldr	r3, [r7, #16]
 80155ac:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80155ae:	693b      	ldr	r3, [r7, #16]
 80155b0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80155b4:	693a      	ldr	r2, [r7, #16]
 80155b6:	3348      	adds	r3, #72	; 0x48
 80155b8:	00db      	lsls	r3, r3, #3
 80155ba:	4413      	add	r3, r2
 80155bc:	795a      	ldrb	r2, [r3, #5]
 80155be:	693b      	ldr	r3, [r7, #16]
 80155c0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80155c2:	693b      	ldr	r3, [r7, #16]
 80155c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80155c8:	3301      	adds	r3, #1
 80155ca:	b2da      	uxtb	r2, r3
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80155d8:	2b04      	cmp	r3, #4
 80155da:	d103      	bne.n	80155e4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	2200      	movs	r2, #0
 80155e0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	2212      	movs	r2, #18
 80155e8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	3304      	adds	r3, #4
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	2b12      	cmp	r3, #18
 80155f2:	d805      	bhi.n	8015600 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3304      	adds	r3, #4
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	461a      	mov	r2, r3
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8015600:	2300      	movs	r3, #0
}
 8015602:	4618      	mov	r0, r3
 8015604:	3718      	adds	r7, #24
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}

0801560a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801560a:	b480      	push	{r7}
 801560c:	b085      	sub	sp, #20
 801560e:	af00      	add	r7, sp, #0
 8015610:	6078      	str	r0, [r7, #4]
 8015612:	4608      	mov	r0, r1
 8015614:	4611      	mov	r1, r2
 8015616:	461a      	mov	r2, r3
 8015618:	4603      	mov	r3, r0
 801561a:	70fb      	strb	r3, [r7, #3]
 801561c:	460b      	mov	r3, r1
 801561e:	70bb      	strb	r3, [r7, #2]
 8015620:	4613      	mov	r3, r2
 8015622:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	32b0      	adds	r2, #176	; 0xb0
 801562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015632:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d02c      	beq.n	8015694 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8015640:	461a      	mov	r2, r3
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	3248      	adds	r2, #72	; 0x48
 8015646:	78b9      	ldrb	r1, [r7, #2]
 8015648:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8015652:	68fa      	ldr	r2, [r7, #12]
 8015654:	3348      	adds	r3, #72	; 0x48
 8015656:	00db      	lsls	r3, r3, #3
 8015658:	4413      	add	r3, r2
 801565a:	787a      	ldrb	r2, [r7, #1]
 801565c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8015664:	68fa      	ldr	r2, [r7, #12]
 8015666:	3348      	adds	r3, #72	; 0x48
 8015668:	00db      	lsls	r3, r3, #3
 801566a:	4413      	add	r3, r2
 801566c:	2200      	movs	r2, #0
 801566e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8015676:	3301      	adds	r3, #1
 8015678:	b2da      	uxtb	r2, r3
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8015686:	2b04      	cmp	r3, #4
 8015688:	d105      	bne.n	8015696 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2200      	movs	r2, #0
 801568e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8015692:	e000      	b.n	8015696 <SCSI_SenseCode+0x8c>
    return;
 8015694:	bf00      	nop
  }
}
 8015696:	3714      	adds	r7, #20
 8015698:	46bd      	mov	sp, r7
 801569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569e:	4770      	bx	lr

080156a0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b086      	sub	sp, #24
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	60f8      	str	r0, [r7, #12]
 80156a8:	460b      	mov	r3, r1
 80156aa:	607a      	str	r2, [r7, #4]
 80156ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	32b0      	adds	r2, #176	; 0xb0
 80156b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d102      	bne.n	80156ca <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80156c4:	f04f 33ff 	mov.w	r3, #4294967295
 80156c8:	e03b      	b.n	8015742 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d10f      	bne.n	80156f4 <SCSI_StartStopUnit+0x54>
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	3304      	adds	r3, #4
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	f003 0303 	and.w	r3, r3, #3
 80156de:	2b02      	cmp	r3, #2
 80156e0:	d108      	bne.n	80156f4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80156e2:	7af9      	ldrb	r1, [r7, #11]
 80156e4:	2324      	movs	r3, #36	; 0x24
 80156e6:	2205      	movs	r2, #5
 80156e8:	68f8      	ldr	r0, [r7, #12]
 80156ea:	f7ff ff8e 	bl	801560a <SCSI_SenseCode>

    return -1;
 80156ee:	f04f 33ff 	mov.w	r3, #4294967295
 80156f2:	e026      	b.n	8015742 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	3304      	adds	r3, #4
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	f003 0303 	and.w	r3, r3, #3
 80156fe:	2b01      	cmp	r3, #1
 8015700:	d104      	bne.n	801570c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	2200      	movs	r2, #0
 8015706:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801570a:	e016      	b.n	801573a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	3304      	adds	r3, #4
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	f003 0303 	and.w	r3, r3, #3
 8015716:	2b02      	cmp	r3, #2
 8015718:	d104      	bne.n	8015724 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	2202      	movs	r2, #2
 801571e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8015722:	e00a      	b.n	801573a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	3304      	adds	r3, #4
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	f003 0303 	and.w	r3, r3, #3
 801572e:	2b03      	cmp	r3, #3
 8015730:	d103      	bne.n	801573a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	2200      	movs	r2, #0
 8015736:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801573a:	697b      	ldr	r3, [r7, #20]
 801573c:	2200      	movs	r2, #0
 801573e:	60da      	str	r2, [r3, #12]

  return 0;
 8015740:	2300      	movs	r3, #0
}
 8015742:	4618      	mov	r0, r3
 8015744:	3718      	adds	r7, #24
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}

0801574a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801574a:	b480      	push	{r7}
 801574c:	b087      	sub	sp, #28
 801574e:	af00      	add	r7, sp, #0
 8015750:	60f8      	str	r0, [r7, #12]
 8015752:	460b      	mov	r3, r1
 8015754:	607a      	str	r2, [r7, #4]
 8015756:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	32b0      	adds	r2, #176	; 0xb0
 8015762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015766:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d102      	bne.n	8015774 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801576e:	f04f 33ff 	mov.w	r3, #4294967295
 8015772:	e011      	b.n	8015798 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	3304      	adds	r3, #4
 8015778:	781b      	ldrb	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d104      	bne.n	8015788 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	2200      	movs	r2, #0
 8015782:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8015786:	e003      	b.n	8015790 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	2201      	movs	r2, #1
 801578c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	2200      	movs	r2, #0
 8015794:	60da      	str	r2, [r3, #12]

  return 0;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	371c      	adds	r7, #28
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr

080157a4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b086      	sub	sp, #24
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	60f8      	str	r0, [r7, #12]
 80157ac:	460b      	mov	r3, r1
 80157ae:	607a      	str	r2, [r7, #4]
 80157b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	32b0      	adds	r2, #176	; 0xb0
 80157bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d102      	bne.n	80157ce <SCSI_Read10+0x2a>
  {
    return -1;
 80157c8:	f04f 33ff 	mov.w	r3, #4294967295
 80157cc:	e090      	b.n	80158f0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	7a1b      	ldrb	r3, [r3, #8]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	f040 8082 	bne.w	80158dc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80157de:	b25b      	sxtb	r3, r3
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	db0a      	blt.n	80157fa <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80157ea:	2320      	movs	r3, #32
 80157ec:	2205      	movs	r2, #5
 80157ee:	68f8      	ldr	r0, [r7, #12]
 80157f0:	f7ff ff0b 	bl	801560a <SCSI_SenseCode>
      return -1;
 80157f4:	f04f 33ff 	mov.w	r3, #4294967295
 80157f8:	e07a      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8015800:	2b02      	cmp	r3, #2
 8015802:	d108      	bne.n	8015816 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015804:	7af9      	ldrb	r1, [r7, #11]
 8015806:	233a      	movs	r3, #58	; 0x3a
 8015808:	2202      	movs	r2, #2
 801580a:	68f8      	ldr	r0, [r7, #12]
 801580c:	f7ff fefd 	bl	801560a <SCSI_SenseCode>

      return -1;
 8015810:	f04f 33ff 	mov.w	r3, #4294967295
 8015814:	e06c      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801581c:	68fa      	ldr	r2, [r7, #12]
 801581e:	33b0      	adds	r3, #176	; 0xb0
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	4413      	add	r3, r2
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	7afa      	ldrb	r2, [r7, #11]
 801582a:	4610      	mov	r0, r2
 801582c:	4798      	blx	r3
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d008      	beq.n	8015846 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015834:	7af9      	ldrb	r1, [r7, #11]
 8015836:	233a      	movs	r3, #58	; 0x3a
 8015838:	2202      	movs	r2, #2
 801583a:	68f8      	ldr	r0, [r7, #12]
 801583c:	f7ff fee5 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015840:	f04f 33ff 	mov.w	r3, #4294967295
 8015844:	e054      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	3302      	adds	r3, #2
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	3303      	adds	r3, #3
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015856:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	3304      	adds	r3, #4
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015860:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015862:	687a      	ldr	r2, [r7, #4]
 8015864:	3205      	adds	r2, #5
 8015866:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015868:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	3307      	adds	r3, #7
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	021b      	lsls	r3, r3, #8
 8015878:	687a      	ldr	r2, [r7, #4]
 801587a:	3208      	adds	r2, #8
 801587c:	7812      	ldrb	r2, [r2, #0]
 801587e:	431a      	orrs	r2, r3
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015892:	7af9      	ldrb	r1, [r7, #11]
 8015894:	68f8      	ldr	r0, [r7, #12]
 8015896:	f000 fadc 	bl	8015e52 <SCSI_CheckAddressRange>
 801589a:	4603      	mov	r3, r0
 801589c:	2b00      	cmp	r3, #0
 801589e:	da02      	bge.n	80158a6 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80158a0:	f04f 33ff 	mov.w	r3, #4294967295
 80158a4:	e024      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80158ac:	697b      	ldr	r3, [r7, #20]
 80158ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80158b2:	6979      	ldr	r1, [r7, #20]
 80158b4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80158b8:	fb01 f303 	mul.w	r3, r1, r3
 80158bc:	429a      	cmp	r2, r3
 80158be:	d00a      	beq.n	80158d6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80158c6:	2320      	movs	r3, #32
 80158c8:	2205      	movs	r2, #5
 80158ca:	68f8      	ldr	r0, [r7, #12]
 80158cc:	f7ff fe9d 	bl	801560a <SCSI_SenseCode>
      return -1;
 80158d0:	f04f 33ff 	mov.w	r3, #4294967295
 80158d4:	e00c      	b.n	80158f0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	2202      	movs	r2, #2
 80158da:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80158dc:	697b      	ldr	r3, [r7, #20]
 80158de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80158e2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80158e4:	7afb      	ldrb	r3, [r7, #11]
 80158e6:	4619      	mov	r1, r3
 80158e8:	68f8      	ldr	r0, [r7, #12]
 80158ea:	f000 fadf 	bl	8015eac <SCSI_ProcessRead>
 80158ee:	4603      	mov	r3, r0
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	3718      	adds	r7, #24
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}

080158f8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b086      	sub	sp, #24
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	460b      	mov	r3, r1
 8015902:	607a      	str	r2, [r7, #4]
 8015904:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	32b0      	adds	r2, #176	; 0xb0
 8015910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015914:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d102      	bne.n	8015922 <SCSI_Read12+0x2a>
  {
    return -1;
 801591c:	f04f 33ff 	mov.w	r3, #4294967295
 8015920:	e09a      	b.n	8015a58 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	7a1b      	ldrb	r3, [r3, #8]
 8015926:	2b00      	cmp	r3, #0
 8015928:	f040 808c 	bne.w	8015a44 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801592c:	697b      	ldr	r3, [r7, #20]
 801592e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8015932:	b25b      	sxtb	r3, r3
 8015934:	2b00      	cmp	r3, #0
 8015936:	db0a      	blt.n	801594e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801593e:	2320      	movs	r3, #32
 8015940:	2205      	movs	r2, #5
 8015942:	68f8      	ldr	r0, [r7, #12]
 8015944:	f7ff fe61 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015948:	f04f 33ff 	mov.w	r3, #4294967295
 801594c:	e084      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8015954:	2b02      	cmp	r3, #2
 8015956:	d108      	bne.n	801596a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015958:	7af9      	ldrb	r1, [r7, #11]
 801595a:	233a      	movs	r3, #58	; 0x3a
 801595c:	2202      	movs	r2, #2
 801595e:	68f8      	ldr	r0, [r7, #12]
 8015960:	f7ff fe53 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015964:	f04f 33ff 	mov.w	r3, #4294967295
 8015968:	e076      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015970:	68fa      	ldr	r2, [r7, #12]
 8015972:	33b0      	adds	r3, #176	; 0xb0
 8015974:	009b      	lsls	r3, r3, #2
 8015976:	4413      	add	r3, r2
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	689b      	ldr	r3, [r3, #8]
 801597c:	7afa      	ldrb	r2, [r7, #11]
 801597e:	4610      	mov	r0, r2
 8015980:	4798      	blx	r3
 8015982:	4603      	mov	r3, r0
 8015984:	2b00      	cmp	r3, #0
 8015986:	d008      	beq.n	801599a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015988:	7af9      	ldrb	r1, [r7, #11]
 801598a:	233a      	movs	r3, #58	; 0x3a
 801598c:	2202      	movs	r2, #2
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	f7ff fe3b 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015994:	f04f 33ff 	mov.w	r3, #4294967295
 8015998:	e05e      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	3302      	adds	r3, #2
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	3303      	adds	r3, #3
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80159aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	3304      	adds	r3, #4
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80159b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80159b6:	687a      	ldr	r2, [r7, #4]
 80159b8:	3205      	adds	r2, #5
 80159ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80159bc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	3306      	adds	r3, #6
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	3307      	adds	r3, #7
 80159d0:	781b      	ldrb	r3, [r3, #0]
 80159d2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80159d4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	3308      	adds	r3, #8
 80159da:	781b      	ldrb	r3, [r3, #0]
 80159dc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80159de:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80159e0:	687a      	ldr	r2, [r7, #4]
 80159e2:	3209      	adds	r2, #9
 80159e4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80159e6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80159fa:	7af9      	ldrb	r1, [r7, #11]
 80159fc:	68f8      	ldr	r0, [r7, #12]
 80159fe:	f000 fa28 	bl	8015e52 <SCSI_CheckAddressRange>
 8015a02:	4603      	mov	r3, r0
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	da02      	bge.n	8015a0e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015a08:	f04f 33ff 	mov.w	r3, #4294967295
 8015a0c:	e024      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8015a14:	697b      	ldr	r3, [r7, #20]
 8015a16:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015a1a:	6979      	ldr	r1, [r7, #20]
 8015a1c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8015a20:	fb01 f303 	mul.w	r3, r1, r3
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d00a      	beq.n	8015a3e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8015a2e:	2320      	movs	r3, #32
 8015a30:	2205      	movs	r2, #5
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f7ff fde9 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015a38:	f04f 33ff 	mov.w	r3, #4294967295
 8015a3c:	e00c      	b.n	8015a58 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	2202      	movs	r2, #2
 8015a42:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015a4a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8015a4c:	7afb      	ldrb	r3, [r7, #11]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	68f8      	ldr	r0, [r7, #12]
 8015a52:	f000 fa2b 	bl	8015eac <SCSI_ProcessRead>
 8015a56:	4603      	mov	r3, r0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3718      	adds	r7, #24
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b086      	sub	sp, #24
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	460b      	mov	r3, r1
 8015a6a:	607a      	str	r2, [r7, #4]
 8015a6c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	32b0      	adds	r2, #176	; 0xb0
 8015a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a7c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d102      	bne.n	8015a8a <SCSI_Write10+0x2a>
  {
    return -1;
 8015a84:	f04f 33ff 	mov.w	r3, #4294967295
 8015a88:	e0ba      	b.n	8015c00 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	7a1b      	ldrb	r3, [r3, #8]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	f040 80b0 	bne.w	8015bf4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d10a      	bne.n	8015ab4 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8015aa4:	2320      	movs	r3, #32
 8015aa6:	2205      	movs	r2, #5
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f7ff fdae 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015aae:	f04f 33ff 	mov.w	r3, #4294967295
 8015ab2:	e0a5      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015ab4:	697b      	ldr	r3, [r7, #20]
 8015ab6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8015aba:	b25b      	sxtb	r3, r3
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	da0a      	bge.n	8015ad6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015ac0:	697b      	ldr	r3, [r7, #20]
 8015ac2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8015ac6:	2320      	movs	r3, #32
 8015ac8:	2205      	movs	r2, #5
 8015aca:	68f8      	ldr	r0, [r7, #12]
 8015acc:	f7ff fd9d 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ad4:	e094      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015adc:	68fa      	ldr	r2, [r7, #12]
 8015ade:	33b0      	adds	r3, #176	; 0xb0
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	4413      	add	r3, r2
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	689b      	ldr	r3, [r3, #8]
 8015ae8:	7afa      	ldrb	r2, [r7, #11]
 8015aea:	4610      	mov	r0, r2
 8015aec:	4798      	blx	r3
 8015aee:	4603      	mov	r3, r0
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d008      	beq.n	8015b06 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015af4:	7af9      	ldrb	r1, [r7, #11]
 8015af6:	233a      	movs	r3, #58	; 0x3a
 8015af8:	2202      	movs	r2, #2
 8015afa:	68f8      	ldr	r0, [r7, #12]
 8015afc:	f7ff fd85 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015b00:	f04f 33ff 	mov.w	r3, #4294967295
 8015b04:	e07c      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b0c:	68fa      	ldr	r2, [r7, #12]
 8015b0e:	33b0      	adds	r3, #176	; 0xb0
 8015b10:	009b      	lsls	r3, r3, #2
 8015b12:	4413      	add	r3, r2
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	68db      	ldr	r3, [r3, #12]
 8015b18:	7afa      	ldrb	r2, [r7, #11]
 8015b1a:	4610      	mov	r0, r2
 8015b1c:	4798      	blx	r3
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d008      	beq.n	8015b36 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015b24:	7af9      	ldrb	r1, [r7, #11]
 8015b26:	2327      	movs	r3, #39	; 0x27
 8015b28:	2202      	movs	r2, #2
 8015b2a:	68f8      	ldr	r0, [r7, #12]
 8015b2c:	f7ff fd6d 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015b30:	f04f 33ff 	mov.w	r3, #4294967295
 8015b34:	e064      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	3302      	adds	r3, #2
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	3303      	adds	r3, #3
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015b46:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	3304      	adds	r3, #4
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015b50:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015b52:	687a      	ldr	r2, [r7, #4]
 8015b54:	3205      	adds	r2, #5
 8015b56:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015b58:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	3307      	adds	r3, #7
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015b68:	687a      	ldr	r2, [r7, #4]
 8015b6a:	3208      	adds	r2, #8
 8015b6c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015b6e:	431a      	orrs	r2, r3
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015b82:	7af9      	ldrb	r1, [r7, #11]
 8015b84:	68f8      	ldr	r0, [r7, #12]
 8015b86:	f000 f964 	bl	8015e52 <SCSI_CheckAddressRange>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	da02      	bge.n	8015b96 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015b90:	f04f 33ff 	mov.w	r3, #4294967295
 8015b94:	e034      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015b9c:	697a      	ldr	r2, [r7, #20]
 8015b9e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8015ba2:	fb02 f303 	mul.w	r3, r2, r3
 8015ba6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015bae:	693a      	ldr	r2, [r7, #16]
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	d00a      	beq.n	8015bca <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8015bba:	2320      	movs	r3, #32
 8015bbc:	2205      	movs	r2, #5
 8015bbe:	68f8      	ldr	r0, [r7, #12]
 8015bc0:	f7ff fd23 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015bc8:	e01a      	b.n	8015c00 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015bd0:	bf28      	it	cs
 8015bd2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8015bd6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	2201      	movs	r2, #1
 8015bdc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015bde:	4b0a      	ldr	r3, [pc, #40]	; (8015c08 <SCSI_Write10+0x1a8>)
 8015be0:	7819      	ldrb	r1, [r3, #0]
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	f103 0210 	add.w	r2, r3, #16
 8015be8:	693b      	ldr	r3, [r7, #16]
 8015bea:	68f8      	ldr	r0, [r7, #12]
 8015bec:	f006 f9fd 	bl	801bfea <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	e005      	b.n	8015c00 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8015bf4:	7afb      	ldrb	r3, [r7, #11]
 8015bf6:	4619      	mov	r1, r3
 8015bf8:	68f8      	ldr	r0, [r7, #12]
 8015bfa:	f000 f9dd 	bl	8015fb8 <SCSI_ProcessWrite>
 8015bfe:	4603      	mov	r3, r0
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3718      	adds	r7, #24
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	20000073 	.word	0x20000073

08015c0c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b086      	sub	sp, #24
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	60f8      	str	r0, [r7, #12]
 8015c14:	460b      	mov	r3, r1
 8015c16:	607a      	str	r2, [r7, #4]
 8015c18:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	32b0      	adds	r2, #176	; 0xb0
 8015c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c28:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8015c2a:	697b      	ldr	r3, [r7, #20]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d102      	bne.n	8015c36 <SCSI_Write12+0x2a>
  {
    return -1;
 8015c30:	f04f 33ff 	mov.w	r3, #4294967295
 8015c34:	e0ca      	b.n	8015dcc <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015c36:	697b      	ldr	r3, [r7, #20]
 8015c38:	7a1b      	ldrb	r3, [r3, #8]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	f040 80c0 	bne.w	8015dc0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d10a      	bne.n	8015c60 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8015c50:	2320      	movs	r3, #32
 8015c52:	2205      	movs	r2, #5
 8015c54:	68f8      	ldr	r0, [r7, #12]
 8015c56:	f7ff fcd8 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8015c5e:	e0b5      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8015c66:	b25b      	sxtb	r3, r3
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	da0a      	bge.n	8015c82 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8015c72:	2320      	movs	r3, #32
 8015c74:	2205      	movs	r2, #5
 8015c76:	68f8      	ldr	r0, [r7, #12]
 8015c78:	f7ff fcc7 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c80:	e0a4      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c88:	68fa      	ldr	r2, [r7, #12]
 8015c8a:	33b0      	adds	r3, #176	; 0xb0
 8015c8c:	009b      	lsls	r3, r3, #2
 8015c8e:	4413      	add	r3, r2
 8015c90:	685b      	ldr	r3, [r3, #4]
 8015c92:	689b      	ldr	r3, [r3, #8]
 8015c94:	7afa      	ldrb	r2, [r7, #11]
 8015c96:	4610      	mov	r0, r2
 8015c98:	4798      	blx	r3
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d00b      	beq.n	8015cb8 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015ca0:	7af9      	ldrb	r1, [r7, #11]
 8015ca2:	233a      	movs	r3, #58	; 0x3a
 8015ca4:	2202      	movs	r2, #2
 8015ca6:	68f8      	ldr	r0, [r7, #12]
 8015ca8:	f7ff fcaf 	bl	801560a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	2205      	movs	r2, #5
 8015cb0:	721a      	strb	r2, [r3, #8]
      return -1;
 8015cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8015cb6:	e089      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	33b0      	adds	r3, #176	; 0xb0
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	4413      	add	r3, r2
 8015cc6:	685b      	ldr	r3, [r3, #4]
 8015cc8:	68db      	ldr	r3, [r3, #12]
 8015cca:	7afa      	ldrb	r2, [r7, #11]
 8015ccc:	4610      	mov	r0, r2
 8015cce:	4798      	blx	r3
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d00b      	beq.n	8015cee <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015cd6:	7af9      	ldrb	r1, [r7, #11]
 8015cd8:	2327      	movs	r3, #39	; 0x27
 8015cda:	2202      	movs	r2, #2
 8015cdc:	68f8      	ldr	r0, [r7, #12]
 8015cde:	f7ff fc94 	bl	801560a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	2205      	movs	r2, #5
 8015ce6:	721a      	strb	r2, [r3, #8]
      return -1;
 8015ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8015cec:	e06e      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	3302      	adds	r3, #2
 8015cf2:	781b      	ldrb	r3, [r3, #0]
 8015cf4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	3303      	adds	r3, #3
 8015cfa:	781b      	ldrb	r3, [r3, #0]
 8015cfc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015cfe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	3304      	adds	r3, #4
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015d08:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015d0a:	687a      	ldr	r2, [r7, #4]
 8015d0c:	3205      	adds	r2, #5
 8015d0e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015d10:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	3306      	adds	r3, #6
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	3307      	adds	r3, #7
 8015d24:	781b      	ldrb	r3, [r3, #0]
 8015d26:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015d28:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	3308      	adds	r3, #8
 8015d2e:	781b      	ldrb	r3, [r3, #0]
 8015d30:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015d32:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	3209      	adds	r2, #9
 8015d38:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8015d3a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8015d48:	697b      	ldr	r3, [r7, #20]
 8015d4a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015d4e:	7af9      	ldrb	r1, [r7, #11]
 8015d50:	68f8      	ldr	r0, [r7, #12]
 8015d52:	f000 f87e 	bl	8015e52 <SCSI_CheckAddressRange>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	da02      	bge.n	8015d62 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d60:	e034      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015d68:	697a      	ldr	r2, [r7, #20]
 8015d6a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8015d6e:	fb02 f303 	mul.w	r3, r2, r3
 8015d72:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015d7a:	693a      	ldr	r2, [r7, #16]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d00a      	beq.n	8015d96 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8015d86:	2320      	movs	r3, #32
 8015d88:	2205      	movs	r2, #5
 8015d8a:	68f8      	ldr	r0, [r7, #12]
 8015d8c:	f7ff fc3d 	bl	801560a <SCSI_SenseCode>
      return -1;
 8015d90:	f04f 33ff 	mov.w	r3, #4294967295
 8015d94:	e01a      	b.n	8015dcc <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d9c:	bf28      	it	cs
 8015d9e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8015da2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	2201      	movs	r2, #1
 8015da8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015daa:	4b0a      	ldr	r3, [pc, #40]	; (8015dd4 <SCSI_Write12+0x1c8>)
 8015dac:	7819      	ldrb	r1, [r3, #0]
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	f103 0210 	add.w	r2, r3, #16
 8015db4:	693b      	ldr	r3, [r7, #16]
 8015db6:	68f8      	ldr	r0, [r7, #12]
 8015db8:	f006 f917 	bl	801bfea <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	e005      	b.n	8015dcc <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8015dc0:	7afb      	ldrb	r3, [r7, #11]
 8015dc2:	4619      	mov	r1, r3
 8015dc4:	68f8      	ldr	r0, [r7, #12]
 8015dc6:	f000 f8f7 	bl	8015fb8 <SCSI_ProcessWrite>
 8015dca:	4603      	mov	r3, r0
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3718      	adds	r7, #24
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}
 8015dd4:	20000073 	.word	0x20000073

08015dd8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b086      	sub	sp, #24
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	60f8      	str	r0, [r7, #12]
 8015de0:	460b      	mov	r3, r1
 8015de2:	607a      	str	r2, [r7, #4]
 8015de4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	32b0      	adds	r2, #176	; 0xb0
 8015df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015df4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d102      	bne.n	8015e02 <SCSI_Verify10+0x2a>
  {
    return -1;
 8015dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8015e00:	e023      	b.n	8015e4a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	3301      	adds	r3, #1
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	f003 0302 	and.w	r3, r3, #2
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d008      	beq.n	8015e22 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015e10:	7af9      	ldrb	r1, [r7, #11]
 8015e12:	2324      	movs	r3, #36	; 0x24
 8015e14:	2205      	movs	r2, #5
 8015e16:	68f8      	ldr	r0, [r7, #12]
 8015e18:	f7ff fbf7 	bl	801560a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8015e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e20:	e013      	b.n	8015e4a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8015e28:	697b      	ldr	r3, [r7, #20]
 8015e2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015e2e:	7af9      	ldrb	r1, [r7, #11]
 8015e30:	68f8      	ldr	r0, [r7, #12]
 8015e32:	f000 f80e 	bl	8015e52 <SCSI_CheckAddressRange>
 8015e36:	4603      	mov	r3, r0
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	da02      	bge.n	8015e42 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8015e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e40:	e003      	b.n	8015e4a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	2200      	movs	r2, #0
 8015e46:	60da      	str	r2, [r3, #12]

  return 0;
 8015e48:	2300      	movs	r3, #0
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3718      	adds	r7, #24
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}

08015e52 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8015e52:	b580      	push	{r7, lr}
 8015e54:	b086      	sub	sp, #24
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	60f8      	str	r0, [r7, #12]
 8015e5a:	607a      	str	r2, [r7, #4]
 8015e5c:	603b      	str	r3, [r7, #0]
 8015e5e:	460b      	mov	r3, r1
 8015e60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	32b0      	adds	r2, #176	; 0xb0
 8015e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e70:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015e72:	697b      	ldr	r3, [r7, #20]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d102      	bne.n	8015e7e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015e78:	f04f 33ff 	mov.w	r3, #4294967295
 8015e7c:	e011      	b.n	8015ea2 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015e7e:	687a      	ldr	r2, [r7, #4]
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	441a      	add	r2, r3
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d908      	bls.n	8015ea0 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8015e8e:	7af9      	ldrb	r1, [r7, #11]
 8015e90:	2321      	movs	r3, #33	; 0x21
 8015e92:	2205      	movs	r2, #5
 8015e94:	68f8      	ldr	r0, [r7, #12]
 8015e96:	f7ff fbb8 	bl	801560a <SCSI_SenseCode>
    return -1;
 8015e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e9e:	e000      	b.n	8015ea2 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8015ea0:	2300      	movs	r3, #0
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	3718      	adds	r7, #24
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}
	...

08015eac <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015eac:	b590      	push	{r4, r7, lr}
 8015eae:	b085      	sub	sp, #20
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	460b      	mov	r3, r1
 8015eb6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	32b0      	adds	r2, #176	; 0xb0
 8015ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ec6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d102      	bne.n	8015ed4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8015ece:	f04f 33ff 	mov.w	r3, #4294967295
 8015ed2:	e06a      	b.n	8015faa <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015eda:	68fa      	ldr	r2, [r7, #12]
 8015edc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8015ee0:	fb02 f303 	mul.w	r3, r2, r3
 8015ee4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015ee6:	68bb      	ldr	r3, [r7, #8]
 8015ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015eec:	bf28      	it	cs
 8015eee:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8015ef2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	33b0      	adds	r3, #176	; 0xb0
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	4413      	add	r3, r2
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	691c      	ldr	r4, [r3, #16]
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	f103 0110 	add.w	r1, r3, #16
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015f18:	4618      	mov	r0, r3
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015f20:	b29b      	uxth	r3, r3
 8015f22:	78f8      	ldrb	r0, [r7, #3]
 8015f24:	47a0      	blx	r4
 8015f26:	4603      	mov	r3, r0
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	da08      	bge.n	8015f3e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8015f2c:	78f9      	ldrb	r1, [r7, #3]
 8015f2e:	2311      	movs	r3, #17
 8015f30:	2204      	movs	r2, #4
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7ff fb69 	bl	801560a <SCSI_SenseCode>
    return -1;
 8015f38:	f04f 33ff 	mov.w	r3, #4294967295
 8015f3c:	e035      	b.n	8015faa <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8015f3e:	4b1d      	ldr	r3, [pc, #116]	; (8015fb4 <SCSI_ProcessRead+0x108>)
 8015f40:	7819      	ldrb	r1, [r3, #0]
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f103 0210 	add.w	r2, r3, #16
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f006 f82c 	bl	801bfa8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015f5c:	4619      	mov	r1, r3
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f64:	441a      	add	r2, r3
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8015f78:	4619      	mov	r1, r3
 8015f7a:	68bb      	ldr	r3, [r7, #8]
 8015f7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f80:	1ad2      	subs	r2, r2, r3
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	1ad2      	subs	r2, r2, r3
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d102      	bne.n	8015fa8 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	2203      	movs	r2, #3
 8015fa6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015fa8:	2300      	movs	r3, #0
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3714      	adds	r7, #20
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd90      	pop	{r4, r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	20000072 	.word	0x20000072

08015fb8 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015fb8:	b590      	push	{r4, r7, lr}
 8015fba:	b085      	sub	sp, #20
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	460b      	mov	r3, r1
 8015fc2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	32b0      	adds	r2, #176	; 0xb0
 8015fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fd2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d102      	bne.n	8015fe0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8015fda:	f04f 33ff 	mov.w	r3, #4294967295
 8015fde:	e07a      	b.n	80160d6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015fe6:	68fa      	ldr	r2, [r7, #12]
 8015fe8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8015fec:	fb02 f303 	mul.w	r3, r2, r3
 8015ff0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015ff8:	bf28      	it	cs
 8015ffa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8015ffe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	33b0      	adds	r3, #176	; 0xb0
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	4413      	add	r3, r2
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	695c      	ldr	r4, [r3, #20]
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	f103 0110 	add.w	r1, r3, #16
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016024:	4618      	mov	r0, r3
 8016026:	68bb      	ldr	r3, [r7, #8]
 8016028:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801602c:	b29b      	uxth	r3, r3
 801602e:	78f8      	ldrb	r0, [r7, #3]
 8016030:	47a0      	blx	r4
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	da08      	bge.n	801604a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8016038:	78f9      	ldrb	r1, [r7, #3]
 801603a:	2303      	movs	r3, #3
 801603c:	2204      	movs	r2, #4
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f7ff fae3 	bl	801560a <SCSI_SenseCode>
    return -1;
 8016044:	f04f 33ff 	mov.w	r3, #4294967295
 8016048:	e045      	b.n	80160d6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016056:	4619      	mov	r1, r3
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	fbb3 f3f1 	udiv	r3, r3, r1
 801605e:	441a      	add	r2, r3
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8016072:	4619      	mov	r1, r3
 8016074:	68bb      	ldr	r3, [r7, #8]
 8016076:	fbb3 f3f1 	udiv	r3, r3, r1
 801607a:	1ad2      	subs	r2, r2, r3
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	1ad2      	subs	r2, r2, r3
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8016098:	2b00      	cmp	r3, #0
 801609a:	d104      	bne.n	80160a6 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801609c:	2100      	movs	r1, #0
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7fe fd14 	bl	8014acc <MSC_BOT_SendCSW>
 80160a4:	e016      	b.n	80160d4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80160ac:	68fa      	ldr	r2, [r7, #12]
 80160ae:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80160b2:	fb02 f303 	mul.w	r3, r2, r3
 80160b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160ba:	bf28      	it	cs
 80160bc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80160c0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80160c2:	4b07      	ldr	r3, [pc, #28]	; (80160e0 <SCSI_ProcessWrite+0x128>)
 80160c4:	7819      	ldrb	r1, [r3, #0]
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	f103 0210 	add.w	r2, r3, #16
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f005 ff8b 	bl	801bfea <USBD_LL_PrepareReceive>
  }

  return 0;
 80160d4:	2300      	movs	r3, #0
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3714      	adds	r7, #20
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd90      	pop	{r4, r7, pc}
 80160de:	bf00      	nop
 80160e0:	20000073 	.word	0x20000073

080160e4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80160e4:	b480      	push	{r7}
 80160e6:	b087      	sub	sp, #28
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	60f8      	str	r0, [r7, #12]
 80160ec:	60b9      	str	r1, [r7, #8]
 80160ee:	4613      	mov	r3, r2
 80160f0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80160f2:	88fb      	ldrh	r3, [r7, #6]
 80160f4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d102      	bne.n	8016102 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80160fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016100:	e013      	b.n	801612a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8016102:	8afa      	ldrh	r2, [r7, #22]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8016108:	e00b      	b.n	8016122 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801610a:	8afb      	ldrh	r3, [r7, #22]
 801610c:	3b01      	subs	r3, #1
 801610e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8016110:	8afb      	ldrh	r3, [r7, #22]
 8016112:	68ba      	ldr	r2, [r7, #8]
 8016114:	441a      	add	r2, r3
 8016116:	8afb      	ldrh	r3, [r7, #22]
 8016118:	7811      	ldrb	r1, [r2, #0]
 801611a:	68fa      	ldr	r2, [r7, #12]
 801611c:	4413      	add	r3, r2
 801611e:	460a      	mov	r2, r1
 8016120:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8016122:	8afb      	ldrh	r3, [r7, #22]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d1f0      	bne.n	801610a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8016128:	2300      	movs	r3, #0
}
 801612a:	4618      	mov	r0, r3
 801612c:	371c      	adds	r7, #28
 801612e:	46bd      	mov	sp, r7
 8016130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016134:	4770      	bx	lr

08016136 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016136:	b580      	push	{r7, lr}
 8016138:	b086      	sub	sp, #24
 801613a:	af00      	add	r7, sp, #0
 801613c:	60f8      	str	r0, [r7, #12]
 801613e:	60b9      	str	r1, [r7, #8]
 8016140:	4613      	mov	r3, r2
 8016142:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d101      	bne.n	801614e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801614a:	2303      	movs	r3, #3
 801614c:	e01f      	b.n	801618e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2200      	movs	r2, #0
 8016152:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2200      	movs	r2, #0
 801615a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	2200      	movs	r2, #0
 8016162:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d003      	beq.n	8016174 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	68ba      	ldr	r2, [r7, #8]
 8016170:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	2201      	movs	r2, #1
 8016178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	79fa      	ldrb	r2, [r7, #7]
 8016180:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016182:	68f8      	ldr	r0, [r7, #12]
 8016184:	f005 fdbc 	bl	801bd00 <USBD_LL_Init>
 8016188:	4603      	mov	r3, r0
 801618a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801618c:	7dfb      	ldrb	r3, [r7, #23]
}
 801618e:	4618      	mov	r0, r3
 8016190:	3718      	adds	r7, #24
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}

08016196 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016196:	b580      	push	{r7, lr}
 8016198:	b084      	sub	sp, #16
 801619a:	af00      	add	r7, sp, #0
 801619c:	6078      	str	r0, [r7, #4]
 801619e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80161a0:	2300      	movs	r3, #0
 80161a2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d101      	bne.n	80161ae <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80161aa:	2303      	movs	r3, #3
 80161ac:	e025      	b.n	80161fa <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	683a      	ldr	r2, [r7, #0]
 80161b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	32ae      	adds	r2, #174	; 0xae
 80161c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d00f      	beq.n	80161ea <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	32ae      	adds	r2, #174	; 0xae
 80161d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161da:	f107 020e 	add.w	r2, r7, #14
 80161de:	4610      	mov	r0, r2
 80161e0:	4798      	blx	r3
 80161e2:	4602      	mov	r2, r0
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80161f0:	1c5a      	adds	r2, r3, #1
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80161f8:	2300      	movs	r3, #0
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	3710      	adds	r7, #16
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}

08016202 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016202:	b580      	push	{r7, lr}
 8016204:	b082      	sub	sp, #8
 8016206:	af00      	add	r7, sp, #0
 8016208:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f005 fdc4 	bl	801bd98 <USBD_LL_Start>
 8016210:	4603      	mov	r3, r0
}
 8016212:	4618      	mov	r0, r3
 8016214:	3708      	adds	r7, #8
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}

0801621a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801621a:	b480      	push	{r7}
 801621c:	b083      	sub	sp, #12
 801621e:	af00      	add	r7, sp, #0
 8016220:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016222:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016224:	4618      	mov	r0, r3
 8016226:	370c      	adds	r7, #12
 8016228:	46bd      	mov	sp, r7
 801622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622e:	4770      	bx	lr

08016230 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b084      	sub	sp, #16
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
 8016238:	460b      	mov	r3, r1
 801623a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801623c:	2300      	movs	r3, #0
 801623e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016246:	2b00      	cmp	r3, #0
 8016248:	d009      	beq.n	801625e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	78fa      	ldrb	r2, [r7, #3]
 8016254:	4611      	mov	r1, r2
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	4798      	blx	r3
 801625a:	4603      	mov	r3, r0
 801625c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801625e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016260:	4618      	mov	r0, r3
 8016262:	3710      	adds	r7, #16
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b084      	sub	sp, #16
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
 8016270:	460b      	mov	r3, r1
 8016272:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016274:	2300      	movs	r3, #0
 8016276:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	78fa      	ldrb	r2, [r7, #3]
 8016282:	4611      	mov	r1, r2
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	4798      	blx	r3
 8016288:	4603      	mov	r3, r0
 801628a:	2b00      	cmp	r3, #0
 801628c:	d001      	beq.n	8016292 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801628e:	2303      	movs	r3, #3
 8016290:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016292:	7bfb      	ldrb	r3, [r7, #15]
}
 8016294:	4618      	mov	r0, r3
 8016296:	3710      	adds	r7, #16
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}

0801629c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b084      	sub	sp, #16
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80162ac:	6839      	ldr	r1, [r7, #0]
 80162ae:	4618      	mov	r0, r3
 80162b0:	f001 f909 	bl	80174c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2201      	movs	r2, #1
 80162b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80162c2:	461a      	mov	r2, r3
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80162d0:	f003 031f 	and.w	r3, r3, #31
 80162d4:	2b02      	cmp	r3, #2
 80162d6:	d01a      	beq.n	801630e <USBD_LL_SetupStage+0x72>
 80162d8:	2b02      	cmp	r3, #2
 80162da:	d822      	bhi.n	8016322 <USBD_LL_SetupStage+0x86>
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d002      	beq.n	80162e6 <USBD_LL_SetupStage+0x4a>
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d00a      	beq.n	80162fa <USBD_LL_SetupStage+0x5e>
 80162e4:	e01d      	b.n	8016322 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80162ec:	4619      	mov	r1, r3
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f000 fb60 	bl	80169b4 <USBD_StdDevReq>
 80162f4:	4603      	mov	r3, r0
 80162f6:	73fb      	strb	r3, [r7, #15]
      break;
 80162f8:	e020      	b.n	801633c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016300:	4619      	mov	r1, r3
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f000 fbc8 	bl	8016a98 <USBD_StdItfReq>
 8016308:	4603      	mov	r3, r0
 801630a:	73fb      	strb	r3, [r7, #15]
      break;
 801630c:	e016      	b.n	801633c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016314:	4619      	mov	r1, r3
 8016316:	6878      	ldr	r0, [r7, #4]
 8016318:	f000 fc2a 	bl	8016b70 <USBD_StdEPReq>
 801631c:	4603      	mov	r3, r0
 801631e:	73fb      	strb	r3, [r7, #15]
      break;
 8016320:	e00c      	b.n	801633c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016328:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801632c:	b2db      	uxtb	r3, r3
 801632e:	4619      	mov	r1, r3
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f005 fdb0 	bl	801be96 <USBD_LL_StallEP>
 8016336:	4603      	mov	r3, r0
 8016338:	73fb      	strb	r3, [r7, #15]
      break;
 801633a:	bf00      	nop
  }

  return ret;
 801633c:	7bfb      	ldrb	r3, [r7, #15]
}
 801633e:	4618      	mov	r0, r3
 8016340:	3710      	adds	r7, #16
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}

08016346 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016346:	b580      	push	{r7, lr}
 8016348:	b086      	sub	sp, #24
 801634a:	af00      	add	r7, sp, #0
 801634c:	60f8      	str	r0, [r7, #12]
 801634e:	460b      	mov	r3, r1
 8016350:	607a      	str	r2, [r7, #4]
 8016352:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016354:	2300      	movs	r3, #0
 8016356:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016358:	7afb      	ldrb	r3, [r7, #11]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d16e      	bne.n	801643c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016364:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801636c:	2b03      	cmp	r3, #3
 801636e:	f040 8098 	bne.w	80164a2 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016372:	693b      	ldr	r3, [r7, #16]
 8016374:	689a      	ldr	r2, [r3, #8]
 8016376:	693b      	ldr	r3, [r7, #16]
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	429a      	cmp	r2, r3
 801637c:	d913      	bls.n	80163a6 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	689a      	ldr	r2, [r3, #8]
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	68db      	ldr	r3, [r3, #12]
 8016386:	1ad2      	subs	r2, r2, r3
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	68da      	ldr	r2, [r3, #12]
 8016390:	693b      	ldr	r3, [r7, #16]
 8016392:	689b      	ldr	r3, [r3, #8]
 8016394:	4293      	cmp	r3, r2
 8016396:	bf28      	it	cs
 8016398:	4613      	movcs	r3, r2
 801639a:	461a      	mov	r2, r3
 801639c:	6879      	ldr	r1, [r7, #4]
 801639e:	68f8      	ldr	r0, [r7, #12]
 80163a0:	f001 f968 	bl	8017674 <USBD_CtlContinueRx>
 80163a4:	e07d      	b.n	80164a2 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80163ac:	f003 031f 	and.w	r3, r3, #31
 80163b0:	2b02      	cmp	r3, #2
 80163b2:	d014      	beq.n	80163de <USBD_LL_DataOutStage+0x98>
 80163b4:	2b02      	cmp	r3, #2
 80163b6:	d81d      	bhi.n	80163f4 <USBD_LL_DataOutStage+0xae>
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d002      	beq.n	80163c2 <USBD_LL_DataOutStage+0x7c>
 80163bc:	2b01      	cmp	r3, #1
 80163be:	d003      	beq.n	80163c8 <USBD_LL_DataOutStage+0x82>
 80163c0:	e018      	b.n	80163f4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80163c2:	2300      	movs	r3, #0
 80163c4:	75bb      	strb	r3, [r7, #22]
            break;
 80163c6:	e018      	b.n	80163fa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80163ce:	b2db      	uxtb	r3, r3
 80163d0:	4619      	mov	r1, r3
 80163d2:	68f8      	ldr	r0, [r7, #12]
 80163d4:	f000 fa5e 	bl	8016894 <USBD_CoreFindIF>
 80163d8:	4603      	mov	r3, r0
 80163da:	75bb      	strb	r3, [r7, #22]
            break;
 80163dc:	e00d      	b.n	80163fa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80163e4:	b2db      	uxtb	r3, r3
 80163e6:	4619      	mov	r1, r3
 80163e8:	68f8      	ldr	r0, [r7, #12]
 80163ea:	f000 fa60 	bl	80168ae <USBD_CoreFindEP>
 80163ee:	4603      	mov	r3, r0
 80163f0:	75bb      	strb	r3, [r7, #22]
            break;
 80163f2:	e002      	b.n	80163fa <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80163f4:	2300      	movs	r3, #0
 80163f6:	75bb      	strb	r3, [r7, #22]
            break;
 80163f8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80163fa:	7dbb      	ldrb	r3, [r7, #22]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d119      	bne.n	8016434 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016406:	b2db      	uxtb	r3, r3
 8016408:	2b03      	cmp	r3, #3
 801640a:	d113      	bne.n	8016434 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801640c:	7dba      	ldrb	r2, [r7, #22]
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	32ae      	adds	r2, #174	; 0xae
 8016412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016416:	691b      	ldr	r3, [r3, #16]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d00b      	beq.n	8016434 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801641c:	7dba      	ldrb	r2, [r7, #22]
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016424:	7dba      	ldrb	r2, [r7, #22]
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	32ae      	adds	r2, #174	; 0xae
 801642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801642e:	691b      	ldr	r3, [r3, #16]
 8016430:	68f8      	ldr	r0, [r7, #12]
 8016432:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016434:	68f8      	ldr	r0, [r7, #12]
 8016436:	f001 f92e 	bl	8017696 <USBD_CtlSendStatus>
 801643a:	e032      	b.n	80164a2 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801643c:	7afb      	ldrb	r3, [r7, #11]
 801643e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016442:	b2db      	uxtb	r3, r3
 8016444:	4619      	mov	r1, r3
 8016446:	68f8      	ldr	r0, [r7, #12]
 8016448:	f000 fa31 	bl	80168ae <USBD_CoreFindEP>
 801644c:	4603      	mov	r3, r0
 801644e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016450:	7dbb      	ldrb	r3, [r7, #22]
 8016452:	2bff      	cmp	r3, #255	; 0xff
 8016454:	d025      	beq.n	80164a2 <USBD_LL_DataOutStage+0x15c>
 8016456:	7dbb      	ldrb	r3, [r7, #22]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d122      	bne.n	80164a2 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016462:	b2db      	uxtb	r3, r3
 8016464:	2b03      	cmp	r3, #3
 8016466:	d117      	bne.n	8016498 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016468:	7dba      	ldrb	r2, [r7, #22]
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	32ae      	adds	r2, #174	; 0xae
 801646e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016472:	699b      	ldr	r3, [r3, #24]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d00f      	beq.n	8016498 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016478:	7dba      	ldrb	r2, [r7, #22]
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016480:	7dba      	ldrb	r2, [r7, #22]
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	32ae      	adds	r2, #174	; 0xae
 8016486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801648a:	699b      	ldr	r3, [r3, #24]
 801648c:	7afa      	ldrb	r2, [r7, #11]
 801648e:	4611      	mov	r1, r2
 8016490:	68f8      	ldr	r0, [r7, #12]
 8016492:	4798      	blx	r3
 8016494:	4603      	mov	r3, r0
 8016496:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016498:	7dfb      	ldrb	r3, [r7, #23]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d001      	beq.n	80164a2 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801649e:	7dfb      	ldrb	r3, [r7, #23]
 80164a0:	e000      	b.n	80164a4 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80164a2:	2300      	movs	r3, #0
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	3718      	adds	r7, #24
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}

080164ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b086      	sub	sp, #24
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	60f8      	str	r0, [r7, #12]
 80164b4:	460b      	mov	r3, r1
 80164b6:	607a      	str	r2, [r7, #4]
 80164b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80164ba:	7afb      	ldrb	r3, [r7, #11]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d16f      	bne.n	80165a0 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	3314      	adds	r3, #20
 80164c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80164cc:	2b02      	cmp	r3, #2
 80164ce:	d15a      	bne.n	8016586 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80164d0:	693b      	ldr	r3, [r7, #16]
 80164d2:	689a      	ldr	r2, [r3, #8]
 80164d4:	693b      	ldr	r3, [r7, #16]
 80164d6:	68db      	ldr	r3, [r3, #12]
 80164d8:	429a      	cmp	r2, r3
 80164da:	d914      	bls.n	8016506 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80164dc:	693b      	ldr	r3, [r7, #16]
 80164de:	689a      	ldr	r2, [r3, #8]
 80164e0:	693b      	ldr	r3, [r7, #16]
 80164e2:	68db      	ldr	r3, [r3, #12]
 80164e4:	1ad2      	subs	r2, r2, r3
 80164e6:	693b      	ldr	r3, [r7, #16]
 80164e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80164ea:	693b      	ldr	r3, [r7, #16]
 80164ec:	689b      	ldr	r3, [r3, #8]
 80164ee:	461a      	mov	r2, r3
 80164f0:	6879      	ldr	r1, [r7, #4]
 80164f2:	68f8      	ldr	r0, [r7, #12]
 80164f4:	f001 f8ad 	bl	8017652 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164f8:	2300      	movs	r3, #0
 80164fa:	2200      	movs	r2, #0
 80164fc:	2100      	movs	r1, #0
 80164fe:	68f8      	ldr	r0, [r7, #12]
 8016500:	f005 fd73 	bl	801bfea <USBD_LL_PrepareReceive>
 8016504:	e03f      	b.n	8016586 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016506:	693b      	ldr	r3, [r7, #16]
 8016508:	68da      	ldr	r2, [r3, #12]
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	689b      	ldr	r3, [r3, #8]
 801650e:	429a      	cmp	r2, r3
 8016510:	d11c      	bne.n	801654c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	685a      	ldr	r2, [r3, #4]
 8016516:	693b      	ldr	r3, [r7, #16]
 8016518:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801651a:	429a      	cmp	r2, r3
 801651c:	d316      	bcc.n	801654c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	685a      	ldr	r2, [r3, #4]
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016528:	429a      	cmp	r2, r3
 801652a:	d20f      	bcs.n	801654c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801652c:	2200      	movs	r2, #0
 801652e:	2100      	movs	r1, #0
 8016530:	68f8      	ldr	r0, [r7, #12]
 8016532:	f001 f88e 	bl	8017652 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2200      	movs	r2, #0
 801653a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801653e:	2300      	movs	r3, #0
 8016540:	2200      	movs	r2, #0
 8016542:	2100      	movs	r1, #0
 8016544:	68f8      	ldr	r0, [r7, #12]
 8016546:	f005 fd50 	bl	801bfea <USBD_LL_PrepareReceive>
 801654a:	e01c      	b.n	8016586 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016552:	b2db      	uxtb	r3, r3
 8016554:	2b03      	cmp	r3, #3
 8016556:	d10f      	bne.n	8016578 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801655e:	68db      	ldr	r3, [r3, #12]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d009      	beq.n	8016578 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	2200      	movs	r2, #0
 8016568:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016572:	68db      	ldr	r3, [r3, #12]
 8016574:	68f8      	ldr	r0, [r7, #12]
 8016576:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016578:	2180      	movs	r1, #128	; 0x80
 801657a:	68f8      	ldr	r0, [r7, #12]
 801657c:	f005 fc8b 	bl	801be96 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016580:	68f8      	ldr	r0, [r7, #12]
 8016582:	f001 f89b 	bl	80176bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801658c:	2b00      	cmp	r3, #0
 801658e:	d03a      	beq.n	8016606 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016590:	68f8      	ldr	r0, [r7, #12]
 8016592:	f7ff fe42 	bl	801621a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	2200      	movs	r2, #0
 801659a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801659e:	e032      	b.n	8016606 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80165a0:	7afb      	ldrb	r3, [r7, #11]
 80165a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80165a6:	b2db      	uxtb	r3, r3
 80165a8:	4619      	mov	r1, r3
 80165aa:	68f8      	ldr	r0, [r7, #12]
 80165ac:	f000 f97f 	bl	80168ae <USBD_CoreFindEP>
 80165b0:	4603      	mov	r3, r0
 80165b2:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80165b4:	7dfb      	ldrb	r3, [r7, #23]
 80165b6:	2bff      	cmp	r3, #255	; 0xff
 80165b8:	d025      	beq.n	8016606 <USBD_LL_DataInStage+0x15a>
 80165ba:	7dfb      	ldrb	r3, [r7, #23]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d122      	bne.n	8016606 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165c6:	b2db      	uxtb	r3, r3
 80165c8:	2b03      	cmp	r3, #3
 80165ca:	d11c      	bne.n	8016606 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80165cc:	7dfa      	ldrb	r2, [r7, #23]
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	32ae      	adds	r2, #174	; 0xae
 80165d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165d6:	695b      	ldr	r3, [r3, #20]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d014      	beq.n	8016606 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80165dc:	7dfa      	ldrb	r2, [r7, #23]
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80165e4:	7dfa      	ldrb	r2, [r7, #23]
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	32ae      	adds	r2, #174	; 0xae
 80165ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165ee:	695b      	ldr	r3, [r3, #20]
 80165f0:	7afa      	ldrb	r2, [r7, #11]
 80165f2:	4611      	mov	r1, r2
 80165f4:	68f8      	ldr	r0, [r7, #12]
 80165f6:	4798      	blx	r3
 80165f8:	4603      	mov	r3, r0
 80165fa:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80165fc:	7dbb      	ldrb	r3, [r7, #22]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d001      	beq.n	8016606 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016602:	7dbb      	ldrb	r3, [r7, #22]
 8016604:	e000      	b.n	8016608 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016606:	2300      	movs	r3, #0
}
 8016608:	4618      	mov	r0, r3
 801660a:	3718      	adds	r7, #24
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}

08016610 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016618:	2300      	movs	r3, #0
 801661a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	2201      	movs	r2, #1
 8016620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2200      	movs	r2, #0
 8016628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2200      	movs	r2, #0
 8016630:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2200      	movs	r2, #0
 8016636:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2200      	movs	r2, #0
 801663e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016648:	2b00      	cmp	r3, #0
 801664a:	d014      	beq.n	8016676 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016652:	685b      	ldr	r3, [r3, #4]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d00e      	beq.n	8016676 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801665e:	685b      	ldr	r3, [r3, #4]
 8016660:	687a      	ldr	r2, [r7, #4]
 8016662:	6852      	ldr	r2, [r2, #4]
 8016664:	b2d2      	uxtb	r2, r2
 8016666:	4611      	mov	r1, r2
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	4798      	blx	r3
 801666c:	4603      	mov	r3, r0
 801666e:	2b00      	cmp	r3, #0
 8016670:	d001      	beq.n	8016676 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016672:	2303      	movs	r3, #3
 8016674:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016676:	2340      	movs	r3, #64	; 0x40
 8016678:	2200      	movs	r2, #0
 801667a:	2100      	movs	r1, #0
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f005 fba6 	bl	801bdce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2201      	movs	r2, #1
 8016686:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2240      	movs	r2, #64	; 0x40
 801668e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016692:	2340      	movs	r3, #64	; 0x40
 8016694:	2200      	movs	r2, #0
 8016696:	2180      	movs	r1, #128	; 0x80
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	f005 fb98 	bl	801bdce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	2201      	movs	r2, #1
 80166a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	2240      	movs	r2, #64	; 0x40
 80166a8:	621a      	str	r2, [r3, #32]

  return ret;
 80166aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80166ac:	4618      	mov	r0, r3
 80166ae:	3710      	adds	r7, #16
 80166b0:	46bd      	mov	sp, r7
 80166b2:	bd80      	pop	{r7, pc}

080166b4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80166b4:	b480      	push	{r7}
 80166b6:	b083      	sub	sp, #12
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
 80166bc:	460b      	mov	r3, r1
 80166be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	78fa      	ldrb	r2, [r7, #3]
 80166c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80166c6:	2300      	movs	r3, #0
}
 80166c8:	4618      	mov	r0, r3
 80166ca:	370c      	adds	r7, #12
 80166cc:	46bd      	mov	sp, r7
 80166ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d2:	4770      	bx	lr

080166d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80166d4:	b480      	push	{r7}
 80166d6:	b083      	sub	sp, #12
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166e2:	b2da      	uxtb	r2, r3
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2204      	movs	r2, #4
 80166ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80166f2:	2300      	movs	r3, #0
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	370c      	adds	r7, #12
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr

08016700 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016700:	b480      	push	{r7}
 8016702:	b083      	sub	sp, #12
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801670e:	b2db      	uxtb	r3, r3
 8016710:	2b04      	cmp	r3, #4
 8016712:	d106      	bne.n	8016722 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801671a:	b2da      	uxtb	r2, r3
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016722:	2300      	movs	r3, #0
}
 8016724:	4618      	mov	r0, r3
 8016726:	370c      	adds	r7, #12
 8016728:	46bd      	mov	sp, r7
 801672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672e:	4770      	bx	lr

08016730 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b082      	sub	sp, #8
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801673e:	b2db      	uxtb	r3, r3
 8016740:	2b03      	cmp	r3, #3
 8016742:	d110      	bne.n	8016766 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801674a:	2b00      	cmp	r3, #0
 801674c:	d00b      	beq.n	8016766 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016754:	69db      	ldr	r3, [r3, #28]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d005      	beq.n	8016766 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016760:	69db      	ldr	r3, [r3, #28]
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016766:	2300      	movs	r3, #0
}
 8016768:	4618      	mov	r0, r3
 801676a:	3708      	adds	r7, #8
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}

08016770 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
 8016778:	460b      	mov	r3, r1
 801677a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	32ae      	adds	r2, #174	; 0xae
 8016786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d101      	bne.n	8016792 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801678e:	2303      	movs	r3, #3
 8016790:	e01c      	b.n	80167cc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016798:	b2db      	uxtb	r3, r3
 801679a:	2b03      	cmp	r3, #3
 801679c:	d115      	bne.n	80167ca <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	32ae      	adds	r2, #174	; 0xae
 80167a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167ac:	6a1b      	ldr	r3, [r3, #32]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d00b      	beq.n	80167ca <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	32ae      	adds	r2, #174	; 0xae
 80167bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167c0:	6a1b      	ldr	r3, [r3, #32]
 80167c2:	78fa      	ldrb	r2, [r7, #3]
 80167c4:	4611      	mov	r1, r2
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80167ca:	2300      	movs	r3, #0
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	3708      	adds	r7, #8
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}

080167d4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b082      	sub	sp, #8
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	460b      	mov	r3, r1
 80167de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	32ae      	adds	r2, #174	; 0xae
 80167ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d101      	bne.n	80167f6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80167f2:	2303      	movs	r3, #3
 80167f4:	e01c      	b.n	8016830 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167fc:	b2db      	uxtb	r3, r3
 80167fe:	2b03      	cmp	r3, #3
 8016800:	d115      	bne.n	801682e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	32ae      	adds	r2, #174	; 0xae
 801680c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016812:	2b00      	cmp	r3, #0
 8016814:	d00b      	beq.n	801682e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	32ae      	adds	r2, #174	; 0xae
 8016820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016826:	78fa      	ldrb	r2, [r7, #3]
 8016828:	4611      	mov	r1, r2
 801682a:	6878      	ldr	r0, [r7, #4]
 801682c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801682e:	2300      	movs	r3, #0
}
 8016830:	4618      	mov	r0, r3
 8016832:	3708      	adds	r7, #8
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}

08016838 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016838:	b480      	push	{r7}
 801683a:	b083      	sub	sp, #12
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016840:	2300      	movs	r3, #0
}
 8016842:	4618      	mov	r0, r3
 8016844:	370c      	adds	r7, #12
 8016846:	46bd      	mov	sp, r7
 8016848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684c:	4770      	bx	lr

0801684e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801684e:	b580      	push	{r7, lr}
 8016850:	b084      	sub	sp, #16
 8016852:	af00      	add	r7, sp, #0
 8016854:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016856:	2300      	movs	r3, #0
 8016858:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	2201      	movs	r2, #1
 801685e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016868:	2b00      	cmp	r3, #0
 801686a:	d00e      	beq.n	801688a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016872:	685b      	ldr	r3, [r3, #4]
 8016874:	687a      	ldr	r2, [r7, #4]
 8016876:	6852      	ldr	r2, [r2, #4]
 8016878:	b2d2      	uxtb	r2, r2
 801687a:	4611      	mov	r1, r2
 801687c:	6878      	ldr	r0, [r7, #4]
 801687e:	4798      	blx	r3
 8016880:	4603      	mov	r3, r0
 8016882:	2b00      	cmp	r3, #0
 8016884:	d001      	beq.n	801688a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016886:	2303      	movs	r3, #3
 8016888:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801688a:	7bfb      	ldrb	r3, [r7, #15]
}
 801688c:	4618      	mov	r0, r3
 801688e:	3710      	adds	r7, #16
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016894:	b480      	push	{r7}
 8016896:	b083      	sub	sp, #12
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	460b      	mov	r3, r1
 801689e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80168a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	370c      	adds	r7, #12
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80168ae:	b480      	push	{r7}
 80168b0:	b083      	sub	sp, #12
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
 80168b6:	460b      	mov	r3, r1
 80168b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80168ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80168bc:	4618      	mov	r0, r3
 80168be:	370c      	adds	r7, #12
 80168c0:	46bd      	mov	sp, r7
 80168c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c6:	4770      	bx	lr

080168c8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b086      	sub	sp, #24
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	460b      	mov	r3, r1
 80168d2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80168dc:	2300      	movs	r3, #0
 80168de:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	885b      	ldrh	r3, [r3, #2]
 80168e4:	b29a      	uxth	r2, r3
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	781b      	ldrb	r3, [r3, #0]
 80168ea:	b29b      	uxth	r3, r3
 80168ec:	429a      	cmp	r2, r3
 80168ee:	d920      	bls.n	8016932 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	781b      	ldrb	r3, [r3, #0]
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80168f8:	e013      	b.n	8016922 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80168fa:	f107 030a 	add.w	r3, r7, #10
 80168fe:	4619      	mov	r1, r3
 8016900:	6978      	ldr	r0, [r7, #20]
 8016902:	f000 f81b 	bl	801693c <USBD_GetNextDesc>
 8016906:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	785b      	ldrb	r3, [r3, #1]
 801690c:	2b05      	cmp	r3, #5
 801690e:	d108      	bne.n	8016922 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016914:	693b      	ldr	r3, [r7, #16]
 8016916:	789b      	ldrb	r3, [r3, #2]
 8016918:	78fa      	ldrb	r2, [r7, #3]
 801691a:	429a      	cmp	r2, r3
 801691c:	d008      	beq.n	8016930 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801691e:	2300      	movs	r3, #0
 8016920:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	885b      	ldrh	r3, [r3, #2]
 8016926:	b29a      	uxth	r2, r3
 8016928:	897b      	ldrh	r3, [r7, #10]
 801692a:	429a      	cmp	r2, r3
 801692c:	d8e5      	bhi.n	80168fa <USBD_GetEpDesc+0x32>
 801692e:	e000      	b.n	8016932 <USBD_GetEpDesc+0x6a>
          break;
 8016930:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016932:	693b      	ldr	r3, [r7, #16]
}
 8016934:	4618      	mov	r0, r3
 8016936:	3718      	adds	r7, #24
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}

0801693c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801693c:	b480      	push	{r7}
 801693e:	b085      	sub	sp, #20
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	881a      	ldrh	r2, [r3, #0]
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	b29b      	uxth	r3, r3
 8016954:	4413      	add	r3, r2
 8016956:	b29a      	uxth	r2, r3
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	461a      	mov	r2, r3
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	4413      	add	r3, r2
 8016966:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016968:	68fb      	ldr	r3, [r7, #12]
}
 801696a:	4618      	mov	r0, r3
 801696c:	3714      	adds	r7, #20
 801696e:	46bd      	mov	sp, r7
 8016970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016974:	4770      	bx	lr

08016976 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016976:	b480      	push	{r7}
 8016978:	b087      	sub	sp, #28
 801697a:	af00      	add	r7, sp, #0
 801697c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	781b      	ldrb	r3, [r3, #0]
 8016986:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016988:	697b      	ldr	r3, [r7, #20]
 801698a:	3301      	adds	r3, #1
 801698c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	781b      	ldrb	r3, [r3, #0]
 8016992:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016994:	8a3b      	ldrh	r3, [r7, #16]
 8016996:	021b      	lsls	r3, r3, #8
 8016998:	b21a      	sxth	r2, r3
 801699a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801699e:	4313      	orrs	r3, r2
 80169a0:	b21b      	sxth	r3, r3
 80169a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80169a4:	89fb      	ldrh	r3, [r7, #14]
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	371c      	adds	r7, #28
 80169aa:	46bd      	mov	sp, r7
 80169ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b0:	4770      	bx	lr
	...

080169b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b084      	sub	sp, #16
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80169be:	2300      	movs	r3, #0
 80169c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	781b      	ldrb	r3, [r3, #0]
 80169c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80169ca:	2b40      	cmp	r3, #64	; 0x40
 80169cc:	d005      	beq.n	80169da <USBD_StdDevReq+0x26>
 80169ce:	2b40      	cmp	r3, #64	; 0x40
 80169d0:	d857      	bhi.n	8016a82 <USBD_StdDevReq+0xce>
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d00f      	beq.n	80169f6 <USBD_StdDevReq+0x42>
 80169d6:	2b20      	cmp	r3, #32
 80169d8:	d153      	bne.n	8016a82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	32ae      	adds	r2, #174	; 0xae
 80169e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169e8:	689b      	ldr	r3, [r3, #8]
 80169ea:	6839      	ldr	r1, [r7, #0]
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	4798      	blx	r3
 80169f0:	4603      	mov	r3, r0
 80169f2:	73fb      	strb	r3, [r7, #15]
      break;
 80169f4:	e04a      	b.n	8016a8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	785b      	ldrb	r3, [r3, #1]
 80169fa:	2b09      	cmp	r3, #9
 80169fc:	d83b      	bhi.n	8016a76 <USBD_StdDevReq+0xc2>
 80169fe:	a201      	add	r2, pc, #4	; (adr r2, 8016a04 <USBD_StdDevReq+0x50>)
 8016a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a04:	08016a59 	.word	0x08016a59
 8016a08:	08016a6d 	.word	0x08016a6d
 8016a0c:	08016a77 	.word	0x08016a77
 8016a10:	08016a63 	.word	0x08016a63
 8016a14:	08016a77 	.word	0x08016a77
 8016a18:	08016a37 	.word	0x08016a37
 8016a1c:	08016a2d 	.word	0x08016a2d
 8016a20:	08016a77 	.word	0x08016a77
 8016a24:	08016a4f 	.word	0x08016a4f
 8016a28:	08016a41 	.word	0x08016a41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016a2c:	6839      	ldr	r1, [r7, #0]
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 fa3c 	bl	8016eac <USBD_GetDescriptor>
          break;
 8016a34:	e024      	b.n	8016a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016a36:	6839      	ldr	r1, [r7, #0]
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f000 fba1 	bl	8017180 <USBD_SetAddress>
          break;
 8016a3e:	e01f      	b.n	8016a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016a40:	6839      	ldr	r1, [r7, #0]
 8016a42:	6878      	ldr	r0, [r7, #4]
 8016a44:	f000 fbe0 	bl	8017208 <USBD_SetConfig>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	73fb      	strb	r3, [r7, #15]
          break;
 8016a4c:	e018      	b.n	8016a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016a4e:	6839      	ldr	r1, [r7, #0]
 8016a50:	6878      	ldr	r0, [r7, #4]
 8016a52:	f000 fc83 	bl	801735c <USBD_GetConfig>
          break;
 8016a56:	e013      	b.n	8016a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016a58:	6839      	ldr	r1, [r7, #0]
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f000 fcb4 	bl	80173c8 <USBD_GetStatus>
          break;
 8016a60:	e00e      	b.n	8016a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016a62:	6839      	ldr	r1, [r7, #0]
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f000 fce3 	bl	8017430 <USBD_SetFeature>
          break;
 8016a6a:	e009      	b.n	8016a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016a6c:	6839      	ldr	r1, [r7, #0]
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f000 fd07 	bl	8017482 <USBD_ClrFeature>
          break;
 8016a74:	e004      	b.n	8016a80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016a76:	6839      	ldr	r1, [r7, #0]
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f000 fd5e 	bl	801753a <USBD_CtlError>
          break;
 8016a7e:	bf00      	nop
      }
      break;
 8016a80:	e004      	b.n	8016a8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016a82:	6839      	ldr	r1, [r7, #0]
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f000 fd58 	bl	801753a <USBD_CtlError>
      break;
 8016a8a:	bf00      	nop
  }

  return ret;
 8016a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3710      	adds	r7, #16
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	bf00      	nop

08016a98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b084      	sub	sp, #16
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016aae:	2b40      	cmp	r3, #64	; 0x40
 8016ab0:	d005      	beq.n	8016abe <USBD_StdItfReq+0x26>
 8016ab2:	2b40      	cmp	r3, #64	; 0x40
 8016ab4:	d852      	bhi.n	8016b5c <USBD_StdItfReq+0xc4>
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d001      	beq.n	8016abe <USBD_StdItfReq+0x26>
 8016aba:	2b20      	cmp	r3, #32
 8016abc:	d14e      	bne.n	8016b5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ac4:	b2db      	uxtb	r3, r3
 8016ac6:	3b01      	subs	r3, #1
 8016ac8:	2b02      	cmp	r3, #2
 8016aca:	d840      	bhi.n	8016b4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016acc:	683b      	ldr	r3, [r7, #0]
 8016ace:	889b      	ldrh	r3, [r3, #4]
 8016ad0:	b2db      	uxtb	r3, r3
 8016ad2:	2b01      	cmp	r3, #1
 8016ad4:	d836      	bhi.n	8016b44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016ad6:	683b      	ldr	r3, [r7, #0]
 8016ad8:	889b      	ldrh	r3, [r3, #4]
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	4619      	mov	r1, r3
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f7ff fed8 	bl	8016894 <USBD_CoreFindIF>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016ae8:	7bbb      	ldrb	r3, [r7, #14]
 8016aea:	2bff      	cmp	r3, #255	; 0xff
 8016aec:	d01d      	beq.n	8016b2a <USBD_StdItfReq+0x92>
 8016aee:	7bbb      	ldrb	r3, [r7, #14]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d11a      	bne.n	8016b2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016af4:	7bba      	ldrb	r2, [r7, #14]
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	32ae      	adds	r2, #174	; 0xae
 8016afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016afe:	689b      	ldr	r3, [r3, #8]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d00f      	beq.n	8016b24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016b04:	7bba      	ldrb	r2, [r7, #14]
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016b0c:	7bba      	ldrb	r2, [r7, #14]
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	32ae      	adds	r2, #174	; 0xae
 8016b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b16:	689b      	ldr	r3, [r3, #8]
 8016b18:	6839      	ldr	r1, [r7, #0]
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	4798      	blx	r3
 8016b1e:	4603      	mov	r3, r0
 8016b20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016b22:	e004      	b.n	8016b2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016b24:	2303      	movs	r3, #3
 8016b26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016b28:	e001      	b.n	8016b2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016b2a:	2303      	movs	r3, #3
 8016b2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016b2e:	683b      	ldr	r3, [r7, #0]
 8016b30:	88db      	ldrh	r3, [r3, #6]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d110      	bne.n	8016b58 <USBD_StdItfReq+0xc0>
 8016b36:	7bfb      	ldrb	r3, [r7, #15]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d10d      	bne.n	8016b58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016b3c:	6878      	ldr	r0, [r7, #4]
 8016b3e:	f000 fdaa 	bl	8017696 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016b42:	e009      	b.n	8016b58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016b44:	6839      	ldr	r1, [r7, #0]
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	f000 fcf7 	bl	801753a <USBD_CtlError>
          break;
 8016b4c:	e004      	b.n	8016b58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016b4e:	6839      	ldr	r1, [r7, #0]
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f000 fcf2 	bl	801753a <USBD_CtlError>
          break;
 8016b56:	e000      	b.n	8016b5a <USBD_StdItfReq+0xc2>
          break;
 8016b58:	bf00      	nop
      }
      break;
 8016b5a:	e004      	b.n	8016b66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016b5c:	6839      	ldr	r1, [r7, #0]
 8016b5e:	6878      	ldr	r0, [r7, #4]
 8016b60:	f000 fceb 	bl	801753a <USBD_CtlError>
      break;
 8016b64:	bf00      	nop
  }

  return ret;
 8016b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b68:	4618      	mov	r0, r3
 8016b6a:	3710      	adds	r7, #16
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bd80      	pop	{r7, pc}

08016b70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b084      	sub	sp, #16
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
 8016b78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	889b      	ldrh	r3, [r3, #4]
 8016b82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	781b      	ldrb	r3, [r3, #0]
 8016b88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016b8c:	2b40      	cmp	r3, #64	; 0x40
 8016b8e:	d007      	beq.n	8016ba0 <USBD_StdEPReq+0x30>
 8016b90:	2b40      	cmp	r3, #64	; 0x40
 8016b92:	f200 817f 	bhi.w	8016e94 <USBD_StdEPReq+0x324>
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d02a      	beq.n	8016bf0 <USBD_StdEPReq+0x80>
 8016b9a:	2b20      	cmp	r3, #32
 8016b9c:	f040 817a 	bne.w	8016e94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016ba0:	7bbb      	ldrb	r3, [r7, #14]
 8016ba2:	4619      	mov	r1, r3
 8016ba4:	6878      	ldr	r0, [r7, #4]
 8016ba6:	f7ff fe82 	bl	80168ae <USBD_CoreFindEP>
 8016baa:	4603      	mov	r3, r0
 8016bac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016bae:	7b7b      	ldrb	r3, [r7, #13]
 8016bb0:	2bff      	cmp	r3, #255	; 0xff
 8016bb2:	f000 8174 	beq.w	8016e9e <USBD_StdEPReq+0x32e>
 8016bb6:	7b7b      	ldrb	r3, [r7, #13]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	f040 8170 	bne.w	8016e9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016bbe:	7b7a      	ldrb	r2, [r7, #13]
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016bc6:	7b7a      	ldrb	r2, [r7, #13]
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	32ae      	adds	r2, #174	; 0xae
 8016bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bd0:	689b      	ldr	r3, [r3, #8]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	f000 8163 	beq.w	8016e9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016bd8:	7b7a      	ldrb	r2, [r7, #13]
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	32ae      	adds	r2, #174	; 0xae
 8016bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016be2:	689b      	ldr	r3, [r3, #8]
 8016be4:	6839      	ldr	r1, [r7, #0]
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	4798      	blx	r3
 8016bea:	4603      	mov	r3, r0
 8016bec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016bee:	e156      	b.n	8016e9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016bf0:	683b      	ldr	r3, [r7, #0]
 8016bf2:	785b      	ldrb	r3, [r3, #1]
 8016bf4:	2b03      	cmp	r3, #3
 8016bf6:	d008      	beq.n	8016c0a <USBD_StdEPReq+0x9a>
 8016bf8:	2b03      	cmp	r3, #3
 8016bfa:	f300 8145 	bgt.w	8016e88 <USBD_StdEPReq+0x318>
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	f000 809b 	beq.w	8016d3a <USBD_StdEPReq+0x1ca>
 8016c04:	2b01      	cmp	r3, #1
 8016c06:	d03c      	beq.n	8016c82 <USBD_StdEPReq+0x112>
 8016c08:	e13e      	b.n	8016e88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c10:	b2db      	uxtb	r3, r3
 8016c12:	2b02      	cmp	r3, #2
 8016c14:	d002      	beq.n	8016c1c <USBD_StdEPReq+0xac>
 8016c16:	2b03      	cmp	r3, #3
 8016c18:	d016      	beq.n	8016c48 <USBD_StdEPReq+0xd8>
 8016c1a:	e02c      	b.n	8016c76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c1c:	7bbb      	ldrb	r3, [r7, #14]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d00d      	beq.n	8016c3e <USBD_StdEPReq+0xce>
 8016c22:	7bbb      	ldrb	r3, [r7, #14]
 8016c24:	2b80      	cmp	r3, #128	; 0x80
 8016c26:	d00a      	beq.n	8016c3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016c28:	7bbb      	ldrb	r3, [r7, #14]
 8016c2a:	4619      	mov	r1, r3
 8016c2c:	6878      	ldr	r0, [r7, #4]
 8016c2e:	f005 f932 	bl	801be96 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016c32:	2180      	movs	r1, #128	; 0x80
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f005 f92e 	bl	801be96 <USBD_LL_StallEP>
 8016c3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016c3c:	e020      	b.n	8016c80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016c3e:	6839      	ldr	r1, [r7, #0]
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f000 fc7a 	bl	801753a <USBD_CtlError>
              break;
 8016c46:	e01b      	b.n	8016c80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	885b      	ldrh	r3, [r3, #2]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d10e      	bne.n	8016c6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016c50:	7bbb      	ldrb	r3, [r7, #14]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d00b      	beq.n	8016c6e <USBD_StdEPReq+0xfe>
 8016c56:	7bbb      	ldrb	r3, [r7, #14]
 8016c58:	2b80      	cmp	r3, #128	; 0x80
 8016c5a:	d008      	beq.n	8016c6e <USBD_StdEPReq+0xfe>
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	88db      	ldrh	r3, [r3, #6]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d104      	bne.n	8016c6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016c64:	7bbb      	ldrb	r3, [r7, #14]
 8016c66:	4619      	mov	r1, r3
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f005 f914 	bl	801be96 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f000 fd11 	bl	8017696 <USBD_CtlSendStatus>

              break;
 8016c74:	e004      	b.n	8016c80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016c76:	6839      	ldr	r1, [r7, #0]
 8016c78:	6878      	ldr	r0, [r7, #4]
 8016c7a:	f000 fc5e 	bl	801753a <USBD_CtlError>
              break;
 8016c7e:	bf00      	nop
          }
          break;
 8016c80:	e107      	b.n	8016e92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c88:	b2db      	uxtb	r3, r3
 8016c8a:	2b02      	cmp	r3, #2
 8016c8c:	d002      	beq.n	8016c94 <USBD_StdEPReq+0x124>
 8016c8e:	2b03      	cmp	r3, #3
 8016c90:	d016      	beq.n	8016cc0 <USBD_StdEPReq+0x150>
 8016c92:	e04b      	b.n	8016d2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c94:	7bbb      	ldrb	r3, [r7, #14]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d00d      	beq.n	8016cb6 <USBD_StdEPReq+0x146>
 8016c9a:	7bbb      	ldrb	r3, [r7, #14]
 8016c9c:	2b80      	cmp	r3, #128	; 0x80
 8016c9e:	d00a      	beq.n	8016cb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ca0:	7bbb      	ldrb	r3, [r7, #14]
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	f005 f8f6 	bl	801be96 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016caa:	2180      	movs	r1, #128	; 0x80
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f005 f8f2 	bl	801be96 <USBD_LL_StallEP>
 8016cb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016cb4:	e040      	b.n	8016d38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016cb6:	6839      	ldr	r1, [r7, #0]
 8016cb8:	6878      	ldr	r0, [r7, #4]
 8016cba:	f000 fc3e 	bl	801753a <USBD_CtlError>
              break;
 8016cbe:	e03b      	b.n	8016d38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	885b      	ldrh	r3, [r3, #2]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d136      	bne.n	8016d36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016cc8:	7bbb      	ldrb	r3, [r7, #14]
 8016cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d004      	beq.n	8016cdc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016cd2:	7bbb      	ldrb	r3, [r7, #14]
 8016cd4:	4619      	mov	r1, r3
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f005 f8fc 	bl	801bed4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016cdc:	6878      	ldr	r0, [r7, #4]
 8016cde:	f000 fcda 	bl	8017696 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016ce2:	7bbb      	ldrb	r3, [r7, #14]
 8016ce4:	4619      	mov	r1, r3
 8016ce6:	6878      	ldr	r0, [r7, #4]
 8016ce8:	f7ff fde1 	bl	80168ae <USBD_CoreFindEP>
 8016cec:	4603      	mov	r3, r0
 8016cee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016cf0:	7b7b      	ldrb	r3, [r7, #13]
 8016cf2:	2bff      	cmp	r3, #255	; 0xff
 8016cf4:	d01f      	beq.n	8016d36 <USBD_StdEPReq+0x1c6>
 8016cf6:	7b7b      	ldrb	r3, [r7, #13]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d11c      	bne.n	8016d36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016cfc:	7b7a      	ldrb	r2, [r7, #13]
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016d04:	7b7a      	ldrb	r2, [r7, #13]
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	32ae      	adds	r2, #174	; 0xae
 8016d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d0e:	689b      	ldr	r3, [r3, #8]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d010      	beq.n	8016d36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016d14:	7b7a      	ldrb	r2, [r7, #13]
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	32ae      	adds	r2, #174	; 0xae
 8016d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d1e:	689b      	ldr	r3, [r3, #8]
 8016d20:	6839      	ldr	r1, [r7, #0]
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	4798      	blx	r3
 8016d26:	4603      	mov	r3, r0
 8016d28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016d2a:	e004      	b.n	8016d36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016d2c:	6839      	ldr	r1, [r7, #0]
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f000 fc03 	bl	801753a <USBD_CtlError>
              break;
 8016d34:	e000      	b.n	8016d38 <USBD_StdEPReq+0x1c8>
              break;
 8016d36:	bf00      	nop
          }
          break;
 8016d38:	e0ab      	b.n	8016e92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	2b02      	cmp	r3, #2
 8016d44:	d002      	beq.n	8016d4c <USBD_StdEPReq+0x1dc>
 8016d46:	2b03      	cmp	r3, #3
 8016d48:	d032      	beq.n	8016db0 <USBD_StdEPReq+0x240>
 8016d4a:	e097      	b.n	8016e7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016d4c:	7bbb      	ldrb	r3, [r7, #14]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d007      	beq.n	8016d62 <USBD_StdEPReq+0x1f2>
 8016d52:	7bbb      	ldrb	r3, [r7, #14]
 8016d54:	2b80      	cmp	r3, #128	; 0x80
 8016d56:	d004      	beq.n	8016d62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016d58:	6839      	ldr	r1, [r7, #0]
 8016d5a:	6878      	ldr	r0, [r7, #4]
 8016d5c:	f000 fbed 	bl	801753a <USBD_CtlError>
                break;
 8016d60:	e091      	b.n	8016e86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	da0b      	bge.n	8016d82 <USBD_StdEPReq+0x212>
 8016d6a:	7bbb      	ldrb	r3, [r7, #14]
 8016d6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d70:	4613      	mov	r3, r2
 8016d72:	009b      	lsls	r3, r3, #2
 8016d74:	4413      	add	r3, r2
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	3310      	adds	r3, #16
 8016d7a:	687a      	ldr	r2, [r7, #4]
 8016d7c:	4413      	add	r3, r2
 8016d7e:	3304      	adds	r3, #4
 8016d80:	e00b      	b.n	8016d9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016d82:	7bbb      	ldrb	r3, [r7, #14]
 8016d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d88:	4613      	mov	r3, r2
 8016d8a:	009b      	lsls	r3, r3, #2
 8016d8c:	4413      	add	r3, r2
 8016d8e:	009b      	lsls	r3, r3, #2
 8016d90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016d94:	687a      	ldr	r2, [r7, #4]
 8016d96:	4413      	add	r3, r2
 8016d98:	3304      	adds	r3, #4
 8016d9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016d9c:	68bb      	ldr	r3, [r7, #8]
 8016d9e:	2200      	movs	r2, #0
 8016da0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	2202      	movs	r2, #2
 8016da6:	4619      	mov	r1, r3
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	f000 fc37 	bl	801761c <USBD_CtlSendData>
              break;
 8016dae:	e06a      	b.n	8016e86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	da11      	bge.n	8016ddc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016db8:	7bbb      	ldrb	r3, [r7, #14]
 8016dba:	f003 020f 	and.w	r2, r3, #15
 8016dbe:	6879      	ldr	r1, [r7, #4]
 8016dc0:	4613      	mov	r3, r2
 8016dc2:	009b      	lsls	r3, r3, #2
 8016dc4:	4413      	add	r3, r2
 8016dc6:	009b      	lsls	r3, r3, #2
 8016dc8:	440b      	add	r3, r1
 8016dca:	3324      	adds	r3, #36	; 0x24
 8016dcc:	881b      	ldrh	r3, [r3, #0]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d117      	bne.n	8016e02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016dd2:	6839      	ldr	r1, [r7, #0]
 8016dd4:	6878      	ldr	r0, [r7, #4]
 8016dd6:	f000 fbb0 	bl	801753a <USBD_CtlError>
                  break;
 8016dda:	e054      	b.n	8016e86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016ddc:	7bbb      	ldrb	r3, [r7, #14]
 8016dde:	f003 020f 	and.w	r2, r3, #15
 8016de2:	6879      	ldr	r1, [r7, #4]
 8016de4:	4613      	mov	r3, r2
 8016de6:	009b      	lsls	r3, r3, #2
 8016de8:	4413      	add	r3, r2
 8016dea:	009b      	lsls	r3, r3, #2
 8016dec:	440b      	add	r3, r1
 8016dee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016df2:	881b      	ldrh	r3, [r3, #0]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d104      	bne.n	8016e02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016df8:	6839      	ldr	r1, [r7, #0]
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f000 fb9d 	bl	801753a <USBD_CtlError>
                  break;
 8016e00:	e041      	b.n	8016e86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	da0b      	bge.n	8016e22 <USBD_StdEPReq+0x2b2>
 8016e0a:	7bbb      	ldrb	r3, [r7, #14]
 8016e0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e10:	4613      	mov	r3, r2
 8016e12:	009b      	lsls	r3, r3, #2
 8016e14:	4413      	add	r3, r2
 8016e16:	009b      	lsls	r3, r3, #2
 8016e18:	3310      	adds	r3, #16
 8016e1a:	687a      	ldr	r2, [r7, #4]
 8016e1c:	4413      	add	r3, r2
 8016e1e:	3304      	adds	r3, #4
 8016e20:	e00b      	b.n	8016e3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016e22:	7bbb      	ldrb	r3, [r7, #14]
 8016e24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e28:	4613      	mov	r3, r2
 8016e2a:	009b      	lsls	r3, r3, #2
 8016e2c:	4413      	add	r3, r2
 8016e2e:	009b      	lsls	r3, r3, #2
 8016e30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	4413      	add	r3, r2
 8016e38:	3304      	adds	r3, #4
 8016e3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016e3c:	7bbb      	ldrb	r3, [r7, #14]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d002      	beq.n	8016e48 <USBD_StdEPReq+0x2d8>
 8016e42:	7bbb      	ldrb	r3, [r7, #14]
 8016e44:	2b80      	cmp	r3, #128	; 0x80
 8016e46:	d103      	bne.n	8016e50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	601a      	str	r2, [r3, #0]
 8016e4e:	e00e      	b.n	8016e6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016e50:	7bbb      	ldrb	r3, [r7, #14]
 8016e52:	4619      	mov	r1, r3
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f005 f85c 	bl	801bf12 <USBD_LL_IsStallEP>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d003      	beq.n	8016e68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	2201      	movs	r2, #1
 8016e64:	601a      	str	r2, [r3, #0]
 8016e66:	e002      	b.n	8016e6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016e68:	68bb      	ldr	r3, [r7, #8]
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016e6e:	68bb      	ldr	r3, [r7, #8]
 8016e70:	2202      	movs	r2, #2
 8016e72:	4619      	mov	r1, r3
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f000 fbd1 	bl	801761c <USBD_CtlSendData>
              break;
 8016e7a:	e004      	b.n	8016e86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016e7c:	6839      	ldr	r1, [r7, #0]
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f000 fb5b 	bl	801753a <USBD_CtlError>
              break;
 8016e84:	bf00      	nop
          }
          break;
 8016e86:	e004      	b.n	8016e92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016e88:	6839      	ldr	r1, [r7, #0]
 8016e8a:	6878      	ldr	r0, [r7, #4]
 8016e8c:	f000 fb55 	bl	801753a <USBD_CtlError>
          break;
 8016e90:	bf00      	nop
      }
      break;
 8016e92:	e005      	b.n	8016ea0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016e94:	6839      	ldr	r1, [r7, #0]
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f000 fb4f 	bl	801753a <USBD_CtlError>
      break;
 8016e9c:	e000      	b.n	8016ea0 <USBD_StdEPReq+0x330>
      break;
 8016e9e:	bf00      	nop
  }

  return ret;
 8016ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3710      	adds	r7, #16
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}
	...

08016eac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b084      	sub	sp, #16
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016ec2:	683b      	ldr	r3, [r7, #0]
 8016ec4:	885b      	ldrh	r3, [r3, #2]
 8016ec6:	0a1b      	lsrs	r3, r3, #8
 8016ec8:	b29b      	uxth	r3, r3
 8016eca:	3b01      	subs	r3, #1
 8016ecc:	2b06      	cmp	r3, #6
 8016ece:	f200 8128 	bhi.w	8017122 <USBD_GetDescriptor+0x276>
 8016ed2:	a201      	add	r2, pc, #4	; (adr r2, 8016ed8 <USBD_GetDescriptor+0x2c>)
 8016ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ed8:	08016ef5 	.word	0x08016ef5
 8016edc:	08016f0d 	.word	0x08016f0d
 8016ee0:	08016f4d 	.word	0x08016f4d
 8016ee4:	08017123 	.word	0x08017123
 8016ee8:	08017123 	.word	0x08017123
 8016eec:	080170c3 	.word	0x080170c3
 8016ef0:	080170ef 	.word	0x080170ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	687a      	ldr	r2, [r7, #4]
 8016efe:	7c12      	ldrb	r2, [r2, #16]
 8016f00:	f107 0108 	add.w	r1, r7, #8
 8016f04:	4610      	mov	r0, r2
 8016f06:	4798      	blx	r3
 8016f08:	60f8      	str	r0, [r7, #12]
      break;
 8016f0a:	e112      	b.n	8017132 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	7c1b      	ldrb	r3, [r3, #16]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d10d      	bne.n	8016f30 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f1c:	f107 0208 	add.w	r2, r7, #8
 8016f20:	4610      	mov	r0, r2
 8016f22:	4798      	blx	r3
 8016f24:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	3301      	adds	r3, #1
 8016f2a:	2202      	movs	r2, #2
 8016f2c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016f2e:	e100      	b.n	8017132 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f38:	f107 0208 	add.w	r2, r7, #8
 8016f3c:	4610      	mov	r0, r2
 8016f3e:	4798      	blx	r3
 8016f40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	3301      	adds	r3, #1
 8016f46:	2202      	movs	r2, #2
 8016f48:	701a      	strb	r2, [r3, #0]
      break;
 8016f4a:	e0f2      	b.n	8017132 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	885b      	ldrh	r3, [r3, #2]
 8016f50:	b2db      	uxtb	r3, r3
 8016f52:	2b05      	cmp	r3, #5
 8016f54:	f200 80ac 	bhi.w	80170b0 <USBD_GetDescriptor+0x204>
 8016f58:	a201      	add	r2, pc, #4	; (adr r2, 8016f60 <USBD_GetDescriptor+0xb4>)
 8016f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f5e:	bf00      	nop
 8016f60:	08016f79 	.word	0x08016f79
 8016f64:	08016fad 	.word	0x08016fad
 8016f68:	08016fe1 	.word	0x08016fe1
 8016f6c:	08017015 	.word	0x08017015
 8016f70:	08017049 	.word	0x08017049
 8016f74:	0801707d 	.word	0x0801707d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d00b      	beq.n	8016f9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	687a      	ldr	r2, [r7, #4]
 8016f8e:	7c12      	ldrb	r2, [r2, #16]
 8016f90:	f107 0108 	add.w	r1, r7, #8
 8016f94:	4610      	mov	r0, r2
 8016f96:	4798      	blx	r3
 8016f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f9a:	e091      	b.n	80170c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f9c:	6839      	ldr	r1, [r7, #0]
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f000 facb 	bl	801753a <USBD_CtlError>
            err++;
 8016fa4:	7afb      	ldrb	r3, [r7, #11]
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8016faa:	e089      	b.n	80170c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fb2:	689b      	ldr	r3, [r3, #8]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d00b      	beq.n	8016fd0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fbe:	689b      	ldr	r3, [r3, #8]
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	7c12      	ldrb	r2, [r2, #16]
 8016fc4:	f107 0108 	add.w	r1, r7, #8
 8016fc8:	4610      	mov	r0, r2
 8016fca:	4798      	blx	r3
 8016fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fce:	e077      	b.n	80170c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016fd0:	6839      	ldr	r1, [r7, #0]
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	f000 fab1 	bl	801753a <USBD_CtlError>
            err++;
 8016fd8:	7afb      	ldrb	r3, [r7, #11]
 8016fda:	3301      	adds	r3, #1
 8016fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8016fde:	e06f      	b.n	80170c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fe6:	68db      	ldr	r3, [r3, #12]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d00b      	beq.n	8017004 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ff2:	68db      	ldr	r3, [r3, #12]
 8016ff4:	687a      	ldr	r2, [r7, #4]
 8016ff6:	7c12      	ldrb	r2, [r2, #16]
 8016ff8:	f107 0108 	add.w	r1, r7, #8
 8016ffc:	4610      	mov	r0, r2
 8016ffe:	4798      	blx	r3
 8017000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017002:	e05d      	b.n	80170c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017004:	6839      	ldr	r1, [r7, #0]
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	f000 fa97 	bl	801753a <USBD_CtlError>
            err++;
 801700c:	7afb      	ldrb	r3, [r7, #11]
 801700e:	3301      	adds	r3, #1
 8017010:	72fb      	strb	r3, [r7, #11]
          break;
 8017012:	e055      	b.n	80170c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801701a:	691b      	ldr	r3, [r3, #16]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d00b      	beq.n	8017038 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017026:	691b      	ldr	r3, [r3, #16]
 8017028:	687a      	ldr	r2, [r7, #4]
 801702a:	7c12      	ldrb	r2, [r2, #16]
 801702c:	f107 0108 	add.w	r1, r7, #8
 8017030:	4610      	mov	r0, r2
 8017032:	4798      	blx	r3
 8017034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017036:	e043      	b.n	80170c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017038:	6839      	ldr	r1, [r7, #0]
 801703a:	6878      	ldr	r0, [r7, #4]
 801703c:	f000 fa7d 	bl	801753a <USBD_CtlError>
            err++;
 8017040:	7afb      	ldrb	r3, [r7, #11]
 8017042:	3301      	adds	r3, #1
 8017044:	72fb      	strb	r3, [r7, #11]
          break;
 8017046:	e03b      	b.n	80170c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801704e:	695b      	ldr	r3, [r3, #20]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d00b      	beq.n	801706c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801705a:	695b      	ldr	r3, [r3, #20]
 801705c:	687a      	ldr	r2, [r7, #4]
 801705e:	7c12      	ldrb	r2, [r2, #16]
 8017060:	f107 0108 	add.w	r1, r7, #8
 8017064:	4610      	mov	r0, r2
 8017066:	4798      	blx	r3
 8017068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801706a:	e029      	b.n	80170c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801706c:	6839      	ldr	r1, [r7, #0]
 801706e:	6878      	ldr	r0, [r7, #4]
 8017070:	f000 fa63 	bl	801753a <USBD_CtlError>
            err++;
 8017074:	7afb      	ldrb	r3, [r7, #11]
 8017076:	3301      	adds	r3, #1
 8017078:	72fb      	strb	r3, [r7, #11]
          break;
 801707a:	e021      	b.n	80170c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017082:	699b      	ldr	r3, [r3, #24]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d00b      	beq.n	80170a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801708e:	699b      	ldr	r3, [r3, #24]
 8017090:	687a      	ldr	r2, [r7, #4]
 8017092:	7c12      	ldrb	r2, [r2, #16]
 8017094:	f107 0108 	add.w	r1, r7, #8
 8017098:	4610      	mov	r0, r2
 801709a:	4798      	blx	r3
 801709c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801709e:	e00f      	b.n	80170c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80170a0:	6839      	ldr	r1, [r7, #0]
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f000 fa49 	bl	801753a <USBD_CtlError>
            err++;
 80170a8:	7afb      	ldrb	r3, [r7, #11]
 80170aa:	3301      	adds	r3, #1
 80170ac:	72fb      	strb	r3, [r7, #11]
          break;
 80170ae:	e007      	b.n	80170c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80170b0:	6839      	ldr	r1, [r7, #0]
 80170b2:	6878      	ldr	r0, [r7, #4]
 80170b4:	f000 fa41 	bl	801753a <USBD_CtlError>
          err++;
 80170b8:	7afb      	ldrb	r3, [r7, #11]
 80170ba:	3301      	adds	r3, #1
 80170bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80170be:	bf00      	nop
      }
      break;
 80170c0:	e037      	b.n	8017132 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	7c1b      	ldrb	r3, [r3, #16]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d109      	bne.n	80170de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170d2:	f107 0208 	add.w	r2, r7, #8
 80170d6:	4610      	mov	r0, r2
 80170d8:	4798      	blx	r3
 80170da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80170dc:	e029      	b.n	8017132 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80170de:	6839      	ldr	r1, [r7, #0]
 80170e0:	6878      	ldr	r0, [r7, #4]
 80170e2:	f000 fa2a 	bl	801753a <USBD_CtlError>
        err++;
 80170e6:	7afb      	ldrb	r3, [r7, #11]
 80170e8:	3301      	adds	r3, #1
 80170ea:	72fb      	strb	r3, [r7, #11]
      break;
 80170ec:	e021      	b.n	8017132 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	7c1b      	ldrb	r3, [r3, #16]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d10d      	bne.n	8017112 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170fe:	f107 0208 	add.w	r2, r7, #8
 8017102:	4610      	mov	r0, r2
 8017104:	4798      	blx	r3
 8017106:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	3301      	adds	r3, #1
 801710c:	2207      	movs	r2, #7
 801710e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017110:	e00f      	b.n	8017132 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017112:	6839      	ldr	r1, [r7, #0]
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f000 fa10 	bl	801753a <USBD_CtlError>
        err++;
 801711a:	7afb      	ldrb	r3, [r7, #11]
 801711c:	3301      	adds	r3, #1
 801711e:	72fb      	strb	r3, [r7, #11]
      break;
 8017120:	e007      	b.n	8017132 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8017122:	6839      	ldr	r1, [r7, #0]
 8017124:	6878      	ldr	r0, [r7, #4]
 8017126:	f000 fa08 	bl	801753a <USBD_CtlError>
      err++;
 801712a:	7afb      	ldrb	r3, [r7, #11]
 801712c:	3301      	adds	r3, #1
 801712e:	72fb      	strb	r3, [r7, #11]
      break;
 8017130:	bf00      	nop
  }

  if (err != 0U)
 8017132:	7afb      	ldrb	r3, [r7, #11]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d11e      	bne.n	8017176 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	88db      	ldrh	r3, [r3, #6]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d016      	beq.n	801716e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017140:	893b      	ldrh	r3, [r7, #8]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d00e      	beq.n	8017164 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	88da      	ldrh	r2, [r3, #6]
 801714a:	893b      	ldrh	r3, [r7, #8]
 801714c:	4293      	cmp	r3, r2
 801714e:	bf28      	it	cs
 8017150:	4613      	movcs	r3, r2
 8017152:	b29b      	uxth	r3, r3
 8017154:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017156:	893b      	ldrh	r3, [r7, #8]
 8017158:	461a      	mov	r2, r3
 801715a:	68f9      	ldr	r1, [r7, #12]
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f000 fa5d 	bl	801761c <USBD_CtlSendData>
 8017162:	e009      	b.n	8017178 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017164:	6839      	ldr	r1, [r7, #0]
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f000 f9e7 	bl	801753a <USBD_CtlError>
 801716c:	e004      	b.n	8017178 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801716e:	6878      	ldr	r0, [r7, #4]
 8017170:	f000 fa91 	bl	8017696 <USBD_CtlSendStatus>
 8017174:	e000      	b.n	8017178 <USBD_GetDescriptor+0x2cc>
    return;
 8017176:	bf00      	nop
  }
}
 8017178:	3710      	adds	r7, #16
 801717a:	46bd      	mov	sp, r7
 801717c:	bd80      	pop	{r7, pc}
 801717e:	bf00      	nop

08017180 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b084      	sub	sp, #16
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	889b      	ldrh	r3, [r3, #4]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d131      	bne.n	80171f6 <USBD_SetAddress+0x76>
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	88db      	ldrh	r3, [r3, #6]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d12d      	bne.n	80171f6 <USBD_SetAddress+0x76>
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	885b      	ldrh	r3, [r3, #2]
 801719e:	2b7f      	cmp	r3, #127	; 0x7f
 80171a0:	d829      	bhi.n	80171f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	885b      	ldrh	r3, [r3, #2]
 80171a6:	b2db      	uxtb	r3, r3
 80171a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80171ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171b4:	b2db      	uxtb	r3, r3
 80171b6:	2b03      	cmp	r3, #3
 80171b8:	d104      	bne.n	80171c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80171ba:	6839      	ldr	r1, [r7, #0]
 80171bc:	6878      	ldr	r0, [r7, #4]
 80171be:	f000 f9bc 	bl	801753a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171c2:	e01d      	b.n	8017200 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	7bfa      	ldrb	r2, [r7, #15]
 80171c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80171cc:	7bfb      	ldrb	r3, [r7, #15]
 80171ce:	4619      	mov	r1, r3
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	f004 feca 	bl	801bf6a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f000 fa5d 	bl	8017696 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80171dc:	7bfb      	ldrb	r3, [r7, #15]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d004      	beq.n	80171ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	2202      	movs	r2, #2
 80171e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171ea:	e009      	b.n	8017200 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	2201      	movs	r2, #1
 80171f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171f4:	e004      	b.n	8017200 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80171f6:	6839      	ldr	r1, [r7, #0]
 80171f8:	6878      	ldr	r0, [r7, #4]
 80171fa:	f000 f99e 	bl	801753a <USBD_CtlError>
  }
}
 80171fe:	bf00      	nop
 8017200:	bf00      	nop
 8017202:	3710      	adds	r7, #16
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}

08017208 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b084      	sub	sp, #16
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
 8017210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017212:	2300      	movs	r3, #0
 8017214:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017216:	683b      	ldr	r3, [r7, #0]
 8017218:	885b      	ldrh	r3, [r3, #2]
 801721a:	b2da      	uxtb	r2, r3
 801721c:	4b4e      	ldr	r3, [pc, #312]	; (8017358 <USBD_SetConfig+0x150>)
 801721e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017220:	4b4d      	ldr	r3, [pc, #308]	; (8017358 <USBD_SetConfig+0x150>)
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	2b01      	cmp	r3, #1
 8017226:	d905      	bls.n	8017234 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017228:	6839      	ldr	r1, [r7, #0]
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	f000 f985 	bl	801753a <USBD_CtlError>
    return USBD_FAIL;
 8017230:	2303      	movs	r3, #3
 8017232:	e08c      	b.n	801734e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801723a:	b2db      	uxtb	r3, r3
 801723c:	2b02      	cmp	r3, #2
 801723e:	d002      	beq.n	8017246 <USBD_SetConfig+0x3e>
 8017240:	2b03      	cmp	r3, #3
 8017242:	d029      	beq.n	8017298 <USBD_SetConfig+0x90>
 8017244:	e075      	b.n	8017332 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017246:	4b44      	ldr	r3, [pc, #272]	; (8017358 <USBD_SetConfig+0x150>)
 8017248:	781b      	ldrb	r3, [r3, #0]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d020      	beq.n	8017290 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801724e:	4b42      	ldr	r3, [pc, #264]	; (8017358 <USBD_SetConfig+0x150>)
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	461a      	mov	r2, r3
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017258:	4b3f      	ldr	r3, [pc, #252]	; (8017358 <USBD_SetConfig+0x150>)
 801725a:	781b      	ldrb	r3, [r3, #0]
 801725c:	4619      	mov	r1, r3
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	f7fe ffe6 	bl	8016230 <USBD_SetClassConfig>
 8017264:	4603      	mov	r3, r0
 8017266:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017268:	7bfb      	ldrb	r3, [r7, #15]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d008      	beq.n	8017280 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801726e:	6839      	ldr	r1, [r7, #0]
 8017270:	6878      	ldr	r0, [r7, #4]
 8017272:	f000 f962 	bl	801753a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	2202      	movs	r2, #2
 801727a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801727e:	e065      	b.n	801734c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f000 fa08 	bl	8017696 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	2203      	movs	r2, #3
 801728a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801728e:	e05d      	b.n	801734c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017290:	6878      	ldr	r0, [r7, #4]
 8017292:	f000 fa00 	bl	8017696 <USBD_CtlSendStatus>
      break;
 8017296:	e059      	b.n	801734c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017298:	4b2f      	ldr	r3, [pc, #188]	; (8017358 <USBD_SetConfig+0x150>)
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d112      	bne.n	80172c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	2202      	movs	r2, #2
 80172a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80172a8:	4b2b      	ldr	r3, [pc, #172]	; (8017358 <USBD_SetConfig+0x150>)
 80172aa:	781b      	ldrb	r3, [r3, #0]
 80172ac:	461a      	mov	r2, r3
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80172b2:	4b29      	ldr	r3, [pc, #164]	; (8017358 <USBD_SetConfig+0x150>)
 80172b4:	781b      	ldrb	r3, [r3, #0]
 80172b6:	4619      	mov	r1, r3
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f7fe ffd5 	bl	8016268 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80172be:	6878      	ldr	r0, [r7, #4]
 80172c0:	f000 f9e9 	bl	8017696 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80172c4:	e042      	b.n	801734c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80172c6:	4b24      	ldr	r3, [pc, #144]	; (8017358 <USBD_SetConfig+0x150>)
 80172c8:	781b      	ldrb	r3, [r3, #0]
 80172ca:	461a      	mov	r2, r3
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	685b      	ldr	r3, [r3, #4]
 80172d0:	429a      	cmp	r2, r3
 80172d2:	d02a      	beq.n	801732a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	685b      	ldr	r3, [r3, #4]
 80172d8:	b2db      	uxtb	r3, r3
 80172da:	4619      	mov	r1, r3
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f7fe ffc3 	bl	8016268 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80172e2:	4b1d      	ldr	r3, [pc, #116]	; (8017358 <USBD_SetConfig+0x150>)
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	461a      	mov	r2, r3
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80172ec:	4b1a      	ldr	r3, [pc, #104]	; (8017358 <USBD_SetConfig+0x150>)
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	4619      	mov	r1, r3
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f7fe ff9c 	bl	8016230 <USBD_SetClassConfig>
 80172f8:	4603      	mov	r3, r0
 80172fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80172fc:	7bfb      	ldrb	r3, [r7, #15]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d00f      	beq.n	8017322 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017302:	6839      	ldr	r1, [r7, #0]
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f000 f918 	bl	801753a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	685b      	ldr	r3, [r3, #4]
 801730e:	b2db      	uxtb	r3, r3
 8017310:	4619      	mov	r1, r3
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f7fe ffa8 	bl	8016268 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2202      	movs	r2, #2
 801731c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017320:	e014      	b.n	801734c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017322:	6878      	ldr	r0, [r7, #4]
 8017324:	f000 f9b7 	bl	8017696 <USBD_CtlSendStatus>
      break;
 8017328:	e010      	b.n	801734c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801732a:	6878      	ldr	r0, [r7, #4]
 801732c:	f000 f9b3 	bl	8017696 <USBD_CtlSendStatus>
      break;
 8017330:	e00c      	b.n	801734c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017332:	6839      	ldr	r1, [r7, #0]
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	f000 f900 	bl	801753a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801733a:	4b07      	ldr	r3, [pc, #28]	; (8017358 <USBD_SetConfig+0x150>)
 801733c:	781b      	ldrb	r3, [r3, #0]
 801733e:	4619      	mov	r1, r3
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f7fe ff91 	bl	8016268 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017346:	2303      	movs	r3, #3
 8017348:	73fb      	strb	r3, [r7, #15]
      break;
 801734a:	bf00      	nop
  }

  return ret;
 801734c:	7bfb      	ldrb	r3, [r7, #15]
}
 801734e:	4618      	mov	r0, r3
 8017350:	3710      	adds	r7, #16
 8017352:	46bd      	mov	sp, r7
 8017354:	bd80      	pop	{r7, pc}
 8017356:	bf00      	nop
 8017358:	20000fd0 	.word	0x20000fd0

0801735c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
 8017364:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	88db      	ldrh	r3, [r3, #6]
 801736a:	2b01      	cmp	r3, #1
 801736c:	d004      	beq.n	8017378 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801736e:	6839      	ldr	r1, [r7, #0]
 8017370:	6878      	ldr	r0, [r7, #4]
 8017372:	f000 f8e2 	bl	801753a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017376:	e023      	b.n	80173c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801737e:	b2db      	uxtb	r3, r3
 8017380:	2b02      	cmp	r3, #2
 8017382:	dc02      	bgt.n	801738a <USBD_GetConfig+0x2e>
 8017384:	2b00      	cmp	r3, #0
 8017386:	dc03      	bgt.n	8017390 <USBD_GetConfig+0x34>
 8017388:	e015      	b.n	80173b6 <USBD_GetConfig+0x5a>
 801738a:	2b03      	cmp	r3, #3
 801738c:	d00b      	beq.n	80173a6 <USBD_GetConfig+0x4a>
 801738e:	e012      	b.n	80173b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2200      	movs	r2, #0
 8017394:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	3308      	adds	r3, #8
 801739a:	2201      	movs	r2, #1
 801739c:	4619      	mov	r1, r3
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f000 f93c 	bl	801761c <USBD_CtlSendData>
        break;
 80173a4:	e00c      	b.n	80173c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	3304      	adds	r3, #4
 80173aa:	2201      	movs	r2, #1
 80173ac:	4619      	mov	r1, r3
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f000 f934 	bl	801761c <USBD_CtlSendData>
        break;
 80173b4:	e004      	b.n	80173c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80173b6:	6839      	ldr	r1, [r7, #0]
 80173b8:	6878      	ldr	r0, [r7, #4]
 80173ba:	f000 f8be 	bl	801753a <USBD_CtlError>
        break;
 80173be:	bf00      	nop
}
 80173c0:	bf00      	nop
 80173c2:	3708      	adds	r7, #8
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}

080173c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b082      	sub	sp, #8
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
 80173d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173d8:	b2db      	uxtb	r3, r3
 80173da:	3b01      	subs	r3, #1
 80173dc:	2b02      	cmp	r3, #2
 80173de:	d81e      	bhi.n	801741e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	88db      	ldrh	r3, [r3, #6]
 80173e4:	2b02      	cmp	r3, #2
 80173e6:	d004      	beq.n	80173f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80173e8:	6839      	ldr	r1, [r7, #0]
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f000 f8a5 	bl	801753a <USBD_CtlError>
        break;
 80173f0:	e01a      	b.n	8017428 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	2201      	movs	r2, #1
 80173f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d005      	beq.n	801740e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	68db      	ldr	r3, [r3, #12]
 8017406:	f043 0202 	orr.w	r2, r3, #2
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	330c      	adds	r3, #12
 8017412:	2202      	movs	r2, #2
 8017414:	4619      	mov	r1, r3
 8017416:	6878      	ldr	r0, [r7, #4]
 8017418:	f000 f900 	bl	801761c <USBD_CtlSendData>
      break;
 801741c:	e004      	b.n	8017428 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801741e:	6839      	ldr	r1, [r7, #0]
 8017420:	6878      	ldr	r0, [r7, #4]
 8017422:	f000 f88a 	bl	801753a <USBD_CtlError>
      break;
 8017426:	bf00      	nop
  }
}
 8017428:	bf00      	nop
 801742a:	3708      	adds	r7, #8
 801742c:	46bd      	mov	sp, r7
 801742e:	bd80      	pop	{r7, pc}

08017430 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b082      	sub	sp, #8
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	885b      	ldrh	r3, [r3, #2]
 801743e:	2b01      	cmp	r3, #1
 8017440:	d107      	bne.n	8017452 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	2201      	movs	r2, #1
 8017446:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f000 f923 	bl	8017696 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017450:	e013      	b.n	801747a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017452:	683b      	ldr	r3, [r7, #0]
 8017454:	885b      	ldrh	r3, [r3, #2]
 8017456:	2b02      	cmp	r3, #2
 8017458:	d10b      	bne.n	8017472 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	889b      	ldrh	r3, [r3, #4]
 801745e:	0a1b      	lsrs	r3, r3, #8
 8017460:	b29b      	uxth	r3, r3
 8017462:	b2da      	uxtb	r2, r3
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f000 f913 	bl	8017696 <USBD_CtlSendStatus>
}
 8017470:	e003      	b.n	801747a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017472:	6839      	ldr	r1, [r7, #0]
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f000 f860 	bl	801753a <USBD_CtlError>
}
 801747a:	bf00      	nop
 801747c:	3708      	adds	r7, #8
 801747e:	46bd      	mov	sp, r7
 8017480:	bd80      	pop	{r7, pc}

08017482 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017482:	b580      	push	{r7, lr}
 8017484:	b082      	sub	sp, #8
 8017486:	af00      	add	r7, sp, #0
 8017488:	6078      	str	r0, [r7, #4]
 801748a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017492:	b2db      	uxtb	r3, r3
 8017494:	3b01      	subs	r3, #1
 8017496:	2b02      	cmp	r3, #2
 8017498:	d80b      	bhi.n	80174b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	885b      	ldrh	r3, [r3, #2]
 801749e:	2b01      	cmp	r3, #1
 80174a0:	d10c      	bne.n	80174bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2200      	movs	r2, #0
 80174a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f000 f8f3 	bl	8017696 <USBD_CtlSendStatus>
      }
      break;
 80174b0:	e004      	b.n	80174bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80174b2:	6839      	ldr	r1, [r7, #0]
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f000 f840 	bl	801753a <USBD_CtlError>
      break;
 80174ba:	e000      	b.n	80174be <USBD_ClrFeature+0x3c>
      break;
 80174bc:	bf00      	nop
  }
}
 80174be:	bf00      	nop
 80174c0:	3708      	adds	r7, #8
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b084      	sub	sp, #16
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	6078      	str	r0, [r7, #4]
 80174ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80174d0:	683b      	ldr	r3, [r7, #0]
 80174d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	781a      	ldrb	r2, [r3, #0]
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	3301      	adds	r3, #1
 80174e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	781a      	ldrb	r2, [r3, #0]
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	3301      	adds	r3, #1
 80174ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80174f0:	68f8      	ldr	r0, [r7, #12]
 80174f2:	f7ff fa40 	bl	8016976 <SWAPBYTE>
 80174f6:	4603      	mov	r3, r0
 80174f8:	461a      	mov	r2, r3
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	3301      	adds	r3, #1
 8017502:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	3301      	adds	r3, #1
 8017508:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801750a:	68f8      	ldr	r0, [r7, #12]
 801750c:	f7ff fa33 	bl	8016976 <SWAPBYTE>
 8017510:	4603      	mov	r3, r0
 8017512:	461a      	mov	r2, r3
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	3301      	adds	r3, #1
 801751c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	3301      	adds	r3, #1
 8017522:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017524:	68f8      	ldr	r0, [r7, #12]
 8017526:	f7ff fa26 	bl	8016976 <SWAPBYTE>
 801752a:	4603      	mov	r3, r0
 801752c:	461a      	mov	r2, r3
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	80da      	strh	r2, [r3, #6]
}
 8017532:	bf00      	nop
 8017534:	3710      	adds	r7, #16
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}

0801753a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801753a:	b580      	push	{r7, lr}
 801753c:	b082      	sub	sp, #8
 801753e:	af00      	add	r7, sp, #0
 8017540:	6078      	str	r0, [r7, #4]
 8017542:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017544:	2180      	movs	r1, #128	; 0x80
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f004 fca5 	bl	801be96 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801754c:	2100      	movs	r1, #0
 801754e:	6878      	ldr	r0, [r7, #4]
 8017550:	f004 fca1 	bl	801be96 <USBD_LL_StallEP>
}
 8017554:	bf00      	nop
 8017556:	3708      	adds	r7, #8
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b086      	sub	sp, #24
 8017560:	af00      	add	r7, sp, #0
 8017562:	60f8      	str	r0, [r7, #12]
 8017564:	60b9      	str	r1, [r7, #8]
 8017566:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017568:	2300      	movs	r3, #0
 801756a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d036      	beq.n	80175e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017576:	6938      	ldr	r0, [r7, #16]
 8017578:	f000 f836 	bl	80175e8 <USBD_GetLen>
 801757c:	4603      	mov	r3, r0
 801757e:	3301      	adds	r3, #1
 8017580:	b29b      	uxth	r3, r3
 8017582:	005b      	lsls	r3, r3, #1
 8017584:	b29a      	uxth	r2, r3
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801758a:	7dfb      	ldrb	r3, [r7, #23]
 801758c:	68ba      	ldr	r2, [r7, #8]
 801758e:	4413      	add	r3, r2
 8017590:	687a      	ldr	r2, [r7, #4]
 8017592:	7812      	ldrb	r2, [r2, #0]
 8017594:	701a      	strb	r2, [r3, #0]
  idx++;
 8017596:	7dfb      	ldrb	r3, [r7, #23]
 8017598:	3301      	adds	r3, #1
 801759a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801759c:	7dfb      	ldrb	r3, [r7, #23]
 801759e:	68ba      	ldr	r2, [r7, #8]
 80175a0:	4413      	add	r3, r2
 80175a2:	2203      	movs	r2, #3
 80175a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80175a6:	7dfb      	ldrb	r3, [r7, #23]
 80175a8:	3301      	adds	r3, #1
 80175aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80175ac:	e013      	b.n	80175d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80175ae:	7dfb      	ldrb	r3, [r7, #23]
 80175b0:	68ba      	ldr	r2, [r7, #8]
 80175b2:	4413      	add	r3, r2
 80175b4:	693a      	ldr	r2, [r7, #16]
 80175b6:	7812      	ldrb	r2, [r2, #0]
 80175b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80175ba:	693b      	ldr	r3, [r7, #16]
 80175bc:	3301      	adds	r3, #1
 80175be:	613b      	str	r3, [r7, #16]
    idx++;
 80175c0:	7dfb      	ldrb	r3, [r7, #23]
 80175c2:	3301      	adds	r3, #1
 80175c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80175c6:	7dfb      	ldrb	r3, [r7, #23]
 80175c8:	68ba      	ldr	r2, [r7, #8]
 80175ca:	4413      	add	r3, r2
 80175cc:	2200      	movs	r2, #0
 80175ce:	701a      	strb	r2, [r3, #0]
    idx++;
 80175d0:	7dfb      	ldrb	r3, [r7, #23]
 80175d2:	3301      	adds	r3, #1
 80175d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80175d6:	693b      	ldr	r3, [r7, #16]
 80175d8:	781b      	ldrb	r3, [r3, #0]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d1e7      	bne.n	80175ae <USBD_GetString+0x52>
 80175de:	e000      	b.n	80175e2 <USBD_GetString+0x86>
    return;
 80175e0:	bf00      	nop
  }
}
 80175e2:	3718      	adds	r7, #24
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}

080175e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80175e8:	b480      	push	{r7}
 80175ea:	b085      	sub	sp, #20
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80175f0:	2300      	movs	r3, #0
 80175f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80175f8:	e005      	b.n	8017606 <USBD_GetLen+0x1e>
  {
    len++;
 80175fa:	7bfb      	ldrb	r3, [r7, #15]
 80175fc:	3301      	adds	r3, #1
 80175fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017600:	68bb      	ldr	r3, [r7, #8]
 8017602:	3301      	adds	r3, #1
 8017604:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017606:	68bb      	ldr	r3, [r7, #8]
 8017608:	781b      	ldrb	r3, [r3, #0]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d1f5      	bne.n	80175fa <USBD_GetLen+0x12>
  }

  return len;
 801760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017610:	4618      	mov	r0, r3
 8017612:	3714      	adds	r7, #20
 8017614:	46bd      	mov	sp, r7
 8017616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761a:	4770      	bx	lr

0801761c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b084      	sub	sp, #16
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	2202      	movs	r2, #2
 801762c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	687a      	ldr	r2, [r7, #4]
 8017634:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	687a      	ldr	r2, [r7, #4]
 801763a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	68ba      	ldr	r2, [r7, #8]
 8017640:	2100      	movs	r1, #0
 8017642:	68f8      	ldr	r0, [r7, #12]
 8017644:	f004 fcb0 	bl	801bfa8 <USBD_LL_Transmit>

  return USBD_OK;
 8017648:	2300      	movs	r3, #0
}
 801764a:	4618      	mov	r0, r3
 801764c:	3710      	adds	r7, #16
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}

08017652 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017652:	b580      	push	{r7, lr}
 8017654:	b084      	sub	sp, #16
 8017656:	af00      	add	r7, sp, #0
 8017658:	60f8      	str	r0, [r7, #12]
 801765a:	60b9      	str	r1, [r7, #8]
 801765c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	68ba      	ldr	r2, [r7, #8]
 8017662:	2100      	movs	r1, #0
 8017664:	68f8      	ldr	r0, [r7, #12]
 8017666:	f004 fc9f 	bl	801bfa8 <USBD_LL_Transmit>

  return USBD_OK;
 801766a:	2300      	movs	r3, #0
}
 801766c:	4618      	mov	r0, r3
 801766e:	3710      	adds	r7, #16
 8017670:	46bd      	mov	sp, r7
 8017672:	bd80      	pop	{r7, pc}

08017674 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b084      	sub	sp, #16
 8017678:	af00      	add	r7, sp, #0
 801767a:	60f8      	str	r0, [r7, #12]
 801767c:	60b9      	str	r1, [r7, #8]
 801767e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	68ba      	ldr	r2, [r7, #8]
 8017684:	2100      	movs	r1, #0
 8017686:	68f8      	ldr	r0, [r7, #12]
 8017688:	f004 fcaf 	bl	801bfea <USBD_LL_PrepareReceive>

  return USBD_OK;
 801768c:	2300      	movs	r3, #0
}
 801768e:	4618      	mov	r0, r3
 8017690:	3710      	adds	r7, #16
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}

08017696 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017696:	b580      	push	{r7, lr}
 8017698:	b082      	sub	sp, #8
 801769a:	af00      	add	r7, sp, #0
 801769c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2204      	movs	r2, #4
 80176a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80176a6:	2300      	movs	r3, #0
 80176a8:	2200      	movs	r2, #0
 80176aa:	2100      	movs	r1, #0
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f004 fc7b 	bl	801bfa8 <USBD_LL_Transmit>

  return USBD_OK;
 80176b2:	2300      	movs	r3, #0
}
 80176b4:	4618      	mov	r0, r3
 80176b6:	3708      	adds	r7, #8
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bd80      	pop	{r7, pc}

080176bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b082      	sub	sp, #8
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2205      	movs	r2, #5
 80176c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80176cc:	2300      	movs	r3, #0
 80176ce:	2200      	movs	r2, #0
 80176d0:	2100      	movs	r1, #0
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f004 fc89 	bl	801bfea <USBD_LL_PrepareReceive>

  return USBD_OK;
 80176d8:	2300      	movs	r3, #0
}
 80176da:	4618      	mov	r0, r3
 80176dc:	3708      	adds	r7, #8
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}
	...

080176e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b084      	sub	sp, #16
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	4603      	mov	r3, r0
 80176ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80176ee:	79fb      	ldrb	r3, [r7, #7]
 80176f0:	4a08      	ldr	r2, [pc, #32]	; (8017714 <disk_status+0x30>)
 80176f2:	009b      	lsls	r3, r3, #2
 80176f4:	4413      	add	r3, r2
 80176f6:	685b      	ldr	r3, [r3, #4]
 80176f8:	685b      	ldr	r3, [r3, #4]
 80176fa:	79fa      	ldrb	r2, [r7, #7]
 80176fc:	4905      	ldr	r1, [pc, #20]	; (8017714 <disk_status+0x30>)
 80176fe:	440a      	add	r2, r1
 8017700:	7a12      	ldrb	r2, [r2, #8]
 8017702:	4610      	mov	r0, r2
 8017704:	4798      	blx	r3
 8017706:	4603      	mov	r3, r0
 8017708:	73fb      	strb	r3, [r7, #15]
  return stat;
 801770a:	7bfb      	ldrb	r3, [r7, #15]
}
 801770c:	4618      	mov	r0, r3
 801770e:	3710      	adds	r7, #16
 8017710:	46bd      	mov	sp, r7
 8017712:	bd80      	pop	{r7, pc}
 8017714:	20000ffc 	.word	0x20000ffc

08017718 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b084      	sub	sp, #16
 801771c:	af00      	add	r7, sp, #0
 801771e:	4603      	mov	r3, r0
 8017720:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8017722:	2300      	movs	r3, #0
 8017724:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8017726:	79fb      	ldrb	r3, [r7, #7]
 8017728:	4a0d      	ldr	r2, [pc, #52]	; (8017760 <disk_initialize+0x48>)
 801772a:	5cd3      	ldrb	r3, [r2, r3]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d111      	bne.n	8017754 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8017730:	79fb      	ldrb	r3, [r7, #7]
 8017732:	4a0b      	ldr	r2, [pc, #44]	; (8017760 <disk_initialize+0x48>)
 8017734:	2101      	movs	r1, #1
 8017736:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017738:	79fb      	ldrb	r3, [r7, #7]
 801773a:	4a09      	ldr	r2, [pc, #36]	; (8017760 <disk_initialize+0x48>)
 801773c:	009b      	lsls	r3, r3, #2
 801773e:	4413      	add	r3, r2
 8017740:	685b      	ldr	r3, [r3, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	79fa      	ldrb	r2, [r7, #7]
 8017746:	4906      	ldr	r1, [pc, #24]	; (8017760 <disk_initialize+0x48>)
 8017748:	440a      	add	r2, r1
 801774a:	7a12      	ldrb	r2, [r2, #8]
 801774c:	4610      	mov	r0, r2
 801774e:	4798      	blx	r3
 8017750:	4603      	mov	r3, r0
 8017752:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017754:	7bfb      	ldrb	r3, [r7, #15]
}
 8017756:	4618      	mov	r0, r3
 8017758:	3710      	adds	r7, #16
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop
 8017760:	20000ffc 	.word	0x20000ffc

08017764 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017764:	b590      	push	{r4, r7, lr}
 8017766:	b087      	sub	sp, #28
 8017768:	af00      	add	r7, sp, #0
 801776a:	60b9      	str	r1, [r7, #8]
 801776c:	607a      	str	r2, [r7, #4]
 801776e:	603b      	str	r3, [r7, #0]
 8017770:	4603      	mov	r3, r0
 8017772:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017774:	7bfb      	ldrb	r3, [r7, #15]
 8017776:	4a0a      	ldr	r2, [pc, #40]	; (80177a0 <disk_read+0x3c>)
 8017778:	009b      	lsls	r3, r3, #2
 801777a:	4413      	add	r3, r2
 801777c:	685b      	ldr	r3, [r3, #4]
 801777e:	689c      	ldr	r4, [r3, #8]
 8017780:	7bfb      	ldrb	r3, [r7, #15]
 8017782:	4a07      	ldr	r2, [pc, #28]	; (80177a0 <disk_read+0x3c>)
 8017784:	4413      	add	r3, r2
 8017786:	7a18      	ldrb	r0, [r3, #8]
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	687a      	ldr	r2, [r7, #4]
 801778c:	68b9      	ldr	r1, [r7, #8]
 801778e:	47a0      	blx	r4
 8017790:	4603      	mov	r3, r0
 8017792:	75fb      	strb	r3, [r7, #23]
  return res;
 8017794:	7dfb      	ldrb	r3, [r7, #23]
}
 8017796:	4618      	mov	r0, r3
 8017798:	371c      	adds	r7, #28
 801779a:	46bd      	mov	sp, r7
 801779c:	bd90      	pop	{r4, r7, pc}
 801779e:	bf00      	nop
 80177a0:	20000ffc 	.word	0x20000ffc

080177a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80177a4:	b590      	push	{r4, r7, lr}
 80177a6:	b087      	sub	sp, #28
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60b9      	str	r1, [r7, #8]
 80177ac:	607a      	str	r2, [r7, #4]
 80177ae:	603b      	str	r3, [r7, #0]
 80177b0:	4603      	mov	r3, r0
 80177b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80177b4:	7bfb      	ldrb	r3, [r7, #15]
 80177b6:	4a0a      	ldr	r2, [pc, #40]	; (80177e0 <disk_write+0x3c>)
 80177b8:	009b      	lsls	r3, r3, #2
 80177ba:	4413      	add	r3, r2
 80177bc:	685b      	ldr	r3, [r3, #4]
 80177be:	68dc      	ldr	r4, [r3, #12]
 80177c0:	7bfb      	ldrb	r3, [r7, #15]
 80177c2:	4a07      	ldr	r2, [pc, #28]	; (80177e0 <disk_write+0x3c>)
 80177c4:	4413      	add	r3, r2
 80177c6:	7a18      	ldrb	r0, [r3, #8]
 80177c8:	683b      	ldr	r3, [r7, #0]
 80177ca:	687a      	ldr	r2, [r7, #4]
 80177cc:	68b9      	ldr	r1, [r7, #8]
 80177ce:	47a0      	blx	r4
 80177d0:	4603      	mov	r3, r0
 80177d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80177d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	371c      	adds	r7, #28
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd90      	pop	{r4, r7, pc}
 80177de:	bf00      	nop
 80177e0:	20000ffc 	.word	0x20000ffc

080177e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b084      	sub	sp, #16
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	4603      	mov	r3, r0
 80177ec:	603a      	str	r2, [r7, #0]
 80177ee:	71fb      	strb	r3, [r7, #7]
 80177f0:	460b      	mov	r3, r1
 80177f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80177f4:	79fb      	ldrb	r3, [r7, #7]
 80177f6:	4a09      	ldr	r2, [pc, #36]	; (801781c <disk_ioctl+0x38>)
 80177f8:	009b      	lsls	r3, r3, #2
 80177fa:	4413      	add	r3, r2
 80177fc:	685b      	ldr	r3, [r3, #4]
 80177fe:	691b      	ldr	r3, [r3, #16]
 8017800:	79fa      	ldrb	r2, [r7, #7]
 8017802:	4906      	ldr	r1, [pc, #24]	; (801781c <disk_ioctl+0x38>)
 8017804:	440a      	add	r2, r1
 8017806:	7a10      	ldrb	r0, [r2, #8]
 8017808:	79b9      	ldrb	r1, [r7, #6]
 801780a:	683a      	ldr	r2, [r7, #0]
 801780c:	4798      	blx	r3
 801780e:	4603      	mov	r3, r0
 8017810:	73fb      	strb	r3, [r7, #15]
  return res;
 8017812:	7bfb      	ldrb	r3, [r7, #15]
}
 8017814:	4618      	mov	r0, r3
 8017816:	3710      	adds	r7, #16
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}
 801781c:	20000ffc 	.word	0x20000ffc

08017820 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8017820:	b480      	push	{r7}
 8017822:	b085      	sub	sp, #20
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	3301      	adds	r3, #1
 801782c:	781b      	ldrb	r3, [r3, #0]
 801782e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017830:	89fb      	ldrh	r3, [r7, #14]
 8017832:	021b      	lsls	r3, r3, #8
 8017834:	b21a      	sxth	r2, r3
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	781b      	ldrb	r3, [r3, #0]
 801783a:	b21b      	sxth	r3, r3
 801783c:	4313      	orrs	r3, r2
 801783e:	b21b      	sxth	r3, r3
 8017840:	81fb      	strh	r3, [r7, #14]
	return rv;
 8017842:	89fb      	ldrh	r3, [r7, #14]
}
 8017844:	4618      	mov	r0, r3
 8017846:	3714      	adds	r7, #20
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr

08017850 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8017850:	b480      	push	{r7}
 8017852:	b085      	sub	sp, #20
 8017854:	af00      	add	r7, sp, #0
 8017856:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	3303      	adds	r3, #3
 801785c:	781b      	ldrb	r3, [r3, #0]
 801785e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	021b      	lsls	r3, r3, #8
 8017864:	687a      	ldr	r2, [r7, #4]
 8017866:	3202      	adds	r2, #2
 8017868:	7812      	ldrb	r2, [r2, #0]
 801786a:	4313      	orrs	r3, r2
 801786c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	021b      	lsls	r3, r3, #8
 8017872:	687a      	ldr	r2, [r7, #4]
 8017874:	3201      	adds	r2, #1
 8017876:	7812      	ldrb	r2, [r2, #0]
 8017878:	4313      	orrs	r3, r2
 801787a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	021b      	lsls	r3, r3, #8
 8017880:	687a      	ldr	r2, [r7, #4]
 8017882:	7812      	ldrb	r2, [r2, #0]
 8017884:	4313      	orrs	r3, r2
 8017886:	60fb      	str	r3, [r7, #12]
	return rv;
 8017888:	68fb      	ldr	r3, [r7, #12]
}
 801788a:	4618      	mov	r0, r3
 801788c:	3714      	adds	r7, #20
 801788e:	46bd      	mov	sp, r7
 8017890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017894:	4770      	bx	lr

08017896 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017896:	b480      	push	{r7}
 8017898:	b083      	sub	sp, #12
 801789a:	af00      	add	r7, sp, #0
 801789c:	6078      	str	r0, [r7, #4]
 801789e:	460b      	mov	r3, r1
 80178a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	1c5a      	adds	r2, r3, #1
 80178a6:	607a      	str	r2, [r7, #4]
 80178a8:	887a      	ldrh	r2, [r7, #2]
 80178aa:	b2d2      	uxtb	r2, r2
 80178ac:	701a      	strb	r2, [r3, #0]
 80178ae:	887b      	ldrh	r3, [r7, #2]
 80178b0:	0a1b      	lsrs	r3, r3, #8
 80178b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	1c5a      	adds	r2, r3, #1
 80178b8:	607a      	str	r2, [r7, #4]
 80178ba:	887a      	ldrh	r2, [r7, #2]
 80178bc:	b2d2      	uxtb	r2, r2
 80178be:	701a      	strb	r2, [r3, #0]
}
 80178c0:	bf00      	nop
 80178c2:	370c      	adds	r7, #12
 80178c4:	46bd      	mov	sp, r7
 80178c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ca:	4770      	bx	lr

080178cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80178cc:	b480      	push	{r7}
 80178ce:	b083      	sub	sp, #12
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
 80178d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	1c5a      	adds	r2, r3, #1
 80178da:	607a      	str	r2, [r7, #4]
 80178dc:	683a      	ldr	r2, [r7, #0]
 80178de:	b2d2      	uxtb	r2, r2
 80178e0:	701a      	strb	r2, [r3, #0]
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	0a1b      	lsrs	r3, r3, #8
 80178e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	1c5a      	adds	r2, r3, #1
 80178ec:	607a      	str	r2, [r7, #4]
 80178ee:	683a      	ldr	r2, [r7, #0]
 80178f0:	b2d2      	uxtb	r2, r2
 80178f2:	701a      	strb	r2, [r3, #0]
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	0a1b      	lsrs	r3, r3, #8
 80178f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	1c5a      	adds	r2, r3, #1
 80178fe:	607a      	str	r2, [r7, #4]
 8017900:	683a      	ldr	r2, [r7, #0]
 8017902:	b2d2      	uxtb	r2, r2
 8017904:	701a      	strb	r2, [r3, #0]
 8017906:	683b      	ldr	r3, [r7, #0]
 8017908:	0a1b      	lsrs	r3, r3, #8
 801790a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	1c5a      	adds	r2, r3, #1
 8017910:	607a      	str	r2, [r7, #4]
 8017912:	683a      	ldr	r2, [r7, #0]
 8017914:	b2d2      	uxtb	r2, r2
 8017916:	701a      	strb	r2, [r3, #0]
}
 8017918:	bf00      	nop
 801791a:	370c      	adds	r7, #12
 801791c:	46bd      	mov	sp, r7
 801791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017922:	4770      	bx	lr

08017924 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017924:	b480      	push	{r7}
 8017926:	b087      	sub	sp, #28
 8017928:	af00      	add	r7, sp, #0
 801792a:	60f8      	str	r0, [r7, #12]
 801792c:	60b9      	str	r1, [r7, #8]
 801792e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017934:	68bb      	ldr	r3, [r7, #8]
 8017936:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d00d      	beq.n	801795a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801793e:	693a      	ldr	r2, [r7, #16]
 8017940:	1c53      	adds	r3, r2, #1
 8017942:	613b      	str	r3, [r7, #16]
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	1c59      	adds	r1, r3, #1
 8017948:	6179      	str	r1, [r7, #20]
 801794a:	7812      	ldrb	r2, [r2, #0]
 801794c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	3b01      	subs	r3, #1
 8017952:	607b      	str	r3, [r7, #4]
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d1f1      	bne.n	801793e <mem_cpy+0x1a>
	}
}
 801795a:	bf00      	nop
 801795c:	371c      	adds	r7, #28
 801795e:	46bd      	mov	sp, r7
 8017960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017964:	4770      	bx	lr

08017966 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017966:	b480      	push	{r7}
 8017968:	b087      	sub	sp, #28
 801796a:	af00      	add	r7, sp, #0
 801796c:	60f8      	str	r0, [r7, #12]
 801796e:	60b9      	str	r1, [r7, #8]
 8017970:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017976:	697b      	ldr	r3, [r7, #20]
 8017978:	1c5a      	adds	r2, r3, #1
 801797a:	617a      	str	r2, [r7, #20]
 801797c:	68ba      	ldr	r2, [r7, #8]
 801797e:	b2d2      	uxtb	r2, r2
 8017980:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	3b01      	subs	r3, #1
 8017986:	607b      	str	r3, [r7, #4]
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d1f3      	bne.n	8017976 <mem_set+0x10>
}
 801798e:	bf00      	nop
 8017990:	bf00      	nop
 8017992:	371c      	adds	r7, #28
 8017994:	46bd      	mov	sp, r7
 8017996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799a:	4770      	bx	lr

0801799c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801799c:	b480      	push	{r7}
 801799e:	b089      	sub	sp, #36	; 0x24
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	60b9      	str	r1, [r7, #8]
 80179a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	61fb      	str	r3, [r7, #28]
 80179ac:	68bb      	ldr	r3, [r7, #8]
 80179ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80179b0:	2300      	movs	r3, #0
 80179b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80179b4:	69fb      	ldr	r3, [r7, #28]
 80179b6:	1c5a      	adds	r2, r3, #1
 80179b8:	61fa      	str	r2, [r7, #28]
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	4619      	mov	r1, r3
 80179be:	69bb      	ldr	r3, [r7, #24]
 80179c0:	1c5a      	adds	r2, r3, #1
 80179c2:	61ba      	str	r2, [r7, #24]
 80179c4:	781b      	ldrb	r3, [r3, #0]
 80179c6:	1acb      	subs	r3, r1, r3
 80179c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	3b01      	subs	r3, #1
 80179ce:	607b      	str	r3, [r7, #4]
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d002      	beq.n	80179dc <mem_cmp+0x40>
 80179d6:	697b      	ldr	r3, [r7, #20]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d0eb      	beq.n	80179b4 <mem_cmp+0x18>

	return r;
 80179dc:	697b      	ldr	r3, [r7, #20]
}
 80179de:	4618      	mov	r0, r3
 80179e0:	3724      	adds	r7, #36	; 0x24
 80179e2:	46bd      	mov	sp, r7
 80179e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e8:	4770      	bx	lr

080179ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80179ea:	b480      	push	{r7}
 80179ec:	b083      	sub	sp, #12
 80179ee:	af00      	add	r7, sp, #0
 80179f0:	6078      	str	r0, [r7, #4]
 80179f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80179f4:	e002      	b.n	80179fc <chk_chr+0x12>
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	3301      	adds	r3, #1
 80179fa:	607b      	str	r3, [r7, #4]
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	781b      	ldrb	r3, [r3, #0]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d005      	beq.n	8017a10 <chk_chr+0x26>
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	461a      	mov	r2, r3
 8017a0a:	683b      	ldr	r3, [r7, #0]
 8017a0c:	4293      	cmp	r3, r2
 8017a0e:	d1f2      	bne.n	80179f6 <chk_chr+0xc>
	return *str;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	781b      	ldrb	r3, [r3, #0]
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	370c      	adds	r7, #12
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1e:	4770      	bx	lr

08017a20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017a20:	b480      	push	{r7}
 8017a22:	b085      	sub	sp, #20
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	60bb      	str	r3, [r7, #8]
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	60fb      	str	r3, [r7, #12]
 8017a32:	e029      	b.n	8017a88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017a34:	4a27      	ldr	r2, [pc, #156]	; (8017ad4 <chk_lock+0xb4>)
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	011b      	lsls	r3, r3, #4
 8017a3a:	4413      	add	r3, r2
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d01d      	beq.n	8017a7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017a42:	4a24      	ldr	r2, [pc, #144]	; (8017ad4 <chk_lock+0xb4>)
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	011b      	lsls	r3, r3, #4
 8017a48:	4413      	add	r3, r2
 8017a4a:	681a      	ldr	r2, [r3, #0]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	429a      	cmp	r2, r3
 8017a52:	d116      	bne.n	8017a82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017a54:	4a1f      	ldr	r2, [pc, #124]	; (8017ad4 <chk_lock+0xb4>)
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	011b      	lsls	r3, r3, #4
 8017a5a:	4413      	add	r3, r2
 8017a5c:	3304      	adds	r3, #4
 8017a5e:	681a      	ldr	r2, [r3, #0]
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017a64:	429a      	cmp	r2, r3
 8017a66:	d10c      	bne.n	8017a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017a68:	4a1a      	ldr	r2, [pc, #104]	; (8017ad4 <chk_lock+0xb4>)
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	011b      	lsls	r3, r3, #4
 8017a6e:	4413      	add	r3, r2
 8017a70:	3308      	adds	r3, #8
 8017a72:	681a      	ldr	r2, [r3, #0]
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d102      	bne.n	8017a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017a7c:	e007      	b.n	8017a8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017a7e:	2301      	movs	r3, #1
 8017a80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	3301      	adds	r3, #1
 8017a86:	60fb      	str	r3, [r7, #12]
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	2b01      	cmp	r3, #1
 8017a8c:	d9d2      	bls.n	8017a34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	2b02      	cmp	r3, #2
 8017a92:	d109      	bne.n	8017aa8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d102      	bne.n	8017aa0 <chk_lock+0x80>
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	2b02      	cmp	r3, #2
 8017a9e:	d101      	bne.n	8017aa4 <chk_lock+0x84>
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	e010      	b.n	8017ac6 <chk_lock+0xa6>
 8017aa4:	2312      	movs	r3, #18
 8017aa6:	e00e      	b.n	8017ac6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017aa8:	683b      	ldr	r3, [r7, #0]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d108      	bne.n	8017ac0 <chk_lock+0xa0>
 8017aae:	4a09      	ldr	r2, [pc, #36]	; (8017ad4 <chk_lock+0xb4>)
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	011b      	lsls	r3, r3, #4
 8017ab4:	4413      	add	r3, r2
 8017ab6:	330c      	adds	r3, #12
 8017ab8:	881b      	ldrh	r3, [r3, #0]
 8017aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017abe:	d101      	bne.n	8017ac4 <chk_lock+0xa4>
 8017ac0:	2310      	movs	r3, #16
 8017ac2:	e000      	b.n	8017ac6 <chk_lock+0xa6>
 8017ac4:	2300      	movs	r3, #0
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3714      	adds	r7, #20
 8017aca:	46bd      	mov	sp, r7
 8017acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad0:	4770      	bx	lr
 8017ad2:	bf00      	nop
 8017ad4:	20000fdc 	.word	0x20000fdc

08017ad8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017ad8:	b480      	push	{r7}
 8017ada:	b083      	sub	sp, #12
 8017adc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017ade:	2300      	movs	r3, #0
 8017ae0:	607b      	str	r3, [r7, #4]
 8017ae2:	e002      	b.n	8017aea <enq_lock+0x12>
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	607b      	str	r3, [r7, #4]
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	2b01      	cmp	r3, #1
 8017aee:	d806      	bhi.n	8017afe <enq_lock+0x26>
 8017af0:	4a09      	ldr	r2, [pc, #36]	; (8017b18 <enq_lock+0x40>)
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	011b      	lsls	r3, r3, #4
 8017af6:	4413      	add	r3, r2
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d1f2      	bne.n	8017ae4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2b02      	cmp	r3, #2
 8017b02:	bf14      	ite	ne
 8017b04:	2301      	movne	r3, #1
 8017b06:	2300      	moveq	r3, #0
 8017b08:	b2db      	uxtb	r3, r3
}
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	370c      	adds	r7, #12
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr
 8017b16:	bf00      	nop
 8017b18:	20000fdc 	.word	0x20000fdc

08017b1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b085      	sub	sp, #20
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
 8017b24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017b26:	2300      	movs	r3, #0
 8017b28:	60fb      	str	r3, [r7, #12]
 8017b2a:	e01f      	b.n	8017b6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017b2c:	4a41      	ldr	r2, [pc, #260]	; (8017c34 <inc_lock+0x118>)
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	011b      	lsls	r3, r3, #4
 8017b32:	4413      	add	r3, r2
 8017b34:	681a      	ldr	r2, [r3, #0]
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d113      	bne.n	8017b66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017b3e:	4a3d      	ldr	r2, [pc, #244]	; (8017c34 <inc_lock+0x118>)
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	011b      	lsls	r3, r3, #4
 8017b44:	4413      	add	r3, r2
 8017b46:	3304      	adds	r3, #4
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017b4e:	429a      	cmp	r2, r3
 8017b50:	d109      	bne.n	8017b66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8017b52:	4a38      	ldr	r2, [pc, #224]	; (8017c34 <inc_lock+0x118>)
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	011b      	lsls	r3, r3, #4
 8017b58:	4413      	add	r3, r2
 8017b5a:	3308      	adds	r3, #8
 8017b5c:	681a      	ldr	r2, [r3, #0]
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017b62:	429a      	cmp	r2, r3
 8017b64:	d006      	beq.n	8017b74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	3301      	adds	r3, #1
 8017b6a:	60fb      	str	r3, [r7, #12]
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	2b01      	cmp	r3, #1
 8017b70:	d9dc      	bls.n	8017b2c <inc_lock+0x10>
 8017b72:	e000      	b.n	8017b76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017b74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	2b02      	cmp	r3, #2
 8017b7a:	d132      	bne.n	8017be2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	60fb      	str	r3, [r7, #12]
 8017b80:	e002      	b.n	8017b88 <inc_lock+0x6c>
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	3301      	adds	r3, #1
 8017b86:	60fb      	str	r3, [r7, #12]
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	2b01      	cmp	r3, #1
 8017b8c:	d806      	bhi.n	8017b9c <inc_lock+0x80>
 8017b8e:	4a29      	ldr	r2, [pc, #164]	; (8017c34 <inc_lock+0x118>)
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	011b      	lsls	r3, r3, #4
 8017b94:	4413      	add	r3, r2
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d1f2      	bne.n	8017b82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	2b02      	cmp	r3, #2
 8017ba0:	d101      	bne.n	8017ba6 <inc_lock+0x8a>
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	e040      	b.n	8017c28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681a      	ldr	r2, [r3, #0]
 8017baa:	4922      	ldr	r1, [pc, #136]	; (8017c34 <inc_lock+0x118>)
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	011b      	lsls	r3, r3, #4
 8017bb0:	440b      	add	r3, r1
 8017bb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	689a      	ldr	r2, [r3, #8]
 8017bb8:	491e      	ldr	r1, [pc, #120]	; (8017c34 <inc_lock+0x118>)
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	011b      	lsls	r3, r3, #4
 8017bbe:	440b      	add	r3, r1
 8017bc0:	3304      	adds	r3, #4
 8017bc2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	695a      	ldr	r2, [r3, #20]
 8017bc8:	491a      	ldr	r1, [pc, #104]	; (8017c34 <inc_lock+0x118>)
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	011b      	lsls	r3, r3, #4
 8017bce:	440b      	add	r3, r1
 8017bd0:	3308      	adds	r3, #8
 8017bd2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017bd4:	4a17      	ldr	r2, [pc, #92]	; (8017c34 <inc_lock+0x118>)
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	011b      	lsls	r3, r3, #4
 8017bda:	4413      	add	r3, r2
 8017bdc:	330c      	adds	r3, #12
 8017bde:	2200      	movs	r2, #0
 8017be0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d009      	beq.n	8017bfc <inc_lock+0xe0>
 8017be8:	4a12      	ldr	r2, [pc, #72]	; (8017c34 <inc_lock+0x118>)
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	011b      	lsls	r3, r3, #4
 8017bee:	4413      	add	r3, r2
 8017bf0:	330c      	adds	r3, #12
 8017bf2:	881b      	ldrh	r3, [r3, #0]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d001      	beq.n	8017bfc <inc_lock+0xe0>
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	e015      	b.n	8017c28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d108      	bne.n	8017c14 <inc_lock+0xf8>
 8017c02:	4a0c      	ldr	r2, [pc, #48]	; (8017c34 <inc_lock+0x118>)
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	011b      	lsls	r3, r3, #4
 8017c08:	4413      	add	r3, r2
 8017c0a:	330c      	adds	r3, #12
 8017c0c:	881b      	ldrh	r3, [r3, #0]
 8017c0e:	3301      	adds	r3, #1
 8017c10:	b29a      	uxth	r2, r3
 8017c12:	e001      	b.n	8017c18 <inc_lock+0xfc>
 8017c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017c18:	4906      	ldr	r1, [pc, #24]	; (8017c34 <inc_lock+0x118>)
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	011b      	lsls	r3, r3, #4
 8017c1e:	440b      	add	r3, r1
 8017c20:	330c      	adds	r3, #12
 8017c22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	3301      	adds	r3, #1
}
 8017c28:	4618      	mov	r0, r3
 8017c2a:	3714      	adds	r7, #20
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c32:	4770      	bx	lr
 8017c34:	20000fdc 	.word	0x20000fdc

08017c38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017c38:	b480      	push	{r7}
 8017c3a:	b085      	sub	sp, #20
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	3b01      	subs	r3, #1
 8017c44:	607b      	str	r3, [r7, #4]
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	2b01      	cmp	r3, #1
 8017c4a:	d825      	bhi.n	8017c98 <dec_lock+0x60>
		n = Files[i].ctr;
 8017c4c:	4a17      	ldr	r2, [pc, #92]	; (8017cac <dec_lock+0x74>)
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	011b      	lsls	r3, r3, #4
 8017c52:	4413      	add	r3, r2
 8017c54:	330c      	adds	r3, #12
 8017c56:	881b      	ldrh	r3, [r3, #0]
 8017c58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017c5a:	89fb      	ldrh	r3, [r7, #14]
 8017c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017c60:	d101      	bne.n	8017c66 <dec_lock+0x2e>
 8017c62:	2300      	movs	r3, #0
 8017c64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017c66:	89fb      	ldrh	r3, [r7, #14]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d002      	beq.n	8017c72 <dec_lock+0x3a>
 8017c6c:	89fb      	ldrh	r3, [r7, #14]
 8017c6e:	3b01      	subs	r3, #1
 8017c70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017c72:	4a0e      	ldr	r2, [pc, #56]	; (8017cac <dec_lock+0x74>)
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	011b      	lsls	r3, r3, #4
 8017c78:	4413      	add	r3, r2
 8017c7a:	330c      	adds	r3, #12
 8017c7c:	89fa      	ldrh	r2, [r7, #14]
 8017c7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017c80:	89fb      	ldrh	r3, [r7, #14]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d105      	bne.n	8017c92 <dec_lock+0x5a>
 8017c86:	4a09      	ldr	r2, [pc, #36]	; (8017cac <dec_lock+0x74>)
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	011b      	lsls	r3, r3, #4
 8017c8c:	4413      	add	r3, r2
 8017c8e:	2200      	movs	r2, #0
 8017c90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017c92:	2300      	movs	r3, #0
 8017c94:	737b      	strb	r3, [r7, #13]
 8017c96:	e001      	b.n	8017c9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017c98:	2302      	movs	r3, #2
 8017c9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017c9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	3714      	adds	r7, #20
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca8:	4770      	bx	lr
 8017caa:	bf00      	nop
 8017cac:	20000fdc 	.word	0x20000fdc

08017cb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017cb0:	b480      	push	{r7}
 8017cb2:	b085      	sub	sp, #20
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017cb8:	2300      	movs	r3, #0
 8017cba:	60fb      	str	r3, [r7, #12]
 8017cbc:	e010      	b.n	8017ce0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017cbe:	4a0d      	ldr	r2, [pc, #52]	; (8017cf4 <clear_lock+0x44>)
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	011b      	lsls	r3, r3, #4
 8017cc4:	4413      	add	r3, r2
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	687a      	ldr	r2, [r7, #4]
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d105      	bne.n	8017cda <clear_lock+0x2a>
 8017cce:	4a09      	ldr	r2, [pc, #36]	; (8017cf4 <clear_lock+0x44>)
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	011b      	lsls	r3, r3, #4
 8017cd4:	4413      	add	r3, r2
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	3301      	adds	r3, #1
 8017cde:	60fb      	str	r3, [r7, #12]
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	2b01      	cmp	r3, #1
 8017ce4:	d9eb      	bls.n	8017cbe <clear_lock+0xe>
	}
}
 8017ce6:	bf00      	nop
 8017ce8:	bf00      	nop
 8017cea:	3714      	adds	r7, #20
 8017cec:	46bd      	mov	sp, r7
 8017cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf2:	4770      	bx	lr
 8017cf4:	20000fdc 	.word	0x20000fdc

08017cf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b086      	sub	sp, #24
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017d00:	2300      	movs	r3, #0
 8017d02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	78db      	ldrb	r3, [r3, #3]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d034      	beq.n	8017d76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	7858      	ldrb	r0, [r3, #1]
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017d1c:	2301      	movs	r3, #1
 8017d1e:	697a      	ldr	r2, [r7, #20]
 8017d20:	f7ff fd40 	bl	80177a4 <disk_write>
 8017d24:	4603      	mov	r3, r0
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d002      	beq.n	8017d30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	73fb      	strb	r3, [r7, #15]
 8017d2e:	e022      	b.n	8017d76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	2200      	movs	r2, #0
 8017d34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6a1b      	ldr	r3, [r3, #32]
 8017d3a:	697a      	ldr	r2, [r7, #20]
 8017d3c:	1ad2      	subs	r2, r2, r3
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	699b      	ldr	r3, [r3, #24]
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d217      	bcs.n	8017d76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	789b      	ldrb	r3, [r3, #2]
 8017d4a:	613b      	str	r3, [r7, #16]
 8017d4c:	e010      	b.n	8017d70 <sync_window+0x78>
					wsect += fs->fsize;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	699b      	ldr	r3, [r3, #24]
 8017d52:	697a      	ldr	r2, [r7, #20]
 8017d54:	4413      	add	r3, r2
 8017d56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	7858      	ldrb	r0, [r3, #1]
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017d62:	2301      	movs	r3, #1
 8017d64:	697a      	ldr	r2, [r7, #20]
 8017d66:	f7ff fd1d 	bl	80177a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017d6a:	693b      	ldr	r3, [r7, #16]
 8017d6c:	3b01      	subs	r3, #1
 8017d6e:	613b      	str	r3, [r7, #16]
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	2b01      	cmp	r3, #1
 8017d74:	d8eb      	bhi.n	8017d4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3718      	adds	r7, #24
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}

08017d80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b084      	sub	sp, #16
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
 8017d88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d92:	683a      	ldr	r2, [r7, #0]
 8017d94:	429a      	cmp	r2, r3
 8017d96:	d01b      	beq.n	8017dd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017d98:	6878      	ldr	r0, [r7, #4]
 8017d9a:	f7ff ffad 	bl	8017cf8 <sync_window>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017da2:	7bfb      	ldrb	r3, [r7, #15]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d113      	bne.n	8017dd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	7858      	ldrb	r0, [r3, #1]
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017db2:	2301      	movs	r3, #1
 8017db4:	683a      	ldr	r2, [r7, #0]
 8017db6:	f7ff fcd5 	bl	8017764 <disk_read>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d004      	beq.n	8017dca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8017dc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017dc6:	2301      	movs	r3, #1
 8017dc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	683a      	ldr	r2, [r7, #0]
 8017dce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8017dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	3710      	adds	r7, #16
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bd80      	pop	{r7, pc}
	...

08017ddc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b084      	sub	sp, #16
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017de4:	6878      	ldr	r0, [r7, #4]
 8017de6:	f7ff ff87 	bl	8017cf8 <sync_window>
 8017dea:	4603      	mov	r3, r0
 8017dec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017dee:	7bfb      	ldrb	r3, [r7, #15]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d158      	bne.n	8017ea6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	781b      	ldrb	r3, [r3, #0]
 8017df8:	2b03      	cmp	r3, #3
 8017dfa:	d148      	bne.n	8017e8e <sync_fs+0xb2>
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	791b      	ldrb	r3, [r3, #4]
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	d144      	bne.n	8017e8e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	3330      	adds	r3, #48	; 0x30
 8017e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e0c:	2100      	movs	r1, #0
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f7ff fda9 	bl	8017966 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	3330      	adds	r3, #48	; 0x30
 8017e18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017e1c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017e20:	4618      	mov	r0, r3
 8017e22:	f7ff fd38 	bl	8017896 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	3330      	adds	r3, #48	; 0x30
 8017e2a:	4921      	ldr	r1, [pc, #132]	; (8017eb0 <sync_fs+0xd4>)
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f7ff fd4d 	bl	80178cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	3330      	adds	r3, #48	; 0x30
 8017e36:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017e3a:	491e      	ldr	r1, [pc, #120]	; (8017eb4 <sync_fs+0xd8>)
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f7ff fd45 	bl	80178cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	3330      	adds	r3, #48	; 0x30
 8017e46:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	691b      	ldr	r3, [r3, #16]
 8017e4e:	4619      	mov	r1, r3
 8017e50:	4610      	mov	r0, r2
 8017e52:	f7ff fd3b 	bl	80178cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	3330      	adds	r3, #48	; 0x30
 8017e5a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	68db      	ldr	r3, [r3, #12]
 8017e62:	4619      	mov	r1, r3
 8017e64:	4610      	mov	r0, r2
 8017e66:	f7ff fd31 	bl	80178cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	69db      	ldr	r3, [r3, #28]
 8017e6e:	1c5a      	adds	r2, r3, #1
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	7858      	ldrb	r0, [r3, #1]
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e82:	2301      	movs	r3, #1
 8017e84:	f7ff fc8e 	bl	80177a4 <disk_write>
			fs->fsi_flag = 0;
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	785b      	ldrb	r3, [r3, #1]
 8017e92:	2200      	movs	r2, #0
 8017e94:	2100      	movs	r1, #0
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7ff fca4 	bl	80177e4 <disk_ioctl>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d001      	beq.n	8017ea6 <sync_fs+0xca>
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	3710      	adds	r7, #16
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bd80      	pop	{r7, pc}
 8017eb0:	41615252 	.word	0x41615252
 8017eb4:	61417272 	.word	0x61417272

08017eb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017eb8:	b480      	push	{r7}
 8017eba:	b083      	sub	sp, #12
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
 8017ec0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017ec2:	683b      	ldr	r3, [r7, #0]
 8017ec4:	3b02      	subs	r3, #2
 8017ec6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	695b      	ldr	r3, [r3, #20]
 8017ecc:	3b02      	subs	r3, #2
 8017ece:	683a      	ldr	r2, [r7, #0]
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d301      	bcc.n	8017ed8 <clust2sect+0x20>
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	e008      	b.n	8017eea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	895b      	ldrh	r3, [r3, #10]
 8017edc:	461a      	mov	r2, r3
 8017ede:	683b      	ldr	r3, [r7, #0]
 8017ee0:	fb03 f202 	mul.w	r2, r3, r2
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ee8:	4413      	add	r3, r2
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	370c      	adds	r7, #12
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef4:	4770      	bx	lr

08017ef6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017ef6:	b580      	push	{r7, lr}
 8017ef8:	b086      	sub	sp, #24
 8017efa:	af00      	add	r7, sp, #0
 8017efc:	6078      	str	r0, [r7, #4]
 8017efe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	2b01      	cmp	r3, #1
 8017f0a:	d904      	bls.n	8017f16 <get_fat+0x20>
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	695b      	ldr	r3, [r3, #20]
 8017f10:	683a      	ldr	r2, [r7, #0]
 8017f12:	429a      	cmp	r2, r3
 8017f14:	d302      	bcc.n	8017f1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8017f16:	2301      	movs	r3, #1
 8017f18:	617b      	str	r3, [r7, #20]
 8017f1a:	e08f      	b.n	801803c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8017f20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017f22:	693b      	ldr	r3, [r7, #16]
 8017f24:	781b      	ldrb	r3, [r3, #0]
 8017f26:	2b03      	cmp	r3, #3
 8017f28:	d062      	beq.n	8017ff0 <get_fat+0xfa>
 8017f2a:	2b03      	cmp	r3, #3
 8017f2c:	dc7c      	bgt.n	8018028 <get_fat+0x132>
 8017f2e:	2b01      	cmp	r3, #1
 8017f30:	d002      	beq.n	8017f38 <get_fat+0x42>
 8017f32:	2b02      	cmp	r3, #2
 8017f34:	d042      	beq.n	8017fbc <get_fat+0xc6>
 8017f36:	e077      	b.n	8018028 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017f38:	683b      	ldr	r3, [r7, #0]
 8017f3a:	60fb      	str	r3, [r7, #12]
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	085b      	lsrs	r3, r3, #1
 8017f40:	68fa      	ldr	r2, [r7, #12]
 8017f42:	4413      	add	r3, r2
 8017f44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017f46:	693b      	ldr	r3, [r7, #16]
 8017f48:	6a1a      	ldr	r2, [r3, #32]
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	0a5b      	lsrs	r3, r3, #9
 8017f4e:	4413      	add	r3, r2
 8017f50:	4619      	mov	r1, r3
 8017f52:	6938      	ldr	r0, [r7, #16]
 8017f54:	f7ff ff14 	bl	8017d80 <move_window>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d167      	bne.n	801802e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	1c5a      	adds	r2, r3, #1
 8017f62:	60fa      	str	r2, [r7, #12]
 8017f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f68:	693a      	ldr	r2, [r7, #16]
 8017f6a:	4413      	add	r3, r2
 8017f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017f72:	693b      	ldr	r3, [r7, #16]
 8017f74:	6a1a      	ldr	r2, [r3, #32]
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	0a5b      	lsrs	r3, r3, #9
 8017f7a:	4413      	add	r3, r2
 8017f7c:	4619      	mov	r1, r3
 8017f7e:	6938      	ldr	r0, [r7, #16]
 8017f80:	f7ff fefe 	bl	8017d80 <move_window>
 8017f84:	4603      	mov	r3, r0
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d153      	bne.n	8018032 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f90:	693a      	ldr	r2, [r7, #16]
 8017f92:	4413      	add	r3, r2
 8017f94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f98:	021b      	lsls	r3, r3, #8
 8017f9a:	461a      	mov	r2, r3
 8017f9c:	68bb      	ldr	r3, [r7, #8]
 8017f9e:	4313      	orrs	r3, r2
 8017fa0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017fa2:	683b      	ldr	r3, [r7, #0]
 8017fa4:	f003 0301 	and.w	r3, r3, #1
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d002      	beq.n	8017fb2 <get_fat+0xbc>
 8017fac:	68bb      	ldr	r3, [r7, #8]
 8017fae:	091b      	lsrs	r3, r3, #4
 8017fb0:	e002      	b.n	8017fb8 <get_fat+0xc2>
 8017fb2:	68bb      	ldr	r3, [r7, #8]
 8017fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017fb8:	617b      	str	r3, [r7, #20]
			break;
 8017fba:	e03f      	b.n	801803c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017fbc:	693b      	ldr	r3, [r7, #16]
 8017fbe:	6a1a      	ldr	r2, [r3, #32]
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	0a1b      	lsrs	r3, r3, #8
 8017fc4:	4413      	add	r3, r2
 8017fc6:	4619      	mov	r1, r3
 8017fc8:	6938      	ldr	r0, [r7, #16]
 8017fca:	f7ff fed9 	bl	8017d80 <move_window>
 8017fce:	4603      	mov	r3, r0
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d130      	bne.n	8018036 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017fd4:	693b      	ldr	r3, [r7, #16]
 8017fd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017fda:	683b      	ldr	r3, [r7, #0]
 8017fdc:	005b      	lsls	r3, r3, #1
 8017fde:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017fe2:	4413      	add	r3, r2
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7ff fc1b 	bl	8017820 <ld_word>
 8017fea:	4603      	mov	r3, r0
 8017fec:	617b      	str	r3, [r7, #20]
			break;
 8017fee:	e025      	b.n	801803c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017ff0:	693b      	ldr	r3, [r7, #16]
 8017ff2:	6a1a      	ldr	r2, [r3, #32]
 8017ff4:	683b      	ldr	r3, [r7, #0]
 8017ff6:	09db      	lsrs	r3, r3, #7
 8017ff8:	4413      	add	r3, r2
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	6938      	ldr	r0, [r7, #16]
 8017ffe:	f7ff febf 	bl	8017d80 <move_window>
 8018002:	4603      	mov	r3, r0
 8018004:	2b00      	cmp	r3, #0
 8018006:	d118      	bne.n	801803a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018008:	693b      	ldr	r3, [r7, #16]
 801800a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	009b      	lsls	r3, r3, #2
 8018012:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8018016:	4413      	add	r3, r2
 8018018:	4618      	mov	r0, r3
 801801a:	f7ff fc19 	bl	8017850 <ld_dword>
 801801e:	4603      	mov	r3, r0
 8018020:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8018024:	617b      	str	r3, [r7, #20]
			break;
 8018026:	e009      	b.n	801803c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8018028:	2301      	movs	r3, #1
 801802a:	617b      	str	r3, [r7, #20]
 801802c:	e006      	b.n	801803c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801802e:	bf00      	nop
 8018030:	e004      	b.n	801803c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018032:	bf00      	nop
 8018034:	e002      	b.n	801803c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018036:	bf00      	nop
 8018038:	e000      	b.n	801803c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801803a:	bf00      	nop
		}
	}

	return val;
 801803c:	697b      	ldr	r3, [r7, #20]
}
 801803e:	4618      	mov	r0, r3
 8018040:	3718      	adds	r7, #24
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}

08018046 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8018046:	b590      	push	{r4, r7, lr}
 8018048:	b089      	sub	sp, #36	; 0x24
 801804a:	af00      	add	r7, sp, #0
 801804c:	60f8      	str	r0, [r7, #12]
 801804e:	60b9      	str	r1, [r7, #8]
 8018050:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8018052:	2302      	movs	r3, #2
 8018054:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018056:	68bb      	ldr	r3, [r7, #8]
 8018058:	2b01      	cmp	r3, #1
 801805a:	f240 80d2 	bls.w	8018202 <put_fat+0x1bc>
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	695b      	ldr	r3, [r3, #20]
 8018062:	68ba      	ldr	r2, [r7, #8]
 8018064:	429a      	cmp	r2, r3
 8018066:	f080 80cc 	bcs.w	8018202 <put_fat+0x1bc>
		switch (fs->fs_type) {
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	781b      	ldrb	r3, [r3, #0]
 801806e:	2b03      	cmp	r3, #3
 8018070:	f000 8096 	beq.w	80181a0 <put_fat+0x15a>
 8018074:	2b03      	cmp	r3, #3
 8018076:	f300 80cd 	bgt.w	8018214 <put_fat+0x1ce>
 801807a:	2b01      	cmp	r3, #1
 801807c:	d002      	beq.n	8018084 <put_fat+0x3e>
 801807e:	2b02      	cmp	r3, #2
 8018080:	d06e      	beq.n	8018160 <put_fat+0x11a>
 8018082:	e0c7      	b.n	8018214 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	61bb      	str	r3, [r7, #24]
 8018088:	69bb      	ldr	r3, [r7, #24]
 801808a:	085b      	lsrs	r3, r3, #1
 801808c:	69ba      	ldr	r2, [r7, #24]
 801808e:	4413      	add	r3, r2
 8018090:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	6a1a      	ldr	r2, [r3, #32]
 8018096:	69bb      	ldr	r3, [r7, #24]
 8018098:	0a5b      	lsrs	r3, r3, #9
 801809a:	4413      	add	r3, r2
 801809c:	4619      	mov	r1, r3
 801809e:	68f8      	ldr	r0, [r7, #12]
 80180a0:	f7ff fe6e 	bl	8017d80 <move_window>
 80180a4:	4603      	mov	r3, r0
 80180a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80180a8:	7ffb      	ldrb	r3, [r7, #31]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	f040 80ab 	bne.w	8018206 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80180b6:	69bb      	ldr	r3, [r7, #24]
 80180b8:	1c59      	adds	r1, r3, #1
 80180ba:	61b9      	str	r1, [r7, #24]
 80180bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80180c0:	4413      	add	r3, r2
 80180c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80180c4:	68bb      	ldr	r3, [r7, #8]
 80180c6:	f003 0301 	and.w	r3, r3, #1
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d00d      	beq.n	80180ea <put_fat+0xa4>
 80180ce:	697b      	ldr	r3, [r7, #20]
 80180d0:	781b      	ldrb	r3, [r3, #0]
 80180d2:	b25b      	sxtb	r3, r3
 80180d4:	f003 030f 	and.w	r3, r3, #15
 80180d8:	b25a      	sxtb	r2, r3
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	b2db      	uxtb	r3, r3
 80180de:	011b      	lsls	r3, r3, #4
 80180e0:	b25b      	sxtb	r3, r3
 80180e2:	4313      	orrs	r3, r2
 80180e4:	b25b      	sxtb	r3, r3
 80180e6:	b2db      	uxtb	r3, r3
 80180e8:	e001      	b.n	80180ee <put_fat+0xa8>
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	b2db      	uxtb	r3, r3
 80180ee:	697a      	ldr	r2, [r7, #20]
 80180f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	2201      	movs	r2, #1
 80180f6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	6a1a      	ldr	r2, [r3, #32]
 80180fc:	69bb      	ldr	r3, [r7, #24]
 80180fe:	0a5b      	lsrs	r3, r3, #9
 8018100:	4413      	add	r3, r2
 8018102:	4619      	mov	r1, r3
 8018104:	68f8      	ldr	r0, [r7, #12]
 8018106:	f7ff fe3b 	bl	8017d80 <move_window>
 801810a:	4603      	mov	r3, r0
 801810c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801810e:	7ffb      	ldrb	r3, [r7, #31]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d17a      	bne.n	801820a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801811a:	69bb      	ldr	r3, [r7, #24]
 801811c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018120:	4413      	add	r3, r2
 8018122:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8018124:	68bb      	ldr	r3, [r7, #8]
 8018126:	f003 0301 	and.w	r3, r3, #1
 801812a:	2b00      	cmp	r3, #0
 801812c:	d003      	beq.n	8018136 <put_fat+0xf0>
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	091b      	lsrs	r3, r3, #4
 8018132:	b2db      	uxtb	r3, r3
 8018134:	e00e      	b.n	8018154 <put_fat+0x10e>
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	b25b      	sxtb	r3, r3
 801813c:	f023 030f 	bic.w	r3, r3, #15
 8018140:	b25a      	sxtb	r2, r3
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	0a1b      	lsrs	r3, r3, #8
 8018146:	b25b      	sxtb	r3, r3
 8018148:	f003 030f 	and.w	r3, r3, #15
 801814c:	b25b      	sxtb	r3, r3
 801814e:	4313      	orrs	r3, r2
 8018150:	b25b      	sxtb	r3, r3
 8018152:	b2db      	uxtb	r3, r3
 8018154:	697a      	ldr	r2, [r7, #20]
 8018156:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	2201      	movs	r2, #1
 801815c:	70da      	strb	r2, [r3, #3]
			break;
 801815e:	e059      	b.n	8018214 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	6a1a      	ldr	r2, [r3, #32]
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	0a1b      	lsrs	r3, r3, #8
 8018168:	4413      	add	r3, r2
 801816a:	4619      	mov	r1, r3
 801816c:	68f8      	ldr	r0, [r7, #12]
 801816e:	f7ff fe07 	bl	8017d80 <move_window>
 8018172:	4603      	mov	r3, r0
 8018174:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018176:	7ffb      	ldrb	r3, [r7, #31]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d148      	bne.n	801820e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	005b      	lsls	r3, r3, #1
 8018186:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801818a:	4413      	add	r3, r2
 801818c:	687a      	ldr	r2, [r7, #4]
 801818e:	b292      	uxth	r2, r2
 8018190:	4611      	mov	r1, r2
 8018192:	4618      	mov	r0, r3
 8018194:	f7ff fb7f 	bl	8017896 <st_word>
			fs->wflag = 1;
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	2201      	movs	r2, #1
 801819c:	70da      	strb	r2, [r3, #3]
			break;
 801819e:	e039      	b.n	8018214 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	6a1a      	ldr	r2, [r3, #32]
 80181a4:	68bb      	ldr	r3, [r7, #8]
 80181a6:	09db      	lsrs	r3, r3, #7
 80181a8:	4413      	add	r3, r2
 80181aa:	4619      	mov	r1, r3
 80181ac:	68f8      	ldr	r0, [r7, #12]
 80181ae:	f7ff fde7 	bl	8017d80 <move_window>
 80181b2:	4603      	mov	r3, r0
 80181b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80181b6:	7ffb      	ldrb	r3, [r7, #31]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d12a      	bne.n	8018212 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	009b      	lsls	r3, r3, #2
 80181cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80181d0:	4413      	add	r3, r2
 80181d2:	4618      	mov	r0, r3
 80181d4:	f7ff fb3c 	bl	8017850 <ld_dword>
 80181d8:	4603      	mov	r3, r0
 80181da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80181de:	4323      	orrs	r3, r4
 80181e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	009b      	lsls	r3, r3, #2
 80181ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80181f0:	4413      	add	r3, r2
 80181f2:	6879      	ldr	r1, [r7, #4]
 80181f4:	4618      	mov	r0, r3
 80181f6:	f7ff fb69 	bl	80178cc <st_dword>
			fs->wflag = 1;
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	2201      	movs	r2, #1
 80181fe:	70da      	strb	r2, [r3, #3]
			break;
 8018200:	e008      	b.n	8018214 <put_fat+0x1ce>
		}
	}
 8018202:	bf00      	nop
 8018204:	e006      	b.n	8018214 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8018206:	bf00      	nop
 8018208:	e004      	b.n	8018214 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801820a:	bf00      	nop
 801820c:	e002      	b.n	8018214 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801820e:	bf00      	nop
 8018210:	e000      	b.n	8018214 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8018212:	bf00      	nop
	return res;
 8018214:	7ffb      	ldrb	r3, [r7, #31]
}
 8018216:	4618      	mov	r0, r3
 8018218:	3724      	adds	r7, #36	; 0x24
 801821a:	46bd      	mov	sp, r7
 801821c:	bd90      	pop	{r4, r7, pc}

0801821e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801821e:	b580      	push	{r7, lr}
 8018220:	b088      	sub	sp, #32
 8018222:	af00      	add	r7, sp, #0
 8018224:	60f8      	str	r0, [r7, #12]
 8018226:	60b9      	str	r1, [r7, #8]
 8018228:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801822a:	2300      	movs	r3, #0
 801822c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8018234:	68bb      	ldr	r3, [r7, #8]
 8018236:	2b01      	cmp	r3, #1
 8018238:	d904      	bls.n	8018244 <remove_chain+0x26>
 801823a:	69bb      	ldr	r3, [r7, #24]
 801823c:	695b      	ldr	r3, [r3, #20]
 801823e:	68ba      	ldr	r2, [r7, #8]
 8018240:	429a      	cmp	r2, r3
 8018242:	d301      	bcc.n	8018248 <remove_chain+0x2a>
 8018244:	2302      	movs	r3, #2
 8018246:	e04b      	b.n	80182e0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d00c      	beq.n	8018268 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801824e:	f04f 32ff 	mov.w	r2, #4294967295
 8018252:	6879      	ldr	r1, [r7, #4]
 8018254:	69b8      	ldr	r0, [r7, #24]
 8018256:	f7ff fef6 	bl	8018046 <put_fat>
 801825a:	4603      	mov	r3, r0
 801825c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801825e:	7ffb      	ldrb	r3, [r7, #31]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d001      	beq.n	8018268 <remove_chain+0x4a>
 8018264:	7ffb      	ldrb	r3, [r7, #31]
 8018266:	e03b      	b.n	80182e0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8018268:	68b9      	ldr	r1, [r7, #8]
 801826a:	68f8      	ldr	r0, [r7, #12]
 801826c:	f7ff fe43 	bl	8017ef6 <get_fat>
 8018270:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d031      	beq.n	80182dc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8018278:	697b      	ldr	r3, [r7, #20]
 801827a:	2b01      	cmp	r3, #1
 801827c:	d101      	bne.n	8018282 <remove_chain+0x64>
 801827e:	2302      	movs	r3, #2
 8018280:	e02e      	b.n	80182e0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018288:	d101      	bne.n	801828e <remove_chain+0x70>
 801828a:	2301      	movs	r3, #1
 801828c:	e028      	b.n	80182e0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801828e:	2200      	movs	r2, #0
 8018290:	68b9      	ldr	r1, [r7, #8]
 8018292:	69b8      	ldr	r0, [r7, #24]
 8018294:	f7ff fed7 	bl	8018046 <put_fat>
 8018298:	4603      	mov	r3, r0
 801829a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801829c:	7ffb      	ldrb	r3, [r7, #31]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d001      	beq.n	80182a6 <remove_chain+0x88>
 80182a2:	7ffb      	ldrb	r3, [r7, #31]
 80182a4:	e01c      	b.n	80182e0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80182a6:	69bb      	ldr	r3, [r7, #24]
 80182a8:	691a      	ldr	r2, [r3, #16]
 80182aa:	69bb      	ldr	r3, [r7, #24]
 80182ac:	695b      	ldr	r3, [r3, #20]
 80182ae:	3b02      	subs	r3, #2
 80182b0:	429a      	cmp	r2, r3
 80182b2:	d20b      	bcs.n	80182cc <remove_chain+0xae>
			fs->free_clst++;
 80182b4:	69bb      	ldr	r3, [r7, #24]
 80182b6:	691b      	ldr	r3, [r3, #16]
 80182b8:	1c5a      	adds	r2, r3, #1
 80182ba:	69bb      	ldr	r3, [r7, #24]
 80182bc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80182be:	69bb      	ldr	r3, [r7, #24]
 80182c0:	791b      	ldrb	r3, [r3, #4]
 80182c2:	f043 0301 	orr.w	r3, r3, #1
 80182c6:	b2da      	uxtb	r2, r3
 80182c8:	69bb      	ldr	r3, [r7, #24]
 80182ca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80182d0:	69bb      	ldr	r3, [r7, #24]
 80182d2:	695b      	ldr	r3, [r3, #20]
 80182d4:	68ba      	ldr	r2, [r7, #8]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d3c6      	bcc.n	8018268 <remove_chain+0x4a>
 80182da:	e000      	b.n	80182de <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80182dc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80182de:	2300      	movs	r3, #0
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	3720      	adds	r7, #32
 80182e4:	46bd      	mov	sp, r7
 80182e6:	bd80      	pop	{r7, pc}

080182e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b088      	sub	sp, #32
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
 80182f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d10d      	bne.n	801831a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80182fe:	693b      	ldr	r3, [r7, #16]
 8018300:	68db      	ldr	r3, [r3, #12]
 8018302:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018304:	69bb      	ldr	r3, [r7, #24]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d004      	beq.n	8018314 <create_chain+0x2c>
 801830a:	693b      	ldr	r3, [r7, #16]
 801830c:	695b      	ldr	r3, [r3, #20]
 801830e:	69ba      	ldr	r2, [r7, #24]
 8018310:	429a      	cmp	r2, r3
 8018312:	d31b      	bcc.n	801834c <create_chain+0x64>
 8018314:	2301      	movs	r3, #1
 8018316:	61bb      	str	r3, [r7, #24]
 8018318:	e018      	b.n	801834c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801831a:	6839      	ldr	r1, [r7, #0]
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f7ff fdea 	bl	8017ef6 <get_fat>
 8018322:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	2b01      	cmp	r3, #1
 8018328:	d801      	bhi.n	801832e <create_chain+0x46>
 801832a:	2301      	movs	r3, #1
 801832c:	e070      	b.n	8018410 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018334:	d101      	bne.n	801833a <create_chain+0x52>
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	e06a      	b.n	8018410 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801833a:	693b      	ldr	r3, [r7, #16]
 801833c:	695b      	ldr	r3, [r3, #20]
 801833e:	68fa      	ldr	r2, [r7, #12]
 8018340:	429a      	cmp	r2, r3
 8018342:	d201      	bcs.n	8018348 <create_chain+0x60>
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	e063      	b.n	8018410 <create_chain+0x128>
		scl = clst;
 8018348:	683b      	ldr	r3, [r7, #0]
 801834a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801834c:	69bb      	ldr	r3, [r7, #24]
 801834e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8018350:	69fb      	ldr	r3, [r7, #28]
 8018352:	3301      	adds	r3, #1
 8018354:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8018356:	693b      	ldr	r3, [r7, #16]
 8018358:	695b      	ldr	r3, [r3, #20]
 801835a:	69fa      	ldr	r2, [r7, #28]
 801835c:	429a      	cmp	r2, r3
 801835e:	d307      	bcc.n	8018370 <create_chain+0x88>
				ncl = 2;
 8018360:	2302      	movs	r3, #2
 8018362:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8018364:	69fa      	ldr	r2, [r7, #28]
 8018366:	69bb      	ldr	r3, [r7, #24]
 8018368:	429a      	cmp	r2, r3
 801836a:	d901      	bls.n	8018370 <create_chain+0x88>
 801836c:	2300      	movs	r3, #0
 801836e:	e04f      	b.n	8018410 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018370:	69f9      	ldr	r1, [r7, #28]
 8018372:	6878      	ldr	r0, [r7, #4]
 8018374:	f7ff fdbf 	bl	8017ef6 <get_fat>
 8018378:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d00e      	beq.n	801839e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	2b01      	cmp	r3, #1
 8018384:	d003      	beq.n	801838e <create_chain+0xa6>
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801838c:	d101      	bne.n	8018392 <create_chain+0xaa>
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	e03e      	b.n	8018410 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8018392:	69fa      	ldr	r2, [r7, #28]
 8018394:	69bb      	ldr	r3, [r7, #24]
 8018396:	429a      	cmp	r2, r3
 8018398:	d1da      	bne.n	8018350 <create_chain+0x68>
 801839a:	2300      	movs	r3, #0
 801839c:	e038      	b.n	8018410 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801839e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80183a0:	f04f 32ff 	mov.w	r2, #4294967295
 80183a4:	69f9      	ldr	r1, [r7, #28]
 80183a6:	6938      	ldr	r0, [r7, #16]
 80183a8:	f7ff fe4d 	bl	8018046 <put_fat>
 80183ac:	4603      	mov	r3, r0
 80183ae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80183b0:	7dfb      	ldrb	r3, [r7, #23]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d109      	bne.n	80183ca <create_chain+0xe2>
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d006      	beq.n	80183ca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80183bc:	69fa      	ldr	r2, [r7, #28]
 80183be:	6839      	ldr	r1, [r7, #0]
 80183c0:	6938      	ldr	r0, [r7, #16]
 80183c2:	f7ff fe40 	bl	8018046 <put_fat>
 80183c6:	4603      	mov	r3, r0
 80183c8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80183ca:	7dfb      	ldrb	r3, [r7, #23]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d116      	bne.n	80183fe <create_chain+0x116>
		fs->last_clst = ncl;
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	69fa      	ldr	r2, [r7, #28]
 80183d4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80183d6:	693b      	ldr	r3, [r7, #16]
 80183d8:	691a      	ldr	r2, [r3, #16]
 80183da:	693b      	ldr	r3, [r7, #16]
 80183dc:	695b      	ldr	r3, [r3, #20]
 80183de:	3b02      	subs	r3, #2
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d804      	bhi.n	80183ee <create_chain+0x106>
 80183e4:	693b      	ldr	r3, [r7, #16]
 80183e6:	691b      	ldr	r3, [r3, #16]
 80183e8:	1e5a      	subs	r2, r3, #1
 80183ea:	693b      	ldr	r3, [r7, #16]
 80183ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80183ee:	693b      	ldr	r3, [r7, #16]
 80183f0:	791b      	ldrb	r3, [r3, #4]
 80183f2:	f043 0301 	orr.w	r3, r3, #1
 80183f6:	b2da      	uxtb	r2, r3
 80183f8:	693b      	ldr	r3, [r7, #16]
 80183fa:	711a      	strb	r2, [r3, #4]
 80183fc:	e007      	b.n	801840e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80183fe:	7dfb      	ldrb	r3, [r7, #23]
 8018400:	2b01      	cmp	r3, #1
 8018402:	d102      	bne.n	801840a <create_chain+0x122>
 8018404:	f04f 33ff 	mov.w	r3, #4294967295
 8018408:	e000      	b.n	801840c <create_chain+0x124>
 801840a:	2301      	movs	r3, #1
 801840c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801840e:	69fb      	ldr	r3, [r7, #28]
}
 8018410:	4618      	mov	r0, r3
 8018412:	3720      	adds	r7, #32
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}

08018418 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8018418:	b480      	push	{r7}
 801841a:	b087      	sub	sp, #28
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
 8018420:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801842c:	3304      	adds	r3, #4
 801842e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018430:	683b      	ldr	r3, [r7, #0]
 8018432:	0a5b      	lsrs	r3, r3, #9
 8018434:	68fa      	ldr	r2, [r7, #12]
 8018436:	8952      	ldrh	r2, [r2, #10]
 8018438:	fbb3 f3f2 	udiv	r3, r3, r2
 801843c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801843e:	693b      	ldr	r3, [r7, #16]
 8018440:	1d1a      	adds	r2, r3, #4
 8018442:	613a      	str	r2, [r7, #16]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d101      	bne.n	8018452 <clmt_clust+0x3a>
 801844e:	2300      	movs	r3, #0
 8018450:	e010      	b.n	8018474 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8018452:	697a      	ldr	r2, [r7, #20]
 8018454:	68bb      	ldr	r3, [r7, #8]
 8018456:	429a      	cmp	r2, r3
 8018458:	d307      	bcc.n	801846a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801845a:	697a      	ldr	r2, [r7, #20]
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	1ad3      	subs	r3, r2, r3
 8018460:	617b      	str	r3, [r7, #20]
 8018462:	693b      	ldr	r3, [r7, #16]
 8018464:	3304      	adds	r3, #4
 8018466:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018468:	e7e9      	b.n	801843e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801846a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	681a      	ldr	r2, [r3, #0]
 8018470:	697b      	ldr	r3, [r7, #20]
 8018472:	4413      	add	r3, r2
}
 8018474:	4618      	mov	r0, r3
 8018476:	371c      	adds	r7, #28
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr

08018480 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b086      	sub	sp, #24
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
 8018488:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018496:	d204      	bcs.n	80184a2 <dir_sdi+0x22>
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	f003 031f 	and.w	r3, r3, #31
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d001      	beq.n	80184a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80184a2:	2302      	movs	r3, #2
 80184a4:	e063      	b.n	801856e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	683a      	ldr	r2, [r7, #0]
 80184aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	689b      	ldr	r3, [r3, #8]
 80184b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d106      	bne.n	80184c6 <dir_sdi+0x46>
 80184b8:	693b      	ldr	r3, [r7, #16]
 80184ba:	781b      	ldrb	r3, [r3, #0]
 80184bc:	2b02      	cmp	r3, #2
 80184be:	d902      	bls.n	80184c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80184c0:	693b      	ldr	r3, [r7, #16]
 80184c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80184c6:	697b      	ldr	r3, [r7, #20]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d10c      	bne.n	80184e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80184cc:	683b      	ldr	r3, [r7, #0]
 80184ce:	095b      	lsrs	r3, r3, #5
 80184d0:	693a      	ldr	r2, [r7, #16]
 80184d2:	8912      	ldrh	r2, [r2, #8]
 80184d4:	4293      	cmp	r3, r2
 80184d6:	d301      	bcc.n	80184dc <dir_sdi+0x5c>
 80184d8:	2302      	movs	r3, #2
 80184da:	e048      	b.n	801856e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80184dc:	693b      	ldr	r3, [r7, #16]
 80184de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	61da      	str	r2, [r3, #28]
 80184e4:	e029      	b.n	801853a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80184e6:	693b      	ldr	r3, [r7, #16]
 80184e8:	895b      	ldrh	r3, [r3, #10]
 80184ea:	025b      	lsls	r3, r3, #9
 80184ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80184ee:	e019      	b.n	8018524 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	6979      	ldr	r1, [r7, #20]
 80184f4:	4618      	mov	r0, r3
 80184f6:	f7ff fcfe 	bl	8017ef6 <get_fat>
 80184fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80184fc:	697b      	ldr	r3, [r7, #20]
 80184fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018502:	d101      	bne.n	8018508 <dir_sdi+0x88>
 8018504:	2301      	movs	r3, #1
 8018506:	e032      	b.n	801856e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8018508:	697b      	ldr	r3, [r7, #20]
 801850a:	2b01      	cmp	r3, #1
 801850c:	d904      	bls.n	8018518 <dir_sdi+0x98>
 801850e:	693b      	ldr	r3, [r7, #16]
 8018510:	695b      	ldr	r3, [r3, #20]
 8018512:	697a      	ldr	r2, [r7, #20]
 8018514:	429a      	cmp	r2, r3
 8018516:	d301      	bcc.n	801851c <dir_sdi+0x9c>
 8018518:	2302      	movs	r3, #2
 801851a:	e028      	b.n	801856e <dir_sdi+0xee>
			ofs -= csz;
 801851c:	683a      	ldr	r2, [r7, #0]
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	1ad3      	subs	r3, r2, r3
 8018522:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018524:	683a      	ldr	r2, [r7, #0]
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	429a      	cmp	r2, r3
 801852a:	d2e1      	bcs.n	80184f0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801852c:	6979      	ldr	r1, [r7, #20]
 801852e:	6938      	ldr	r0, [r7, #16]
 8018530:	f7ff fcc2 	bl	8017eb8 <clust2sect>
 8018534:	4602      	mov	r2, r0
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	697a      	ldr	r2, [r7, #20]
 801853e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	69db      	ldr	r3, [r3, #28]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d101      	bne.n	801854c <dir_sdi+0xcc>
 8018548:	2302      	movs	r3, #2
 801854a:	e010      	b.n	801856e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	69da      	ldr	r2, [r3, #28]
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	0a5b      	lsrs	r3, r3, #9
 8018554:	441a      	add	r2, r3
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018560:	683b      	ldr	r3, [r7, #0]
 8018562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018566:	441a      	add	r2, r3
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801856c:	2300      	movs	r3, #0
}
 801856e:	4618      	mov	r0, r3
 8018570:	3718      	adds	r7, #24
 8018572:	46bd      	mov	sp, r7
 8018574:	bd80      	pop	{r7, pc}

08018576 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8018576:	b580      	push	{r7, lr}
 8018578:	b086      	sub	sp, #24
 801857a:	af00      	add	r7, sp, #0
 801857c:	6078      	str	r0, [r7, #4]
 801857e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	695b      	ldr	r3, [r3, #20]
 801858a:	3320      	adds	r3, #32
 801858c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	69db      	ldr	r3, [r3, #28]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d003      	beq.n	801859e <dir_next+0x28>
 8018596:	68bb      	ldr	r3, [r7, #8]
 8018598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801859c:	d301      	bcc.n	80185a2 <dir_next+0x2c>
 801859e:	2304      	movs	r3, #4
 80185a0:	e0aa      	b.n	80186f8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80185a2:	68bb      	ldr	r3, [r7, #8]
 80185a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	f040 8098 	bne.w	80186de <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	69db      	ldr	r3, [r3, #28]
 80185b2:	1c5a      	adds	r2, r3, #1
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	699b      	ldr	r3, [r3, #24]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d10b      	bne.n	80185d8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80185c0:	68bb      	ldr	r3, [r7, #8]
 80185c2:	095b      	lsrs	r3, r3, #5
 80185c4:	68fa      	ldr	r2, [r7, #12]
 80185c6:	8912      	ldrh	r2, [r2, #8]
 80185c8:	4293      	cmp	r3, r2
 80185ca:	f0c0 8088 	bcc.w	80186de <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	2200      	movs	r2, #0
 80185d2:	61da      	str	r2, [r3, #28]
 80185d4:	2304      	movs	r3, #4
 80185d6:	e08f      	b.n	80186f8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80185d8:	68bb      	ldr	r3, [r7, #8]
 80185da:	0a5b      	lsrs	r3, r3, #9
 80185dc:	68fa      	ldr	r2, [r7, #12]
 80185de:	8952      	ldrh	r2, [r2, #10]
 80185e0:	3a01      	subs	r2, #1
 80185e2:	4013      	ands	r3, r2
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d17a      	bne.n	80186de <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80185e8:	687a      	ldr	r2, [r7, #4]
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	699b      	ldr	r3, [r3, #24]
 80185ee:	4619      	mov	r1, r3
 80185f0:	4610      	mov	r0, r2
 80185f2:	f7ff fc80 	bl	8017ef6 <get_fat>
 80185f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80185f8:	697b      	ldr	r3, [r7, #20]
 80185fa:	2b01      	cmp	r3, #1
 80185fc:	d801      	bhi.n	8018602 <dir_next+0x8c>
 80185fe:	2302      	movs	r3, #2
 8018600:	e07a      	b.n	80186f8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018608:	d101      	bne.n	801860e <dir_next+0x98>
 801860a:	2301      	movs	r3, #1
 801860c:	e074      	b.n	80186f8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	695b      	ldr	r3, [r3, #20]
 8018612:	697a      	ldr	r2, [r7, #20]
 8018614:	429a      	cmp	r2, r3
 8018616:	d358      	bcc.n	80186ca <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d104      	bne.n	8018628 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	2200      	movs	r2, #0
 8018622:	61da      	str	r2, [r3, #28]
 8018624:	2304      	movs	r3, #4
 8018626:	e067      	b.n	80186f8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8018628:	687a      	ldr	r2, [r7, #4]
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	699b      	ldr	r3, [r3, #24]
 801862e:	4619      	mov	r1, r3
 8018630:	4610      	mov	r0, r2
 8018632:	f7ff fe59 	bl	80182e8 <create_chain>
 8018636:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d101      	bne.n	8018642 <dir_next+0xcc>
 801863e:	2307      	movs	r3, #7
 8018640:	e05a      	b.n	80186f8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	2b01      	cmp	r3, #1
 8018646:	d101      	bne.n	801864c <dir_next+0xd6>
 8018648:	2302      	movs	r3, #2
 801864a:	e055      	b.n	80186f8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801864c:	697b      	ldr	r3, [r7, #20]
 801864e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018652:	d101      	bne.n	8018658 <dir_next+0xe2>
 8018654:	2301      	movs	r3, #1
 8018656:	e04f      	b.n	80186f8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018658:	68f8      	ldr	r0, [r7, #12]
 801865a:	f7ff fb4d 	bl	8017cf8 <sync_window>
 801865e:	4603      	mov	r3, r0
 8018660:	2b00      	cmp	r3, #0
 8018662:	d001      	beq.n	8018668 <dir_next+0xf2>
 8018664:	2301      	movs	r3, #1
 8018666:	e047      	b.n	80186f8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	3330      	adds	r3, #48	; 0x30
 801866c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018670:	2100      	movs	r1, #0
 8018672:	4618      	mov	r0, r3
 8018674:	f7ff f977 	bl	8017966 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018678:	2300      	movs	r3, #0
 801867a:	613b      	str	r3, [r7, #16]
 801867c:	6979      	ldr	r1, [r7, #20]
 801867e:	68f8      	ldr	r0, [r7, #12]
 8018680:	f7ff fc1a 	bl	8017eb8 <clust2sect>
 8018684:	4602      	mov	r2, r0
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	62da      	str	r2, [r3, #44]	; 0x2c
 801868a:	e012      	b.n	80186b2 <dir_next+0x13c>
						fs->wflag = 1;
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	2201      	movs	r2, #1
 8018690:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018692:	68f8      	ldr	r0, [r7, #12]
 8018694:	f7ff fb30 	bl	8017cf8 <sync_window>
 8018698:	4603      	mov	r3, r0
 801869a:	2b00      	cmp	r3, #0
 801869c:	d001      	beq.n	80186a2 <dir_next+0x12c>
 801869e:	2301      	movs	r3, #1
 80186a0:	e02a      	b.n	80186f8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80186a2:	693b      	ldr	r3, [r7, #16]
 80186a4:	3301      	adds	r3, #1
 80186a6:	613b      	str	r3, [r7, #16]
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ac:	1c5a      	adds	r2, r3, #1
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	895b      	ldrh	r3, [r3, #10]
 80186b6:	461a      	mov	r2, r3
 80186b8:	693b      	ldr	r3, [r7, #16]
 80186ba:	4293      	cmp	r3, r2
 80186bc:	d3e6      	bcc.n	801868c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186c2:	693b      	ldr	r3, [r7, #16]
 80186c4:	1ad2      	subs	r2, r2, r3
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	697a      	ldr	r2, [r7, #20]
 80186ce:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80186d0:	6979      	ldr	r1, [r7, #20]
 80186d2:	68f8      	ldr	r0, [r7, #12]
 80186d4:	f7ff fbf0 	bl	8017eb8 <clust2sect>
 80186d8:	4602      	mov	r2, r0
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	68ba      	ldr	r2, [r7, #8]
 80186e2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80186ea:	68bb      	ldr	r3, [r7, #8]
 80186ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80186f0:	441a      	add	r2, r3
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80186f6:	2300      	movs	r3, #0
}
 80186f8:	4618      	mov	r0, r3
 80186fa:	3718      	adds	r7, #24
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd80      	pop	{r7, pc}

08018700 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b086      	sub	sp, #24
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
 8018708:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8018710:	2100      	movs	r1, #0
 8018712:	6878      	ldr	r0, [r7, #4]
 8018714:	f7ff feb4 	bl	8018480 <dir_sdi>
 8018718:	4603      	mov	r3, r0
 801871a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801871c:	7dfb      	ldrb	r3, [r7, #23]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d12b      	bne.n	801877a <dir_alloc+0x7a>
		n = 0;
 8018722:	2300      	movs	r3, #0
 8018724:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	69db      	ldr	r3, [r3, #28]
 801872a:	4619      	mov	r1, r3
 801872c:	68f8      	ldr	r0, [r7, #12]
 801872e:	f7ff fb27 	bl	8017d80 <move_window>
 8018732:	4603      	mov	r3, r0
 8018734:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018736:	7dfb      	ldrb	r3, [r7, #23]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d11d      	bne.n	8018778 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	6a1b      	ldr	r3, [r3, #32]
 8018740:	781b      	ldrb	r3, [r3, #0]
 8018742:	2be5      	cmp	r3, #229	; 0xe5
 8018744:	d004      	beq.n	8018750 <dir_alloc+0x50>
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	6a1b      	ldr	r3, [r3, #32]
 801874a:	781b      	ldrb	r3, [r3, #0]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d107      	bne.n	8018760 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8018750:	693b      	ldr	r3, [r7, #16]
 8018752:	3301      	adds	r3, #1
 8018754:	613b      	str	r3, [r7, #16]
 8018756:	693a      	ldr	r2, [r7, #16]
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	429a      	cmp	r2, r3
 801875c:	d102      	bne.n	8018764 <dir_alloc+0x64>
 801875e:	e00c      	b.n	801877a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8018760:	2300      	movs	r3, #0
 8018762:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8018764:	2101      	movs	r1, #1
 8018766:	6878      	ldr	r0, [r7, #4]
 8018768:	f7ff ff05 	bl	8018576 <dir_next>
 801876c:	4603      	mov	r3, r0
 801876e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8018770:	7dfb      	ldrb	r3, [r7, #23]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d0d7      	beq.n	8018726 <dir_alloc+0x26>
 8018776:	e000      	b.n	801877a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018778:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801877a:	7dfb      	ldrb	r3, [r7, #23]
 801877c:	2b04      	cmp	r3, #4
 801877e:	d101      	bne.n	8018784 <dir_alloc+0x84>
 8018780:	2307      	movs	r3, #7
 8018782:	75fb      	strb	r3, [r7, #23]
	return res;
 8018784:	7dfb      	ldrb	r3, [r7, #23]
}
 8018786:	4618      	mov	r0, r3
 8018788:	3718      	adds	r7, #24
 801878a:	46bd      	mov	sp, r7
 801878c:	bd80      	pop	{r7, pc}

0801878e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801878e:	b580      	push	{r7, lr}
 8018790:	b084      	sub	sp, #16
 8018792:	af00      	add	r7, sp, #0
 8018794:	6078      	str	r0, [r7, #4]
 8018796:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018798:	683b      	ldr	r3, [r7, #0]
 801879a:	331a      	adds	r3, #26
 801879c:	4618      	mov	r0, r3
 801879e:	f7ff f83f 	bl	8017820 <ld_word>
 80187a2:	4603      	mov	r3, r0
 80187a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	781b      	ldrb	r3, [r3, #0]
 80187aa:	2b03      	cmp	r3, #3
 80187ac:	d109      	bne.n	80187c2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	3314      	adds	r3, #20
 80187b2:	4618      	mov	r0, r3
 80187b4:	f7ff f834 	bl	8017820 <ld_word>
 80187b8:	4603      	mov	r3, r0
 80187ba:	041b      	lsls	r3, r3, #16
 80187bc:	68fa      	ldr	r2, [r7, #12]
 80187be:	4313      	orrs	r3, r2
 80187c0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80187c2:	68fb      	ldr	r3, [r7, #12]
}
 80187c4:	4618      	mov	r0, r3
 80187c6:	3710      	adds	r7, #16
 80187c8:	46bd      	mov	sp, r7
 80187ca:	bd80      	pop	{r7, pc}

080187cc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b084      	sub	sp, #16
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	60f8      	str	r0, [r7, #12]
 80187d4:	60b9      	str	r1, [r7, #8]
 80187d6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80187d8:	68bb      	ldr	r3, [r7, #8]
 80187da:	331a      	adds	r3, #26
 80187dc:	687a      	ldr	r2, [r7, #4]
 80187de:	b292      	uxth	r2, r2
 80187e0:	4611      	mov	r1, r2
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7ff f857 	bl	8017896 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	781b      	ldrb	r3, [r3, #0]
 80187ec:	2b03      	cmp	r3, #3
 80187ee:	d109      	bne.n	8018804 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80187f0:	68bb      	ldr	r3, [r7, #8]
 80187f2:	f103 0214 	add.w	r2, r3, #20
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	0c1b      	lsrs	r3, r3, #16
 80187fa:	b29b      	uxth	r3, r3
 80187fc:	4619      	mov	r1, r3
 80187fe:	4610      	mov	r0, r2
 8018800:	f7ff f849 	bl	8017896 <st_word>
	}
}
 8018804:	bf00      	nop
 8018806:	3710      	adds	r7, #16
 8018808:	46bd      	mov	sp, r7
 801880a:	bd80      	pop	{r7, pc}

0801880c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b086      	sub	sp, #24
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
 8018814:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8018816:	2304      	movs	r3, #4
 8018818:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8018820:	e03c      	b.n	801889c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	69db      	ldr	r3, [r3, #28]
 8018826:	4619      	mov	r1, r3
 8018828:	6938      	ldr	r0, [r7, #16]
 801882a:	f7ff faa9 	bl	8017d80 <move_window>
 801882e:	4603      	mov	r3, r0
 8018830:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018832:	7dfb      	ldrb	r3, [r7, #23]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d136      	bne.n	80188a6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	6a1b      	ldr	r3, [r3, #32]
 801883c:	781b      	ldrb	r3, [r3, #0]
 801883e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8018840:	7bfb      	ldrb	r3, [r7, #15]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d102      	bne.n	801884c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8018846:	2304      	movs	r3, #4
 8018848:	75fb      	strb	r3, [r7, #23]
 801884a:	e031      	b.n	80188b0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	6a1b      	ldr	r3, [r3, #32]
 8018850:	330b      	adds	r3, #11
 8018852:	781b      	ldrb	r3, [r3, #0]
 8018854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018858:	73bb      	strb	r3, [r7, #14]
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	7bba      	ldrb	r2, [r7, #14]
 801885e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8018860:	7bfb      	ldrb	r3, [r7, #15]
 8018862:	2be5      	cmp	r3, #229	; 0xe5
 8018864:	d011      	beq.n	801888a <dir_read+0x7e>
 8018866:	7bfb      	ldrb	r3, [r7, #15]
 8018868:	2b2e      	cmp	r3, #46	; 0x2e
 801886a:	d00e      	beq.n	801888a <dir_read+0x7e>
 801886c:	7bbb      	ldrb	r3, [r7, #14]
 801886e:	2b0f      	cmp	r3, #15
 8018870:	d00b      	beq.n	801888a <dir_read+0x7e>
 8018872:	7bbb      	ldrb	r3, [r7, #14]
 8018874:	f023 0320 	bic.w	r3, r3, #32
 8018878:	2b08      	cmp	r3, #8
 801887a:	bf0c      	ite	eq
 801887c:	2301      	moveq	r3, #1
 801887e:	2300      	movne	r3, #0
 8018880:	b2db      	uxtb	r3, r3
 8018882:	461a      	mov	r2, r3
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	4293      	cmp	r3, r2
 8018888:	d00f      	beq.n	80188aa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801888a:	2100      	movs	r1, #0
 801888c:	6878      	ldr	r0, [r7, #4]
 801888e:	f7ff fe72 	bl	8018576 <dir_next>
 8018892:	4603      	mov	r3, r0
 8018894:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018896:	7dfb      	ldrb	r3, [r7, #23]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d108      	bne.n	80188ae <dir_read+0xa2>
	while (dp->sect) {
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	69db      	ldr	r3, [r3, #28]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d1be      	bne.n	8018822 <dir_read+0x16>
 80188a4:	e004      	b.n	80188b0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80188a6:	bf00      	nop
 80188a8:	e002      	b.n	80188b0 <dir_read+0xa4>
				break;
 80188aa:	bf00      	nop
 80188ac:	e000      	b.n	80188b0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80188ae:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80188b0:	7dfb      	ldrb	r3, [r7, #23]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d002      	beq.n	80188bc <dir_read+0xb0>
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	2200      	movs	r2, #0
 80188ba:	61da      	str	r2, [r3, #28]
	return res;
 80188bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80188be:	4618      	mov	r0, r3
 80188c0:	3718      	adds	r7, #24
 80188c2:	46bd      	mov	sp, r7
 80188c4:	bd80      	pop	{r7, pc}

080188c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80188c6:	b580      	push	{r7, lr}
 80188c8:	b086      	sub	sp, #24
 80188ca:	af00      	add	r7, sp, #0
 80188cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80188d4:	2100      	movs	r1, #0
 80188d6:	6878      	ldr	r0, [r7, #4]
 80188d8:	f7ff fdd2 	bl	8018480 <dir_sdi>
 80188dc:	4603      	mov	r3, r0
 80188de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80188e0:	7dfb      	ldrb	r3, [r7, #23]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d001      	beq.n	80188ea <dir_find+0x24>
 80188e6:	7dfb      	ldrb	r3, [r7, #23]
 80188e8:	e03e      	b.n	8018968 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	69db      	ldr	r3, [r3, #28]
 80188ee:	4619      	mov	r1, r3
 80188f0:	6938      	ldr	r0, [r7, #16]
 80188f2:	f7ff fa45 	bl	8017d80 <move_window>
 80188f6:	4603      	mov	r3, r0
 80188f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80188fa:	7dfb      	ldrb	r3, [r7, #23]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d12f      	bne.n	8018960 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	6a1b      	ldr	r3, [r3, #32]
 8018904:	781b      	ldrb	r3, [r3, #0]
 8018906:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018908:	7bfb      	ldrb	r3, [r7, #15]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d102      	bne.n	8018914 <dir_find+0x4e>
 801890e:	2304      	movs	r3, #4
 8018910:	75fb      	strb	r3, [r7, #23]
 8018912:	e028      	b.n	8018966 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6a1b      	ldr	r3, [r3, #32]
 8018918:	330b      	adds	r3, #11
 801891a:	781b      	ldrb	r3, [r3, #0]
 801891c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018920:	b2da      	uxtb	r2, r3
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	6a1b      	ldr	r3, [r3, #32]
 801892a:	330b      	adds	r3, #11
 801892c:	781b      	ldrb	r3, [r3, #0]
 801892e:	f003 0308 	and.w	r3, r3, #8
 8018932:	2b00      	cmp	r3, #0
 8018934:	d10a      	bne.n	801894c <dir_find+0x86>
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	6a18      	ldr	r0, [r3, #32]
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	3324      	adds	r3, #36	; 0x24
 801893e:	220b      	movs	r2, #11
 8018940:	4619      	mov	r1, r3
 8018942:	f7ff f82b 	bl	801799c <mem_cmp>
 8018946:	4603      	mov	r3, r0
 8018948:	2b00      	cmp	r3, #0
 801894a:	d00b      	beq.n	8018964 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801894c:	2100      	movs	r1, #0
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f7ff fe11 	bl	8018576 <dir_next>
 8018954:	4603      	mov	r3, r0
 8018956:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018958:	7dfb      	ldrb	r3, [r7, #23]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d0c5      	beq.n	80188ea <dir_find+0x24>
 801895e:	e002      	b.n	8018966 <dir_find+0xa0>
		if (res != FR_OK) break;
 8018960:	bf00      	nop
 8018962:	e000      	b.n	8018966 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8018964:	bf00      	nop

	return res;
 8018966:	7dfb      	ldrb	r3, [r7, #23]
}
 8018968:	4618      	mov	r0, r3
 801896a:	3718      	adds	r7, #24
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}

08018970 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b084      	sub	sp, #16
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801897e:	2101      	movs	r1, #1
 8018980:	6878      	ldr	r0, [r7, #4]
 8018982:	f7ff febd 	bl	8018700 <dir_alloc>
 8018986:	4603      	mov	r3, r0
 8018988:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801898a:	7bfb      	ldrb	r3, [r7, #15]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d11c      	bne.n	80189ca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	69db      	ldr	r3, [r3, #28]
 8018994:	4619      	mov	r1, r3
 8018996:	68b8      	ldr	r0, [r7, #8]
 8018998:	f7ff f9f2 	bl	8017d80 <move_window>
 801899c:	4603      	mov	r3, r0
 801899e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80189a0:	7bfb      	ldrb	r3, [r7, #15]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d111      	bne.n	80189ca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	6a1b      	ldr	r3, [r3, #32]
 80189aa:	2220      	movs	r2, #32
 80189ac:	2100      	movs	r1, #0
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7fe ffd9 	bl	8017966 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	6a18      	ldr	r0, [r3, #32]
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	3324      	adds	r3, #36	; 0x24
 80189bc:	220b      	movs	r2, #11
 80189be:	4619      	mov	r1, r3
 80189c0:	f7fe ffb0 	bl	8017924 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	2201      	movs	r2, #1
 80189c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80189ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80189cc:	4618      	mov	r0, r3
 80189ce:	3710      	adds	r7, #16
 80189d0:	46bd      	mov	sp, r7
 80189d2:	bd80      	pop	{r7, pc}

080189d4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b084      	sub	sp, #16
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	69db      	ldr	r3, [r3, #28]
 80189e6:	4619      	mov	r1, r3
 80189e8:	68f8      	ldr	r0, [r7, #12]
 80189ea:	f7ff f9c9 	bl	8017d80 <move_window>
 80189ee:	4603      	mov	r3, r0
 80189f0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80189f2:	7afb      	ldrb	r3, [r7, #11]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d106      	bne.n	8018a06 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6a1b      	ldr	r3, [r3, #32]
 80189fc:	22e5      	movs	r2, #229	; 0xe5
 80189fe:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	2201      	movs	r2, #1
 8018a04:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8018a06:	7afb      	ldrb	r3, [r7, #11]
}
 8018a08:	4618      	mov	r0, r3
 8018a0a:	3710      	adds	r7, #16
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	bd80      	pop	{r7, pc}

08018a10 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b086      	sub	sp, #24
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
 8018a18:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8018a1a:	683b      	ldr	r3, [r7, #0]
 8018a1c:	2200      	movs	r2, #0
 8018a1e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	69db      	ldr	r3, [r3, #28]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d04e      	beq.n	8018ac6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	613b      	str	r3, [r7, #16]
 8018a2c:	693b      	ldr	r3, [r7, #16]
 8018a2e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8018a30:	e021      	b.n	8018a76 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	6a1a      	ldr	r2, [r3, #32]
 8018a36:	697b      	ldr	r3, [r7, #20]
 8018a38:	1c59      	adds	r1, r3, #1
 8018a3a:	6179      	str	r1, [r7, #20]
 8018a3c:	4413      	add	r3, r2
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8018a42:	7bfb      	ldrb	r3, [r7, #15]
 8018a44:	2b20      	cmp	r3, #32
 8018a46:	d100      	bne.n	8018a4a <get_fileinfo+0x3a>
 8018a48:	e015      	b.n	8018a76 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8018a4a:	7bfb      	ldrb	r3, [r7, #15]
 8018a4c:	2b05      	cmp	r3, #5
 8018a4e:	d101      	bne.n	8018a54 <get_fileinfo+0x44>
 8018a50:	23e5      	movs	r3, #229	; 0xe5
 8018a52:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8018a54:	697b      	ldr	r3, [r7, #20]
 8018a56:	2b09      	cmp	r3, #9
 8018a58:	d106      	bne.n	8018a68 <get_fileinfo+0x58>
 8018a5a:	693b      	ldr	r3, [r7, #16]
 8018a5c:	1c5a      	adds	r2, r3, #1
 8018a5e:	613a      	str	r2, [r7, #16]
 8018a60:	683a      	ldr	r2, [r7, #0]
 8018a62:	4413      	add	r3, r2
 8018a64:	222e      	movs	r2, #46	; 0x2e
 8018a66:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8018a68:	693b      	ldr	r3, [r7, #16]
 8018a6a:	1c5a      	adds	r2, r3, #1
 8018a6c:	613a      	str	r2, [r7, #16]
 8018a6e:	683a      	ldr	r2, [r7, #0]
 8018a70:	4413      	add	r3, r2
 8018a72:	7bfa      	ldrb	r2, [r7, #15]
 8018a74:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8018a76:	697b      	ldr	r3, [r7, #20]
 8018a78:	2b0a      	cmp	r3, #10
 8018a7a:	d9da      	bls.n	8018a32 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8018a7c:	683a      	ldr	r2, [r7, #0]
 8018a7e:	693b      	ldr	r3, [r7, #16]
 8018a80:	4413      	add	r3, r2
 8018a82:	3309      	adds	r3, #9
 8018a84:	2200      	movs	r2, #0
 8018a86:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	6a1b      	ldr	r3, [r3, #32]
 8018a8c:	7ada      	ldrb	r2, [r3, #11]
 8018a8e:	683b      	ldr	r3, [r7, #0]
 8018a90:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	6a1b      	ldr	r3, [r3, #32]
 8018a96:	331c      	adds	r3, #28
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7fe fed9 	bl	8017850 <ld_dword>
 8018a9e:	4602      	mov	r2, r0
 8018aa0:	683b      	ldr	r3, [r7, #0]
 8018aa2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	6a1b      	ldr	r3, [r3, #32]
 8018aa8:	3316      	adds	r3, #22
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7fe fed0 	bl	8017850 <ld_dword>
 8018ab0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8018ab2:	68bb      	ldr	r3, [r7, #8]
 8018ab4:	b29a      	uxth	r2, r3
 8018ab6:	683b      	ldr	r3, [r7, #0]
 8018ab8:	80da      	strh	r2, [r3, #6]
 8018aba:	68bb      	ldr	r3, [r7, #8]
 8018abc:	0c1b      	lsrs	r3, r3, #16
 8018abe:	b29a      	uxth	r2, r3
 8018ac0:	683b      	ldr	r3, [r7, #0]
 8018ac2:	809a      	strh	r2, [r3, #4]
 8018ac4:	e000      	b.n	8018ac8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018ac6:	bf00      	nop
}
 8018ac8:	3718      	adds	r7, #24
 8018aca:	46bd      	mov	sp, r7
 8018acc:	bd80      	pop	{r7, pc}
	...

08018ad0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b088      	sub	sp, #32
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
 8018ad8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8018ada:	683b      	ldr	r3, [r7, #0]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	60fb      	str	r3, [r7, #12]
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	3324      	adds	r3, #36	; 0x24
 8018ae4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8018ae6:	220b      	movs	r2, #11
 8018ae8:	2120      	movs	r1, #32
 8018aea:	68b8      	ldr	r0, [r7, #8]
 8018aec:	f7fe ff3b 	bl	8017966 <mem_set>
	si = i = 0; ni = 8;
 8018af0:	2300      	movs	r3, #0
 8018af2:	613b      	str	r3, [r7, #16]
 8018af4:	693b      	ldr	r3, [r7, #16]
 8018af6:	61fb      	str	r3, [r7, #28]
 8018af8:	2308      	movs	r3, #8
 8018afa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8018afc:	69fb      	ldr	r3, [r7, #28]
 8018afe:	1c5a      	adds	r2, r3, #1
 8018b00:	61fa      	str	r2, [r7, #28]
 8018b02:	68fa      	ldr	r2, [r7, #12]
 8018b04:	4413      	add	r3, r2
 8018b06:	781b      	ldrb	r3, [r3, #0]
 8018b08:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8018b0a:	7efb      	ldrb	r3, [r7, #27]
 8018b0c:	2b20      	cmp	r3, #32
 8018b0e:	d94e      	bls.n	8018bae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8018b10:	7efb      	ldrb	r3, [r7, #27]
 8018b12:	2b2f      	cmp	r3, #47	; 0x2f
 8018b14:	d006      	beq.n	8018b24 <create_name+0x54>
 8018b16:	7efb      	ldrb	r3, [r7, #27]
 8018b18:	2b5c      	cmp	r3, #92	; 0x5c
 8018b1a:	d110      	bne.n	8018b3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018b1c:	e002      	b.n	8018b24 <create_name+0x54>
 8018b1e:	69fb      	ldr	r3, [r7, #28]
 8018b20:	3301      	adds	r3, #1
 8018b22:	61fb      	str	r3, [r7, #28]
 8018b24:	68fa      	ldr	r2, [r7, #12]
 8018b26:	69fb      	ldr	r3, [r7, #28]
 8018b28:	4413      	add	r3, r2
 8018b2a:	781b      	ldrb	r3, [r3, #0]
 8018b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8018b2e:	d0f6      	beq.n	8018b1e <create_name+0x4e>
 8018b30:	68fa      	ldr	r2, [r7, #12]
 8018b32:	69fb      	ldr	r3, [r7, #28]
 8018b34:	4413      	add	r3, r2
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	2b5c      	cmp	r3, #92	; 0x5c
 8018b3a:	d0f0      	beq.n	8018b1e <create_name+0x4e>
			break;
 8018b3c:	e038      	b.n	8018bb0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8018b3e:	7efb      	ldrb	r3, [r7, #27]
 8018b40:	2b2e      	cmp	r3, #46	; 0x2e
 8018b42:	d003      	beq.n	8018b4c <create_name+0x7c>
 8018b44:	693a      	ldr	r2, [r7, #16]
 8018b46:	697b      	ldr	r3, [r7, #20]
 8018b48:	429a      	cmp	r2, r3
 8018b4a:	d30c      	bcc.n	8018b66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	2b0b      	cmp	r3, #11
 8018b50:	d002      	beq.n	8018b58 <create_name+0x88>
 8018b52:	7efb      	ldrb	r3, [r7, #27]
 8018b54:	2b2e      	cmp	r3, #46	; 0x2e
 8018b56:	d001      	beq.n	8018b5c <create_name+0x8c>
 8018b58:	2306      	movs	r3, #6
 8018b5a:	e044      	b.n	8018be6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8018b5c:	2308      	movs	r3, #8
 8018b5e:	613b      	str	r3, [r7, #16]
 8018b60:	230b      	movs	r3, #11
 8018b62:	617b      	str	r3, [r7, #20]
			continue;
 8018b64:	e022      	b.n	8018bac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8018b66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	da04      	bge.n	8018b78 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8018b6e:	7efb      	ldrb	r3, [r7, #27]
 8018b70:	3b80      	subs	r3, #128	; 0x80
 8018b72:	4a1f      	ldr	r2, [pc, #124]	; (8018bf0 <create_name+0x120>)
 8018b74:	5cd3      	ldrb	r3, [r2, r3]
 8018b76:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8018b78:	7efb      	ldrb	r3, [r7, #27]
 8018b7a:	4619      	mov	r1, r3
 8018b7c:	481d      	ldr	r0, [pc, #116]	; (8018bf4 <create_name+0x124>)
 8018b7e:	f7fe ff34 	bl	80179ea <chk_chr>
 8018b82:	4603      	mov	r3, r0
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d001      	beq.n	8018b8c <create_name+0xbc>
 8018b88:	2306      	movs	r3, #6
 8018b8a:	e02c      	b.n	8018be6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8018b8c:	7efb      	ldrb	r3, [r7, #27]
 8018b8e:	2b60      	cmp	r3, #96	; 0x60
 8018b90:	d905      	bls.n	8018b9e <create_name+0xce>
 8018b92:	7efb      	ldrb	r3, [r7, #27]
 8018b94:	2b7a      	cmp	r3, #122	; 0x7a
 8018b96:	d802      	bhi.n	8018b9e <create_name+0xce>
 8018b98:	7efb      	ldrb	r3, [r7, #27]
 8018b9a:	3b20      	subs	r3, #32
 8018b9c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8018b9e:	693b      	ldr	r3, [r7, #16]
 8018ba0:	1c5a      	adds	r2, r3, #1
 8018ba2:	613a      	str	r2, [r7, #16]
 8018ba4:	68ba      	ldr	r2, [r7, #8]
 8018ba6:	4413      	add	r3, r2
 8018ba8:	7efa      	ldrb	r2, [r7, #27]
 8018baa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8018bac:	e7a6      	b.n	8018afc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8018bae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8018bb0:	68fa      	ldr	r2, [r7, #12]
 8018bb2:	69fb      	ldr	r3, [r7, #28]
 8018bb4:	441a      	add	r2, r3
 8018bb6:	683b      	ldr	r3, [r7, #0]
 8018bb8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8018bba:	693b      	ldr	r3, [r7, #16]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d101      	bne.n	8018bc4 <create_name+0xf4>
 8018bc0:	2306      	movs	r3, #6
 8018bc2:	e010      	b.n	8018be6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	781b      	ldrb	r3, [r3, #0]
 8018bc8:	2be5      	cmp	r3, #229	; 0xe5
 8018bca:	d102      	bne.n	8018bd2 <create_name+0x102>
 8018bcc:	68bb      	ldr	r3, [r7, #8]
 8018bce:	2205      	movs	r2, #5
 8018bd0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018bd2:	7efb      	ldrb	r3, [r7, #27]
 8018bd4:	2b20      	cmp	r3, #32
 8018bd6:	d801      	bhi.n	8018bdc <create_name+0x10c>
 8018bd8:	2204      	movs	r2, #4
 8018bda:	e000      	b.n	8018bde <create_name+0x10e>
 8018bdc:	2200      	movs	r2, #0
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	330b      	adds	r3, #11
 8018be2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8018be4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8018be6:	4618      	mov	r0, r3
 8018be8:	3720      	adds	r7, #32
 8018bea:	46bd      	mov	sp, r7
 8018bec:	bd80      	pop	{r7, pc}
 8018bee:	bf00      	nop
 8018bf0:	0803266c 	.word	0x0803266c
 8018bf4:	0801e4a4 	.word	0x0801e4a4

08018bf8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b086      	sub	sp, #24
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018c06:	693b      	ldr	r3, [r7, #16]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018c0c:	e002      	b.n	8018c14 <follow_path+0x1c>
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	3301      	adds	r3, #1
 8018c12:	603b      	str	r3, [r7, #0]
 8018c14:	683b      	ldr	r3, [r7, #0]
 8018c16:	781b      	ldrb	r3, [r3, #0]
 8018c18:	2b2f      	cmp	r3, #47	; 0x2f
 8018c1a:	d0f8      	beq.n	8018c0e <follow_path+0x16>
 8018c1c:	683b      	ldr	r3, [r7, #0]
 8018c1e:	781b      	ldrb	r3, [r3, #0]
 8018c20:	2b5c      	cmp	r3, #92	; 0x5c
 8018c22:	d0f4      	beq.n	8018c0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018c24:	693b      	ldr	r3, [r7, #16]
 8018c26:	2200      	movs	r2, #0
 8018c28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	781b      	ldrb	r3, [r3, #0]
 8018c2e:	2b1f      	cmp	r3, #31
 8018c30:	d80a      	bhi.n	8018c48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	2280      	movs	r2, #128	; 0x80
 8018c36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018c3a:	2100      	movs	r1, #0
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7ff fc1f 	bl	8018480 <dir_sdi>
 8018c42:	4603      	mov	r3, r0
 8018c44:	75fb      	strb	r3, [r7, #23]
 8018c46:	e043      	b.n	8018cd0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018c48:	463b      	mov	r3, r7
 8018c4a:	4619      	mov	r1, r3
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	f7ff ff3f 	bl	8018ad0 <create_name>
 8018c52:	4603      	mov	r3, r0
 8018c54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018c56:	7dfb      	ldrb	r3, [r7, #23]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d134      	bne.n	8018cc6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018c5c:	6878      	ldr	r0, [r7, #4]
 8018c5e:	f7ff fe32 	bl	80188c6 <dir_find>
 8018c62:	4603      	mov	r3, r0
 8018c64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018c6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8018c6e:	7dfb      	ldrb	r3, [r7, #23]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d00a      	beq.n	8018c8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018c74:	7dfb      	ldrb	r3, [r7, #23]
 8018c76:	2b04      	cmp	r3, #4
 8018c78:	d127      	bne.n	8018cca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018c7a:	7afb      	ldrb	r3, [r7, #11]
 8018c7c:	f003 0304 	and.w	r3, r3, #4
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d122      	bne.n	8018cca <follow_path+0xd2>
 8018c84:	2305      	movs	r3, #5
 8018c86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018c88:	e01f      	b.n	8018cca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018c8a:	7afb      	ldrb	r3, [r7, #11]
 8018c8c:	f003 0304 	and.w	r3, r3, #4
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d11c      	bne.n	8018cce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018c94:	693b      	ldr	r3, [r7, #16]
 8018c96:	799b      	ldrb	r3, [r3, #6]
 8018c98:	f003 0310 	and.w	r3, r3, #16
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d102      	bne.n	8018ca6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018ca0:	2305      	movs	r3, #5
 8018ca2:	75fb      	strb	r3, [r7, #23]
 8018ca4:	e014      	b.n	8018cd0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	695b      	ldr	r3, [r3, #20]
 8018cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018cb4:	4413      	add	r3, r2
 8018cb6:	4619      	mov	r1, r3
 8018cb8:	68f8      	ldr	r0, [r7, #12]
 8018cba:	f7ff fd68 	bl	801878e <ld_clust>
 8018cbe:	4602      	mov	r2, r0
 8018cc0:	693b      	ldr	r3, [r7, #16]
 8018cc2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018cc4:	e7c0      	b.n	8018c48 <follow_path+0x50>
			if (res != FR_OK) break;
 8018cc6:	bf00      	nop
 8018cc8:	e002      	b.n	8018cd0 <follow_path+0xd8>
				break;
 8018cca:	bf00      	nop
 8018ccc:	e000      	b.n	8018cd0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018cce:	bf00      	nop
			}
		}
	}

	return res;
 8018cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	3718      	adds	r7, #24
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}

08018cda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8018cda:	b480      	push	{r7}
 8018cdc:	b087      	sub	sp, #28
 8018cde:	af00      	add	r7, sp, #0
 8018ce0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ce6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d031      	beq.n	8018d54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	617b      	str	r3, [r7, #20]
 8018cf6:	e002      	b.n	8018cfe <get_ldnumber+0x24>
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	3301      	adds	r3, #1
 8018cfc:	617b      	str	r3, [r7, #20]
 8018cfe:	697b      	ldr	r3, [r7, #20]
 8018d00:	781b      	ldrb	r3, [r3, #0]
 8018d02:	2b20      	cmp	r3, #32
 8018d04:	d903      	bls.n	8018d0e <get_ldnumber+0x34>
 8018d06:	697b      	ldr	r3, [r7, #20]
 8018d08:	781b      	ldrb	r3, [r3, #0]
 8018d0a:	2b3a      	cmp	r3, #58	; 0x3a
 8018d0c:	d1f4      	bne.n	8018cf8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018d0e:	697b      	ldr	r3, [r7, #20]
 8018d10:	781b      	ldrb	r3, [r3, #0]
 8018d12:	2b3a      	cmp	r3, #58	; 0x3a
 8018d14:	d11c      	bne.n	8018d50 <get_ldnumber+0x76>
			tp = *path;
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	1c5a      	adds	r2, r3, #1
 8018d20:	60fa      	str	r2, [r7, #12]
 8018d22:	781b      	ldrb	r3, [r3, #0]
 8018d24:	3b30      	subs	r3, #48	; 0x30
 8018d26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	2b09      	cmp	r3, #9
 8018d2c:	d80e      	bhi.n	8018d4c <get_ldnumber+0x72>
 8018d2e:	68fa      	ldr	r2, [r7, #12]
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	429a      	cmp	r2, r3
 8018d34:	d10a      	bne.n	8018d4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d107      	bne.n	8018d4c <get_ldnumber+0x72>
					vol = (int)i;
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8018d40:	697b      	ldr	r3, [r7, #20]
 8018d42:	3301      	adds	r3, #1
 8018d44:	617b      	str	r3, [r7, #20]
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	697a      	ldr	r2, [r7, #20]
 8018d4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018d4c:	693b      	ldr	r3, [r7, #16]
 8018d4e:	e002      	b.n	8018d56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8018d50:	2300      	movs	r3, #0
 8018d52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018d54:	693b      	ldr	r3, [r7, #16]
}
 8018d56:	4618      	mov	r0, r3
 8018d58:	371c      	adds	r7, #28
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d60:	4770      	bx	lr
	...

08018d64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b082      	sub	sp, #8
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
 8018d6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	2200      	movs	r2, #0
 8018d72:	70da      	strb	r2, [r3, #3]
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f04f 32ff 	mov.w	r2, #4294967295
 8018d7a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018d7c:	6839      	ldr	r1, [r7, #0]
 8018d7e:	6878      	ldr	r0, [r7, #4]
 8018d80:	f7fe fffe 	bl	8017d80 <move_window>
 8018d84:	4603      	mov	r3, r0
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d001      	beq.n	8018d8e <check_fs+0x2a>
 8018d8a:	2304      	movs	r3, #4
 8018d8c:	e038      	b.n	8018e00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	3330      	adds	r3, #48	; 0x30
 8018d92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018d96:	4618      	mov	r0, r3
 8018d98:	f7fe fd42 	bl	8017820 <ld_word>
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	461a      	mov	r2, r3
 8018da0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018da4:	429a      	cmp	r2, r3
 8018da6:	d001      	beq.n	8018dac <check_fs+0x48>
 8018da8:	2303      	movs	r3, #3
 8018daa:	e029      	b.n	8018e00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018db2:	2be9      	cmp	r3, #233	; 0xe9
 8018db4:	d009      	beq.n	8018dca <check_fs+0x66>
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018dbc:	2beb      	cmp	r3, #235	; 0xeb
 8018dbe:	d11e      	bne.n	8018dfe <check_fs+0x9a>
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8018dc6:	2b90      	cmp	r3, #144	; 0x90
 8018dc8:	d119      	bne.n	8018dfe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	3330      	adds	r3, #48	; 0x30
 8018dce:	3336      	adds	r3, #54	; 0x36
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f7fe fd3d 	bl	8017850 <ld_dword>
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018ddc:	4a0a      	ldr	r2, [pc, #40]	; (8018e08 <check_fs+0xa4>)
 8018dde:	4293      	cmp	r3, r2
 8018de0:	d101      	bne.n	8018de6 <check_fs+0x82>
 8018de2:	2300      	movs	r3, #0
 8018de4:	e00c      	b.n	8018e00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	3330      	adds	r3, #48	; 0x30
 8018dea:	3352      	adds	r3, #82	; 0x52
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7fe fd2f 	bl	8017850 <ld_dword>
 8018df2:	4603      	mov	r3, r0
 8018df4:	4a05      	ldr	r2, [pc, #20]	; (8018e0c <check_fs+0xa8>)
 8018df6:	4293      	cmp	r3, r2
 8018df8:	d101      	bne.n	8018dfe <check_fs+0x9a>
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	e000      	b.n	8018e00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8018dfe:	2302      	movs	r3, #2
}
 8018e00:	4618      	mov	r0, r3
 8018e02:	3708      	adds	r7, #8
 8018e04:	46bd      	mov	sp, r7
 8018e06:	bd80      	pop	{r7, pc}
 8018e08:	00544146 	.word	0x00544146
 8018e0c:	33544146 	.word	0x33544146

08018e10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b096      	sub	sp, #88	; 0x58
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	60f8      	str	r0, [r7, #12]
 8018e18:	60b9      	str	r1, [r7, #8]
 8018e1a:	4613      	mov	r3, r2
 8018e1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8018e1e:	68bb      	ldr	r3, [r7, #8]
 8018e20:	2200      	movs	r2, #0
 8018e22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018e24:	68f8      	ldr	r0, [r7, #12]
 8018e26:	f7ff ff58 	bl	8018cda <get_ldnumber>
 8018e2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8018e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	da01      	bge.n	8018e36 <find_volume+0x26>
 8018e32:	230b      	movs	r3, #11
 8018e34:	e22d      	b.n	8019292 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018e36:	4aa1      	ldr	r2, [pc, #644]	; (80190bc <find_volume+0x2ac>)
 8018e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018e3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d101      	bne.n	8018e4a <find_volume+0x3a>
 8018e46:	230c      	movs	r3, #12
 8018e48:	e223      	b.n	8019292 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8018e4a:	68bb      	ldr	r3, [r7, #8]
 8018e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018e4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8018e50:	79fb      	ldrb	r3, [r7, #7]
 8018e52:	f023 0301 	bic.w	r3, r3, #1
 8018e56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8018e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e5a:	781b      	ldrb	r3, [r3, #0]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d01a      	beq.n	8018e96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8018e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e62:	785b      	ldrb	r3, [r3, #1]
 8018e64:	4618      	mov	r0, r3
 8018e66:	f7fe fc3d 	bl	80176e4 <disk_status>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018e74:	f003 0301 	and.w	r3, r3, #1
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d10c      	bne.n	8018e96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018e7c:	79fb      	ldrb	r3, [r7, #7]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d007      	beq.n	8018e92 <find_volume+0x82>
 8018e82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018e86:	f003 0304 	and.w	r3, r3, #4
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d001      	beq.n	8018e92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8018e8e:	230a      	movs	r3, #10
 8018e90:	e1ff      	b.n	8019292 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8018e92:	2300      	movs	r3, #0
 8018e94:	e1fd      	b.n	8019292 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e98:	2200      	movs	r2, #0
 8018e9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e9e:	b2da      	uxtb	r2, r3
 8018ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ea2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ea6:	785b      	ldrb	r3, [r3, #1]
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f7fe fc35 	bl	8017718 <disk_initialize>
 8018eae:	4603      	mov	r3, r0
 8018eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018eb8:	f003 0301 	and.w	r3, r3, #1
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d001      	beq.n	8018ec4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018ec0:	2303      	movs	r3, #3
 8018ec2:	e1e6      	b.n	8019292 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018ec4:	79fb      	ldrb	r3, [r7, #7]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d007      	beq.n	8018eda <find_volume+0xca>
 8018eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018ece:	f003 0304 	and.w	r3, r3, #4
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d001      	beq.n	8018eda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8018ed6:	230a      	movs	r3, #10
 8018ed8:	e1db      	b.n	8019292 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8018eda:	2300      	movs	r3, #0
 8018edc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018ede:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018ee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018ee2:	f7ff ff3f 	bl	8018d64 <check_fs>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018ef0:	2b02      	cmp	r3, #2
 8018ef2:	d149      	bne.n	8018f88 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8018ef8:	e01e      	b.n	8018f38 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8018efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018efc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f02:	011b      	lsls	r3, r3, #4
 8018f04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018f08:	4413      	add	r3, r2
 8018f0a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8018f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f0e:	3304      	adds	r3, #4
 8018f10:	781b      	ldrb	r3, [r3, #0]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d006      	beq.n	8018f24 <find_volume+0x114>
 8018f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f18:	3308      	adds	r3, #8
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	f7fe fc98 	bl	8017850 <ld_dword>
 8018f20:	4602      	mov	r2, r0
 8018f22:	e000      	b.n	8018f26 <find_volume+0x116>
 8018f24:	2200      	movs	r2, #0
 8018f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f28:	009b      	lsls	r3, r3, #2
 8018f2a:	3358      	adds	r3, #88	; 0x58
 8018f2c:	443b      	add	r3, r7
 8018f2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f34:	3301      	adds	r3, #1
 8018f36:	643b      	str	r3, [r7, #64]	; 0x40
 8018f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f3a:	2b03      	cmp	r3, #3
 8018f3c:	d9dd      	bls.n	8018efa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018f3e:	2300      	movs	r3, #0
 8018f40:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8018f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d002      	beq.n	8018f4e <find_volume+0x13e>
 8018f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f4a:	3b01      	subs	r3, #1
 8018f4c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f50:	009b      	lsls	r3, r3, #2
 8018f52:	3358      	adds	r3, #88	; 0x58
 8018f54:	443b      	add	r3, r7
 8018f56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8018f5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d005      	beq.n	8018f6e <find_volume+0x15e>
 8018f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018f66:	f7ff fefd 	bl	8018d64 <check_fs>
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	e000      	b.n	8018f70 <find_volume+0x160>
 8018f6e:	2303      	movs	r3, #3
 8018f70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f78:	2b01      	cmp	r3, #1
 8018f7a:	d905      	bls.n	8018f88 <find_volume+0x178>
 8018f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f7e:	3301      	adds	r3, #1
 8018f80:	643b      	str	r3, [r7, #64]	; 0x40
 8018f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f84:	2b03      	cmp	r3, #3
 8018f86:	d9e2      	bls.n	8018f4e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f8c:	2b04      	cmp	r3, #4
 8018f8e:	d101      	bne.n	8018f94 <find_volume+0x184>
 8018f90:	2301      	movs	r3, #1
 8018f92:	e17e      	b.n	8019292 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f98:	2b01      	cmp	r3, #1
 8018f9a:	d901      	bls.n	8018fa0 <find_volume+0x190>
 8018f9c:	230d      	movs	r3, #13
 8018f9e:	e178      	b.n	8019292 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fa2:	3330      	adds	r3, #48	; 0x30
 8018fa4:	330b      	adds	r3, #11
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f7fe fc3a 	bl	8017820 <ld_word>
 8018fac:	4603      	mov	r3, r0
 8018fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018fb2:	d001      	beq.n	8018fb8 <find_volume+0x1a8>
 8018fb4:	230d      	movs	r3, #13
 8018fb6:	e16c      	b.n	8019292 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fba:	3330      	adds	r3, #48	; 0x30
 8018fbc:	3316      	adds	r3, #22
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7fe fc2e 	bl	8017820 <ld_word>
 8018fc4:	4603      	mov	r3, r0
 8018fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d106      	bne.n	8018fdc <find_volume+0x1cc>
 8018fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fd0:	3330      	adds	r3, #48	; 0x30
 8018fd2:	3324      	adds	r3, #36	; 0x24
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	f7fe fc3b 	bl	8017850 <ld_dword>
 8018fda:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018fe0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8018fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fe4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8018fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fee:	789b      	ldrb	r3, [r3, #2]
 8018ff0:	2b01      	cmp	r3, #1
 8018ff2:	d005      	beq.n	8019000 <find_volume+0x1f0>
 8018ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ff6:	789b      	ldrb	r3, [r3, #2]
 8018ff8:	2b02      	cmp	r3, #2
 8018ffa:	d001      	beq.n	8019000 <find_volume+0x1f0>
 8018ffc:	230d      	movs	r3, #13
 8018ffe:	e148      	b.n	8019292 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019002:	789b      	ldrb	r3, [r3, #2]
 8019004:	461a      	mov	r2, r3
 8019006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019008:	fb02 f303 	mul.w	r3, r2, r3
 801900c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019014:	b29a      	uxth	r2, r3
 8019016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019018:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801901c:	895b      	ldrh	r3, [r3, #10]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d008      	beq.n	8019034 <find_volume+0x224>
 8019022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019024:	895b      	ldrh	r3, [r3, #10]
 8019026:	461a      	mov	r2, r3
 8019028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801902a:	895b      	ldrh	r3, [r3, #10]
 801902c:	3b01      	subs	r3, #1
 801902e:	4013      	ands	r3, r2
 8019030:	2b00      	cmp	r3, #0
 8019032:	d001      	beq.n	8019038 <find_volume+0x228>
 8019034:	230d      	movs	r3, #13
 8019036:	e12c      	b.n	8019292 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801903a:	3330      	adds	r3, #48	; 0x30
 801903c:	3311      	adds	r3, #17
 801903e:	4618      	mov	r0, r3
 8019040:	f7fe fbee 	bl	8017820 <ld_word>
 8019044:	4603      	mov	r3, r0
 8019046:	461a      	mov	r2, r3
 8019048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801904a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801904e:	891b      	ldrh	r3, [r3, #8]
 8019050:	f003 030f 	and.w	r3, r3, #15
 8019054:	b29b      	uxth	r3, r3
 8019056:	2b00      	cmp	r3, #0
 8019058:	d001      	beq.n	801905e <find_volume+0x24e>
 801905a:	230d      	movs	r3, #13
 801905c:	e119      	b.n	8019292 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019060:	3330      	adds	r3, #48	; 0x30
 8019062:	3313      	adds	r3, #19
 8019064:	4618      	mov	r0, r3
 8019066:	f7fe fbdb 	bl	8017820 <ld_word>
 801906a:	4603      	mov	r3, r0
 801906c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801906e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019070:	2b00      	cmp	r3, #0
 8019072:	d106      	bne.n	8019082 <find_volume+0x272>
 8019074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019076:	3330      	adds	r3, #48	; 0x30
 8019078:	3320      	adds	r3, #32
 801907a:	4618      	mov	r0, r3
 801907c:	f7fe fbe8 	bl	8017850 <ld_dword>
 8019080:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019084:	3330      	adds	r3, #48	; 0x30
 8019086:	330e      	adds	r3, #14
 8019088:	4618      	mov	r0, r3
 801908a:	f7fe fbc9 	bl	8017820 <ld_word>
 801908e:	4603      	mov	r3, r0
 8019090:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8019092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019094:	2b00      	cmp	r3, #0
 8019096:	d101      	bne.n	801909c <find_volume+0x28c>
 8019098:	230d      	movs	r3, #13
 801909a:	e0fa      	b.n	8019292 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801909c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801909e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190a0:	4413      	add	r3, r2
 80190a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80190a4:	8912      	ldrh	r2, [r2, #8]
 80190a6:	0912      	lsrs	r2, r2, #4
 80190a8:	b292      	uxth	r2, r2
 80190aa:	4413      	add	r3, r2
 80190ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80190ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80190b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190b2:	429a      	cmp	r2, r3
 80190b4:	d204      	bcs.n	80190c0 <find_volume+0x2b0>
 80190b6:	230d      	movs	r3, #13
 80190b8:	e0eb      	b.n	8019292 <find_volume+0x482>
 80190ba:	bf00      	nop
 80190bc:	20000fd4 	.word	0x20000fd4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80190c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80190c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c4:	1ad3      	subs	r3, r2, r3
 80190c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80190c8:	8952      	ldrh	r2, [r2, #10]
 80190ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80190ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80190d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d101      	bne.n	80190da <find_volume+0x2ca>
 80190d6:	230d      	movs	r3, #13
 80190d8:	e0db      	b.n	8019292 <find_volume+0x482>
		fmt = FS_FAT32;
 80190da:	2303      	movs	r3, #3
 80190dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80190e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80190e6:	4293      	cmp	r3, r2
 80190e8:	d802      	bhi.n	80190f0 <find_volume+0x2e0>
 80190ea:	2302      	movs	r3, #2
 80190ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80190f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80190f6:	4293      	cmp	r3, r2
 80190f8:	d802      	bhi.n	8019100 <find_volume+0x2f0>
 80190fa:	2301      	movs	r3, #1
 80190fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019102:	1c9a      	adds	r2, r3, #2
 8019104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019106:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8019108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801910a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801910c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801910e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019112:	441a      	add	r2, r3
 8019114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019116:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8019118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801911c:	441a      	add	r2, r3
 801911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019120:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8019122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019126:	2b03      	cmp	r3, #3
 8019128:	d11e      	bne.n	8019168 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801912c:	3330      	adds	r3, #48	; 0x30
 801912e:	332a      	adds	r3, #42	; 0x2a
 8019130:	4618      	mov	r0, r3
 8019132:	f7fe fb75 	bl	8017820 <ld_word>
 8019136:	4603      	mov	r3, r0
 8019138:	2b00      	cmp	r3, #0
 801913a:	d001      	beq.n	8019140 <find_volume+0x330>
 801913c:	230d      	movs	r3, #13
 801913e:	e0a8      	b.n	8019292 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019142:	891b      	ldrh	r3, [r3, #8]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d001      	beq.n	801914c <find_volume+0x33c>
 8019148:	230d      	movs	r3, #13
 801914a:	e0a2      	b.n	8019292 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801914e:	3330      	adds	r3, #48	; 0x30
 8019150:	332c      	adds	r3, #44	; 0x2c
 8019152:	4618      	mov	r0, r3
 8019154:	f7fe fb7c 	bl	8017850 <ld_dword>
 8019158:	4602      	mov	r2, r0
 801915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801915c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019160:	695b      	ldr	r3, [r3, #20]
 8019162:	009b      	lsls	r3, r3, #2
 8019164:	647b      	str	r3, [r7, #68]	; 0x44
 8019166:	e01f      	b.n	80191a8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8019168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801916a:	891b      	ldrh	r3, [r3, #8]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d101      	bne.n	8019174 <find_volume+0x364>
 8019170:	230d      	movs	r3, #13
 8019172:	e08e      	b.n	8019292 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019176:	6a1a      	ldr	r2, [r3, #32]
 8019178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801917a:	441a      	add	r2, r3
 801917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801917e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019180:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019184:	2b02      	cmp	r3, #2
 8019186:	d103      	bne.n	8019190 <find_volume+0x380>
 8019188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801918a:	695b      	ldr	r3, [r3, #20]
 801918c:	005b      	lsls	r3, r3, #1
 801918e:	e00a      	b.n	80191a6 <find_volume+0x396>
 8019190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019192:	695a      	ldr	r2, [r3, #20]
 8019194:	4613      	mov	r3, r2
 8019196:	005b      	lsls	r3, r3, #1
 8019198:	4413      	add	r3, r2
 801919a:	085a      	lsrs	r2, r3, #1
 801919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919e:	695b      	ldr	r3, [r3, #20]
 80191a0:	f003 0301 	and.w	r3, r3, #1
 80191a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80191a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80191a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191aa:	699a      	ldr	r2, [r3, #24]
 80191ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80191ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80191b2:	0a5b      	lsrs	r3, r3, #9
 80191b4:	429a      	cmp	r2, r3
 80191b6:	d201      	bcs.n	80191bc <find_volume+0x3ac>
 80191b8:	230d      	movs	r3, #13
 80191ba:	e06a      	b.n	8019292 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80191bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191be:	f04f 32ff 	mov.w	r2, #4294967295
 80191c2:	611a      	str	r2, [r3, #16]
 80191c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191c6:	691a      	ldr	r2, [r3, #16]
 80191c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80191cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ce:	2280      	movs	r2, #128	; 0x80
 80191d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80191d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80191d6:	2b03      	cmp	r3, #3
 80191d8:	d149      	bne.n	801926e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80191da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191dc:	3330      	adds	r3, #48	; 0x30
 80191de:	3330      	adds	r3, #48	; 0x30
 80191e0:	4618      	mov	r0, r3
 80191e2:	f7fe fb1d 	bl	8017820 <ld_word>
 80191e6:	4603      	mov	r3, r0
 80191e8:	2b01      	cmp	r3, #1
 80191ea:	d140      	bne.n	801926e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80191ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191ee:	3301      	adds	r3, #1
 80191f0:	4619      	mov	r1, r3
 80191f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80191f4:	f7fe fdc4 	bl	8017d80 <move_window>
 80191f8:	4603      	mov	r3, r0
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d137      	bne.n	801926e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80191fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019200:	2200      	movs	r2, #0
 8019202:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019206:	3330      	adds	r3, #48	; 0x30
 8019208:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801920c:	4618      	mov	r0, r3
 801920e:	f7fe fb07 	bl	8017820 <ld_word>
 8019212:	4603      	mov	r3, r0
 8019214:	461a      	mov	r2, r3
 8019216:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801921a:	429a      	cmp	r2, r3
 801921c:	d127      	bne.n	801926e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019220:	3330      	adds	r3, #48	; 0x30
 8019222:	4618      	mov	r0, r3
 8019224:	f7fe fb14 	bl	8017850 <ld_dword>
 8019228:	4603      	mov	r3, r0
 801922a:	4a1c      	ldr	r2, [pc, #112]	; (801929c <find_volume+0x48c>)
 801922c:	4293      	cmp	r3, r2
 801922e:	d11e      	bne.n	801926e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019232:	3330      	adds	r3, #48	; 0x30
 8019234:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8019238:	4618      	mov	r0, r3
 801923a:	f7fe fb09 	bl	8017850 <ld_dword>
 801923e:	4603      	mov	r3, r0
 8019240:	4a17      	ldr	r2, [pc, #92]	; (80192a0 <find_volume+0x490>)
 8019242:	4293      	cmp	r3, r2
 8019244:	d113      	bne.n	801926e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019248:	3330      	adds	r3, #48	; 0x30
 801924a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801924e:	4618      	mov	r0, r3
 8019250:	f7fe fafe 	bl	8017850 <ld_dword>
 8019254:	4602      	mov	r2, r0
 8019256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019258:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801925a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801925c:	3330      	adds	r3, #48	; 0x30
 801925e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019262:	4618      	mov	r0, r3
 8019264:	f7fe faf4 	bl	8017850 <ld_dword>
 8019268:	4602      	mov	r2, r0
 801926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801926c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019270:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019274:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019276:	4b0b      	ldr	r3, [pc, #44]	; (80192a4 <find_volume+0x494>)
 8019278:	881b      	ldrh	r3, [r3, #0]
 801927a:	3301      	adds	r3, #1
 801927c:	b29a      	uxth	r2, r3
 801927e:	4b09      	ldr	r3, [pc, #36]	; (80192a4 <find_volume+0x494>)
 8019280:	801a      	strh	r2, [r3, #0]
 8019282:	4b08      	ldr	r3, [pc, #32]	; (80192a4 <find_volume+0x494>)
 8019284:	881a      	ldrh	r2, [r3, #0]
 8019286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019288:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801928a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801928c:	f7fe fd10 	bl	8017cb0 <clear_lock>
#endif
	return FR_OK;
 8019290:	2300      	movs	r3, #0
}
 8019292:	4618      	mov	r0, r3
 8019294:	3758      	adds	r7, #88	; 0x58
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}
 801929a:	bf00      	nop
 801929c:	41615252 	.word	0x41615252
 80192a0:	61417272 	.word	0x61417272
 80192a4:	20000fd8 	.word	0x20000fd8

080192a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b084      	sub	sp, #16
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
 80192b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80192b2:	2309      	movs	r3, #9
 80192b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d01c      	beq.n	80192f6 <validate+0x4e>
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d018      	beq.n	80192f6 <validate+0x4e>
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	781b      	ldrb	r3, [r3, #0]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d013      	beq.n	80192f6 <validate+0x4e>
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	889a      	ldrh	r2, [r3, #4]
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	88db      	ldrh	r3, [r3, #6]
 80192d8:	429a      	cmp	r2, r3
 80192da:	d10c      	bne.n	80192f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	785b      	ldrb	r3, [r3, #1]
 80192e2:	4618      	mov	r0, r3
 80192e4:	f7fe f9fe 	bl	80176e4 <disk_status>
 80192e8:	4603      	mov	r3, r0
 80192ea:	f003 0301 	and.w	r3, r3, #1
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d101      	bne.n	80192f6 <validate+0x4e>
			res = FR_OK;
 80192f2:	2300      	movs	r3, #0
 80192f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80192f6:	7bfb      	ldrb	r3, [r7, #15]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d102      	bne.n	8019302 <validate+0x5a>
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	e000      	b.n	8019304 <validate+0x5c>
 8019302:	2300      	movs	r3, #0
 8019304:	683a      	ldr	r2, [r7, #0]
 8019306:	6013      	str	r3, [r2, #0]
	return res;
 8019308:	7bfb      	ldrb	r3, [r7, #15]
}
 801930a:	4618      	mov	r0, r3
 801930c:	3710      	adds	r7, #16
 801930e:	46bd      	mov	sp, r7
 8019310:	bd80      	pop	{r7, pc}
	...

08019314 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b088      	sub	sp, #32
 8019318:	af00      	add	r7, sp, #0
 801931a:	60f8      	str	r0, [r7, #12]
 801931c:	60b9      	str	r1, [r7, #8]
 801931e:	4613      	mov	r3, r2
 8019320:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019322:	68bb      	ldr	r3, [r7, #8]
 8019324:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019326:	f107 0310 	add.w	r3, r7, #16
 801932a:	4618      	mov	r0, r3
 801932c:	f7ff fcd5 	bl	8018cda <get_ldnumber>
 8019330:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019332:	69fb      	ldr	r3, [r7, #28]
 8019334:	2b00      	cmp	r3, #0
 8019336:	da01      	bge.n	801933c <f_mount+0x28>
 8019338:	230b      	movs	r3, #11
 801933a:	e02b      	b.n	8019394 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801933c:	4a17      	ldr	r2, [pc, #92]	; (801939c <f_mount+0x88>)
 801933e:	69fb      	ldr	r3, [r7, #28]
 8019340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019344:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019346:	69bb      	ldr	r3, [r7, #24]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d005      	beq.n	8019358 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801934c:	69b8      	ldr	r0, [r7, #24]
 801934e:	f7fe fcaf 	bl	8017cb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8019352:	69bb      	ldr	r3, [r7, #24]
 8019354:	2200      	movs	r2, #0
 8019356:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d002      	beq.n	8019364 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	2200      	movs	r2, #0
 8019362:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019364:	68fa      	ldr	r2, [r7, #12]
 8019366:	490d      	ldr	r1, [pc, #52]	; (801939c <f_mount+0x88>)
 8019368:	69fb      	ldr	r3, [r7, #28]
 801936a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d002      	beq.n	801937a <f_mount+0x66>
 8019374:	79fb      	ldrb	r3, [r7, #7]
 8019376:	2b01      	cmp	r3, #1
 8019378:	d001      	beq.n	801937e <f_mount+0x6a>
 801937a:	2300      	movs	r3, #0
 801937c:	e00a      	b.n	8019394 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801937e:	f107 010c 	add.w	r1, r7, #12
 8019382:	f107 0308 	add.w	r3, r7, #8
 8019386:	2200      	movs	r2, #0
 8019388:	4618      	mov	r0, r3
 801938a:	f7ff fd41 	bl	8018e10 <find_volume>
 801938e:	4603      	mov	r3, r0
 8019390:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8019392:	7dfb      	ldrb	r3, [r7, #23]
}
 8019394:	4618      	mov	r0, r3
 8019396:	3720      	adds	r7, #32
 8019398:	46bd      	mov	sp, r7
 801939a:	bd80      	pop	{r7, pc}
 801939c:	20000fd4 	.word	0x20000fd4

080193a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b098      	sub	sp, #96	; 0x60
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	60f8      	str	r0, [r7, #12]
 80193a8:	60b9      	str	r1, [r7, #8]
 80193aa:	4613      	mov	r3, r2
 80193ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d101      	bne.n	80193b8 <f_open+0x18>
 80193b4:	2309      	movs	r3, #9
 80193b6:	e1ad      	b.n	8019714 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80193b8:	79fb      	ldrb	r3, [r7, #7]
 80193ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80193c0:	79fa      	ldrb	r2, [r7, #7]
 80193c2:	f107 0110 	add.w	r1, r7, #16
 80193c6:	f107 0308 	add.w	r3, r7, #8
 80193ca:	4618      	mov	r0, r3
 80193cc:	f7ff fd20 	bl	8018e10 <find_volume>
 80193d0:	4603      	mov	r3, r0
 80193d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80193d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80193da:	2b00      	cmp	r3, #0
 80193dc:	f040 8191 	bne.w	8019702 <f_open+0x362>
		dj.obj.fs = fs;
 80193e0:	693b      	ldr	r3, [r7, #16]
 80193e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80193e4:	68ba      	ldr	r2, [r7, #8]
 80193e6:	f107 0314 	add.w	r3, r7, #20
 80193ea:	4611      	mov	r1, r2
 80193ec:	4618      	mov	r0, r3
 80193ee:	f7ff fc03 	bl	8018bf8 <follow_path>
 80193f2:	4603      	mov	r3, r0
 80193f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80193f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d11a      	bne.n	8019436 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019400:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8019404:	b25b      	sxtb	r3, r3
 8019406:	2b00      	cmp	r3, #0
 8019408:	da03      	bge.n	8019412 <f_open+0x72>
				res = FR_INVALID_NAME;
 801940a:	2306      	movs	r3, #6
 801940c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8019410:	e011      	b.n	8019436 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019412:	79fb      	ldrb	r3, [r7, #7]
 8019414:	f023 0301 	bic.w	r3, r3, #1
 8019418:	2b00      	cmp	r3, #0
 801941a:	bf14      	ite	ne
 801941c:	2301      	movne	r3, #1
 801941e:	2300      	moveq	r3, #0
 8019420:	b2db      	uxtb	r3, r3
 8019422:	461a      	mov	r2, r3
 8019424:	f107 0314 	add.w	r3, r7, #20
 8019428:	4611      	mov	r1, r2
 801942a:	4618      	mov	r0, r3
 801942c:	f7fe faf8 	bl	8017a20 <chk_lock>
 8019430:	4603      	mov	r3, r0
 8019432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019436:	79fb      	ldrb	r3, [r7, #7]
 8019438:	f003 031c 	and.w	r3, r3, #28
 801943c:	2b00      	cmp	r3, #0
 801943e:	d07f      	beq.n	8019540 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8019440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019444:	2b00      	cmp	r3, #0
 8019446:	d017      	beq.n	8019478 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801944c:	2b04      	cmp	r3, #4
 801944e:	d10e      	bne.n	801946e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019450:	f7fe fb42 	bl	8017ad8 <enq_lock>
 8019454:	4603      	mov	r3, r0
 8019456:	2b00      	cmp	r3, #0
 8019458:	d006      	beq.n	8019468 <f_open+0xc8>
 801945a:	f107 0314 	add.w	r3, r7, #20
 801945e:	4618      	mov	r0, r3
 8019460:	f7ff fa86 	bl	8018970 <dir_register>
 8019464:	4603      	mov	r3, r0
 8019466:	e000      	b.n	801946a <f_open+0xca>
 8019468:	2312      	movs	r3, #18
 801946a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801946e:	79fb      	ldrb	r3, [r7, #7]
 8019470:	f043 0308 	orr.w	r3, r3, #8
 8019474:	71fb      	strb	r3, [r7, #7]
 8019476:	e010      	b.n	801949a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019478:	7ebb      	ldrb	r3, [r7, #26]
 801947a:	f003 0311 	and.w	r3, r3, #17
 801947e:	2b00      	cmp	r3, #0
 8019480:	d003      	beq.n	801948a <f_open+0xea>
					res = FR_DENIED;
 8019482:	2307      	movs	r3, #7
 8019484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8019488:	e007      	b.n	801949a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801948a:	79fb      	ldrb	r3, [r7, #7]
 801948c:	f003 0304 	and.w	r3, r3, #4
 8019490:	2b00      	cmp	r3, #0
 8019492:	d002      	beq.n	801949a <f_open+0xfa>
 8019494:	2308      	movs	r3, #8
 8019496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801949a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d168      	bne.n	8019574 <f_open+0x1d4>
 80194a2:	79fb      	ldrb	r3, [r7, #7]
 80194a4:	f003 0308 	and.w	r3, r3, #8
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d063      	beq.n	8019574 <f_open+0x1d4>
				dw = GET_FATTIME();
 80194ac:	f7fa fd14 	bl	8013ed8 <get_fattime>
 80194b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80194b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194b4:	330e      	adds	r3, #14
 80194b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80194b8:	4618      	mov	r0, r3
 80194ba:	f7fe fa07 	bl	80178cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80194be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194c0:	3316      	adds	r3, #22
 80194c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80194c4:	4618      	mov	r0, r3
 80194c6:	f7fe fa01 	bl	80178cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80194ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194cc:	330b      	adds	r3, #11
 80194ce:	2220      	movs	r2, #32
 80194d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80194d2:	693b      	ldr	r3, [r7, #16]
 80194d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80194d6:	4611      	mov	r1, r2
 80194d8:	4618      	mov	r0, r3
 80194da:	f7ff f958 	bl	801878e <ld_clust>
 80194de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80194e0:	693b      	ldr	r3, [r7, #16]
 80194e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80194e4:	2200      	movs	r2, #0
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7ff f970 	bl	80187cc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80194ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194ee:	331c      	adds	r3, #28
 80194f0:	2100      	movs	r1, #0
 80194f2:	4618      	mov	r0, r3
 80194f4:	f7fe f9ea 	bl	80178cc <st_dword>
					fs->wflag = 1;
 80194f8:	693b      	ldr	r3, [r7, #16]
 80194fa:	2201      	movs	r2, #1
 80194fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80194fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019500:	2b00      	cmp	r3, #0
 8019502:	d037      	beq.n	8019574 <f_open+0x1d4>
						dw = fs->winsect;
 8019504:	693b      	ldr	r3, [r7, #16]
 8019506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019508:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801950a:	f107 0314 	add.w	r3, r7, #20
 801950e:	2200      	movs	r2, #0
 8019510:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019512:	4618      	mov	r0, r3
 8019514:	f7fe fe83 	bl	801821e <remove_chain>
 8019518:	4603      	mov	r3, r0
 801951a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801951e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019522:	2b00      	cmp	r3, #0
 8019524:	d126      	bne.n	8019574 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019526:	693b      	ldr	r3, [r7, #16]
 8019528:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801952a:	4618      	mov	r0, r3
 801952c:	f7fe fc28 	bl	8017d80 <move_window>
 8019530:	4603      	mov	r3, r0
 8019532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019536:	693b      	ldr	r3, [r7, #16]
 8019538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801953a:	3a01      	subs	r2, #1
 801953c:	60da      	str	r2, [r3, #12]
 801953e:	e019      	b.n	8019574 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019544:	2b00      	cmp	r3, #0
 8019546:	d115      	bne.n	8019574 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019548:	7ebb      	ldrb	r3, [r7, #26]
 801954a:	f003 0310 	and.w	r3, r3, #16
 801954e:	2b00      	cmp	r3, #0
 8019550:	d003      	beq.n	801955a <f_open+0x1ba>
					res = FR_NO_FILE;
 8019552:	2304      	movs	r3, #4
 8019554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8019558:	e00c      	b.n	8019574 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801955a:	79fb      	ldrb	r3, [r7, #7]
 801955c:	f003 0302 	and.w	r3, r3, #2
 8019560:	2b00      	cmp	r3, #0
 8019562:	d007      	beq.n	8019574 <f_open+0x1d4>
 8019564:	7ebb      	ldrb	r3, [r7, #26]
 8019566:	f003 0301 	and.w	r3, r3, #1
 801956a:	2b00      	cmp	r3, #0
 801956c:	d002      	beq.n	8019574 <f_open+0x1d4>
						res = FR_DENIED;
 801956e:	2307      	movs	r3, #7
 8019570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8019574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019578:	2b00      	cmp	r3, #0
 801957a:	d128      	bne.n	80195ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801957c:	79fb      	ldrb	r3, [r7, #7]
 801957e:	f003 0308 	and.w	r3, r3, #8
 8019582:	2b00      	cmp	r3, #0
 8019584:	d003      	beq.n	801958e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8019586:	79fb      	ldrb	r3, [r7, #7]
 8019588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801958c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801958e:	693b      	ldr	r3, [r7, #16]
 8019590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8019596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801959c:	79fb      	ldrb	r3, [r7, #7]
 801959e:	f023 0301 	bic.w	r3, r3, #1
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	bf14      	ite	ne
 80195a6:	2301      	movne	r3, #1
 80195a8:	2300      	moveq	r3, #0
 80195aa:	b2db      	uxtb	r3, r3
 80195ac:	461a      	mov	r2, r3
 80195ae:	f107 0314 	add.w	r3, r7, #20
 80195b2:	4611      	mov	r1, r2
 80195b4:	4618      	mov	r0, r3
 80195b6:	f7fe fab1 	bl	8017b1c <inc_lock>
 80195ba:	4602      	mov	r2, r0
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	691b      	ldr	r3, [r3, #16]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d102      	bne.n	80195ce <f_open+0x22e>
 80195c8:	2302      	movs	r3, #2
 80195ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80195ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	f040 8095 	bne.w	8019702 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80195d8:	693b      	ldr	r3, [r7, #16]
 80195da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80195dc:	4611      	mov	r1, r2
 80195de:	4618      	mov	r0, r3
 80195e0:	f7ff f8d5 	bl	801878e <ld_clust>
 80195e4:	4602      	mov	r2, r0
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80195ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195ec:	331c      	adds	r3, #28
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7fe f92e 	bl	8017850 <ld_dword>
 80195f4:	4602      	mov	r2, r0
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	2200      	movs	r2, #0
 80195fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019600:	693a      	ldr	r2, [r7, #16]
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019606:	693b      	ldr	r3, [r7, #16]
 8019608:	88da      	ldrh	r2, [r3, #6]
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	79fa      	ldrb	r2, [r7, #7]
 8019612:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	2200      	movs	r2, #0
 8019618:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	2200      	movs	r2, #0
 801961e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	2200      	movs	r2, #0
 8019624:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	3330      	adds	r3, #48	; 0x30
 801962a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801962e:	2100      	movs	r1, #0
 8019630:	4618      	mov	r0, r3
 8019632:	f7fe f998 	bl	8017966 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019636:	79fb      	ldrb	r3, [r7, #7]
 8019638:	f003 0320 	and.w	r3, r3, #32
 801963c:	2b00      	cmp	r3, #0
 801963e:	d060      	beq.n	8019702 <f_open+0x362>
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	68db      	ldr	r3, [r3, #12]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d05c      	beq.n	8019702 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	68da      	ldr	r2, [r3, #12]
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019650:	693b      	ldr	r3, [r7, #16]
 8019652:	895b      	ldrh	r3, [r3, #10]
 8019654:	025b      	lsls	r3, r3, #9
 8019656:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	689b      	ldr	r3, [r3, #8]
 801965c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	68db      	ldr	r3, [r3, #12]
 8019662:	657b      	str	r3, [r7, #84]	; 0x54
 8019664:	e016      	b.n	8019694 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801966a:	4618      	mov	r0, r3
 801966c:	f7fe fc43 	bl	8017ef6 <get_fat>
 8019670:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8019672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019674:	2b01      	cmp	r3, #1
 8019676:	d802      	bhi.n	801967e <f_open+0x2de>
 8019678:	2302      	movs	r3, #2
 801967a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801967e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019684:	d102      	bne.n	801968c <f_open+0x2ec>
 8019686:	2301      	movs	r3, #1
 8019688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801968c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801968e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019690:	1ad3      	subs	r3, r2, r3
 8019692:	657b      	str	r3, [r7, #84]	; 0x54
 8019694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019698:	2b00      	cmp	r3, #0
 801969a:	d103      	bne.n	80196a4 <f_open+0x304>
 801969c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801969e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d8e0      	bhi.n	8019666 <f_open+0x2c6>
				}
				fp->clust = clst;
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80196a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80196aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d127      	bne.n	8019702 <f_open+0x362>
 80196b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80196b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d022      	beq.n	8019702 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80196bc:	693b      	ldr	r3, [r7, #16]
 80196be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80196c0:	4618      	mov	r0, r3
 80196c2:	f7fe fbf9 	bl	8017eb8 <clust2sect>
 80196c6:	6478      	str	r0, [r7, #68]	; 0x44
 80196c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d103      	bne.n	80196d6 <f_open+0x336>
						res = FR_INT_ERR;
 80196ce:	2302      	movs	r3, #2
 80196d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80196d4:	e015      	b.n	8019702 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80196d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80196d8:	0a5a      	lsrs	r2, r3, #9
 80196da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196dc:	441a      	add	r2, r3
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80196e2:	693b      	ldr	r3, [r7, #16]
 80196e4:	7858      	ldrb	r0, [r3, #1]
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	6a1a      	ldr	r2, [r3, #32]
 80196f0:	2301      	movs	r3, #1
 80196f2:	f7fe f837 	bl	8017764 <disk_read>
 80196f6:	4603      	mov	r3, r0
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d002      	beq.n	8019702 <f_open+0x362>
 80196fc:	2301      	movs	r3, #1
 80196fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019706:	2b00      	cmp	r3, #0
 8019708:	d002      	beq.n	8019710 <f_open+0x370>
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	2200      	movs	r2, #0
 801970e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8019714:	4618      	mov	r0, r3
 8019716:	3760      	adds	r7, #96	; 0x60
 8019718:	46bd      	mov	sp, r7
 801971a:	bd80      	pop	{r7, pc}

0801971c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b08c      	sub	sp, #48	; 0x30
 8019720:	af00      	add	r7, sp, #0
 8019722:	60f8      	str	r0, [r7, #12]
 8019724:	60b9      	str	r1, [r7, #8]
 8019726:	607a      	str	r2, [r7, #4]
 8019728:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801972a:	68bb      	ldr	r3, [r7, #8]
 801972c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801972e:	683b      	ldr	r3, [r7, #0]
 8019730:	2200      	movs	r2, #0
 8019732:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	f107 0210 	add.w	r2, r7, #16
 801973a:	4611      	mov	r1, r2
 801973c:	4618      	mov	r0, r3
 801973e:	f7ff fdb3 	bl	80192a8 <validate>
 8019742:	4603      	mov	r3, r0
 8019744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801974c:	2b00      	cmp	r3, #0
 801974e:	d107      	bne.n	8019760 <f_write+0x44>
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	7d5b      	ldrb	r3, [r3, #21]
 8019754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801975c:	2b00      	cmp	r3, #0
 801975e:	d002      	beq.n	8019766 <f_write+0x4a>
 8019760:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019764:	e14b      	b.n	80199fe <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	7d1b      	ldrb	r3, [r3, #20]
 801976a:	f003 0302 	and.w	r3, r3, #2
 801976e:	2b00      	cmp	r3, #0
 8019770:	d101      	bne.n	8019776 <f_write+0x5a>
 8019772:	2307      	movs	r3, #7
 8019774:	e143      	b.n	80199fe <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	699a      	ldr	r2, [r3, #24]
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	441a      	add	r2, r3
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	699b      	ldr	r3, [r3, #24]
 8019782:	429a      	cmp	r2, r3
 8019784:	f080 812d 	bcs.w	80199e2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	699b      	ldr	r3, [r3, #24]
 801978c:	43db      	mvns	r3, r3
 801978e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019790:	e127      	b.n	80199e2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	699b      	ldr	r3, [r3, #24]
 8019796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801979a:	2b00      	cmp	r3, #0
 801979c:	f040 80e3 	bne.w	8019966 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	699b      	ldr	r3, [r3, #24]
 80197a4:	0a5b      	lsrs	r3, r3, #9
 80197a6:	693a      	ldr	r2, [r7, #16]
 80197a8:	8952      	ldrh	r2, [r2, #10]
 80197aa:	3a01      	subs	r2, #1
 80197ac:	4013      	ands	r3, r2
 80197ae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80197b0:	69bb      	ldr	r3, [r7, #24]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d143      	bne.n	801983e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	699b      	ldr	r3, [r3, #24]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d10c      	bne.n	80197d8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	689b      	ldr	r3, [r3, #8]
 80197c2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80197c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d11a      	bne.n	8019800 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	2100      	movs	r1, #0
 80197ce:	4618      	mov	r0, r3
 80197d0:	f7fe fd8a 	bl	80182e8 <create_chain>
 80197d4:	62b8      	str	r0, [r7, #40]	; 0x28
 80197d6:	e013      	b.n	8019800 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d007      	beq.n	80197f0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	699b      	ldr	r3, [r3, #24]
 80197e4:	4619      	mov	r1, r3
 80197e6:	68f8      	ldr	r0, [r7, #12]
 80197e8:	f7fe fe16 	bl	8018418 <clmt_clust>
 80197ec:	62b8      	str	r0, [r7, #40]	; 0x28
 80197ee:	e007      	b.n	8019800 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80197f0:	68fa      	ldr	r2, [r7, #12]
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	69db      	ldr	r3, [r3, #28]
 80197f6:	4619      	mov	r1, r3
 80197f8:	4610      	mov	r0, r2
 80197fa:	f7fe fd75 	bl	80182e8 <create_chain>
 80197fe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019802:	2b00      	cmp	r3, #0
 8019804:	f000 80f2 	beq.w	80199ec <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801980a:	2b01      	cmp	r3, #1
 801980c:	d104      	bne.n	8019818 <f_write+0xfc>
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	2202      	movs	r2, #2
 8019812:	755a      	strb	r2, [r3, #21]
 8019814:	2302      	movs	r3, #2
 8019816:	e0f2      	b.n	80199fe <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801981a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801981e:	d104      	bne.n	801982a <f_write+0x10e>
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	2201      	movs	r2, #1
 8019824:	755a      	strb	r2, [r3, #21]
 8019826:	2301      	movs	r3, #1
 8019828:	e0e9      	b.n	80199fe <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801982e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	689b      	ldr	r3, [r3, #8]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d102      	bne.n	801983e <f_write+0x122>
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801983c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	7d1b      	ldrb	r3, [r3, #20]
 8019842:	b25b      	sxtb	r3, r3
 8019844:	2b00      	cmp	r3, #0
 8019846:	da18      	bge.n	801987a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019848:	693b      	ldr	r3, [r7, #16]
 801984a:	7858      	ldrb	r0, [r3, #1]
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	6a1a      	ldr	r2, [r3, #32]
 8019856:	2301      	movs	r3, #1
 8019858:	f7fd ffa4 	bl	80177a4 <disk_write>
 801985c:	4603      	mov	r3, r0
 801985e:	2b00      	cmp	r3, #0
 8019860:	d004      	beq.n	801986c <f_write+0x150>
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	2201      	movs	r2, #1
 8019866:	755a      	strb	r2, [r3, #21]
 8019868:	2301      	movs	r3, #1
 801986a:	e0c8      	b.n	80199fe <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	7d1b      	ldrb	r3, [r3, #20]
 8019870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019874:	b2da      	uxtb	r2, r3
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801987a:	693a      	ldr	r2, [r7, #16]
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	69db      	ldr	r3, [r3, #28]
 8019880:	4619      	mov	r1, r3
 8019882:	4610      	mov	r0, r2
 8019884:	f7fe fb18 	bl	8017eb8 <clust2sect>
 8019888:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801988a:	697b      	ldr	r3, [r7, #20]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d104      	bne.n	801989a <f_write+0x17e>
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	2202      	movs	r2, #2
 8019894:	755a      	strb	r2, [r3, #21]
 8019896:	2302      	movs	r3, #2
 8019898:	e0b1      	b.n	80199fe <f_write+0x2e2>
			sect += csect;
 801989a:	697a      	ldr	r2, [r7, #20]
 801989c:	69bb      	ldr	r3, [r7, #24]
 801989e:	4413      	add	r3, r2
 80198a0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	0a5b      	lsrs	r3, r3, #9
 80198a6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80198a8:	6a3b      	ldr	r3, [r7, #32]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d03c      	beq.n	8019928 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80198ae:	69ba      	ldr	r2, [r7, #24]
 80198b0:	6a3b      	ldr	r3, [r7, #32]
 80198b2:	4413      	add	r3, r2
 80198b4:	693a      	ldr	r2, [r7, #16]
 80198b6:	8952      	ldrh	r2, [r2, #10]
 80198b8:	4293      	cmp	r3, r2
 80198ba:	d905      	bls.n	80198c8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80198bc:	693b      	ldr	r3, [r7, #16]
 80198be:	895b      	ldrh	r3, [r3, #10]
 80198c0:	461a      	mov	r2, r3
 80198c2:	69bb      	ldr	r3, [r7, #24]
 80198c4:	1ad3      	subs	r3, r2, r3
 80198c6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80198c8:	693b      	ldr	r3, [r7, #16]
 80198ca:	7858      	ldrb	r0, [r3, #1]
 80198cc:	6a3b      	ldr	r3, [r7, #32]
 80198ce:	697a      	ldr	r2, [r7, #20]
 80198d0:	69f9      	ldr	r1, [r7, #28]
 80198d2:	f7fd ff67 	bl	80177a4 <disk_write>
 80198d6:	4603      	mov	r3, r0
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d004      	beq.n	80198e6 <f_write+0x1ca>
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	2201      	movs	r2, #1
 80198e0:	755a      	strb	r2, [r3, #21]
 80198e2:	2301      	movs	r3, #1
 80198e4:	e08b      	b.n	80199fe <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	6a1a      	ldr	r2, [r3, #32]
 80198ea:	697b      	ldr	r3, [r7, #20]
 80198ec:	1ad3      	subs	r3, r2, r3
 80198ee:	6a3a      	ldr	r2, [r7, #32]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d915      	bls.n	8019920 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	6a1a      	ldr	r2, [r3, #32]
 80198fe:	697b      	ldr	r3, [r7, #20]
 8019900:	1ad3      	subs	r3, r2, r3
 8019902:	025b      	lsls	r3, r3, #9
 8019904:	69fa      	ldr	r2, [r7, #28]
 8019906:	4413      	add	r3, r2
 8019908:	f44f 7200 	mov.w	r2, #512	; 0x200
 801990c:	4619      	mov	r1, r3
 801990e:	f7fe f809 	bl	8017924 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	7d1b      	ldrb	r3, [r3, #20]
 8019916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801991a:	b2da      	uxtb	r2, r3
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019920:	6a3b      	ldr	r3, [r7, #32]
 8019922:	025b      	lsls	r3, r3, #9
 8019924:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019926:	e03f      	b.n	80199a8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	6a1b      	ldr	r3, [r3, #32]
 801992c:	697a      	ldr	r2, [r7, #20]
 801992e:	429a      	cmp	r2, r3
 8019930:	d016      	beq.n	8019960 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	699a      	ldr	r2, [r3, #24]
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801993a:	429a      	cmp	r2, r3
 801993c:	d210      	bcs.n	8019960 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801993e:	693b      	ldr	r3, [r7, #16]
 8019940:	7858      	ldrb	r0, [r3, #1]
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019948:	2301      	movs	r3, #1
 801994a:	697a      	ldr	r2, [r7, #20]
 801994c:	f7fd ff0a 	bl	8017764 <disk_read>
 8019950:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019952:	2b00      	cmp	r3, #0
 8019954:	d004      	beq.n	8019960 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	2201      	movs	r2, #1
 801995a:	755a      	strb	r2, [r3, #21]
 801995c:	2301      	movs	r3, #1
 801995e:	e04e      	b.n	80199fe <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	697a      	ldr	r2, [r7, #20]
 8019964:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	699b      	ldr	r3, [r3, #24]
 801996a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801996e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8019972:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	429a      	cmp	r2, r3
 801997a:	d901      	bls.n	8019980 <f_write+0x264>
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	699b      	ldr	r3, [r3, #24]
 801998a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801998e:	4413      	add	r3, r2
 8019990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019992:	69f9      	ldr	r1, [r7, #28]
 8019994:	4618      	mov	r0, r3
 8019996:	f7fd ffc5 	bl	8017924 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	7d1b      	ldrb	r3, [r3, #20]
 801999e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80199a2:	b2da      	uxtb	r2, r3
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80199a8:	69fa      	ldr	r2, [r7, #28]
 80199aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ac:	4413      	add	r3, r2
 80199ae:	61fb      	str	r3, [r7, #28]
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	699a      	ldr	r2, [r3, #24]
 80199b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b6:	441a      	add	r2, r3
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	619a      	str	r2, [r3, #24]
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	68da      	ldr	r2, [r3, #12]
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	699b      	ldr	r3, [r3, #24]
 80199c4:	429a      	cmp	r2, r3
 80199c6:	bf38      	it	cc
 80199c8:	461a      	movcc	r2, r3
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	60da      	str	r2, [r3, #12]
 80199ce:	683b      	ldr	r3, [r7, #0]
 80199d0:	681a      	ldr	r2, [r3, #0]
 80199d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d4:	441a      	add	r2, r3
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	601a      	str	r2, [r3, #0]
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199de:	1ad3      	subs	r3, r2, r3
 80199e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	f47f aed4 	bne.w	8019792 <f_write+0x76>
 80199ea:	e000      	b.n	80199ee <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80199ec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	7d1b      	ldrb	r3, [r3, #20]
 80199f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199f6:	b2da      	uxtb	r2, r3
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80199fc:	2300      	movs	r3, #0
}
 80199fe:	4618      	mov	r0, r3
 8019a00:	3730      	adds	r7, #48	; 0x30
 8019a02:	46bd      	mov	sp, r7
 8019a04:	bd80      	pop	{r7, pc}

08019a06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019a06:	b580      	push	{r7, lr}
 8019a08:	b086      	sub	sp, #24
 8019a0a:	af00      	add	r7, sp, #0
 8019a0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	f107 0208 	add.w	r2, r7, #8
 8019a14:	4611      	mov	r1, r2
 8019a16:	4618      	mov	r0, r3
 8019a18:	f7ff fc46 	bl	80192a8 <validate>
 8019a1c:	4603      	mov	r3, r0
 8019a1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019a20:	7dfb      	ldrb	r3, [r7, #23]
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d168      	bne.n	8019af8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	7d1b      	ldrb	r3, [r3, #20]
 8019a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d062      	beq.n	8019af8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	7d1b      	ldrb	r3, [r3, #20]
 8019a36:	b25b      	sxtb	r3, r3
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	da15      	bge.n	8019a68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	7858      	ldrb	r0, [r3, #1]
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	6a1a      	ldr	r2, [r3, #32]
 8019a4a:	2301      	movs	r3, #1
 8019a4c:	f7fd feaa 	bl	80177a4 <disk_write>
 8019a50:	4603      	mov	r3, r0
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d001      	beq.n	8019a5a <f_sync+0x54>
 8019a56:	2301      	movs	r3, #1
 8019a58:	e04f      	b.n	8019afa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	7d1b      	ldrb	r3, [r3, #20]
 8019a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019a62:	b2da      	uxtb	r2, r3
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019a68:	f7fa fa36 	bl	8013ed8 <get_fattime>
 8019a6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019a6e:	68ba      	ldr	r2, [r7, #8]
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a74:	4619      	mov	r1, r3
 8019a76:	4610      	mov	r0, r2
 8019a78:	f7fe f982 	bl	8017d80 <move_window>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019a80:	7dfb      	ldrb	r3, [r7, #23]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d138      	bne.n	8019af8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	330b      	adds	r3, #11
 8019a90:	781a      	ldrb	r2, [r3, #0]
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	330b      	adds	r3, #11
 8019a96:	f042 0220 	orr.w	r2, r2, #32
 8019a9a:	b2d2      	uxtb	r2, r2
 8019a9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	6818      	ldr	r0, [r3, #0]
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	689b      	ldr	r3, [r3, #8]
 8019aa6:	461a      	mov	r2, r3
 8019aa8:	68f9      	ldr	r1, [r7, #12]
 8019aaa:	f7fe fe8f 	bl	80187cc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	f103 021c 	add.w	r2, r3, #28
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	68db      	ldr	r3, [r3, #12]
 8019ab8:	4619      	mov	r1, r3
 8019aba:	4610      	mov	r0, r2
 8019abc:	f7fd ff06 	bl	80178cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	3316      	adds	r3, #22
 8019ac4:	6939      	ldr	r1, [r7, #16]
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f7fd ff00 	bl	80178cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	3312      	adds	r3, #18
 8019ad0:	2100      	movs	r1, #0
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f7fd fedf 	bl	8017896 <st_word>
					fs->wflag = 1;
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	2201      	movs	r2, #1
 8019adc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019ade:	68bb      	ldr	r3, [r7, #8]
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f7fe f97b 	bl	8017ddc <sync_fs>
 8019ae6:	4603      	mov	r3, r0
 8019ae8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	7d1b      	ldrb	r3, [r3, #20]
 8019aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019af2:	b2da      	uxtb	r2, r3
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8019afa:	4618      	mov	r0, r3
 8019afc:	3718      	adds	r7, #24
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}

08019b02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019b02:	b580      	push	{r7, lr}
 8019b04:	b084      	sub	sp, #16
 8019b06:	af00      	add	r7, sp, #0
 8019b08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019b0a:	6878      	ldr	r0, [r7, #4]
 8019b0c:	f7ff ff7b 	bl	8019a06 <f_sync>
 8019b10:	4603      	mov	r3, r0
 8019b12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019b14:	7bfb      	ldrb	r3, [r7, #15]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d118      	bne.n	8019b4c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	f107 0208 	add.w	r2, r7, #8
 8019b20:	4611      	mov	r1, r2
 8019b22:	4618      	mov	r0, r3
 8019b24:	f7ff fbc0 	bl	80192a8 <validate>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019b2c:	7bfb      	ldrb	r3, [r7, #15]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d10c      	bne.n	8019b4c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	691b      	ldr	r3, [r3, #16]
 8019b36:	4618      	mov	r0, r3
 8019b38:	f7fe f87e 	bl	8017c38 <dec_lock>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019b40:	7bfb      	ldrb	r3, [r7, #15]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d102      	bne.n	8019b4c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	2200      	movs	r2, #0
 8019b4a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b4e:	4618      	mov	r0, r3
 8019b50:	3710      	adds	r7, #16
 8019b52:	46bd      	mov	sp, r7
 8019b54:	bd80      	pop	{r7, pc}

08019b56 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8019b56:	b580      	push	{r7, lr}
 8019b58:	b086      	sub	sp, #24
 8019b5a:	af00      	add	r7, sp, #0
 8019b5c:	6078      	str	r0, [r7, #4]
 8019b5e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d101      	bne.n	8019b6a <f_opendir+0x14>
 8019b66:	2309      	movs	r3, #9
 8019b68:	e064      	b.n	8019c34 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8019b6e:	f107 010c 	add.w	r1, r7, #12
 8019b72:	463b      	mov	r3, r7
 8019b74:	2200      	movs	r2, #0
 8019b76:	4618      	mov	r0, r3
 8019b78:	f7ff f94a 	bl	8018e10 <find_volume>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019b80:	7dfb      	ldrb	r3, [r7, #23]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d14f      	bne.n	8019c26 <f_opendir+0xd0>
		obj->fs = fs;
 8019b86:	68fa      	ldr	r2, [r7, #12]
 8019b88:	693b      	ldr	r3, [r7, #16]
 8019b8a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	4619      	mov	r1, r3
 8019b90:	6878      	ldr	r0, [r7, #4]
 8019b92:	f7ff f831 	bl	8018bf8 <follow_path>
 8019b96:	4603      	mov	r3, r0
 8019b98:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8019b9a:	7dfb      	ldrb	r3, [r7, #23]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d13d      	bne.n	8019c1c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019ba6:	b25b      	sxtb	r3, r3
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	db12      	blt.n	8019bd2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8019bac:	693b      	ldr	r3, [r7, #16]
 8019bae:	799b      	ldrb	r3, [r3, #6]
 8019bb0:	f003 0310 	and.w	r3, r3, #16
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d00a      	beq.n	8019bce <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8019bb8:	68fa      	ldr	r2, [r7, #12]
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	6a1b      	ldr	r3, [r3, #32]
 8019bbe:	4619      	mov	r1, r3
 8019bc0:	4610      	mov	r0, r2
 8019bc2:	f7fe fde4 	bl	801878e <ld_clust>
 8019bc6:	4602      	mov	r2, r0
 8019bc8:	693b      	ldr	r3, [r7, #16]
 8019bca:	609a      	str	r2, [r3, #8]
 8019bcc:	e001      	b.n	8019bd2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8019bce:	2305      	movs	r3, #5
 8019bd0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8019bd2:	7dfb      	ldrb	r3, [r7, #23]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d121      	bne.n	8019c1c <f_opendir+0xc6>
				obj->id = fs->id;
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	88da      	ldrh	r2, [r3, #6]
 8019bdc:	693b      	ldr	r3, [r7, #16]
 8019bde:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8019be0:	2100      	movs	r1, #0
 8019be2:	6878      	ldr	r0, [r7, #4]
 8019be4:	f7fe fc4c 	bl	8018480 <dir_sdi>
 8019be8:	4603      	mov	r3, r0
 8019bea:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8019bec:	7dfb      	ldrb	r3, [r7, #23]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d114      	bne.n	8019c1c <f_opendir+0xc6>
					if (obj->sclust) {
 8019bf2:	693b      	ldr	r3, [r7, #16]
 8019bf4:	689b      	ldr	r3, [r3, #8]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d00d      	beq.n	8019c16 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8019bfa:	2100      	movs	r1, #0
 8019bfc:	6878      	ldr	r0, [r7, #4]
 8019bfe:	f7fd ff8d 	bl	8017b1c <inc_lock>
 8019c02:	4602      	mov	r2, r0
 8019c04:	693b      	ldr	r3, [r7, #16]
 8019c06:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8019c08:	693b      	ldr	r3, [r7, #16]
 8019c0a:	691b      	ldr	r3, [r3, #16]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d105      	bne.n	8019c1c <f_opendir+0xc6>
 8019c10:	2312      	movs	r3, #18
 8019c12:	75fb      	strb	r3, [r7, #23]
 8019c14:	e002      	b.n	8019c1c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8019c16:	693b      	ldr	r3, [r7, #16]
 8019c18:	2200      	movs	r2, #0
 8019c1a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8019c1c:	7dfb      	ldrb	r3, [r7, #23]
 8019c1e:	2b04      	cmp	r3, #4
 8019c20:	d101      	bne.n	8019c26 <f_opendir+0xd0>
 8019c22:	2305      	movs	r3, #5
 8019c24:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8019c26:	7dfb      	ldrb	r3, [r7, #23]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d002      	beq.n	8019c32 <f_opendir+0xdc>
 8019c2c:	693b      	ldr	r3, [r7, #16]
 8019c2e:	2200      	movs	r2, #0
 8019c30:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c34:	4618      	mov	r0, r3
 8019c36:	3718      	adds	r7, #24
 8019c38:	46bd      	mov	sp, r7
 8019c3a:	bd80      	pop	{r7, pc}

08019c3c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b084      	sub	sp, #16
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	f107 0208 	add.w	r2, r7, #8
 8019c4a:	4611      	mov	r1, r2
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f7ff fb2b 	bl	80192a8 <validate>
 8019c52:	4603      	mov	r3, r0
 8019c54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8019c56:	7bfb      	ldrb	r3, [r7, #15]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d110      	bne.n	8019c7e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	691b      	ldr	r3, [r3, #16]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d006      	beq.n	8019c72 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	691b      	ldr	r3, [r3, #16]
 8019c68:	4618      	mov	r0, r3
 8019c6a:	f7fd ffe5 	bl	8017c38 <dec_lock>
 8019c6e:	4603      	mov	r3, r0
 8019c70:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8019c72:	7bfb      	ldrb	r3, [r7, #15]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d102      	bne.n	8019c7e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8019c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c80:	4618      	mov	r0, r3
 8019c82:	3710      	adds	r7, #16
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd80      	pop	{r7, pc}

08019c88 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b084      	sub	sp, #16
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
 8019c90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	f107 0208 	add.w	r2, r7, #8
 8019c98:	4611      	mov	r1, r2
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7ff fb04 	bl	80192a8 <validate>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8019ca4:	7bfb      	ldrb	r3, [r7, #15]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d126      	bne.n	8019cf8 <f_readdir+0x70>
		if (!fno) {
 8019caa:	683b      	ldr	r3, [r7, #0]
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d106      	bne.n	8019cbe <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8019cb0:	2100      	movs	r1, #0
 8019cb2:	6878      	ldr	r0, [r7, #4]
 8019cb4:	f7fe fbe4 	bl	8018480 <dir_sdi>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	73fb      	strb	r3, [r7, #15]
 8019cbc:	e01c      	b.n	8019cf8 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8019cbe:	2100      	movs	r1, #0
 8019cc0:	6878      	ldr	r0, [r7, #4]
 8019cc2:	f7fe fda3 	bl	801880c <dir_read>
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8019cca:	7bfb      	ldrb	r3, [r7, #15]
 8019ccc:	2b04      	cmp	r3, #4
 8019cce:	d101      	bne.n	8019cd4 <f_readdir+0x4c>
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8019cd4:	7bfb      	ldrb	r3, [r7, #15]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d10e      	bne.n	8019cf8 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8019cda:	6839      	ldr	r1, [r7, #0]
 8019cdc:	6878      	ldr	r0, [r7, #4]
 8019cde:	f7fe fe97 	bl	8018a10 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8019ce2:	2100      	movs	r1, #0
 8019ce4:	6878      	ldr	r0, [r7, #4]
 8019ce6:	f7fe fc46 	bl	8018576 <dir_next>
 8019cea:	4603      	mov	r3, r0
 8019cec:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8019cee:	7bfb      	ldrb	r3, [r7, #15]
 8019cf0:	2b04      	cmp	r3, #4
 8019cf2:	d101      	bne.n	8019cf8 <f_readdir+0x70>
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8019cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	3710      	adds	r7, #16
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	bd80      	pop	{r7, pc}

08019d02 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8019d02:	b580      	push	{r7, lr}
 8019d04:	b090      	sub	sp, #64	; 0x40
 8019d06:	af00      	add	r7, sp, #0
 8019d08:	6078      	str	r0, [r7, #4]
 8019d0a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8019d0c:	f107 010c 	add.w	r1, r7, #12
 8019d10:	1d3b      	adds	r3, r7, #4
 8019d12:	2200      	movs	r2, #0
 8019d14:	4618      	mov	r0, r3
 8019d16:	f7ff f87b 	bl	8018e10 <find_volume>
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8019d20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d11f      	bne.n	8019d68 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019d28:	687a      	ldr	r2, [r7, #4]
 8019d2a:	f107 030c 	add.w	r3, r7, #12
 8019d2e:	4611      	mov	r1, r2
 8019d30:	4618      	mov	r0, r3
 8019d32:	f7fe ff61 	bl	8018bf8 <follow_path>
 8019d36:	4603      	mov	r3, r0
 8019d38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8019d3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d111      	bne.n	8019d68 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8019d44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019d48:	b25b      	sxtb	r3, r3
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	da03      	bge.n	8019d56 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8019d4e:	2306      	movs	r3, #6
 8019d50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8019d54:	e008      	b.n	8019d68 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d005      	beq.n	8019d68 <f_stat+0x66>
 8019d5c:	f107 030c 	add.w	r3, r7, #12
 8019d60:	6839      	ldr	r1, [r7, #0]
 8019d62:	4618      	mov	r0, r3
 8019d64:	f7fe fe54 	bl	8018a10 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8019d68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	3740      	adds	r7, #64	; 0x40
 8019d70:	46bd      	mov	sp, r7
 8019d72:	bd80      	pop	{r7, pc}

08019d74 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b09e      	sub	sp, #120	; 0x78
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8019d80:	f107 010c 	add.w	r1, r7, #12
 8019d84:	1d3b      	adds	r3, r7, #4
 8019d86:	2202      	movs	r2, #2
 8019d88:	4618      	mov	r0, r3
 8019d8a:	f7ff f841 	bl	8018e10 <find_volume>
 8019d8e:	4603      	mov	r3, r0
 8019d90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8019d98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	f040 808e 	bne.w	8019ebe <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8019da2:	687a      	ldr	r2, [r7, #4]
 8019da4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019da8:	4611      	mov	r1, r2
 8019daa:	4618      	mov	r0, r3
 8019dac:	f7fe ff24 	bl	8018bf8 <follow_path>
 8019db0:	4603      	mov	r3, r0
 8019db2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8019db6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d108      	bne.n	8019dd0 <f_unlink+0x5c>
 8019dbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019dc2:	2102      	movs	r1, #2
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	f7fd fe2b 	bl	8017a20 <chk_lock>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8019dd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d172      	bne.n	8019ebe <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8019dd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8019ddc:	b25b      	sxtb	r3, r3
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	da03      	bge.n	8019dea <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8019de2:	2306      	movs	r3, #6
 8019de4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8019de8:	e008      	b.n	8019dfc <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8019dea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019dee:	f003 0301 	and.w	r3, r3, #1
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d002      	beq.n	8019dfc <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8019df6:	2307      	movs	r3, #7
 8019df8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8019dfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d134      	bne.n	8019e6e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019e08:	4611      	mov	r1, r2
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	f7fe fcbf 	bl	801878e <ld_clust>
 8019e10:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8019e12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019e16:	f003 0310 	and.w	r3, r3, #16
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d027      	beq.n	8019e6e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8019e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e24:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8019e26:	f107 0310 	add.w	r3, r7, #16
 8019e2a:	2100      	movs	r1, #0
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7fe fb27 	bl	8018480 <dir_sdi>
 8019e32:	4603      	mov	r3, r0
 8019e34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8019e38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d116      	bne.n	8019e6e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8019e40:	f107 0310 	add.w	r3, r7, #16
 8019e44:	2100      	movs	r1, #0
 8019e46:	4618      	mov	r0, r3
 8019e48:	f7fe fce0 	bl	801880c <dir_read>
 8019e4c:	4603      	mov	r3, r0
 8019e4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8019e52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d102      	bne.n	8019e60 <f_unlink+0xec>
 8019e5a:	2307      	movs	r3, #7
 8019e5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8019e60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019e64:	2b04      	cmp	r3, #4
 8019e66:	d102      	bne.n	8019e6e <f_unlink+0xfa>
 8019e68:	2300      	movs	r3, #0
 8019e6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8019e6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d123      	bne.n	8019ebe <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8019e76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f7fe fdaa 	bl	80189d4 <dir_remove>
 8019e80:	4603      	mov	r3, r0
 8019e82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8019e86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d10c      	bne.n	8019ea8 <f_unlink+0x134>
 8019e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d009      	beq.n	8019ea8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8019e94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019e98:	2200      	movs	r2, #0
 8019e9a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f7fe f9be 	bl	801821e <remove_chain>
 8019ea2:	4603      	mov	r3, r0
 8019ea4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8019ea8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d106      	bne.n	8019ebe <f_unlink+0x14a>
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f7fd ff92 	bl	8017ddc <sync_fs>
 8019eb8:	4603      	mov	r3, r0
 8019eba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8019ebe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	3778      	adds	r7, #120	; 0x78
 8019ec6:	46bd      	mov	sp, r7
 8019ec8:	bd80      	pop	{r7, pc}
	...

08019ecc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019ecc:	b480      	push	{r7}
 8019ece:	b087      	sub	sp, #28
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	60f8      	str	r0, [r7, #12]
 8019ed4:	60b9      	str	r1, [r7, #8]
 8019ed6:	4613      	mov	r3, r2
 8019ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019eda:	2301      	movs	r3, #1
 8019edc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019ede:	2300      	movs	r3, #0
 8019ee0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8019ee2:	4b1f      	ldr	r3, [pc, #124]	; (8019f60 <FATFS_LinkDriverEx+0x94>)
 8019ee4:	7a5b      	ldrb	r3, [r3, #9]
 8019ee6:	b2db      	uxtb	r3, r3
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d131      	bne.n	8019f50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019eec:	4b1c      	ldr	r3, [pc, #112]	; (8019f60 <FATFS_LinkDriverEx+0x94>)
 8019eee:	7a5b      	ldrb	r3, [r3, #9]
 8019ef0:	b2db      	uxtb	r3, r3
 8019ef2:	461a      	mov	r2, r3
 8019ef4:	4b1a      	ldr	r3, [pc, #104]	; (8019f60 <FATFS_LinkDriverEx+0x94>)
 8019ef6:	2100      	movs	r1, #0
 8019ef8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019efa:	4b19      	ldr	r3, [pc, #100]	; (8019f60 <FATFS_LinkDriverEx+0x94>)
 8019efc:	7a5b      	ldrb	r3, [r3, #9]
 8019efe:	b2db      	uxtb	r3, r3
 8019f00:	4a17      	ldr	r2, [pc, #92]	; (8019f60 <FATFS_LinkDriverEx+0x94>)
 8019f02:	009b      	lsls	r3, r3, #2
 8019f04:	4413      	add	r3, r2
 8019f06:	68fa      	ldr	r2, [r7, #12]
 8019f08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019f0a:	4b15      	ldr	r3, [pc, #84]	; (8019f60 <FATFS_LinkDriverEx+0x94>)
 8019f0c:	7a5b      	ldrb	r3, [r3, #9]
 8019f0e:	b2db      	uxtb	r3, r3
 8019f10:	461a      	mov	r2, r3
 8019f12:	4b13      	ldr	r3, [pc, #76]	; (8019f60 <FATFS_LinkDriverEx+0x94>)
 8019f14:	4413      	add	r3, r2
 8019f16:	79fa      	ldrb	r2, [r7, #7]
 8019f18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8019f1a:	4b11      	ldr	r3, [pc, #68]	; (8019f60 <FATFS_LinkDriverEx+0x94>)
 8019f1c:	7a5b      	ldrb	r3, [r3, #9]
 8019f1e:	b2db      	uxtb	r3, r3
 8019f20:	1c5a      	adds	r2, r3, #1
 8019f22:	b2d1      	uxtb	r1, r2
 8019f24:	4a0e      	ldr	r2, [pc, #56]	; (8019f60 <FATFS_LinkDriverEx+0x94>)
 8019f26:	7251      	strb	r1, [r2, #9]
 8019f28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019f2a:	7dbb      	ldrb	r3, [r7, #22]
 8019f2c:	3330      	adds	r3, #48	; 0x30
 8019f2e:	b2da      	uxtb	r2, r3
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	3301      	adds	r3, #1
 8019f38:	223a      	movs	r2, #58	; 0x3a
 8019f3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019f3c:	68bb      	ldr	r3, [r7, #8]
 8019f3e:	3302      	adds	r3, #2
 8019f40:	222f      	movs	r2, #47	; 0x2f
 8019f42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019f44:	68bb      	ldr	r3, [r7, #8]
 8019f46:	3303      	adds	r3, #3
 8019f48:	2200      	movs	r2, #0
 8019f4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019f4c:	2300      	movs	r3, #0
 8019f4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8019f52:	4618      	mov	r0, r3
 8019f54:	371c      	adds	r7, #28
 8019f56:	46bd      	mov	sp, r7
 8019f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f5c:	4770      	bx	lr
 8019f5e:	bf00      	nop
 8019f60:	20000ffc 	.word	0x20000ffc

08019f64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b082      	sub	sp, #8
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	6078      	str	r0, [r7, #4]
 8019f6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019f6e:	2200      	movs	r2, #0
 8019f70:	6839      	ldr	r1, [r7, #0]
 8019f72:	6878      	ldr	r0, [r7, #4]
 8019f74:	f7ff ffaa 	bl	8019ecc <FATFS_LinkDriverEx>
 8019f78:	4603      	mov	r3, r0
}
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	3708      	adds	r7, #8
 8019f7e:	46bd      	mov	sp, r7
 8019f80:	bd80      	pop	{r7, pc}

08019f82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019f82:	b480      	push	{r7}
 8019f84:	b083      	sub	sp, #12
 8019f86:	af00      	add	r7, sp, #0
 8019f88:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	f103 0208 	add.w	r2, r3, #8
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	f04f 32ff 	mov.w	r2, #4294967295
 8019f9a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	f103 0208 	add.w	r2, r3, #8
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	f103 0208 	add.w	r2, r3, #8
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019fb6:	bf00      	nop
 8019fb8:	370c      	adds	r7, #12
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc0:	4770      	bx	lr

08019fc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019fc2:	b480      	push	{r7}
 8019fc4:	b083      	sub	sp, #12
 8019fc6:	af00      	add	r7, sp, #0
 8019fc8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	2200      	movs	r2, #0
 8019fce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019fd0:	bf00      	nop
 8019fd2:	370c      	adds	r7, #12
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fda:	4770      	bx	lr

08019fdc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019fdc:	b480      	push	{r7}
 8019fde:	b085      	sub	sp, #20
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	6078      	str	r0, [r7, #4]
 8019fe4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	685b      	ldr	r3, [r3, #4]
 8019fea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019fec:	683b      	ldr	r3, [r7, #0]
 8019fee:	68fa      	ldr	r2, [r7, #12]
 8019ff0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	689a      	ldr	r2, [r3, #8]
 8019ff6:	683b      	ldr	r3, [r7, #0]
 8019ff8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	689b      	ldr	r3, [r3, #8]
 8019ffe:	683a      	ldr	r2, [r7, #0]
 801a000:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	683a      	ldr	r2, [r7, #0]
 801a006:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801a008:	683b      	ldr	r3, [r7, #0]
 801a00a:	687a      	ldr	r2, [r7, #4]
 801a00c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	1c5a      	adds	r2, r3, #1
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	601a      	str	r2, [r3, #0]
}
 801a018:	bf00      	nop
 801a01a:	3714      	adds	r7, #20
 801a01c:	46bd      	mov	sp, r7
 801a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a022:	4770      	bx	lr

0801a024 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a024:	b480      	push	{r7}
 801a026:	b085      	sub	sp, #20
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a03a:	d103      	bne.n	801a044 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	691b      	ldr	r3, [r3, #16]
 801a040:	60fb      	str	r3, [r7, #12]
 801a042:	e00c      	b.n	801a05e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	3308      	adds	r3, #8
 801a048:	60fb      	str	r3, [r7, #12]
 801a04a:	e002      	b.n	801a052 <vListInsert+0x2e>
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	685b      	ldr	r3, [r3, #4]
 801a050:	60fb      	str	r3, [r7, #12]
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	685b      	ldr	r3, [r3, #4]
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	68ba      	ldr	r2, [r7, #8]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d2f6      	bcs.n	801a04c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	685a      	ldr	r2, [r3, #4]
 801a062:	683b      	ldr	r3, [r7, #0]
 801a064:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	683a      	ldr	r2, [r7, #0]
 801a06c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801a06e:	683b      	ldr	r3, [r7, #0]
 801a070:	68fa      	ldr	r2, [r7, #12]
 801a072:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	683a      	ldr	r2, [r7, #0]
 801a078:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	687a      	ldr	r2, [r7, #4]
 801a07e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	1c5a      	adds	r2, r3, #1
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	601a      	str	r2, [r3, #0]
}
 801a08a:	bf00      	nop
 801a08c:	3714      	adds	r7, #20
 801a08e:	46bd      	mov	sp, r7
 801a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a094:	4770      	bx	lr

0801a096 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801a096:	b480      	push	{r7}
 801a098:	b085      	sub	sp, #20
 801a09a:	af00      	add	r7, sp, #0
 801a09c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	691b      	ldr	r3, [r3, #16]
 801a0a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	685b      	ldr	r3, [r3, #4]
 801a0a8:	687a      	ldr	r2, [r7, #4]
 801a0aa:	6892      	ldr	r2, [r2, #8]
 801a0ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	689b      	ldr	r3, [r3, #8]
 801a0b2:	687a      	ldr	r2, [r7, #4]
 801a0b4:	6852      	ldr	r2, [r2, #4]
 801a0b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	685b      	ldr	r3, [r3, #4]
 801a0bc:	687a      	ldr	r2, [r7, #4]
 801a0be:	429a      	cmp	r2, r3
 801a0c0:	d103      	bne.n	801a0ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	689a      	ldr	r2, [r3, #8]
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	1e5a      	subs	r2, r3, #1
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	681b      	ldr	r3, [r3, #0]
}
 801a0de:	4618      	mov	r0, r3
 801a0e0:	3714      	adds	r7, #20
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e8:	4770      	bx	lr

0801a0ea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a0ea:	b580      	push	{r7, lr}
 801a0ec:	b08e      	sub	sp, #56	; 0x38
 801a0ee:	af04      	add	r7, sp, #16
 801a0f0:	60f8      	str	r0, [r7, #12]
 801a0f2:	60b9      	str	r1, [r7, #8]
 801a0f4:	607a      	str	r2, [r7, #4]
 801a0f6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d10a      	bne.n	801a114 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a102:	f383 8811 	msr	BASEPRI, r3
 801a106:	f3bf 8f6f 	isb	sy
 801a10a:	f3bf 8f4f 	dsb	sy
 801a10e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801a110:	bf00      	nop
 801a112:	e7fe      	b.n	801a112 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a116:	2b00      	cmp	r3, #0
 801a118:	d10a      	bne.n	801a130 <xTaskCreateStatic+0x46>
	__asm volatile
 801a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a11e:	f383 8811 	msr	BASEPRI, r3
 801a122:	f3bf 8f6f 	isb	sy
 801a126:	f3bf 8f4f 	dsb	sy
 801a12a:	61fb      	str	r3, [r7, #28]
}
 801a12c:	bf00      	nop
 801a12e:	e7fe      	b.n	801a12e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a130:	2354      	movs	r3, #84	; 0x54
 801a132:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a134:	693b      	ldr	r3, [r7, #16]
 801a136:	2b54      	cmp	r3, #84	; 0x54
 801a138:	d00a      	beq.n	801a150 <xTaskCreateStatic+0x66>
	__asm volatile
 801a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a13e:	f383 8811 	msr	BASEPRI, r3
 801a142:	f3bf 8f6f 	isb	sy
 801a146:	f3bf 8f4f 	dsb	sy
 801a14a:	61bb      	str	r3, [r7, #24]
}
 801a14c:	bf00      	nop
 801a14e:	e7fe      	b.n	801a14e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a150:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a154:	2b00      	cmp	r3, #0
 801a156:	d01e      	beq.n	801a196 <xTaskCreateStatic+0xac>
 801a158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d01b      	beq.n	801a196 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a160:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a166:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a16a:	2202      	movs	r2, #2
 801a16c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a170:	2300      	movs	r3, #0
 801a172:	9303      	str	r3, [sp, #12]
 801a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a176:	9302      	str	r3, [sp, #8]
 801a178:	f107 0314 	add.w	r3, r7, #20
 801a17c:	9301      	str	r3, [sp, #4]
 801a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a180:	9300      	str	r3, [sp, #0]
 801a182:	683b      	ldr	r3, [r7, #0]
 801a184:	687a      	ldr	r2, [r7, #4]
 801a186:	68b9      	ldr	r1, [r7, #8]
 801a188:	68f8      	ldr	r0, [r7, #12]
 801a18a:	f000 f850 	bl	801a22e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a18e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a190:	f000 f8d4 	bl	801a33c <prvAddNewTaskToReadyList>
 801a194:	e001      	b.n	801a19a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801a196:	2300      	movs	r3, #0
 801a198:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a19a:	697b      	ldr	r3, [r7, #20]
	}
 801a19c:	4618      	mov	r0, r3
 801a19e:	3728      	adds	r7, #40	; 0x28
 801a1a0:	46bd      	mov	sp, r7
 801a1a2:	bd80      	pop	{r7, pc}

0801a1a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	b08c      	sub	sp, #48	; 0x30
 801a1a8:	af04      	add	r7, sp, #16
 801a1aa:	60f8      	str	r0, [r7, #12]
 801a1ac:	60b9      	str	r1, [r7, #8]
 801a1ae:	603b      	str	r3, [r7, #0]
 801a1b0:	4613      	mov	r3, r2
 801a1b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a1b4:	88fb      	ldrh	r3, [r7, #6]
 801a1b6:	009b      	lsls	r3, r3, #2
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	f001 f895 	bl	801b2e8 <pvPortMalloc>
 801a1be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a1c0:	697b      	ldr	r3, [r7, #20]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d00e      	beq.n	801a1e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a1c6:	2054      	movs	r0, #84	; 0x54
 801a1c8:	f001 f88e 	bl	801b2e8 <pvPortMalloc>
 801a1cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a1ce:	69fb      	ldr	r3, [r7, #28]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d003      	beq.n	801a1dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a1d4:	69fb      	ldr	r3, [r7, #28]
 801a1d6:	697a      	ldr	r2, [r7, #20]
 801a1d8:	631a      	str	r2, [r3, #48]	; 0x30
 801a1da:	e005      	b.n	801a1e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a1dc:	6978      	ldr	r0, [r7, #20]
 801a1de:	f001 f94f 	bl	801b480 <vPortFree>
 801a1e2:	e001      	b.n	801a1e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a1e8:	69fb      	ldr	r3, [r7, #28]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d017      	beq.n	801a21e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a1ee:	69fb      	ldr	r3, [r7, #28]
 801a1f0:	2200      	movs	r2, #0
 801a1f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a1f6:	88fa      	ldrh	r2, [r7, #6]
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	9303      	str	r3, [sp, #12]
 801a1fc:	69fb      	ldr	r3, [r7, #28]
 801a1fe:	9302      	str	r3, [sp, #8]
 801a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a202:	9301      	str	r3, [sp, #4]
 801a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a206:	9300      	str	r3, [sp, #0]
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	68b9      	ldr	r1, [r7, #8]
 801a20c:	68f8      	ldr	r0, [r7, #12]
 801a20e:	f000 f80e 	bl	801a22e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a212:	69f8      	ldr	r0, [r7, #28]
 801a214:	f000 f892 	bl	801a33c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a218:	2301      	movs	r3, #1
 801a21a:	61bb      	str	r3, [r7, #24]
 801a21c:	e002      	b.n	801a224 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a21e:	f04f 33ff 	mov.w	r3, #4294967295
 801a222:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a224:	69bb      	ldr	r3, [r7, #24]
	}
 801a226:	4618      	mov	r0, r3
 801a228:	3720      	adds	r7, #32
 801a22a:	46bd      	mov	sp, r7
 801a22c:	bd80      	pop	{r7, pc}

0801a22e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a22e:	b580      	push	{r7, lr}
 801a230:	b088      	sub	sp, #32
 801a232:	af00      	add	r7, sp, #0
 801a234:	60f8      	str	r0, [r7, #12]
 801a236:	60b9      	str	r1, [r7, #8]
 801a238:	607a      	str	r2, [r7, #4]
 801a23a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a23e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a246:	3b01      	subs	r3, #1
 801a248:	009b      	lsls	r3, r3, #2
 801a24a:	4413      	add	r3, r2
 801a24c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a24e:	69bb      	ldr	r3, [r7, #24]
 801a250:	f023 0307 	bic.w	r3, r3, #7
 801a254:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a256:	69bb      	ldr	r3, [r7, #24]
 801a258:	f003 0307 	and.w	r3, r3, #7
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d00a      	beq.n	801a276 <prvInitialiseNewTask+0x48>
	__asm volatile
 801a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a264:	f383 8811 	msr	BASEPRI, r3
 801a268:	f3bf 8f6f 	isb	sy
 801a26c:	f3bf 8f4f 	dsb	sy
 801a270:	617b      	str	r3, [r7, #20]
}
 801a272:	bf00      	nop
 801a274:	e7fe      	b.n	801a274 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a276:	68bb      	ldr	r3, [r7, #8]
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d01f      	beq.n	801a2bc <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a27c:	2300      	movs	r3, #0
 801a27e:	61fb      	str	r3, [r7, #28]
 801a280:	e012      	b.n	801a2a8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a282:	68ba      	ldr	r2, [r7, #8]
 801a284:	69fb      	ldr	r3, [r7, #28]
 801a286:	4413      	add	r3, r2
 801a288:	7819      	ldrb	r1, [r3, #0]
 801a28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a28c:	69fb      	ldr	r3, [r7, #28]
 801a28e:	4413      	add	r3, r2
 801a290:	3334      	adds	r3, #52	; 0x34
 801a292:	460a      	mov	r2, r1
 801a294:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a296:	68ba      	ldr	r2, [r7, #8]
 801a298:	69fb      	ldr	r3, [r7, #28]
 801a29a:	4413      	add	r3, r2
 801a29c:	781b      	ldrb	r3, [r3, #0]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d006      	beq.n	801a2b0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a2a2:	69fb      	ldr	r3, [r7, #28]
 801a2a4:	3301      	adds	r3, #1
 801a2a6:	61fb      	str	r3, [r7, #28]
 801a2a8:	69fb      	ldr	r3, [r7, #28]
 801a2aa:	2b0f      	cmp	r3, #15
 801a2ac:	d9e9      	bls.n	801a282 <prvInitialiseNewTask+0x54>
 801a2ae:	e000      	b.n	801a2b2 <prvInitialiseNewTask+0x84>
			{
				break;
 801a2b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b4:	2200      	movs	r2, #0
 801a2b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a2ba:	e003      	b.n	801a2c4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2be:	2200      	movs	r2, #0
 801a2c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2c6:	2b06      	cmp	r3, #6
 801a2c8:	d901      	bls.n	801a2ce <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a2ca:	2306      	movs	r3, #6
 801a2cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a2d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a2d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2dc:	2200      	movs	r2, #0
 801a2de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2e2:	3304      	adds	r3, #4
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	f7ff fe6c 	bl	8019fc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2ec:	3318      	adds	r3, #24
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f7ff fe67 	bl	8019fc2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a2f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2fc:	f1c3 0207 	rsb	r2, r3, #7
 801a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a302:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a308:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a30c:	2200      	movs	r2, #0
 801a30e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a312:	2200      	movs	r2, #0
 801a314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a318:	683a      	ldr	r2, [r7, #0]
 801a31a:	68f9      	ldr	r1, [r7, #12]
 801a31c:	69b8      	ldr	r0, [r7, #24]
 801a31e:	f000 fd93 	bl	801ae48 <pxPortInitialiseStack>
 801a322:	4602      	mov	r2, r0
 801a324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a326:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d002      	beq.n	801a334 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a332:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a334:	bf00      	nop
 801a336:	3720      	adds	r7, #32
 801a338:	46bd      	mov	sp, r7
 801a33a:	bd80      	pop	{r7, pc}

0801a33c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a344:	f000 feae 	bl	801b0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a348:	4b2a      	ldr	r3, [pc, #168]	; (801a3f4 <prvAddNewTaskToReadyList+0xb8>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	3301      	adds	r3, #1
 801a34e:	4a29      	ldr	r2, [pc, #164]	; (801a3f4 <prvAddNewTaskToReadyList+0xb8>)
 801a350:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a352:	4b29      	ldr	r3, [pc, #164]	; (801a3f8 <prvAddNewTaskToReadyList+0xbc>)
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d109      	bne.n	801a36e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a35a:	4a27      	ldr	r2, [pc, #156]	; (801a3f8 <prvAddNewTaskToReadyList+0xbc>)
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a360:	4b24      	ldr	r3, [pc, #144]	; (801a3f4 <prvAddNewTaskToReadyList+0xb8>)
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	2b01      	cmp	r3, #1
 801a366:	d110      	bne.n	801a38a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a368:	f000 fb16 	bl	801a998 <prvInitialiseTaskLists>
 801a36c:	e00d      	b.n	801a38a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a36e:	4b23      	ldr	r3, [pc, #140]	; (801a3fc <prvAddNewTaskToReadyList+0xc0>)
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	2b00      	cmp	r3, #0
 801a374:	d109      	bne.n	801a38a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a376:	4b20      	ldr	r3, [pc, #128]	; (801a3f8 <prvAddNewTaskToReadyList+0xbc>)
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a380:	429a      	cmp	r2, r3
 801a382:	d802      	bhi.n	801a38a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a384:	4a1c      	ldr	r2, [pc, #112]	; (801a3f8 <prvAddNewTaskToReadyList+0xbc>)
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a38a:	4b1d      	ldr	r3, [pc, #116]	; (801a400 <prvAddNewTaskToReadyList+0xc4>)
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	3301      	adds	r3, #1
 801a390:	4a1b      	ldr	r2, [pc, #108]	; (801a400 <prvAddNewTaskToReadyList+0xc4>)
 801a392:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a398:	2201      	movs	r2, #1
 801a39a:	409a      	lsls	r2, r3
 801a39c:	4b19      	ldr	r3, [pc, #100]	; (801a404 <prvAddNewTaskToReadyList+0xc8>)
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	4313      	orrs	r3, r2
 801a3a2:	4a18      	ldr	r2, [pc, #96]	; (801a404 <prvAddNewTaskToReadyList+0xc8>)
 801a3a4:	6013      	str	r3, [r2, #0]
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3aa:	4613      	mov	r3, r2
 801a3ac:	009b      	lsls	r3, r3, #2
 801a3ae:	4413      	add	r3, r2
 801a3b0:	009b      	lsls	r3, r3, #2
 801a3b2:	4a15      	ldr	r2, [pc, #84]	; (801a408 <prvAddNewTaskToReadyList+0xcc>)
 801a3b4:	441a      	add	r2, r3
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	3304      	adds	r3, #4
 801a3ba:	4619      	mov	r1, r3
 801a3bc:	4610      	mov	r0, r2
 801a3be:	f7ff fe0d 	bl	8019fdc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a3c2:	f000 fe9f 	bl	801b104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a3c6:	4b0d      	ldr	r3, [pc, #52]	; (801a3fc <prvAddNewTaskToReadyList+0xc0>)
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d00e      	beq.n	801a3ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a3ce:	4b0a      	ldr	r3, [pc, #40]	; (801a3f8 <prvAddNewTaskToReadyList+0xbc>)
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3d8:	429a      	cmp	r2, r3
 801a3da:	d207      	bcs.n	801a3ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a3dc:	4b0b      	ldr	r3, [pc, #44]	; (801a40c <prvAddNewTaskToReadyList+0xd0>)
 801a3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a3e2:	601a      	str	r2, [r3, #0]
 801a3e4:	f3bf 8f4f 	dsb	sy
 801a3e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a3ec:	bf00      	nop
 801a3ee:	3708      	adds	r7, #8
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	bd80      	pop	{r7, pc}
 801a3f4:	20001108 	.word	0x20001108
 801a3f8:	20001008 	.word	0x20001008
 801a3fc:	20001114 	.word	0x20001114
 801a400:	20001124 	.word	0x20001124
 801a404:	20001110 	.word	0x20001110
 801a408:	2000100c 	.word	0x2000100c
 801a40c:	e000ed04 	.word	0xe000ed04

0801a410 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801a410:	b580      	push	{r7, lr}
 801a412:	b08a      	sub	sp, #40	; 0x28
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
 801a418:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801a41a:	2300      	movs	r3, #0
 801a41c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d10a      	bne.n	801a43a <vTaskDelayUntil+0x2a>
	__asm volatile
 801a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a428:	f383 8811 	msr	BASEPRI, r3
 801a42c:	f3bf 8f6f 	isb	sy
 801a430:	f3bf 8f4f 	dsb	sy
 801a434:	617b      	str	r3, [r7, #20]
}
 801a436:	bf00      	nop
 801a438:	e7fe      	b.n	801a438 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801a43a:	683b      	ldr	r3, [r7, #0]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d10a      	bne.n	801a456 <vTaskDelayUntil+0x46>
	__asm volatile
 801a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a444:	f383 8811 	msr	BASEPRI, r3
 801a448:	f3bf 8f6f 	isb	sy
 801a44c:	f3bf 8f4f 	dsb	sy
 801a450:	613b      	str	r3, [r7, #16]
}
 801a452:	bf00      	nop
 801a454:	e7fe      	b.n	801a454 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801a456:	4b2a      	ldr	r3, [pc, #168]	; (801a500 <vTaskDelayUntil+0xf0>)
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d00a      	beq.n	801a474 <vTaskDelayUntil+0x64>
	__asm volatile
 801a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a462:	f383 8811 	msr	BASEPRI, r3
 801a466:	f3bf 8f6f 	isb	sy
 801a46a:	f3bf 8f4f 	dsb	sy
 801a46e:	60fb      	str	r3, [r7, #12]
}
 801a470:	bf00      	nop
 801a472:	e7fe      	b.n	801a472 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 801a474:	f000 f8aa 	bl	801a5cc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801a478:	4b22      	ldr	r3, [pc, #136]	; (801a504 <vTaskDelayUntil+0xf4>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	683a      	ldr	r2, [r7, #0]
 801a484:	4413      	add	r3, r2
 801a486:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	6a3a      	ldr	r2, [r7, #32]
 801a48e:	429a      	cmp	r2, r3
 801a490:	d20b      	bcs.n	801a4aa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	69fa      	ldr	r2, [r7, #28]
 801a498:	429a      	cmp	r2, r3
 801a49a:	d211      	bcs.n	801a4c0 <vTaskDelayUntil+0xb0>
 801a49c:	69fa      	ldr	r2, [r7, #28]
 801a49e:	6a3b      	ldr	r3, [r7, #32]
 801a4a0:	429a      	cmp	r2, r3
 801a4a2:	d90d      	bls.n	801a4c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	627b      	str	r3, [r7, #36]	; 0x24
 801a4a8:	e00a      	b.n	801a4c0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	69fa      	ldr	r2, [r7, #28]
 801a4b0:	429a      	cmp	r2, r3
 801a4b2:	d303      	bcc.n	801a4bc <vTaskDelayUntil+0xac>
 801a4b4:	69fa      	ldr	r2, [r7, #28]
 801a4b6:	6a3b      	ldr	r3, [r7, #32]
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	d901      	bls.n	801a4c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801a4bc:	2301      	movs	r3, #1
 801a4be:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	69fa      	ldr	r2, [r7, #28]
 801a4c4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d006      	beq.n	801a4da <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801a4cc:	69fa      	ldr	r2, [r7, #28]
 801a4ce:	6a3b      	ldr	r3, [r7, #32]
 801a4d0:	1ad3      	subs	r3, r2, r3
 801a4d2:	2100      	movs	r1, #0
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	f000 fc51 	bl	801ad7c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801a4da:	f000 f885 	bl	801a5e8 <xTaskResumeAll>
 801a4de:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a4e0:	69bb      	ldr	r3, [r7, #24]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d107      	bne.n	801a4f6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801a4e6:	4b08      	ldr	r3, [pc, #32]	; (801a508 <vTaskDelayUntil+0xf8>)
 801a4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a4ec:	601a      	str	r2, [r3, #0]
 801a4ee:	f3bf 8f4f 	dsb	sy
 801a4f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a4f6:	bf00      	nop
 801a4f8:	3728      	adds	r7, #40	; 0x28
 801a4fa:	46bd      	mov	sp, r7
 801a4fc:	bd80      	pop	{r7, pc}
 801a4fe:	bf00      	nop
 801a500:	20001130 	.word	0x20001130
 801a504:	2000110c 	.word	0x2000110c
 801a508:	e000ed04 	.word	0xe000ed04

0801a50c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b08a      	sub	sp, #40	; 0x28
 801a510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a512:	2300      	movs	r3, #0
 801a514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a516:	2300      	movs	r3, #0
 801a518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a51a:	463a      	mov	r2, r7
 801a51c:	1d39      	adds	r1, r7, #4
 801a51e:	f107 0308 	add.w	r3, r7, #8
 801a522:	4618      	mov	r0, r3
 801a524:	f7e7 fac4 	bl	8001ab0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a528:	6839      	ldr	r1, [r7, #0]
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	68ba      	ldr	r2, [r7, #8]
 801a52e:	9202      	str	r2, [sp, #8]
 801a530:	9301      	str	r3, [sp, #4]
 801a532:	2300      	movs	r3, #0
 801a534:	9300      	str	r3, [sp, #0]
 801a536:	2300      	movs	r3, #0
 801a538:	460a      	mov	r2, r1
 801a53a:	491e      	ldr	r1, [pc, #120]	; (801a5b4 <vTaskStartScheduler+0xa8>)
 801a53c:	481e      	ldr	r0, [pc, #120]	; (801a5b8 <vTaskStartScheduler+0xac>)
 801a53e:	f7ff fdd4 	bl	801a0ea <xTaskCreateStatic>
 801a542:	4603      	mov	r3, r0
 801a544:	4a1d      	ldr	r2, [pc, #116]	; (801a5bc <vTaskStartScheduler+0xb0>)
 801a546:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801a548:	4b1c      	ldr	r3, [pc, #112]	; (801a5bc <vTaskStartScheduler+0xb0>)
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d002      	beq.n	801a556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801a550:	2301      	movs	r3, #1
 801a552:	617b      	str	r3, [r7, #20]
 801a554:	e001      	b.n	801a55a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801a556:	2300      	movs	r3, #0
 801a558:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a55a:	697b      	ldr	r3, [r7, #20]
 801a55c:	2b01      	cmp	r3, #1
 801a55e:	d116      	bne.n	801a58e <vTaskStartScheduler+0x82>
	__asm volatile
 801a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a564:	f383 8811 	msr	BASEPRI, r3
 801a568:	f3bf 8f6f 	isb	sy
 801a56c:	f3bf 8f4f 	dsb	sy
 801a570:	613b      	str	r3, [r7, #16]
}
 801a572:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a574:	4b12      	ldr	r3, [pc, #72]	; (801a5c0 <vTaskStartScheduler+0xb4>)
 801a576:	f04f 32ff 	mov.w	r2, #4294967295
 801a57a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a57c:	4b11      	ldr	r3, [pc, #68]	; (801a5c4 <vTaskStartScheduler+0xb8>)
 801a57e:	2201      	movs	r2, #1
 801a580:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a582:	4b11      	ldr	r3, [pc, #68]	; (801a5c8 <vTaskStartScheduler+0xbc>)
 801a584:	2200      	movs	r2, #0
 801a586:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a588:	f000 fcea 	bl	801af60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a58c:	e00e      	b.n	801a5ac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a58e:	697b      	ldr	r3, [r7, #20]
 801a590:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a594:	d10a      	bne.n	801a5ac <vTaskStartScheduler+0xa0>
	__asm volatile
 801a596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a59a:	f383 8811 	msr	BASEPRI, r3
 801a59e:	f3bf 8f6f 	isb	sy
 801a5a2:	f3bf 8f4f 	dsb	sy
 801a5a6:	60fb      	str	r3, [r7, #12]
}
 801a5a8:	bf00      	nop
 801a5aa:	e7fe      	b.n	801a5aa <vTaskStartScheduler+0x9e>
}
 801a5ac:	bf00      	nop
 801a5ae:	3718      	adds	r7, #24
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bd80      	pop	{r7, pc}
 801a5b4:	0801e4e8 	.word	0x0801e4e8
 801a5b8:	0801a969 	.word	0x0801a969
 801a5bc:	2000112c 	.word	0x2000112c
 801a5c0:	20001128 	.word	0x20001128
 801a5c4:	20001114 	.word	0x20001114
 801a5c8:	2000110c 	.word	0x2000110c

0801a5cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a5cc:	b480      	push	{r7}
 801a5ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801a5d0:	4b04      	ldr	r3, [pc, #16]	; (801a5e4 <vTaskSuspendAll+0x18>)
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	3301      	adds	r3, #1
 801a5d6:	4a03      	ldr	r2, [pc, #12]	; (801a5e4 <vTaskSuspendAll+0x18>)
 801a5d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801a5da:	bf00      	nop
 801a5dc:	46bd      	mov	sp, r7
 801a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e2:	4770      	bx	lr
 801a5e4:	20001130 	.word	0x20001130

0801a5e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a5e8:	b580      	push	{r7, lr}
 801a5ea:	b084      	sub	sp, #16
 801a5ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a5f2:	2300      	movs	r3, #0
 801a5f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a5f6:	4b41      	ldr	r3, [pc, #260]	; (801a6fc <xTaskResumeAll+0x114>)
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d10a      	bne.n	801a614 <xTaskResumeAll+0x2c>
	__asm volatile
 801a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a602:	f383 8811 	msr	BASEPRI, r3
 801a606:	f3bf 8f6f 	isb	sy
 801a60a:	f3bf 8f4f 	dsb	sy
 801a60e:	603b      	str	r3, [r7, #0]
}
 801a610:	bf00      	nop
 801a612:	e7fe      	b.n	801a612 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a614:	f000 fd46 	bl	801b0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a618:	4b38      	ldr	r3, [pc, #224]	; (801a6fc <xTaskResumeAll+0x114>)
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	3b01      	subs	r3, #1
 801a61e:	4a37      	ldr	r2, [pc, #220]	; (801a6fc <xTaskResumeAll+0x114>)
 801a620:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a622:	4b36      	ldr	r3, [pc, #216]	; (801a6fc <xTaskResumeAll+0x114>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d161      	bne.n	801a6ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a62a:	4b35      	ldr	r3, [pc, #212]	; (801a700 <xTaskResumeAll+0x118>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d05d      	beq.n	801a6ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a632:	e02e      	b.n	801a692 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a634:	4b33      	ldr	r3, [pc, #204]	; (801a704 <xTaskResumeAll+0x11c>)
 801a636:	68db      	ldr	r3, [r3, #12]
 801a638:	68db      	ldr	r3, [r3, #12]
 801a63a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	3318      	adds	r3, #24
 801a640:	4618      	mov	r0, r3
 801a642:	f7ff fd28 	bl	801a096 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	3304      	adds	r3, #4
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7ff fd23 	bl	801a096 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a654:	2201      	movs	r2, #1
 801a656:	409a      	lsls	r2, r3
 801a658:	4b2b      	ldr	r3, [pc, #172]	; (801a708 <xTaskResumeAll+0x120>)
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	4313      	orrs	r3, r2
 801a65e:	4a2a      	ldr	r2, [pc, #168]	; (801a708 <xTaskResumeAll+0x120>)
 801a660:	6013      	str	r3, [r2, #0]
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a666:	4613      	mov	r3, r2
 801a668:	009b      	lsls	r3, r3, #2
 801a66a:	4413      	add	r3, r2
 801a66c:	009b      	lsls	r3, r3, #2
 801a66e:	4a27      	ldr	r2, [pc, #156]	; (801a70c <xTaskResumeAll+0x124>)
 801a670:	441a      	add	r2, r3
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	3304      	adds	r3, #4
 801a676:	4619      	mov	r1, r3
 801a678:	4610      	mov	r0, r2
 801a67a:	f7ff fcaf 	bl	8019fdc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a682:	4b23      	ldr	r3, [pc, #140]	; (801a710 <xTaskResumeAll+0x128>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a688:	429a      	cmp	r2, r3
 801a68a:	d302      	bcc.n	801a692 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801a68c:	4b21      	ldr	r3, [pc, #132]	; (801a714 <xTaskResumeAll+0x12c>)
 801a68e:	2201      	movs	r2, #1
 801a690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a692:	4b1c      	ldr	r3, [pc, #112]	; (801a704 <xTaskResumeAll+0x11c>)
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d1cc      	bne.n	801a634 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d001      	beq.n	801a6a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a6a0:	f000 fa18 	bl	801aad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a6a4:	4b1c      	ldr	r3, [pc, #112]	; (801a718 <xTaskResumeAll+0x130>)
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d010      	beq.n	801a6d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a6b0:	f000 f846 	bl	801a740 <xTaskIncrementTick>
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d002      	beq.n	801a6c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801a6ba:	4b16      	ldr	r3, [pc, #88]	; (801a714 <xTaskResumeAll+0x12c>)
 801a6bc:	2201      	movs	r2, #1
 801a6be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	3b01      	subs	r3, #1
 801a6c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d1f1      	bne.n	801a6b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801a6cc:	4b12      	ldr	r3, [pc, #72]	; (801a718 <xTaskResumeAll+0x130>)
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a6d2:	4b10      	ldr	r3, [pc, #64]	; (801a714 <xTaskResumeAll+0x12c>)
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d009      	beq.n	801a6ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a6da:	2301      	movs	r3, #1
 801a6dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a6de:	4b0f      	ldr	r3, [pc, #60]	; (801a71c <xTaskResumeAll+0x134>)
 801a6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a6e4:	601a      	str	r2, [r3, #0]
 801a6e6:	f3bf 8f4f 	dsb	sy
 801a6ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a6ee:	f000 fd09 	bl	801b104 <vPortExitCritical>

	return xAlreadyYielded;
 801a6f2:	68bb      	ldr	r3, [r7, #8]
}
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	3710      	adds	r7, #16
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	bd80      	pop	{r7, pc}
 801a6fc:	20001130 	.word	0x20001130
 801a700:	20001108 	.word	0x20001108
 801a704:	200010c8 	.word	0x200010c8
 801a708:	20001110 	.word	0x20001110
 801a70c:	2000100c 	.word	0x2000100c
 801a710:	20001008 	.word	0x20001008
 801a714:	2000111c 	.word	0x2000111c
 801a718:	20001118 	.word	0x20001118
 801a71c:	e000ed04 	.word	0xe000ed04

0801a720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a720:	b480      	push	{r7}
 801a722:	b083      	sub	sp, #12
 801a724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a726:	4b05      	ldr	r3, [pc, #20]	; (801a73c <xTaskGetTickCount+0x1c>)
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a72c:	687b      	ldr	r3, [r7, #4]
}
 801a72e:	4618      	mov	r0, r3
 801a730:	370c      	adds	r7, #12
 801a732:	46bd      	mov	sp, r7
 801a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a738:	4770      	bx	lr
 801a73a:	bf00      	nop
 801a73c:	2000110c 	.word	0x2000110c

0801a740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a740:	b580      	push	{r7, lr}
 801a742:	b086      	sub	sp, #24
 801a744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a746:	2300      	movs	r3, #0
 801a748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a74a:	4b4e      	ldr	r3, [pc, #312]	; (801a884 <xTaskIncrementTick+0x144>)
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	f040 808e 	bne.w	801a870 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a754:	4b4c      	ldr	r3, [pc, #304]	; (801a888 <xTaskIncrementTick+0x148>)
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	3301      	adds	r3, #1
 801a75a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a75c:	4a4a      	ldr	r2, [pc, #296]	; (801a888 <xTaskIncrementTick+0x148>)
 801a75e:	693b      	ldr	r3, [r7, #16]
 801a760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a762:	693b      	ldr	r3, [r7, #16]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d120      	bne.n	801a7aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a768:	4b48      	ldr	r3, [pc, #288]	; (801a88c <xTaskIncrementTick+0x14c>)
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d00a      	beq.n	801a788 <xTaskIncrementTick+0x48>
	__asm volatile
 801a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a776:	f383 8811 	msr	BASEPRI, r3
 801a77a:	f3bf 8f6f 	isb	sy
 801a77e:	f3bf 8f4f 	dsb	sy
 801a782:	603b      	str	r3, [r7, #0]
}
 801a784:	bf00      	nop
 801a786:	e7fe      	b.n	801a786 <xTaskIncrementTick+0x46>
 801a788:	4b40      	ldr	r3, [pc, #256]	; (801a88c <xTaskIncrementTick+0x14c>)
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	60fb      	str	r3, [r7, #12]
 801a78e:	4b40      	ldr	r3, [pc, #256]	; (801a890 <xTaskIncrementTick+0x150>)
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	4a3e      	ldr	r2, [pc, #248]	; (801a88c <xTaskIncrementTick+0x14c>)
 801a794:	6013      	str	r3, [r2, #0]
 801a796:	4a3e      	ldr	r2, [pc, #248]	; (801a890 <xTaskIncrementTick+0x150>)
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	6013      	str	r3, [r2, #0]
 801a79c:	4b3d      	ldr	r3, [pc, #244]	; (801a894 <xTaskIncrementTick+0x154>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	3301      	adds	r3, #1
 801a7a2:	4a3c      	ldr	r2, [pc, #240]	; (801a894 <xTaskIncrementTick+0x154>)
 801a7a4:	6013      	str	r3, [r2, #0]
 801a7a6:	f000 f995 	bl	801aad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a7aa:	4b3b      	ldr	r3, [pc, #236]	; (801a898 <xTaskIncrementTick+0x158>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	693a      	ldr	r2, [r7, #16]
 801a7b0:	429a      	cmp	r2, r3
 801a7b2:	d348      	bcc.n	801a846 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a7b4:	4b35      	ldr	r3, [pc, #212]	; (801a88c <xTaskIncrementTick+0x14c>)
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d104      	bne.n	801a7c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a7be:	4b36      	ldr	r3, [pc, #216]	; (801a898 <xTaskIncrementTick+0x158>)
 801a7c0:	f04f 32ff 	mov.w	r2, #4294967295
 801a7c4:	601a      	str	r2, [r3, #0]
					break;
 801a7c6:	e03e      	b.n	801a846 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a7c8:	4b30      	ldr	r3, [pc, #192]	; (801a88c <xTaskIncrementTick+0x14c>)
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	68db      	ldr	r3, [r3, #12]
 801a7ce:	68db      	ldr	r3, [r3, #12]
 801a7d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a7d2:	68bb      	ldr	r3, [r7, #8]
 801a7d4:	685b      	ldr	r3, [r3, #4]
 801a7d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a7d8:	693a      	ldr	r2, [r7, #16]
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	429a      	cmp	r2, r3
 801a7de:	d203      	bcs.n	801a7e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a7e0:	4a2d      	ldr	r2, [pc, #180]	; (801a898 <xTaskIncrementTick+0x158>)
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a7e6:	e02e      	b.n	801a846 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a7e8:	68bb      	ldr	r3, [r7, #8]
 801a7ea:	3304      	adds	r3, #4
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	f7ff fc52 	bl	801a096 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a7f2:	68bb      	ldr	r3, [r7, #8]
 801a7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d004      	beq.n	801a804 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a7fa:	68bb      	ldr	r3, [r7, #8]
 801a7fc:	3318      	adds	r3, #24
 801a7fe:	4618      	mov	r0, r3
 801a800:	f7ff fc49 	bl	801a096 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a808:	2201      	movs	r2, #1
 801a80a:	409a      	lsls	r2, r3
 801a80c:	4b23      	ldr	r3, [pc, #140]	; (801a89c <xTaskIncrementTick+0x15c>)
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	4313      	orrs	r3, r2
 801a812:	4a22      	ldr	r2, [pc, #136]	; (801a89c <xTaskIncrementTick+0x15c>)
 801a814:	6013      	str	r3, [r2, #0]
 801a816:	68bb      	ldr	r3, [r7, #8]
 801a818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a81a:	4613      	mov	r3, r2
 801a81c:	009b      	lsls	r3, r3, #2
 801a81e:	4413      	add	r3, r2
 801a820:	009b      	lsls	r3, r3, #2
 801a822:	4a1f      	ldr	r2, [pc, #124]	; (801a8a0 <xTaskIncrementTick+0x160>)
 801a824:	441a      	add	r2, r3
 801a826:	68bb      	ldr	r3, [r7, #8]
 801a828:	3304      	adds	r3, #4
 801a82a:	4619      	mov	r1, r3
 801a82c:	4610      	mov	r0, r2
 801a82e:	f7ff fbd5 	bl	8019fdc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a832:	68bb      	ldr	r3, [r7, #8]
 801a834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a836:	4b1b      	ldr	r3, [pc, #108]	; (801a8a4 <xTaskIncrementTick+0x164>)
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a83c:	429a      	cmp	r2, r3
 801a83e:	d3b9      	bcc.n	801a7b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a840:	2301      	movs	r3, #1
 801a842:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a844:	e7b6      	b.n	801a7b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a846:	4b17      	ldr	r3, [pc, #92]	; (801a8a4 <xTaskIncrementTick+0x164>)
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a84c:	4914      	ldr	r1, [pc, #80]	; (801a8a0 <xTaskIncrementTick+0x160>)
 801a84e:	4613      	mov	r3, r2
 801a850:	009b      	lsls	r3, r3, #2
 801a852:	4413      	add	r3, r2
 801a854:	009b      	lsls	r3, r3, #2
 801a856:	440b      	add	r3, r1
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	2b01      	cmp	r3, #1
 801a85c:	d901      	bls.n	801a862 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801a85e:	2301      	movs	r3, #1
 801a860:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a862:	4b11      	ldr	r3, [pc, #68]	; (801a8a8 <xTaskIncrementTick+0x168>)
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d007      	beq.n	801a87a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801a86a:	2301      	movs	r3, #1
 801a86c:	617b      	str	r3, [r7, #20]
 801a86e:	e004      	b.n	801a87a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a870:	4b0e      	ldr	r3, [pc, #56]	; (801a8ac <xTaskIncrementTick+0x16c>)
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	3301      	adds	r3, #1
 801a876:	4a0d      	ldr	r2, [pc, #52]	; (801a8ac <xTaskIncrementTick+0x16c>)
 801a878:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801a87a:	697b      	ldr	r3, [r7, #20]
}
 801a87c:	4618      	mov	r0, r3
 801a87e:	3718      	adds	r7, #24
 801a880:	46bd      	mov	sp, r7
 801a882:	bd80      	pop	{r7, pc}
 801a884:	20001130 	.word	0x20001130
 801a888:	2000110c 	.word	0x2000110c
 801a88c:	200010c0 	.word	0x200010c0
 801a890:	200010c4 	.word	0x200010c4
 801a894:	20001120 	.word	0x20001120
 801a898:	20001128 	.word	0x20001128
 801a89c:	20001110 	.word	0x20001110
 801a8a0:	2000100c 	.word	0x2000100c
 801a8a4:	20001008 	.word	0x20001008
 801a8a8:	2000111c 	.word	0x2000111c
 801a8ac:	20001118 	.word	0x20001118

0801a8b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a8b0:	b480      	push	{r7}
 801a8b2:	b087      	sub	sp, #28
 801a8b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a8b6:	4b27      	ldr	r3, [pc, #156]	; (801a954 <vTaskSwitchContext+0xa4>)
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d003      	beq.n	801a8c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a8be:	4b26      	ldr	r3, [pc, #152]	; (801a958 <vTaskSwitchContext+0xa8>)
 801a8c0:	2201      	movs	r2, #1
 801a8c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a8c4:	e03f      	b.n	801a946 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801a8c6:	4b24      	ldr	r3, [pc, #144]	; (801a958 <vTaskSwitchContext+0xa8>)
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a8cc:	4b23      	ldr	r3, [pc, #140]	; (801a95c <vTaskSwitchContext+0xac>)
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	fab3 f383 	clz	r3, r3
 801a8d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801a8da:	7afb      	ldrb	r3, [r7, #11]
 801a8dc:	f1c3 031f 	rsb	r3, r3, #31
 801a8e0:	617b      	str	r3, [r7, #20]
 801a8e2:	491f      	ldr	r1, [pc, #124]	; (801a960 <vTaskSwitchContext+0xb0>)
 801a8e4:	697a      	ldr	r2, [r7, #20]
 801a8e6:	4613      	mov	r3, r2
 801a8e8:	009b      	lsls	r3, r3, #2
 801a8ea:	4413      	add	r3, r2
 801a8ec:	009b      	lsls	r3, r3, #2
 801a8ee:	440b      	add	r3, r1
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d10a      	bne.n	801a90c <vTaskSwitchContext+0x5c>
	__asm volatile
 801a8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8fa:	f383 8811 	msr	BASEPRI, r3
 801a8fe:	f3bf 8f6f 	isb	sy
 801a902:	f3bf 8f4f 	dsb	sy
 801a906:	607b      	str	r3, [r7, #4]
}
 801a908:	bf00      	nop
 801a90a:	e7fe      	b.n	801a90a <vTaskSwitchContext+0x5a>
 801a90c:	697a      	ldr	r2, [r7, #20]
 801a90e:	4613      	mov	r3, r2
 801a910:	009b      	lsls	r3, r3, #2
 801a912:	4413      	add	r3, r2
 801a914:	009b      	lsls	r3, r3, #2
 801a916:	4a12      	ldr	r2, [pc, #72]	; (801a960 <vTaskSwitchContext+0xb0>)
 801a918:	4413      	add	r3, r2
 801a91a:	613b      	str	r3, [r7, #16]
 801a91c:	693b      	ldr	r3, [r7, #16]
 801a91e:	685b      	ldr	r3, [r3, #4]
 801a920:	685a      	ldr	r2, [r3, #4]
 801a922:	693b      	ldr	r3, [r7, #16]
 801a924:	605a      	str	r2, [r3, #4]
 801a926:	693b      	ldr	r3, [r7, #16]
 801a928:	685a      	ldr	r2, [r3, #4]
 801a92a:	693b      	ldr	r3, [r7, #16]
 801a92c:	3308      	adds	r3, #8
 801a92e:	429a      	cmp	r2, r3
 801a930:	d104      	bne.n	801a93c <vTaskSwitchContext+0x8c>
 801a932:	693b      	ldr	r3, [r7, #16]
 801a934:	685b      	ldr	r3, [r3, #4]
 801a936:	685a      	ldr	r2, [r3, #4]
 801a938:	693b      	ldr	r3, [r7, #16]
 801a93a:	605a      	str	r2, [r3, #4]
 801a93c:	693b      	ldr	r3, [r7, #16]
 801a93e:	685b      	ldr	r3, [r3, #4]
 801a940:	68db      	ldr	r3, [r3, #12]
 801a942:	4a08      	ldr	r2, [pc, #32]	; (801a964 <vTaskSwitchContext+0xb4>)
 801a944:	6013      	str	r3, [r2, #0]
}
 801a946:	bf00      	nop
 801a948:	371c      	adds	r7, #28
 801a94a:	46bd      	mov	sp, r7
 801a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a950:	4770      	bx	lr
 801a952:	bf00      	nop
 801a954:	20001130 	.word	0x20001130
 801a958:	2000111c 	.word	0x2000111c
 801a95c:	20001110 	.word	0x20001110
 801a960:	2000100c 	.word	0x2000100c
 801a964:	20001008 	.word	0x20001008

0801a968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b082      	sub	sp, #8
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a970:	f000 f852 	bl	801aa18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a974:	4b06      	ldr	r3, [pc, #24]	; (801a990 <prvIdleTask+0x28>)
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	2b01      	cmp	r3, #1
 801a97a:	d9f9      	bls.n	801a970 <prvIdleTask+0x8>
			{
				taskYIELD();
 801a97c:	4b05      	ldr	r3, [pc, #20]	; (801a994 <prvIdleTask+0x2c>)
 801a97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a982:	601a      	str	r2, [r3, #0]
 801a984:	f3bf 8f4f 	dsb	sy
 801a988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a98c:	e7f0      	b.n	801a970 <prvIdleTask+0x8>
 801a98e:	bf00      	nop
 801a990:	2000100c 	.word	0x2000100c
 801a994:	e000ed04 	.word	0xe000ed04

0801a998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b082      	sub	sp, #8
 801a99c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a99e:	2300      	movs	r3, #0
 801a9a0:	607b      	str	r3, [r7, #4]
 801a9a2:	e00c      	b.n	801a9be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a9a4:	687a      	ldr	r2, [r7, #4]
 801a9a6:	4613      	mov	r3, r2
 801a9a8:	009b      	lsls	r3, r3, #2
 801a9aa:	4413      	add	r3, r2
 801a9ac:	009b      	lsls	r3, r3, #2
 801a9ae:	4a12      	ldr	r2, [pc, #72]	; (801a9f8 <prvInitialiseTaskLists+0x60>)
 801a9b0:	4413      	add	r3, r2
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f7ff fae5 	bl	8019f82 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	3301      	adds	r3, #1
 801a9bc:	607b      	str	r3, [r7, #4]
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	2b06      	cmp	r3, #6
 801a9c2:	d9ef      	bls.n	801a9a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a9c4:	480d      	ldr	r0, [pc, #52]	; (801a9fc <prvInitialiseTaskLists+0x64>)
 801a9c6:	f7ff fadc 	bl	8019f82 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a9ca:	480d      	ldr	r0, [pc, #52]	; (801aa00 <prvInitialiseTaskLists+0x68>)
 801a9cc:	f7ff fad9 	bl	8019f82 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a9d0:	480c      	ldr	r0, [pc, #48]	; (801aa04 <prvInitialiseTaskLists+0x6c>)
 801a9d2:	f7ff fad6 	bl	8019f82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a9d6:	480c      	ldr	r0, [pc, #48]	; (801aa08 <prvInitialiseTaskLists+0x70>)
 801a9d8:	f7ff fad3 	bl	8019f82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a9dc:	480b      	ldr	r0, [pc, #44]	; (801aa0c <prvInitialiseTaskLists+0x74>)
 801a9de:	f7ff fad0 	bl	8019f82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a9e2:	4b0b      	ldr	r3, [pc, #44]	; (801aa10 <prvInitialiseTaskLists+0x78>)
 801a9e4:	4a05      	ldr	r2, [pc, #20]	; (801a9fc <prvInitialiseTaskLists+0x64>)
 801a9e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a9e8:	4b0a      	ldr	r3, [pc, #40]	; (801aa14 <prvInitialiseTaskLists+0x7c>)
 801a9ea:	4a05      	ldr	r2, [pc, #20]	; (801aa00 <prvInitialiseTaskLists+0x68>)
 801a9ec:	601a      	str	r2, [r3, #0]
}
 801a9ee:	bf00      	nop
 801a9f0:	3708      	adds	r7, #8
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	bd80      	pop	{r7, pc}
 801a9f6:	bf00      	nop
 801a9f8:	2000100c 	.word	0x2000100c
 801a9fc:	20001098 	.word	0x20001098
 801aa00:	200010ac 	.word	0x200010ac
 801aa04:	200010c8 	.word	0x200010c8
 801aa08:	200010dc 	.word	0x200010dc
 801aa0c:	200010f4 	.word	0x200010f4
 801aa10:	200010c0 	.word	0x200010c0
 801aa14:	200010c4 	.word	0x200010c4

0801aa18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	b082      	sub	sp, #8
 801aa1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801aa1e:	e019      	b.n	801aa54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801aa20:	f000 fb40 	bl	801b0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aa24:	4b10      	ldr	r3, [pc, #64]	; (801aa68 <prvCheckTasksWaitingTermination+0x50>)
 801aa26:	68db      	ldr	r3, [r3, #12]
 801aa28:	68db      	ldr	r3, [r3, #12]
 801aa2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	3304      	adds	r3, #4
 801aa30:	4618      	mov	r0, r3
 801aa32:	f7ff fb30 	bl	801a096 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801aa36:	4b0d      	ldr	r3, [pc, #52]	; (801aa6c <prvCheckTasksWaitingTermination+0x54>)
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	3b01      	subs	r3, #1
 801aa3c:	4a0b      	ldr	r2, [pc, #44]	; (801aa6c <prvCheckTasksWaitingTermination+0x54>)
 801aa3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801aa40:	4b0b      	ldr	r3, [pc, #44]	; (801aa70 <prvCheckTasksWaitingTermination+0x58>)
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	3b01      	subs	r3, #1
 801aa46:	4a0a      	ldr	r2, [pc, #40]	; (801aa70 <prvCheckTasksWaitingTermination+0x58>)
 801aa48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801aa4a:	f000 fb5b 	bl	801b104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801aa4e:	6878      	ldr	r0, [r7, #4]
 801aa50:	f000 f810 	bl	801aa74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801aa54:	4b06      	ldr	r3, [pc, #24]	; (801aa70 <prvCheckTasksWaitingTermination+0x58>)
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d1e1      	bne.n	801aa20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801aa5c:	bf00      	nop
 801aa5e:	bf00      	nop
 801aa60:	3708      	adds	r7, #8
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd80      	pop	{r7, pc}
 801aa66:	bf00      	nop
 801aa68:	200010dc 	.word	0x200010dc
 801aa6c:	20001108 	.word	0x20001108
 801aa70:	200010f0 	.word	0x200010f0

0801aa74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b084      	sub	sp, #16
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d108      	bne.n	801aa98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa8a:	4618      	mov	r0, r3
 801aa8c:	f000 fcf8 	bl	801b480 <vPortFree>
				vPortFree( pxTCB );
 801aa90:	6878      	ldr	r0, [r7, #4]
 801aa92:	f000 fcf5 	bl	801b480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801aa96:	e018      	b.n	801aaca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	d103      	bne.n	801aaaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801aaa2:	6878      	ldr	r0, [r7, #4]
 801aaa4:	f000 fcec 	bl	801b480 <vPortFree>
	}
 801aaa8:	e00f      	b.n	801aaca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801aab0:	2b02      	cmp	r3, #2
 801aab2:	d00a      	beq.n	801aaca <prvDeleteTCB+0x56>
	__asm volatile
 801aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aab8:	f383 8811 	msr	BASEPRI, r3
 801aabc:	f3bf 8f6f 	isb	sy
 801aac0:	f3bf 8f4f 	dsb	sy
 801aac4:	60fb      	str	r3, [r7, #12]
}
 801aac6:	bf00      	nop
 801aac8:	e7fe      	b.n	801aac8 <prvDeleteTCB+0x54>
	}
 801aaca:	bf00      	nop
 801aacc:	3710      	adds	r7, #16
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd80      	pop	{r7, pc}
	...

0801aad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801aad4:	b480      	push	{r7}
 801aad6:	b083      	sub	sp, #12
 801aad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801aada:	4b0c      	ldr	r3, [pc, #48]	; (801ab0c <prvResetNextTaskUnblockTime+0x38>)
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d104      	bne.n	801aaee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801aae4:	4b0a      	ldr	r3, [pc, #40]	; (801ab10 <prvResetNextTaskUnblockTime+0x3c>)
 801aae6:	f04f 32ff 	mov.w	r2, #4294967295
 801aaea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801aaec:	e008      	b.n	801ab00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aaee:	4b07      	ldr	r3, [pc, #28]	; (801ab0c <prvResetNextTaskUnblockTime+0x38>)
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	68db      	ldr	r3, [r3, #12]
 801aaf4:	68db      	ldr	r3, [r3, #12]
 801aaf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	685b      	ldr	r3, [r3, #4]
 801aafc:	4a04      	ldr	r2, [pc, #16]	; (801ab10 <prvResetNextTaskUnblockTime+0x3c>)
 801aafe:	6013      	str	r3, [r2, #0]
}
 801ab00:	bf00      	nop
 801ab02:	370c      	adds	r7, #12
 801ab04:	46bd      	mov	sp, r7
 801ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0a:	4770      	bx	lr
 801ab0c:	200010c0 	.word	0x200010c0
 801ab10:	20001128 	.word	0x20001128

0801ab14 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801ab14:	b580      	push	{r7, lr}
 801ab16:	b086      	sub	sp, #24
 801ab18:	af00      	add	r7, sp, #0
 801ab1a:	60f8      	str	r0, [r7, #12]
 801ab1c:	60b9      	str	r1, [r7, #8]
 801ab1e:	607a      	str	r2, [r7, #4]
 801ab20:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801ab22:	f000 fabf 	bl	801b0a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801ab26:	4b26      	ldr	r3, [pc, #152]	; (801abc0 <xTaskNotifyWait+0xac>)
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ab2e:	b2db      	uxtb	r3, r3
 801ab30:	2b02      	cmp	r3, #2
 801ab32:	d01a      	beq.n	801ab6a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801ab34:	4b22      	ldr	r3, [pc, #136]	; (801abc0 <xTaskNotifyWait+0xac>)
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801ab3a:	68fa      	ldr	r2, [r7, #12]
 801ab3c:	43d2      	mvns	r2, r2
 801ab3e:	400a      	ands	r2, r1
 801ab40:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801ab42:	4b1f      	ldr	r3, [pc, #124]	; (801abc0 <xTaskNotifyWait+0xac>)
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	2201      	movs	r2, #1
 801ab48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 801ab4c:	683b      	ldr	r3, [r7, #0]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d00b      	beq.n	801ab6a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ab52:	2101      	movs	r1, #1
 801ab54:	6838      	ldr	r0, [r7, #0]
 801ab56:	f000 f911 	bl	801ad7c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801ab5a:	4b1a      	ldr	r3, [pc, #104]	; (801abc4 <xTaskNotifyWait+0xb0>)
 801ab5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ab60:	601a      	str	r2, [r3, #0]
 801ab62:	f3bf 8f4f 	dsb	sy
 801ab66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801ab6a:	f000 facb 	bl	801b104 <vPortExitCritical>

		taskENTER_CRITICAL();
 801ab6e:	f000 fa99 	bl	801b0a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d004      	beq.n	801ab82 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801ab78:	4b11      	ldr	r3, [pc, #68]	; (801abc0 <xTaskNotifyWait+0xac>)
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801ab82:	4b0f      	ldr	r3, [pc, #60]	; (801abc0 <xTaskNotifyWait+0xac>)
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ab8a:	b2db      	uxtb	r3, r3
 801ab8c:	2b02      	cmp	r3, #2
 801ab8e:	d002      	beq.n	801ab96 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801ab90:	2300      	movs	r3, #0
 801ab92:	617b      	str	r3, [r7, #20]
 801ab94:	e008      	b.n	801aba8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801ab96:	4b0a      	ldr	r3, [pc, #40]	; (801abc0 <xTaskNotifyWait+0xac>)
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801ab9c:	68ba      	ldr	r2, [r7, #8]
 801ab9e:	43d2      	mvns	r2, r2
 801aba0:	400a      	ands	r2, r1
 801aba2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 801aba4:	2301      	movs	r3, #1
 801aba6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801aba8:	4b05      	ldr	r3, [pc, #20]	; (801abc0 <xTaskNotifyWait+0xac>)
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	2200      	movs	r2, #0
 801abae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801abb2:	f000 faa7 	bl	801b104 <vPortExitCritical>

		return xReturn;
 801abb6:	697b      	ldr	r3, [r7, #20]
	}
 801abb8:	4618      	mov	r0, r3
 801abba:	3718      	adds	r7, #24
 801abbc:	46bd      	mov	sp, r7
 801abbe:	bd80      	pop	{r7, pc}
 801abc0:	20001008 	.word	0x20001008
 801abc4:	e000ed04 	.word	0xe000ed04

0801abc8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b08e      	sub	sp, #56	; 0x38
 801abcc:	af00      	add	r7, sp, #0
 801abce:	60f8      	str	r0, [r7, #12]
 801abd0:	60b9      	str	r1, [r7, #8]
 801abd2:	603b      	str	r3, [r7, #0]
 801abd4:	4613      	mov	r3, r2
 801abd6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801abd8:	2301      	movs	r3, #1
 801abda:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d10a      	bne.n	801abf8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abe6:	f383 8811 	msr	BASEPRI, r3
 801abea:	f3bf 8f6f 	isb	sy
 801abee:	f3bf 8f4f 	dsb	sy
 801abf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 801abf4:	bf00      	nop
 801abf6:	e7fe      	b.n	801abf6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801abf8:	f000 fb36 	bl	801b268 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801ac00:	f3ef 8211 	mrs	r2, BASEPRI
 801ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac08:	f383 8811 	msr	BASEPRI, r3
 801ac0c:	f3bf 8f6f 	isb	sy
 801ac10:	f3bf 8f4f 	dsb	sy
 801ac14:	623a      	str	r2, [r7, #32]
 801ac16:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801ac18:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801ac1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801ac1c:	683b      	ldr	r3, [r7, #0]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d003      	beq.n	801ac2a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ac26:	683b      	ldr	r3, [r7, #0]
 801ac28:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ac30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac36:	2202      	movs	r2, #2
 801ac38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801ac3c:	79fb      	ldrb	r3, [r7, #7]
 801ac3e:	2b04      	cmp	r3, #4
 801ac40:	d828      	bhi.n	801ac94 <xTaskGenericNotifyFromISR+0xcc>
 801ac42:	a201      	add	r2, pc, #4	; (adr r2, 801ac48 <xTaskGenericNotifyFromISR+0x80>)
 801ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac48:	0801acb5 	.word	0x0801acb5
 801ac4c:	0801ac5d 	.word	0x0801ac5d
 801ac50:	0801ac6b 	.word	0x0801ac6b
 801ac54:	0801ac77 	.word	0x0801ac77
 801ac58:	0801ac7f 	.word	0x0801ac7f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801ac5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ac60:	68bb      	ldr	r3, [r7, #8]
 801ac62:	431a      	orrs	r2, r3
 801ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac66:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801ac68:	e027      	b.n	801acba <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ac6e:	1c5a      	adds	r2, r3, #1
 801ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac72:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801ac74:	e021      	b.n	801acba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac78:	68ba      	ldr	r2, [r7, #8]
 801ac7a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801ac7c:	e01d      	b.n	801acba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801ac7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ac82:	2b02      	cmp	r3, #2
 801ac84:	d003      	beq.n	801ac8e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac88:	68ba      	ldr	r2, [r7, #8]
 801ac8a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801ac8c:	e015      	b.n	801acba <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 801ac8e:	2300      	movs	r3, #0
 801ac90:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801ac92:	e012      	b.n	801acba <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ac98:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac9c:	d00c      	beq.n	801acb8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 801ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aca2:	f383 8811 	msr	BASEPRI, r3
 801aca6:	f3bf 8f6f 	isb	sy
 801acaa:	f3bf 8f4f 	dsb	sy
 801acae:	61bb      	str	r3, [r7, #24]
}
 801acb0:	bf00      	nop
 801acb2:	e7fe      	b.n	801acb2 <xTaskGenericNotifyFromISR+0xea>
					break;
 801acb4:	bf00      	nop
 801acb6:	e000      	b.n	801acba <xTaskGenericNotifyFromISR+0xf2>
					break;
 801acb8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801acba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801acbe:	2b01      	cmp	r3, #1
 801acc0:	d145      	bne.n	801ad4e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d00a      	beq.n	801ace0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 801acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acce:	f383 8811 	msr	BASEPRI, r3
 801acd2:	f3bf 8f6f 	isb	sy
 801acd6:	f3bf 8f4f 	dsb	sy
 801acda:	617b      	str	r3, [r7, #20]
}
 801acdc:	bf00      	nop
 801acde:	e7fe      	b.n	801acde <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ace0:	4b20      	ldr	r3, [pc, #128]	; (801ad64 <xTaskGenericNotifyFromISR+0x19c>)
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d11c      	bne.n	801ad22 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acea:	3304      	adds	r3, #4
 801acec:	4618      	mov	r0, r3
 801acee:	f7ff f9d2 	bl	801a096 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801acf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acf6:	2201      	movs	r2, #1
 801acf8:	409a      	lsls	r2, r3
 801acfa:	4b1b      	ldr	r3, [pc, #108]	; (801ad68 <xTaskGenericNotifyFromISR+0x1a0>)
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	4313      	orrs	r3, r2
 801ad00:	4a19      	ldr	r2, [pc, #100]	; (801ad68 <xTaskGenericNotifyFromISR+0x1a0>)
 801ad02:	6013      	str	r3, [r2, #0]
 801ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad08:	4613      	mov	r3, r2
 801ad0a:	009b      	lsls	r3, r3, #2
 801ad0c:	4413      	add	r3, r2
 801ad0e:	009b      	lsls	r3, r3, #2
 801ad10:	4a16      	ldr	r2, [pc, #88]	; (801ad6c <xTaskGenericNotifyFromISR+0x1a4>)
 801ad12:	441a      	add	r2, r3
 801ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad16:	3304      	adds	r3, #4
 801ad18:	4619      	mov	r1, r3
 801ad1a:	4610      	mov	r0, r2
 801ad1c:	f7ff f95e 	bl	8019fdc <vListInsertEnd>
 801ad20:	e005      	b.n	801ad2e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad24:	3318      	adds	r3, #24
 801ad26:	4619      	mov	r1, r3
 801ad28:	4811      	ldr	r0, [pc, #68]	; (801ad70 <xTaskGenericNotifyFromISR+0x1a8>)
 801ad2a:	f7ff f957 	bl	8019fdc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad32:	4b10      	ldr	r3, [pc, #64]	; (801ad74 <xTaskGenericNotifyFromISR+0x1ac>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad38:	429a      	cmp	r2, r3
 801ad3a:	d908      	bls.n	801ad4e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801ad3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d002      	beq.n	801ad48 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801ad42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad44:	2201      	movs	r2, #1
 801ad46:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801ad48:	4b0b      	ldr	r3, [pc, #44]	; (801ad78 <xTaskGenericNotifyFromISR+0x1b0>)
 801ad4a:	2201      	movs	r2, #1
 801ad4c:	601a      	str	r2, [r3, #0]
 801ad4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801ad52:	693b      	ldr	r3, [r7, #16]
 801ad54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801ad58:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801ad5c:	4618      	mov	r0, r3
 801ad5e:	3738      	adds	r7, #56	; 0x38
 801ad60:	46bd      	mov	sp, r7
 801ad62:	bd80      	pop	{r7, pc}
 801ad64:	20001130 	.word	0x20001130
 801ad68:	20001110 	.word	0x20001110
 801ad6c:	2000100c 	.word	0x2000100c
 801ad70:	200010c8 	.word	0x200010c8
 801ad74:	20001008 	.word	0x20001008
 801ad78:	2000111c 	.word	0x2000111c

0801ad7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b084      	sub	sp, #16
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	6078      	str	r0, [r7, #4]
 801ad84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801ad86:	4b29      	ldr	r3, [pc, #164]	; (801ae2c <prvAddCurrentTaskToDelayedList+0xb0>)
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ad8c:	4b28      	ldr	r3, [pc, #160]	; (801ae30 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	3304      	adds	r3, #4
 801ad92:	4618      	mov	r0, r3
 801ad94:	f7ff f97f 	bl	801a096 <uxListRemove>
 801ad98:	4603      	mov	r3, r0
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d10b      	bne.n	801adb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801ad9e:	4b24      	ldr	r3, [pc, #144]	; (801ae30 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ada4:	2201      	movs	r2, #1
 801ada6:	fa02 f303 	lsl.w	r3, r2, r3
 801adaa:	43da      	mvns	r2, r3
 801adac:	4b21      	ldr	r3, [pc, #132]	; (801ae34 <prvAddCurrentTaskToDelayedList+0xb8>)
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	4013      	ands	r3, r2
 801adb2:	4a20      	ldr	r2, [pc, #128]	; (801ae34 <prvAddCurrentTaskToDelayedList+0xb8>)
 801adb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801adbc:	d10a      	bne.n	801add4 <prvAddCurrentTaskToDelayedList+0x58>
 801adbe:	683b      	ldr	r3, [r7, #0]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d007      	beq.n	801add4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801adc4:	4b1a      	ldr	r3, [pc, #104]	; (801ae30 <prvAddCurrentTaskToDelayedList+0xb4>)
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	3304      	adds	r3, #4
 801adca:	4619      	mov	r1, r3
 801adcc:	481a      	ldr	r0, [pc, #104]	; (801ae38 <prvAddCurrentTaskToDelayedList+0xbc>)
 801adce:	f7ff f905 	bl	8019fdc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801add2:	e026      	b.n	801ae22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801add4:	68fa      	ldr	r2, [r7, #12]
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	4413      	add	r3, r2
 801adda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801addc:	4b14      	ldr	r3, [pc, #80]	; (801ae30 <prvAddCurrentTaskToDelayedList+0xb4>)
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	68ba      	ldr	r2, [r7, #8]
 801ade2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801ade4:	68ba      	ldr	r2, [r7, #8]
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	429a      	cmp	r2, r3
 801adea:	d209      	bcs.n	801ae00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801adec:	4b13      	ldr	r3, [pc, #76]	; (801ae3c <prvAddCurrentTaskToDelayedList+0xc0>)
 801adee:	681a      	ldr	r2, [r3, #0]
 801adf0:	4b0f      	ldr	r3, [pc, #60]	; (801ae30 <prvAddCurrentTaskToDelayedList+0xb4>)
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	3304      	adds	r3, #4
 801adf6:	4619      	mov	r1, r3
 801adf8:	4610      	mov	r0, r2
 801adfa:	f7ff f913 	bl	801a024 <vListInsert>
}
 801adfe:	e010      	b.n	801ae22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ae00:	4b0f      	ldr	r3, [pc, #60]	; (801ae40 <prvAddCurrentTaskToDelayedList+0xc4>)
 801ae02:	681a      	ldr	r2, [r3, #0]
 801ae04:	4b0a      	ldr	r3, [pc, #40]	; (801ae30 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	3304      	adds	r3, #4
 801ae0a:	4619      	mov	r1, r3
 801ae0c:	4610      	mov	r0, r2
 801ae0e:	f7ff f909 	bl	801a024 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ae12:	4b0c      	ldr	r3, [pc, #48]	; (801ae44 <prvAddCurrentTaskToDelayedList+0xc8>)
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	68ba      	ldr	r2, [r7, #8]
 801ae18:	429a      	cmp	r2, r3
 801ae1a:	d202      	bcs.n	801ae22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801ae1c:	4a09      	ldr	r2, [pc, #36]	; (801ae44 <prvAddCurrentTaskToDelayedList+0xc8>)
 801ae1e:	68bb      	ldr	r3, [r7, #8]
 801ae20:	6013      	str	r3, [r2, #0]
}
 801ae22:	bf00      	nop
 801ae24:	3710      	adds	r7, #16
 801ae26:	46bd      	mov	sp, r7
 801ae28:	bd80      	pop	{r7, pc}
 801ae2a:	bf00      	nop
 801ae2c:	2000110c 	.word	0x2000110c
 801ae30:	20001008 	.word	0x20001008
 801ae34:	20001110 	.word	0x20001110
 801ae38:	200010f4 	.word	0x200010f4
 801ae3c:	200010c4 	.word	0x200010c4
 801ae40:	200010c0 	.word	0x200010c0
 801ae44:	20001128 	.word	0x20001128

0801ae48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801ae48:	b480      	push	{r7}
 801ae4a:	b085      	sub	sp, #20
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	60f8      	str	r0, [r7, #12]
 801ae50:	60b9      	str	r1, [r7, #8]
 801ae52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	3b04      	subs	r3, #4
 801ae58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ae60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	3b04      	subs	r3, #4
 801ae66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801ae68:	68bb      	ldr	r3, [r7, #8]
 801ae6a:	f023 0201 	bic.w	r2, r3, #1
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	3b04      	subs	r3, #4
 801ae76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801ae78:	4a0c      	ldr	r2, [pc, #48]	; (801aeac <pxPortInitialiseStack+0x64>)
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	3b14      	subs	r3, #20
 801ae82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801ae84:	687a      	ldr	r2, [r7, #4]
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	3b04      	subs	r3, #4
 801ae8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	f06f 0202 	mvn.w	r2, #2
 801ae96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	3b20      	subs	r3, #32
 801ae9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801ae9e:	68fb      	ldr	r3, [r7, #12]
}
 801aea0:	4618      	mov	r0, r3
 801aea2:	3714      	adds	r7, #20
 801aea4:	46bd      	mov	sp, r7
 801aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeaa:	4770      	bx	lr
 801aeac:	0801aeb1 	.word	0x0801aeb1

0801aeb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801aeb0:	b480      	push	{r7}
 801aeb2:	b085      	sub	sp, #20
 801aeb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801aeba:	4b12      	ldr	r3, [pc, #72]	; (801af04 <prvTaskExitError+0x54>)
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aec2:	d00a      	beq.n	801aeda <prvTaskExitError+0x2a>
	__asm volatile
 801aec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aec8:	f383 8811 	msr	BASEPRI, r3
 801aecc:	f3bf 8f6f 	isb	sy
 801aed0:	f3bf 8f4f 	dsb	sy
 801aed4:	60fb      	str	r3, [r7, #12]
}
 801aed6:	bf00      	nop
 801aed8:	e7fe      	b.n	801aed8 <prvTaskExitError+0x28>
	__asm volatile
 801aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aede:	f383 8811 	msr	BASEPRI, r3
 801aee2:	f3bf 8f6f 	isb	sy
 801aee6:	f3bf 8f4f 	dsb	sy
 801aeea:	60bb      	str	r3, [r7, #8]
}
 801aeec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801aeee:	bf00      	nop
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d0fc      	beq.n	801aef0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801aef6:	bf00      	nop
 801aef8:	bf00      	nop
 801aefa:	3714      	adds	r7, #20
 801aefc:	46bd      	mov	sp, r7
 801aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af02:	4770      	bx	lr
 801af04:	200000b8 	.word	0x200000b8
	...

0801af10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801af10:	4b07      	ldr	r3, [pc, #28]	; (801af30 <pxCurrentTCBConst2>)
 801af12:	6819      	ldr	r1, [r3, #0]
 801af14:	6808      	ldr	r0, [r1, #0]
 801af16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af1a:	f380 8809 	msr	PSP, r0
 801af1e:	f3bf 8f6f 	isb	sy
 801af22:	f04f 0000 	mov.w	r0, #0
 801af26:	f380 8811 	msr	BASEPRI, r0
 801af2a:	4770      	bx	lr
 801af2c:	f3af 8000 	nop.w

0801af30 <pxCurrentTCBConst2>:
 801af30:	20001008 	.word	0x20001008
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801af34:	bf00      	nop
 801af36:	bf00      	nop

0801af38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801af38:	4808      	ldr	r0, [pc, #32]	; (801af5c <prvPortStartFirstTask+0x24>)
 801af3a:	6800      	ldr	r0, [r0, #0]
 801af3c:	6800      	ldr	r0, [r0, #0]
 801af3e:	f380 8808 	msr	MSP, r0
 801af42:	f04f 0000 	mov.w	r0, #0
 801af46:	f380 8814 	msr	CONTROL, r0
 801af4a:	b662      	cpsie	i
 801af4c:	b661      	cpsie	f
 801af4e:	f3bf 8f4f 	dsb	sy
 801af52:	f3bf 8f6f 	isb	sy
 801af56:	df00      	svc	0
 801af58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801af5a:	bf00      	nop
 801af5c:	e000ed08 	.word	0xe000ed08

0801af60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801af60:	b580      	push	{r7, lr}
 801af62:	b086      	sub	sp, #24
 801af64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801af66:	4b46      	ldr	r3, [pc, #280]	; (801b080 <xPortStartScheduler+0x120>)
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	4a46      	ldr	r2, [pc, #280]	; (801b084 <xPortStartScheduler+0x124>)
 801af6c:	4293      	cmp	r3, r2
 801af6e:	d10a      	bne.n	801af86 <xPortStartScheduler+0x26>
	__asm volatile
 801af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af74:	f383 8811 	msr	BASEPRI, r3
 801af78:	f3bf 8f6f 	isb	sy
 801af7c:	f3bf 8f4f 	dsb	sy
 801af80:	613b      	str	r3, [r7, #16]
}
 801af82:	bf00      	nop
 801af84:	e7fe      	b.n	801af84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801af86:	4b3e      	ldr	r3, [pc, #248]	; (801b080 <xPortStartScheduler+0x120>)
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	4a3f      	ldr	r2, [pc, #252]	; (801b088 <xPortStartScheduler+0x128>)
 801af8c:	4293      	cmp	r3, r2
 801af8e:	d10a      	bne.n	801afa6 <xPortStartScheduler+0x46>
	__asm volatile
 801af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af94:	f383 8811 	msr	BASEPRI, r3
 801af98:	f3bf 8f6f 	isb	sy
 801af9c:	f3bf 8f4f 	dsb	sy
 801afa0:	60fb      	str	r3, [r7, #12]
}
 801afa2:	bf00      	nop
 801afa4:	e7fe      	b.n	801afa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801afa6:	4b39      	ldr	r3, [pc, #228]	; (801b08c <xPortStartScheduler+0x12c>)
 801afa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801afaa:	697b      	ldr	r3, [r7, #20]
 801afac:	781b      	ldrb	r3, [r3, #0]
 801afae:	b2db      	uxtb	r3, r3
 801afb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801afb2:	697b      	ldr	r3, [r7, #20]
 801afb4:	22ff      	movs	r2, #255	; 0xff
 801afb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801afb8:	697b      	ldr	r3, [r7, #20]
 801afba:	781b      	ldrb	r3, [r3, #0]
 801afbc:	b2db      	uxtb	r3, r3
 801afbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801afc0:	78fb      	ldrb	r3, [r7, #3]
 801afc2:	b2db      	uxtb	r3, r3
 801afc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801afc8:	b2da      	uxtb	r2, r3
 801afca:	4b31      	ldr	r3, [pc, #196]	; (801b090 <xPortStartScheduler+0x130>)
 801afcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801afce:	4b31      	ldr	r3, [pc, #196]	; (801b094 <xPortStartScheduler+0x134>)
 801afd0:	2207      	movs	r2, #7
 801afd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801afd4:	e009      	b.n	801afea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801afd6:	4b2f      	ldr	r3, [pc, #188]	; (801b094 <xPortStartScheduler+0x134>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	3b01      	subs	r3, #1
 801afdc:	4a2d      	ldr	r2, [pc, #180]	; (801b094 <xPortStartScheduler+0x134>)
 801afde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801afe0:	78fb      	ldrb	r3, [r7, #3]
 801afe2:	b2db      	uxtb	r3, r3
 801afe4:	005b      	lsls	r3, r3, #1
 801afe6:	b2db      	uxtb	r3, r3
 801afe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801afea:	78fb      	ldrb	r3, [r7, #3]
 801afec:	b2db      	uxtb	r3, r3
 801afee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aff2:	2b80      	cmp	r3, #128	; 0x80
 801aff4:	d0ef      	beq.n	801afd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801aff6:	4b27      	ldr	r3, [pc, #156]	; (801b094 <xPortStartScheduler+0x134>)
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	f1c3 0307 	rsb	r3, r3, #7
 801affe:	2b04      	cmp	r3, #4
 801b000:	d00a      	beq.n	801b018 <xPortStartScheduler+0xb8>
	__asm volatile
 801b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b006:	f383 8811 	msr	BASEPRI, r3
 801b00a:	f3bf 8f6f 	isb	sy
 801b00e:	f3bf 8f4f 	dsb	sy
 801b012:	60bb      	str	r3, [r7, #8]
}
 801b014:	bf00      	nop
 801b016:	e7fe      	b.n	801b016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b018:	4b1e      	ldr	r3, [pc, #120]	; (801b094 <xPortStartScheduler+0x134>)
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	021b      	lsls	r3, r3, #8
 801b01e:	4a1d      	ldr	r2, [pc, #116]	; (801b094 <xPortStartScheduler+0x134>)
 801b020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b022:	4b1c      	ldr	r3, [pc, #112]	; (801b094 <xPortStartScheduler+0x134>)
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b02a:	4a1a      	ldr	r2, [pc, #104]	; (801b094 <xPortStartScheduler+0x134>)
 801b02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	b2da      	uxtb	r2, r3
 801b032:	697b      	ldr	r3, [r7, #20]
 801b034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b036:	4b18      	ldr	r3, [pc, #96]	; (801b098 <xPortStartScheduler+0x138>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	4a17      	ldr	r2, [pc, #92]	; (801b098 <xPortStartScheduler+0x138>)
 801b03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b042:	4b15      	ldr	r3, [pc, #84]	; (801b098 <xPortStartScheduler+0x138>)
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	4a14      	ldr	r2, [pc, #80]	; (801b098 <xPortStartScheduler+0x138>)
 801b048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b04e:	f000 f8dd 	bl	801b20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b052:	4b12      	ldr	r3, [pc, #72]	; (801b09c <xPortStartScheduler+0x13c>)
 801b054:	2200      	movs	r2, #0
 801b056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b058:	f000 f8fc 	bl	801b254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b05c:	4b10      	ldr	r3, [pc, #64]	; (801b0a0 <xPortStartScheduler+0x140>)
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	4a0f      	ldr	r2, [pc, #60]	; (801b0a0 <xPortStartScheduler+0x140>)
 801b062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b068:	f7ff ff66 	bl	801af38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b06c:	f7ff fc20 	bl	801a8b0 <vTaskSwitchContext>
	prvTaskExitError();
 801b070:	f7ff ff1e 	bl	801aeb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b074:	2300      	movs	r3, #0
}
 801b076:	4618      	mov	r0, r3
 801b078:	3718      	adds	r7, #24
 801b07a:	46bd      	mov	sp, r7
 801b07c:	bd80      	pop	{r7, pc}
 801b07e:	bf00      	nop
 801b080:	e000ed00 	.word	0xe000ed00
 801b084:	410fc271 	.word	0x410fc271
 801b088:	410fc270 	.word	0x410fc270
 801b08c:	e000e400 	.word	0xe000e400
 801b090:	20001134 	.word	0x20001134
 801b094:	20001138 	.word	0x20001138
 801b098:	e000ed20 	.word	0xe000ed20
 801b09c:	200000b8 	.word	0x200000b8
 801b0a0:	e000ef34 	.word	0xe000ef34

0801b0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b0a4:	b480      	push	{r7}
 801b0a6:	b083      	sub	sp, #12
 801b0a8:	af00      	add	r7, sp, #0
	__asm volatile
 801b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0ae:	f383 8811 	msr	BASEPRI, r3
 801b0b2:	f3bf 8f6f 	isb	sy
 801b0b6:	f3bf 8f4f 	dsb	sy
 801b0ba:	607b      	str	r3, [r7, #4]
}
 801b0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b0be:	4b0f      	ldr	r3, [pc, #60]	; (801b0fc <vPortEnterCritical+0x58>)
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	3301      	adds	r3, #1
 801b0c4:	4a0d      	ldr	r2, [pc, #52]	; (801b0fc <vPortEnterCritical+0x58>)
 801b0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b0c8:	4b0c      	ldr	r3, [pc, #48]	; (801b0fc <vPortEnterCritical+0x58>)
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	2b01      	cmp	r3, #1
 801b0ce:	d10f      	bne.n	801b0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b0d0:	4b0b      	ldr	r3, [pc, #44]	; (801b100 <vPortEnterCritical+0x5c>)
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	b2db      	uxtb	r3, r3
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d00a      	beq.n	801b0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 801b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0de:	f383 8811 	msr	BASEPRI, r3
 801b0e2:	f3bf 8f6f 	isb	sy
 801b0e6:	f3bf 8f4f 	dsb	sy
 801b0ea:	603b      	str	r3, [r7, #0]
}
 801b0ec:	bf00      	nop
 801b0ee:	e7fe      	b.n	801b0ee <vPortEnterCritical+0x4a>
	}
}
 801b0f0:	bf00      	nop
 801b0f2:	370c      	adds	r7, #12
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0fa:	4770      	bx	lr
 801b0fc:	200000b8 	.word	0x200000b8
 801b100:	e000ed04 	.word	0xe000ed04

0801b104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b104:	b480      	push	{r7}
 801b106:	b083      	sub	sp, #12
 801b108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b10a:	4b12      	ldr	r3, [pc, #72]	; (801b154 <vPortExitCritical+0x50>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d10a      	bne.n	801b128 <vPortExitCritical+0x24>
	__asm volatile
 801b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b116:	f383 8811 	msr	BASEPRI, r3
 801b11a:	f3bf 8f6f 	isb	sy
 801b11e:	f3bf 8f4f 	dsb	sy
 801b122:	607b      	str	r3, [r7, #4]
}
 801b124:	bf00      	nop
 801b126:	e7fe      	b.n	801b126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b128:	4b0a      	ldr	r3, [pc, #40]	; (801b154 <vPortExitCritical+0x50>)
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	3b01      	subs	r3, #1
 801b12e:	4a09      	ldr	r2, [pc, #36]	; (801b154 <vPortExitCritical+0x50>)
 801b130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b132:	4b08      	ldr	r3, [pc, #32]	; (801b154 <vPortExitCritical+0x50>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d105      	bne.n	801b146 <vPortExitCritical+0x42>
 801b13a:	2300      	movs	r3, #0
 801b13c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	f383 8811 	msr	BASEPRI, r3
}
 801b144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b146:	bf00      	nop
 801b148:	370c      	adds	r7, #12
 801b14a:	46bd      	mov	sp, r7
 801b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b150:	4770      	bx	lr
 801b152:	bf00      	nop
 801b154:	200000b8 	.word	0x200000b8
	...

0801b160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b160:	f3ef 8009 	mrs	r0, PSP
 801b164:	f3bf 8f6f 	isb	sy
 801b168:	4b15      	ldr	r3, [pc, #84]	; (801b1c0 <pxCurrentTCBConst>)
 801b16a:	681a      	ldr	r2, [r3, #0]
 801b16c:	f01e 0f10 	tst.w	lr, #16
 801b170:	bf08      	it	eq
 801b172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b17a:	6010      	str	r0, [r2, #0]
 801b17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b180:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b184:	f380 8811 	msr	BASEPRI, r0
 801b188:	f3bf 8f4f 	dsb	sy
 801b18c:	f3bf 8f6f 	isb	sy
 801b190:	f7ff fb8e 	bl	801a8b0 <vTaskSwitchContext>
 801b194:	f04f 0000 	mov.w	r0, #0
 801b198:	f380 8811 	msr	BASEPRI, r0
 801b19c:	bc09      	pop	{r0, r3}
 801b19e:	6819      	ldr	r1, [r3, #0]
 801b1a0:	6808      	ldr	r0, [r1, #0]
 801b1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1a6:	f01e 0f10 	tst.w	lr, #16
 801b1aa:	bf08      	it	eq
 801b1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b1b0:	f380 8809 	msr	PSP, r0
 801b1b4:	f3bf 8f6f 	isb	sy
 801b1b8:	4770      	bx	lr
 801b1ba:	bf00      	nop
 801b1bc:	f3af 8000 	nop.w

0801b1c0 <pxCurrentTCBConst>:
 801b1c0:	20001008 	.word	0x20001008
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b1c4:	bf00      	nop
 801b1c6:	bf00      	nop

0801b1c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b082      	sub	sp, #8
 801b1cc:	af00      	add	r7, sp, #0
	__asm volatile
 801b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1d2:	f383 8811 	msr	BASEPRI, r3
 801b1d6:	f3bf 8f6f 	isb	sy
 801b1da:	f3bf 8f4f 	dsb	sy
 801b1de:	607b      	str	r3, [r7, #4]
}
 801b1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b1e2:	f7ff faad 	bl	801a740 <xTaskIncrementTick>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d003      	beq.n	801b1f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b1ec:	4b06      	ldr	r3, [pc, #24]	; (801b208 <SysTick_Handler+0x40>)
 801b1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b1f2:	601a      	str	r2, [r3, #0]
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b1f8:	683b      	ldr	r3, [r7, #0]
 801b1fa:	f383 8811 	msr	BASEPRI, r3
}
 801b1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b200:	bf00      	nop
 801b202:	3708      	adds	r7, #8
 801b204:	46bd      	mov	sp, r7
 801b206:	bd80      	pop	{r7, pc}
 801b208:	e000ed04 	.word	0xe000ed04

0801b20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b20c:	b480      	push	{r7}
 801b20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b210:	4b0b      	ldr	r3, [pc, #44]	; (801b240 <vPortSetupTimerInterrupt+0x34>)
 801b212:	2200      	movs	r2, #0
 801b214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b216:	4b0b      	ldr	r3, [pc, #44]	; (801b244 <vPortSetupTimerInterrupt+0x38>)
 801b218:	2200      	movs	r2, #0
 801b21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b21c:	4b0a      	ldr	r3, [pc, #40]	; (801b248 <vPortSetupTimerInterrupt+0x3c>)
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	4a0a      	ldr	r2, [pc, #40]	; (801b24c <vPortSetupTimerInterrupt+0x40>)
 801b222:	fba2 2303 	umull	r2, r3, r2, r3
 801b226:	099b      	lsrs	r3, r3, #6
 801b228:	4a09      	ldr	r2, [pc, #36]	; (801b250 <vPortSetupTimerInterrupt+0x44>)
 801b22a:	3b01      	subs	r3, #1
 801b22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b22e:	4b04      	ldr	r3, [pc, #16]	; (801b240 <vPortSetupTimerInterrupt+0x34>)
 801b230:	2207      	movs	r2, #7
 801b232:	601a      	str	r2, [r3, #0]
}
 801b234:	bf00      	nop
 801b236:	46bd      	mov	sp, r7
 801b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b23c:	4770      	bx	lr
 801b23e:	bf00      	nop
 801b240:	e000e010 	.word	0xe000e010
 801b244:	e000e018 	.word	0xe000e018
 801b248:	20000004 	.word	0x20000004
 801b24c:	10624dd3 	.word	0x10624dd3
 801b250:	e000e014 	.word	0xe000e014

0801b254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b264 <vPortEnableVFP+0x10>
 801b258:	6801      	ldr	r1, [r0, #0]
 801b25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b25e:	6001      	str	r1, [r0, #0]
 801b260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b262:	bf00      	nop
 801b264:	e000ed88 	.word	0xe000ed88

0801b268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b268:	b480      	push	{r7}
 801b26a:	b085      	sub	sp, #20
 801b26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b26e:	f3ef 8305 	mrs	r3, IPSR
 801b272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	2b0f      	cmp	r3, #15
 801b278:	d914      	bls.n	801b2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b27a:	4a17      	ldr	r2, [pc, #92]	; (801b2d8 <vPortValidateInterruptPriority+0x70>)
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	4413      	add	r3, r2
 801b280:	781b      	ldrb	r3, [r3, #0]
 801b282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b284:	4b15      	ldr	r3, [pc, #84]	; (801b2dc <vPortValidateInterruptPriority+0x74>)
 801b286:	781b      	ldrb	r3, [r3, #0]
 801b288:	7afa      	ldrb	r2, [r7, #11]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d20a      	bcs.n	801b2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b292:	f383 8811 	msr	BASEPRI, r3
 801b296:	f3bf 8f6f 	isb	sy
 801b29a:	f3bf 8f4f 	dsb	sy
 801b29e:	607b      	str	r3, [r7, #4]
}
 801b2a0:	bf00      	nop
 801b2a2:	e7fe      	b.n	801b2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b2a4:	4b0e      	ldr	r3, [pc, #56]	; (801b2e0 <vPortValidateInterruptPriority+0x78>)
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b2ac:	4b0d      	ldr	r3, [pc, #52]	; (801b2e4 <vPortValidateInterruptPriority+0x7c>)
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	429a      	cmp	r2, r3
 801b2b2:	d90a      	bls.n	801b2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2b8:	f383 8811 	msr	BASEPRI, r3
 801b2bc:	f3bf 8f6f 	isb	sy
 801b2c0:	f3bf 8f4f 	dsb	sy
 801b2c4:	603b      	str	r3, [r7, #0]
}
 801b2c6:	bf00      	nop
 801b2c8:	e7fe      	b.n	801b2c8 <vPortValidateInterruptPriority+0x60>
	}
 801b2ca:	bf00      	nop
 801b2cc:	3714      	adds	r7, #20
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d4:	4770      	bx	lr
 801b2d6:	bf00      	nop
 801b2d8:	e000e3f0 	.word	0xe000e3f0
 801b2dc:	20001134 	.word	0x20001134
 801b2e0:	e000ed0c 	.word	0xe000ed0c
 801b2e4:	20001138 	.word	0x20001138

0801b2e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b2e8:	b580      	push	{r7, lr}
 801b2ea:	b08a      	sub	sp, #40	; 0x28
 801b2ec:	af00      	add	r7, sp, #0
 801b2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b2f4:	f7ff f96a 	bl	801a5cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b2f8:	4b5b      	ldr	r3, [pc, #364]	; (801b468 <pvPortMalloc+0x180>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d101      	bne.n	801b304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b300:	f000 f920 	bl	801b544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b304:	4b59      	ldr	r3, [pc, #356]	; (801b46c <pvPortMalloc+0x184>)
 801b306:	681a      	ldr	r2, [r3, #0]
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	4013      	ands	r3, r2
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	f040 8093 	bne.w	801b438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d01d      	beq.n	801b354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b318:	2208      	movs	r2, #8
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	4413      	add	r3, r2
 801b31e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	f003 0307 	and.w	r3, r3, #7
 801b326:	2b00      	cmp	r3, #0
 801b328:	d014      	beq.n	801b354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	f023 0307 	bic.w	r3, r3, #7
 801b330:	3308      	adds	r3, #8
 801b332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	f003 0307 	and.w	r3, r3, #7
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d00a      	beq.n	801b354 <pvPortMalloc+0x6c>
	__asm volatile
 801b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b342:	f383 8811 	msr	BASEPRI, r3
 801b346:	f3bf 8f6f 	isb	sy
 801b34a:	f3bf 8f4f 	dsb	sy
 801b34e:	617b      	str	r3, [r7, #20]
}
 801b350:	bf00      	nop
 801b352:	e7fe      	b.n	801b352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	2b00      	cmp	r3, #0
 801b358:	d06e      	beq.n	801b438 <pvPortMalloc+0x150>
 801b35a:	4b45      	ldr	r3, [pc, #276]	; (801b470 <pvPortMalloc+0x188>)
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	687a      	ldr	r2, [r7, #4]
 801b360:	429a      	cmp	r2, r3
 801b362:	d869      	bhi.n	801b438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b364:	4b43      	ldr	r3, [pc, #268]	; (801b474 <pvPortMalloc+0x18c>)
 801b366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b368:	4b42      	ldr	r3, [pc, #264]	; (801b474 <pvPortMalloc+0x18c>)
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b36e:	e004      	b.n	801b37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b37c:	685b      	ldr	r3, [r3, #4]
 801b37e:	687a      	ldr	r2, [r7, #4]
 801b380:	429a      	cmp	r2, r3
 801b382:	d903      	bls.n	801b38c <pvPortMalloc+0xa4>
 801b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d1f1      	bne.n	801b370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b38c:	4b36      	ldr	r3, [pc, #216]	; (801b468 <pvPortMalloc+0x180>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b392:	429a      	cmp	r2, r3
 801b394:	d050      	beq.n	801b438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b396:	6a3b      	ldr	r3, [r7, #32]
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	2208      	movs	r2, #8
 801b39c:	4413      	add	r3, r2
 801b39e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a2:	681a      	ldr	r2, [r3, #0]
 801b3a4:	6a3b      	ldr	r3, [r7, #32]
 801b3a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3aa:	685a      	ldr	r2, [r3, #4]
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	1ad2      	subs	r2, r2, r3
 801b3b0:	2308      	movs	r3, #8
 801b3b2:	005b      	lsls	r3, r3, #1
 801b3b4:	429a      	cmp	r2, r3
 801b3b6:	d91f      	bls.n	801b3f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	4413      	add	r3, r2
 801b3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b3c0:	69bb      	ldr	r3, [r7, #24]
 801b3c2:	f003 0307 	and.w	r3, r3, #7
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d00a      	beq.n	801b3e0 <pvPortMalloc+0xf8>
	__asm volatile
 801b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3ce:	f383 8811 	msr	BASEPRI, r3
 801b3d2:	f3bf 8f6f 	isb	sy
 801b3d6:	f3bf 8f4f 	dsb	sy
 801b3da:	613b      	str	r3, [r7, #16]
}
 801b3dc:	bf00      	nop
 801b3de:	e7fe      	b.n	801b3de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3e2:	685a      	ldr	r2, [r3, #4]
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	1ad2      	subs	r2, r2, r3
 801b3e8:	69bb      	ldr	r3, [r7, #24]
 801b3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3ee:	687a      	ldr	r2, [r7, #4]
 801b3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b3f2:	69b8      	ldr	r0, [r7, #24]
 801b3f4:	f000 f908 	bl	801b608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b3f8:	4b1d      	ldr	r3, [pc, #116]	; (801b470 <pvPortMalloc+0x188>)
 801b3fa:	681a      	ldr	r2, [r3, #0]
 801b3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3fe:	685b      	ldr	r3, [r3, #4]
 801b400:	1ad3      	subs	r3, r2, r3
 801b402:	4a1b      	ldr	r2, [pc, #108]	; (801b470 <pvPortMalloc+0x188>)
 801b404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b406:	4b1a      	ldr	r3, [pc, #104]	; (801b470 <pvPortMalloc+0x188>)
 801b408:	681a      	ldr	r2, [r3, #0]
 801b40a:	4b1b      	ldr	r3, [pc, #108]	; (801b478 <pvPortMalloc+0x190>)
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	429a      	cmp	r2, r3
 801b410:	d203      	bcs.n	801b41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b412:	4b17      	ldr	r3, [pc, #92]	; (801b470 <pvPortMalloc+0x188>)
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	4a18      	ldr	r2, [pc, #96]	; (801b478 <pvPortMalloc+0x190>)
 801b418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b41c:	685a      	ldr	r2, [r3, #4]
 801b41e:	4b13      	ldr	r3, [pc, #76]	; (801b46c <pvPortMalloc+0x184>)
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	431a      	orrs	r2, r3
 801b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b42a:	2200      	movs	r2, #0
 801b42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b42e:	4b13      	ldr	r3, [pc, #76]	; (801b47c <pvPortMalloc+0x194>)
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	3301      	adds	r3, #1
 801b434:	4a11      	ldr	r2, [pc, #68]	; (801b47c <pvPortMalloc+0x194>)
 801b436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b438:	f7ff f8d6 	bl	801a5e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b43c:	69fb      	ldr	r3, [r7, #28]
 801b43e:	f003 0307 	and.w	r3, r3, #7
 801b442:	2b00      	cmp	r3, #0
 801b444:	d00a      	beq.n	801b45c <pvPortMalloc+0x174>
	__asm volatile
 801b446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b44a:	f383 8811 	msr	BASEPRI, r3
 801b44e:	f3bf 8f6f 	isb	sy
 801b452:	f3bf 8f4f 	dsb	sy
 801b456:	60fb      	str	r3, [r7, #12]
}
 801b458:	bf00      	nop
 801b45a:	e7fe      	b.n	801b45a <pvPortMalloc+0x172>
	return pvReturn;
 801b45c:	69fb      	ldr	r3, [r7, #28]
}
 801b45e:	4618      	mov	r0, r3
 801b460:	3728      	adds	r7, #40	; 0x28
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}
 801b466:	bf00      	nop
 801b468:	2000d944 	.word	0x2000d944
 801b46c:	2000d958 	.word	0x2000d958
 801b470:	2000d948 	.word	0x2000d948
 801b474:	2000d93c 	.word	0x2000d93c
 801b478:	2000d94c 	.word	0x2000d94c
 801b47c:	2000d950 	.word	0x2000d950

0801b480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b480:	b580      	push	{r7, lr}
 801b482:	b086      	sub	sp, #24
 801b484:	af00      	add	r7, sp, #0
 801b486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d04d      	beq.n	801b52e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b492:	2308      	movs	r3, #8
 801b494:	425b      	negs	r3, r3
 801b496:	697a      	ldr	r2, [r7, #20]
 801b498:	4413      	add	r3, r2
 801b49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b49c:	697b      	ldr	r3, [r7, #20]
 801b49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	685a      	ldr	r2, [r3, #4]
 801b4a4:	4b24      	ldr	r3, [pc, #144]	; (801b538 <vPortFree+0xb8>)
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	4013      	ands	r3, r2
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d10a      	bne.n	801b4c4 <vPortFree+0x44>
	__asm volatile
 801b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4b2:	f383 8811 	msr	BASEPRI, r3
 801b4b6:	f3bf 8f6f 	isb	sy
 801b4ba:	f3bf 8f4f 	dsb	sy
 801b4be:	60fb      	str	r3, [r7, #12]
}
 801b4c0:	bf00      	nop
 801b4c2:	e7fe      	b.n	801b4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b4c4:	693b      	ldr	r3, [r7, #16]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d00a      	beq.n	801b4e2 <vPortFree+0x62>
	__asm volatile
 801b4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4d0:	f383 8811 	msr	BASEPRI, r3
 801b4d4:	f3bf 8f6f 	isb	sy
 801b4d8:	f3bf 8f4f 	dsb	sy
 801b4dc:	60bb      	str	r3, [r7, #8]
}
 801b4de:	bf00      	nop
 801b4e0:	e7fe      	b.n	801b4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b4e2:	693b      	ldr	r3, [r7, #16]
 801b4e4:	685a      	ldr	r2, [r3, #4]
 801b4e6:	4b14      	ldr	r3, [pc, #80]	; (801b538 <vPortFree+0xb8>)
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	4013      	ands	r3, r2
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d01e      	beq.n	801b52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b4f0:	693b      	ldr	r3, [r7, #16]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d11a      	bne.n	801b52e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b4f8:	693b      	ldr	r3, [r7, #16]
 801b4fa:	685a      	ldr	r2, [r3, #4]
 801b4fc:	4b0e      	ldr	r3, [pc, #56]	; (801b538 <vPortFree+0xb8>)
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	43db      	mvns	r3, r3
 801b502:	401a      	ands	r2, r3
 801b504:	693b      	ldr	r3, [r7, #16]
 801b506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b508:	f7ff f860 	bl	801a5cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b50c:	693b      	ldr	r3, [r7, #16]
 801b50e:	685a      	ldr	r2, [r3, #4]
 801b510:	4b0a      	ldr	r3, [pc, #40]	; (801b53c <vPortFree+0xbc>)
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	4413      	add	r3, r2
 801b516:	4a09      	ldr	r2, [pc, #36]	; (801b53c <vPortFree+0xbc>)
 801b518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b51a:	6938      	ldr	r0, [r7, #16]
 801b51c:	f000 f874 	bl	801b608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b520:	4b07      	ldr	r3, [pc, #28]	; (801b540 <vPortFree+0xc0>)
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	3301      	adds	r3, #1
 801b526:	4a06      	ldr	r2, [pc, #24]	; (801b540 <vPortFree+0xc0>)
 801b528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801b52a:	f7ff f85d 	bl	801a5e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b52e:	bf00      	nop
 801b530:	3718      	adds	r7, #24
 801b532:	46bd      	mov	sp, r7
 801b534:	bd80      	pop	{r7, pc}
 801b536:	bf00      	nop
 801b538:	2000d958 	.word	0x2000d958
 801b53c:	2000d948 	.word	0x2000d948
 801b540:	2000d954 	.word	0x2000d954

0801b544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b544:	b480      	push	{r7}
 801b546:	b085      	sub	sp, #20
 801b548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b54a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 801b54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b550:	4b27      	ldr	r3, [pc, #156]	; (801b5f0 <prvHeapInit+0xac>)
 801b552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b554:	68fb      	ldr	r3, [r7, #12]
 801b556:	f003 0307 	and.w	r3, r3, #7
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d00c      	beq.n	801b578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	3307      	adds	r3, #7
 801b562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	f023 0307 	bic.w	r3, r3, #7
 801b56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b56c:	68ba      	ldr	r2, [r7, #8]
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	1ad3      	subs	r3, r2, r3
 801b572:	4a1f      	ldr	r2, [pc, #124]	; (801b5f0 <prvHeapInit+0xac>)
 801b574:	4413      	add	r3, r2
 801b576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b57c:	4a1d      	ldr	r2, [pc, #116]	; (801b5f4 <prvHeapInit+0xb0>)
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b582:	4b1c      	ldr	r3, [pc, #112]	; (801b5f4 <prvHeapInit+0xb0>)
 801b584:	2200      	movs	r2, #0
 801b586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	68ba      	ldr	r2, [r7, #8]
 801b58c:	4413      	add	r3, r2
 801b58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b590:	2208      	movs	r2, #8
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	1a9b      	subs	r3, r3, r2
 801b596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	f023 0307 	bic.w	r3, r3, #7
 801b59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	4a15      	ldr	r2, [pc, #84]	; (801b5f8 <prvHeapInit+0xb4>)
 801b5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b5a6:	4b14      	ldr	r3, [pc, #80]	; (801b5f8 <prvHeapInit+0xb4>)
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	2200      	movs	r2, #0
 801b5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b5ae:	4b12      	ldr	r3, [pc, #72]	; (801b5f8 <prvHeapInit+0xb4>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	2200      	movs	r2, #0
 801b5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b5ba:	683b      	ldr	r3, [r7, #0]
 801b5bc:	68fa      	ldr	r2, [r7, #12]
 801b5be:	1ad2      	subs	r2, r2, r3
 801b5c0:	683b      	ldr	r3, [r7, #0]
 801b5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b5c4:	4b0c      	ldr	r3, [pc, #48]	; (801b5f8 <prvHeapInit+0xb4>)
 801b5c6:	681a      	ldr	r2, [r3, #0]
 801b5c8:	683b      	ldr	r3, [r7, #0]
 801b5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b5cc:	683b      	ldr	r3, [r7, #0]
 801b5ce:	685b      	ldr	r3, [r3, #4]
 801b5d0:	4a0a      	ldr	r2, [pc, #40]	; (801b5fc <prvHeapInit+0xb8>)
 801b5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	685b      	ldr	r3, [r3, #4]
 801b5d8:	4a09      	ldr	r2, [pc, #36]	; (801b600 <prvHeapInit+0xbc>)
 801b5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b5dc:	4b09      	ldr	r3, [pc, #36]	; (801b604 <prvHeapInit+0xc0>)
 801b5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b5e2:	601a      	str	r2, [r3, #0]
}
 801b5e4:	bf00      	nop
 801b5e6:	3714      	adds	r7, #20
 801b5e8:	46bd      	mov	sp, r7
 801b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ee:	4770      	bx	lr
 801b5f0:	2000113c 	.word	0x2000113c
 801b5f4:	2000d93c 	.word	0x2000d93c
 801b5f8:	2000d944 	.word	0x2000d944
 801b5fc:	2000d94c 	.word	0x2000d94c
 801b600:	2000d948 	.word	0x2000d948
 801b604:	2000d958 	.word	0x2000d958

0801b608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b608:	b480      	push	{r7}
 801b60a:	b085      	sub	sp, #20
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b610:	4b28      	ldr	r3, [pc, #160]	; (801b6b4 <prvInsertBlockIntoFreeList+0xac>)
 801b612:	60fb      	str	r3, [r7, #12]
 801b614:	e002      	b.n	801b61c <prvInsertBlockIntoFreeList+0x14>
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	60fb      	str	r3, [r7, #12]
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	687a      	ldr	r2, [r7, #4]
 801b622:	429a      	cmp	r2, r3
 801b624:	d8f7      	bhi.n	801b616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b626:	68fb      	ldr	r3, [r7, #12]
 801b628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	685b      	ldr	r3, [r3, #4]
 801b62e:	68ba      	ldr	r2, [r7, #8]
 801b630:	4413      	add	r3, r2
 801b632:	687a      	ldr	r2, [r7, #4]
 801b634:	429a      	cmp	r2, r3
 801b636:	d108      	bne.n	801b64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	685a      	ldr	r2, [r3, #4]
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	685b      	ldr	r3, [r3, #4]
 801b640:	441a      	add	r2, r3
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	685b      	ldr	r3, [r3, #4]
 801b652:	68ba      	ldr	r2, [r7, #8]
 801b654:	441a      	add	r2, r3
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	429a      	cmp	r2, r3
 801b65c:	d118      	bne.n	801b690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	681a      	ldr	r2, [r3, #0]
 801b662:	4b15      	ldr	r3, [pc, #84]	; (801b6b8 <prvInsertBlockIntoFreeList+0xb0>)
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	429a      	cmp	r2, r3
 801b668:	d00d      	beq.n	801b686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	685a      	ldr	r2, [r3, #4]
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	685b      	ldr	r3, [r3, #4]
 801b674:	441a      	add	r2, r3
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	681a      	ldr	r2, [r3, #0]
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	601a      	str	r2, [r3, #0]
 801b684:	e008      	b.n	801b698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b686:	4b0c      	ldr	r3, [pc, #48]	; (801b6b8 <prvInsertBlockIntoFreeList+0xb0>)
 801b688:	681a      	ldr	r2, [r3, #0]
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	601a      	str	r2, [r3, #0]
 801b68e:	e003      	b.n	801b698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	681a      	ldr	r2, [r3, #0]
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b698:	68fa      	ldr	r2, [r7, #12]
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	429a      	cmp	r2, r3
 801b69e:	d002      	beq.n	801b6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	687a      	ldr	r2, [r7, #4]
 801b6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b6a6:	bf00      	nop
 801b6a8:	3714      	adds	r7, #20
 801b6aa:	46bd      	mov	sp, r7
 801b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6b0:	4770      	bx	lr
 801b6b2:	bf00      	nop
 801b6b4:	2000d93c 	.word	0x2000d93c
 801b6b8:	2000d944 	.word	0x2000d944

0801b6bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b6c0:	2200      	movs	r2, #0
 801b6c2:	4912      	ldr	r1, [pc, #72]	; (801b70c <MX_USB_DEVICE_Init+0x50>)
 801b6c4:	4812      	ldr	r0, [pc, #72]	; (801b710 <MX_USB_DEVICE_Init+0x54>)
 801b6c6:	f7fa fd36 	bl	8016136 <USBD_Init>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d001      	beq.n	801b6d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b6d0:	f7e7 fda4 	bl	800321c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801b6d4:	490f      	ldr	r1, [pc, #60]	; (801b714 <MX_USB_DEVICE_Init+0x58>)
 801b6d6:	480e      	ldr	r0, [pc, #56]	; (801b710 <MX_USB_DEVICE_Init+0x54>)
 801b6d8:	f7fa fd5d 	bl	8016196 <USBD_RegisterClass>
 801b6dc:	4603      	mov	r3, r0
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d001      	beq.n	801b6e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b6e2:	f7e7 fd9b 	bl	800321c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801b6e6:	490c      	ldr	r1, [pc, #48]	; (801b718 <MX_USB_DEVICE_Init+0x5c>)
 801b6e8:	4809      	ldr	r0, [pc, #36]	; (801b710 <MX_USB_DEVICE_Init+0x54>)
 801b6ea:	f7f9 f807 	bl	80146fc <USBD_MSC_RegisterStorage>
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d001      	beq.n	801b6f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b6f4:	f7e7 fd92 	bl	800321c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b6f8:	4805      	ldr	r0, [pc, #20]	; (801b710 <MX_USB_DEVICE_Init+0x54>)
 801b6fa:	f7fa fd82 	bl	8016202 <USBD_Start>
 801b6fe:	4603      	mov	r3, r0
 801b700:	2b00      	cmp	r3, #0
 801b702:	d001      	beq.n	801b708 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b704:	f7e7 fd8a 	bl	800321c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b708:	bf00      	nop
 801b70a:	bd80      	pop	{r7, pc}
 801b70c:	200000bc 	.word	0x200000bc
 801b710:	2000d95c 	.word	0x2000d95c
 801b714:	20000010 	.word	0x20000010
 801b718:	2000010c 	.word	0x2000010c

0801b71c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b71c:	b480      	push	{r7}
 801b71e:	b083      	sub	sp, #12
 801b720:	af00      	add	r7, sp, #0
 801b722:	4603      	mov	r3, r0
 801b724:	6039      	str	r1, [r7, #0]
 801b726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b728:	683b      	ldr	r3, [r7, #0]
 801b72a:	2212      	movs	r2, #18
 801b72c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b72e:	4b03      	ldr	r3, [pc, #12]	; (801b73c <USBD_FS_DeviceDescriptor+0x20>)
}
 801b730:	4618      	mov	r0, r3
 801b732:	370c      	adds	r7, #12
 801b734:	46bd      	mov	sp, r7
 801b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73a:	4770      	bx	lr
 801b73c:	200000d8 	.word	0x200000d8

0801b740 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b740:	b480      	push	{r7}
 801b742:	b083      	sub	sp, #12
 801b744:	af00      	add	r7, sp, #0
 801b746:	4603      	mov	r3, r0
 801b748:	6039      	str	r1, [r7, #0]
 801b74a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	2204      	movs	r2, #4
 801b750:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b752:	4b03      	ldr	r3, [pc, #12]	; (801b760 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b754:	4618      	mov	r0, r3
 801b756:	370c      	adds	r7, #12
 801b758:	46bd      	mov	sp, r7
 801b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b75e:	4770      	bx	lr
 801b760:	200000ec 	.word	0x200000ec

0801b764 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b764:	b580      	push	{r7, lr}
 801b766:	b082      	sub	sp, #8
 801b768:	af00      	add	r7, sp, #0
 801b76a:	4603      	mov	r3, r0
 801b76c:	6039      	str	r1, [r7, #0]
 801b76e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b770:	79fb      	ldrb	r3, [r7, #7]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d105      	bne.n	801b782 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b776:	683a      	ldr	r2, [r7, #0]
 801b778:	4907      	ldr	r1, [pc, #28]	; (801b798 <USBD_FS_ProductStrDescriptor+0x34>)
 801b77a:	4808      	ldr	r0, [pc, #32]	; (801b79c <USBD_FS_ProductStrDescriptor+0x38>)
 801b77c:	f7fb feee 	bl	801755c <USBD_GetString>
 801b780:	e004      	b.n	801b78c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b782:	683a      	ldr	r2, [r7, #0]
 801b784:	4904      	ldr	r1, [pc, #16]	; (801b798 <USBD_FS_ProductStrDescriptor+0x34>)
 801b786:	4805      	ldr	r0, [pc, #20]	; (801b79c <USBD_FS_ProductStrDescriptor+0x38>)
 801b788:	f7fb fee8 	bl	801755c <USBD_GetString>
  }
  return USBD_StrDesc;
 801b78c:	4b02      	ldr	r3, [pc, #8]	; (801b798 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b78e:	4618      	mov	r0, r3
 801b790:	3708      	adds	r7, #8
 801b792:	46bd      	mov	sp, r7
 801b794:	bd80      	pop	{r7, pc}
 801b796:	bf00      	nop
 801b798:	2000dc38 	.word	0x2000dc38
 801b79c:	0801e4f0 	.word	0x0801e4f0

0801b7a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b7a0:	b580      	push	{r7, lr}
 801b7a2:	b082      	sub	sp, #8
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	6039      	str	r1, [r7, #0]
 801b7aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b7ac:	683a      	ldr	r2, [r7, #0]
 801b7ae:	4904      	ldr	r1, [pc, #16]	; (801b7c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b7b0:	4804      	ldr	r0, [pc, #16]	; (801b7c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b7b2:	f7fb fed3 	bl	801755c <USBD_GetString>
  return USBD_StrDesc;
 801b7b6:	4b02      	ldr	r3, [pc, #8]	; (801b7c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	3708      	adds	r7, #8
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	bd80      	pop	{r7, pc}
 801b7c0:	2000dc38 	.word	0x2000dc38
 801b7c4:	0801e504 	.word	0x0801e504

0801b7c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b7c8:	b580      	push	{r7, lr}
 801b7ca:	b082      	sub	sp, #8
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	6039      	str	r1, [r7, #0]
 801b7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b7d4:	683b      	ldr	r3, [r7, #0]
 801b7d6:	221a      	movs	r2, #26
 801b7d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b7da:	f000 f843 	bl	801b864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b7de:	4b02      	ldr	r3, [pc, #8]	; (801b7e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b7e0:	4618      	mov	r0, r3
 801b7e2:	3708      	adds	r7, #8
 801b7e4:	46bd      	mov	sp, r7
 801b7e6:	bd80      	pop	{r7, pc}
 801b7e8:	200000f0 	.word	0x200000f0

0801b7ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b082      	sub	sp, #8
 801b7f0:	af00      	add	r7, sp, #0
 801b7f2:	4603      	mov	r3, r0
 801b7f4:	6039      	str	r1, [r7, #0]
 801b7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b7f8:	79fb      	ldrb	r3, [r7, #7]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d105      	bne.n	801b80a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b7fe:	683a      	ldr	r2, [r7, #0]
 801b800:	4907      	ldr	r1, [pc, #28]	; (801b820 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b802:	4808      	ldr	r0, [pc, #32]	; (801b824 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b804:	f7fb feaa 	bl	801755c <USBD_GetString>
 801b808:	e004      	b.n	801b814 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b80a:	683a      	ldr	r2, [r7, #0]
 801b80c:	4904      	ldr	r1, [pc, #16]	; (801b820 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b80e:	4805      	ldr	r0, [pc, #20]	; (801b824 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b810:	f7fb fea4 	bl	801755c <USBD_GetString>
  }
  return USBD_StrDesc;
 801b814:	4b02      	ldr	r3, [pc, #8]	; (801b820 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b816:	4618      	mov	r0, r3
 801b818:	3708      	adds	r7, #8
 801b81a:	46bd      	mov	sp, r7
 801b81c:	bd80      	pop	{r7, pc}
 801b81e:	bf00      	nop
 801b820:	2000dc38 	.word	0x2000dc38
 801b824:	0801e518 	.word	0x0801e518

0801b828 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b828:	b580      	push	{r7, lr}
 801b82a:	b082      	sub	sp, #8
 801b82c:	af00      	add	r7, sp, #0
 801b82e:	4603      	mov	r3, r0
 801b830:	6039      	str	r1, [r7, #0]
 801b832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b834:	79fb      	ldrb	r3, [r7, #7]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d105      	bne.n	801b846 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b83a:	683a      	ldr	r2, [r7, #0]
 801b83c:	4907      	ldr	r1, [pc, #28]	; (801b85c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b83e:	4808      	ldr	r0, [pc, #32]	; (801b860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b840:	f7fb fe8c 	bl	801755c <USBD_GetString>
 801b844:	e004      	b.n	801b850 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b846:	683a      	ldr	r2, [r7, #0]
 801b848:	4904      	ldr	r1, [pc, #16]	; (801b85c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b84a:	4805      	ldr	r0, [pc, #20]	; (801b860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b84c:	f7fb fe86 	bl	801755c <USBD_GetString>
  }
  return USBD_StrDesc;
 801b850:	4b02      	ldr	r3, [pc, #8]	; (801b85c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b852:	4618      	mov	r0, r3
 801b854:	3708      	adds	r7, #8
 801b856:	46bd      	mov	sp, r7
 801b858:	bd80      	pop	{r7, pc}
 801b85a:	bf00      	nop
 801b85c:	2000dc38 	.word	0x2000dc38
 801b860:	0801e524 	.word	0x0801e524

0801b864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b084      	sub	sp, #16
 801b868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b86a:	4b0f      	ldr	r3, [pc, #60]	; (801b8a8 <Get_SerialNum+0x44>)
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b870:	4b0e      	ldr	r3, [pc, #56]	; (801b8ac <Get_SerialNum+0x48>)
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b876:	4b0e      	ldr	r3, [pc, #56]	; (801b8b0 <Get_SerialNum+0x4c>)
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b87c:	68fa      	ldr	r2, [r7, #12]
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	4413      	add	r3, r2
 801b882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	2b00      	cmp	r3, #0
 801b888:	d009      	beq.n	801b89e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b88a:	2208      	movs	r2, #8
 801b88c:	4909      	ldr	r1, [pc, #36]	; (801b8b4 <Get_SerialNum+0x50>)
 801b88e:	68f8      	ldr	r0, [r7, #12]
 801b890:	f000 f814 	bl	801b8bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b894:	2204      	movs	r2, #4
 801b896:	4908      	ldr	r1, [pc, #32]	; (801b8b8 <Get_SerialNum+0x54>)
 801b898:	68b8      	ldr	r0, [r7, #8]
 801b89a:	f000 f80f 	bl	801b8bc <IntToUnicode>
  }
}
 801b89e:	bf00      	nop
 801b8a0:	3710      	adds	r7, #16
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	bd80      	pop	{r7, pc}
 801b8a6:	bf00      	nop
 801b8a8:	1fff7a10 	.word	0x1fff7a10
 801b8ac:	1fff7a14 	.word	0x1fff7a14
 801b8b0:	1fff7a18 	.word	0x1fff7a18
 801b8b4:	200000f2 	.word	0x200000f2
 801b8b8:	20000102 	.word	0x20000102

0801b8bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b8bc:	b480      	push	{r7}
 801b8be:	b087      	sub	sp, #28
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	60f8      	str	r0, [r7, #12]
 801b8c4:	60b9      	str	r1, [r7, #8]
 801b8c6:	4613      	mov	r3, r2
 801b8c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b8ce:	2300      	movs	r3, #0
 801b8d0:	75fb      	strb	r3, [r7, #23]
 801b8d2:	e027      	b.n	801b924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	0f1b      	lsrs	r3, r3, #28
 801b8d8:	2b09      	cmp	r3, #9
 801b8da:	d80b      	bhi.n	801b8f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	0f1b      	lsrs	r3, r3, #28
 801b8e0:	b2da      	uxtb	r2, r3
 801b8e2:	7dfb      	ldrb	r3, [r7, #23]
 801b8e4:	005b      	lsls	r3, r3, #1
 801b8e6:	4619      	mov	r1, r3
 801b8e8:	68bb      	ldr	r3, [r7, #8]
 801b8ea:	440b      	add	r3, r1
 801b8ec:	3230      	adds	r2, #48	; 0x30
 801b8ee:	b2d2      	uxtb	r2, r2
 801b8f0:	701a      	strb	r2, [r3, #0]
 801b8f2:	e00a      	b.n	801b90a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	0f1b      	lsrs	r3, r3, #28
 801b8f8:	b2da      	uxtb	r2, r3
 801b8fa:	7dfb      	ldrb	r3, [r7, #23]
 801b8fc:	005b      	lsls	r3, r3, #1
 801b8fe:	4619      	mov	r1, r3
 801b900:	68bb      	ldr	r3, [r7, #8]
 801b902:	440b      	add	r3, r1
 801b904:	3237      	adds	r2, #55	; 0x37
 801b906:	b2d2      	uxtb	r2, r2
 801b908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b90a:	68fb      	ldr	r3, [r7, #12]
 801b90c:	011b      	lsls	r3, r3, #4
 801b90e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b910:	7dfb      	ldrb	r3, [r7, #23]
 801b912:	005b      	lsls	r3, r3, #1
 801b914:	3301      	adds	r3, #1
 801b916:	68ba      	ldr	r2, [r7, #8]
 801b918:	4413      	add	r3, r2
 801b91a:	2200      	movs	r2, #0
 801b91c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b91e:	7dfb      	ldrb	r3, [r7, #23]
 801b920:	3301      	adds	r3, #1
 801b922:	75fb      	strb	r3, [r7, #23]
 801b924:	7dfa      	ldrb	r2, [r7, #23]
 801b926:	79fb      	ldrb	r3, [r7, #7]
 801b928:	429a      	cmp	r2, r3
 801b92a:	d3d3      	bcc.n	801b8d4 <IntToUnicode+0x18>
  }
}
 801b92c:	bf00      	nop
 801b92e:	bf00      	nop
 801b930:	371c      	adds	r7, #28
 801b932:	46bd      	mov	sp, r7
 801b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b938:	4770      	bx	lr

0801b93a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801b93a:	b480      	push	{r7}
 801b93c:	b083      	sub	sp, #12
 801b93e:	af00      	add	r7, sp, #0
 801b940:	4603      	mov	r3, r0
 801b942:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801b944:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801b946:	4618      	mov	r0, r3
 801b948:	370c      	adds	r7, #12
 801b94a:	46bd      	mov	sp, r7
 801b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b950:	4770      	bx	lr
	...

0801b954 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801b954:	b580      	push	{r7, lr}
 801b956:	b08e      	sub	sp, #56	; 0x38
 801b958:	af00      	add	r7, sp, #0
 801b95a:	4603      	mov	r3, r0
 801b95c:	60b9      	str	r1, [r7, #8]
 801b95e:	607a      	str	r2, [r7, #4]
 801b960:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;
  int8_t ret = -1;
 801b962:	23ff      	movs	r3, #255	; 0xff
 801b964:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  HAL_SD_GetCardInfo(&hsd, &info);
 801b968:	f107 0314 	add.w	r3, r7, #20
 801b96c:	4619      	mov	r1, r3
 801b96e:	480a      	ldr	r0, [pc, #40]	; (801b998 <STORAGE_GetCapacity_FS+0x44>)
 801b970:	f7f2 fc3a 	bl	800e1e8 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr  - 1;
 801b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b976:	1e5a      	subs	r2, r3, #1
 801b978:	68bb      	ldr	r3, [r7, #8]
 801b97a:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 801b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b97e:	b29a      	uxth	r2, r3
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	801a      	strh	r2, [r3, #0]
  ret = 0;
 801b984:	2300      	movs	r3, #0
 801b986:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  return ret;
 801b98a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801b98e:	4618      	mov	r0, r3
 801b990:	3738      	adds	r7, #56	; 0x38
 801b992:	46bd      	mov	sp, r7
 801b994:	bd80      	pop	{r7, pc}
 801b996:	bf00      	nop
 801b998:	200004b4 	.word	0x200004b4

0801b99c <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801b99c:	b480      	push	{r7}
 801b99e:	b083      	sub	sp, #12
 801b9a0:	af00      	add	r7, sp, #0
 801b9a2:	4603      	mov	r3, r0
 801b9a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801b9a6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b9a8:	4618      	mov	r0, r3
 801b9aa:	370c      	adds	r7, #12
 801b9ac:	46bd      	mov	sp, r7
 801b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9b2:	4770      	bx	lr

0801b9b4 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801b9b4:	b480      	push	{r7}
 801b9b6:	b083      	sub	sp, #12
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	4603      	mov	r3, r0
 801b9bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801b9be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	370c      	adds	r7, #12
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ca:	4770      	bx	lr

0801b9cc <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b088      	sub	sp, #32
 801b9d0:	af02      	add	r7, sp, #8
 801b9d2:	60b9      	str	r1, [r7, #8]
 801b9d4:	607a      	str	r2, [r7, #4]
 801b9d6:	461a      	mov	r2, r3
 801b9d8:	4603      	mov	r3, r0
 801b9da:	73fb      	strb	r3, [r7, #15]
 801b9dc:	4613      	mov	r3, r2
 801b9de:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

   int8_t ret = -1;
 801b9e0:	23ff      	movs	r3, #255	; 0xff
 801b9e2:	75fb      	strb	r3, [r7, #23]

  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801b9e4:	89bb      	ldrh	r3, [r7, #12]
 801b9e6:	f04f 32ff 	mov.w	r2, #4294967295
 801b9ea:	9200      	str	r2, [sp, #0]
 801b9ec:	687a      	ldr	r2, [r7, #4]
 801b9ee:	68b9      	ldr	r1, [r7, #8]
 801b9f0:	4808      	ldr	r0, [pc, #32]	; (801ba14 <STORAGE_Read_FS+0x48>)
 801b9f2:	f7f1 fef1 	bl	800d7d8 <HAL_SD_ReadBlocks>

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801b9f6:	bf00      	nop
 801b9f8:	4806      	ldr	r0, [pc, #24]	; (801ba14 <STORAGE_Read_FS+0x48>)
 801b9fa:	f7f2 fcbb 	bl	800e374 <HAL_SD_GetCardState>
 801b9fe:	4603      	mov	r3, r0
 801ba00:	2b04      	cmp	r3, #4
 801ba02:	d1f9      	bne.n	801b9f8 <STORAGE_Read_FS+0x2c>
  ret = 0;
 801ba04:	2300      	movs	r3, #0
 801ba06:	75fb      	strb	r3, [r7, #23]
  return ret;
 801ba08:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	3718      	adds	r7, #24
 801ba10:	46bd      	mov	sp, r7
 801ba12:	bd80      	pop	{r7, pc}
 801ba14:	200004b4 	.word	0x200004b4

0801ba18 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b088      	sub	sp, #32
 801ba1c:	af02      	add	r7, sp, #8
 801ba1e:	60b9      	str	r1, [r7, #8]
 801ba20:	607a      	str	r2, [r7, #4]
 801ba22:	461a      	mov	r2, r3
 801ba24:	4603      	mov	r3, r0
 801ba26:	73fb      	strb	r3, [r7, #15]
 801ba28:	4613      	mov	r3, r2
 801ba2a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  int8_t ret = -1;
 801ba2c:	23ff      	movs	r3, #255	; 0xff
 801ba2e:	75fb      	strb	r3, [r7, #23]

   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801ba30:	89bb      	ldrh	r3, [r7, #12]
 801ba32:	f04f 32ff 	mov.w	r2, #4294967295
 801ba36:	9200      	str	r2, [sp, #0]
 801ba38:	687a      	ldr	r2, [r7, #4]
 801ba3a:	68b9      	ldr	r1, [r7, #8]
 801ba3c:	4808      	ldr	r0, [pc, #32]	; (801ba60 <STORAGE_Write_FS+0x48>)
 801ba3e:	f7f2 f8a9 	bl	800db94 <HAL_SD_WriteBlocks>


  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801ba42:	bf00      	nop
 801ba44:	4806      	ldr	r0, [pc, #24]	; (801ba60 <STORAGE_Write_FS+0x48>)
 801ba46:	f7f2 fc95 	bl	800e374 <HAL_SD_GetCardState>
 801ba4a:	4603      	mov	r3, r0
 801ba4c:	2b04      	cmp	r3, #4
 801ba4e:	d1f9      	bne.n	801ba44 <STORAGE_Write_FS+0x2c>
  ret = 0;
 801ba50:	2300      	movs	r3, #0
 801ba52:	75fb      	strb	r3, [r7, #23]
  return ret;
 801ba54:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801ba58:	4618      	mov	r0, r3
 801ba5a:	3718      	adds	r7, #24
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	bd80      	pop	{r7, pc}
 801ba60:	200004b4 	.word	0x200004b4

0801ba64 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801ba64:	b480      	push	{r7}
 801ba66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801ba68:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801ba6a:	4618      	mov	r0, r3
 801ba6c:	46bd      	mov	sp, r7
 801ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba72:	4770      	bx	lr

0801ba74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ba74:	b580      	push	{r7, lr}
 801ba76:	b08a      	sub	sp, #40	; 0x28
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ba7c:	f107 0314 	add.w	r3, r7, #20
 801ba80:	2200      	movs	r2, #0
 801ba82:	601a      	str	r2, [r3, #0]
 801ba84:	605a      	str	r2, [r3, #4]
 801ba86:	609a      	str	r2, [r3, #8]
 801ba88:	60da      	str	r2, [r3, #12]
 801ba8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ba94:	d13a      	bne.n	801bb0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ba96:	2300      	movs	r3, #0
 801ba98:	613b      	str	r3, [r7, #16]
 801ba9a:	4b1e      	ldr	r3, [pc, #120]	; (801bb14 <HAL_PCD_MspInit+0xa0>)
 801ba9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba9e:	4a1d      	ldr	r2, [pc, #116]	; (801bb14 <HAL_PCD_MspInit+0xa0>)
 801baa0:	f043 0301 	orr.w	r3, r3, #1
 801baa4:	6313      	str	r3, [r2, #48]	; 0x30
 801baa6:	4b1b      	ldr	r3, [pc, #108]	; (801bb14 <HAL_PCD_MspInit+0xa0>)
 801baa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801baaa:	f003 0301 	and.w	r3, r3, #1
 801baae:	613b      	str	r3, [r7, #16]
 801bab0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801bab2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801bab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bab8:	2302      	movs	r3, #2
 801baba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801babc:	2300      	movs	r3, #0
 801babe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bac0:	2303      	movs	r3, #3
 801bac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801bac4:	230a      	movs	r3, #10
 801bac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bac8:	f107 0314 	add.w	r3, r7, #20
 801bacc:	4619      	mov	r1, r3
 801bace:	4812      	ldr	r0, [pc, #72]	; (801bb18 <HAL_PCD_MspInit+0xa4>)
 801bad0:	f7ef fc92 	bl	800b3f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801bad4:	4b0f      	ldr	r3, [pc, #60]	; (801bb14 <HAL_PCD_MspInit+0xa0>)
 801bad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bad8:	4a0e      	ldr	r2, [pc, #56]	; (801bb14 <HAL_PCD_MspInit+0xa0>)
 801bada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bade:	6353      	str	r3, [r2, #52]	; 0x34
 801bae0:	2300      	movs	r3, #0
 801bae2:	60fb      	str	r3, [r7, #12]
 801bae4:	4b0b      	ldr	r3, [pc, #44]	; (801bb14 <HAL_PCD_MspInit+0xa0>)
 801bae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bae8:	4a0a      	ldr	r2, [pc, #40]	; (801bb14 <HAL_PCD_MspInit+0xa0>)
 801baea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801baee:	6453      	str	r3, [r2, #68]	; 0x44
 801baf0:	4b08      	ldr	r3, [pc, #32]	; (801bb14 <HAL_PCD_MspInit+0xa0>)
 801baf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801baf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801baf8:	60fb      	str	r3, [r7, #12]
 801bafa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801bafc:	2200      	movs	r2, #0
 801bafe:	2105      	movs	r1, #5
 801bb00:	2043      	movs	r0, #67	; 0x43
 801bb02:	f7ee fe8b 	bl	800a81c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801bb06:	2043      	movs	r0, #67	; 0x43
 801bb08:	f7ee fea4 	bl	800a854 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801bb0c:	bf00      	nop
 801bb0e:	3728      	adds	r7, #40	; 0x28
 801bb10:	46bd      	mov	sp, r7
 801bb12:	bd80      	pop	{r7, pc}
 801bb14:	40023800 	.word	0x40023800
 801bb18:	40020000 	.word	0x40020000

0801bb1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b082      	sub	sp, #8
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801bb30:	4619      	mov	r1, r3
 801bb32:	4610      	mov	r0, r2
 801bb34:	f7fa fbb2 	bl	801629c <USBD_LL_SetupStage>
}
 801bb38:	bf00      	nop
 801bb3a:	3708      	adds	r7, #8
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}

0801bb40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	b082      	sub	sp, #8
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
 801bb48:	460b      	mov	r3, r1
 801bb4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801bb52:	78fa      	ldrb	r2, [r7, #3]
 801bb54:	6879      	ldr	r1, [r7, #4]
 801bb56:	4613      	mov	r3, r2
 801bb58:	00db      	lsls	r3, r3, #3
 801bb5a:	4413      	add	r3, r2
 801bb5c:	009b      	lsls	r3, r3, #2
 801bb5e:	440b      	add	r3, r1
 801bb60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801bb64:	681a      	ldr	r2, [r3, #0]
 801bb66:	78fb      	ldrb	r3, [r7, #3]
 801bb68:	4619      	mov	r1, r3
 801bb6a:	f7fa fbec 	bl	8016346 <USBD_LL_DataOutStage>
}
 801bb6e:	bf00      	nop
 801bb70:	3708      	adds	r7, #8
 801bb72:	46bd      	mov	sp, r7
 801bb74:	bd80      	pop	{r7, pc}

0801bb76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bb76:	b580      	push	{r7, lr}
 801bb78:	b082      	sub	sp, #8
 801bb7a:	af00      	add	r7, sp, #0
 801bb7c:	6078      	str	r0, [r7, #4]
 801bb7e:	460b      	mov	r3, r1
 801bb80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801bb88:	78fa      	ldrb	r2, [r7, #3]
 801bb8a:	6879      	ldr	r1, [r7, #4]
 801bb8c:	4613      	mov	r3, r2
 801bb8e:	00db      	lsls	r3, r3, #3
 801bb90:	4413      	add	r3, r2
 801bb92:	009b      	lsls	r3, r3, #2
 801bb94:	440b      	add	r3, r1
 801bb96:	334c      	adds	r3, #76	; 0x4c
 801bb98:	681a      	ldr	r2, [r3, #0]
 801bb9a:	78fb      	ldrb	r3, [r7, #3]
 801bb9c:	4619      	mov	r1, r3
 801bb9e:	f7fa fc85 	bl	80164ac <USBD_LL_DataInStage>
}
 801bba2:	bf00      	nop
 801bba4:	3708      	adds	r7, #8
 801bba6:	46bd      	mov	sp, r7
 801bba8:	bd80      	pop	{r7, pc}

0801bbaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bbaa:	b580      	push	{r7, lr}
 801bbac:	b082      	sub	sp, #8
 801bbae:	af00      	add	r7, sp, #0
 801bbb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801bbb8:	4618      	mov	r0, r3
 801bbba:	f7fa fdb9 	bl	8016730 <USBD_LL_SOF>
}
 801bbbe:	bf00      	nop
 801bbc0:	3708      	adds	r7, #8
 801bbc2:	46bd      	mov	sp, r7
 801bbc4:	bd80      	pop	{r7, pc}

0801bbc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bbc6:	b580      	push	{r7, lr}
 801bbc8:	b084      	sub	sp, #16
 801bbca:	af00      	add	r7, sp, #0
 801bbcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801bbce:	2301      	movs	r3, #1
 801bbd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	68db      	ldr	r3, [r3, #12]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d102      	bne.n	801bbe0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801bbda:	2300      	movs	r3, #0
 801bbdc:	73fb      	strb	r3, [r7, #15]
 801bbde:	e008      	b.n	801bbf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	68db      	ldr	r3, [r3, #12]
 801bbe4:	2b02      	cmp	r3, #2
 801bbe6:	d102      	bne.n	801bbee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801bbe8:	2301      	movs	r3, #1
 801bbea:	73fb      	strb	r3, [r7, #15]
 801bbec:	e001      	b.n	801bbf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801bbee:	f7e7 fb15 	bl	800321c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801bbf8:	7bfa      	ldrb	r2, [r7, #15]
 801bbfa:	4611      	mov	r1, r2
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	f7fa fd59 	bl	80166b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7fa fd01 	bl	8016610 <USBD_LL_Reset>
}
 801bc0e:	bf00      	nop
 801bc10:	3710      	adds	r7, #16
 801bc12:	46bd      	mov	sp, r7
 801bc14:	bd80      	pop	{r7, pc}
	...

0801bc18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	b082      	sub	sp, #8
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7fa fd54 	bl	80166d4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	687a      	ldr	r2, [r7, #4]
 801bc38:	6812      	ldr	r2, [r2, #0]
 801bc3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801bc3e:	f043 0301 	orr.w	r3, r3, #1
 801bc42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	6a1b      	ldr	r3, [r3, #32]
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d005      	beq.n	801bc58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bc4c:	4b04      	ldr	r3, [pc, #16]	; (801bc60 <HAL_PCD_SuspendCallback+0x48>)
 801bc4e:	691b      	ldr	r3, [r3, #16]
 801bc50:	4a03      	ldr	r2, [pc, #12]	; (801bc60 <HAL_PCD_SuspendCallback+0x48>)
 801bc52:	f043 0306 	orr.w	r3, r3, #6
 801bc56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801bc58:	bf00      	nop
 801bc5a:	3708      	adds	r7, #8
 801bc5c:	46bd      	mov	sp, r7
 801bc5e:	bd80      	pop	{r7, pc}
 801bc60:	e000ed00 	.word	0xe000ed00

0801bc64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc64:	b580      	push	{r7, lr}
 801bc66:	b082      	sub	sp, #8
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801bc72:	4618      	mov	r0, r3
 801bc74:	f7fa fd44 	bl	8016700 <USBD_LL_Resume>
}
 801bc78:	bf00      	nop
 801bc7a:	3708      	adds	r7, #8
 801bc7c:	46bd      	mov	sp, r7
 801bc7e:	bd80      	pop	{r7, pc}

0801bc80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b082      	sub	sp, #8
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	6078      	str	r0, [r7, #4]
 801bc88:	460b      	mov	r3, r1
 801bc8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801bc92:	78fa      	ldrb	r2, [r7, #3]
 801bc94:	4611      	mov	r1, r2
 801bc96:	4618      	mov	r0, r3
 801bc98:	f7fa fd9c 	bl	80167d4 <USBD_LL_IsoOUTIncomplete>
}
 801bc9c:	bf00      	nop
 801bc9e:	3708      	adds	r7, #8
 801bca0:	46bd      	mov	sp, r7
 801bca2:	bd80      	pop	{r7, pc}

0801bca4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b082      	sub	sp, #8
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
 801bcac:	460b      	mov	r3, r1
 801bcae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801bcb6:	78fa      	ldrb	r2, [r7, #3]
 801bcb8:	4611      	mov	r1, r2
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f7fa fd58 	bl	8016770 <USBD_LL_IsoINIncomplete>
}
 801bcc0:	bf00      	nop
 801bcc2:	3708      	adds	r7, #8
 801bcc4:	46bd      	mov	sp, r7
 801bcc6:	bd80      	pop	{r7, pc}

0801bcc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b082      	sub	sp, #8
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	f7fa fdae 	bl	8016838 <USBD_LL_DevConnected>
}
 801bcdc:	bf00      	nop
 801bcde:	3708      	adds	r7, #8
 801bce0:	46bd      	mov	sp, r7
 801bce2:	bd80      	pop	{r7, pc}

0801bce4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bce4:	b580      	push	{r7, lr}
 801bce6:	b082      	sub	sp, #8
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801bcf2:	4618      	mov	r0, r3
 801bcf4:	f7fa fdab 	bl	801684e <USBD_LL_DevDisconnected>
}
 801bcf8:	bf00      	nop
 801bcfa:	3708      	adds	r7, #8
 801bcfc:	46bd      	mov	sp, r7
 801bcfe:	bd80      	pop	{r7, pc}

0801bd00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b082      	sub	sp, #8
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	781b      	ldrb	r3, [r3, #0]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d13c      	bne.n	801bd8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801bd10:	4a20      	ldr	r2, [pc, #128]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	4a1e      	ldr	r2, [pc, #120]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd1c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801bd20:	4b1c      	ldr	r3, [pc, #112]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801bd26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801bd28:	4b1a      	ldr	r3, [pc, #104]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd2a:	2204      	movs	r2, #4
 801bd2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801bd2e:	4b19      	ldr	r3, [pc, #100]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd30:	2202      	movs	r2, #2
 801bd32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801bd34:	4b17      	ldr	r3, [pc, #92]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd36:	2200      	movs	r2, #0
 801bd38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801bd3a:	4b16      	ldr	r3, [pc, #88]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd3c:	2202      	movs	r2, #2
 801bd3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801bd40:	4b14      	ldr	r3, [pc, #80]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd42:	2200      	movs	r2, #0
 801bd44:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801bd46:	4b13      	ldr	r3, [pc, #76]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd48:	2200      	movs	r2, #0
 801bd4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801bd4c:	4b11      	ldr	r3, [pc, #68]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd4e:	2200      	movs	r2, #0
 801bd50:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801bd52:	4b10      	ldr	r3, [pc, #64]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd54:	2200      	movs	r2, #0
 801bd56:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801bd58:	4b0e      	ldr	r3, [pc, #56]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801bd5e:	480d      	ldr	r0, [pc, #52]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd60:	f7ef fd18 	bl	800b794 <HAL_PCD_Init>
 801bd64:	4603      	mov	r3, r0
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d001      	beq.n	801bd6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801bd6a:	f7e7 fa57 	bl	800321c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801bd6e:	2180      	movs	r1, #128	; 0x80
 801bd70:	4808      	ldr	r0, [pc, #32]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd72:	f7f0 ff9c 	bl	800ccae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801bd76:	2240      	movs	r2, #64	; 0x40
 801bd78:	2100      	movs	r1, #0
 801bd7a:	4806      	ldr	r0, [pc, #24]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd7c:	f7f0 ff50 	bl	800cc20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801bd80:	2280      	movs	r2, #128	; 0x80
 801bd82:	2101      	movs	r1, #1
 801bd84:	4803      	ldr	r0, [pc, #12]	; (801bd94 <USBD_LL_Init+0x94>)
 801bd86:	f7f0 ff4b 	bl	800cc20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801bd8a:	2300      	movs	r3, #0
}
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	3708      	adds	r7, #8
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}
 801bd94:	2000de38 	.word	0x2000de38

0801bd98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b084      	sub	sp, #16
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bda0:	2300      	movs	r3, #0
 801bda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bda4:	2300      	movs	r3, #0
 801bda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801bdae:	4618      	mov	r0, r3
 801bdb0:	f7ef fe0d 	bl	800b9ce <HAL_PCD_Start>
 801bdb4:	4603      	mov	r3, r0
 801bdb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bdb8:	7bfb      	ldrb	r3, [r7, #15]
 801bdba:	4618      	mov	r0, r3
 801bdbc:	f000 f962 	bl	801c084 <USBD_Get_USB_Status>
 801bdc0:	4603      	mov	r3, r0
 801bdc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bdc4:	7bbb      	ldrb	r3, [r7, #14]
}
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	3710      	adds	r7, #16
 801bdca:	46bd      	mov	sp, r7
 801bdcc:	bd80      	pop	{r7, pc}

0801bdce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801bdce:	b580      	push	{r7, lr}
 801bdd0:	b084      	sub	sp, #16
 801bdd2:	af00      	add	r7, sp, #0
 801bdd4:	6078      	str	r0, [r7, #4]
 801bdd6:	4608      	mov	r0, r1
 801bdd8:	4611      	mov	r1, r2
 801bdda:	461a      	mov	r2, r3
 801bddc:	4603      	mov	r3, r0
 801bdde:	70fb      	strb	r3, [r7, #3]
 801bde0:	460b      	mov	r3, r1
 801bde2:	70bb      	strb	r3, [r7, #2]
 801bde4:	4613      	mov	r3, r2
 801bde6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bde8:	2300      	movs	r3, #0
 801bdea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bdec:	2300      	movs	r3, #0
 801bdee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801bdf6:	78bb      	ldrb	r3, [r7, #2]
 801bdf8:	883a      	ldrh	r2, [r7, #0]
 801bdfa:	78f9      	ldrb	r1, [r7, #3]
 801bdfc:	f7f0 fade 	bl	800c3bc <HAL_PCD_EP_Open>
 801be00:	4603      	mov	r3, r0
 801be02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801be04:	7bfb      	ldrb	r3, [r7, #15]
 801be06:	4618      	mov	r0, r3
 801be08:	f000 f93c 	bl	801c084 <USBD_Get_USB_Status>
 801be0c:	4603      	mov	r3, r0
 801be0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801be10:	7bbb      	ldrb	r3, [r7, #14]
}
 801be12:	4618      	mov	r0, r3
 801be14:	3710      	adds	r7, #16
 801be16:	46bd      	mov	sp, r7
 801be18:	bd80      	pop	{r7, pc}

0801be1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801be1a:	b580      	push	{r7, lr}
 801be1c:	b084      	sub	sp, #16
 801be1e:	af00      	add	r7, sp, #0
 801be20:	6078      	str	r0, [r7, #4]
 801be22:	460b      	mov	r3, r1
 801be24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801be26:	2300      	movs	r3, #0
 801be28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801be2a:	2300      	movs	r3, #0
 801be2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801be34:	78fa      	ldrb	r2, [r7, #3]
 801be36:	4611      	mov	r1, r2
 801be38:	4618      	mov	r0, r3
 801be3a:	f7f0 fb27 	bl	800c48c <HAL_PCD_EP_Close>
 801be3e:	4603      	mov	r3, r0
 801be40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801be42:	7bfb      	ldrb	r3, [r7, #15]
 801be44:	4618      	mov	r0, r3
 801be46:	f000 f91d 	bl	801c084 <USBD_Get_USB_Status>
 801be4a:	4603      	mov	r3, r0
 801be4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801be4e:	7bbb      	ldrb	r3, [r7, #14]
}
 801be50:	4618      	mov	r0, r3
 801be52:	3710      	adds	r7, #16
 801be54:	46bd      	mov	sp, r7
 801be56:	bd80      	pop	{r7, pc}

0801be58 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b084      	sub	sp, #16
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
 801be60:	460b      	mov	r3, r1
 801be62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801be64:	2300      	movs	r3, #0
 801be66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801be68:	2300      	movs	r3, #0
 801be6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801be72:	78fa      	ldrb	r2, [r7, #3]
 801be74:	4611      	mov	r1, r2
 801be76:	4618      	mov	r0, r3
 801be78:	f7f0 fcea 	bl	800c850 <HAL_PCD_EP_Flush>
 801be7c:	4603      	mov	r3, r0
 801be7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801be80:	7bfb      	ldrb	r3, [r7, #15]
 801be82:	4618      	mov	r0, r3
 801be84:	f000 f8fe 	bl	801c084 <USBD_Get_USB_Status>
 801be88:	4603      	mov	r3, r0
 801be8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801be8c:	7bbb      	ldrb	r3, [r7, #14]
}
 801be8e:	4618      	mov	r0, r3
 801be90:	3710      	adds	r7, #16
 801be92:	46bd      	mov	sp, r7
 801be94:	bd80      	pop	{r7, pc}

0801be96 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801be96:	b580      	push	{r7, lr}
 801be98:	b084      	sub	sp, #16
 801be9a:	af00      	add	r7, sp, #0
 801be9c:	6078      	str	r0, [r7, #4]
 801be9e:	460b      	mov	r3, r1
 801bea0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bea2:	2300      	movs	r3, #0
 801bea4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bea6:	2300      	movs	r3, #0
 801bea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801beb0:	78fa      	ldrb	r2, [r7, #3]
 801beb2:	4611      	mov	r1, r2
 801beb4:	4618      	mov	r0, r3
 801beb6:	f7f0 fbe0 	bl	800c67a <HAL_PCD_EP_SetStall>
 801beba:	4603      	mov	r3, r0
 801bebc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bebe:	7bfb      	ldrb	r3, [r7, #15]
 801bec0:	4618      	mov	r0, r3
 801bec2:	f000 f8df 	bl	801c084 <USBD_Get_USB_Status>
 801bec6:	4603      	mov	r3, r0
 801bec8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801beca:	7bbb      	ldrb	r3, [r7, #14]
}
 801becc:	4618      	mov	r0, r3
 801bece:	3710      	adds	r7, #16
 801bed0:	46bd      	mov	sp, r7
 801bed2:	bd80      	pop	{r7, pc}

0801bed4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b084      	sub	sp, #16
 801bed8:	af00      	add	r7, sp, #0
 801beda:	6078      	str	r0, [r7, #4]
 801bedc:	460b      	mov	r3, r1
 801bede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bee0:	2300      	movs	r3, #0
 801bee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bee4:	2300      	movs	r3, #0
 801bee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801beee:	78fa      	ldrb	r2, [r7, #3]
 801bef0:	4611      	mov	r1, r2
 801bef2:	4618      	mov	r0, r3
 801bef4:	f7f0 fc25 	bl	800c742 <HAL_PCD_EP_ClrStall>
 801bef8:	4603      	mov	r3, r0
 801befa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801befc:	7bfb      	ldrb	r3, [r7, #15]
 801befe:	4618      	mov	r0, r3
 801bf00:	f000 f8c0 	bl	801c084 <USBD_Get_USB_Status>
 801bf04:	4603      	mov	r3, r0
 801bf06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf08:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	3710      	adds	r7, #16
 801bf0e:	46bd      	mov	sp, r7
 801bf10:	bd80      	pop	{r7, pc}

0801bf12 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bf12:	b480      	push	{r7}
 801bf14:	b085      	sub	sp, #20
 801bf16:	af00      	add	r7, sp, #0
 801bf18:	6078      	str	r0, [r7, #4]
 801bf1a:	460b      	mov	r3, r1
 801bf1c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801bf24:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801bf26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	da0b      	bge.n	801bf46 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801bf2e:	78fb      	ldrb	r3, [r7, #3]
 801bf30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bf34:	68f9      	ldr	r1, [r7, #12]
 801bf36:	4613      	mov	r3, r2
 801bf38:	00db      	lsls	r3, r3, #3
 801bf3a:	4413      	add	r3, r2
 801bf3c:	009b      	lsls	r3, r3, #2
 801bf3e:	440b      	add	r3, r1
 801bf40:	333e      	adds	r3, #62	; 0x3e
 801bf42:	781b      	ldrb	r3, [r3, #0]
 801bf44:	e00b      	b.n	801bf5e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801bf46:	78fb      	ldrb	r3, [r7, #3]
 801bf48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bf4c:	68f9      	ldr	r1, [r7, #12]
 801bf4e:	4613      	mov	r3, r2
 801bf50:	00db      	lsls	r3, r3, #3
 801bf52:	4413      	add	r3, r2
 801bf54:	009b      	lsls	r3, r3, #2
 801bf56:	440b      	add	r3, r1
 801bf58:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801bf5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801bf5e:	4618      	mov	r0, r3
 801bf60:	3714      	adds	r7, #20
 801bf62:	46bd      	mov	sp, r7
 801bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf68:	4770      	bx	lr

0801bf6a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801bf6a:	b580      	push	{r7, lr}
 801bf6c:	b084      	sub	sp, #16
 801bf6e:	af00      	add	r7, sp, #0
 801bf70:	6078      	str	r0, [r7, #4]
 801bf72:	460b      	mov	r3, r1
 801bf74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf76:	2300      	movs	r3, #0
 801bf78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf7a:	2300      	movs	r3, #0
 801bf7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801bf84:	78fa      	ldrb	r2, [r7, #3]
 801bf86:	4611      	mov	r1, r2
 801bf88:	4618      	mov	r0, r3
 801bf8a:	f7f0 f9f2 	bl	800c372 <HAL_PCD_SetAddress>
 801bf8e:	4603      	mov	r3, r0
 801bf90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bf92:	7bfb      	ldrb	r3, [r7, #15]
 801bf94:	4618      	mov	r0, r3
 801bf96:	f000 f875 	bl	801c084 <USBD_Get_USB_Status>
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf9e:	7bbb      	ldrb	r3, [r7, #14]
}
 801bfa0:	4618      	mov	r0, r3
 801bfa2:	3710      	adds	r7, #16
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	bd80      	pop	{r7, pc}

0801bfa8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b086      	sub	sp, #24
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	60f8      	str	r0, [r7, #12]
 801bfb0:	607a      	str	r2, [r7, #4]
 801bfb2:	603b      	str	r3, [r7, #0]
 801bfb4:	460b      	mov	r3, r1
 801bfb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bfb8:	2300      	movs	r3, #0
 801bfba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bfbc:	2300      	movs	r3, #0
 801bfbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801bfc0:	68fb      	ldr	r3, [r7, #12]
 801bfc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801bfc6:	7af9      	ldrb	r1, [r7, #11]
 801bfc8:	683b      	ldr	r3, [r7, #0]
 801bfca:	687a      	ldr	r2, [r7, #4]
 801bfcc:	f7f0 fb0b 	bl	800c5e6 <HAL_PCD_EP_Transmit>
 801bfd0:	4603      	mov	r3, r0
 801bfd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bfd4:	7dfb      	ldrb	r3, [r7, #23]
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	f000 f854 	bl	801c084 <USBD_Get_USB_Status>
 801bfdc:	4603      	mov	r3, r0
 801bfde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801bfe0:	7dbb      	ldrb	r3, [r7, #22]
}
 801bfe2:	4618      	mov	r0, r3
 801bfe4:	3718      	adds	r7, #24
 801bfe6:	46bd      	mov	sp, r7
 801bfe8:	bd80      	pop	{r7, pc}

0801bfea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801bfea:	b580      	push	{r7, lr}
 801bfec:	b086      	sub	sp, #24
 801bfee:	af00      	add	r7, sp, #0
 801bff0:	60f8      	str	r0, [r7, #12]
 801bff2:	607a      	str	r2, [r7, #4]
 801bff4:	603b      	str	r3, [r7, #0]
 801bff6:	460b      	mov	r3, r1
 801bff8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bffa:	2300      	movs	r3, #0
 801bffc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bffe:	2300      	movs	r3, #0
 801c000:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801c008:	7af9      	ldrb	r1, [r7, #11]
 801c00a:	683b      	ldr	r3, [r7, #0]
 801c00c:	687a      	ldr	r2, [r7, #4]
 801c00e:	f7f0 fa87 	bl	800c520 <HAL_PCD_EP_Receive>
 801c012:	4603      	mov	r3, r0
 801c014:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c016:	7dfb      	ldrb	r3, [r7, #23]
 801c018:	4618      	mov	r0, r3
 801c01a:	f000 f833 	bl	801c084 <USBD_Get_USB_Status>
 801c01e:	4603      	mov	r3, r0
 801c020:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c022:	7dbb      	ldrb	r3, [r7, #22]
}
 801c024:	4618      	mov	r0, r3
 801c026:	3718      	adds	r7, #24
 801c028:	46bd      	mov	sp, r7
 801c02a:	bd80      	pop	{r7, pc}

0801c02c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c02c:	b580      	push	{r7, lr}
 801c02e:	b082      	sub	sp, #8
 801c030:	af00      	add	r7, sp, #0
 801c032:	6078      	str	r0, [r7, #4]
 801c034:	460b      	mov	r3, r1
 801c036:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c03e:	78fa      	ldrb	r2, [r7, #3]
 801c040:	4611      	mov	r1, r2
 801c042:	4618      	mov	r0, r3
 801c044:	f7f0 fab7 	bl	800c5b6 <HAL_PCD_EP_GetRxCount>
 801c048:	4603      	mov	r3, r0
}
 801c04a:	4618      	mov	r0, r3
 801c04c:	3708      	adds	r7, #8
 801c04e:	46bd      	mov	sp, r7
 801c050:	bd80      	pop	{r7, pc}
	...

0801c054 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c054:	b480      	push	{r7}
 801c056:	b083      	sub	sp, #12
 801c058:	af00      	add	r7, sp, #0
 801c05a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c05c:	4b03      	ldr	r3, [pc, #12]	; (801c06c <USBD_static_malloc+0x18>)
}
 801c05e:	4618      	mov	r0, r3
 801c060:	370c      	adds	r7, #12
 801c062:	46bd      	mov	sp, r7
 801c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c068:	4770      	bx	lr
 801c06a:	bf00      	nop
 801c06c:	2000e344 	.word	0x2000e344

0801c070 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c070:	b480      	push	{r7}
 801c072:	b083      	sub	sp, #12
 801c074:	af00      	add	r7, sp, #0
 801c076:	6078      	str	r0, [r7, #4]

}
 801c078:	bf00      	nop
 801c07a:	370c      	adds	r7, #12
 801c07c:	46bd      	mov	sp, r7
 801c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c082:	4770      	bx	lr

0801c084 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c084:	b480      	push	{r7}
 801c086:	b085      	sub	sp, #20
 801c088:	af00      	add	r7, sp, #0
 801c08a:	4603      	mov	r3, r0
 801c08c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c08e:	2300      	movs	r3, #0
 801c090:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c092:	79fb      	ldrb	r3, [r7, #7]
 801c094:	2b03      	cmp	r3, #3
 801c096:	d817      	bhi.n	801c0c8 <USBD_Get_USB_Status+0x44>
 801c098:	a201      	add	r2, pc, #4	; (adr r2, 801c0a0 <USBD_Get_USB_Status+0x1c>)
 801c09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c09e:	bf00      	nop
 801c0a0:	0801c0b1 	.word	0x0801c0b1
 801c0a4:	0801c0b7 	.word	0x0801c0b7
 801c0a8:	0801c0bd 	.word	0x0801c0bd
 801c0ac:	0801c0c3 	.word	0x0801c0c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	73fb      	strb	r3, [r7, #15]
    break;
 801c0b4:	e00b      	b.n	801c0ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c0b6:	2303      	movs	r3, #3
 801c0b8:	73fb      	strb	r3, [r7, #15]
    break;
 801c0ba:	e008      	b.n	801c0ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c0bc:	2301      	movs	r3, #1
 801c0be:	73fb      	strb	r3, [r7, #15]
    break;
 801c0c0:	e005      	b.n	801c0ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c0c2:	2303      	movs	r3, #3
 801c0c4:	73fb      	strb	r3, [r7, #15]
    break;
 801c0c6:	e002      	b.n	801c0ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801c0c8:	2303      	movs	r3, #3
 801c0ca:	73fb      	strb	r3, [r7, #15]
    break;
 801c0cc:	bf00      	nop
  }
  return usb_status;
 801c0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 801c0d0:	4618      	mov	r0, r3
 801c0d2:	3714      	adds	r7, #20
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0da:	4770      	bx	lr

0801c0dc <arm_mat_trans_f32>:
 801c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0e0:	f8b0 c000 	ldrh.w	ip, [r0]
 801c0e4:	884a      	ldrh	r2, [r1, #2]
 801c0e6:	6844      	ldr	r4, [r0, #4]
 801c0e8:	8843      	ldrh	r3, [r0, #2]
 801c0ea:	f8d1 a004 	ldr.w	sl, [r1, #4]
 801c0ee:	4562      	cmp	r2, ip
 801c0f0:	b083      	sub	sp, #12
 801c0f2:	d15f      	bne.n	801c1b4 <arm_mat_trans_f32+0xd8>
 801c0f4:	f8b1 e000 	ldrh.w	lr, [r1]
 801c0f8:	459e      	cmp	lr, r3
 801c0fa:	d15b      	bne.n	801c1b4 <arm_mat_trans_f32+0xd8>
 801c0fc:	ea4f 089e 	mov.w	r8, lr, lsr #2
 801c100:	f00e 0303 	and.w	r3, lr, #3
 801c104:	461a      	mov	r2, r3
 801c106:	9301      	str	r3, [sp, #4]
 801c108:	f108 33ff 	add.w	r3, r8, #4294967295
 801c10c:	b29b      	uxth	r3, r3
 801c10e:	f103 0902 	add.w	r9, r3, #2
 801c112:	3a01      	subs	r2, #1
 801c114:	3301      	adds	r3, #1
 801c116:	ea4f 170c 	mov.w	r7, ip, lsl #4
 801c11a:	fb03 f707 	mul.w	r7, r3, r7
 801c11e:	b292      	uxth	r2, r2
 801c120:	3201      	adds	r2, #1
 801c122:	ea4f 1b03 	mov.w	fp, r3, lsl #4
 801c126:	463b      	mov	r3, r7
 801c128:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801c12c:	4647      	mov	r7, r8
 801c12e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 801c132:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801c136:	2600      	movs	r6, #0
 801c138:	4698      	mov	r8, r3
 801c13a:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 801c13e:	b3bf      	cbz	r7, 801c1b0 <arm_mat_trans_f32+0xd4>
 801c140:	f104 0210 	add.w	r2, r4, #16
 801c144:	eb04 0509 	add.w	r5, r4, r9
 801c148:	4603      	mov	r3, r0
 801c14a:	ed52 7a04 	vldr	s15, [r2, #-16]
 801c14e:	edc3 7a00 	vstr	s15, [r3]
 801c152:	ed52 7a03 	vldr	s15, [r2, #-12]
 801c156:	440b      	add	r3, r1
 801c158:	edc3 7a00 	vstr	s15, [r3]
 801c15c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c160:	440b      	add	r3, r1
 801c162:	edc3 7a00 	vstr	s15, [r3]
 801c166:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c16a:	3210      	adds	r2, #16
 801c16c:	440b      	add	r3, r1
 801c16e:	42aa      	cmp	r2, r5
 801c170:	edc3 7a00 	vstr	s15, [r3]
 801c174:	440b      	add	r3, r1
 801c176:	d1e8      	bne.n	801c14a <arm_mat_trans_f32+0x6e>
 801c178:	eb04 030b 	add.w	r3, r4, fp
 801c17c:	4440      	add	r0, r8
 801c17e:	9a01      	ldr	r2, [sp, #4]
 801c180:	b182      	cbz	r2, 801c1a4 <arm_mat_trans_f32+0xc8>
 801c182:	eb03 040e 	add.w	r4, r3, lr
 801c186:	f853 2b04 	ldr.w	r2, [r3], #4
 801c18a:	6002      	str	r2, [r0, #0]
 801c18c:	42a3      	cmp	r3, r4
 801c18e:	4408      	add	r0, r1
 801c190:	d1f9      	bne.n	801c186 <arm_mat_trans_f32+0xaa>
 801c192:	3601      	adds	r6, #1
 801c194:	b2b6      	uxth	r6, r6
 801c196:	4566      	cmp	r6, ip
 801c198:	d1cf      	bne.n	801c13a <arm_mat_trans_f32+0x5e>
 801c19a:	2000      	movs	r0, #0
 801c19c:	b240      	sxtb	r0, r0
 801c19e:	b003      	add	sp, #12
 801c1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1a4:	3601      	adds	r6, #1
 801c1a6:	b2b6      	uxth	r6, r6
 801c1a8:	4566      	cmp	r6, ip
 801c1aa:	461c      	mov	r4, r3
 801c1ac:	d1c5      	bne.n	801c13a <arm_mat_trans_f32+0x5e>
 801c1ae:	e7f4      	b.n	801c19a <arm_mat_trans_f32+0xbe>
 801c1b0:	4623      	mov	r3, r4
 801c1b2:	e7e4      	b.n	801c17e <arm_mat_trans_f32+0xa2>
 801c1b4:	20fd      	movs	r0, #253	; 0xfd
 801c1b6:	b240      	sxtb	r0, r0
 801c1b8:	b003      	add	sp, #12
 801c1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1be:	bf00      	nop

0801c1c0 <arm_mat_mult_f32>:
 801c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1c4:	8843      	ldrh	r3, [r0, #2]
 801c1c6:	880d      	ldrh	r5, [r1, #0]
 801c1c8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801c1cc:	6854      	ldr	r4, [r2, #4]
 801c1ce:	8800      	ldrh	r0, [r0, #0]
 801c1d0:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 801c1d4:	b087      	sub	sp, #28
 801c1d6:	429d      	cmp	r5, r3
 801c1d8:	9003      	str	r0, [sp, #12]
 801c1da:	9404      	str	r4, [sp, #16]
 801c1dc:	f040 808d 	bne.w	801c2fa <arm_mat_mult_f32+0x13a>
 801c1e0:	8813      	ldrh	r3, [r2, #0]
 801c1e2:	4283      	cmp	r3, r0
 801c1e4:	f040 8089 	bne.w	801c2fa <arm_mat_mult_f32+0x13a>
 801c1e8:	8853      	ldrh	r3, [r2, #2]
 801c1ea:	4543      	cmp	r3, r8
 801c1ec:	f040 8085 	bne.w	801c2fa <arm_mat_mult_f32+0x13a>
 801c1f0:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 801c1f4:	f005 0303 	and.w	r3, r5, #3
 801c1f8:	461a      	mov	r2, r3
 801c1fa:	9301      	str	r3, [sp, #4]
 801c1fc:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c200:	b29b      	uxth	r3, r3
 801c202:	3301      	adds	r3, #1
 801c204:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 801c208:	fb0b fb03 	mul.w	fp, fp, r3
 801c20c:	3a01      	subs	r2, #1
 801c20e:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 801c212:	00ab      	lsls	r3, r5, #2
 801c214:	b292      	uxth	r2, r2
 801c216:	9305      	str	r3, [sp, #20]
 801c218:	2300      	movs	r3, #0
 801c21a:	3201      	adds	r2, #1
 801c21c:	9302      	str	r3, [sp, #8]
 801c21e:	460b      	mov	r3, r1
 801c220:	684c      	ldr	r4, [r1, #4]
 801c222:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801c226:	4651      	mov	r1, sl
 801c228:	ea4f 0088 	mov.w	r0, r8, lsl #2
 801c22c:	46da      	mov	sl, fp
 801c22e:	469b      	mov	fp, r3
 801c230:	9b04      	ldr	r3, [sp, #16]
 801c232:	9a02      	ldr	r2, [sp, #8]
 801c234:	2600      	movs	r6, #0
 801c236:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 801c23a:	f10c 0510 	add.w	r5, ip, #16
 801c23e:	eddf 7a31 	vldr	s15, [pc, #196]	; 801c304 <arm_mat_mult_f32+0x144>
 801c242:	2900      	cmp	r1, #0
 801c244:	d057      	beq.n	801c2f6 <arm_mat_mult_f32+0x136>
 801c246:	f10e 0210 	add.w	r2, lr, #16
 801c24a:	4623      	mov	r3, r4
 801c24c:	ed52 5a04 	vldr	s11, [r2, #-16]
 801c250:	edd3 6a00 	vldr	s13, [r3]
 801c254:	ed12 7a03 	vldr	s14, [r2, #-12]
 801c258:	ed12 5a02 	vldr	s10, [r2, #-8]
 801c25c:	ed12 6a01 	vldr	s12, [r2, #-4]
 801c260:	4403      	add	r3, r0
 801c262:	ee65 5aa6 	vmul.f32	s11, s11, s13
 801c266:	edd3 6a00 	vldr	s13, [r3]
 801c26a:	4403      	add	r3, r0
 801c26c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c270:	ee75 7aa7 	vadd.f32	s15, s11, s15
 801c274:	edd3 6a00 	vldr	s13, [r3]
 801c278:	4403      	add	r3, r0
 801c27a:	ee77 5a27 	vadd.f32	s11, s14, s15
 801c27e:	ee65 7a26 	vmul.f32	s15, s10, s13
 801c282:	edd3 6a00 	vldr	s13, [r3]
 801c286:	ee37 7aa5 	vadd.f32	s14, s15, s11
 801c28a:	3210      	adds	r2, #16
 801c28c:	ee66 7a26 	vmul.f32	s15, s12, s13
 801c290:	42aa      	cmp	r2, r5
 801c292:	4403      	add	r3, r0
 801c294:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c298:	d1d8      	bne.n	801c24c <arm_mat_mult_f32+0x8c>
 801c29a:	4454      	add	r4, sl
 801c29c:	4663      	mov	r3, ip
 801c29e:	9a01      	ldr	r2, [sp, #4]
 801c2a0:	b162      	cbz	r2, 801c2bc <arm_mat_mult_f32+0xfc>
 801c2a2:	eb03 0209 	add.w	r2, r3, r9
 801c2a6:	ecf3 6a01 	vldmia	r3!, {s13}
 801c2aa:	ed94 7a00 	vldr	s14, [r4]
 801c2ae:	ee26 7a87 	vmul.f32	s14, s13, s14
 801c2b2:	4293      	cmp	r3, r2
 801c2b4:	4404      	add	r4, r0
 801c2b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c2ba:	d1f4      	bne.n	801c2a6 <arm_mat_mult_f32+0xe6>
 801c2bc:	ece7 7a01 	vstmia	r7!, {s15}
 801c2c0:	3601      	adds	r6, #1
 801c2c2:	b2b6      	uxth	r6, r6
 801c2c4:	f8db 3004 	ldr.w	r3, [fp, #4]
 801c2c8:	4546      	cmp	r6, r8
 801c2ca:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 801c2ce:	d1b6      	bne.n	801c23e <arm_mat_mult_f32+0x7e>
 801c2d0:	9a03      	ldr	r2, [sp, #12]
 801c2d2:	9c02      	ldr	r4, [sp, #8]
 801c2d4:	9d05      	ldr	r5, [sp, #20]
 801c2d6:	3a01      	subs	r2, #1
 801c2d8:	4434      	add	r4, r6
 801c2da:	b2a4      	uxth	r4, r4
 801c2dc:	b292      	uxth	r2, r2
 801c2de:	9402      	str	r4, [sp, #8]
 801c2e0:	9203      	str	r2, [sp, #12]
 801c2e2:	44ae      	add	lr, r5
 801c2e4:	44ac      	add	ip, r5
 801c2e6:	461c      	mov	r4, r3
 801c2e8:	2a00      	cmp	r2, #0
 801c2ea:	d1a1      	bne.n	801c230 <arm_mat_mult_f32+0x70>
 801c2ec:	4610      	mov	r0, r2
 801c2ee:	b240      	sxtb	r0, r0
 801c2f0:	b007      	add	sp, #28
 801c2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f6:	4673      	mov	r3, lr
 801c2f8:	e7d1      	b.n	801c29e <arm_mat_mult_f32+0xde>
 801c2fa:	20fd      	movs	r0, #253	; 0xfd
 801c2fc:	b240      	sxtb	r0, r0
 801c2fe:	b007      	add	sp, #28
 801c300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c304:	00000000 	.word	0x00000000

0801c308 <arm_mat_init_f32>:
 801c308:	8001      	strh	r1, [r0, #0]
 801c30a:	8042      	strh	r2, [r0, #2]
 801c30c:	6043      	str	r3, [r0, #4]
 801c30e:	4770      	bx	lr

0801c310 <_ZdlPvj>:
 801c310:	f000 b923 	b.w	801c55a <_ZdlPv>

0801c314 <_Znwj>:
 801c314:	2801      	cmp	r0, #1
 801c316:	bf38      	it	cc
 801c318:	2001      	movcc	r0, #1
 801c31a:	b510      	push	{r4, lr}
 801c31c:	4604      	mov	r4, r0
 801c31e:	4620      	mov	r0, r4
 801c320:	f001 fa28 	bl	801d774 <malloc>
 801c324:	b930      	cbnz	r0, 801c334 <_Znwj+0x20>
 801c326:	f000 f92d 	bl	801c584 <_ZSt15get_new_handlerv>
 801c32a:	b908      	cbnz	r0, 801c330 <_Znwj+0x1c>
 801c32c:	f001 f9ed 	bl	801d70a <abort>
 801c330:	4780      	blx	r0
 801c332:	e7f4      	b.n	801c31e <_Znwj+0xa>
 801c334:	bd10      	pop	{r4, pc}

0801c336 <__cxa_pure_virtual>:
 801c336:	b508      	push	{r3, lr}
 801c338:	f000 f91e 	bl	801c578 <_ZSt9terminatev>

0801c33c <_ZNSaIcEC1Ev>:
 801c33c:	4770      	bx	lr

0801c33e <_ZNSaIcED1Ev>:
 801c33e:	4770      	bx	lr

0801c340 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 801c340:	68c3      	ldr	r3, [r0, #12]
 801c342:	689a      	ldr	r2, [r3, #8]
 801c344:	60c2      	str	r2, [r0, #12]
 801c346:	b510      	push	{r4, lr}
 801c348:	b102      	cbz	r2, 801c34c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 801c34a:	6050      	str	r0, [r2, #4]
 801c34c:	6842      	ldr	r2, [r0, #4]
 801c34e:	605a      	str	r2, [r3, #4]
 801c350:	680c      	ldr	r4, [r1, #0]
 801c352:	4284      	cmp	r4, r0
 801c354:	d103      	bne.n	801c35e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 801c356:	600b      	str	r3, [r1, #0]
 801c358:	6098      	str	r0, [r3, #8]
 801c35a:	6043      	str	r3, [r0, #4]
 801c35c:	bd10      	pop	{r4, pc}
 801c35e:	6891      	ldr	r1, [r2, #8]
 801c360:	4281      	cmp	r1, r0
 801c362:	bf0c      	ite	eq
 801c364:	6093      	streq	r3, [r2, #8]
 801c366:	60d3      	strne	r3, [r2, #12]
 801c368:	e7f6      	b.n	801c358 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0801c36a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 801c36a:	6883      	ldr	r3, [r0, #8]
 801c36c:	68da      	ldr	r2, [r3, #12]
 801c36e:	6082      	str	r2, [r0, #8]
 801c370:	b510      	push	{r4, lr}
 801c372:	b102      	cbz	r2, 801c376 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 801c374:	6050      	str	r0, [r2, #4]
 801c376:	6842      	ldr	r2, [r0, #4]
 801c378:	605a      	str	r2, [r3, #4]
 801c37a:	680c      	ldr	r4, [r1, #0]
 801c37c:	4284      	cmp	r4, r0
 801c37e:	d103      	bne.n	801c388 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 801c380:	600b      	str	r3, [r1, #0]
 801c382:	60d8      	str	r0, [r3, #12]
 801c384:	6043      	str	r3, [r0, #4]
 801c386:	bd10      	pop	{r4, pc}
 801c388:	68d1      	ldr	r1, [r2, #12]
 801c38a:	4281      	cmp	r1, r0
 801c38c:	bf0c      	ite	eq
 801c38e:	60d3      	streq	r3, [r2, #12]
 801c390:	6093      	strne	r3, [r2, #8]
 801c392:	e7f6      	b.n	801c382 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0801c394 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801c394:	7803      	ldrb	r3, [r0, #0]
 801c396:	b933      	cbnz	r3, 801c3a6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 801c398:	6843      	ldr	r3, [r0, #4]
 801c39a:	685b      	ldr	r3, [r3, #4]
 801c39c:	4283      	cmp	r3, r0
 801c39e:	d102      	bne.n	801c3a6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 801c3a0:	68db      	ldr	r3, [r3, #12]
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	4770      	bx	lr
 801c3a6:	6882      	ldr	r2, [r0, #8]
 801c3a8:	b122      	cbz	r2, 801c3b4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 801c3aa:	4613      	mov	r3, r2
 801c3ac:	68d2      	ldr	r2, [r2, #12]
 801c3ae:	2a00      	cmp	r2, #0
 801c3b0:	d1fb      	bne.n	801c3aa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 801c3b2:	e7f6      	b.n	801c3a2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801c3b4:	6843      	ldr	r3, [r0, #4]
 801c3b6:	689a      	ldr	r2, [r3, #8]
 801c3b8:	4282      	cmp	r2, r0
 801c3ba:	d1f2      	bne.n	801c3a2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801c3bc:	4618      	mov	r0, r3
 801c3be:	685b      	ldr	r3, [r3, #4]
 801c3c0:	e7f9      	b.n	801c3b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0801c3c2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801c3c2:	f7ff bfe7 	b.w	801c394 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0801c3c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 801c3c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c3ca:	461e      	mov	r6, r3
 801c3cc:	f103 0804 	add.w	r8, r3, #4
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	e9c1 3302 	strd	r3, r3, [r1, #8]
 801c3d6:	460c      	mov	r4, r1
 801c3d8:	604a      	str	r2, [r1, #4]
 801c3da:	700b      	strb	r3, [r1, #0]
 801c3dc:	b300      	cbz	r0, 801c420 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 801c3de:	4296      	cmp	r6, r2
 801c3e0:	6091      	str	r1, [r2, #8]
 801c3e2:	d118      	bne.n	801c416 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 801c3e4:	6071      	str	r1, [r6, #4]
 801c3e6:	60f4      	str	r4, [r6, #12]
 801c3e8:	2701      	movs	r7, #1
 801c3ea:	f04f 0900 	mov.w	r9, #0
 801c3ee:	6873      	ldr	r3, [r6, #4]
 801c3f0:	42a3      	cmp	r3, r4
 801c3f2:	d03f      	beq.n	801c474 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 801c3f4:	6860      	ldr	r0, [r4, #4]
 801c3f6:	7802      	ldrb	r2, [r0, #0]
 801c3f8:	2a00      	cmp	r2, #0
 801c3fa:	d13b      	bne.n	801c474 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 801c3fc:	6845      	ldr	r5, [r0, #4]
 801c3fe:	68ab      	ldr	r3, [r5, #8]
 801c400:	4298      	cmp	r0, r3
 801c402:	d123      	bne.n	801c44c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 801c404:	68eb      	ldr	r3, [r5, #12]
 801c406:	b183      	cbz	r3, 801c42a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801c408:	781a      	ldrb	r2, [r3, #0]
 801c40a:	b972      	cbnz	r2, 801c42a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801c40c:	7007      	strb	r7, [r0, #0]
 801c40e:	701f      	strb	r7, [r3, #0]
 801c410:	702a      	strb	r2, [r5, #0]
 801c412:	462c      	mov	r4, r5
 801c414:	e7eb      	b.n	801c3ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 801c416:	68b3      	ldr	r3, [r6, #8]
 801c418:	4293      	cmp	r3, r2
 801c41a:	d1e5      	bne.n	801c3e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801c41c:	60b1      	str	r1, [r6, #8]
 801c41e:	e7e3      	b.n	801c3e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801c420:	60d1      	str	r1, [r2, #12]
 801c422:	68f3      	ldr	r3, [r6, #12]
 801c424:	4293      	cmp	r3, r2
 801c426:	d1df      	bne.n	801c3e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801c428:	e7dd      	b.n	801c3e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 801c42a:	68c3      	ldr	r3, [r0, #12]
 801c42c:	42a3      	cmp	r3, r4
 801c42e:	d103      	bne.n	801c438 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 801c430:	4641      	mov	r1, r8
 801c432:	f7ff ff85 	bl	801c340 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801c436:	4604      	mov	r4, r0
 801c438:	6863      	ldr	r3, [r4, #4]
 801c43a:	4641      	mov	r1, r8
 801c43c:	701f      	strb	r7, [r3, #0]
 801c43e:	4628      	mov	r0, r5
 801c440:	f885 9000 	strb.w	r9, [r5]
 801c444:	f7ff ff91 	bl	801c36a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801c448:	4625      	mov	r5, r4
 801c44a:	e7e2      	b.n	801c412 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 801c44c:	b113      	cbz	r3, 801c454 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 801c44e:	781a      	ldrb	r2, [r3, #0]
 801c450:	2a00      	cmp	r2, #0
 801c452:	d0db      	beq.n	801c40c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 801c454:	6883      	ldr	r3, [r0, #8]
 801c456:	42a3      	cmp	r3, r4
 801c458:	d103      	bne.n	801c462 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 801c45a:	4641      	mov	r1, r8
 801c45c:	f7ff ff85 	bl	801c36a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801c460:	4604      	mov	r4, r0
 801c462:	6863      	ldr	r3, [r4, #4]
 801c464:	4641      	mov	r1, r8
 801c466:	701f      	strb	r7, [r3, #0]
 801c468:	4628      	mov	r0, r5
 801c46a:	f885 9000 	strb.w	r9, [r5]
 801c46e:	f7ff ff67 	bl	801c340 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801c472:	e7e9      	b.n	801c448 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 801c474:	2201      	movs	r2, #1
 801c476:	701a      	strb	r2, [r3, #0]
 801c478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801c47c <_ZSt17__throw_bad_allocv>:
 801c47c:	b508      	push	{r3, lr}
 801c47e:	f001 f944 	bl	801d70a <abort>

0801c482 <_ZSt20__throw_length_errorPKc>:
 801c482:	b508      	push	{r3, lr}
 801c484:	f001 f941 	bl	801d70a <abort>

0801c488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801c488:	b508      	push	{r3, lr}
 801c48a:	680b      	ldr	r3, [r1, #0]
 801c48c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c490:	d302      	bcc.n	801c498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801c492:	480d      	ldr	r0, [pc, #52]	; (801c4c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801c494:	f7ff fff5 	bl	801c482 <_ZSt20__throw_length_errorPKc>
 801c498:	4293      	cmp	r3, r2
 801c49a:	d90b      	bls.n	801c4b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801c49c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801c4a0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801c4a4:	d206      	bcs.n	801c4b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801c4a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801c4aa:	bf2a      	itet	cs
 801c4ac:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 801c4b0:	6008      	strcc	r0, [r1, #0]
 801c4b2:	600b      	strcs	r3, [r1, #0]
 801c4b4:	6808      	ldr	r0, [r1, #0]
 801c4b6:	3001      	adds	r0, #1
 801c4b8:	d501      	bpl.n	801c4be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801c4ba:	f7ff ffdf 	bl	801c47c <_ZSt17__throw_bad_allocv>
 801c4be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c4c2:	f7ff bf27 	b.w	801c314 <_Znwj>
 801c4c6:	bf00      	nop
 801c4c8:	08032710 	.word	0x08032710

0801c4cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801c4cc:	f850 3b08 	ldr.w	r3, [r0], #8
 801c4d0:	4283      	cmp	r3, r0
 801c4d2:	d002      	beq.n	801c4da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f000 b840 	b.w	801c55a <_ZdlPv>
 801c4da:	4770      	bx	lr

0801c4dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801c4dc:	460b      	mov	r3, r1
 801c4de:	2b01      	cmp	r3, #1
 801c4e0:	b410      	push	{r4}
 801c4e2:	4611      	mov	r1, r2
 801c4e4:	4604      	mov	r4, r0
 801c4e6:	d103      	bne.n	801c4f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 801c4e8:	7022      	strb	r2, [r4, #0]
 801c4ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4ee:	4770      	bx	lr
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d0fa      	beq.n	801c4ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801c4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4f8:	461a      	mov	r2, r3
 801c4fa:	f001 b973 	b.w	801d7e4 <memset>

0801c4fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 801c4fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c500:	290f      	cmp	r1, #15
 801c502:	4604      	mov	r4, r0
 801c504:	9101      	str	r1, [sp, #4]
 801c506:	4615      	mov	r5, r2
 801c508:	d906      	bls.n	801c518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 801c50a:	2200      	movs	r2, #0
 801c50c:	a901      	add	r1, sp, #4
 801c50e:	f7ff ffbb 	bl	801c488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801c512:	9b01      	ldr	r3, [sp, #4]
 801c514:	6020      	str	r0, [r4, #0]
 801c516:	60a3      	str	r3, [r4, #8]
 801c518:	9901      	ldr	r1, [sp, #4]
 801c51a:	b119      	cbz	r1, 801c524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 801c51c:	6820      	ldr	r0, [r4, #0]
 801c51e:	462a      	mov	r2, r5
 801c520:	f7ff ffdc 	bl	801c4dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801c524:	9b01      	ldr	r3, [sp, #4]
 801c526:	6822      	ldr	r2, [r4, #0]
 801c528:	6063      	str	r3, [r4, #4]
 801c52a:	2100      	movs	r1, #0
 801c52c:	54d1      	strb	r1, [r2, r3]
 801c52e:	b003      	add	sp, #12
 801c530:	bd30      	pop	{r4, r5, pc}

0801c532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 801c532:	b510      	push	{r4, lr}
 801c534:	f100 0308 	add.w	r3, r0, #8
 801c538:	4604      	mov	r4, r0
 801c53a:	6003      	str	r3, [r0, #0]
 801c53c:	f7ff ffdf 	bl	801c4fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 801c540:	4620      	mov	r0, r4
 801c542:	bd10      	pop	{r4, pc}

0801c544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801c544:	b510      	push	{r4, lr}
 801c546:	4604      	mov	r4, r0
 801c548:	f7ff ffc0 	bl	801c4cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801c54c:	4620      	mov	r0, r4
 801c54e:	bd10      	pop	{r4, pc}

0801c550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801c550:	6800      	ldr	r0, [r0, #0]
 801c552:	4408      	add	r0, r1
 801c554:	4770      	bx	lr

0801c556 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801c556:	6800      	ldr	r0, [r0, #0]
 801c558:	4770      	bx	lr

0801c55a <_ZdlPv>:
 801c55a:	f001 b913 	b.w	801d784 <free>

0801c55e <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c55e:	b508      	push	{r3, lr}
 801c560:	4780      	blx	r0
 801c562:	f001 f8d2 	bl	801d70a <abort>
	...

0801c568 <_ZSt13get_terminatev>:
 801c568:	4b02      	ldr	r3, [pc, #8]	; (801c574 <_ZSt13get_terminatev+0xc>)
 801c56a:	6818      	ldr	r0, [r3, #0]
 801c56c:	f3bf 8f5b 	dmb	ish
 801c570:	4770      	bx	lr
 801c572:	bf00      	nop
 801c574:	2000012c 	.word	0x2000012c

0801c578 <_ZSt9terminatev>:
 801c578:	b508      	push	{r3, lr}
 801c57a:	f7ff fff5 	bl	801c568 <_ZSt13get_terminatev>
 801c57e:	f7ff ffee 	bl	801c55e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801c584 <_ZSt15get_new_handlerv>:
 801c584:	4b02      	ldr	r3, [pc, #8]	; (801c590 <_ZSt15get_new_handlerv+0xc>)
 801c586:	6818      	ldr	r0, [r3, #0]
 801c588:	f3bf 8f5b 	dmb	ish
 801c58c:	4770      	bx	lr
 801c58e:	bf00      	nop
 801c590:	2000e5bc 	.word	0x2000e5bc

0801c594 <pow>:
 801c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c596:	ed2d 8b02 	vpush	{d8}
 801c59a:	eeb0 8a40 	vmov.f32	s16, s0
 801c59e:	eef0 8a60 	vmov.f32	s17, s1
 801c5a2:	ec55 4b11 	vmov	r4, r5, d1
 801c5a6:	f000 f887 	bl	801c6b8 <__ieee754_pow>
 801c5aa:	4622      	mov	r2, r4
 801c5ac:	462b      	mov	r3, r5
 801c5ae:	4620      	mov	r0, r4
 801c5b0:	4629      	mov	r1, r5
 801c5b2:	ec57 6b10 	vmov	r6, r7, d0
 801c5b6:	f7e4 fac3 	bl	8000b40 <__aeabi_dcmpun>
 801c5ba:	2800      	cmp	r0, #0
 801c5bc:	d13b      	bne.n	801c636 <pow+0xa2>
 801c5be:	ec51 0b18 	vmov	r0, r1, d8
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	2300      	movs	r3, #0
 801c5c6:	f7e4 fa89 	bl	8000adc <__aeabi_dcmpeq>
 801c5ca:	b1b8      	cbz	r0, 801c5fc <pow+0x68>
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	4629      	mov	r1, r5
 801c5d4:	f7e4 fa82 	bl	8000adc <__aeabi_dcmpeq>
 801c5d8:	2800      	cmp	r0, #0
 801c5da:	d146      	bne.n	801c66a <pow+0xd6>
 801c5dc:	ec45 4b10 	vmov	d0, r4, r5
 801c5e0:	f000 ff26 	bl	801d430 <finite>
 801c5e4:	b338      	cbz	r0, 801c636 <pow+0xa2>
 801c5e6:	2200      	movs	r2, #0
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	4620      	mov	r0, r4
 801c5ec:	4629      	mov	r1, r5
 801c5ee:	f7e4 fa7f 	bl	8000af0 <__aeabi_dcmplt>
 801c5f2:	b300      	cbz	r0, 801c636 <pow+0xa2>
 801c5f4:	f001 f894 	bl	801d720 <__errno>
 801c5f8:	2322      	movs	r3, #34	; 0x22
 801c5fa:	e01b      	b.n	801c634 <pow+0xa0>
 801c5fc:	ec47 6b10 	vmov	d0, r6, r7
 801c600:	f000 ff16 	bl	801d430 <finite>
 801c604:	b9e0      	cbnz	r0, 801c640 <pow+0xac>
 801c606:	eeb0 0a48 	vmov.f32	s0, s16
 801c60a:	eef0 0a68 	vmov.f32	s1, s17
 801c60e:	f000 ff0f 	bl	801d430 <finite>
 801c612:	b1a8      	cbz	r0, 801c640 <pow+0xac>
 801c614:	ec45 4b10 	vmov	d0, r4, r5
 801c618:	f000 ff0a 	bl	801d430 <finite>
 801c61c:	b180      	cbz	r0, 801c640 <pow+0xac>
 801c61e:	4632      	mov	r2, r6
 801c620:	463b      	mov	r3, r7
 801c622:	4630      	mov	r0, r6
 801c624:	4639      	mov	r1, r7
 801c626:	f7e4 fa8b 	bl	8000b40 <__aeabi_dcmpun>
 801c62a:	2800      	cmp	r0, #0
 801c62c:	d0e2      	beq.n	801c5f4 <pow+0x60>
 801c62e:	f001 f877 	bl	801d720 <__errno>
 801c632:	2321      	movs	r3, #33	; 0x21
 801c634:	6003      	str	r3, [r0, #0]
 801c636:	ecbd 8b02 	vpop	{d8}
 801c63a:	ec47 6b10 	vmov	d0, r6, r7
 801c63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c640:	2200      	movs	r2, #0
 801c642:	2300      	movs	r3, #0
 801c644:	4630      	mov	r0, r6
 801c646:	4639      	mov	r1, r7
 801c648:	f7e4 fa48 	bl	8000adc <__aeabi_dcmpeq>
 801c64c:	2800      	cmp	r0, #0
 801c64e:	d0f2      	beq.n	801c636 <pow+0xa2>
 801c650:	eeb0 0a48 	vmov.f32	s0, s16
 801c654:	eef0 0a68 	vmov.f32	s1, s17
 801c658:	f000 feea 	bl	801d430 <finite>
 801c65c:	2800      	cmp	r0, #0
 801c65e:	d0ea      	beq.n	801c636 <pow+0xa2>
 801c660:	ec45 4b10 	vmov	d0, r4, r5
 801c664:	f000 fee4 	bl	801d430 <finite>
 801c668:	e7c3      	b.n	801c5f2 <pow+0x5e>
 801c66a:	4f01      	ldr	r7, [pc, #4]	; (801c670 <pow+0xdc>)
 801c66c:	2600      	movs	r6, #0
 801c66e:	e7e2      	b.n	801c636 <pow+0xa2>
 801c670:	3ff00000 	.word	0x3ff00000

0801c674 <atan2f>:
 801c674:	f000 be00 	b.w	801d278 <__ieee754_atan2f>

0801c678 <sqrtf>:
 801c678:	b508      	push	{r3, lr}
 801c67a:	ed2d 8b02 	vpush	{d8}
 801c67e:	eeb0 8a40 	vmov.f32	s16, s0
 801c682:	f000 fe99 	bl	801d3b8 <__ieee754_sqrtf>
 801c686:	eeb4 8a48 	vcmp.f32	s16, s16
 801c68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c68e:	d60c      	bvs.n	801c6aa <sqrtf+0x32>
 801c690:	eddf 8a07 	vldr	s17, [pc, #28]	; 801c6b0 <sqrtf+0x38>
 801c694:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801c698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c69c:	d505      	bpl.n	801c6aa <sqrtf+0x32>
 801c69e:	f001 f83f 	bl	801d720 <__errno>
 801c6a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801c6a6:	2321      	movs	r3, #33	; 0x21
 801c6a8:	6003      	str	r3, [r0, #0]
 801c6aa:	ecbd 8b02 	vpop	{d8}
 801c6ae:	bd08      	pop	{r3, pc}
	...

0801c6b8 <__ieee754_pow>:
 801c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6bc:	ed2d 8b06 	vpush	{d8-d10}
 801c6c0:	b089      	sub	sp, #36	; 0x24
 801c6c2:	ed8d 1b00 	vstr	d1, [sp]
 801c6c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 801c6ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801c6ce:	ea58 0102 	orrs.w	r1, r8, r2
 801c6d2:	ec57 6b10 	vmov	r6, r7, d0
 801c6d6:	d115      	bne.n	801c704 <__ieee754_pow+0x4c>
 801c6d8:	19b3      	adds	r3, r6, r6
 801c6da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801c6de:	4152      	adcs	r2, r2
 801c6e0:	4299      	cmp	r1, r3
 801c6e2:	4b89      	ldr	r3, [pc, #548]	; (801c908 <__ieee754_pow+0x250>)
 801c6e4:	4193      	sbcs	r3, r2
 801c6e6:	f080 84d2 	bcs.w	801d08e <__ieee754_pow+0x9d6>
 801c6ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c6ee:	4630      	mov	r0, r6
 801c6f0:	4639      	mov	r1, r7
 801c6f2:	f7e3 fdd5 	bl	80002a0 <__adddf3>
 801c6f6:	ec41 0b10 	vmov	d0, r0, r1
 801c6fa:	b009      	add	sp, #36	; 0x24
 801c6fc:	ecbd 8b06 	vpop	{d8-d10}
 801c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c704:	4b81      	ldr	r3, [pc, #516]	; (801c90c <__ieee754_pow+0x254>)
 801c706:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801c70a:	429c      	cmp	r4, r3
 801c70c:	ee10 aa10 	vmov	sl, s0
 801c710:	463d      	mov	r5, r7
 801c712:	dc06      	bgt.n	801c722 <__ieee754_pow+0x6a>
 801c714:	d101      	bne.n	801c71a <__ieee754_pow+0x62>
 801c716:	2e00      	cmp	r6, #0
 801c718:	d1e7      	bne.n	801c6ea <__ieee754_pow+0x32>
 801c71a:	4598      	cmp	r8, r3
 801c71c:	dc01      	bgt.n	801c722 <__ieee754_pow+0x6a>
 801c71e:	d10f      	bne.n	801c740 <__ieee754_pow+0x88>
 801c720:	b172      	cbz	r2, 801c740 <__ieee754_pow+0x88>
 801c722:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801c726:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801c72a:	ea55 050a 	orrs.w	r5, r5, sl
 801c72e:	d1dc      	bne.n	801c6ea <__ieee754_pow+0x32>
 801c730:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c734:	18db      	adds	r3, r3, r3
 801c736:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801c73a:	4152      	adcs	r2, r2
 801c73c:	429d      	cmp	r5, r3
 801c73e:	e7d0      	b.n	801c6e2 <__ieee754_pow+0x2a>
 801c740:	2d00      	cmp	r5, #0
 801c742:	da3b      	bge.n	801c7bc <__ieee754_pow+0x104>
 801c744:	4b72      	ldr	r3, [pc, #456]	; (801c910 <__ieee754_pow+0x258>)
 801c746:	4598      	cmp	r8, r3
 801c748:	dc51      	bgt.n	801c7ee <__ieee754_pow+0x136>
 801c74a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801c74e:	4598      	cmp	r8, r3
 801c750:	f340 84ac 	ble.w	801d0ac <__ieee754_pow+0x9f4>
 801c754:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c758:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c75c:	2b14      	cmp	r3, #20
 801c75e:	dd0f      	ble.n	801c780 <__ieee754_pow+0xc8>
 801c760:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c764:	fa22 f103 	lsr.w	r1, r2, r3
 801c768:	fa01 f303 	lsl.w	r3, r1, r3
 801c76c:	4293      	cmp	r3, r2
 801c76e:	f040 849d 	bne.w	801d0ac <__ieee754_pow+0x9f4>
 801c772:	f001 0101 	and.w	r1, r1, #1
 801c776:	f1c1 0302 	rsb	r3, r1, #2
 801c77a:	9304      	str	r3, [sp, #16]
 801c77c:	b182      	cbz	r2, 801c7a0 <__ieee754_pow+0xe8>
 801c77e:	e05f      	b.n	801c840 <__ieee754_pow+0x188>
 801c780:	2a00      	cmp	r2, #0
 801c782:	d15b      	bne.n	801c83c <__ieee754_pow+0x184>
 801c784:	f1c3 0314 	rsb	r3, r3, #20
 801c788:	fa48 f103 	asr.w	r1, r8, r3
 801c78c:	fa01 f303 	lsl.w	r3, r1, r3
 801c790:	4543      	cmp	r3, r8
 801c792:	f040 8488 	bne.w	801d0a6 <__ieee754_pow+0x9ee>
 801c796:	f001 0101 	and.w	r1, r1, #1
 801c79a:	f1c1 0302 	rsb	r3, r1, #2
 801c79e:	9304      	str	r3, [sp, #16]
 801c7a0:	4b5c      	ldr	r3, [pc, #368]	; (801c914 <__ieee754_pow+0x25c>)
 801c7a2:	4598      	cmp	r8, r3
 801c7a4:	d132      	bne.n	801c80c <__ieee754_pow+0x154>
 801c7a6:	f1b9 0f00 	cmp.w	r9, #0
 801c7aa:	f280 8478 	bge.w	801d09e <__ieee754_pow+0x9e6>
 801c7ae:	4959      	ldr	r1, [pc, #356]	; (801c914 <__ieee754_pow+0x25c>)
 801c7b0:	4632      	mov	r2, r6
 801c7b2:	463b      	mov	r3, r7
 801c7b4:	2000      	movs	r0, #0
 801c7b6:	f7e4 f853 	bl	8000860 <__aeabi_ddiv>
 801c7ba:	e79c      	b.n	801c6f6 <__ieee754_pow+0x3e>
 801c7bc:	2300      	movs	r3, #0
 801c7be:	9304      	str	r3, [sp, #16]
 801c7c0:	2a00      	cmp	r2, #0
 801c7c2:	d13d      	bne.n	801c840 <__ieee754_pow+0x188>
 801c7c4:	4b51      	ldr	r3, [pc, #324]	; (801c90c <__ieee754_pow+0x254>)
 801c7c6:	4598      	cmp	r8, r3
 801c7c8:	d1ea      	bne.n	801c7a0 <__ieee754_pow+0xe8>
 801c7ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c7ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c7d2:	ea53 030a 	orrs.w	r3, r3, sl
 801c7d6:	f000 845a 	beq.w	801d08e <__ieee754_pow+0x9d6>
 801c7da:	4b4f      	ldr	r3, [pc, #316]	; (801c918 <__ieee754_pow+0x260>)
 801c7dc:	429c      	cmp	r4, r3
 801c7de:	dd08      	ble.n	801c7f2 <__ieee754_pow+0x13a>
 801c7e0:	f1b9 0f00 	cmp.w	r9, #0
 801c7e4:	f2c0 8457 	blt.w	801d096 <__ieee754_pow+0x9de>
 801c7e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c7ec:	e783      	b.n	801c6f6 <__ieee754_pow+0x3e>
 801c7ee:	2302      	movs	r3, #2
 801c7f0:	e7e5      	b.n	801c7be <__ieee754_pow+0x106>
 801c7f2:	f1b9 0f00 	cmp.w	r9, #0
 801c7f6:	f04f 0000 	mov.w	r0, #0
 801c7fa:	f04f 0100 	mov.w	r1, #0
 801c7fe:	f6bf af7a 	bge.w	801c6f6 <__ieee754_pow+0x3e>
 801c802:	e9dd 0300 	ldrd	r0, r3, [sp]
 801c806:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c80a:	e774      	b.n	801c6f6 <__ieee754_pow+0x3e>
 801c80c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801c810:	d106      	bne.n	801c820 <__ieee754_pow+0x168>
 801c812:	4632      	mov	r2, r6
 801c814:	463b      	mov	r3, r7
 801c816:	4630      	mov	r0, r6
 801c818:	4639      	mov	r1, r7
 801c81a:	f7e3 fef7 	bl	800060c <__aeabi_dmul>
 801c81e:	e76a      	b.n	801c6f6 <__ieee754_pow+0x3e>
 801c820:	4b3e      	ldr	r3, [pc, #248]	; (801c91c <__ieee754_pow+0x264>)
 801c822:	4599      	cmp	r9, r3
 801c824:	d10c      	bne.n	801c840 <__ieee754_pow+0x188>
 801c826:	2d00      	cmp	r5, #0
 801c828:	db0a      	blt.n	801c840 <__ieee754_pow+0x188>
 801c82a:	ec47 6b10 	vmov	d0, r6, r7
 801c82e:	b009      	add	sp, #36	; 0x24
 801c830:	ecbd 8b06 	vpop	{d8-d10}
 801c834:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c838:	f000 bc6c 	b.w	801d114 <__ieee754_sqrt>
 801c83c:	2300      	movs	r3, #0
 801c83e:	9304      	str	r3, [sp, #16]
 801c840:	ec47 6b10 	vmov	d0, r6, r7
 801c844:	f000 fdeb 	bl	801d41e <fabs>
 801c848:	ec51 0b10 	vmov	r0, r1, d0
 801c84c:	f1ba 0f00 	cmp.w	sl, #0
 801c850:	d129      	bne.n	801c8a6 <__ieee754_pow+0x1ee>
 801c852:	b124      	cbz	r4, 801c85e <__ieee754_pow+0x1a6>
 801c854:	4b2f      	ldr	r3, [pc, #188]	; (801c914 <__ieee754_pow+0x25c>)
 801c856:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801c85a:	429a      	cmp	r2, r3
 801c85c:	d123      	bne.n	801c8a6 <__ieee754_pow+0x1ee>
 801c85e:	f1b9 0f00 	cmp.w	r9, #0
 801c862:	da05      	bge.n	801c870 <__ieee754_pow+0x1b8>
 801c864:	4602      	mov	r2, r0
 801c866:	460b      	mov	r3, r1
 801c868:	2000      	movs	r0, #0
 801c86a:	492a      	ldr	r1, [pc, #168]	; (801c914 <__ieee754_pow+0x25c>)
 801c86c:	f7e3 fff8 	bl	8000860 <__aeabi_ddiv>
 801c870:	2d00      	cmp	r5, #0
 801c872:	f6bf af40 	bge.w	801c6f6 <__ieee754_pow+0x3e>
 801c876:	9b04      	ldr	r3, [sp, #16]
 801c878:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c87c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c880:	4323      	orrs	r3, r4
 801c882:	d108      	bne.n	801c896 <__ieee754_pow+0x1de>
 801c884:	4602      	mov	r2, r0
 801c886:	460b      	mov	r3, r1
 801c888:	4610      	mov	r0, r2
 801c88a:	4619      	mov	r1, r3
 801c88c:	f7e3 fd06 	bl	800029c <__aeabi_dsub>
 801c890:	4602      	mov	r2, r0
 801c892:	460b      	mov	r3, r1
 801c894:	e78f      	b.n	801c7b6 <__ieee754_pow+0xfe>
 801c896:	9b04      	ldr	r3, [sp, #16]
 801c898:	2b01      	cmp	r3, #1
 801c89a:	f47f af2c 	bne.w	801c6f6 <__ieee754_pow+0x3e>
 801c89e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c8a2:	4619      	mov	r1, r3
 801c8a4:	e727      	b.n	801c6f6 <__ieee754_pow+0x3e>
 801c8a6:	0feb      	lsrs	r3, r5, #31
 801c8a8:	3b01      	subs	r3, #1
 801c8aa:	9306      	str	r3, [sp, #24]
 801c8ac:	9a06      	ldr	r2, [sp, #24]
 801c8ae:	9b04      	ldr	r3, [sp, #16]
 801c8b0:	4313      	orrs	r3, r2
 801c8b2:	d102      	bne.n	801c8ba <__ieee754_pow+0x202>
 801c8b4:	4632      	mov	r2, r6
 801c8b6:	463b      	mov	r3, r7
 801c8b8:	e7e6      	b.n	801c888 <__ieee754_pow+0x1d0>
 801c8ba:	4b19      	ldr	r3, [pc, #100]	; (801c920 <__ieee754_pow+0x268>)
 801c8bc:	4598      	cmp	r8, r3
 801c8be:	f340 80fb 	ble.w	801cab8 <__ieee754_pow+0x400>
 801c8c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801c8c6:	4598      	cmp	r8, r3
 801c8c8:	4b13      	ldr	r3, [pc, #76]	; (801c918 <__ieee754_pow+0x260>)
 801c8ca:	dd0c      	ble.n	801c8e6 <__ieee754_pow+0x22e>
 801c8cc:	429c      	cmp	r4, r3
 801c8ce:	dc0f      	bgt.n	801c8f0 <__ieee754_pow+0x238>
 801c8d0:	f1b9 0f00 	cmp.w	r9, #0
 801c8d4:	da0f      	bge.n	801c8f6 <__ieee754_pow+0x23e>
 801c8d6:	2000      	movs	r0, #0
 801c8d8:	b009      	add	sp, #36	; 0x24
 801c8da:	ecbd 8b06 	vpop	{d8-d10}
 801c8de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8e2:	f000 bd93 	b.w	801d40c <__math_oflow>
 801c8e6:	429c      	cmp	r4, r3
 801c8e8:	dbf2      	blt.n	801c8d0 <__ieee754_pow+0x218>
 801c8ea:	4b0a      	ldr	r3, [pc, #40]	; (801c914 <__ieee754_pow+0x25c>)
 801c8ec:	429c      	cmp	r4, r3
 801c8ee:	dd19      	ble.n	801c924 <__ieee754_pow+0x26c>
 801c8f0:	f1b9 0f00 	cmp.w	r9, #0
 801c8f4:	dcef      	bgt.n	801c8d6 <__ieee754_pow+0x21e>
 801c8f6:	2000      	movs	r0, #0
 801c8f8:	b009      	add	sp, #36	; 0x24
 801c8fa:	ecbd 8b06 	vpop	{d8-d10}
 801c8fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c902:	f000 bd7a 	b.w	801d3fa <__math_uflow>
 801c906:	bf00      	nop
 801c908:	fff00000 	.word	0xfff00000
 801c90c:	7ff00000 	.word	0x7ff00000
 801c910:	433fffff 	.word	0x433fffff
 801c914:	3ff00000 	.word	0x3ff00000
 801c918:	3fefffff 	.word	0x3fefffff
 801c91c:	3fe00000 	.word	0x3fe00000
 801c920:	41e00000 	.word	0x41e00000
 801c924:	4b60      	ldr	r3, [pc, #384]	; (801caa8 <__ieee754_pow+0x3f0>)
 801c926:	2200      	movs	r2, #0
 801c928:	f7e3 fcb8 	bl	800029c <__aeabi_dsub>
 801c92c:	a354      	add	r3, pc, #336	; (adr r3, 801ca80 <__ieee754_pow+0x3c8>)
 801c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c932:	4604      	mov	r4, r0
 801c934:	460d      	mov	r5, r1
 801c936:	f7e3 fe69 	bl	800060c <__aeabi_dmul>
 801c93a:	a353      	add	r3, pc, #332	; (adr r3, 801ca88 <__ieee754_pow+0x3d0>)
 801c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c940:	4606      	mov	r6, r0
 801c942:	460f      	mov	r7, r1
 801c944:	4620      	mov	r0, r4
 801c946:	4629      	mov	r1, r5
 801c948:	f7e3 fe60 	bl	800060c <__aeabi_dmul>
 801c94c:	4b57      	ldr	r3, [pc, #348]	; (801caac <__ieee754_pow+0x3f4>)
 801c94e:	4682      	mov	sl, r0
 801c950:	468b      	mov	fp, r1
 801c952:	2200      	movs	r2, #0
 801c954:	4620      	mov	r0, r4
 801c956:	4629      	mov	r1, r5
 801c958:	f7e3 fe58 	bl	800060c <__aeabi_dmul>
 801c95c:	4602      	mov	r2, r0
 801c95e:	460b      	mov	r3, r1
 801c960:	a14b      	add	r1, pc, #300	; (adr r1, 801ca90 <__ieee754_pow+0x3d8>)
 801c962:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c966:	f7e3 fc99 	bl	800029c <__aeabi_dsub>
 801c96a:	4622      	mov	r2, r4
 801c96c:	462b      	mov	r3, r5
 801c96e:	f7e3 fe4d 	bl	800060c <__aeabi_dmul>
 801c972:	4602      	mov	r2, r0
 801c974:	460b      	mov	r3, r1
 801c976:	2000      	movs	r0, #0
 801c978:	494d      	ldr	r1, [pc, #308]	; (801cab0 <__ieee754_pow+0x3f8>)
 801c97a:	f7e3 fc8f 	bl	800029c <__aeabi_dsub>
 801c97e:	4622      	mov	r2, r4
 801c980:	4680      	mov	r8, r0
 801c982:	4689      	mov	r9, r1
 801c984:	462b      	mov	r3, r5
 801c986:	4620      	mov	r0, r4
 801c988:	4629      	mov	r1, r5
 801c98a:	f7e3 fe3f 	bl	800060c <__aeabi_dmul>
 801c98e:	4602      	mov	r2, r0
 801c990:	460b      	mov	r3, r1
 801c992:	4640      	mov	r0, r8
 801c994:	4649      	mov	r1, r9
 801c996:	f7e3 fe39 	bl	800060c <__aeabi_dmul>
 801c99a:	a33f      	add	r3, pc, #252	; (adr r3, 801ca98 <__ieee754_pow+0x3e0>)
 801c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9a0:	f7e3 fe34 	bl	800060c <__aeabi_dmul>
 801c9a4:	4602      	mov	r2, r0
 801c9a6:	460b      	mov	r3, r1
 801c9a8:	4650      	mov	r0, sl
 801c9aa:	4659      	mov	r1, fp
 801c9ac:	f7e3 fc76 	bl	800029c <__aeabi_dsub>
 801c9b0:	4602      	mov	r2, r0
 801c9b2:	460b      	mov	r3, r1
 801c9b4:	4680      	mov	r8, r0
 801c9b6:	4689      	mov	r9, r1
 801c9b8:	4630      	mov	r0, r6
 801c9ba:	4639      	mov	r1, r7
 801c9bc:	f7e3 fc70 	bl	80002a0 <__adddf3>
 801c9c0:	2000      	movs	r0, #0
 801c9c2:	4632      	mov	r2, r6
 801c9c4:	463b      	mov	r3, r7
 801c9c6:	4604      	mov	r4, r0
 801c9c8:	460d      	mov	r5, r1
 801c9ca:	f7e3 fc67 	bl	800029c <__aeabi_dsub>
 801c9ce:	4602      	mov	r2, r0
 801c9d0:	460b      	mov	r3, r1
 801c9d2:	4640      	mov	r0, r8
 801c9d4:	4649      	mov	r1, r9
 801c9d6:	f7e3 fc61 	bl	800029c <__aeabi_dsub>
 801c9da:	9b04      	ldr	r3, [sp, #16]
 801c9dc:	9a06      	ldr	r2, [sp, #24]
 801c9de:	3b01      	subs	r3, #1
 801c9e0:	4313      	orrs	r3, r2
 801c9e2:	4682      	mov	sl, r0
 801c9e4:	468b      	mov	fp, r1
 801c9e6:	f040 81e7 	bne.w	801cdb8 <__ieee754_pow+0x700>
 801c9ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801caa0 <__ieee754_pow+0x3e8>
 801c9ee:	eeb0 8a47 	vmov.f32	s16, s14
 801c9f2:	eef0 8a67 	vmov.f32	s17, s15
 801c9f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c9fa:	2600      	movs	r6, #0
 801c9fc:	4632      	mov	r2, r6
 801c9fe:	463b      	mov	r3, r7
 801ca00:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ca04:	f7e3 fc4a 	bl	800029c <__aeabi_dsub>
 801ca08:	4622      	mov	r2, r4
 801ca0a:	462b      	mov	r3, r5
 801ca0c:	f7e3 fdfe 	bl	800060c <__aeabi_dmul>
 801ca10:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ca14:	4680      	mov	r8, r0
 801ca16:	4689      	mov	r9, r1
 801ca18:	4650      	mov	r0, sl
 801ca1a:	4659      	mov	r1, fp
 801ca1c:	f7e3 fdf6 	bl	800060c <__aeabi_dmul>
 801ca20:	4602      	mov	r2, r0
 801ca22:	460b      	mov	r3, r1
 801ca24:	4640      	mov	r0, r8
 801ca26:	4649      	mov	r1, r9
 801ca28:	f7e3 fc3a 	bl	80002a0 <__adddf3>
 801ca2c:	4632      	mov	r2, r6
 801ca2e:	463b      	mov	r3, r7
 801ca30:	4680      	mov	r8, r0
 801ca32:	4689      	mov	r9, r1
 801ca34:	4620      	mov	r0, r4
 801ca36:	4629      	mov	r1, r5
 801ca38:	f7e3 fde8 	bl	800060c <__aeabi_dmul>
 801ca3c:	460b      	mov	r3, r1
 801ca3e:	4604      	mov	r4, r0
 801ca40:	460d      	mov	r5, r1
 801ca42:	4602      	mov	r2, r0
 801ca44:	4649      	mov	r1, r9
 801ca46:	4640      	mov	r0, r8
 801ca48:	f7e3 fc2a 	bl	80002a0 <__adddf3>
 801ca4c:	4b19      	ldr	r3, [pc, #100]	; (801cab4 <__ieee754_pow+0x3fc>)
 801ca4e:	4299      	cmp	r1, r3
 801ca50:	ec45 4b19 	vmov	d9, r4, r5
 801ca54:	4606      	mov	r6, r0
 801ca56:	460f      	mov	r7, r1
 801ca58:	468b      	mov	fp, r1
 801ca5a:	f340 82f1 	ble.w	801d040 <__ieee754_pow+0x988>
 801ca5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ca62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ca66:	4303      	orrs	r3, r0
 801ca68:	f000 81e4 	beq.w	801ce34 <__ieee754_pow+0x77c>
 801ca6c:	ec51 0b18 	vmov	r0, r1, d8
 801ca70:	2200      	movs	r2, #0
 801ca72:	2300      	movs	r3, #0
 801ca74:	f7e4 f83c 	bl	8000af0 <__aeabi_dcmplt>
 801ca78:	3800      	subs	r0, #0
 801ca7a:	bf18      	it	ne
 801ca7c:	2001      	movne	r0, #1
 801ca7e:	e72b      	b.n	801c8d8 <__ieee754_pow+0x220>
 801ca80:	60000000 	.word	0x60000000
 801ca84:	3ff71547 	.word	0x3ff71547
 801ca88:	f85ddf44 	.word	0xf85ddf44
 801ca8c:	3e54ae0b 	.word	0x3e54ae0b
 801ca90:	55555555 	.word	0x55555555
 801ca94:	3fd55555 	.word	0x3fd55555
 801ca98:	652b82fe 	.word	0x652b82fe
 801ca9c:	3ff71547 	.word	0x3ff71547
 801caa0:	00000000 	.word	0x00000000
 801caa4:	bff00000 	.word	0xbff00000
 801caa8:	3ff00000 	.word	0x3ff00000
 801caac:	3fd00000 	.word	0x3fd00000
 801cab0:	3fe00000 	.word	0x3fe00000
 801cab4:	408fffff 	.word	0x408fffff
 801cab8:	4bd5      	ldr	r3, [pc, #852]	; (801ce10 <__ieee754_pow+0x758>)
 801caba:	402b      	ands	r3, r5
 801cabc:	2200      	movs	r2, #0
 801cabe:	b92b      	cbnz	r3, 801cacc <__ieee754_pow+0x414>
 801cac0:	4bd4      	ldr	r3, [pc, #848]	; (801ce14 <__ieee754_pow+0x75c>)
 801cac2:	f7e3 fda3 	bl	800060c <__aeabi_dmul>
 801cac6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801caca:	460c      	mov	r4, r1
 801cacc:	1523      	asrs	r3, r4, #20
 801cace:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801cad2:	4413      	add	r3, r2
 801cad4:	9305      	str	r3, [sp, #20]
 801cad6:	4bd0      	ldr	r3, [pc, #832]	; (801ce18 <__ieee754_pow+0x760>)
 801cad8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801cadc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801cae0:	429c      	cmp	r4, r3
 801cae2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801cae6:	dd08      	ble.n	801cafa <__ieee754_pow+0x442>
 801cae8:	4bcc      	ldr	r3, [pc, #816]	; (801ce1c <__ieee754_pow+0x764>)
 801caea:	429c      	cmp	r4, r3
 801caec:	f340 8162 	ble.w	801cdb4 <__ieee754_pow+0x6fc>
 801caf0:	9b05      	ldr	r3, [sp, #20]
 801caf2:	3301      	adds	r3, #1
 801caf4:	9305      	str	r3, [sp, #20]
 801caf6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801cafa:	2400      	movs	r4, #0
 801cafc:	00e3      	lsls	r3, r4, #3
 801cafe:	9307      	str	r3, [sp, #28]
 801cb00:	4bc7      	ldr	r3, [pc, #796]	; (801ce20 <__ieee754_pow+0x768>)
 801cb02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cb06:	ed93 7b00 	vldr	d7, [r3]
 801cb0a:	4629      	mov	r1, r5
 801cb0c:	ec53 2b17 	vmov	r2, r3, d7
 801cb10:	eeb0 9a47 	vmov.f32	s18, s14
 801cb14:	eef0 9a67 	vmov.f32	s19, s15
 801cb18:	4682      	mov	sl, r0
 801cb1a:	f7e3 fbbf 	bl	800029c <__aeabi_dsub>
 801cb1e:	4652      	mov	r2, sl
 801cb20:	4606      	mov	r6, r0
 801cb22:	460f      	mov	r7, r1
 801cb24:	462b      	mov	r3, r5
 801cb26:	ec51 0b19 	vmov	r0, r1, d9
 801cb2a:	f7e3 fbb9 	bl	80002a0 <__adddf3>
 801cb2e:	4602      	mov	r2, r0
 801cb30:	460b      	mov	r3, r1
 801cb32:	2000      	movs	r0, #0
 801cb34:	49bb      	ldr	r1, [pc, #748]	; (801ce24 <__ieee754_pow+0x76c>)
 801cb36:	f7e3 fe93 	bl	8000860 <__aeabi_ddiv>
 801cb3a:	ec41 0b1a 	vmov	d10, r0, r1
 801cb3e:	4602      	mov	r2, r0
 801cb40:	460b      	mov	r3, r1
 801cb42:	4630      	mov	r0, r6
 801cb44:	4639      	mov	r1, r7
 801cb46:	f7e3 fd61 	bl	800060c <__aeabi_dmul>
 801cb4a:	2300      	movs	r3, #0
 801cb4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cb50:	9302      	str	r3, [sp, #8]
 801cb52:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801cb56:	46ab      	mov	fp, r5
 801cb58:	106d      	asrs	r5, r5, #1
 801cb5a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801cb5e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801cb62:	ec41 0b18 	vmov	d8, r0, r1
 801cb66:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801cb6a:	2200      	movs	r2, #0
 801cb6c:	4640      	mov	r0, r8
 801cb6e:	4649      	mov	r1, r9
 801cb70:	4614      	mov	r4, r2
 801cb72:	461d      	mov	r5, r3
 801cb74:	f7e3 fd4a 	bl	800060c <__aeabi_dmul>
 801cb78:	4602      	mov	r2, r0
 801cb7a:	460b      	mov	r3, r1
 801cb7c:	4630      	mov	r0, r6
 801cb7e:	4639      	mov	r1, r7
 801cb80:	f7e3 fb8c 	bl	800029c <__aeabi_dsub>
 801cb84:	ec53 2b19 	vmov	r2, r3, d9
 801cb88:	4606      	mov	r6, r0
 801cb8a:	460f      	mov	r7, r1
 801cb8c:	4620      	mov	r0, r4
 801cb8e:	4629      	mov	r1, r5
 801cb90:	f7e3 fb84 	bl	800029c <__aeabi_dsub>
 801cb94:	4602      	mov	r2, r0
 801cb96:	460b      	mov	r3, r1
 801cb98:	4650      	mov	r0, sl
 801cb9a:	4659      	mov	r1, fp
 801cb9c:	f7e3 fb7e 	bl	800029c <__aeabi_dsub>
 801cba0:	4642      	mov	r2, r8
 801cba2:	464b      	mov	r3, r9
 801cba4:	f7e3 fd32 	bl	800060c <__aeabi_dmul>
 801cba8:	4602      	mov	r2, r0
 801cbaa:	460b      	mov	r3, r1
 801cbac:	4630      	mov	r0, r6
 801cbae:	4639      	mov	r1, r7
 801cbb0:	f7e3 fb74 	bl	800029c <__aeabi_dsub>
 801cbb4:	ec53 2b1a 	vmov	r2, r3, d10
 801cbb8:	f7e3 fd28 	bl	800060c <__aeabi_dmul>
 801cbbc:	ec53 2b18 	vmov	r2, r3, d8
 801cbc0:	ec41 0b19 	vmov	d9, r0, r1
 801cbc4:	ec51 0b18 	vmov	r0, r1, d8
 801cbc8:	f7e3 fd20 	bl	800060c <__aeabi_dmul>
 801cbcc:	a37c      	add	r3, pc, #496	; (adr r3, 801cdc0 <__ieee754_pow+0x708>)
 801cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbd2:	4604      	mov	r4, r0
 801cbd4:	460d      	mov	r5, r1
 801cbd6:	f7e3 fd19 	bl	800060c <__aeabi_dmul>
 801cbda:	a37b      	add	r3, pc, #492	; (adr r3, 801cdc8 <__ieee754_pow+0x710>)
 801cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbe0:	f7e3 fb5e 	bl	80002a0 <__adddf3>
 801cbe4:	4622      	mov	r2, r4
 801cbe6:	462b      	mov	r3, r5
 801cbe8:	f7e3 fd10 	bl	800060c <__aeabi_dmul>
 801cbec:	a378      	add	r3, pc, #480	; (adr r3, 801cdd0 <__ieee754_pow+0x718>)
 801cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbf2:	f7e3 fb55 	bl	80002a0 <__adddf3>
 801cbf6:	4622      	mov	r2, r4
 801cbf8:	462b      	mov	r3, r5
 801cbfa:	f7e3 fd07 	bl	800060c <__aeabi_dmul>
 801cbfe:	a376      	add	r3, pc, #472	; (adr r3, 801cdd8 <__ieee754_pow+0x720>)
 801cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc04:	f7e3 fb4c 	bl	80002a0 <__adddf3>
 801cc08:	4622      	mov	r2, r4
 801cc0a:	462b      	mov	r3, r5
 801cc0c:	f7e3 fcfe 	bl	800060c <__aeabi_dmul>
 801cc10:	a373      	add	r3, pc, #460	; (adr r3, 801cde0 <__ieee754_pow+0x728>)
 801cc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc16:	f7e3 fb43 	bl	80002a0 <__adddf3>
 801cc1a:	4622      	mov	r2, r4
 801cc1c:	462b      	mov	r3, r5
 801cc1e:	f7e3 fcf5 	bl	800060c <__aeabi_dmul>
 801cc22:	a371      	add	r3, pc, #452	; (adr r3, 801cde8 <__ieee754_pow+0x730>)
 801cc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc28:	f7e3 fb3a 	bl	80002a0 <__adddf3>
 801cc2c:	4622      	mov	r2, r4
 801cc2e:	4606      	mov	r6, r0
 801cc30:	460f      	mov	r7, r1
 801cc32:	462b      	mov	r3, r5
 801cc34:	4620      	mov	r0, r4
 801cc36:	4629      	mov	r1, r5
 801cc38:	f7e3 fce8 	bl	800060c <__aeabi_dmul>
 801cc3c:	4602      	mov	r2, r0
 801cc3e:	460b      	mov	r3, r1
 801cc40:	4630      	mov	r0, r6
 801cc42:	4639      	mov	r1, r7
 801cc44:	f7e3 fce2 	bl	800060c <__aeabi_dmul>
 801cc48:	4642      	mov	r2, r8
 801cc4a:	4604      	mov	r4, r0
 801cc4c:	460d      	mov	r5, r1
 801cc4e:	464b      	mov	r3, r9
 801cc50:	ec51 0b18 	vmov	r0, r1, d8
 801cc54:	f7e3 fb24 	bl	80002a0 <__adddf3>
 801cc58:	ec53 2b19 	vmov	r2, r3, d9
 801cc5c:	f7e3 fcd6 	bl	800060c <__aeabi_dmul>
 801cc60:	4622      	mov	r2, r4
 801cc62:	462b      	mov	r3, r5
 801cc64:	f7e3 fb1c 	bl	80002a0 <__adddf3>
 801cc68:	4642      	mov	r2, r8
 801cc6a:	4682      	mov	sl, r0
 801cc6c:	468b      	mov	fp, r1
 801cc6e:	464b      	mov	r3, r9
 801cc70:	4640      	mov	r0, r8
 801cc72:	4649      	mov	r1, r9
 801cc74:	f7e3 fcca 	bl	800060c <__aeabi_dmul>
 801cc78:	4b6b      	ldr	r3, [pc, #428]	; (801ce28 <__ieee754_pow+0x770>)
 801cc7a:	2200      	movs	r2, #0
 801cc7c:	4606      	mov	r6, r0
 801cc7e:	460f      	mov	r7, r1
 801cc80:	f7e3 fb0e 	bl	80002a0 <__adddf3>
 801cc84:	4652      	mov	r2, sl
 801cc86:	465b      	mov	r3, fp
 801cc88:	f7e3 fb0a 	bl	80002a0 <__adddf3>
 801cc8c:	2000      	movs	r0, #0
 801cc8e:	4604      	mov	r4, r0
 801cc90:	460d      	mov	r5, r1
 801cc92:	4602      	mov	r2, r0
 801cc94:	460b      	mov	r3, r1
 801cc96:	4640      	mov	r0, r8
 801cc98:	4649      	mov	r1, r9
 801cc9a:	f7e3 fcb7 	bl	800060c <__aeabi_dmul>
 801cc9e:	4b62      	ldr	r3, [pc, #392]	; (801ce28 <__ieee754_pow+0x770>)
 801cca0:	4680      	mov	r8, r0
 801cca2:	4689      	mov	r9, r1
 801cca4:	2200      	movs	r2, #0
 801cca6:	4620      	mov	r0, r4
 801cca8:	4629      	mov	r1, r5
 801ccaa:	f7e3 faf7 	bl	800029c <__aeabi_dsub>
 801ccae:	4632      	mov	r2, r6
 801ccb0:	463b      	mov	r3, r7
 801ccb2:	f7e3 faf3 	bl	800029c <__aeabi_dsub>
 801ccb6:	4602      	mov	r2, r0
 801ccb8:	460b      	mov	r3, r1
 801ccba:	4650      	mov	r0, sl
 801ccbc:	4659      	mov	r1, fp
 801ccbe:	f7e3 faed 	bl	800029c <__aeabi_dsub>
 801ccc2:	ec53 2b18 	vmov	r2, r3, d8
 801ccc6:	f7e3 fca1 	bl	800060c <__aeabi_dmul>
 801ccca:	4622      	mov	r2, r4
 801cccc:	4606      	mov	r6, r0
 801ccce:	460f      	mov	r7, r1
 801ccd0:	462b      	mov	r3, r5
 801ccd2:	ec51 0b19 	vmov	r0, r1, d9
 801ccd6:	f7e3 fc99 	bl	800060c <__aeabi_dmul>
 801ccda:	4602      	mov	r2, r0
 801ccdc:	460b      	mov	r3, r1
 801ccde:	4630      	mov	r0, r6
 801cce0:	4639      	mov	r1, r7
 801cce2:	f7e3 fadd 	bl	80002a0 <__adddf3>
 801cce6:	4606      	mov	r6, r0
 801cce8:	460f      	mov	r7, r1
 801ccea:	4602      	mov	r2, r0
 801ccec:	460b      	mov	r3, r1
 801ccee:	4640      	mov	r0, r8
 801ccf0:	4649      	mov	r1, r9
 801ccf2:	f7e3 fad5 	bl	80002a0 <__adddf3>
 801ccf6:	a33e      	add	r3, pc, #248	; (adr r3, 801cdf0 <__ieee754_pow+0x738>)
 801ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccfc:	2000      	movs	r0, #0
 801ccfe:	4604      	mov	r4, r0
 801cd00:	460d      	mov	r5, r1
 801cd02:	f7e3 fc83 	bl	800060c <__aeabi_dmul>
 801cd06:	4642      	mov	r2, r8
 801cd08:	ec41 0b18 	vmov	d8, r0, r1
 801cd0c:	464b      	mov	r3, r9
 801cd0e:	4620      	mov	r0, r4
 801cd10:	4629      	mov	r1, r5
 801cd12:	f7e3 fac3 	bl	800029c <__aeabi_dsub>
 801cd16:	4602      	mov	r2, r0
 801cd18:	460b      	mov	r3, r1
 801cd1a:	4630      	mov	r0, r6
 801cd1c:	4639      	mov	r1, r7
 801cd1e:	f7e3 fabd 	bl	800029c <__aeabi_dsub>
 801cd22:	a335      	add	r3, pc, #212	; (adr r3, 801cdf8 <__ieee754_pow+0x740>)
 801cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd28:	f7e3 fc70 	bl	800060c <__aeabi_dmul>
 801cd2c:	a334      	add	r3, pc, #208	; (adr r3, 801ce00 <__ieee754_pow+0x748>)
 801cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd32:	4606      	mov	r6, r0
 801cd34:	460f      	mov	r7, r1
 801cd36:	4620      	mov	r0, r4
 801cd38:	4629      	mov	r1, r5
 801cd3a:	f7e3 fc67 	bl	800060c <__aeabi_dmul>
 801cd3e:	4602      	mov	r2, r0
 801cd40:	460b      	mov	r3, r1
 801cd42:	4630      	mov	r0, r6
 801cd44:	4639      	mov	r1, r7
 801cd46:	f7e3 faab 	bl	80002a0 <__adddf3>
 801cd4a:	9a07      	ldr	r2, [sp, #28]
 801cd4c:	4b37      	ldr	r3, [pc, #220]	; (801ce2c <__ieee754_pow+0x774>)
 801cd4e:	4413      	add	r3, r2
 801cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd54:	f7e3 faa4 	bl	80002a0 <__adddf3>
 801cd58:	4682      	mov	sl, r0
 801cd5a:	9805      	ldr	r0, [sp, #20]
 801cd5c:	468b      	mov	fp, r1
 801cd5e:	f7e3 fbeb 	bl	8000538 <__aeabi_i2d>
 801cd62:	9a07      	ldr	r2, [sp, #28]
 801cd64:	4b32      	ldr	r3, [pc, #200]	; (801ce30 <__ieee754_pow+0x778>)
 801cd66:	4413      	add	r3, r2
 801cd68:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cd6c:	4606      	mov	r6, r0
 801cd6e:	460f      	mov	r7, r1
 801cd70:	4652      	mov	r2, sl
 801cd72:	465b      	mov	r3, fp
 801cd74:	ec51 0b18 	vmov	r0, r1, d8
 801cd78:	f7e3 fa92 	bl	80002a0 <__adddf3>
 801cd7c:	4642      	mov	r2, r8
 801cd7e:	464b      	mov	r3, r9
 801cd80:	f7e3 fa8e 	bl	80002a0 <__adddf3>
 801cd84:	4632      	mov	r2, r6
 801cd86:	463b      	mov	r3, r7
 801cd88:	f7e3 fa8a 	bl	80002a0 <__adddf3>
 801cd8c:	2000      	movs	r0, #0
 801cd8e:	4632      	mov	r2, r6
 801cd90:	463b      	mov	r3, r7
 801cd92:	4604      	mov	r4, r0
 801cd94:	460d      	mov	r5, r1
 801cd96:	f7e3 fa81 	bl	800029c <__aeabi_dsub>
 801cd9a:	4642      	mov	r2, r8
 801cd9c:	464b      	mov	r3, r9
 801cd9e:	f7e3 fa7d 	bl	800029c <__aeabi_dsub>
 801cda2:	ec53 2b18 	vmov	r2, r3, d8
 801cda6:	f7e3 fa79 	bl	800029c <__aeabi_dsub>
 801cdaa:	4602      	mov	r2, r0
 801cdac:	460b      	mov	r3, r1
 801cdae:	4650      	mov	r0, sl
 801cdb0:	4659      	mov	r1, fp
 801cdb2:	e610      	b.n	801c9d6 <__ieee754_pow+0x31e>
 801cdb4:	2401      	movs	r4, #1
 801cdb6:	e6a1      	b.n	801cafc <__ieee754_pow+0x444>
 801cdb8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801ce08 <__ieee754_pow+0x750>
 801cdbc:	e617      	b.n	801c9ee <__ieee754_pow+0x336>
 801cdbe:	bf00      	nop
 801cdc0:	4a454eef 	.word	0x4a454eef
 801cdc4:	3fca7e28 	.word	0x3fca7e28
 801cdc8:	93c9db65 	.word	0x93c9db65
 801cdcc:	3fcd864a 	.word	0x3fcd864a
 801cdd0:	a91d4101 	.word	0xa91d4101
 801cdd4:	3fd17460 	.word	0x3fd17460
 801cdd8:	518f264d 	.word	0x518f264d
 801cddc:	3fd55555 	.word	0x3fd55555
 801cde0:	db6fabff 	.word	0xdb6fabff
 801cde4:	3fdb6db6 	.word	0x3fdb6db6
 801cde8:	33333303 	.word	0x33333303
 801cdec:	3fe33333 	.word	0x3fe33333
 801cdf0:	e0000000 	.word	0xe0000000
 801cdf4:	3feec709 	.word	0x3feec709
 801cdf8:	dc3a03fd 	.word	0xdc3a03fd
 801cdfc:	3feec709 	.word	0x3feec709
 801ce00:	145b01f5 	.word	0x145b01f5
 801ce04:	be3e2fe0 	.word	0xbe3e2fe0
 801ce08:	00000000 	.word	0x00000000
 801ce0c:	3ff00000 	.word	0x3ff00000
 801ce10:	7ff00000 	.word	0x7ff00000
 801ce14:	43400000 	.word	0x43400000
 801ce18:	0003988e 	.word	0x0003988e
 801ce1c:	000bb679 	.word	0x000bb679
 801ce20:	08032728 	.word	0x08032728
 801ce24:	3ff00000 	.word	0x3ff00000
 801ce28:	40080000 	.word	0x40080000
 801ce2c:	08032748 	.word	0x08032748
 801ce30:	08032738 	.word	0x08032738
 801ce34:	a3b5      	add	r3, pc, #724	; (adr r3, 801d10c <__ieee754_pow+0xa54>)
 801ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce3a:	4640      	mov	r0, r8
 801ce3c:	4649      	mov	r1, r9
 801ce3e:	f7e3 fa2f 	bl	80002a0 <__adddf3>
 801ce42:	4622      	mov	r2, r4
 801ce44:	ec41 0b1a 	vmov	d10, r0, r1
 801ce48:	462b      	mov	r3, r5
 801ce4a:	4630      	mov	r0, r6
 801ce4c:	4639      	mov	r1, r7
 801ce4e:	f7e3 fa25 	bl	800029c <__aeabi_dsub>
 801ce52:	4602      	mov	r2, r0
 801ce54:	460b      	mov	r3, r1
 801ce56:	ec51 0b1a 	vmov	r0, r1, d10
 801ce5a:	f7e3 fe67 	bl	8000b2c <__aeabi_dcmpgt>
 801ce5e:	2800      	cmp	r0, #0
 801ce60:	f47f ae04 	bne.w	801ca6c <__ieee754_pow+0x3b4>
 801ce64:	4aa4      	ldr	r2, [pc, #656]	; (801d0f8 <__ieee754_pow+0xa40>)
 801ce66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ce6a:	4293      	cmp	r3, r2
 801ce6c:	f340 8108 	ble.w	801d080 <__ieee754_pow+0x9c8>
 801ce70:	151b      	asrs	r3, r3, #20
 801ce72:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ce76:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ce7a:	fa4a f303 	asr.w	r3, sl, r3
 801ce7e:	445b      	add	r3, fp
 801ce80:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ce84:	4e9d      	ldr	r6, [pc, #628]	; (801d0fc <__ieee754_pow+0xa44>)
 801ce86:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ce8a:	4116      	asrs	r6, r2
 801ce8c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ce90:	2000      	movs	r0, #0
 801ce92:	ea23 0106 	bic.w	r1, r3, r6
 801ce96:	f1c2 0214 	rsb	r2, r2, #20
 801ce9a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ce9e:	fa4a fa02 	asr.w	sl, sl, r2
 801cea2:	f1bb 0f00 	cmp.w	fp, #0
 801cea6:	4602      	mov	r2, r0
 801cea8:	460b      	mov	r3, r1
 801ceaa:	4620      	mov	r0, r4
 801ceac:	4629      	mov	r1, r5
 801ceae:	bfb8      	it	lt
 801ceb0:	f1ca 0a00 	rsblt	sl, sl, #0
 801ceb4:	f7e3 f9f2 	bl	800029c <__aeabi_dsub>
 801ceb8:	ec41 0b19 	vmov	d9, r0, r1
 801cebc:	4642      	mov	r2, r8
 801cebe:	464b      	mov	r3, r9
 801cec0:	ec51 0b19 	vmov	r0, r1, d9
 801cec4:	f7e3 f9ec 	bl	80002a0 <__adddf3>
 801cec8:	a37b      	add	r3, pc, #492	; (adr r3, 801d0b8 <__ieee754_pow+0xa00>)
 801ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cece:	2000      	movs	r0, #0
 801ced0:	4604      	mov	r4, r0
 801ced2:	460d      	mov	r5, r1
 801ced4:	f7e3 fb9a 	bl	800060c <__aeabi_dmul>
 801ced8:	ec53 2b19 	vmov	r2, r3, d9
 801cedc:	4606      	mov	r6, r0
 801cede:	460f      	mov	r7, r1
 801cee0:	4620      	mov	r0, r4
 801cee2:	4629      	mov	r1, r5
 801cee4:	f7e3 f9da 	bl	800029c <__aeabi_dsub>
 801cee8:	4602      	mov	r2, r0
 801ceea:	460b      	mov	r3, r1
 801ceec:	4640      	mov	r0, r8
 801ceee:	4649      	mov	r1, r9
 801cef0:	f7e3 f9d4 	bl	800029c <__aeabi_dsub>
 801cef4:	a372      	add	r3, pc, #456	; (adr r3, 801d0c0 <__ieee754_pow+0xa08>)
 801cef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cefa:	f7e3 fb87 	bl	800060c <__aeabi_dmul>
 801cefe:	a372      	add	r3, pc, #456	; (adr r3, 801d0c8 <__ieee754_pow+0xa10>)
 801cf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf04:	4680      	mov	r8, r0
 801cf06:	4689      	mov	r9, r1
 801cf08:	4620      	mov	r0, r4
 801cf0a:	4629      	mov	r1, r5
 801cf0c:	f7e3 fb7e 	bl	800060c <__aeabi_dmul>
 801cf10:	4602      	mov	r2, r0
 801cf12:	460b      	mov	r3, r1
 801cf14:	4640      	mov	r0, r8
 801cf16:	4649      	mov	r1, r9
 801cf18:	f7e3 f9c2 	bl	80002a0 <__adddf3>
 801cf1c:	4604      	mov	r4, r0
 801cf1e:	460d      	mov	r5, r1
 801cf20:	4602      	mov	r2, r0
 801cf22:	460b      	mov	r3, r1
 801cf24:	4630      	mov	r0, r6
 801cf26:	4639      	mov	r1, r7
 801cf28:	f7e3 f9ba 	bl	80002a0 <__adddf3>
 801cf2c:	4632      	mov	r2, r6
 801cf2e:	463b      	mov	r3, r7
 801cf30:	4680      	mov	r8, r0
 801cf32:	4689      	mov	r9, r1
 801cf34:	f7e3 f9b2 	bl	800029c <__aeabi_dsub>
 801cf38:	4602      	mov	r2, r0
 801cf3a:	460b      	mov	r3, r1
 801cf3c:	4620      	mov	r0, r4
 801cf3e:	4629      	mov	r1, r5
 801cf40:	f7e3 f9ac 	bl	800029c <__aeabi_dsub>
 801cf44:	4642      	mov	r2, r8
 801cf46:	4606      	mov	r6, r0
 801cf48:	460f      	mov	r7, r1
 801cf4a:	464b      	mov	r3, r9
 801cf4c:	4640      	mov	r0, r8
 801cf4e:	4649      	mov	r1, r9
 801cf50:	f7e3 fb5c 	bl	800060c <__aeabi_dmul>
 801cf54:	a35e      	add	r3, pc, #376	; (adr r3, 801d0d0 <__ieee754_pow+0xa18>)
 801cf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf5a:	4604      	mov	r4, r0
 801cf5c:	460d      	mov	r5, r1
 801cf5e:	f7e3 fb55 	bl	800060c <__aeabi_dmul>
 801cf62:	a35d      	add	r3, pc, #372	; (adr r3, 801d0d8 <__ieee754_pow+0xa20>)
 801cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf68:	f7e3 f998 	bl	800029c <__aeabi_dsub>
 801cf6c:	4622      	mov	r2, r4
 801cf6e:	462b      	mov	r3, r5
 801cf70:	f7e3 fb4c 	bl	800060c <__aeabi_dmul>
 801cf74:	a35a      	add	r3, pc, #360	; (adr r3, 801d0e0 <__ieee754_pow+0xa28>)
 801cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf7a:	f7e3 f991 	bl	80002a0 <__adddf3>
 801cf7e:	4622      	mov	r2, r4
 801cf80:	462b      	mov	r3, r5
 801cf82:	f7e3 fb43 	bl	800060c <__aeabi_dmul>
 801cf86:	a358      	add	r3, pc, #352	; (adr r3, 801d0e8 <__ieee754_pow+0xa30>)
 801cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf8c:	f7e3 f986 	bl	800029c <__aeabi_dsub>
 801cf90:	4622      	mov	r2, r4
 801cf92:	462b      	mov	r3, r5
 801cf94:	f7e3 fb3a 	bl	800060c <__aeabi_dmul>
 801cf98:	a355      	add	r3, pc, #340	; (adr r3, 801d0f0 <__ieee754_pow+0xa38>)
 801cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf9e:	f7e3 f97f 	bl	80002a0 <__adddf3>
 801cfa2:	4622      	mov	r2, r4
 801cfa4:	462b      	mov	r3, r5
 801cfa6:	f7e3 fb31 	bl	800060c <__aeabi_dmul>
 801cfaa:	4602      	mov	r2, r0
 801cfac:	460b      	mov	r3, r1
 801cfae:	4640      	mov	r0, r8
 801cfb0:	4649      	mov	r1, r9
 801cfb2:	f7e3 f973 	bl	800029c <__aeabi_dsub>
 801cfb6:	4604      	mov	r4, r0
 801cfb8:	460d      	mov	r5, r1
 801cfba:	4602      	mov	r2, r0
 801cfbc:	460b      	mov	r3, r1
 801cfbe:	4640      	mov	r0, r8
 801cfc0:	4649      	mov	r1, r9
 801cfc2:	f7e3 fb23 	bl	800060c <__aeabi_dmul>
 801cfc6:	2200      	movs	r2, #0
 801cfc8:	ec41 0b19 	vmov	d9, r0, r1
 801cfcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cfd0:	4620      	mov	r0, r4
 801cfd2:	4629      	mov	r1, r5
 801cfd4:	f7e3 f962 	bl	800029c <__aeabi_dsub>
 801cfd8:	4602      	mov	r2, r0
 801cfda:	460b      	mov	r3, r1
 801cfdc:	ec51 0b19 	vmov	r0, r1, d9
 801cfe0:	f7e3 fc3e 	bl	8000860 <__aeabi_ddiv>
 801cfe4:	4632      	mov	r2, r6
 801cfe6:	4604      	mov	r4, r0
 801cfe8:	460d      	mov	r5, r1
 801cfea:	463b      	mov	r3, r7
 801cfec:	4640      	mov	r0, r8
 801cfee:	4649      	mov	r1, r9
 801cff0:	f7e3 fb0c 	bl	800060c <__aeabi_dmul>
 801cff4:	4632      	mov	r2, r6
 801cff6:	463b      	mov	r3, r7
 801cff8:	f7e3 f952 	bl	80002a0 <__adddf3>
 801cffc:	4602      	mov	r2, r0
 801cffe:	460b      	mov	r3, r1
 801d000:	4620      	mov	r0, r4
 801d002:	4629      	mov	r1, r5
 801d004:	f7e3 f94a 	bl	800029c <__aeabi_dsub>
 801d008:	4642      	mov	r2, r8
 801d00a:	464b      	mov	r3, r9
 801d00c:	f7e3 f946 	bl	800029c <__aeabi_dsub>
 801d010:	460b      	mov	r3, r1
 801d012:	4602      	mov	r2, r0
 801d014:	493a      	ldr	r1, [pc, #232]	; (801d100 <__ieee754_pow+0xa48>)
 801d016:	2000      	movs	r0, #0
 801d018:	f7e3 f940 	bl	800029c <__aeabi_dsub>
 801d01c:	ec41 0b10 	vmov	d0, r0, r1
 801d020:	ee10 3a90 	vmov	r3, s1
 801d024:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801d028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d02c:	da2b      	bge.n	801d086 <__ieee754_pow+0x9ce>
 801d02e:	4650      	mov	r0, sl
 801d030:	f000 fa0a 	bl	801d448 <scalbn>
 801d034:	ec51 0b10 	vmov	r0, r1, d0
 801d038:	ec53 2b18 	vmov	r2, r3, d8
 801d03c:	f7ff bbed 	b.w	801c81a <__ieee754_pow+0x162>
 801d040:	4b30      	ldr	r3, [pc, #192]	; (801d104 <__ieee754_pow+0xa4c>)
 801d042:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d046:	429e      	cmp	r6, r3
 801d048:	f77f af0c 	ble.w	801ce64 <__ieee754_pow+0x7ac>
 801d04c:	4b2e      	ldr	r3, [pc, #184]	; (801d108 <__ieee754_pow+0xa50>)
 801d04e:	440b      	add	r3, r1
 801d050:	4303      	orrs	r3, r0
 801d052:	d009      	beq.n	801d068 <__ieee754_pow+0x9b0>
 801d054:	ec51 0b18 	vmov	r0, r1, d8
 801d058:	2200      	movs	r2, #0
 801d05a:	2300      	movs	r3, #0
 801d05c:	f7e3 fd48 	bl	8000af0 <__aeabi_dcmplt>
 801d060:	3800      	subs	r0, #0
 801d062:	bf18      	it	ne
 801d064:	2001      	movne	r0, #1
 801d066:	e447      	b.n	801c8f8 <__ieee754_pow+0x240>
 801d068:	4622      	mov	r2, r4
 801d06a:	462b      	mov	r3, r5
 801d06c:	f7e3 f916 	bl	800029c <__aeabi_dsub>
 801d070:	4642      	mov	r2, r8
 801d072:	464b      	mov	r3, r9
 801d074:	f7e3 fd50 	bl	8000b18 <__aeabi_dcmpge>
 801d078:	2800      	cmp	r0, #0
 801d07a:	f43f aef3 	beq.w	801ce64 <__ieee754_pow+0x7ac>
 801d07e:	e7e9      	b.n	801d054 <__ieee754_pow+0x99c>
 801d080:	f04f 0a00 	mov.w	sl, #0
 801d084:	e71a      	b.n	801cebc <__ieee754_pow+0x804>
 801d086:	ec51 0b10 	vmov	r0, r1, d0
 801d08a:	4619      	mov	r1, r3
 801d08c:	e7d4      	b.n	801d038 <__ieee754_pow+0x980>
 801d08e:	491c      	ldr	r1, [pc, #112]	; (801d100 <__ieee754_pow+0xa48>)
 801d090:	2000      	movs	r0, #0
 801d092:	f7ff bb30 	b.w	801c6f6 <__ieee754_pow+0x3e>
 801d096:	2000      	movs	r0, #0
 801d098:	2100      	movs	r1, #0
 801d09a:	f7ff bb2c 	b.w	801c6f6 <__ieee754_pow+0x3e>
 801d09e:	4630      	mov	r0, r6
 801d0a0:	4639      	mov	r1, r7
 801d0a2:	f7ff bb28 	b.w	801c6f6 <__ieee754_pow+0x3e>
 801d0a6:	9204      	str	r2, [sp, #16]
 801d0a8:	f7ff bb7a 	b.w	801c7a0 <__ieee754_pow+0xe8>
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	f7ff bb64 	b.w	801c77a <__ieee754_pow+0xc2>
 801d0b2:	bf00      	nop
 801d0b4:	f3af 8000 	nop.w
 801d0b8:	00000000 	.word	0x00000000
 801d0bc:	3fe62e43 	.word	0x3fe62e43
 801d0c0:	fefa39ef 	.word	0xfefa39ef
 801d0c4:	3fe62e42 	.word	0x3fe62e42
 801d0c8:	0ca86c39 	.word	0x0ca86c39
 801d0cc:	be205c61 	.word	0xbe205c61
 801d0d0:	72bea4d0 	.word	0x72bea4d0
 801d0d4:	3e663769 	.word	0x3e663769
 801d0d8:	c5d26bf1 	.word	0xc5d26bf1
 801d0dc:	3ebbbd41 	.word	0x3ebbbd41
 801d0e0:	af25de2c 	.word	0xaf25de2c
 801d0e4:	3f11566a 	.word	0x3f11566a
 801d0e8:	16bebd93 	.word	0x16bebd93
 801d0ec:	3f66c16c 	.word	0x3f66c16c
 801d0f0:	5555553e 	.word	0x5555553e
 801d0f4:	3fc55555 	.word	0x3fc55555
 801d0f8:	3fe00000 	.word	0x3fe00000
 801d0fc:	000fffff 	.word	0x000fffff
 801d100:	3ff00000 	.word	0x3ff00000
 801d104:	4090cbff 	.word	0x4090cbff
 801d108:	3f6f3400 	.word	0x3f6f3400
 801d10c:	652b82fe 	.word	0x652b82fe
 801d110:	3c971547 	.word	0x3c971547

0801d114 <__ieee754_sqrt>:
 801d114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d118:	ec55 4b10 	vmov	r4, r5, d0
 801d11c:	4e55      	ldr	r6, [pc, #340]	; (801d274 <__ieee754_sqrt+0x160>)
 801d11e:	43ae      	bics	r6, r5
 801d120:	ee10 0a10 	vmov	r0, s0
 801d124:	ee10 3a10 	vmov	r3, s0
 801d128:	462a      	mov	r2, r5
 801d12a:	4629      	mov	r1, r5
 801d12c:	d110      	bne.n	801d150 <__ieee754_sqrt+0x3c>
 801d12e:	ee10 2a10 	vmov	r2, s0
 801d132:	462b      	mov	r3, r5
 801d134:	f7e3 fa6a 	bl	800060c <__aeabi_dmul>
 801d138:	4602      	mov	r2, r0
 801d13a:	460b      	mov	r3, r1
 801d13c:	4620      	mov	r0, r4
 801d13e:	4629      	mov	r1, r5
 801d140:	f7e3 f8ae 	bl	80002a0 <__adddf3>
 801d144:	4604      	mov	r4, r0
 801d146:	460d      	mov	r5, r1
 801d148:	ec45 4b10 	vmov	d0, r4, r5
 801d14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d150:	2d00      	cmp	r5, #0
 801d152:	dc10      	bgt.n	801d176 <__ieee754_sqrt+0x62>
 801d154:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d158:	4330      	orrs	r0, r6
 801d15a:	d0f5      	beq.n	801d148 <__ieee754_sqrt+0x34>
 801d15c:	b15d      	cbz	r5, 801d176 <__ieee754_sqrt+0x62>
 801d15e:	ee10 2a10 	vmov	r2, s0
 801d162:	462b      	mov	r3, r5
 801d164:	ee10 0a10 	vmov	r0, s0
 801d168:	f7e3 f898 	bl	800029c <__aeabi_dsub>
 801d16c:	4602      	mov	r2, r0
 801d16e:	460b      	mov	r3, r1
 801d170:	f7e3 fb76 	bl	8000860 <__aeabi_ddiv>
 801d174:	e7e6      	b.n	801d144 <__ieee754_sqrt+0x30>
 801d176:	1512      	asrs	r2, r2, #20
 801d178:	d074      	beq.n	801d264 <__ieee754_sqrt+0x150>
 801d17a:	07d4      	lsls	r4, r2, #31
 801d17c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801d180:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801d184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d188:	bf5e      	ittt	pl
 801d18a:	0fda      	lsrpl	r2, r3, #31
 801d18c:	005b      	lslpl	r3, r3, #1
 801d18e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801d192:	2400      	movs	r4, #0
 801d194:	0fda      	lsrs	r2, r3, #31
 801d196:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d19a:	107f      	asrs	r7, r7, #1
 801d19c:	005b      	lsls	r3, r3, #1
 801d19e:	2516      	movs	r5, #22
 801d1a0:	4620      	mov	r0, r4
 801d1a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801d1a6:	1886      	adds	r6, r0, r2
 801d1a8:	428e      	cmp	r6, r1
 801d1aa:	bfde      	ittt	le
 801d1ac:	1b89      	suble	r1, r1, r6
 801d1ae:	18b0      	addle	r0, r6, r2
 801d1b0:	18a4      	addle	r4, r4, r2
 801d1b2:	0049      	lsls	r1, r1, #1
 801d1b4:	3d01      	subs	r5, #1
 801d1b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801d1ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801d1be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d1c2:	d1f0      	bne.n	801d1a6 <__ieee754_sqrt+0x92>
 801d1c4:	462a      	mov	r2, r5
 801d1c6:	f04f 0e20 	mov.w	lr, #32
 801d1ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d1ce:	4281      	cmp	r1, r0
 801d1d0:	eb06 0c05 	add.w	ip, r6, r5
 801d1d4:	dc02      	bgt.n	801d1dc <__ieee754_sqrt+0xc8>
 801d1d6:	d113      	bne.n	801d200 <__ieee754_sqrt+0xec>
 801d1d8:	459c      	cmp	ip, r3
 801d1da:	d811      	bhi.n	801d200 <__ieee754_sqrt+0xec>
 801d1dc:	f1bc 0f00 	cmp.w	ip, #0
 801d1e0:	eb0c 0506 	add.w	r5, ip, r6
 801d1e4:	da43      	bge.n	801d26e <__ieee754_sqrt+0x15a>
 801d1e6:	2d00      	cmp	r5, #0
 801d1e8:	db41      	blt.n	801d26e <__ieee754_sqrt+0x15a>
 801d1ea:	f100 0801 	add.w	r8, r0, #1
 801d1ee:	1a09      	subs	r1, r1, r0
 801d1f0:	459c      	cmp	ip, r3
 801d1f2:	bf88      	it	hi
 801d1f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801d1f8:	eba3 030c 	sub.w	r3, r3, ip
 801d1fc:	4432      	add	r2, r6
 801d1fe:	4640      	mov	r0, r8
 801d200:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801d204:	f1be 0e01 	subs.w	lr, lr, #1
 801d208:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801d20c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d210:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d214:	d1db      	bne.n	801d1ce <__ieee754_sqrt+0xba>
 801d216:	430b      	orrs	r3, r1
 801d218:	d006      	beq.n	801d228 <__ieee754_sqrt+0x114>
 801d21a:	1c50      	adds	r0, r2, #1
 801d21c:	bf13      	iteet	ne
 801d21e:	3201      	addne	r2, #1
 801d220:	3401      	addeq	r4, #1
 801d222:	4672      	moveq	r2, lr
 801d224:	f022 0201 	bicne.w	r2, r2, #1
 801d228:	1063      	asrs	r3, r4, #1
 801d22a:	0852      	lsrs	r2, r2, #1
 801d22c:	07e1      	lsls	r1, r4, #31
 801d22e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d232:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d236:	bf48      	it	mi
 801d238:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801d23c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801d240:	4614      	mov	r4, r2
 801d242:	e781      	b.n	801d148 <__ieee754_sqrt+0x34>
 801d244:	0ad9      	lsrs	r1, r3, #11
 801d246:	3815      	subs	r0, #21
 801d248:	055b      	lsls	r3, r3, #21
 801d24a:	2900      	cmp	r1, #0
 801d24c:	d0fa      	beq.n	801d244 <__ieee754_sqrt+0x130>
 801d24e:	02cd      	lsls	r5, r1, #11
 801d250:	d50a      	bpl.n	801d268 <__ieee754_sqrt+0x154>
 801d252:	f1c2 0420 	rsb	r4, r2, #32
 801d256:	fa23 f404 	lsr.w	r4, r3, r4
 801d25a:	1e55      	subs	r5, r2, #1
 801d25c:	4093      	lsls	r3, r2
 801d25e:	4321      	orrs	r1, r4
 801d260:	1b42      	subs	r2, r0, r5
 801d262:	e78a      	b.n	801d17a <__ieee754_sqrt+0x66>
 801d264:	4610      	mov	r0, r2
 801d266:	e7f0      	b.n	801d24a <__ieee754_sqrt+0x136>
 801d268:	0049      	lsls	r1, r1, #1
 801d26a:	3201      	adds	r2, #1
 801d26c:	e7ef      	b.n	801d24e <__ieee754_sqrt+0x13a>
 801d26e:	4680      	mov	r8, r0
 801d270:	e7bd      	b.n	801d1ee <__ieee754_sqrt+0xda>
 801d272:	bf00      	nop
 801d274:	7ff00000 	.word	0x7ff00000

0801d278 <__ieee754_atan2f>:
 801d278:	ee10 2a90 	vmov	r2, s1
 801d27c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801d280:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d284:	b510      	push	{r4, lr}
 801d286:	eef0 7a40 	vmov.f32	s15, s0
 801d28a:	dc06      	bgt.n	801d29a <__ieee754_atan2f+0x22>
 801d28c:	ee10 0a10 	vmov	r0, s0
 801d290:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801d294:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d298:	dd04      	ble.n	801d2a4 <__ieee754_atan2f+0x2c>
 801d29a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801d29e:	eeb0 0a67 	vmov.f32	s0, s15
 801d2a2:	bd10      	pop	{r4, pc}
 801d2a4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801d2a8:	d103      	bne.n	801d2b2 <__ieee754_atan2f+0x3a>
 801d2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2ae:	f000 b951 	b.w	801d554 <atanf>
 801d2b2:	1794      	asrs	r4, r2, #30
 801d2b4:	f004 0402 	and.w	r4, r4, #2
 801d2b8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801d2bc:	b943      	cbnz	r3, 801d2d0 <__ieee754_atan2f+0x58>
 801d2be:	2c02      	cmp	r4, #2
 801d2c0:	d05e      	beq.n	801d380 <__ieee754_atan2f+0x108>
 801d2c2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801d394 <__ieee754_atan2f+0x11c>
 801d2c6:	2c03      	cmp	r4, #3
 801d2c8:	bf08      	it	eq
 801d2ca:	eef0 7a47 	vmoveq.f32	s15, s14
 801d2ce:	e7e6      	b.n	801d29e <__ieee754_atan2f+0x26>
 801d2d0:	b941      	cbnz	r1, 801d2e4 <__ieee754_atan2f+0x6c>
 801d2d2:	eddf 7a31 	vldr	s15, [pc, #196]	; 801d398 <__ieee754_atan2f+0x120>
 801d2d6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801d39c <__ieee754_atan2f+0x124>
 801d2da:	2800      	cmp	r0, #0
 801d2dc:	bfb8      	it	lt
 801d2de:	eef0 7a40 	vmovlt.f32	s15, s0
 801d2e2:	e7dc      	b.n	801d29e <__ieee754_atan2f+0x26>
 801d2e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d2e8:	d110      	bne.n	801d30c <__ieee754_atan2f+0x94>
 801d2ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d2ee:	f104 34ff 	add.w	r4, r4, #4294967295
 801d2f2:	d107      	bne.n	801d304 <__ieee754_atan2f+0x8c>
 801d2f4:	2c02      	cmp	r4, #2
 801d2f6:	d846      	bhi.n	801d386 <__ieee754_atan2f+0x10e>
 801d2f8:	4b29      	ldr	r3, [pc, #164]	; (801d3a0 <__ieee754_atan2f+0x128>)
 801d2fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d2fe:	edd4 7a00 	vldr	s15, [r4]
 801d302:	e7cc      	b.n	801d29e <__ieee754_atan2f+0x26>
 801d304:	2c02      	cmp	r4, #2
 801d306:	d841      	bhi.n	801d38c <__ieee754_atan2f+0x114>
 801d308:	4b26      	ldr	r3, [pc, #152]	; (801d3a4 <__ieee754_atan2f+0x12c>)
 801d30a:	e7f6      	b.n	801d2fa <__ieee754_atan2f+0x82>
 801d30c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d310:	d0df      	beq.n	801d2d2 <__ieee754_atan2f+0x5a>
 801d312:	1a5b      	subs	r3, r3, r1
 801d314:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801d318:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801d31c:	da1a      	bge.n	801d354 <__ieee754_atan2f+0xdc>
 801d31e:	2a00      	cmp	r2, #0
 801d320:	da01      	bge.n	801d326 <__ieee754_atan2f+0xae>
 801d322:	313c      	adds	r1, #60	; 0x3c
 801d324:	db19      	blt.n	801d35a <__ieee754_atan2f+0xe2>
 801d326:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801d32a:	f000 f9e7 	bl	801d6fc <fabsf>
 801d32e:	f000 f911 	bl	801d554 <atanf>
 801d332:	eef0 7a40 	vmov.f32	s15, s0
 801d336:	2c01      	cmp	r4, #1
 801d338:	d012      	beq.n	801d360 <__ieee754_atan2f+0xe8>
 801d33a:	2c02      	cmp	r4, #2
 801d33c:	d017      	beq.n	801d36e <__ieee754_atan2f+0xf6>
 801d33e:	2c00      	cmp	r4, #0
 801d340:	d0ad      	beq.n	801d29e <__ieee754_atan2f+0x26>
 801d342:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801d3a8 <__ieee754_atan2f+0x130>
 801d346:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d34a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801d3ac <__ieee754_atan2f+0x134>
 801d34e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d352:	e7a4      	b.n	801d29e <__ieee754_atan2f+0x26>
 801d354:	eddf 7a10 	vldr	s15, [pc, #64]	; 801d398 <__ieee754_atan2f+0x120>
 801d358:	e7ed      	b.n	801d336 <__ieee754_atan2f+0xbe>
 801d35a:	eddf 7a15 	vldr	s15, [pc, #84]	; 801d3b0 <__ieee754_atan2f+0x138>
 801d35e:	e7ea      	b.n	801d336 <__ieee754_atan2f+0xbe>
 801d360:	ee17 3a90 	vmov	r3, s15
 801d364:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d368:	ee07 3a90 	vmov	s15, r3
 801d36c:	e797      	b.n	801d29e <__ieee754_atan2f+0x26>
 801d36e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801d3a8 <__ieee754_atan2f+0x130>
 801d372:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d376:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801d3ac <__ieee754_atan2f+0x134>
 801d37a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801d37e:	e78e      	b.n	801d29e <__ieee754_atan2f+0x26>
 801d380:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801d3ac <__ieee754_atan2f+0x134>
 801d384:	e78b      	b.n	801d29e <__ieee754_atan2f+0x26>
 801d386:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801d3b4 <__ieee754_atan2f+0x13c>
 801d38a:	e788      	b.n	801d29e <__ieee754_atan2f+0x26>
 801d38c:	eddf 7a08 	vldr	s15, [pc, #32]	; 801d3b0 <__ieee754_atan2f+0x138>
 801d390:	e785      	b.n	801d29e <__ieee754_atan2f+0x26>
 801d392:	bf00      	nop
 801d394:	c0490fdb 	.word	0xc0490fdb
 801d398:	3fc90fdb 	.word	0x3fc90fdb
 801d39c:	bfc90fdb 	.word	0xbfc90fdb
 801d3a0:	08032758 	.word	0x08032758
 801d3a4:	08032764 	.word	0x08032764
 801d3a8:	33bbbd2e 	.word	0x33bbbd2e
 801d3ac:	40490fdb 	.word	0x40490fdb
 801d3b0:	00000000 	.word	0x00000000
 801d3b4:	3f490fdb 	.word	0x3f490fdb

0801d3b8 <__ieee754_sqrtf>:
 801d3b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801d3bc:	4770      	bx	lr

0801d3be <with_errno>:
 801d3be:	b570      	push	{r4, r5, r6, lr}
 801d3c0:	4604      	mov	r4, r0
 801d3c2:	460d      	mov	r5, r1
 801d3c4:	4616      	mov	r6, r2
 801d3c6:	f000 f9ab 	bl	801d720 <__errno>
 801d3ca:	4629      	mov	r1, r5
 801d3cc:	6006      	str	r6, [r0, #0]
 801d3ce:	4620      	mov	r0, r4
 801d3d0:	bd70      	pop	{r4, r5, r6, pc}

0801d3d2 <xflow>:
 801d3d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d3d4:	4614      	mov	r4, r2
 801d3d6:	461d      	mov	r5, r3
 801d3d8:	b108      	cbz	r0, 801d3de <xflow+0xc>
 801d3da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d3de:	e9cd 2300 	strd	r2, r3, [sp]
 801d3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d3e6:	4620      	mov	r0, r4
 801d3e8:	4629      	mov	r1, r5
 801d3ea:	f7e3 f90f 	bl	800060c <__aeabi_dmul>
 801d3ee:	2222      	movs	r2, #34	; 0x22
 801d3f0:	b003      	add	sp, #12
 801d3f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d3f6:	f7ff bfe2 	b.w	801d3be <with_errno>

0801d3fa <__math_uflow>:
 801d3fa:	b508      	push	{r3, lr}
 801d3fc:	2200      	movs	r2, #0
 801d3fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d402:	f7ff ffe6 	bl	801d3d2 <xflow>
 801d406:	ec41 0b10 	vmov	d0, r0, r1
 801d40a:	bd08      	pop	{r3, pc}

0801d40c <__math_oflow>:
 801d40c:	b508      	push	{r3, lr}
 801d40e:	2200      	movs	r2, #0
 801d410:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801d414:	f7ff ffdd 	bl	801d3d2 <xflow>
 801d418:	ec41 0b10 	vmov	d0, r0, r1
 801d41c:	bd08      	pop	{r3, pc}

0801d41e <fabs>:
 801d41e:	ec51 0b10 	vmov	r0, r1, d0
 801d422:	ee10 2a10 	vmov	r2, s0
 801d426:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d42a:	ec43 2b10 	vmov	d0, r2, r3
 801d42e:	4770      	bx	lr

0801d430 <finite>:
 801d430:	b082      	sub	sp, #8
 801d432:	ed8d 0b00 	vstr	d0, [sp]
 801d436:	9801      	ldr	r0, [sp, #4]
 801d438:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801d43c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d440:	0fc0      	lsrs	r0, r0, #31
 801d442:	b002      	add	sp, #8
 801d444:	4770      	bx	lr
	...

0801d448 <scalbn>:
 801d448:	b570      	push	{r4, r5, r6, lr}
 801d44a:	ec55 4b10 	vmov	r4, r5, d0
 801d44e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d452:	4606      	mov	r6, r0
 801d454:	462b      	mov	r3, r5
 801d456:	b99a      	cbnz	r2, 801d480 <scalbn+0x38>
 801d458:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d45c:	4323      	orrs	r3, r4
 801d45e:	d036      	beq.n	801d4ce <scalbn+0x86>
 801d460:	4b39      	ldr	r3, [pc, #228]	; (801d548 <scalbn+0x100>)
 801d462:	4629      	mov	r1, r5
 801d464:	ee10 0a10 	vmov	r0, s0
 801d468:	2200      	movs	r2, #0
 801d46a:	f7e3 f8cf 	bl	800060c <__aeabi_dmul>
 801d46e:	4b37      	ldr	r3, [pc, #220]	; (801d54c <scalbn+0x104>)
 801d470:	429e      	cmp	r6, r3
 801d472:	4604      	mov	r4, r0
 801d474:	460d      	mov	r5, r1
 801d476:	da10      	bge.n	801d49a <scalbn+0x52>
 801d478:	a32b      	add	r3, pc, #172	; (adr r3, 801d528 <scalbn+0xe0>)
 801d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d47e:	e03a      	b.n	801d4f6 <scalbn+0xae>
 801d480:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d484:	428a      	cmp	r2, r1
 801d486:	d10c      	bne.n	801d4a2 <scalbn+0x5a>
 801d488:	ee10 2a10 	vmov	r2, s0
 801d48c:	4620      	mov	r0, r4
 801d48e:	4629      	mov	r1, r5
 801d490:	f7e2 ff06 	bl	80002a0 <__adddf3>
 801d494:	4604      	mov	r4, r0
 801d496:	460d      	mov	r5, r1
 801d498:	e019      	b.n	801d4ce <scalbn+0x86>
 801d49a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d49e:	460b      	mov	r3, r1
 801d4a0:	3a36      	subs	r2, #54	; 0x36
 801d4a2:	4432      	add	r2, r6
 801d4a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d4a8:	428a      	cmp	r2, r1
 801d4aa:	dd08      	ble.n	801d4be <scalbn+0x76>
 801d4ac:	2d00      	cmp	r5, #0
 801d4ae:	a120      	add	r1, pc, #128	; (adr r1, 801d530 <scalbn+0xe8>)
 801d4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d4b4:	da1c      	bge.n	801d4f0 <scalbn+0xa8>
 801d4b6:	a120      	add	r1, pc, #128	; (adr r1, 801d538 <scalbn+0xf0>)
 801d4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d4bc:	e018      	b.n	801d4f0 <scalbn+0xa8>
 801d4be:	2a00      	cmp	r2, #0
 801d4c0:	dd08      	ble.n	801d4d4 <scalbn+0x8c>
 801d4c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d4c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d4ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d4ce:	ec45 4b10 	vmov	d0, r4, r5
 801d4d2:	bd70      	pop	{r4, r5, r6, pc}
 801d4d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d4d8:	da19      	bge.n	801d50e <scalbn+0xc6>
 801d4da:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d4de:	429e      	cmp	r6, r3
 801d4e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801d4e4:	dd0a      	ble.n	801d4fc <scalbn+0xb4>
 801d4e6:	a112      	add	r1, pc, #72	; (adr r1, 801d530 <scalbn+0xe8>)
 801d4e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d1e2      	bne.n	801d4b6 <scalbn+0x6e>
 801d4f0:	a30f      	add	r3, pc, #60	; (adr r3, 801d530 <scalbn+0xe8>)
 801d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4f6:	f7e3 f889 	bl	800060c <__aeabi_dmul>
 801d4fa:	e7cb      	b.n	801d494 <scalbn+0x4c>
 801d4fc:	a10a      	add	r1, pc, #40	; (adr r1, 801d528 <scalbn+0xe0>)
 801d4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d502:	2b00      	cmp	r3, #0
 801d504:	d0b8      	beq.n	801d478 <scalbn+0x30>
 801d506:	a10e      	add	r1, pc, #56	; (adr r1, 801d540 <scalbn+0xf8>)
 801d508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d50c:	e7b4      	b.n	801d478 <scalbn+0x30>
 801d50e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d512:	3236      	adds	r2, #54	; 0x36
 801d514:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d518:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801d51c:	4620      	mov	r0, r4
 801d51e:	4b0c      	ldr	r3, [pc, #48]	; (801d550 <scalbn+0x108>)
 801d520:	2200      	movs	r2, #0
 801d522:	e7e8      	b.n	801d4f6 <scalbn+0xae>
 801d524:	f3af 8000 	nop.w
 801d528:	c2f8f359 	.word	0xc2f8f359
 801d52c:	01a56e1f 	.word	0x01a56e1f
 801d530:	8800759c 	.word	0x8800759c
 801d534:	7e37e43c 	.word	0x7e37e43c
 801d538:	8800759c 	.word	0x8800759c
 801d53c:	fe37e43c 	.word	0xfe37e43c
 801d540:	c2f8f359 	.word	0xc2f8f359
 801d544:	81a56e1f 	.word	0x81a56e1f
 801d548:	43500000 	.word	0x43500000
 801d54c:	ffff3cb0 	.word	0xffff3cb0
 801d550:	3c900000 	.word	0x3c900000

0801d554 <atanf>:
 801d554:	b538      	push	{r3, r4, r5, lr}
 801d556:	ee10 5a10 	vmov	r5, s0
 801d55a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801d55e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801d562:	eef0 7a40 	vmov.f32	s15, s0
 801d566:	db10      	blt.n	801d58a <atanf+0x36>
 801d568:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801d56c:	dd04      	ble.n	801d578 <atanf+0x24>
 801d56e:	ee70 7a00 	vadd.f32	s15, s0, s0
 801d572:	eeb0 0a67 	vmov.f32	s0, s15
 801d576:	bd38      	pop	{r3, r4, r5, pc}
 801d578:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801d6b0 <atanf+0x15c>
 801d57c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801d6b4 <atanf+0x160>
 801d580:	2d00      	cmp	r5, #0
 801d582:	bfd8      	it	le
 801d584:	eef0 7a40 	vmovle.f32	s15, s0
 801d588:	e7f3      	b.n	801d572 <atanf+0x1e>
 801d58a:	4b4b      	ldr	r3, [pc, #300]	; (801d6b8 <atanf+0x164>)
 801d58c:	429c      	cmp	r4, r3
 801d58e:	dc10      	bgt.n	801d5b2 <atanf+0x5e>
 801d590:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801d594:	da0a      	bge.n	801d5ac <atanf+0x58>
 801d596:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801d6bc <atanf+0x168>
 801d59a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801d59e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d5a2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801d5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5aa:	dce2      	bgt.n	801d572 <atanf+0x1e>
 801d5ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d5b0:	e013      	b.n	801d5da <atanf+0x86>
 801d5b2:	f000 f8a3 	bl	801d6fc <fabsf>
 801d5b6:	4b42      	ldr	r3, [pc, #264]	; (801d6c0 <atanf+0x16c>)
 801d5b8:	429c      	cmp	r4, r3
 801d5ba:	dc4f      	bgt.n	801d65c <atanf+0x108>
 801d5bc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801d5c0:	429c      	cmp	r4, r3
 801d5c2:	dc41      	bgt.n	801d648 <atanf+0xf4>
 801d5c4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801d5c8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d5cc:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d5d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5da:	1c5a      	adds	r2, r3, #1
 801d5dc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801d5e0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801d6c4 <atanf+0x170>
 801d5e4:	eddf 5a38 	vldr	s11, [pc, #224]	; 801d6c8 <atanf+0x174>
 801d5e8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801d6cc <atanf+0x178>
 801d5ec:	ee66 6a06 	vmul.f32	s13, s12, s12
 801d5f0:	eee6 5a87 	vfma.f32	s11, s13, s14
 801d5f4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801d6d0 <atanf+0x17c>
 801d5f8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d5fc:	eddf 5a35 	vldr	s11, [pc, #212]	; 801d6d4 <atanf+0x180>
 801d600:	eee7 5a26 	vfma.f32	s11, s14, s13
 801d604:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801d6d8 <atanf+0x184>
 801d608:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d60c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801d6dc <atanf+0x188>
 801d610:	eee7 5a26 	vfma.f32	s11, s14, s13
 801d614:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801d6e0 <atanf+0x18c>
 801d618:	eea6 5a87 	vfma.f32	s10, s13, s14
 801d61c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801d6e4 <atanf+0x190>
 801d620:	eea5 7a26 	vfma.f32	s14, s10, s13
 801d624:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801d6e8 <atanf+0x194>
 801d628:	eea7 5a26 	vfma.f32	s10, s14, s13
 801d62c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801d6ec <atanf+0x198>
 801d630:	eea5 7a26 	vfma.f32	s14, s10, s13
 801d634:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d638:	eea5 7a86 	vfma.f32	s14, s11, s12
 801d63c:	ee27 7a87 	vmul.f32	s14, s15, s14
 801d640:	d121      	bne.n	801d686 <atanf+0x132>
 801d642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d646:	e794      	b.n	801d572 <atanf+0x1e>
 801d648:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d64c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801d650:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d654:	2301      	movs	r3, #1
 801d656:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d65a:	e7be      	b.n	801d5da <atanf+0x86>
 801d65c:	4b24      	ldr	r3, [pc, #144]	; (801d6f0 <atanf+0x19c>)
 801d65e:	429c      	cmp	r4, r3
 801d660:	dc0b      	bgt.n	801d67a <atanf+0x126>
 801d662:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801d666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d66a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d66e:	2302      	movs	r3, #2
 801d670:	ee70 6a67 	vsub.f32	s13, s0, s15
 801d674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d678:	e7af      	b.n	801d5da <atanf+0x86>
 801d67a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d67e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d682:	2303      	movs	r3, #3
 801d684:	e7a9      	b.n	801d5da <atanf+0x86>
 801d686:	4a1b      	ldr	r2, [pc, #108]	; (801d6f4 <atanf+0x1a0>)
 801d688:	491b      	ldr	r1, [pc, #108]	; (801d6f8 <atanf+0x1a4>)
 801d68a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d68e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d692:	ed93 0a00 	vldr	s0, [r3]
 801d696:	ee37 7a40 	vsub.f32	s14, s14, s0
 801d69a:	ed92 0a00 	vldr	s0, [r2]
 801d69e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d6a2:	2d00      	cmp	r5, #0
 801d6a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 801d6a8:	bfb8      	it	lt
 801d6aa:	eef1 7a67 	vneglt.f32	s15, s15
 801d6ae:	e760      	b.n	801d572 <atanf+0x1e>
 801d6b0:	3fc90fdb 	.word	0x3fc90fdb
 801d6b4:	bfc90fdb 	.word	0xbfc90fdb
 801d6b8:	3edfffff 	.word	0x3edfffff
 801d6bc:	7149f2ca 	.word	0x7149f2ca
 801d6c0:	3f97ffff 	.word	0x3f97ffff
 801d6c4:	3c8569d7 	.word	0x3c8569d7
 801d6c8:	3d4bda59 	.word	0x3d4bda59
 801d6cc:	bd6ef16b 	.word	0xbd6ef16b
 801d6d0:	3d886b35 	.word	0x3d886b35
 801d6d4:	3dba2e6e 	.word	0x3dba2e6e
 801d6d8:	3e124925 	.word	0x3e124925
 801d6dc:	3eaaaaab 	.word	0x3eaaaaab
 801d6e0:	bd15a221 	.word	0xbd15a221
 801d6e4:	bd9d8795 	.word	0xbd9d8795
 801d6e8:	bde38e38 	.word	0xbde38e38
 801d6ec:	be4ccccd 	.word	0xbe4ccccd
 801d6f0:	401bffff 	.word	0x401bffff
 801d6f4:	08032770 	.word	0x08032770
 801d6f8:	08032780 	.word	0x08032780

0801d6fc <fabsf>:
 801d6fc:	ee10 3a10 	vmov	r3, s0
 801d700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d704:	ee00 3a10 	vmov	s0, r3
 801d708:	4770      	bx	lr

0801d70a <abort>:
 801d70a:	b508      	push	{r3, lr}
 801d70c:	2006      	movs	r0, #6
 801d70e:	f000 f989 	bl	801da24 <raise>
 801d712:	2001      	movs	r0, #1
 801d714:	f7e6 fc4c 	bl	8003fb0 <_exit>

0801d718 <atoi>:
 801d718:	220a      	movs	r2, #10
 801d71a:	2100      	movs	r1, #0
 801d71c:	f000 ba50 	b.w	801dbc0 <strtol>

0801d720 <__errno>:
 801d720:	4b01      	ldr	r3, [pc, #4]	; (801d728 <__errno+0x8>)
 801d722:	6818      	ldr	r0, [r3, #0]
 801d724:	4770      	bx	lr
 801d726:	bf00      	nop
 801d728:	20000130 	.word	0x20000130

0801d72c <__libc_init_array>:
 801d72c:	b570      	push	{r4, r5, r6, lr}
 801d72e:	4d0d      	ldr	r5, [pc, #52]	; (801d764 <__libc_init_array+0x38>)
 801d730:	4c0d      	ldr	r4, [pc, #52]	; (801d768 <__libc_init_array+0x3c>)
 801d732:	1b64      	subs	r4, r4, r5
 801d734:	10a4      	asrs	r4, r4, #2
 801d736:	2600      	movs	r6, #0
 801d738:	42a6      	cmp	r6, r4
 801d73a:	d109      	bne.n	801d750 <__libc_init_array+0x24>
 801d73c:	4d0b      	ldr	r5, [pc, #44]	; (801d76c <__libc_init_array+0x40>)
 801d73e:	4c0c      	ldr	r4, [pc, #48]	; (801d770 <__libc_init_array+0x44>)
 801d740:	f000 fd7e 	bl	801e240 <_init>
 801d744:	1b64      	subs	r4, r4, r5
 801d746:	10a4      	asrs	r4, r4, #2
 801d748:	2600      	movs	r6, #0
 801d74a:	42a6      	cmp	r6, r4
 801d74c:	d105      	bne.n	801d75a <__libc_init_array+0x2e>
 801d74e:	bd70      	pop	{r4, r5, r6, pc}
 801d750:	f855 3b04 	ldr.w	r3, [r5], #4
 801d754:	4798      	blx	r3
 801d756:	3601      	adds	r6, #1
 801d758:	e7ee      	b.n	801d738 <__libc_init_array+0xc>
 801d75a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d75e:	4798      	blx	r3
 801d760:	3601      	adds	r6, #1
 801d762:	e7f2      	b.n	801d74a <__libc_init_array+0x1e>
 801d764:	080328cc 	.word	0x080328cc
 801d768:	080328cc 	.word	0x080328cc
 801d76c:	080328cc 	.word	0x080328cc
 801d770:	080328d4 	.word	0x080328d4

0801d774 <malloc>:
 801d774:	4b02      	ldr	r3, [pc, #8]	; (801d780 <malloc+0xc>)
 801d776:	4601      	mov	r1, r0
 801d778:	6818      	ldr	r0, [r3, #0]
 801d77a:	f000 b8a7 	b.w	801d8cc <_malloc_r>
 801d77e:	bf00      	nop
 801d780:	20000130 	.word	0x20000130

0801d784 <free>:
 801d784:	4b02      	ldr	r3, [pc, #8]	; (801d790 <free+0xc>)
 801d786:	4601      	mov	r1, r0
 801d788:	6818      	ldr	r0, [r3, #0]
 801d78a:	f000 b833 	b.w	801d7f4 <_free_r>
 801d78e:	bf00      	nop
 801d790:	20000130 	.word	0x20000130

0801d794 <memcpy>:
 801d794:	440a      	add	r2, r1
 801d796:	4291      	cmp	r1, r2
 801d798:	f100 33ff 	add.w	r3, r0, #4294967295
 801d79c:	d100      	bne.n	801d7a0 <memcpy+0xc>
 801d79e:	4770      	bx	lr
 801d7a0:	b510      	push	{r4, lr}
 801d7a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d7a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d7aa:	4291      	cmp	r1, r2
 801d7ac:	d1f9      	bne.n	801d7a2 <memcpy+0xe>
 801d7ae:	bd10      	pop	{r4, pc}

0801d7b0 <memmove>:
 801d7b0:	4288      	cmp	r0, r1
 801d7b2:	b510      	push	{r4, lr}
 801d7b4:	eb01 0402 	add.w	r4, r1, r2
 801d7b8:	d902      	bls.n	801d7c0 <memmove+0x10>
 801d7ba:	4284      	cmp	r4, r0
 801d7bc:	4623      	mov	r3, r4
 801d7be:	d807      	bhi.n	801d7d0 <memmove+0x20>
 801d7c0:	1e43      	subs	r3, r0, #1
 801d7c2:	42a1      	cmp	r1, r4
 801d7c4:	d008      	beq.n	801d7d8 <memmove+0x28>
 801d7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d7ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d7ce:	e7f8      	b.n	801d7c2 <memmove+0x12>
 801d7d0:	4402      	add	r2, r0
 801d7d2:	4601      	mov	r1, r0
 801d7d4:	428a      	cmp	r2, r1
 801d7d6:	d100      	bne.n	801d7da <memmove+0x2a>
 801d7d8:	bd10      	pop	{r4, pc}
 801d7da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d7de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d7e2:	e7f7      	b.n	801d7d4 <memmove+0x24>

0801d7e4 <memset>:
 801d7e4:	4402      	add	r2, r0
 801d7e6:	4603      	mov	r3, r0
 801d7e8:	4293      	cmp	r3, r2
 801d7ea:	d100      	bne.n	801d7ee <memset+0xa>
 801d7ec:	4770      	bx	lr
 801d7ee:	f803 1b01 	strb.w	r1, [r3], #1
 801d7f2:	e7f9      	b.n	801d7e8 <memset+0x4>

0801d7f4 <_free_r>:
 801d7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d7f6:	2900      	cmp	r1, #0
 801d7f8:	d044      	beq.n	801d884 <_free_r+0x90>
 801d7fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d7fe:	9001      	str	r0, [sp, #4]
 801d800:	2b00      	cmp	r3, #0
 801d802:	f1a1 0404 	sub.w	r4, r1, #4
 801d806:	bfb8      	it	lt
 801d808:	18e4      	addlt	r4, r4, r3
 801d80a:	f000 f9e3 	bl	801dbd4 <__malloc_lock>
 801d80e:	4a1e      	ldr	r2, [pc, #120]	; (801d888 <_free_r+0x94>)
 801d810:	9801      	ldr	r0, [sp, #4]
 801d812:	6813      	ldr	r3, [r2, #0]
 801d814:	b933      	cbnz	r3, 801d824 <_free_r+0x30>
 801d816:	6063      	str	r3, [r4, #4]
 801d818:	6014      	str	r4, [r2, #0]
 801d81a:	b003      	add	sp, #12
 801d81c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d820:	f000 b9de 	b.w	801dbe0 <__malloc_unlock>
 801d824:	42a3      	cmp	r3, r4
 801d826:	d908      	bls.n	801d83a <_free_r+0x46>
 801d828:	6825      	ldr	r5, [r4, #0]
 801d82a:	1961      	adds	r1, r4, r5
 801d82c:	428b      	cmp	r3, r1
 801d82e:	bf01      	itttt	eq
 801d830:	6819      	ldreq	r1, [r3, #0]
 801d832:	685b      	ldreq	r3, [r3, #4]
 801d834:	1949      	addeq	r1, r1, r5
 801d836:	6021      	streq	r1, [r4, #0]
 801d838:	e7ed      	b.n	801d816 <_free_r+0x22>
 801d83a:	461a      	mov	r2, r3
 801d83c:	685b      	ldr	r3, [r3, #4]
 801d83e:	b10b      	cbz	r3, 801d844 <_free_r+0x50>
 801d840:	42a3      	cmp	r3, r4
 801d842:	d9fa      	bls.n	801d83a <_free_r+0x46>
 801d844:	6811      	ldr	r1, [r2, #0]
 801d846:	1855      	adds	r5, r2, r1
 801d848:	42a5      	cmp	r5, r4
 801d84a:	d10b      	bne.n	801d864 <_free_r+0x70>
 801d84c:	6824      	ldr	r4, [r4, #0]
 801d84e:	4421      	add	r1, r4
 801d850:	1854      	adds	r4, r2, r1
 801d852:	42a3      	cmp	r3, r4
 801d854:	6011      	str	r1, [r2, #0]
 801d856:	d1e0      	bne.n	801d81a <_free_r+0x26>
 801d858:	681c      	ldr	r4, [r3, #0]
 801d85a:	685b      	ldr	r3, [r3, #4]
 801d85c:	6053      	str	r3, [r2, #4]
 801d85e:	4421      	add	r1, r4
 801d860:	6011      	str	r1, [r2, #0]
 801d862:	e7da      	b.n	801d81a <_free_r+0x26>
 801d864:	d902      	bls.n	801d86c <_free_r+0x78>
 801d866:	230c      	movs	r3, #12
 801d868:	6003      	str	r3, [r0, #0]
 801d86a:	e7d6      	b.n	801d81a <_free_r+0x26>
 801d86c:	6825      	ldr	r5, [r4, #0]
 801d86e:	1961      	adds	r1, r4, r5
 801d870:	428b      	cmp	r3, r1
 801d872:	bf04      	itt	eq
 801d874:	6819      	ldreq	r1, [r3, #0]
 801d876:	685b      	ldreq	r3, [r3, #4]
 801d878:	6063      	str	r3, [r4, #4]
 801d87a:	bf04      	itt	eq
 801d87c:	1949      	addeq	r1, r1, r5
 801d87e:	6021      	streq	r1, [r4, #0]
 801d880:	6054      	str	r4, [r2, #4]
 801d882:	e7ca      	b.n	801d81a <_free_r+0x26>
 801d884:	b003      	add	sp, #12
 801d886:	bd30      	pop	{r4, r5, pc}
 801d888:	2000e5c0 	.word	0x2000e5c0

0801d88c <sbrk_aligned>:
 801d88c:	b570      	push	{r4, r5, r6, lr}
 801d88e:	4e0e      	ldr	r6, [pc, #56]	; (801d8c8 <sbrk_aligned+0x3c>)
 801d890:	460c      	mov	r4, r1
 801d892:	6831      	ldr	r1, [r6, #0]
 801d894:	4605      	mov	r5, r0
 801d896:	b911      	cbnz	r1, 801d89e <sbrk_aligned+0x12>
 801d898:	f000 f88c 	bl	801d9b4 <_sbrk_r>
 801d89c:	6030      	str	r0, [r6, #0]
 801d89e:	4621      	mov	r1, r4
 801d8a0:	4628      	mov	r0, r5
 801d8a2:	f000 f887 	bl	801d9b4 <_sbrk_r>
 801d8a6:	1c43      	adds	r3, r0, #1
 801d8a8:	d00a      	beq.n	801d8c0 <sbrk_aligned+0x34>
 801d8aa:	1cc4      	adds	r4, r0, #3
 801d8ac:	f024 0403 	bic.w	r4, r4, #3
 801d8b0:	42a0      	cmp	r0, r4
 801d8b2:	d007      	beq.n	801d8c4 <sbrk_aligned+0x38>
 801d8b4:	1a21      	subs	r1, r4, r0
 801d8b6:	4628      	mov	r0, r5
 801d8b8:	f000 f87c 	bl	801d9b4 <_sbrk_r>
 801d8bc:	3001      	adds	r0, #1
 801d8be:	d101      	bne.n	801d8c4 <sbrk_aligned+0x38>
 801d8c0:	f04f 34ff 	mov.w	r4, #4294967295
 801d8c4:	4620      	mov	r0, r4
 801d8c6:	bd70      	pop	{r4, r5, r6, pc}
 801d8c8:	2000e5c4 	.word	0x2000e5c4

0801d8cc <_malloc_r>:
 801d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8d0:	1ccd      	adds	r5, r1, #3
 801d8d2:	f025 0503 	bic.w	r5, r5, #3
 801d8d6:	3508      	adds	r5, #8
 801d8d8:	2d0c      	cmp	r5, #12
 801d8da:	bf38      	it	cc
 801d8dc:	250c      	movcc	r5, #12
 801d8de:	2d00      	cmp	r5, #0
 801d8e0:	4607      	mov	r7, r0
 801d8e2:	db01      	blt.n	801d8e8 <_malloc_r+0x1c>
 801d8e4:	42a9      	cmp	r1, r5
 801d8e6:	d905      	bls.n	801d8f4 <_malloc_r+0x28>
 801d8e8:	230c      	movs	r3, #12
 801d8ea:	603b      	str	r3, [r7, #0]
 801d8ec:	2600      	movs	r6, #0
 801d8ee:	4630      	mov	r0, r6
 801d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8f4:	4e2e      	ldr	r6, [pc, #184]	; (801d9b0 <_malloc_r+0xe4>)
 801d8f6:	f000 f96d 	bl	801dbd4 <__malloc_lock>
 801d8fa:	6833      	ldr	r3, [r6, #0]
 801d8fc:	461c      	mov	r4, r3
 801d8fe:	bb34      	cbnz	r4, 801d94e <_malloc_r+0x82>
 801d900:	4629      	mov	r1, r5
 801d902:	4638      	mov	r0, r7
 801d904:	f7ff ffc2 	bl	801d88c <sbrk_aligned>
 801d908:	1c43      	adds	r3, r0, #1
 801d90a:	4604      	mov	r4, r0
 801d90c:	d14d      	bne.n	801d9aa <_malloc_r+0xde>
 801d90e:	6834      	ldr	r4, [r6, #0]
 801d910:	4626      	mov	r6, r4
 801d912:	2e00      	cmp	r6, #0
 801d914:	d140      	bne.n	801d998 <_malloc_r+0xcc>
 801d916:	6823      	ldr	r3, [r4, #0]
 801d918:	4631      	mov	r1, r6
 801d91a:	4638      	mov	r0, r7
 801d91c:	eb04 0803 	add.w	r8, r4, r3
 801d920:	f000 f848 	bl	801d9b4 <_sbrk_r>
 801d924:	4580      	cmp	r8, r0
 801d926:	d13a      	bne.n	801d99e <_malloc_r+0xd2>
 801d928:	6821      	ldr	r1, [r4, #0]
 801d92a:	3503      	adds	r5, #3
 801d92c:	1a6d      	subs	r5, r5, r1
 801d92e:	f025 0503 	bic.w	r5, r5, #3
 801d932:	3508      	adds	r5, #8
 801d934:	2d0c      	cmp	r5, #12
 801d936:	bf38      	it	cc
 801d938:	250c      	movcc	r5, #12
 801d93a:	4629      	mov	r1, r5
 801d93c:	4638      	mov	r0, r7
 801d93e:	f7ff ffa5 	bl	801d88c <sbrk_aligned>
 801d942:	3001      	adds	r0, #1
 801d944:	d02b      	beq.n	801d99e <_malloc_r+0xd2>
 801d946:	6823      	ldr	r3, [r4, #0]
 801d948:	442b      	add	r3, r5
 801d94a:	6023      	str	r3, [r4, #0]
 801d94c:	e00e      	b.n	801d96c <_malloc_r+0xa0>
 801d94e:	6822      	ldr	r2, [r4, #0]
 801d950:	1b52      	subs	r2, r2, r5
 801d952:	d41e      	bmi.n	801d992 <_malloc_r+0xc6>
 801d954:	2a0b      	cmp	r2, #11
 801d956:	d916      	bls.n	801d986 <_malloc_r+0xba>
 801d958:	1961      	adds	r1, r4, r5
 801d95a:	42a3      	cmp	r3, r4
 801d95c:	6025      	str	r5, [r4, #0]
 801d95e:	bf18      	it	ne
 801d960:	6059      	strne	r1, [r3, #4]
 801d962:	6863      	ldr	r3, [r4, #4]
 801d964:	bf08      	it	eq
 801d966:	6031      	streq	r1, [r6, #0]
 801d968:	5162      	str	r2, [r4, r5]
 801d96a:	604b      	str	r3, [r1, #4]
 801d96c:	4638      	mov	r0, r7
 801d96e:	f104 060b 	add.w	r6, r4, #11
 801d972:	f000 f935 	bl	801dbe0 <__malloc_unlock>
 801d976:	f026 0607 	bic.w	r6, r6, #7
 801d97a:	1d23      	adds	r3, r4, #4
 801d97c:	1af2      	subs	r2, r6, r3
 801d97e:	d0b6      	beq.n	801d8ee <_malloc_r+0x22>
 801d980:	1b9b      	subs	r3, r3, r6
 801d982:	50a3      	str	r3, [r4, r2]
 801d984:	e7b3      	b.n	801d8ee <_malloc_r+0x22>
 801d986:	6862      	ldr	r2, [r4, #4]
 801d988:	42a3      	cmp	r3, r4
 801d98a:	bf0c      	ite	eq
 801d98c:	6032      	streq	r2, [r6, #0]
 801d98e:	605a      	strne	r2, [r3, #4]
 801d990:	e7ec      	b.n	801d96c <_malloc_r+0xa0>
 801d992:	4623      	mov	r3, r4
 801d994:	6864      	ldr	r4, [r4, #4]
 801d996:	e7b2      	b.n	801d8fe <_malloc_r+0x32>
 801d998:	4634      	mov	r4, r6
 801d99a:	6876      	ldr	r6, [r6, #4]
 801d99c:	e7b9      	b.n	801d912 <_malloc_r+0x46>
 801d99e:	230c      	movs	r3, #12
 801d9a0:	603b      	str	r3, [r7, #0]
 801d9a2:	4638      	mov	r0, r7
 801d9a4:	f000 f91c 	bl	801dbe0 <__malloc_unlock>
 801d9a8:	e7a1      	b.n	801d8ee <_malloc_r+0x22>
 801d9aa:	6025      	str	r5, [r4, #0]
 801d9ac:	e7de      	b.n	801d96c <_malloc_r+0xa0>
 801d9ae:	bf00      	nop
 801d9b0:	2000e5c0 	.word	0x2000e5c0

0801d9b4 <_sbrk_r>:
 801d9b4:	b538      	push	{r3, r4, r5, lr}
 801d9b6:	4d06      	ldr	r5, [pc, #24]	; (801d9d0 <_sbrk_r+0x1c>)
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	4604      	mov	r4, r0
 801d9bc:	4608      	mov	r0, r1
 801d9be:	602b      	str	r3, [r5, #0]
 801d9c0:	f7e6 fb00 	bl	8003fc4 <_sbrk>
 801d9c4:	1c43      	adds	r3, r0, #1
 801d9c6:	d102      	bne.n	801d9ce <_sbrk_r+0x1a>
 801d9c8:	682b      	ldr	r3, [r5, #0]
 801d9ca:	b103      	cbz	r3, 801d9ce <_sbrk_r+0x1a>
 801d9cc:	6023      	str	r3, [r4, #0]
 801d9ce:	bd38      	pop	{r3, r4, r5, pc}
 801d9d0:	2000e5c8 	.word	0x2000e5c8

0801d9d4 <_raise_r>:
 801d9d4:	291f      	cmp	r1, #31
 801d9d6:	b538      	push	{r3, r4, r5, lr}
 801d9d8:	4604      	mov	r4, r0
 801d9da:	460d      	mov	r5, r1
 801d9dc:	d904      	bls.n	801d9e8 <_raise_r+0x14>
 801d9de:	2316      	movs	r3, #22
 801d9e0:	6003      	str	r3, [r0, #0]
 801d9e2:	f04f 30ff 	mov.w	r0, #4294967295
 801d9e6:	bd38      	pop	{r3, r4, r5, pc}
 801d9e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d9ea:	b112      	cbz	r2, 801d9f2 <_raise_r+0x1e>
 801d9ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d9f0:	b94b      	cbnz	r3, 801da06 <_raise_r+0x32>
 801d9f2:	4620      	mov	r0, r4
 801d9f4:	f000 f830 	bl	801da58 <_getpid_r>
 801d9f8:	462a      	mov	r2, r5
 801d9fa:	4601      	mov	r1, r0
 801d9fc:	4620      	mov	r0, r4
 801d9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da02:	f000 b817 	b.w	801da34 <_kill_r>
 801da06:	2b01      	cmp	r3, #1
 801da08:	d00a      	beq.n	801da20 <_raise_r+0x4c>
 801da0a:	1c59      	adds	r1, r3, #1
 801da0c:	d103      	bne.n	801da16 <_raise_r+0x42>
 801da0e:	2316      	movs	r3, #22
 801da10:	6003      	str	r3, [r0, #0]
 801da12:	2001      	movs	r0, #1
 801da14:	e7e7      	b.n	801d9e6 <_raise_r+0x12>
 801da16:	2400      	movs	r4, #0
 801da18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801da1c:	4628      	mov	r0, r5
 801da1e:	4798      	blx	r3
 801da20:	2000      	movs	r0, #0
 801da22:	e7e0      	b.n	801d9e6 <_raise_r+0x12>

0801da24 <raise>:
 801da24:	4b02      	ldr	r3, [pc, #8]	; (801da30 <raise+0xc>)
 801da26:	4601      	mov	r1, r0
 801da28:	6818      	ldr	r0, [r3, #0]
 801da2a:	f7ff bfd3 	b.w	801d9d4 <_raise_r>
 801da2e:	bf00      	nop
 801da30:	20000130 	.word	0x20000130

0801da34 <_kill_r>:
 801da34:	b538      	push	{r3, r4, r5, lr}
 801da36:	4d07      	ldr	r5, [pc, #28]	; (801da54 <_kill_r+0x20>)
 801da38:	2300      	movs	r3, #0
 801da3a:	4604      	mov	r4, r0
 801da3c:	4608      	mov	r0, r1
 801da3e:	4611      	mov	r1, r2
 801da40:	602b      	str	r3, [r5, #0]
 801da42:	f7e6 faa5 	bl	8003f90 <_kill>
 801da46:	1c43      	adds	r3, r0, #1
 801da48:	d102      	bne.n	801da50 <_kill_r+0x1c>
 801da4a:	682b      	ldr	r3, [r5, #0]
 801da4c:	b103      	cbz	r3, 801da50 <_kill_r+0x1c>
 801da4e:	6023      	str	r3, [r4, #0]
 801da50:	bd38      	pop	{r3, r4, r5, pc}
 801da52:	bf00      	nop
 801da54:	2000e5c8 	.word	0x2000e5c8

0801da58 <_getpid_r>:
 801da58:	f7e6 ba92 	b.w	8003f80 <_getpid>

0801da5c <siprintf>:
 801da5c:	b40e      	push	{r1, r2, r3}
 801da5e:	b500      	push	{lr}
 801da60:	b09c      	sub	sp, #112	; 0x70
 801da62:	ab1d      	add	r3, sp, #116	; 0x74
 801da64:	9002      	str	r0, [sp, #8]
 801da66:	9006      	str	r0, [sp, #24]
 801da68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801da6c:	4809      	ldr	r0, [pc, #36]	; (801da94 <siprintf+0x38>)
 801da6e:	9107      	str	r1, [sp, #28]
 801da70:	9104      	str	r1, [sp, #16]
 801da72:	4909      	ldr	r1, [pc, #36]	; (801da98 <siprintf+0x3c>)
 801da74:	f853 2b04 	ldr.w	r2, [r3], #4
 801da78:	9105      	str	r1, [sp, #20]
 801da7a:	6800      	ldr	r0, [r0, #0]
 801da7c:	9301      	str	r3, [sp, #4]
 801da7e:	a902      	add	r1, sp, #8
 801da80:	f000 f910 	bl	801dca4 <_svfiprintf_r>
 801da84:	9b02      	ldr	r3, [sp, #8]
 801da86:	2200      	movs	r2, #0
 801da88:	701a      	strb	r2, [r3, #0]
 801da8a:	b01c      	add	sp, #112	; 0x70
 801da8c:	f85d eb04 	ldr.w	lr, [sp], #4
 801da90:	b003      	add	sp, #12
 801da92:	4770      	bx	lr
 801da94:	20000130 	.word	0x20000130
 801da98:	ffff0208 	.word	0xffff0208

0801da9c <strcat>:
 801da9c:	b510      	push	{r4, lr}
 801da9e:	4602      	mov	r2, r0
 801daa0:	7814      	ldrb	r4, [r2, #0]
 801daa2:	4613      	mov	r3, r2
 801daa4:	3201      	adds	r2, #1
 801daa6:	2c00      	cmp	r4, #0
 801daa8:	d1fa      	bne.n	801daa0 <strcat+0x4>
 801daaa:	3b01      	subs	r3, #1
 801daac:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dab0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dab4:	2a00      	cmp	r2, #0
 801dab6:	d1f9      	bne.n	801daac <strcat+0x10>
 801dab8:	bd10      	pop	{r4, pc}
	...

0801dabc <_strtol_l.constprop.0>:
 801dabc:	2b01      	cmp	r3, #1
 801dabe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dac2:	d001      	beq.n	801dac8 <_strtol_l.constprop.0+0xc>
 801dac4:	2b24      	cmp	r3, #36	; 0x24
 801dac6:	d906      	bls.n	801dad6 <_strtol_l.constprop.0+0x1a>
 801dac8:	f7ff fe2a 	bl	801d720 <__errno>
 801dacc:	2316      	movs	r3, #22
 801dace:	6003      	str	r3, [r0, #0]
 801dad0:	2000      	movs	r0, #0
 801dad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dad6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801dbbc <_strtol_l.constprop.0+0x100>
 801dada:	460d      	mov	r5, r1
 801dadc:	462e      	mov	r6, r5
 801dade:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dae2:	f814 700c 	ldrb.w	r7, [r4, ip]
 801dae6:	f017 0708 	ands.w	r7, r7, #8
 801daea:	d1f7      	bne.n	801dadc <_strtol_l.constprop.0+0x20>
 801daec:	2c2d      	cmp	r4, #45	; 0x2d
 801daee:	d132      	bne.n	801db56 <_strtol_l.constprop.0+0x9a>
 801daf0:	782c      	ldrb	r4, [r5, #0]
 801daf2:	2701      	movs	r7, #1
 801daf4:	1cb5      	adds	r5, r6, #2
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d05b      	beq.n	801dbb2 <_strtol_l.constprop.0+0xf6>
 801dafa:	2b10      	cmp	r3, #16
 801dafc:	d109      	bne.n	801db12 <_strtol_l.constprop.0+0x56>
 801dafe:	2c30      	cmp	r4, #48	; 0x30
 801db00:	d107      	bne.n	801db12 <_strtol_l.constprop.0+0x56>
 801db02:	782c      	ldrb	r4, [r5, #0]
 801db04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801db08:	2c58      	cmp	r4, #88	; 0x58
 801db0a:	d14d      	bne.n	801dba8 <_strtol_l.constprop.0+0xec>
 801db0c:	786c      	ldrb	r4, [r5, #1]
 801db0e:	2310      	movs	r3, #16
 801db10:	3502      	adds	r5, #2
 801db12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801db16:	f108 38ff 	add.w	r8, r8, #4294967295
 801db1a:	f04f 0c00 	mov.w	ip, #0
 801db1e:	fbb8 f9f3 	udiv	r9, r8, r3
 801db22:	4666      	mov	r6, ip
 801db24:	fb03 8a19 	mls	sl, r3, r9, r8
 801db28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801db2c:	f1be 0f09 	cmp.w	lr, #9
 801db30:	d816      	bhi.n	801db60 <_strtol_l.constprop.0+0xa4>
 801db32:	4674      	mov	r4, lr
 801db34:	42a3      	cmp	r3, r4
 801db36:	dd24      	ble.n	801db82 <_strtol_l.constprop.0+0xc6>
 801db38:	f1bc 0f00 	cmp.w	ip, #0
 801db3c:	db1e      	blt.n	801db7c <_strtol_l.constprop.0+0xc0>
 801db3e:	45b1      	cmp	r9, r6
 801db40:	d31c      	bcc.n	801db7c <_strtol_l.constprop.0+0xc0>
 801db42:	d101      	bne.n	801db48 <_strtol_l.constprop.0+0x8c>
 801db44:	45a2      	cmp	sl, r4
 801db46:	db19      	blt.n	801db7c <_strtol_l.constprop.0+0xc0>
 801db48:	fb06 4603 	mla	r6, r6, r3, r4
 801db4c:	f04f 0c01 	mov.w	ip, #1
 801db50:	f815 4b01 	ldrb.w	r4, [r5], #1
 801db54:	e7e8      	b.n	801db28 <_strtol_l.constprop.0+0x6c>
 801db56:	2c2b      	cmp	r4, #43	; 0x2b
 801db58:	bf04      	itt	eq
 801db5a:	782c      	ldrbeq	r4, [r5, #0]
 801db5c:	1cb5      	addeq	r5, r6, #2
 801db5e:	e7ca      	b.n	801daf6 <_strtol_l.constprop.0+0x3a>
 801db60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801db64:	f1be 0f19 	cmp.w	lr, #25
 801db68:	d801      	bhi.n	801db6e <_strtol_l.constprop.0+0xb2>
 801db6a:	3c37      	subs	r4, #55	; 0x37
 801db6c:	e7e2      	b.n	801db34 <_strtol_l.constprop.0+0x78>
 801db6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801db72:	f1be 0f19 	cmp.w	lr, #25
 801db76:	d804      	bhi.n	801db82 <_strtol_l.constprop.0+0xc6>
 801db78:	3c57      	subs	r4, #87	; 0x57
 801db7a:	e7db      	b.n	801db34 <_strtol_l.constprop.0+0x78>
 801db7c:	f04f 3cff 	mov.w	ip, #4294967295
 801db80:	e7e6      	b.n	801db50 <_strtol_l.constprop.0+0x94>
 801db82:	f1bc 0f00 	cmp.w	ip, #0
 801db86:	da05      	bge.n	801db94 <_strtol_l.constprop.0+0xd8>
 801db88:	2322      	movs	r3, #34	; 0x22
 801db8a:	6003      	str	r3, [r0, #0]
 801db8c:	4646      	mov	r6, r8
 801db8e:	b942      	cbnz	r2, 801dba2 <_strtol_l.constprop.0+0xe6>
 801db90:	4630      	mov	r0, r6
 801db92:	e79e      	b.n	801dad2 <_strtol_l.constprop.0+0x16>
 801db94:	b107      	cbz	r7, 801db98 <_strtol_l.constprop.0+0xdc>
 801db96:	4276      	negs	r6, r6
 801db98:	2a00      	cmp	r2, #0
 801db9a:	d0f9      	beq.n	801db90 <_strtol_l.constprop.0+0xd4>
 801db9c:	f1bc 0f00 	cmp.w	ip, #0
 801dba0:	d000      	beq.n	801dba4 <_strtol_l.constprop.0+0xe8>
 801dba2:	1e69      	subs	r1, r5, #1
 801dba4:	6011      	str	r1, [r2, #0]
 801dba6:	e7f3      	b.n	801db90 <_strtol_l.constprop.0+0xd4>
 801dba8:	2430      	movs	r4, #48	; 0x30
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d1b1      	bne.n	801db12 <_strtol_l.constprop.0+0x56>
 801dbae:	2308      	movs	r3, #8
 801dbb0:	e7af      	b.n	801db12 <_strtol_l.constprop.0+0x56>
 801dbb2:	2c30      	cmp	r4, #48	; 0x30
 801dbb4:	d0a5      	beq.n	801db02 <_strtol_l.constprop.0+0x46>
 801dbb6:	230a      	movs	r3, #10
 801dbb8:	e7ab      	b.n	801db12 <_strtol_l.constprop.0+0x56>
 801dbba:	bf00      	nop
 801dbbc:	08032791 	.word	0x08032791

0801dbc0 <strtol>:
 801dbc0:	4613      	mov	r3, r2
 801dbc2:	460a      	mov	r2, r1
 801dbc4:	4601      	mov	r1, r0
 801dbc6:	4802      	ldr	r0, [pc, #8]	; (801dbd0 <strtol+0x10>)
 801dbc8:	6800      	ldr	r0, [r0, #0]
 801dbca:	f7ff bf77 	b.w	801dabc <_strtol_l.constprop.0>
 801dbce:	bf00      	nop
 801dbd0:	20000130 	.word	0x20000130

0801dbd4 <__malloc_lock>:
 801dbd4:	4801      	ldr	r0, [pc, #4]	; (801dbdc <__malloc_lock+0x8>)
 801dbd6:	f000 baf9 	b.w	801e1cc <__retarget_lock_acquire_recursive>
 801dbda:	bf00      	nop
 801dbdc:	2000e5cc 	.word	0x2000e5cc

0801dbe0 <__malloc_unlock>:
 801dbe0:	4801      	ldr	r0, [pc, #4]	; (801dbe8 <__malloc_unlock+0x8>)
 801dbe2:	f000 baf4 	b.w	801e1ce <__retarget_lock_release_recursive>
 801dbe6:	bf00      	nop
 801dbe8:	2000e5cc 	.word	0x2000e5cc

0801dbec <__ssputs_r>:
 801dbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbf0:	688e      	ldr	r6, [r1, #8]
 801dbf2:	429e      	cmp	r6, r3
 801dbf4:	4682      	mov	sl, r0
 801dbf6:	460c      	mov	r4, r1
 801dbf8:	4690      	mov	r8, r2
 801dbfa:	461f      	mov	r7, r3
 801dbfc:	d838      	bhi.n	801dc70 <__ssputs_r+0x84>
 801dbfe:	898a      	ldrh	r2, [r1, #12]
 801dc00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801dc04:	d032      	beq.n	801dc6c <__ssputs_r+0x80>
 801dc06:	6825      	ldr	r5, [r4, #0]
 801dc08:	6909      	ldr	r1, [r1, #16]
 801dc0a:	eba5 0901 	sub.w	r9, r5, r1
 801dc0e:	6965      	ldr	r5, [r4, #20]
 801dc10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dc14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dc18:	3301      	adds	r3, #1
 801dc1a:	444b      	add	r3, r9
 801dc1c:	106d      	asrs	r5, r5, #1
 801dc1e:	429d      	cmp	r5, r3
 801dc20:	bf38      	it	cc
 801dc22:	461d      	movcc	r5, r3
 801dc24:	0553      	lsls	r3, r2, #21
 801dc26:	d531      	bpl.n	801dc8c <__ssputs_r+0xa0>
 801dc28:	4629      	mov	r1, r5
 801dc2a:	f7ff fe4f 	bl	801d8cc <_malloc_r>
 801dc2e:	4606      	mov	r6, r0
 801dc30:	b950      	cbnz	r0, 801dc48 <__ssputs_r+0x5c>
 801dc32:	230c      	movs	r3, #12
 801dc34:	f8ca 3000 	str.w	r3, [sl]
 801dc38:	89a3      	ldrh	r3, [r4, #12]
 801dc3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc3e:	81a3      	strh	r3, [r4, #12]
 801dc40:	f04f 30ff 	mov.w	r0, #4294967295
 801dc44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc48:	6921      	ldr	r1, [r4, #16]
 801dc4a:	464a      	mov	r2, r9
 801dc4c:	f7ff fda2 	bl	801d794 <memcpy>
 801dc50:	89a3      	ldrh	r3, [r4, #12]
 801dc52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dc5a:	81a3      	strh	r3, [r4, #12]
 801dc5c:	6126      	str	r6, [r4, #16]
 801dc5e:	6165      	str	r5, [r4, #20]
 801dc60:	444e      	add	r6, r9
 801dc62:	eba5 0509 	sub.w	r5, r5, r9
 801dc66:	6026      	str	r6, [r4, #0]
 801dc68:	60a5      	str	r5, [r4, #8]
 801dc6a:	463e      	mov	r6, r7
 801dc6c:	42be      	cmp	r6, r7
 801dc6e:	d900      	bls.n	801dc72 <__ssputs_r+0x86>
 801dc70:	463e      	mov	r6, r7
 801dc72:	6820      	ldr	r0, [r4, #0]
 801dc74:	4632      	mov	r2, r6
 801dc76:	4641      	mov	r1, r8
 801dc78:	f7ff fd9a 	bl	801d7b0 <memmove>
 801dc7c:	68a3      	ldr	r3, [r4, #8]
 801dc7e:	1b9b      	subs	r3, r3, r6
 801dc80:	60a3      	str	r3, [r4, #8]
 801dc82:	6823      	ldr	r3, [r4, #0]
 801dc84:	4433      	add	r3, r6
 801dc86:	6023      	str	r3, [r4, #0]
 801dc88:	2000      	movs	r0, #0
 801dc8a:	e7db      	b.n	801dc44 <__ssputs_r+0x58>
 801dc8c:	462a      	mov	r2, r5
 801dc8e:	f000 fa9f 	bl	801e1d0 <_realloc_r>
 801dc92:	4606      	mov	r6, r0
 801dc94:	2800      	cmp	r0, #0
 801dc96:	d1e1      	bne.n	801dc5c <__ssputs_r+0x70>
 801dc98:	6921      	ldr	r1, [r4, #16]
 801dc9a:	4650      	mov	r0, sl
 801dc9c:	f7ff fdaa 	bl	801d7f4 <_free_r>
 801dca0:	e7c7      	b.n	801dc32 <__ssputs_r+0x46>
	...

0801dca4 <_svfiprintf_r>:
 801dca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dca8:	4698      	mov	r8, r3
 801dcaa:	898b      	ldrh	r3, [r1, #12]
 801dcac:	061b      	lsls	r3, r3, #24
 801dcae:	b09d      	sub	sp, #116	; 0x74
 801dcb0:	4607      	mov	r7, r0
 801dcb2:	460d      	mov	r5, r1
 801dcb4:	4614      	mov	r4, r2
 801dcb6:	d50e      	bpl.n	801dcd6 <_svfiprintf_r+0x32>
 801dcb8:	690b      	ldr	r3, [r1, #16]
 801dcba:	b963      	cbnz	r3, 801dcd6 <_svfiprintf_r+0x32>
 801dcbc:	2140      	movs	r1, #64	; 0x40
 801dcbe:	f7ff fe05 	bl	801d8cc <_malloc_r>
 801dcc2:	6028      	str	r0, [r5, #0]
 801dcc4:	6128      	str	r0, [r5, #16]
 801dcc6:	b920      	cbnz	r0, 801dcd2 <_svfiprintf_r+0x2e>
 801dcc8:	230c      	movs	r3, #12
 801dcca:	603b      	str	r3, [r7, #0]
 801dccc:	f04f 30ff 	mov.w	r0, #4294967295
 801dcd0:	e0d1      	b.n	801de76 <_svfiprintf_r+0x1d2>
 801dcd2:	2340      	movs	r3, #64	; 0x40
 801dcd4:	616b      	str	r3, [r5, #20]
 801dcd6:	2300      	movs	r3, #0
 801dcd8:	9309      	str	r3, [sp, #36]	; 0x24
 801dcda:	2320      	movs	r3, #32
 801dcdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dce0:	f8cd 800c 	str.w	r8, [sp, #12]
 801dce4:	2330      	movs	r3, #48	; 0x30
 801dce6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801de90 <_svfiprintf_r+0x1ec>
 801dcea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dcee:	f04f 0901 	mov.w	r9, #1
 801dcf2:	4623      	mov	r3, r4
 801dcf4:	469a      	mov	sl, r3
 801dcf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dcfa:	b10a      	cbz	r2, 801dd00 <_svfiprintf_r+0x5c>
 801dcfc:	2a25      	cmp	r2, #37	; 0x25
 801dcfe:	d1f9      	bne.n	801dcf4 <_svfiprintf_r+0x50>
 801dd00:	ebba 0b04 	subs.w	fp, sl, r4
 801dd04:	d00b      	beq.n	801dd1e <_svfiprintf_r+0x7a>
 801dd06:	465b      	mov	r3, fp
 801dd08:	4622      	mov	r2, r4
 801dd0a:	4629      	mov	r1, r5
 801dd0c:	4638      	mov	r0, r7
 801dd0e:	f7ff ff6d 	bl	801dbec <__ssputs_r>
 801dd12:	3001      	adds	r0, #1
 801dd14:	f000 80aa 	beq.w	801de6c <_svfiprintf_r+0x1c8>
 801dd18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dd1a:	445a      	add	r2, fp
 801dd1c:	9209      	str	r2, [sp, #36]	; 0x24
 801dd1e:	f89a 3000 	ldrb.w	r3, [sl]
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	f000 80a2 	beq.w	801de6c <_svfiprintf_r+0x1c8>
 801dd28:	2300      	movs	r3, #0
 801dd2a:	f04f 32ff 	mov.w	r2, #4294967295
 801dd2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dd32:	f10a 0a01 	add.w	sl, sl, #1
 801dd36:	9304      	str	r3, [sp, #16]
 801dd38:	9307      	str	r3, [sp, #28]
 801dd3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dd3e:	931a      	str	r3, [sp, #104]	; 0x68
 801dd40:	4654      	mov	r4, sl
 801dd42:	2205      	movs	r2, #5
 801dd44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd48:	4851      	ldr	r0, [pc, #324]	; (801de90 <_svfiprintf_r+0x1ec>)
 801dd4a:	f7e2 fa41 	bl	80001d0 <memchr>
 801dd4e:	9a04      	ldr	r2, [sp, #16]
 801dd50:	b9d8      	cbnz	r0, 801dd8a <_svfiprintf_r+0xe6>
 801dd52:	06d0      	lsls	r0, r2, #27
 801dd54:	bf44      	itt	mi
 801dd56:	2320      	movmi	r3, #32
 801dd58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dd5c:	0711      	lsls	r1, r2, #28
 801dd5e:	bf44      	itt	mi
 801dd60:	232b      	movmi	r3, #43	; 0x2b
 801dd62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dd66:	f89a 3000 	ldrb.w	r3, [sl]
 801dd6a:	2b2a      	cmp	r3, #42	; 0x2a
 801dd6c:	d015      	beq.n	801dd9a <_svfiprintf_r+0xf6>
 801dd6e:	9a07      	ldr	r2, [sp, #28]
 801dd70:	4654      	mov	r4, sl
 801dd72:	2000      	movs	r0, #0
 801dd74:	f04f 0c0a 	mov.w	ip, #10
 801dd78:	4621      	mov	r1, r4
 801dd7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dd7e:	3b30      	subs	r3, #48	; 0x30
 801dd80:	2b09      	cmp	r3, #9
 801dd82:	d94e      	bls.n	801de22 <_svfiprintf_r+0x17e>
 801dd84:	b1b0      	cbz	r0, 801ddb4 <_svfiprintf_r+0x110>
 801dd86:	9207      	str	r2, [sp, #28]
 801dd88:	e014      	b.n	801ddb4 <_svfiprintf_r+0x110>
 801dd8a:	eba0 0308 	sub.w	r3, r0, r8
 801dd8e:	fa09 f303 	lsl.w	r3, r9, r3
 801dd92:	4313      	orrs	r3, r2
 801dd94:	9304      	str	r3, [sp, #16]
 801dd96:	46a2      	mov	sl, r4
 801dd98:	e7d2      	b.n	801dd40 <_svfiprintf_r+0x9c>
 801dd9a:	9b03      	ldr	r3, [sp, #12]
 801dd9c:	1d19      	adds	r1, r3, #4
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	9103      	str	r1, [sp, #12]
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	bfbb      	ittet	lt
 801dda6:	425b      	neglt	r3, r3
 801dda8:	f042 0202 	orrlt.w	r2, r2, #2
 801ddac:	9307      	strge	r3, [sp, #28]
 801ddae:	9307      	strlt	r3, [sp, #28]
 801ddb0:	bfb8      	it	lt
 801ddb2:	9204      	strlt	r2, [sp, #16]
 801ddb4:	7823      	ldrb	r3, [r4, #0]
 801ddb6:	2b2e      	cmp	r3, #46	; 0x2e
 801ddb8:	d10c      	bne.n	801ddd4 <_svfiprintf_r+0x130>
 801ddba:	7863      	ldrb	r3, [r4, #1]
 801ddbc:	2b2a      	cmp	r3, #42	; 0x2a
 801ddbe:	d135      	bne.n	801de2c <_svfiprintf_r+0x188>
 801ddc0:	9b03      	ldr	r3, [sp, #12]
 801ddc2:	1d1a      	adds	r2, r3, #4
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	9203      	str	r2, [sp, #12]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	bfb8      	it	lt
 801ddcc:	f04f 33ff 	movlt.w	r3, #4294967295
 801ddd0:	3402      	adds	r4, #2
 801ddd2:	9305      	str	r3, [sp, #20]
 801ddd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801dea0 <_svfiprintf_r+0x1fc>
 801ddd8:	7821      	ldrb	r1, [r4, #0]
 801ddda:	2203      	movs	r2, #3
 801dddc:	4650      	mov	r0, sl
 801ddde:	f7e2 f9f7 	bl	80001d0 <memchr>
 801dde2:	b140      	cbz	r0, 801ddf6 <_svfiprintf_r+0x152>
 801dde4:	2340      	movs	r3, #64	; 0x40
 801dde6:	eba0 000a 	sub.w	r0, r0, sl
 801ddea:	fa03 f000 	lsl.w	r0, r3, r0
 801ddee:	9b04      	ldr	r3, [sp, #16]
 801ddf0:	4303      	orrs	r3, r0
 801ddf2:	3401      	adds	r4, #1
 801ddf4:	9304      	str	r3, [sp, #16]
 801ddf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ddfa:	4826      	ldr	r0, [pc, #152]	; (801de94 <_svfiprintf_r+0x1f0>)
 801ddfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801de00:	2206      	movs	r2, #6
 801de02:	f7e2 f9e5 	bl	80001d0 <memchr>
 801de06:	2800      	cmp	r0, #0
 801de08:	d038      	beq.n	801de7c <_svfiprintf_r+0x1d8>
 801de0a:	4b23      	ldr	r3, [pc, #140]	; (801de98 <_svfiprintf_r+0x1f4>)
 801de0c:	bb1b      	cbnz	r3, 801de56 <_svfiprintf_r+0x1b2>
 801de0e:	9b03      	ldr	r3, [sp, #12]
 801de10:	3307      	adds	r3, #7
 801de12:	f023 0307 	bic.w	r3, r3, #7
 801de16:	3308      	adds	r3, #8
 801de18:	9303      	str	r3, [sp, #12]
 801de1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de1c:	4433      	add	r3, r6
 801de1e:	9309      	str	r3, [sp, #36]	; 0x24
 801de20:	e767      	b.n	801dcf2 <_svfiprintf_r+0x4e>
 801de22:	fb0c 3202 	mla	r2, ip, r2, r3
 801de26:	460c      	mov	r4, r1
 801de28:	2001      	movs	r0, #1
 801de2a:	e7a5      	b.n	801dd78 <_svfiprintf_r+0xd4>
 801de2c:	2300      	movs	r3, #0
 801de2e:	3401      	adds	r4, #1
 801de30:	9305      	str	r3, [sp, #20]
 801de32:	4619      	mov	r1, r3
 801de34:	f04f 0c0a 	mov.w	ip, #10
 801de38:	4620      	mov	r0, r4
 801de3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801de3e:	3a30      	subs	r2, #48	; 0x30
 801de40:	2a09      	cmp	r2, #9
 801de42:	d903      	bls.n	801de4c <_svfiprintf_r+0x1a8>
 801de44:	2b00      	cmp	r3, #0
 801de46:	d0c5      	beq.n	801ddd4 <_svfiprintf_r+0x130>
 801de48:	9105      	str	r1, [sp, #20]
 801de4a:	e7c3      	b.n	801ddd4 <_svfiprintf_r+0x130>
 801de4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801de50:	4604      	mov	r4, r0
 801de52:	2301      	movs	r3, #1
 801de54:	e7f0      	b.n	801de38 <_svfiprintf_r+0x194>
 801de56:	ab03      	add	r3, sp, #12
 801de58:	9300      	str	r3, [sp, #0]
 801de5a:	462a      	mov	r2, r5
 801de5c:	4b0f      	ldr	r3, [pc, #60]	; (801de9c <_svfiprintf_r+0x1f8>)
 801de5e:	a904      	add	r1, sp, #16
 801de60:	4638      	mov	r0, r7
 801de62:	f3af 8000 	nop.w
 801de66:	1c42      	adds	r2, r0, #1
 801de68:	4606      	mov	r6, r0
 801de6a:	d1d6      	bne.n	801de1a <_svfiprintf_r+0x176>
 801de6c:	89ab      	ldrh	r3, [r5, #12]
 801de6e:	065b      	lsls	r3, r3, #25
 801de70:	f53f af2c 	bmi.w	801dccc <_svfiprintf_r+0x28>
 801de74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801de76:	b01d      	add	sp, #116	; 0x74
 801de78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de7c:	ab03      	add	r3, sp, #12
 801de7e:	9300      	str	r3, [sp, #0]
 801de80:	462a      	mov	r2, r5
 801de82:	4b06      	ldr	r3, [pc, #24]	; (801de9c <_svfiprintf_r+0x1f8>)
 801de84:	a904      	add	r1, sp, #16
 801de86:	4638      	mov	r0, r7
 801de88:	f000 f87a 	bl	801df80 <_printf_i>
 801de8c:	e7eb      	b.n	801de66 <_svfiprintf_r+0x1c2>
 801de8e:	bf00      	nop
 801de90:	08032891 	.word	0x08032891
 801de94:	0803289b 	.word	0x0803289b
 801de98:	00000000 	.word	0x00000000
 801de9c:	0801dbed 	.word	0x0801dbed
 801dea0:	08032897 	.word	0x08032897

0801dea4 <_printf_common>:
 801dea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dea8:	4616      	mov	r6, r2
 801deaa:	4699      	mov	r9, r3
 801deac:	688a      	ldr	r2, [r1, #8]
 801deae:	690b      	ldr	r3, [r1, #16]
 801deb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801deb4:	4293      	cmp	r3, r2
 801deb6:	bfb8      	it	lt
 801deb8:	4613      	movlt	r3, r2
 801deba:	6033      	str	r3, [r6, #0]
 801debc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801dec0:	4607      	mov	r7, r0
 801dec2:	460c      	mov	r4, r1
 801dec4:	b10a      	cbz	r2, 801deca <_printf_common+0x26>
 801dec6:	3301      	adds	r3, #1
 801dec8:	6033      	str	r3, [r6, #0]
 801deca:	6823      	ldr	r3, [r4, #0]
 801decc:	0699      	lsls	r1, r3, #26
 801dece:	bf42      	ittt	mi
 801ded0:	6833      	ldrmi	r3, [r6, #0]
 801ded2:	3302      	addmi	r3, #2
 801ded4:	6033      	strmi	r3, [r6, #0]
 801ded6:	6825      	ldr	r5, [r4, #0]
 801ded8:	f015 0506 	ands.w	r5, r5, #6
 801dedc:	d106      	bne.n	801deec <_printf_common+0x48>
 801dede:	f104 0a19 	add.w	sl, r4, #25
 801dee2:	68e3      	ldr	r3, [r4, #12]
 801dee4:	6832      	ldr	r2, [r6, #0]
 801dee6:	1a9b      	subs	r3, r3, r2
 801dee8:	42ab      	cmp	r3, r5
 801deea:	dc26      	bgt.n	801df3a <_printf_common+0x96>
 801deec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801def0:	1e13      	subs	r3, r2, #0
 801def2:	6822      	ldr	r2, [r4, #0]
 801def4:	bf18      	it	ne
 801def6:	2301      	movne	r3, #1
 801def8:	0692      	lsls	r2, r2, #26
 801defa:	d42b      	bmi.n	801df54 <_printf_common+0xb0>
 801defc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801df00:	4649      	mov	r1, r9
 801df02:	4638      	mov	r0, r7
 801df04:	47c0      	blx	r8
 801df06:	3001      	adds	r0, #1
 801df08:	d01e      	beq.n	801df48 <_printf_common+0xa4>
 801df0a:	6823      	ldr	r3, [r4, #0]
 801df0c:	68e5      	ldr	r5, [r4, #12]
 801df0e:	6832      	ldr	r2, [r6, #0]
 801df10:	f003 0306 	and.w	r3, r3, #6
 801df14:	2b04      	cmp	r3, #4
 801df16:	bf08      	it	eq
 801df18:	1aad      	subeq	r5, r5, r2
 801df1a:	68a3      	ldr	r3, [r4, #8]
 801df1c:	6922      	ldr	r2, [r4, #16]
 801df1e:	bf0c      	ite	eq
 801df20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801df24:	2500      	movne	r5, #0
 801df26:	4293      	cmp	r3, r2
 801df28:	bfc4      	itt	gt
 801df2a:	1a9b      	subgt	r3, r3, r2
 801df2c:	18ed      	addgt	r5, r5, r3
 801df2e:	2600      	movs	r6, #0
 801df30:	341a      	adds	r4, #26
 801df32:	42b5      	cmp	r5, r6
 801df34:	d11a      	bne.n	801df6c <_printf_common+0xc8>
 801df36:	2000      	movs	r0, #0
 801df38:	e008      	b.n	801df4c <_printf_common+0xa8>
 801df3a:	2301      	movs	r3, #1
 801df3c:	4652      	mov	r2, sl
 801df3e:	4649      	mov	r1, r9
 801df40:	4638      	mov	r0, r7
 801df42:	47c0      	blx	r8
 801df44:	3001      	adds	r0, #1
 801df46:	d103      	bne.n	801df50 <_printf_common+0xac>
 801df48:	f04f 30ff 	mov.w	r0, #4294967295
 801df4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df50:	3501      	adds	r5, #1
 801df52:	e7c6      	b.n	801dee2 <_printf_common+0x3e>
 801df54:	18e1      	adds	r1, r4, r3
 801df56:	1c5a      	adds	r2, r3, #1
 801df58:	2030      	movs	r0, #48	; 0x30
 801df5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801df5e:	4422      	add	r2, r4
 801df60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801df64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801df68:	3302      	adds	r3, #2
 801df6a:	e7c7      	b.n	801defc <_printf_common+0x58>
 801df6c:	2301      	movs	r3, #1
 801df6e:	4622      	mov	r2, r4
 801df70:	4649      	mov	r1, r9
 801df72:	4638      	mov	r0, r7
 801df74:	47c0      	blx	r8
 801df76:	3001      	adds	r0, #1
 801df78:	d0e6      	beq.n	801df48 <_printf_common+0xa4>
 801df7a:	3601      	adds	r6, #1
 801df7c:	e7d9      	b.n	801df32 <_printf_common+0x8e>
	...

0801df80 <_printf_i>:
 801df80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801df84:	7e0f      	ldrb	r7, [r1, #24]
 801df86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df88:	2f78      	cmp	r7, #120	; 0x78
 801df8a:	4691      	mov	r9, r2
 801df8c:	4680      	mov	r8, r0
 801df8e:	460c      	mov	r4, r1
 801df90:	469a      	mov	sl, r3
 801df92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801df96:	d807      	bhi.n	801dfa8 <_printf_i+0x28>
 801df98:	2f62      	cmp	r7, #98	; 0x62
 801df9a:	d80a      	bhi.n	801dfb2 <_printf_i+0x32>
 801df9c:	2f00      	cmp	r7, #0
 801df9e:	f000 80d8 	beq.w	801e152 <_printf_i+0x1d2>
 801dfa2:	2f58      	cmp	r7, #88	; 0x58
 801dfa4:	f000 80a3 	beq.w	801e0ee <_printf_i+0x16e>
 801dfa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dfac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dfb0:	e03a      	b.n	801e028 <_printf_i+0xa8>
 801dfb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dfb6:	2b15      	cmp	r3, #21
 801dfb8:	d8f6      	bhi.n	801dfa8 <_printf_i+0x28>
 801dfba:	a101      	add	r1, pc, #4	; (adr r1, 801dfc0 <_printf_i+0x40>)
 801dfbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dfc0:	0801e019 	.word	0x0801e019
 801dfc4:	0801e02d 	.word	0x0801e02d
 801dfc8:	0801dfa9 	.word	0x0801dfa9
 801dfcc:	0801dfa9 	.word	0x0801dfa9
 801dfd0:	0801dfa9 	.word	0x0801dfa9
 801dfd4:	0801dfa9 	.word	0x0801dfa9
 801dfd8:	0801e02d 	.word	0x0801e02d
 801dfdc:	0801dfa9 	.word	0x0801dfa9
 801dfe0:	0801dfa9 	.word	0x0801dfa9
 801dfe4:	0801dfa9 	.word	0x0801dfa9
 801dfe8:	0801dfa9 	.word	0x0801dfa9
 801dfec:	0801e139 	.word	0x0801e139
 801dff0:	0801e05d 	.word	0x0801e05d
 801dff4:	0801e11b 	.word	0x0801e11b
 801dff8:	0801dfa9 	.word	0x0801dfa9
 801dffc:	0801dfa9 	.word	0x0801dfa9
 801e000:	0801e15b 	.word	0x0801e15b
 801e004:	0801dfa9 	.word	0x0801dfa9
 801e008:	0801e05d 	.word	0x0801e05d
 801e00c:	0801dfa9 	.word	0x0801dfa9
 801e010:	0801dfa9 	.word	0x0801dfa9
 801e014:	0801e123 	.word	0x0801e123
 801e018:	682b      	ldr	r3, [r5, #0]
 801e01a:	1d1a      	adds	r2, r3, #4
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	602a      	str	r2, [r5, #0]
 801e020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e028:	2301      	movs	r3, #1
 801e02a:	e0a3      	b.n	801e174 <_printf_i+0x1f4>
 801e02c:	6820      	ldr	r0, [r4, #0]
 801e02e:	6829      	ldr	r1, [r5, #0]
 801e030:	0606      	lsls	r6, r0, #24
 801e032:	f101 0304 	add.w	r3, r1, #4
 801e036:	d50a      	bpl.n	801e04e <_printf_i+0xce>
 801e038:	680e      	ldr	r6, [r1, #0]
 801e03a:	602b      	str	r3, [r5, #0]
 801e03c:	2e00      	cmp	r6, #0
 801e03e:	da03      	bge.n	801e048 <_printf_i+0xc8>
 801e040:	232d      	movs	r3, #45	; 0x2d
 801e042:	4276      	negs	r6, r6
 801e044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e048:	485e      	ldr	r0, [pc, #376]	; (801e1c4 <_printf_i+0x244>)
 801e04a:	230a      	movs	r3, #10
 801e04c:	e019      	b.n	801e082 <_printf_i+0x102>
 801e04e:	680e      	ldr	r6, [r1, #0]
 801e050:	602b      	str	r3, [r5, #0]
 801e052:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e056:	bf18      	it	ne
 801e058:	b236      	sxthne	r6, r6
 801e05a:	e7ef      	b.n	801e03c <_printf_i+0xbc>
 801e05c:	682b      	ldr	r3, [r5, #0]
 801e05e:	6820      	ldr	r0, [r4, #0]
 801e060:	1d19      	adds	r1, r3, #4
 801e062:	6029      	str	r1, [r5, #0]
 801e064:	0601      	lsls	r1, r0, #24
 801e066:	d501      	bpl.n	801e06c <_printf_i+0xec>
 801e068:	681e      	ldr	r6, [r3, #0]
 801e06a:	e002      	b.n	801e072 <_printf_i+0xf2>
 801e06c:	0646      	lsls	r6, r0, #25
 801e06e:	d5fb      	bpl.n	801e068 <_printf_i+0xe8>
 801e070:	881e      	ldrh	r6, [r3, #0]
 801e072:	4854      	ldr	r0, [pc, #336]	; (801e1c4 <_printf_i+0x244>)
 801e074:	2f6f      	cmp	r7, #111	; 0x6f
 801e076:	bf0c      	ite	eq
 801e078:	2308      	moveq	r3, #8
 801e07a:	230a      	movne	r3, #10
 801e07c:	2100      	movs	r1, #0
 801e07e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e082:	6865      	ldr	r5, [r4, #4]
 801e084:	60a5      	str	r5, [r4, #8]
 801e086:	2d00      	cmp	r5, #0
 801e088:	bfa2      	ittt	ge
 801e08a:	6821      	ldrge	r1, [r4, #0]
 801e08c:	f021 0104 	bicge.w	r1, r1, #4
 801e090:	6021      	strge	r1, [r4, #0]
 801e092:	b90e      	cbnz	r6, 801e098 <_printf_i+0x118>
 801e094:	2d00      	cmp	r5, #0
 801e096:	d04d      	beq.n	801e134 <_printf_i+0x1b4>
 801e098:	4615      	mov	r5, r2
 801e09a:	fbb6 f1f3 	udiv	r1, r6, r3
 801e09e:	fb03 6711 	mls	r7, r3, r1, r6
 801e0a2:	5dc7      	ldrb	r7, [r0, r7]
 801e0a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e0a8:	4637      	mov	r7, r6
 801e0aa:	42bb      	cmp	r3, r7
 801e0ac:	460e      	mov	r6, r1
 801e0ae:	d9f4      	bls.n	801e09a <_printf_i+0x11a>
 801e0b0:	2b08      	cmp	r3, #8
 801e0b2:	d10b      	bne.n	801e0cc <_printf_i+0x14c>
 801e0b4:	6823      	ldr	r3, [r4, #0]
 801e0b6:	07de      	lsls	r6, r3, #31
 801e0b8:	d508      	bpl.n	801e0cc <_printf_i+0x14c>
 801e0ba:	6923      	ldr	r3, [r4, #16]
 801e0bc:	6861      	ldr	r1, [r4, #4]
 801e0be:	4299      	cmp	r1, r3
 801e0c0:	bfde      	ittt	le
 801e0c2:	2330      	movle	r3, #48	; 0x30
 801e0c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e0c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e0cc:	1b52      	subs	r2, r2, r5
 801e0ce:	6122      	str	r2, [r4, #16]
 801e0d0:	f8cd a000 	str.w	sl, [sp]
 801e0d4:	464b      	mov	r3, r9
 801e0d6:	aa03      	add	r2, sp, #12
 801e0d8:	4621      	mov	r1, r4
 801e0da:	4640      	mov	r0, r8
 801e0dc:	f7ff fee2 	bl	801dea4 <_printf_common>
 801e0e0:	3001      	adds	r0, #1
 801e0e2:	d14c      	bne.n	801e17e <_printf_i+0x1fe>
 801e0e4:	f04f 30ff 	mov.w	r0, #4294967295
 801e0e8:	b004      	add	sp, #16
 801e0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0ee:	4835      	ldr	r0, [pc, #212]	; (801e1c4 <_printf_i+0x244>)
 801e0f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e0f4:	6829      	ldr	r1, [r5, #0]
 801e0f6:	6823      	ldr	r3, [r4, #0]
 801e0f8:	f851 6b04 	ldr.w	r6, [r1], #4
 801e0fc:	6029      	str	r1, [r5, #0]
 801e0fe:	061d      	lsls	r5, r3, #24
 801e100:	d514      	bpl.n	801e12c <_printf_i+0x1ac>
 801e102:	07df      	lsls	r7, r3, #31
 801e104:	bf44      	itt	mi
 801e106:	f043 0320 	orrmi.w	r3, r3, #32
 801e10a:	6023      	strmi	r3, [r4, #0]
 801e10c:	b91e      	cbnz	r6, 801e116 <_printf_i+0x196>
 801e10e:	6823      	ldr	r3, [r4, #0]
 801e110:	f023 0320 	bic.w	r3, r3, #32
 801e114:	6023      	str	r3, [r4, #0]
 801e116:	2310      	movs	r3, #16
 801e118:	e7b0      	b.n	801e07c <_printf_i+0xfc>
 801e11a:	6823      	ldr	r3, [r4, #0]
 801e11c:	f043 0320 	orr.w	r3, r3, #32
 801e120:	6023      	str	r3, [r4, #0]
 801e122:	2378      	movs	r3, #120	; 0x78
 801e124:	4828      	ldr	r0, [pc, #160]	; (801e1c8 <_printf_i+0x248>)
 801e126:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e12a:	e7e3      	b.n	801e0f4 <_printf_i+0x174>
 801e12c:	0659      	lsls	r1, r3, #25
 801e12e:	bf48      	it	mi
 801e130:	b2b6      	uxthmi	r6, r6
 801e132:	e7e6      	b.n	801e102 <_printf_i+0x182>
 801e134:	4615      	mov	r5, r2
 801e136:	e7bb      	b.n	801e0b0 <_printf_i+0x130>
 801e138:	682b      	ldr	r3, [r5, #0]
 801e13a:	6826      	ldr	r6, [r4, #0]
 801e13c:	6961      	ldr	r1, [r4, #20]
 801e13e:	1d18      	adds	r0, r3, #4
 801e140:	6028      	str	r0, [r5, #0]
 801e142:	0635      	lsls	r5, r6, #24
 801e144:	681b      	ldr	r3, [r3, #0]
 801e146:	d501      	bpl.n	801e14c <_printf_i+0x1cc>
 801e148:	6019      	str	r1, [r3, #0]
 801e14a:	e002      	b.n	801e152 <_printf_i+0x1d2>
 801e14c:	0670      	lsls	r0, r6, #25
 801e14e:	d5fb      	bpl.n	801e148 <_printf_i+0x1c8>
 801e150:	8019      	strh	r1, [r3, #0]
 801e152:	2300      	movs	r3, #0
 801e154:	6123      	str	r3, [r4, #16]
 801e156:	4615      	mov	r5, r2
 801e158:	e7ba      	b.n	801e0d0 <_printf_i+0x150>
 801e15a:	682b      	ldr	r3, [r5, #0]
 801e15c:	1d1a      	adds	r2, r3, #4
 801e15e:	602a      	str	r2, [r5, #0]
 801e160:	681d      	ldr	r5, [r3, #0]
 801e162:	6862      	ldr	r2, [r4, #4]
 801e164:	2100      	movs	r1, #0
 801e166:	4628      	mov	r0, r5
 801e168:	f7e2 f832 	bl	80001d0 <memchr>
 801e16c:	b108      	cbz	r0, 801e172 <_printf_i+0x1f2>
 801e16e:	1b40      	subs	r0, r0, r5
 801e170:	6060      	str	r0, [r4, #4]
 801e172:	6863      	ldr	r3, [r4, #4]
 801e174:	6123      	str	r3, [r4, #16]
 801e176:	2300      	movs	r3, #0
 801e178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e17c:	e7a8      	b.n	801e0d0 <_printf_i+0x150>
 801e17e:	6923      	ldr	r3, [r4, #16]
 801e180:	462a      	mov	r2, r5
 801e182:	4649      	mov	r1, r9
 801e184:	4640      	mov	r0, r8
 801e186:	47d0      	blx	sl
 801e188:	3001      	adds	r0, #1
 801e18a:	d0ab      	beq.n	801e0e4 <_printf_i+0x164>
 801e18c:	6823      	ldr	r3, [r4, #0]
 801e18e:	079b      	lsls	r3, r3, #30
 801e190:	d413      	bmi.n	801e1ba <_printf_i+0x23a>
 801e192:	68e0      	ldr	r0, [r4, #12]
 801e194:	9b03      	ldr	r3, [sp, #12]
 801e196:	4298      	cmp	r0, r3
 801e198:	bfb8      	it	lt
 801e19a:	4618      	movlt	r0, r3
 801e19c:	e7a4      	b.n	801e0e8 <_printf_i+0x168>
 801e19e:	2301      	movs	r3, #1
 801e1a0:	4632      	mov	r2, r6
 801e1a2:	4649      	mov	r1, r9
 801e1a4:	4640      	mov	r0, r8
 801e1a6:	47d0      	blx	sl
 801e1a8:	3001      	adds	r0, #1
 801e1aa:	d09b      	beq.n	801e0e4 <_printf_i+0x164>
 801e1ac:	3501      	adds	r5, #1
 801e1ae:	68e3      	ldr	r3, [r4, #12]
 801e1b0:	9903      	ldr	r1, [sp, #12]
 801e1b2:	1a5b      	subs	r3, r3, r1
 801e1b4:	42ab      	cmp	r3, r5
 801e1b6:	dcf2      	bgt.n	801e19e <_printf_i+0x21e>
 801e1b8:	e7eb      	b.n	801e192 <_printf_i+0x212>
 801e1ba:	2500      	movs	r5, #0
 801e1bc:	f104 0619 	add.w	r6, r4, #25
 801e1c0:	e7f5      	b.n	801e1ae <_printf_i+0x22e>
 801e1c2:	bf00      	nop
 801e1c4:	080328a2 	.word	0x080328a2
 801e1c8:	080328b3 	.word	0x080328b3

0801e1cc <__retarget_lock_acquire_recursive>:
 801e1cc:	4770      	bx	lr

0801e1ce <__retarget_lock_release_recursive>:
 801e1ce:	4770      	bx	lr

0801e1d0 <_realloc_r>:
 801e1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1d4:	4680      	mov	r8, r0
 801e1d6:	4614      	mov	r4, r2
 801e1d8:	460e      	mov	r6, r1
 801e1da:	b921      	cbnz	r1, 801e1e6 <_realloc_r+0x16>
 801e1dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e1e0:	4611      	mov	r1, r2
 801e1e2:	f7ff bb73 	b.w	801d8cc <_malloc_r>
 801e1e6:	b92a      	cbnz	r2, 801e1f4 <_realloc_r+0x24>
 801e1e8:	f7ff fb04 	bl	801d7f4 <_free_r>
 801e1ec:	4625      	mov	r5, r4
 801e1ee:	4628      	mov	r0, r5
 801e1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1f4:	f000 f81b 	bl	801e22e <_malloc_usable_size_r>
 801e1f8:	4284      	cmp	r4, r0
 801e1fa:	4607      	mov	r7, r0
 801e1fc:	d802      	bhi.n	801e204 <_realloc_r+0x34>
 801e1fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e202:	d812      	bhi.n	801e22a <_realloc_r+0x5a>
 801e204:	4621      	mov	r1, r4
 801e206:	4640      	mov	r0, r8
 801e208:	f7ff fb60 	bl	801d8cc <_malloc_r>
 801e20c:	4605      	mov	r5, r0
 801e20e:	2800      	cmp	r0, #0
 801e210:	d0ed      	beq.n	801e1ee <_realloc_r+0x1e>
 801e212:	42bc      	cmp	r4, r7
 801e214:	4622      	mov	r2, r4
 801e216:	4631      	mov	r1, r6
 801e218:	bf28      	it	cs
 801e21a:	463a      	movcs	r2, r7
 801e21c:	f7ff faba 	bl	801d794 <memcpy>
 801e220:	4631      	mov	r1, r6
 801e222:	4640      	mov	r0, r8
 801e224:	f7ff fae6 	bl	801d7f4 <_free_r>
 801e228:	e7e1      	b.n	801e1ee <_realloc_r+0x1e>
 801e22a:	4635      	mov	r5, r6
 801e22c:	e7df      	b.n	801e1ee <_realloc_r+0x1e>

0801e22e <_malloc_usable_size_r>:
 801e22e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e232:	1f18      	subs	r0, r3, #4
 801e234:	2b00      	cmp	r3, #0
 801e236:	bfbc      	itt	lt
 801e238:	580b      	ldrlt	r3, [r1, r0]
 801e23a:	18c0      	addlt	r0, r0, r3
 801e23c:	4770      	bx	lr
	...

0801e240 <_init>:
 801e240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e242:	bf00      	nop
 801e244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e246:	bc08      	pop	{r3}
 801e248:	469e      	mov	lr, r3
 801e24a:	4770      	bx	lr

0801e24c <_fini>:
 801e24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e24e:	bf00      	nop
 801e250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e252:	bc08      	pop	{r3}
 801e254:	469e      	mov	lr, r3
 801e256:	4770      	bx	lr
