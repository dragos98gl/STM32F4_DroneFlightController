
flightController_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001467c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  08014810  08014810  00024810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014f5c  08014f5c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08014f5c  08014f5c  00024f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014f64  08014f64  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014f64  08014f64  00024f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014f6c  08014f6c  00024f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08014f70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          0000d744  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d7bc  2000d7bc  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0009354b  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ac86  00000000  00000000  000c35f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a10  00000000  00000000  000ce280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002798  00000000  00000000  000d0c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f114  00000000  00000000  000d3428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033ef2  00000000  00000000  0010253c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001016f7  00000000  00000000  0013642e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00237b25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d648  00000000  00000000  00237b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080147f4 	.word	0x080147f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080147f4 	.word	0x080147f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>:
 */

#include "FlightControllerImplementation.hpp"

LIS3MDLTR& FlightControllorImplementation::getLIS3MDLTRinstance()
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	return this->lis;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	333c      	adds	r3, #60	; 0x3c
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>:

Buzzer& FlightControllorImplementation::getBuzzerinstance()
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	return this->buzz;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3324      	adds	r3, #36	; 0x24
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_ZN30FlightControllorImplementation17getBMP390instanceEv>:

BMP390& FlightControllorImplementation::getBMP390instance()
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	return this->bmp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3398      	adds	r3, #152	; 0x98
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>:

ICM42688P& FlightControllorImplementation::getICM42688Pinstance()
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	return this->icm;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_ZN30FlightControllorImplementation15getHC05instanceEv>:

HC05& FlightControllorImplementation::getHC05instance()
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	return this->bt;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f503 730f 	add.w	r3, r3, #572	; 0x23c
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>:

PMW3901UY& FlightControllorImplementation::getPMW3901UYinstance()
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	return this->pmw;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>:

FrSkyRX& FlightControllorImplementation::getFrSkyRXinstance()
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	return this->remote_rx;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f503 7360 	add.w	r3, r3, #896	; 0x380
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_ZN30FlightControllorImplementation17getMB1043instanceEv>:

MB1043& FlightControllorImplementation::getMB1043instance()
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	return this->sonar;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 6381 	add.w	r3, r3, #1032	; 0x408
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>:

BatteryManagement& FlightControllorImplementation::getBatteryManagementinstance()
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	return this->battMgmt;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 638c 	add.w	r3, r3, #1120	; 0x460
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getFaultsCheckHandlerPtr()
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	return &this->_faultsCheckHandler;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 6391 	add.w	r3, r3, #1160	; 0x488
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getSensorsDataReadHandlerPtr()
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	return &this->_sensorsDataReadHandler;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f203 438c 	addw	r3, r3, #1164	; 0x48c
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>:

TaskHandle_t* FlightControllorImplementation::getDynamicsProcessHandlerPtr()
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	return &this->_dynamicsProcessHandler;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f503 6392 	add.w	r3, r3, #1168	; 0x490
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>:

FaultsStatus FlightControllorImplementation::getCurrentFaultsStatus() const
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	return this->_currentFaultsStatus;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>:

void FlightControllorImplementation::setCurrentFaultsStatus(FaultsStatus faultsStatus)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	this->_currentFaultsStatus = faultsStatus;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>:
	ADC_HandleTypeDef *adc_port;

	uint16_t msToTick(uint16_t ms);
	void toPercentage();
public:
	BatteryManagement(ADC_HandleTypeDef *adc_port,Buzzer *buzz,uint16_t frequency_ms):
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	807b      	strh	r3, [r7, #2]
		adc_port(adc_port),buzz(buzz)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f640 3222 	movw	r2, #2850	; 0xb22
 800102a:	801a      	strh	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001032:	805a      	strh	r2, [r3, #2]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	811a      	strh	r2, [r3, #8]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	61da      	str	r2, [r3, #28]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	621a      	str	r2, [r3, #32]
	{
		frequency_tick = msToTick(frequency_ms);
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	4619      	mov	r1, r3
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f003 f95a 	bl	8004328 <_ZN17BatteryManagement8msToTickEt>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	811a      	strh	r2, [r3, #8]
	}
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <_ZN6BuzzerC1Ev>:
#ifndef LIBS_BUZZER_LIB_BUZZER_HPP_
#define LIBS_BUZZER_LIB_BUZZER_HPP_

#include "stm32f4xx_hal.h"

class Buzzer
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2210      	movs	r2, #16
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <_ZN6BuzzerC1Ev+0x50>)
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	819a      	strh	r2, [r3, #12]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	81da      	strh	r2, [r3, #14]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	821a      	strh	r2, [r3, #16]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	825a      	strh	r2, [r3, #18]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	829a      	strh	r2, [r3, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	759a      	strb	r2, [r3, #22]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40020000 	.word	0x40020000

080010dc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_>:
	TaskHandle_t _faultsCheckHandler = NULL;
	TaskHandle_t _sensorsDataReadHandler = NULL;
	TaskHandle_t _dynamicsProcessHandler = NULL;
public:

	FlightControllorImplementation (
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
	  bt (huart1),
	  pmw (huart2, hdma_usart2_rx, 255U, icm),
	  remote_rx (huart3, hdma_usart3_rx, &buzz, 1),
	  sonar (huart4,hdma_uart4_rx,255U),
	  battMgmt (hadc1,&buzz,1000U),
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a3a      	ldr	r2, [r7, #32]
 800110c:	615a      	str	r2, [r3, #20]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001112:	619a      	str	r2, [r3, #24]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001118:	61da      	str	r2, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800111e:	621a      	str	r2, [r3, #32]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3324      	adds	r3, #36	; 0x24
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ffaf 	bl	8001088 <_ZN6BuzzerC1Ev>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	333c      	adds	r3, #60	; 0x3c
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4618      	mov	r0, r3
 8001132:	f005 f8e1 	bl	80062f8 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3398      	adds	r3, #152	; 0x98
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	f001 ffad 	bl	800309c <_ZN6BMP390C1EP19__SPI_HandleTypeDef>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fa8a 	bl	8005664 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fe30 	bl	8004dbe <_ZN4HC05C1EP20__UART_HandleTypeDef>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
	  pmw (huart2, hdma_usart2_rx, 255U, icm),
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f503 73c4 	add.w	r3, r3, #392	; 0x188
	  _currentFaultsStatus {FaultsStatus::NOT_READY}
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	23ff      	movs	r3, #255	; 0xff
 800116e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001170:	69b9      	ldr	r1, [r7, #24]
 8001172:	f005 fc1b 	bl	80069ac <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688P>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 7060 	add.w	r0, r3, #896	; 0x380
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3324      	adds	r3, #36	; 0x24
 8001180:	2201      	movs	r2, #1
 8001182:	9200      	str	r2, [sp, #0]
 8001184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001186:	69f9      	ldr	r1, [r7, #28]
 8001188:	f003 f9f1 	bl	800456e <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001196:	6a39      	ldr	r1, [r7, #32]
 8001198:	f005 fad8 	bl	800674c <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f503 608c 	add.w	r0, r3, #1120	; 0x460
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80011a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	f7ff ff32 	bl	8001016 <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
	{

	}
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_ZN30FlightControllorImplementation11getInstanceEv>:
		&hdma_usart2_rx,
		&hdma_usart3_rx,
		&hdma_uart4_rx);

FlightControllorImplementation *FlightControllorImplementation::getInstance()
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	return globalflightController;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <_ZN30FlightControllorImplementation11getInstanceEv+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000094 	.word	0x20000094

080011f4 <_Z41__static_initialization_and_destruction_0ii>:
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af06      	add	r7, sp, #24
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d11e      	bne.n	8001242 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120a:	4293      	cmp	r3, r2
 800120c:	d119      	bne.n	8001242 <_Z41__static_initialization_and_destruction_0ii+0x4e>
		&hdma_uart4_rx);
 800120e:	f44f 6093 	mov.w	r0, #1176	; 0x498
 8001212:	f011 f953 	bl	80124bc <_Znwj>
 8001216:	4603      	mov	r3, r0
 8001218:	461c      	mov	r4, r3
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800121c:	9305      	str	r3, [sp, #20]
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001220:	9304      	str	r3, [sp, #16]
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001224:	9303      	str	r3, [sp, #12]
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001236:	490d      	ldr	r1, [pc, #52]	; (800126c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff ff4f 	bl	80010dc <_ZN30FlightControllorImplementationC1EP17ADC_HandleTypeDefP19__SPI_HandleTypeDefP20__UART_HandleTypeDefS5_S5_S5_P19__DMA_HandleTypeDefS7_S7_>
static FlightControllorImplementation *globalflightController = new FlightControllorImplementation(
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001240:	601c      	str	r4, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bd90      	pop	{r4, r7, pc}
 800124a:	bf00      	nop
 800124c:	20000714 	.word	0x20000714
 8001250:	20000834 	.word	0x20000834
 8001254:	200007d4 	.word	0x200007d4
 8001258:	200005c0 	.word	0x200005c0
 800125c:	2000068c 	.word	0x2000068c
 8001260:	20000648 	.word	0x20000648
 8001264:	20000604 	.word	0x20000604
 8001268:	20000418 	.word	0x20000418
 800126c:	200002ec 	.word	0x200002ec
 8001270:	20000094 	.word	0x20000094

08001274 <_GLOBAL__sub_I__ZN30FlightControllorImplementation11getInstanceEv>:
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
 8001278:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff ffb9 	bl	80011f4 <_Z41__static_initialization_and_destruction_0ii>
 8001282:	bd80      	pop	{r7, pc}

08001284 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001294:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <vApplicationGetIdleTaskMemory+0x30>)
 800129a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000098 	.word	0x20000098
 80012b4:	200000ec 	.word	0x200000ec

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <_ZN7Timeout23incrementTimeoutCounterEv>:
	void resetTimeoutCounter()
	{
		timeout_counter=0;
	}

	void incrementTimeoutCounter()
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	{
		timeout_counter++;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	3301      	adds	r3, #1
 800130e:	b2da      	uxtb	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	705a      	strb	r2, [r3, #1]

		if (timeout_counter>timeout_value)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	785a      	ldrb	r2, [r3, #1]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	789b      	ldrb	r3, [r3, #2]
 800131c:	429a      	cmp	r2, r3
 800131e:	d902      	bls.n	8001326 <_ZN7Timeout23incrementTimeoutCounterEv+0x26>
			status = Status::Timeout;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
	}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_Z19DynamicsProcessTaskPv>:
#define SRC_IMPLEMENTATION_TASKS_DYNAMICPROCESSTASK_HPP_

#include "FlightControllerImplementation.hpp"

void DynamicsProcessTask(void *pvParameters)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b08a      	sub	sp, #40	; 0x28
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 800133a:	f7ff ff4f 	bl	80011dc <_ZN30FlightControllorImplementation11getInstanceEv>
 800133e:	6278      	str	r0, [r7, #36]	; 0x24
	float euler_y;
	float euler_z;


	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]

	xLastWakeTime = xTaskGetTickCount();
 8001344:	f00f feda 	bl	80110fc <xTaskGetTickCount>
 8001348:	4603      	mov	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		FaultsStatus currentFaultsStatus = flightControllerInstance->getCurrentFaultsStatus();
 800134c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800134e:	f7ff fe46 	bl	8000fde <_ZNK30FlightControllorImplementation22getCurrentFaultsStatusEv>
 8001352:	61f8      	str	r0, [r7, #28]

		euler_x = flightControllerInstance->getICM42688Pinstance().getEulerX();
 8001354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001356:	f7ff fdcd 	bl	8000ef4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 800135a:	4603      	mov	r3, r0
 800135c:	4618      	mov	r0, r3
 800135e:	f004 ff43 	bl	80061e8 <_ZN9ICM42688P9getEulerXEv>
 8001362:	ed87 0a06 	vstr	s0, [r7, #24]
		euler_y = flightControllerInstance->getICM42688Pinstance().getEulerY();
 8001366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001368:	f7ff fdc4 	bl	8000ef4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	f004 ff4a 	bl	8006208 <_ZN9ICM42688P9getEulerYEv>
 8001374:	ed87 0a05 	vstr	s0, [r7, #20]
		euler_z = flightControllerInstance->getICM42688Pinstance().getEulerZ();
 8001378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800137a:	f7ff fdbb 	bl	8000ef4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 800137e:	4603      	mov	r3, r0
 8001380:	4618      	mov	r0, r3
 8001382:	f004 ff51 	bl	8006228 <_ZN9ICM42688P9getEulerZEv>
 8001386:	ed87 0a04 	vstr	s0, [r7, #16]
		if (currentFaultsStatus == FaultsStatus::FAILURE)
		{

		}

		if (currentFaultsStatus == FaultsStatus::CRITICAL)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d1dd      	bne.n	800134c <_Z19DynamicsProcessTaskPv+0x1a>


		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f00f fd28 	bl	8010dec <vTaskDelayUntil>
	}
 800139c:	e7d6      	b.n	800134c <_Z19DynamicsProcessTaskPv+0x1a>

0800139e <_Z15FaultsCheckTaskPv>:
#define SRC_IMPLEMENTATION_TASKS_FAULTSCHECKTASK_HPP_

#include "FlightControllerImplementation.hpp"

void FaultsCheckTask(void *pvParameters)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 80013a6:	f7ff ff19 	bl	80011dc <_ZN30FlightControllorImplementation11getInstanceEv>
 80013aa:	6178      	str	r0, [r7, #20]

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]

	xLastWakeTime = xTaskGetTickCount();
 80013b0:	f00f fea4 	bl	80110fc <xTaskGetTickCount>
 80013b4:	4603      	mov	r3, r0
 80013b6:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		flightControllerInstance->getPMW3901UYinstance().incrementTimeoutCounter();
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f7ff fdb5 	bl	8000f28 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 80013be:	4603      	mov	r3, r0
 80013c0:	3336      	adds	r3, #54	; 0x36
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff9c 	bl	8001300 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getFrSkyRXinstance().incrementTimeoutCounter();
 80013c8:	6978      	ldr	r0, [r7, #20]
 80013ca:	f7ff fdba 	bl	8000f42 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff95 	bl	8001300 <_ZN7Timeout23incrementTimeoutCounterEv>
		flightControllerInstance->getMB1043instance().incrementTimeoutCounter();
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff fdc0 	bl	8000f5c <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 80013dc:	4603      	mov	r3, r0
 80013de:	3336      	adds	r3, #54	; 0x36
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff8d 	bl	8001300 <_ZN7Timeout23incrementTimeoutCounterEv>

		flightControllerInstance->getBuzzerinstance().run();
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff fd6c 	bl	8000ec4 <_ZN30FlightControllorImplementation17getBuzzerinstanceEv>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 f80f 	bl	8004412 <_ZN6Buzzer3runEv>
		flightControllerInstance->getBatteryManagementinstance().run();
 80013f4:	6978      	ldr	r0, [r7, #20]
 80013f6:	f7ff fdbe 	bl	8000f76 <_ZN30FlightControllorImplementation28getBatteryManagementinstanceEv>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 febb 	bl	8004178 <_ZN17BatteryManagement3runEv>

		if (flightControllerInstance->getFrSkyRXinstance().getCurrentState() == FrSkyRXState::READY)
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff fd9d 	bl	8000f42 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 8001408:	4603      	mov	r3, r0
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fa62 	bl	80048d4 <_ZNK7FrSkyRX15getCurrentStateEv>
 8001410:	4603      	mov	r3, r0
 8001412:	2b03      	cmp	r3, #3
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <_Z15FaultsCheckTaskPv+0x8a>
		{
			flightControllerInstance->setCurrentFaultsStatus(FaultsStatus::OKAY);
 8001420:	2100      	movs	r1, #0
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff fde8 	bl	8000ff8 <_ZN30FlightControllorImplementation22setCurrentFaultsStatusE12FaultsStatus>
		}

		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	2101      	movs	r1, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f00f fcdc 	bl	8010dec <vTaskDelayUntil>
		flightControllerInstance->getPMW3901UYinstance().incrementTimeoutCounter();
 8001434:	e7c0      	b.n	80013b8 <_Z15FaultsCheckTaskPv+0x1a>
	...

08001438 <_Z19sensorsDataReadTaskPv>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;

void sensorsDataReadTask(void *pvParameters)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af02      	add	r7, sp, #8
 800143e:	6078      	str	r0, [r7, #4]
	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8001440:	f7ff fecc 	bl	80011dc <_ZN30FlightControllorImplementation11getInstanceEv>
 8001444:	6178      	str	r0, [r7, #20]

	HAL_TIM_Base_Start_IT(&htim4);
 8001446:	487b      	ldr	r0, [pc, #492]	; (8001634 <_Z19sensorsDataReadTaskPv+0x1fc>)
 8001448:	f00a fa00 	bl	800b84c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	2008      	movs	r0, #8
 8001452:	f006 fb09 	bl	8007a68 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001456:	2008      	movs	r0, #8
 8001458:	f006 fb22 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2105      	movs	r1, #5
 8001460:	200a      	movs	r0, #10
 8001462:	f006 fb01 	bl	8007a68 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001466:	200a      	movs	r0, #10
 8001468:	f006 fb1a 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2105      	movs	r1, #5
 8001470:	2017      	movs	r0, #23
 8001472:	f006 faf9 	bl	8007a68 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001476:	2017      	movs	r0, #23
 8001478:	f006 fb12 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
	NVIC_SetPriorityGrouping(0);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ff1b 	bl	80012b8 <__NVIC_SetPriorityGrouping>

	bool startup;
	if(!flightControllerInstance->getLIS3MDLTRinstance().defaultInit())
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff fd12 	bl	8000eac <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 8001488:	4603      	mov	r3, r0
 800148a:	4618      	mov	r0, r3
 800148c:	f005 f89a 	bl	80065c4 <_ZN9LIS3MDLTR11defaultInitEv>
 8001490:	4603      	mov	r3, r0
 8001492:	f083 0301 	eor.w	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <_Z19sensorsDataReadTaskPv+0x68>
	  startup = false;
 800149c:	2300      	movs	r3, #0
 800149e:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getLIS3MDLTRinstance().update();
 80014a0:	6978      	ldr	r0, [r7, #20]
 80014a2:	f7ff fd03 	bl	8000eac <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 ff55 	bl	8006358 <_ZN9LIS3MDLTR6updateEv>

	if (!flightControllerInstance->getICM42688Pinstance().defaultInit())
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff fd20 	bl	8000ef4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f004 f98a 	bl	80057d0 <_ZN9ICM42688P11defaultInitEv>
 80014bc:	4603      	mov	r3, r0
 80014be:	f083 0301 	eor.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <_Z19sensorsDataReadTaskPv+0x94>
	  startup = false;
 80014c8:	2300      	movs	r3, #0
 80014ca:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getICM42688Pinstance().update();
 80014cc:	6978      	ldr	r0, [r7, #20]
 80014ce:	f7ff fd11 	bl	8000ef4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fbd5 	bl	8005c84 <_ZN9ICM42688P6updateEv>

	if (!flightControllerInstance->getBMP390instance().defaultInit())
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff fcfe 	bl	8000edc <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fe2a 	bl	800313c <_ZN6BMP39011defaultInitEv>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f083 0301 	eor.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <_Z19sensorsDataReadTaskPv+0xc0>
	  startup = false;
 80014f4:	2300      	movs	r3, #0
 80014f6:	74fb      	strb	r3, [r7, #19]
	flightControllerInstance->getBMP390instance().update();
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	f7ff fcef 	bl	8000edc <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80014fe:	4603      	mov	r3, r0
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fed6 	bl	80032b2 <_ZN6BMP3906updateEv>

	flightControllerInstance->getFrSkyRXinstance().begin();
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff fd1b 	bl	8000f42 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 800150c:	4603      	mov	r3, r0
 800150e:	4618      	mov	r0, r3
 8001510:	f003 f85e 	bl	80045d0 <_ZN7FrSkyRX5beginEv>
	flightControllerInstance->getMB1043instance().begin();
 8001514:	6978      	ldr	r0, [r7, #20]
 8001516:	f7ff fd21 	bl	8000f5c <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 800151a:	4603      	mov	r3, r0
 800151c:	4618      	mov	r0, r3
 800151e:	f005 f949 	bl	80067b4 <_ZN6MB10435beginEv>
	flightControllerInstance->getPMW3901UYinstance().begin();
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff fd00 	bl	8000f28 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 8001528:	4603      	mov	r3, r0
 800152a:	4618      	mov	r0, r3
 800152c:	f005 fa80 	bl	8006a30 <_ZN9PMW3901UY5beginEv>

	uint32_t currentSensor = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
	xTaskCreate(DynamicsProcessTask,"DynamicsProcessTask",256,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getDynamicsProcessHandlerPtr());
 8001534:	6978      	ldr	r0, [r7, #20]
 8001536:	f7ff fd45 	bl	8000fc4 <_ZN30FlightControllorImplementation28getDynamicsProcessHandlerPtrEv>
 800153a:	4603      	mov	r3, r0
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	2302      	movs	r3, #2
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2300      	movs	r3, #0
 8001544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001548:	493b      	ldr	r1, [pc, #236]	; (8001638 <_Z19sensorsDataReadTaskPv+0x200>)
 800154a:	483c      	ldr	r0, [pc, #240]	; (800163c <_Z19sensorsDataReadTaskPv+0x204>)
 800154c:	f00f fb18 	bl	8010b80 <xTaskCreate>
	xTaskCreate(FaultsCheckTask,"FaultsCheckTask",256,NULL,tskIDLE_PRIORITY+2, flightControllerInstance->getFaultsCheckHandlerPtr());
 8001550:	6978      	ldr	r0, [r7, #20]
 8001552:	f7ff fd1d 	bl	8000f90 <_ZN30FlightControllorImplementation24getFaultsCheckHandlerPtrEv>
 8001556:	4603      	mov	r3, r0
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	2302      	movs	r3, #2
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001564:	4936      	ldr	r1, [pc, #216]	; (8001640 <_Z19sensorsDataReadTaskPv+0x208>)
 8001566:	4837      	ldr	r0, [pc, #220]	; (8001644 <_Z19sensorsDataReadTaskPv+0x20c>)
 8001568:	f00f fb0a 	bl	8010b80 <xTaskCreate>

	while (1)
	{
		if (xTaskNotifyWait(0x00, 0xFFFFFFFFUL, &currentSensor, portMAX_DELAY) == pdTRUE)
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	2000      	movs	r0, #0
 800157a:	f00f ffb9 	bl	80114f0 <xTaskNotifyWait>
 800157e:	4603      	mov	r3, r0
 8001580:	2b01      	cmp	r3, #1
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ee      	beq.n	800156c <_Z19sensorsDataReadTaskPv+0x134>
		{
			if (currentSensor & EnumSensorsInterrupt::ICM42688P_t)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <_Z19sensorsDataReadTaskPv+0x16e>
			{
				flightControllerInstance->getICM42688Pinstance().update();
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f7ff fcab 	bl	8000ef4 <_ZN30FlightControllorImplementation20getICM42688PinstanceEv>
 800159e:	4603      	mov	r3, r0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 fb6f 	bl	8005c84 <_ZN9ICM42688P6updateEv>
				if (testt==duplicates)
					duplicatesCounter++;
				duplicates = testt;*/
			}

			if (currentSensor & EnumSensorsInterrupt::BMP390_t)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <_Z19sensorsDataReadTaskPv+0x186>
			{
				flightControllerInstance->getBMP390instance().update();
 80015b0:	6978      	ldr	r0, [r7, #20]
 80015b2:	f7ff fc93 	bl	8000edc <_ZN30FlightControllorImplementation17getBMP390instanceEv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 fe7a 	bl	80032b2 <_ZN6BMP3906updateEv>
				//bmpCounter++;
			}

			if (currentSensor & EnumSensorsInterrupt::LIS3MDLTR_t)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <_Z19sensorsDataReadTaskPv+0x19e>
			{
				flightControllerInstance->getLIS3MDLTRinstance().update();
 80015c8:	6978      	ldr	r0, [r7, #20]
 80015ca:	f7ff fc6f 	bl	8000eac <_ZN30FlightControllorImplementation20getLIS3MDLTRinstanceEv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fec1 	bl	8006358 <_ZN9LIS3MDLTR6updateEv>
				//lisCounter++;
			}

			if (currentSensor & EnumSensorsInterrupt::PMW_t)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <_Z19sensorsDataReadTaskPv+0x1bc>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart2);
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <_Z19sensorsDataReadTaskPv+0x210>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
				flightControllerInstance->getPMW3901UYinstance().update();
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff fc9e 	bl	8000f28 <_ZN30FlightControllorImplementation20getPMW3901UYinstanceEv>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f005 fa2e 	bl	8006a50 <_ZN9PMW3901UY6updateEv>
				//pmwCounter++;
			}

			if (currentSensor & EnumSensorsInterrupt::REMOTERX_t)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <_Z19sensorsDataReadTaskPv+0x1da>
			{
				__HAL_UART_FLUSH_DRREGISTER(&huart3);
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <_Z19sensorsDataReadTaskPv+0x214>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
				flightControllerInstance->getFrSkyRXinstance().update();
 8001604:	6978      	ldr	r0, [r7, #20]
 8001606:	f7ff fc9c 	bl	8000f42 <_ZN30FlightControllorImplementation18getFrSkyRXinstanceEv>
 800160a:	4603      	mov	r3, r0
 800160c:	4618      	mov	r0, r3
 800160e:	f002 ffef 	bl	80045f0 <_ZN7FrSkyRX6updateEv>
				//remoteCounter++;
			}

			if (currentSensor & EnumSensorsInterrupt::SONAR_t)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0a7      	beq.n	800156c <_Z19sensorsDataReadTaskPv+0x134>
			{
			   __HAL_UART_FLUSH_DRREGISTER(&huart4);
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <_Z19sensorsDataReadTaskPv+0x218>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
			   flightControllerInstance->getMB1043instance().update();
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff fc9a 	bl	8000f5c <_ZN30FlightControllorImplementation17getMB1043instanceEv>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	f005 f8d2 	bl	80067d4 <_ZN6MB10436updateEv>
		if (xTaskNotifyWait(0x00, 0xFFFFFFFFUL, &currentSensor, portMAX_DELAY) == pdTRUE)
 8001630:	e79c      	b.n	800156c <_Z19sensorsDataReadTaskPv+0x134>
 8001632:	bf00      	nop
 8001634:	20000578 	.word	0x20000578
 8001638:	08014810 	.word	0x08014810
 800163c:	08001333 	.word	0x08001333
 8001640:	08014824 	.word	0x08014824
 8001644:	0800139f 	.word	0x0800139f
 8001648:	20000648 	.word	0x20000648
 800164c:	2000068c 	.word	0x2000068c
 8001650:	200005c0 	.word	0x200005c0

08001654 <HAL_UART_TxCpltCallback>:

#include "stm32f4xx_hal.h"
#include "FlightControllerImplementation.hpp"

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    {
    	//tick1++;

    	//flightController->getHC05instance().printfSensorsValues();
    }
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_TIM_PeriodElapsedCallback>:

int timCounter2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800167a:	f005 fce7 	bl	800704c <HAL_IncTick>

  if (htim->Instance == TIM4)
  {
	  //timCounter2++;
  }
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40010000 	.word	0x40010000

0800168c <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af02      	add	r7, sp, #8
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
	TaskHandle_t* sensorsDataReadHandler = FlightControllorImplementation::getInstance()->getSensorsDataReadHandlerPtr();
 800169a:	f7ff fd9f 	bl	80011dc <_ZN30FlightControllorImplementation11getInstanceEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fc82 	bl	8000faa <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 80016a6:	60f8      	str	r0, [r7, #12]

	switch (GPIO_Pin)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ae:	d01c      	beq.n	80016ea <HAL_GPIO_EXTI_Callback+0x5e>
 80016b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b4:	dc4d      	bgt.n	8001752 <HAL_GPIO_EXTI_Callback+0xc6>
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d030      	beq.n	800171c <HAL_GPIO_EXTI_Callback+0x90>
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d149      	bne.n	8001752 <HAL_GPIO_EXTI_Callback+0xc6>
	{
	case (GPIO_PIN_4):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::ICM42688P_t, eSetBits, &pxHigherPriorityTaskWoken);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	2201      	movs	r2, #1
 80016cc:	2101      	movs	r1, #1
 80016ce:	f00f ff69 	bl	80115a4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d037      	beq.n	8001748 <HAL_GPIO_EXTI_Callback+0xbc>
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_GPIO_EXTI_Callback+0xd0>)
 80016da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	f3bf 8f4f 	dsb	sy
 80016e4:	f3bf 8f6f 	isb	sy
		//icmCounter1++;
		break;
 80016e8:	e02e      	b.n	8001748 <HAL_GPIO_EXTI_Callback+0xbc>

	case (GPIO_PIN_8):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::BMP390_t, eSetBits, &pxHigherPriorityTaskWoken);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	2201      	movs	r2, #1
 80016f8:	2102      	movs	r1, #2
 80016fa:	f00f ff53 	bl	80115a4 <xTaskGenericNotifyFromISR>
		if (pxHigherPriorityTaskWoken)
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d023      	beq.n	800174c <HAL_GPIO_EXTI_Callback+0xc0>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d020      	beq.n	800174c <HAL_GPIO_EXTI_Callback+0xc0>
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_GPIO_EXTI_Callback+0xd0>)
 800170c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	f3bf 8f4f 	dsb	sy
 8001716:	f3bf 8f6f 	isb	sy
		//bmpCounter1++;
		break;
 800171a:	e017      	b.n	800174c <HAL_GPIO_EXTI_Callback+0xc0>

	case (GPIO_PIN_2):
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::LIS3MDLTR_t, eSetBits, &pxHigherPriorityTaskWoken);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	2201      	movs	r2, #1
 800172a:	2104      	movs	r1, #4
 800172c:	f00f ff3a 	bl	80115a4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00c      	beq.n	8001750 <HAL_GPIO_EXTI_Callback+0xc4>
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f3bf 8f4f 	dsb	sy
 8001742:	f3bf 8f6f 	isb	sy
		//lisCounter1++;
		break;
 8001746:	e003      	b.n	8001750 <HAL_GPIO_EXTI_Callback+0xc4>
		break;
 8001748:	bf00      	nop
 800174a:	e002      	b.n	8001752 <HAL_GPIO_EXTI_Callback+0xc6>
		break;
 800174c:	bf00      	nop
 800174e:	e000      	b.n	8001752 <HAL_GPIO_EXTI_Callback+0xc6>
		break;
 8001750:	bf00      	nop
	}
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000ed04 	.word	0xe000ed04

08001760 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af02      	add	r7, sp, #8
 8001766:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
	TaskHandle_t* sensorsDataReadHandler = FlightControllorImplementation::getInstance()->getSensorsDataReadHandlerPtr();
 800176c:	f7ff fd36 	bl	80011dc <_ZN30FlightControllorImplementation11getInstanceEv>
 8001770:	4603      	mov	r3, r0
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fc19 	bl	8000faa <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 8001778:	60f8      	str	r0, [r7, #12]

	if (huart->Instance == USART2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a29      	ldr	r2, [pc, #164]	; (8001824 <HAL_UART_RxCpltCallback+0xc4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d115      	bne.n	80017b0 <HAL_UART_RxCpltCallback+0x50>
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::PMW_t, eSetBits, &pxHigherPriorityTaskWoken);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	2201      	movs	r2, #1
 8001792:	2108      	movs	r1, #8
 8001794:	f00f ff06 	bl	80115a4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d03d      	beq.n	800181a <HAL_UART_RxCpltCallback+0xba>
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_UART_RxCpltCallback+0xc8>)
 80017a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	f3bf 8f4f 	dsb	sy
 80017aa:	f3bf 8f6f 	isb	sy
	{
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
		//sonarCounter1++;
	}
}
 80017ae:	e034      	b.n	800181a <HAL_UART_RxCpltCallback+0xba>
	} else if (huart->Instance == USART3)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_UART_RxCpltCallback+0xcc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d115      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x86>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::REMOTERX_t, eSetBits, &pxHigherPriorityTaskWoken);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2300      	movs	r3, #0
 80017c6:	2201      	movs	r2, #1
 80017c8:	2110      	movs	r1, #16
 80017ca:	f00f feeb 	bl	80115a4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d022      	beq.n	800181a <HAL_UART_RxCpltCallback+0xba>
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_UART_RxCpltCallback+0xc8>)
 80017d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f3bf 8f4f 	dsb	sy
 80017e0:	f3bf 8f6f 	isb	sy
}
 80017e4:	e019      	b.n	800181a <HAL_UART_RxCpltCallback+0xba>
	} else if (huart->Instance == UART4)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_UART_RxCpltCallback+0xd0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d114      	bne.n	800181a <HAL_UART_RxCpltCallback+0xba>
		xTaskNotifyFromISR(*sensorsDataReadHandler, EnumSensorsInterrupt::SONAR_t, eSetBits, &pxHigherPriorityTaskWoken);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2300      	movs	r3, #0
 80017fc:	2201      	movs	r2, #1
 80017fe:	2120      	movs	r1, #32
 8001800:	f00f fed0 	bl	80115a4 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <HAL_UART_RxCpltCallback+0xba>
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_UART_RxCpltCallback+0xc8>)
 800180c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f3bf 8f4f 	dsb	sy
 8001816:	f3bf 8f6f 	isb	sy
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40004400 	.word	0x40004400
 8001828:	e000ed04 	.word	0xe000ed04
 800182c:	40004800 	.word	0x40004800
 8001830:	40004c00 	.word	0x40004c00

08001834 <main>:
		0,
		0);*/


int main(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af02      	add	r7, sp, #8
  HAL_Init();
 800183a:	f005 fbe5 	bl	8007008 <HAL_Init>
  SystemClock_Config();
 800183e:	f000 f85f 	bl	8001900 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 8001842:	f000 fc0f 	bl	8002064 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001846:	f000 fba7 	bl	8001f98 <_ZL11MX_DMA_Initv>
  MX_SPI2_Init();
 800184a:	f000 f963 	bl	8001b14 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 800184e:	f000 fae7 	bl	8001e20 <_ZL19MX_USART1_UART_Initv>
  MX_SDIO_SD_Init();
 8001852:	f000 f925 	bl	8001aa0 <_ZL15MX_SDIO_SD_Initv>
  MX_USART3_UART_Init();
 8001856:	f000 fb3f 	bl	8001ed8 <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 800185a:	f000 f8c5 	bl	80019e8 <_ZL12MX_ADC1_Initv>
  MX_UART4_Init();
 800185e:	f000 fab1 	bl	8001dc4 <_ZL13MX_UART4_Initv>
  MX_USART2_UART_Init();
 8001862:	f000 fb0b 	bl	8001e7c <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 8001866:	f000 fb69 	bl	8001f3c <_ZL19MX_USART6_UART_Initv>
  MX_TIM4_Init();
 800186a:	f000 fa4f 	bl	8001d0c <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 800186e:	f000 f98d 	bl	8001b8c <_ZL12MX_TIM3_Initv>

	FlightControllorImplementation *flightControllerInstance = FlightControllorImplementation::getInstance();
 8001872:	f7ff fcb3 	bl	80011dc <_ZN30FlightControllorImplementation11getInstanceEv>
 8001876:	6078      	str	r0, [r7, #4]
  //flightController->getHC05instance().addSensor(&lis);
  //flightController->getHC05instance().addSensor(&sonar);
  //flightController->getHC05instance().addSensor(&pmw);
  //flightController->getHC05instance().addSensor(&icm);

	flightControllerInstance->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fb48 	bl	8000f0e <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800187e:	4603      	mov	r3, r0
 8001880:	210f      	movs	r1, #15
 8001882:	4618      	mov	r0, r3
 8001884:	f003 fb1c 	bl	8004ec0 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  //flightController->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GY);
  //flightController->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GZ);
  //flightController->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AX);
  //flightController->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AY);
  //flightController->getHC05instance().addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AZ);
  flightControllerInstance->getHC05instance().printfSensorsValues();
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fb40 	bl	8000f0e <_ZN30FlightControllorImplementation15getHC05instanceEv>
 800188e:	4603      	mov	r3, r0
 8001890:	4618      	mov	r0, r3
 8001892:	f003 facb 	bl	8004e2c <_ZN4HC0519printfSensorsValuesEv>

  TIM3 -> CCR1 = 0;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <main+0xbc>)
 8001898:	2200      	movs	r2, #0
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3 -> CCR2 = 0;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <main+0xbc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3 -> CCR3 = 0;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <main+0xbc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3 -> CCR4 = 0;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <main+0xbc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80018ae:	2100      	movs	r1, #0
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <main+0xc0>)
 80018b2:	f00a f895 	bl	800b9e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80018b6:	2104      	movs	r1, #4
 80018b8:	480e      	ldr	r0, [pc, #56]	; (80018f4 <main+0xc0>)
 80018ba:	f00a f891 	bl	800b9e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80018be:	2108      	movs	r1, #8
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <main+0xc0>)
 80018c2:	f00a f88d 	bl	800b9e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80018c6:	210c      	movs	r1, #12
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <main+0xc0>)
 80018ca:	f00a f889 	bl	800b9e0 <HAL_TIM_PWM_Start>

  xTaskCreate(sensorsDataReadTask,"SensorsDataReadTask",1024,NULL,tskIDLE_PRIORITY+3, flightControllerInstance->getSensorsDataReadHandlerPtr());
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fb6b 	bl	8000faa <_ZN30FlightControllorImplementation28getSensorsDataReadHandlerPtrEv>
 80018d4:	4603      	mov	r3, r0
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	2303      	movs	r3, #3
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e2:	4905      	ldr	r1, [pc, #20]	; (80018f8 <main+0xc4>)
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <main+0xc8>)
 80018e6:	f00f f94b 	bl	8010b80 <xTaskCreate>
  vTaskStartScheduler();
 80018ea:	f00f fafd 	bl	8010ee8 <vTaskStartScheduler>

  while (1)
 80018ee:	e7fe      	b.n	80018ee <main+0xba>
 80018f0:	40000400 	.word	0x40000400
 80018f4:	20000530 	.word	0x20000530
 80018f8:	08014834 	.word	0x08014834
 80018fc:	08001439 	.word	0x08001439

08001900 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b094      	sub	sp, #80	; 0x50
 8001904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	2230      	movs	r2, #48	; 0x30
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f012 fd8a 	bl	8014428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <_Z18SystemClock_Configv+0xe0>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <_Z18SystemClock_Configv+0xe0>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001932:	6413      	str	r3, [r2, #64]	; 0x40
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <_Z18SystemClock_Configv+0xe0>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <_Z18SystemClock_Configv+0xe4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <_Z18SystemClock_Configv+0xe4>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <_Z18SystemClock_Configv+0xe4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800195c:	2301      	movs	r3, #1
 800195e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001966:	2302      	movs	r3, #2
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800196a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001970:	2308      	movs	r3, #8
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001974:	2390      	movs	r3, #144	; 0x90
 8001976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001978:	2302      	movs	r3, #2
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800197c:	2306      	movs	r3, #6
 800197e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4618      	mov	r0, r3
 8001986:	f007 fedd 	bl	8009744 <HAL_RCC_OscConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800199a:	f000 fc23 	bl	80021e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199e:	230f      	movs	r3, #15
 80019a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2104      	movs	r1, #4
 80019bc:	4618      	mov	r0, r3
 80019be:	f008 f939 	bl	8009c34 <HAL_RCC_ClockConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80019d2:	f000 fc07 	bl	80021e4 <Error_Handler>
  }
}
 80019d6:	bf00      	nop
 80019d8:	3750      	adds	r7, #80	; 0x50
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000

080019e8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <_ZL12MX_ADC1_Initv+0xb0>)
 80019fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <_ZL12MX_ADC1_Initv+0xb4>)
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a48:	f005 fb44 	bl	80070d4 <HAL_ADC_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001a5c:	f000 fbc2 	bl	80021e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a60:	230a      	movs	r3, #10
 8001a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4808      	ldr	r0, [pc, #32]	; (8001a94 <_ZL12MX_ADC1_Initv+0xac>)
 8001a72:	f005 fca1 	bl	80073b8 <HAL_ADC_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf14      	ite	ne
 8001a7c:	2301      	movne	r3, #1
 8001a7e:	2300      	moveq	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001a86:	f000 fbad 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002ec 	.word	0x200002ec
 8001a98:	40012000 	.word	0x40012000
 8001a9c:	0f000001 	.word	0x0f000001

08001aa0 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <_ZL15MX_SDIO_SD_Initv+0x70>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001aca:	2208      	movs	r2, #8
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001ace:	480f      	ldr	r0, [pc, #60]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001ad0:	f008 fb00 	bl	800a0d4 <HAL_SD_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 8001ae4:	f000 fb7e 	bl	80021e4 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001aee:	f008 fd45 	bl	800a57c <HAL_SD_ConfigWideBusOperation>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 8001b02:	f000 fb6f 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000394 	.word	0x20000394
 8001b10:	40012c00 	.word	0x40012c00

08001b14 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <_ZL12MX_SPI2_Initv+0x74>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b60:	220a      	movs	r2, #10
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b64:	4807      	ldr	r0, [pc, #28]	; (8001b84 <_ZL12MX_SPI2_Initv+0x70>)
 8001b66:	f009 f868 	bl	800ac3a <HAL_SPI_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8001b7a:	f000 fb33 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000418 	.word	0x20000418
 8001b88:	40003800 	.word	0x40003800

08001b8c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	; 0x38
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bbc:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bbe:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <_ZL12MX_TIM3_Initv+0x17c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8001bc2:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 8001bce:	4b4d      	ldr	r3, [pc, #308]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bd0:	f241 726f 	movw	r2, #5999	; 0x176f
 8001bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd6:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bdc:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be2:	4848      	ldr	r0, [pc, #288]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001be4:	f009 fde2 	bl	800b7ac <HAL_TIM_Base_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001bf8:	f000 faf4 	bl	80021e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c06:	4619      	mov	r1, r3
 8001c08:	483e      	ldr	r0, [pc, #248]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c0a:	f00a f97b 	bl	800bf04 <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001c1e:	f000 fae1 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c22:	4838      	ldr	r0, [pc, #224]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c24:	f009 fe82 	bl	800b92c <HAL_TIM_PWM_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001c38:	f000 fad4 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	4619      	mov	r1, r3
 8001c4a:	482e      	ldr	r0, [pc, #184]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c4c:	f00a fd5a 	bl	800c704 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001c60:	f000 fac0 	bl	80021e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c64:	2360      	movs	r3, #96	; 0x60
 8001c66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4822      	ldr	r0, [pc, #136]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c7c:	f00a f880 	bl	800bd80 <HAL_TIM_PWM_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf14      	ite	ne
 8001c86:	2301      	movne	r3, #1
 8001c88:	2300      	moveq	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001c90:	f000 faa8 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2204      	movs	r2, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	481a      	ldr	r0, [pc, #104]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001c9c:	f00a f870 	bl	800bd80 <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8001cb0:	f000 fa98 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001cbc:	f00a f860 	bl	800bd80 <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf14      	ite	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	2300      	moveq	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 8001cd0:	f000 fa88 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480a      	ldr	r0, [pc, #40]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001cdc:	f00a f850 	bl	800bd80 <HAL_TIM_PWM_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf14      	ite	ne
 8001ce6:	2301      	movne	r3, #1
 8001ce8:	2300      	moveq	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 8001cf0:	f000 fa78 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf4:	4803      	ldr	r0, [pc, #12]	; (8001d04 <_ZL12MX_TIM3_Initv+0x178>)
 8001cf6:	f000 fc6f 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 8001cfa:	bf00      	nop
 8001cfc:	3738      	adds	r7, #56	; 0x38
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000530 	.word	0x20000530
 8001d08:	40000400 	.word	0x40000400

08001d0c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	463b      	mov	r3, r7
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d2a:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d30:	228f      	movs	r2, #143	; 0x8f
 8001d32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d3c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001d40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d4e:	481b      	ldr	r0, [pc, #108]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d50:	f009 fd2c 	bl	800b7ac <HAL_TIM_Base_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001d64:	f000 fa3e 	bl	80021e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	4619      	mov	r1, r3
 8001d74:	4811      	ldr	r0, [pc, #68]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d76:	f00a f8c5 	bl	800bf04 <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001d8a:	f000 fa2b 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4808      	ldr	r0, [pc, #32]	; (8001dbc <_ZL12MX_TIM4_Initv+0xb0>)
 8001d9c:	f00a fcb2 	bl	800c704 <HAL_TIMEx_MasterConfigSynchronization>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001db0:	f000 fa18 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000578 	.word	0x20000578
 8001dc0:	40000800 	.word	0x40000800

08001dc4 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_ZL13MX_UART4_Initv+0x58>)
 8001dcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dea:	220c      	movs	r2, #12
 8001dec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dfa:	4807      	ldr	r0, [pc, #28]	; (8001e18 <_ZL13MX_UART4_Initv+0x54>)
 8001dfc:	f00a fd12 	bl	800c824 <HAL_UART_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bf14      	ite	ne
 8001e06:	2301      	movne	r3, #1
 8001e08:	2300      	moveq	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8001e10:	f000 f9e8 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200005c0 	.word	0x200005c0
 8001e1c:	40004c00 	.word	0x40004c00

08001e20 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e26:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001e58:	f00a fce4 	bl	800c824 <HAL_UART_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bf14      	ite	ne
 8001e62:	2301      	movne	r3, #1
 8001e64:	2300      	moveq	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001e6c:	f000 f9ba 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000604 	.word	0x20000604
 8001e78:	40011000 	.word	0x40011000

08001e7c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e88:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb2:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001eb4:	f00a fcb6 	bl	800c824 <HAL_UART_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001ec8:	f000 f98c 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000648 	.word	0x20000648
 8001ed4:	40004400 	.word	0x40004400

08001ed8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ede:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001ee6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001f00:	220c      	movs	r2, #12
 8001f02:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f10:	4807      	ldr	r0, [pc, #28]	; (8001f30 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001f12:	f00a fc87 	bl	800c824 <HAL_UART_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <_ZL19MX_USART3_UART_Initv+0x52>
  {
    Error_Handler();
 8001f26:	f000 f95d 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000068c 	.word	0x2000068c
 8001f34:	40004800 	.word	0x40004800
 8001f38:	000186a0 	.word	0x000186a0

08001f3c <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f42:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001f74:	f00a fc56 	bl	800c824 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001f88:	f000 f92c 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200006d0 	.word	0x200006d0
 8001f94:	40011400 	.word	0x40011400

08001f98 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a2e      	ldr	r2, [pc, #184]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a27      	ldr	r2, [pc, #156]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <_ZL11MX_DMA_Initv+0xc8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	200c      	movs	r0, #12
 8001fdc:	f005 fd44 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fe0:	200c      	movs	r0, #12
 8001fe2:	f005 fd5d 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2105      	movs	r1, #5
 8001fea:	200d      	movs	r0, #13
 8001fec:	f005 fd3c 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ff0:	200d      	movs	r0, #13
 8001ff2:	f005 fd55 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	200e      	movs	r0, #14
 8001ffc:	f005 fd34 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002000:	200e      	movs	r0, #14
 8002002:	f005 fd4d 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2105      	movs	r1, #5
 800200a:	200f      	movs	r0, #15
 800200c:	f005 fd2c 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002010:	200f      	movs	r0, #15
 8002012:	f005 fd45 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2105      	movs	r1, #5
 800201a:	2010      	movs	r0, #16
 800201c:	f005 fd24 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002020:	2010      	movs	r0, #16
 8002022:	f005 fd3d 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2105      	movs	r1, #5
 800202a:	2038      	movs	r0, #56	; 0x38
 800202c:	f005 fd1c 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002030:	2038      	movs	r0, #56	; 0x38
 8002032:	f005 fd35 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2105      	movs	r1, #5
 800203a:	2039      	movs	r0, #57	; 0x39
 800203c:	f005 fd14 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002040:	2039      	movs	r0, #57	; 0x39
 8002042:	f005 fd2d 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2105      	movs	r1, #5
 800204a:	2046      	movs	r0, #70	; 0x46
 800204c:	f005 fd0c 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002050:	2046      	movs	r0, #70	; 0x46
 8002052:	f005 fd25 	bl	8007aa0 <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 8002084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a4d      	ldr	r2, [pc, #308]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a46      	ldr	r2, [pc, #280]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a3f      	ldr	r2, [pc, #252]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <_ZL12MX_GPIO_Initv+0x170>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2130      	movs	r1, #48	; 0x30
 800210a:	4833      	ldr	r0, [pc, #204]	; (80021d8 <_ZL12MX_GPIO_Initv+0x174>)
 800210c:	f006 fa74 	bl	80085f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	2120      	movs	r1, #32
 8002114:	4831      	ldr	r0, [pc, #196]	; (80021dc <_ZL12MX_GPIO_Initv+0x178>)
 8002116:	f006 fa6f 	bl	80085f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002120:	482f      	ldr	r0, [pc, #188]	; (80021e0 <_ZL12MX_GPIO_Initv+0x17c>)
 8002122:	f006 fa69 	bl	80085f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002126:	2330      	movs	r3, #48	; 0x30
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4826      	ldr	r0, [pc, #152]	; (80021d8 <_ZL12MX_GPIO_Initv+0x174>)
 800213e:	f006 f8bf 	bl	80082c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002142:	2310      	movs	r3, #16
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002146:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4821      	ldr	r0, [pc, #132]	; (80021dc <_ZL12MX_GPIO_Initv+0x178>)
 8002158:	f006 f8b2 	bl	80082c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800215c:	2320      	movs	r3, #32
 800215e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	481a      	ldr	r0, [pc, #104]	; (80021dc <_ZL12MX_GPIO_Initv+0x178>)
 8002174:	f006 f8a4 	bl	80082c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002178:	2304      	movs	r3, #4
 800217a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	4814      	ldr	r0, [pc, #80]	; (80021e0 <_ZL12MX_GPIO_Initv+0x17c>)
 800218e:	f006 f897 	bl	80082c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002198:	2301      	movs	r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	480d      	ldr	r0, [pc, #52]	; (80021e0 <_ZL12MX_GPIO_Initv+0x17c>)
 80021ac:	f006 f888 	bl	80082c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	4804      	ldr	r0, [pc, #16]	; (80021d8 <_ZL12MX_GPIO_Initv+0x174>)
 80021c8:	f006 f87a 	bl	80082c0 <HAL_GPIO_Init>
}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020800 	.word	0x40020800
 80021e0:	40020400 	.word	0x40020400

080021e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e8:	b672      	cpsid	i
}
 80021ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ec:	e7fe      	b.n	80021ec <Error_Handler+0x8>
	...

080021f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_MspInit+0x54>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_MspInit+0x54>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_MspInit+0x54>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_MspInit+0x54>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_MspInit+0x54>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_MspInit+0x54>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	210f      	movs	r1, #15
 8002232:	f06f 0001 	mvn.w	r0, #1
 8002236:	f005 fc17 	bl	8007a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2e      	ldr	r2, [pc, #184]	; (8002320 <HAL_ADC_MspInit+0xd8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d156      	bne.n	8002318 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_ADC_MspInit+0xdc>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a2c      	ldr	r2, [pc, #176]	; (8002324 <HAL_ADC_MspInit+0xdc>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_ADC_MspInit+0xdc>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_ADC_MspInit+0xdc>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a25      	ldr	r2, [pc, #148]	; (8002324 <HAL_ADC_MspInit+0xdc>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_ADC_MspInit+0xdc>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022a2:	2301      	movs	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022a6:	2303      	movs	r3, #3
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	481c      	ldr	r0, [pc, #112]	; (8002328 <HAL_ADC_MspInit+0xe0>)
 80022b6:	f006 f803 	bl	80082c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <HAL_ADC_MspInit+0xe8>)
 80022be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022fc:	480b      	ldr	r0, [pc, #44]	; (800232c <HAL_ADC_MspInit+0xe4>)
 80022fe:	f005 fbdd 	bl	8007abc <HAL_DMA_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002308:	f7ff ff6c 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_ADC_MspInit+0xe4>)
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
 8002312:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_ADC_MspInit+0xe4>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40012000 	.word	0x40012000
 8002324:	40023800 	.word	0x40023800
 8002328:	40020800 	.word	0x40020800
 800232c:	20000334 	.word	0x20000334
 8002330:	40026410 	.word	0x40026410

08002334 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a28      	ldr	r2, [pc, #160]	; (80023f4 <HAL_SD_MspInit+0xc0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d14a      	bne.n	80023ec <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <HAL_SD_MspInit+0xc4>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <HAL_SD_MspInit+0xc4>)
 8002360:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_SD_MspInit+0xc4>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_SD_MspInit+0xc4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <HAL_SD_MspInit+0xc4>)
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_SD_MspInit+0xc4>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_SD_MspInit+0xc4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_SD_MspInit+0xc4>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_SD_MspInit+0xc4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80023aa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80023ae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80023bc:	230c      	movs	r3, #12
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	480d      	ldr	r0, [pc, #52]	; (80023fc <HAL_SD_MspInit+0xc8>)
 80023c8:	f005 ff7a 	bl	80082c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023cc:	2304      	movs	r3, #4
 80023ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80023dc:	230c      	movs	r3, #12
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4619      	mov	r1, r3
 80023e6:	4806      	ldr	r0, [pc, #24]	; (8002400 <HAL_SD_MspInit+0xcc>)
 80023e8:	f005 ff6a 	bl	80082c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00

08002404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_SPI_MspInit+0x13c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	f040 8087 	bne.w	8002536 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	4b45      	ldr	r3, [pc, #276]	; (8002544 <HAL_SPI_MspInit+0x140>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a44      	ldr	r2, [pc, #272]	; (8002544 <HAL_SPI_MspInit+0x140>)
 8002432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
 8002438:	4b42      	ldr	r3, [pc, #264]	; (8002544 <HAL_SPI_MspInit+0x140>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	4b3e      	ldr	r3, [pc, #248]	; (8002544 <HAL_SPI_MspInit+0x140>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4a3d      	ldr	r2, [pc, #244]	; (8002544 <HAL_SPI_MspInit+0x140>)
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	6313      	str	r3, [r2, #48]	; 0x30
 8002454:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_SPI_MspInit+0x140>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002460:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002472:	2305      	movs	r3, #5
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4832      	ldr	r0, [pc, #200]	; (8002548 <HAL_SPI_MspInit+0x144>)
 800247e:	f005 ff1f 	bl	80082c0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002482:	4b32      	ldr	r3, [pc, #200]	; (800254c <HAL_SPI_MspInit+0x148>)
 8002484:	4a32      	ldr	r2, [pc, #200]	; (8002550 <HAL_SPI_MspInit+0x14c>)
 8002486:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002488:	4b30      	ldr	r3, [pc, #192]	; (800254c <HAL_SPI_MspInit+0x148>)
 800248a:	2200      	movs	r2, #0
 800248c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <HAL_SPI_MspInit+0x148>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_SPI_MspInit+0x148>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_SPI_MspInit+0x148>)
 800249c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_SPI_MspInit+0x148>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <HAL_SPI_MspInit+0x148>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_SPI_MspInit+0x148>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <HAL_SPI_MspInit+0x148>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_SPI_MspInit+0x148>)
 80024bc:	2200      	movs	r2, #0
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80024c0:	4822      	ldr	r0, [pc, #136]	; (800254c <HAL_SPI_MspInit+0x148>)
 80024c2:	f005 fafb 	bl	8007abc <HAL_DMA_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80024cc:	f7ff fe8a 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_SPI_MspInit+0x148>)
 80024d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_SPI_MspInit+0x148>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_SPI_MspInit+0x150>)
 80024de:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_SPI_MspInit+0x154>)
 80024e0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_SPI_MspInit+0x150>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_SPI_MspInit+0x150>)
 80024ea:	2240      	movs	r2, #64	; 0x40
 80024ec:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_SPI_MspInit+0x150>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <HAL_SPI_MspInit+0x150>)
 80024f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024fa:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_SPI_MspInit+0x150>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <HAL_SPI_MspInit+0x150>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_SPI_MspInit+0x150>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_SPI_MspInit+0x150>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_SPI_MspInit+0x150>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800251a:	480e      	ldr	r0, [pc, #56]	; (8002554 <HAL_SPI_MspInit+0x150>)
 800251c:	f005 face 	bl	8007abc <HAL_DMA_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8002526:	f7ff fe5d 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_SPI_MspInit+0x150>)
 800252e:	649a      	str	r2, [r3, #72]	; 0x48
 8002530:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_SPI_MspInit+0x150>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40003800 	.word	0x40003800
 8002544:	40023800 	.word	0x40023800
 8002548:	40020400 	.word	0x40020400
 800254c:	20000470 	.word	0x20000470
 8002550:	40026058 	.word	0x40026058
 8002554:	200004d0 	.word	0x200004d0
 8002558:	40026070 	.word	0x40026070

0800255c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a18      	ldr	r2, [pc, #96]	; (80025cc <HAL_TIM_Base_MspInit+0x70>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d10e      	bne.n	800258c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_TIM_Base_MspInit+0x74>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <HAL_TIM_Base_MspInit+0x74>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_TIM_Base_MspInit+0x74>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800258a:	e01a      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_TIM_Base_MspInit+0x78>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d115      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_TIM_Base_MspInit+0x74>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <HAL_TIM_Base_MspInit+0x74>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_TIM_Base_MspInit+0x74>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2105      	movs	r1, #5
 80025b6:	201e      	movs	r0, #30
 80025b8:	f005 fa56 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025bc:	201e      	movs	r0, #30
 80025be:	f005 fa6f 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40000800 	.word	0x40000800

080025d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a21      	ldr	r2, [pc, #132]	; (800267c <HAL_TIM_MspPostInit+0xa4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d13b      	bne.n	8002672 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_TIM_MspPostInit+0xa8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <HAL_TIM_MspPostInit+0xa8>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_TIM_MspPostInit+0xa8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_TIM_MspPostInit+0xa8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <HAL_TIM_MspPostInit+0xa8>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_TIM_MspPostInit+0xa8>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002632:	23c0      	movs	r3, #192	; 0xc0
 8002634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002642:	2302      	movs	r3, #2
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <HAL_TIM_MspPostInit+0xac>)
 800264e:	f005 fe37 	bl	80082c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002652:	2303      	movs	r3, #3
 8002654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002662:	2302      	movs	r3, #2
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	4619      	mov	r1, r3
 800266c:	4806      	ldr	r0, [pc, #24]	; (8002688 <HAL_TIM_MspPostInit+0xb0>)
 800266e:	f005 fe27 	bl	80082c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002672:	bf00      	nop
 8002674:	3728      	adds	r7, #40	; 0x28
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40000400 	.word	0x40000400
 8002680:	40023800 	.word	0x40023800
 8002684:	40020000 	.word	0x40020000
 8002688:	40020400 	.word	0x40020400

0800268c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b092      	sub	sp, #72	; 0x48
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a93      	ldr	r2, [pc, #588]	; (80028f8 <HAL_UART_MspInit+0x26c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d15a      	bne.n	8002764 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
 80026b2:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_UART_MspInit+0x270>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a91      	ldr	r2, [pc, #580]	; (80028fc <HAL_UART_MspInit+0x270>)
 80026b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b8f      	ldr	r3, [pc, #572]	; (80028fc <HAL_UART_MspInit+0x270>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ce:	4b8b      	ldr	r3, [pc, #556]	; (80028fc <HAL_UART_MspInit+0x270>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a8a      	ldr	r2, [pc, #552]	; (80028fc <HAL_UART_MspInit+0x270>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_UART_MspInit+0x270>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026e6:	2303      	movs	r3, #3
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f2:	2303      	movs	r3, #3
 80026f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026f6:	2308      	movs	r3, #8
 80026f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026fe:	4619      	mov	r1, r3
 8002700:	487f      	ldr	r0, [pc, #508]	; (8002900 <HAL_UART_MspInit+0x274>)
 8002702:	f005 fddd 	bl	80082c0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002706:	4b7f      	ldr	r3, [pc, #508]	; (8002904 <HAL_UART_MspInit+0x278>)
 8002708:	4a7f      	ldr	r2, [pc, #508]	; (8002908 <HAL_UART_MspInit+0x27c>)
 800270a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800270c:	4b7d      	ldr	r3, [pc, #500]	; (8002904 <HAL_UART_MspInit+0x278>)
 800270e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002712:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002714:	4b7b      	ldr	r3, [pc, #492]	; (8002904 <HAL_UART_MspInit+0x278>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800271a:	4b7a      	ldr	r3, [pc, #488]	; (8002904 <HAL_UART_MspInit+0x278>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002720:	4b78      	ldr	r3, [pc, #480]	; (8002904 <HAL_UART_MspInit+0x278>)
 8002722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002726:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002728:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_UART_MspInit+0x278>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800272e:	4b75      	ldr	r3, [pc, #468]	; (8002904 <HAL_UART_MspInit+0x278>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002734:	4b73      	ldr	r3, [pc, #460]	; (8002904 <HAL_UART_MspInit+0x278>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800273a:	4b72      	ldr	r3, [pc, #456]	; (8002904 <HAL_UART_MspInit+0x278>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002740:	4b70      	ldr	r3, [pc, #448]	; (8002904 <HAL_UART_MspInit+0x278>)
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002746:	486f      	ldr	r0, [pc, #444]	; (8002904 <HAL_UART_MspInit+0x278>)
 8002748:	f005 f9b8 	bl	8007abc <HAL_DMA_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002752:	f7ff fd47 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a6a      	ldr	r2, [pc, #424]	; (8002904 <HAL_UART_MspInit+0x278>)
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
 800275c:	4a69      	ldr	r2, [pc, #420]	; (8002904 <HAL_UART_MspInit+0x278>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002762:	e19f      	b.n	8002aa4 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a68      	ldr	r2, [pc, #416]	; (800290c <HAL_UART_MspInit+0x280>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d163      	bne.n	8002836 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART1_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
 8002772:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_UART_MspInit+0x270>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a61      	ldr	r2, [pc, #388]	; (80028fc <HAL_UART_MspInit+0x270>)
 8002778:	f043 0310 	orr.w	r3, r3, #16
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b5f      	ldr	r3, [pc, #380]	; (80028fc <HAL_UART_MspInit+0x270>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <HAL_UART_MspInit+0x270>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a5a      	ldr	r2, [pc, #360]	; (80028fc <HAL_UART_MspInit+0x270>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b58      	ldr	r3, [pc, #352]	; (80028fc <HAL_UART_MspInit+0x270>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b8:	2307      	movs	r3, #7
 80027ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027c0:	4619      	mov	r1, r3
 80027c2:	484f      	ldr	r0, [pc, #316]	; (8002900 <HAL_UART_MspInit+0x274>)
 80027c4:	f005 fd7c 	bl	80082c0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80027c8:	4b51      	ldr	r3, [pc, #324]	; (8002910 <HAL_UART_MspInit+0x284>)
 80027ca:	4a52      	ldr	r2, [pc, #328]	; (8002914 <HAL_UART_MspInit+0x288>)
 80027cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_UART_MspInit+0x284>)
 80027d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027d6:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <HAL_UART_MspInit+0x284>)
 80027d8:	2240      	movs	r2, #64	; 0x40
 80027da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_UART_MspInit+0x284>)
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027e2:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_UART_MspInit+0x284>)
 80027e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <HAL_UART_MspInit+0x284>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027f0:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_UART_MspInit+0x284>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027f6:	4b46      	ldr	r3, [pc, #280]	; (8002910 <HAL_UART_MspInit+0x284>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027fc:	4b44      	ldr	r3, [pc, #272]	; (8002910 <HAL_UART_MspInit+0x284>)
 80027fe:	2200      	movs	r2, #0
 8002800:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002802:	4b43      	ldr	r3, [pc, #268]	; (8002910 <HAL_UART_MspInit+0x284>)
 8002804:	2200      	movs	r2, #0
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002808:	4841      	ldr	r0, [pc, #260]	; (8002910 <HAL_UART_MspInit+0x284>)
 800280a:	f005 f957 	bl	8007abc <HAL_DMA_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002814:	f7ff fce6 	bl	80021e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3d      	ldr	r2, [pc, #244]	; (8002910 <HAL_UART_MspInit+0x284>)
 800281c:	635a      	str	r2, [r3, #52]	; 0x34
 800281e:	4a3c      	ldr	r2, [pc, #240]	; (8002910 <HAL_UART_MspInit+0x284>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2105      	movs	r1, #5
 8002828:	2025      	movs	r0, #37	; 0x25
 800282a:	f005 f91d 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800282e:	2025      	movs	r0, #37	; 0x25
 8002830:	f005 f936 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
}
 8002834:	e136      	b.n	8002aa4 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a37      	ldr	r2, [pc, #220]	; (8002918 <HAL_UART_MspInit+0x28c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d171      	bne.n	8002924 <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_UART_MspInit+0x270>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <HAL_UART_MspInit+0x270>)
 800284a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284e:	6413      	str	r3, [r2, #64]	; 0x40
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_UART_MspInit+0x270>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	623b      	str	r3, [r7, #32]
 800285a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_UART_MspInit+0x270>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4a25      	ldr	r2, [pc, #148]	; (80028fc <HAL_UART_MspInit+0x270>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6313      	str	r3, [r2, #48]	; 0x30
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_UART_MspInit+0x270>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002878:	230c      	movs	r3, #12
 800287a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002888:	2307      	movs	r3, #7
 800288a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002890:	4619      	mov	r1, r3
 8002892:	481b      	ldr	r0, [pc, #108]	; (8002900 <HAL_UART_MspInit+0x274>)
 8002894:	f005 fd14 	bl	80082c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002898:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_UART_MspInit+0x290>)
 800289a:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_UART_MspInit+0x294>)
 800289c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800289e:	4b1f      	ldr	r3, [pc, #124]	; (800291c <HAL_UART_MspInit+0x290>)
 80028a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_UART_MspInit+0x290>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_UART_MspInit+0x290>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b2:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_UART_MspInit+0x290>)
 80028b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_UART_MspInit+0x290>)
 80028bc:	2200      	movs	r2, #0
 80028be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_UART_MspInit+0x290>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_UART_MspInit+0x290>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_UART_MspInit+0x290>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_UART_MspInit+0x290>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028d8:	4810      	ldr	r0, [pc, #64]	; (800291c <HAL_UART_MspInit+0x290>)
 80028da:	f005 f8ef 	bl	8007abc <HAL_DMA_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80028e4:	f7ff fc7e 	bl	80021e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a0c      	ldr	r2, [pc, #48]	; (800291c <HAL_UART_MspInit+0x290>)
 80028ec:	639a      	str	r2, [r3, #56]	; 0x38
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <HAL_UART_MspInit+0x290>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028f4:	e0d6      	b.n	8002aa4 <HAL_UART_MspInit+0x418>
 80028f6:	bf00      	nop
 80028f8:	40004c00 	.word	0x40004c00
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020000 	.word	0x40020000
 8002904:	20000714 	.word	0x20000714
 8002908:	40026040 	.word	0x40026040
 800290c:	40011000 	.word	0x40011000
 8002910:	20000774 	.word	0x20000774
 8002914:	400264b8 	.word	0x400264b8
 8002918:	40004400 	.word	0x40004400
 800291c:	200007d4 	.word	0x200007d4
 8002920:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a60      	ldr	r2, [pc, #384]	; (8002aac <HAL_UART_MspInit+0x420>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d15b      	bne.n	80029e6 <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a5e      	ldr	r2, [pc, #376]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	4b58      	ldr	r3, [pc, #352]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a57      	ldr	r2, [pc, #348]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002966:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002974:	2303      	movs	r3, #3
 8002976:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002978:	2307      	movs	r3, #7
 800297a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002980:	4619      	mov	r1, r3
 8002982:	484c      	ldr	r0, [pc, #304]	; (8002ab4 <HAL_UART_MspInit+0x428>)
 8002984:	f005 fc9c 	bl	80082c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 800298a:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_UART_MspInit+0x430>)
 800298c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 8002990:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002994:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002996:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a2:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 80029a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029aa:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b0:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80029b6:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029bc:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029c8:	483b      	ldr	r0, [pc, #236]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 80029ca:	f005 f877 	bl	8007abc <HAL_DMA_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 80029d4:	f7ff fc06 	bl	80021e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a37      	ldr	r2, [pc, #220]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38
 80029de:	4a36      	ldr	r2, [pc, #216]	; (8002ab8 <HAL_UART_MspInit+0x42c>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029e4:	e05e      	b.n	8002aa4 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART6)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a35      	ldr	r2, [pc, #212]	; (8002ac0 <HAL_UART_MspInit+0x434>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d159      	bne.n	8002aa4 <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	4a2d      	ldr	r2, [pc, #180]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 80029fa:	f043 0320 	orr.w	r3, r3, #32
 80029fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	4a26      	ldr	r2, [pc, #152]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1c:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <HAL_UART_MspInit+0x424>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a28:	23c0      	movs	r3, #192	; 0xc0
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a38:	2308      	movs	r3, #8
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a40:	4619      	mov	r1, r3
 8002a42:	4820      	ldr	r0, [pc, #128]	; (8002ac4 <HAL_UART_MspInit+0x438>)
 8002a44:	f005 fc3c 	bl	80082c0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a4a:	4a20      	ldr	r2, [pc, #128]	; (8002acc <HAL_UART_MspInit+0x440>)
 8002a4c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a50:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a54:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a62:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a68:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a70:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002a88:	480f      	ldr	r0, [pc, #60]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a8a:	f005 f817 	bl	8007abc <HAL_DMA_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8002a94:	f7ff fba6 	bl	80021e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_UART_MspInit+0x43c>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002aa4:	bf00      	nop
 8002aa6:	3748      	adds	r7, #72	; 0x48
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40004800 	.word	0x40004800
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	20000834 	.word	0x20000834
 8002abc:	40026028 	.word	0x40026028
 8002ac0:	40011400 	.word	0x40011400
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	20000894 	.word	0x20000894
 8002acc:	40026428 	.word	0x40026428

08002ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	; 0x30
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_InitTick+0xd4>)
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	4a2e      	ldr	r2, [pc, #184]	; (8002ba4 <HAL_InitTick+0xd4>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6453      	str	r3, [r2, #68]	; 0x44
 8002af0:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <HAL_InitTick+0xd4>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002afc:	f107 020c 	add.w	r2, r7, #12
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f007 fab2 	bl	800a070 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002b0c:	f007 fa9c 	bl	800a048 <HAL_RCC_GetPCLK2Freq>
 8002b10:	4603      	mov	r3, r0
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_InitTick+0xd8>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0c9b      	lsrs	r3, r3, #18
 8002b20:	3b01      	subs	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <HAL_InitTick+0xdc>)
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_InitTick+0xe0>)
 8002b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_InitTick+0xdc>)
 8002b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b32:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <HAL_InitTick+0xdc>)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_InitTick+0xdc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_InitTick+0xdc>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_InitTick+0xdc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002b4a:	4818      	ldr	r0, [pc, #96]	; (8002bac <HAL_InitTick+0xdc>)
 8002b4c:	f008 fe2e 	bl	800b7ac <HAL_TIM_Base_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11b      	bne.n	8002b96 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002b5e:	4813      	ldr	r0, [pc, #76]	; (8002bac <HAL_InitTick+0xdc>)
 8002b60:	f008 fe74 	bl	800b84c <HAL_TIM_Base_Start_IT>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d111      	bne.n	8002b96 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b72:	2019      	movs	r0, #25
 8002b74:	f004 ff94 	bl	8007aa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	d808      	bhi.n	8002b90 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	2019      	movs	r0, #25
 8002b84:	f004 ff70 	bl	8007a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_InitTick+0xe4>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e002      	b.n	8002b96 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3730      	adds	r7, #48	; 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	431bde83 	.word	0x431bde83
 8002bac:	200008f4 	.word	0x200008f4
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <NMI_Handler+0x4>

08002bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <HardFault_Handler+0x4>

08002bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <MemManage_Handler+0x4>

08002bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bce:	e7fe      	b.n	8002bce <BusFault_Handler+0x4>

08002bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <UsageFault_Handler+0x4>

08002bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002be8:	2004      	movs	r0, #4
 8002bea:	f005 fd1f 	bl	800862c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002bf6:	2010      	movs	r0, #16
 8002bf8:	f005 fd18 	bl	800862c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <DMA1_Stream1_IRQHandler+0x10>)
 8002c06:	f005 f8f1 	bl	8007dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000834 	.word	0x20000834

08002c14 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <DMA1_Stream2_IRQHandler+0x10>)
 8002c1a:	f005 f8e7 	bl	8007dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000714 	.word	0x20000714

08002c28 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <DMA1_Stream3_IRQHandler+0x10>)
 8002c2e:	f005 f8dd 	bl	8007dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000470 	.word	0x20000470

08002c3c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <DMA1_Stream4_IRQHandler+0x10>)
 8002c42:	f005 f8d3 	bl	8007dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200004d0 	.word	0x200004d0

08002c50 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <DMA1_Stream5_IRQHandler+0x10>)
 8002c56:	f005 f8c9 	bl	8007dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200007d4 	.word	0x200007d4

08002c64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002c68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c6c:	f005 fcde 	bl	800862c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c7a:	f008 ff79 	bl	800bb70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200008f4 	.word	0x200008f4

08002c88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <TIM4_IRQHandler+0x10>)
 8002c8e:	f008 ff6f 	bl	800bb70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000578 	.word	0x20000578

08002c9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <USART1_IRQHandler+0x10>)
 8002ca2:	f009 febb 	bl	800ca1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000604 	.word	0x20000604

08002cb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <DMA2_Stream0_IRQHandler+0x10>)
 8002cb6:	f005 f899 	bl	8007dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000334 	.word	0x20000334

08002cc4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <DMA2_Stream1_IRQHandler+0x10>)
 8002cca:	f005 f88f 	bl	8007dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000894 	.word	0x20000894

08002cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <OTG_FS_IRQHandler+0x10>)
 8002cde:	f005 fcbd 	bl	800865c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000d29c 	.word	0x2000d29c

08002cec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <DMA2_Stream7_IRQHandler+0x10>)
 8002cf2:	f005 f87b 	bl	8007dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000774 	.word	0x20000774

08002d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
	return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_kill>:

int _kill(int pid, int sig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d1a:	f011 fb4b 	bl	80143b4 <__errno>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2216      	movs	r2, #22
 8002d22:	601a      	str	r2, [r3, #0]
	return -1;
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_exit>:

void _exit (int status)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ffe7 	bl	8002d10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d42:	e7fe      	b.n	8002d42 <_exit+0x12>

08002d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <_sbrk+0x5c>)
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <_sbrk+0x60>)
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <_sbrk+0x64>)
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <_sbrk+0x68>)
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d207      	bcs.n	8002d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d74:	f011 fb1e 	bl	80143b4 <__errno>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e009      	b.n	8002d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <_sbrk+0x64>)
 8002d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20020000 	.word	0x20020000
 8002da4:	00000400 	.word	0x00000400
 8002da8:	2000093c 	.word	0x2000093c
 8002dac:	2000d7c0 	.word	0x2000d7c0

08002db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <SystemInit+0x20>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <SystemInit+0x20>)
 8002dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dda:	490e      	ldr	r1, [pc, #56]	; (8002e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de0:	e002      	b.n	8002de8 <LoopCopyDataInit>

08002de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de6:	3304      	adds	r3, #4

08002de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dec:	d3f9      	bcc.n	8002de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002df0:	4c0b      	ldr	r4, [pc, #44]	; (8002e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df4:	e001      	b.n	8002dfa <LoopFillZerobss>

08002df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df8:	3204      	adds	r2, #4

08002dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dfc:	d3fb      	bcc.n	8002df6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dfe:	f7ff ffd7 	bl	8002db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e02:	f011 fadd 	bl	80143c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e06:	f7fe fd15 	bl	8001834 <main>
  bx  lr    
 8002e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e14:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002e18:	08014f70 	.word	0x08014f70
  ldr r2, =_sbss
 8002e1c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002e20:	2000d7bc 	.word	0x2000d7bc

08002e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <ADC_IRQHandler>

08002e26 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8002e26:	b590      	push	{r4, r7, lr}
 8002e28:	b087      	sub	sp, #28
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	0fdb      	lsrs	r3, r3, #31
 8002e34:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <_ZNSt7__cxx119to_stringEi+0x1c>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	425b      	negs	r3, r3
 8002e40:	e000      	b.n	8002e44 <_ZNSt7__cxx119to_stringEi+0x1e>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8002e46:	210a      	movs	r1, #10
 8002e48:	6938      	ldr	r0, [r7, #16]
 8002e4a:	f000 ff5f 	bl	8003d0c <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8002e4e:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8002e50:	7dfa      	ldrb	r2, [r7, #23]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	18d4      	adds	r4, r2, r3
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f00f fb42 	bl	80124e4 <_ZNSaIcEC1Ev>
 8002e60:	f107 0308 	add.w	r3, r7, #8
 8002e64:	222d      	movs	r2, #45	; 0x2d
 8002e66:	4621      	mov	r1, r4
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f00f fc36 	bl	80126da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8002e6e:	f107 0308 	add.w	r3, r7, #8
 8002e72:	4618      	mov	r0, r3
 8002e74:	f00f fb37 	bl	80124e6 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f00f fc3b 	bl	80126f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002e82:	4603      	mov	r3, r0
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 ff7f 	bl	8003d8c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8002e8e:	bf00      	nop
  }
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}

08002e98 <_ZN15PrintableSensor11toCharArrayEi>:
	char packet[50]={};

public:
	virtual const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList) = 0;

	const char* toCharArray(int value)
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
	{
		return std::to_string(value).c_str();
 8002ea2:	f107 0308 	add.w	r3, r7, #8
 8002ea6:	6839      	ldr	r1, [r7, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ffbc 	bl	8002e26 <_ZNSt7__cxx119to_stringEi>
 8002eae:	f107 0308 	add.w	r3, r7, #8
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f00f fc23 	bl	80126fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002eb8:	4604      	mov	r4, r0
 8002eba:	bf00      	nop
 8002ebc:	f107 0308 	add.w	r3, r7, #8
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f00f fc13 	bl	80126ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ec6:	4623      	mov	r3, r4
	}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3724      	adds	r7, #36	; 0x24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <_ZN5drone5utils9functionsL11concatBytesEhh>:
	}*/

	namespace functions
	{
		static int16_t concatBytes(uint8_t msb, uint8_t lsb)
		{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	460a      	mov	r2, r1
 8002eda:	71fb      	strb	r3, [r7, #7]
 8002edc:	4613      	mov	r3, r2
 8002ede:	71bb      	strb	r3, [r7, #6]
			return (((int16_t)msb << 8) | (int16_t)lsb);
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	b21a      	sxth	r2, r3
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	4313      	orrs	r3, r2
 8002eec:	b21b      	sxth	r3, r3
		}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <_ZN8SPI_ConnC1Ev>:
#define INTERFACES_INTERFACES_H_

#include <stdint.h>
#include <string.h>

class SPI_Conn
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <_ZN8SPI_ConnC1Ev+0x1c>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	0801499c 	.word	0x0801499c

08002f1c <_ZN15PrintableSensorC1Ev>:
class PrintableSensor
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <_ZN15PrintableSensorC1Ev+0x28>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2232      	movs	r2, #50	; 0x32
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f011 fa78 	bl	8014428 <memset>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	08014990 	.word	0x08014990

08002f48 <_ZN6BMP39010calib_coefC1Ev>:
	SPI_HandleTypeDef *spi_port;

	uint8_t spiTxBuff[2]={0,0};
	uint8_t spiRxBuff[2]={0,0};

	struct calib_coef
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	801a      	strh	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	805a      	strh	r2, [r3, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	711a      	strb	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	80da      	strh	r2, [r3, #6]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	811a      	strh	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	729a      	strb	r2, [r3, #10]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	72da      	strb	r2, [r3, #11]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	819a      	strh	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	81da      	strh	r2, [r3, #14]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	741a      	strb	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	745a      	strb	r2, [r3, #17]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	825a      	strh	r2, [r3, #18]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	751a      	strb	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	755a      	strb	r2, [r3, #21]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_ZN6BMP39020quantized_calib_dataC1Ev>:
		int16_t par_p9 = 0;
		int8_t par_p10 = 0;
		int8_t par_p11 = 0;
	} calibCoef;

	struct quantized_calib_data
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9c1 2300 	strd	r2, r3, [r1]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <_ZN6BMP390C1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "BMP390.hpp"

BMP390::BMP390(SPI_HandleTypeDef *spi_port)
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
: spi_port {spi_port}
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff27 	bl	8002efc <_ZN8SPI_ConnC1Ev>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff32 	bl	8002f1c <_ZN15PrintableSensorC1Ev>
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0x98>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0x9c>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3344      	adds	r3, #68	; 0x44
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff2a 	bl	8002f48 <_ZN6BMP39010calib_coefC1Ev>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3360      	adds	r3, #96	; 0x60
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff5a 	bl	8002fb2 <_ZN6BMP39020quantized_calib_dataC1Ev>
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
{
}
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	08014970 	.word	0x08014970
 8003138:	08014984 	.word	0x08014984

0800313c <_ZN6BMP39011defaultInitEv>:

bool BMP390::defaultInit()
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
	this->SPI_write(CMD,CMD_SOFTRESET);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	22b6      	movs	r2, #182	; 0xb6
 800314c:	217e      	movs	r1, #126	; 0x7e
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
	HAL_Delay(20);
 8003152:	2014      	movs	r0, #20
 8003154:	f003 ff9a 	bl	800708c <HAL_Delay>

	int debug = SPI_read(STATUS);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3304      	adds	r3, #4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2103      	movs	r1, #3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4798      	blx	r3
 8003166:	4603      	mov	r3, r0
 8003168:	60fb      	str	r3, [r7, #12]
	while ((debug= SPI_read(STATUS))==0)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3304      	adds	r3, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2103      	movs	r1, #3
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	4603      	mov	r3, r0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <_ZN6BMP39011defaultInitEv+0x58>
		HAL_Delay(50);
 800318c:	2032      	movs	r0, #50	; 0x32
 800318e:	f003 ff7d 	bl	800708c <HAL_Delay>
	while ((debug= SPI_read(STATUS))==0)
 8003192:	e7ea      	b.n	800316a <_ZN6BMP39011defaultInitEv+0x2e>

	if (!this->initAndCheck(OSR,OSR_OSR_P_X16|OSR_OSR_T_X2,10))
 8003194:	2300      	movs	r3, #0
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	230a      	movs	r3, #10
 800319a:	220c      	movs	r2, #12
 800319c:	211c      	movs	r1, #28
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f84d 	bl	800323e <_ZN6BMP39012initAndCheckEhhhb>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <_ZN6BMP39011defaultInitEv+0x78>
		return false;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e040      	b.n	8003236 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(CONFIG,CONFIG_COEF_3,10))
 80031b4:	2300      	movs	r3, #0
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	230a      	movs	r3, #10
 80031ba:	2202      	movs	r2, #2
 80031bc:	211f      	movs	r1, #31
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f83d 	bl	800323e <_ZN6BMP39012initAndCheckEhhhb>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f083 0301 	eor.w	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <_ZN6BMP39011defaultInitEv+0x98>
		return false;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e030      	b.n	8003236 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(ODR,ODR_ODR_25,10))
 80031d4:	2300      	movs	r3, #0
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	230a      	movs	r3, #10
 80031da:	2203      	movs	r2, #3
 80031dc:	211d      	movs	r1, #29
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f82d 	bl	800323e <_ZN6BMP39012initAndCheckEhhhb>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f083 0301 	eor.w	r3, r3, #1
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <_ZN6BMP39011defaultInitEv+0xb8>
		return false;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e020      	b.n	8003236 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(INT_CTRL,INT_CTRL_DRDY_EN|INT_CTRL_INT_LEVEL,10))
 80031f4:	2300      	movs	r3, #0
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	230a      	movs	r3, #10
 80031fa:	2242      	movs	r2, #66	; 0x42
 80031fc:	2119      	movs	r1, #25
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f81d 	bl	800323e <_ZN6BMP39012initAndCheckEhhhb>
 8003204:	4603      	mov	r3, r0
 8003206:	f083 0301 	eor.w	r3, r3, #1
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <_ZN6BMP39011defaultInitEv+0xd8>
		return false;
 8003210:	2300      	movs	r3, #0
 8003212:	e010      	b.n	8003236 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!this->initAndCheck(PWR_CTRL,PWR_CTRL_PRESS_EN|PWR_CTRL_TEMP_EN|PWR_CTRL_MODE_NORMAL,10))
 8003214:	2300      	movs	r3, #0
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	230a      	movs	r3, #10
 800321a:	2233      	movs	r2, #51	; 0x33
 800321c:	211b      	movs	r1, #27
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f80d 	bl	800323e <_ZN6BMP39012initAndCheckEhhhb>
 8003224:	4603      	mov	r3, r0
 8003226:	f083 0301 	eor.w	r3, r3, #1
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <_ZN6BMP39011defaultInitEv+0xf8>
		return false;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <_ZN6BMP39011defaultInitEv+0xfa>

	return true;
 8003234:	2301      	movs	r3, #1
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <_ZN6BMP39012initAndCheckEhhhb>:

bool BMP390::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	4608      	mov	r0, r1
 8003248:	4611      	mov	r1, r2
 800324a:	461a      	mov	r2, r3
 800324c:	4603      	mov	r3, r0
 800324e:	70fb      	strb	r3, [r7, #3]
 8003250:	460b      	mov	r3, r1
 8003252:	70bb      	strb	r3, [r7, #2]
 8003254:	4613      	mov	r3, r2
 8003256:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	787b      	ldrb	r3, [r7, #1]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	429a      	cmp	r2, r3
 8003262:	da21      	bge.n	80032a8 <_ZN6BMP39012initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8003264:	7e3b      	ldrb	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <_ZN6BMP39012initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	78ba      	ldrb	r2, [r7, #2]
 8003272:	78f9      	ldrb	r1, [r7, #3]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3

		if (SPI_read(addr)==val)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3304      	adds	r3, #4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	4611      	mov	r1, r2
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
 8003288:	4603      	mov	r3, r0
 800328a:	461a      	mov	r2, r3
 800328c:	78bb      	ldrb	r3, [r7, #2]
 800328e:	4293      	cmp	r3, r2
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <_ZN6BMP39012initAndCheckEhhhb+0x62>
			return true;
 800329c:	2301      	movs	r3, #1
 800329e:	e004      	b.n	80032aa <_ZN6BMP39012initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3301      	adds	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e7d9      	b.n	800325c <_ZN6BMP39012initAndCheckEhhhb+0x1e>
	}
	return false;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_ZN6BMP3906updateEv>:

void BMP390::update()
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
	uint8_t DATA0=SPI_read(DATA_0);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3304      	adds	r3, #4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2104      	movs	r1, #4
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
 80032c8:	4603      	mov	r3, r0
 80032ca:	73fb      	strb	r3, [r7, #15]
	uint8_t DATA1=SPI_read(DATA_1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3304      	adds	r3, #4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2105      	movs	r1, #5
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
 80032da:	4603      	mov	r3, r0
 80032dc:	73bb      	strb	r3, [r7, #14]
	uint8_t DATA2=SPI_read(DATA_2);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3304      	adds	r3, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2106      	movs	r1, #6
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
 80032ec:	4603      	mov	r3, r0
 80032ee:	737b      	strb	r3, [r7, #13]

	uint8_t TEMP0=SPI_read(DATA_3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3304      	adds	r3, #4
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2107      	movs	r1, #7
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
 80032fe:	4603      	mov	r3, r0
 8003300:	733b      	strb	r3, [r7, #12]
	uint8_t TEMP1=SPI_read(DATA_4);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3304      	adds	r3, #4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2108      	movs	r1, #8
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
 8003310:	4603      	mov	r3, r0
 8003312:	72fb      	strb	r3, [r7, #11]
	uint8_t TEMP2=SPI_read(DATA_5);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3304      	adds	r3, #4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2109      	movs	r1, #9
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
 8003322:	4603      	mov	r3, r0
 8003324:	72bb      	strb	r3, [r7, #10]

	this->raw_pressure = ((uint32_t)DATA2<<16)|((uint16_t)DATA1<<8)|DATA0;
 8003326:	7b7b      	ldrb	r3, [r7, #13]
 8003328:	041b      	lsls	r3, r3, #16
 800332a:	7bba      	ldrb	r2, [r7, #14]
 800332c:	0212      	lsls	r2, r2, #8
 800332e:	431a      	orrs	r2, r3
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	this->raw_temp = ((uint32_t)TEMP2<<16)|((uint16_t)TEMP1<<8)|TEMP0;
 800333a:	7abb      	ldrb	r3, [r7, #10]
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	7afa      	ldrb	r2, [r7, #11]
 8003340:	0212      	lsls	r2, r2, #8
 8003342:	431a      	orrs	r2, r3
 8003344:	7b3b      	ldrb	r3, [r7, #12]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	this->read_calib_data();
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa6e 	bl	8003830 <_ZN6BMP39015read_calib_dataEv>
	this->compensate_data();
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f804 	bl	8003362 <_ZN6BMP39015compensate_dataEv>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <_ZN6BMP39015compensate_dataEv>:

void BMP390::compensate_data()
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
	this->read_calib_data();
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa60 	bl	8003830 <_ZN6BMP39015read_calib_dataEv>
	this->compensate_temperature();
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f807 	bl	8003384 <_ZN6BMP39022compensate_temperatureEv>
	this->compensate_pressure();
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f854 	bl	8003424 <_ZN6BMP39019compensate_pressureEv>
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <_ZN6BMP39022compensate_temperatureEv>:

void BMP390::compensate_temperature()
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
    double partial_data1 = 0;
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double partial_data2 = 0;
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    partial_data1 = static_cast<double>(this->raw_temp) - quantizedCalibCoef.par_t1;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f85a 	bl	8000464 <__aeabi_ui2d>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80033b6:	f7fc ff17 	bl	80001e8 <__aeabi_dsub>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = partial_data1 * quantizedCalibCoef.par_t2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80033c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033cc:	f7fd f8c4 	bl	8000558 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->quantizedCalibCoef.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantizedCalibCoef.par_t3;
 80033d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033e0:	f7fd f8ba 	bl	8000558 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80033f2:	f7fd f8b1 	bl	8000558 <__aeabi_dmul>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003402:	f7fc fef3 	bl	80001ec <__adddf3>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0

    this->temp = static_cast<double>(quantizedCalibCoef.t_lin);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
}
 800341c:	bf00      	nop
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_ZN6BMP39019compensate_pressureEv>:

void BMP390::compensate_pressure()
{
 8003424:	b5b0      	push	{r4, r5, r7, lr}
 8003426:	b08e      	sub	sp, #56	; 0x38
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = this->quantizedCalibCoef.par_p6 * this->quantizedCalibCoef.t_lin;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003438:	f7fd f88e 	bl	8000558 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p7 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003456:	f7fd f87f 	bl	8000558 <__aeabi_dmul>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	f7fd f879 	bl	8000558 <__aeabi_dmul>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p8 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003480:	f7fd f86a 	bl	8000558 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003492:	f7fd f861 	bl	8000558 <__aeabi_dmul>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4620      	mov	r0, r4
 800349c:	4629      	mov	r1, r5
 800349e:	f7fd f85b 	bl	8000558 <__aeabi_dmul>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out1 = this->quantizedCalibCoef.par_p5 + partial_data1 + partial_data2 + partial_data3;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80034b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034b4:	f7fc fe9a 	bl	80001ec <__adddf3>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034c4:	f7fc fe92 	bl	80001ec <__adddf3>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034d0:	f7fc fe8c 	bl	80001ec <__adddf3>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    partial_data1 = this->quantizedCalibCoef.par_p2 * this->quantizedCalibCoef.t_lin;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80034e8:	f7fd f836 	bl	8000558 <__aeabi_dmul>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p3 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003506:	f7fd f827 	bl	8000558 <__aeabi_dmul>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4620      	mov	r0, r4
 8003510:	4629      	mov	r1, r5
 8003512:	f7fd f821 	bl	8000558 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = this->quantizedCalibCoef.par_p4 * (this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin * this->quantizedCalibCoef.t_lin);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003530:	f7fd f812 	bl	8000558 <__aeabi_dmul>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003542:	f7fd f809 	bl	8000558 <__aeabi_dmul>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4620      	mov	r0, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f7fd f803 	bl	8000558 <__aeabi_dmul>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_out2 = static_cast<double>(this->raw_pressure) * (this->quantizedCalibCoef.par_p1 + partial_data1 + partial_data2 + partial_data3);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003560:	4618      	mov	r0, r3
 8003562:	f7fc ff7f 	bl	8000464 <__aeabi_ui2d>
 8003566:	4604      	mov	r4, r0
 8003568:	460d      	mov	r5, r1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003574:	f7fc fe3a 	bl	80001ec <__adddf3>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003584:	f7fc fe32 	bl	80001ec <__adddf3>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003594:	f7fc fe2a 	bl	80001ec <__adddf3>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4620      	mov	r0, r4
 800359e:	4629      	mov	r1, r5
 80035a0:	f7fc ffda 	bl	8000558 <__aeabi_dmul>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    partial_data1 = static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fc ff56 	bl	8000464 <__aeabi_ui2d>
 80035b8:	4604      	mov	r4, r0
 80035ba:	460d      	mov	r5, r1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc ff4e 	bl	8000464 <__aeabi_ui2d>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4620      	mov	r0, r4
 80035ce:	4629      	mov	r1, r5
 80035d0:	f7fc ffc2 	bl	8000558 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data2 = this->quantizedCalibCoef.par_p9 + this->quantizedCalibCoef.par_p10 * this->quantizedCalibCoef.t_lin;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80035ee:	f7fc ffb3 	bl	8000558 <__aeabi_dmul>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	f7fc fdf7 	bl	80001ec <__adddf3>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data3 = partial_data1 * partial_data2;
 8003606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800360a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800360e:	f7fc ffa3 	bl	8000558 <__aeabi_dmul>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data4 = partial_data3 + (static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure) * static_cast<double>(this->raw_pressure)) * this->quantizedCalibCoef.par_p11;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ff1f 	bl	8000464 <__aeabi_ui2d>
 8003626:	4604      	mov	r4, r0
 8003628:	460d      	mov	r5, r1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff17 	bl	8000464 <__aeabi_ui2d>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4620      	mov	r0, r4
 800363c:	4629      	mov	r1, r5
 800363e:	f7fc ff8b 	bl	8000558 <__aeabi_dmul>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4614      	mov	r4, r2
 8003648:	461d      	mov	r5, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003650:	4618      	mov	r0, r3
 8003652:	f7fc ff07 	bl	8000464 <__aeabi_ui2d>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4620      	mov	r0, r4
 800365c:	4629      	mov	r1, r5
 800365e:	f7fc ff7b 	bl	8000558 <__aeabi_dmul>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8003670:	f7fc ff72 	bl	8000558 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800367c:	f7fc fdb6 	bl	80001ec <__adddf3>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	e9c7 2302 	strd	r2, r3, [r7, #8]

    this->pressure = (partial_out1 + partial_out2 + partial_data4) / 100.0f;
 8003688:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800368c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003690:	f7fc fdac 	bl	80001ec <__adddf3>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a0:	f7fc fda4 	bl	80001ec <__adddf3>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <_ZN6BMP39019compensate_pressureEv+0x2a4>)
 80036b2:	f7fd f87b 	bl	80007ac <__aeabi_ddiv>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
}
 80036c0:	bf00      	nop
 80036c2:	3738      	adds	r7, #56	; 0x38
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bdb0      	pop	{r4, r5, r7, pc}
 80036c8:	40590000 	.word	0x40590000

080036cc <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* BMP390::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 80036cc:	b5b0      	push	{r4, r5, r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3308      	adds	r3, #8
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS)!=senorsList.end())
 80036de:	230f      	movs	r3, #15
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	4619      	mov	r1, r3
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	f000 fba5 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80036ee:	4603      	mov	r3, r0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	6838      	ldr	r0, [r7, #0]
 80036f4:	f000 fbb9 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80036f8:	4603      	mov	r3, r0
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	f107 0214 	add.w	r2, r7, #20
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fbbc 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d022      	beq.n	8003758 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x8c>
	{
		strcat(packet,toCharArray(pressure));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f103 0408 	add.w	r4, r3, #8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	1d1d      	adds	r5, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	f7fd f9c7 	bl	8000ab8 <__aeabi_d2iz>
 800372a:	4603      	mov	r3, r0
 800372c:	4619      	mov	r1, r3
 800372e:	4628      	mov	r0, r5
 8003730:	f7ff fbb2 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8003734:	4603      	mov	r3, r0
 8003736:	4619      	mov	r1, r3
 8003738:	4620      	mov	r0, r4
 800373a:	f010 ffb1 	bl	80146a0 <strcat>
		strcat(packet,",");
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f103 0408 	add.w	r4, r3, #8
 8003744:	4620      	mov	r0, r4
 8003746:	f7fc fd43 	bl	80001d0 <strlen>
 800374a:	4603      	mov	r3, r0
 800374c:	4423      	add	r3, r4
 800374e:	4905      	ldr	r1, [pc, #20]	; (8003764 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x98>)
 8003750:	461a      	mov	r2, r3
 8003752:	460b      	mov	r3, r1
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3308      	adds	r3, #8
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bdb0      	pop	{r4, r5, r7, pc}
 8003764:	08014848 	.word	0x08014848

08003768 <_ZThn4_N6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	bool defaultInit();
	void update();
	int32_t getPressure();
	int32_t getTemp();
	uint8_t getChipID();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8003768:	f1a0 0004 	sub.w	r0, r0, #4
 800376c:	f7ff bfae 	b.w	80036cc <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08003770 <_ZN6BMP3909SPI_writeEhh>:
{
	return this->SPI_read(CHIP_ID);
}

void BMP390::SPI_write(uint8_t reg,uint8_t data)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
 800377c:	4613      	mov	r3, r2
 800377e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_RESET);
 8003780:	2200      	movs	r2, #0
 8003782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003786:	480e      	ldr	r0, [pc, #56]	; (80037c0 <_ZN6BMP3909SPI_writeEhh+0x50>)
 8003788:	f004 ff36 	bl	80085f8 <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->spiTxBuff[1] = data;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	78ba      	ldrb	r2, [r7, #2]
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3340      	adds	r3, #64	; 0x40
 80037a4:	2202      	movs	r2, #2
 80037a6:	4619      	mov	r1, r3
 80037a8:	f007 fad0 	bl	800ad4c <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_SET);
 80037ac:	2201      	movs	r2, #1
 80037ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037b2:	4803      	ldr	r0, [pc, #12]	; (80037c0 <_ZN6BMP3909SPI_writeEhh+0x50>)
 80037b4:	f004 ff20 	bl	80085f8 <HAL_GPIO_WritePin>
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40020400 	.word	0x40020400

080037c4 <_ZN6BMP3908SPI_readEh>:

uint8_t BMP390::SPI_read(uint8_t reg)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_RESET);
 80037d0:	2200      	movs	r2, #0
 80037d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037d6:	4815      	ldr	r0, [pc, #84]	; (800382c <_ZN6BMP3908SPI_readEh+0x68>)
 80037d8:	f004 ff0e 	bl	80085f8 <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->spiTxBuff[1]=0x00;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 2);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3340      	adds	r3, #64	; 0x40
 80037fa:	2202      	movs	r2, #2
 80037fc:	4619      	mov	r1, r3
 80037fe:	f007 faa5 	bl	800ad4c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3342      	adds	r3, #66	; 0x42
 800380a:	2201      	movs	r2, #1
 800380c:	4619      	mov	r1, r3
 800380e:	f007 fb53 	bl	800aeb8 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_SET);
 8003812:	2201      	movs	r2, #1
 8003814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003818:	4804      	ldr	r0, [pc, #16]	; (800382c <_ZN6BMP3908SPI_readEh+0x68>)
 800381a:	f004 feed 	bl	80085f8 <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40020400 	.word	0x40020400

08003830 <_ZN6BMP39015read_calib_dataEv>:

void BMP390::read_calib_data()
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	double temp_var = 0;
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uint8_t NVM_PAR_T1_1_value = this->SPI_read(NVM_PAR_T1_1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3304      	adds	r3, #4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2131      	movs	r1, #49	; 0x31
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
 8003852:	4603      	mov	r3, r0
 8003854:	77fb      	strb	r3, [r7, #31]
	uint8_t NVM_PAR_T1_2_value = this->SPI_read(NVM_PAR_T1_2);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3304      	adds	r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2132      	movs	r1, #50	; 0x32
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
 8003864:	4603      	mov	r3, r0
 8003866:	77bb      	strb	r3, [r7, #30]
	uint8_t NVM_PAR_T2_1_value = this->SPI_read(NVM_PAR_T2_1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3304      	adds	r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2133      	movs	r1, #51	; 0x33
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
 8003876:	4603      	mov	r3, r0
 8003878:	777b      	strb	r3, [r7, #29]
	uint8_t NVM_PAR_T2_2_value = this->SPI_read(NVM_PAR_T2_2);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3304      	adds	r3, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2134      	movs	r1, #52	; 0x34
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	4603      	mov	r3, r0
 800388a:	773b      	strb	r3, [r7, #28]
	uint8_t NVM_PAR_T3_value = this->SPI_read(NVM_PAR_T3);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3304      	adds	r3, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2135      	movs	r1, #53	; 0x35
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
 800389a:	4603      	mov	r3, r0
 800389c:	76fb      	strb	r3, [r7, #27]
	uint8_t NVM_PAR_P1_1_value = this->SPI_read(NVM_PAR_P1_1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3304      	adds	r3, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2136      	movs	r1, #54	; 0x36
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
 80038ac:	4603      	mov	r3, r0
 80038ae:	76bb      	strb	r3, [r7, #26]
	uint8_t NVM_PAR_P1_2_value = this->SPI_read(NVM_PAR_P1_2);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3304      	adds	r3, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2137      	movs	r1, #55	; 0x37
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	4603      	mov	r3, r0
 80038c0:	767b      	strb	r3, [r7, #25]
	uint8_t NVM_PAR_P2_1_value = this->SPI_read(NVM_PAR_P2_1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3304      	adds	r3, #4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2138      	movs	r1, #56	; 0x38
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
 80038d0:	4603      	mov	r3, r0
 80038d2:	763b      	strb	r3, [r7, #24]
	uint8_t NVM_PAR_P2_2_value = this->SPI_read(NVM_PAR_P2_2);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3304      	adds	r3, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2139      	movs	r1, #57	; 0x39
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	75fb      	strb	r3, [r7, #23]
	uint8_t NVM_PAR_P3_value = this->SPI_read(NVM_PAR_P3);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3304      	adds	r3, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	213a      	movs	r1, #58	; 0x3a
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
 80038f4:	4603      	mov	r3, r0
 80038f6:	75bb      	strb	r3, [r7, #22]
	uint8_t NVM_PAR_P4_value = this->SPI_read(NVM_PAR_P4);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3304      	adds	r3, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	213b      	movs	r1, #59	; 0x3b
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
 8003906:	4603      	mov	r3, r0
 8003908:	757b      	strb	r3, [r7, #21]
	uint8_t NVM_PAR_P5_1_value = this->SPI_read(NVM_PAR_P5_1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3304      	adds	r3, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	213c      	movs	r1, #60	; 0x3c
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
 8003918:	4603      	mov	r3, r0
 800391a:	753b      	strb	r3, [r7, #20]
	uint8_t NVM_PAR_P5_2_value = this->SPI_read(NVM_PAR_P5_2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3304      	adds	r3, #4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	213d      	movs	r1, #61	; 0x3d
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
 800392a:	4603      	mov	r3, r0
 800392c:	74fb      	strb	r3, [r7, #19]
	uint8_t NVM_PAR_P6_1_value = this->SPI_read(NVM_PAR_P6_1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3304      	adds	r3, #4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	213e      	movs	r1, #62	; 0x3e
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
 800393c:	4603      	mov	r3, r0
 800393e:	74bb      	strb	r3, [r7, #18]
	uint8_t NVM_PAR_P6_2_value = this->SPI_read(NVM_PAR_P6_2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3304      	adds	r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	213f      	movs	r1, #63	; 0x3f
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
 800394e:	4603      	mov	r3, r0
 8003950:	747b      	strb	r3, [r7, #17]
	uint8_t NVM_PAR_P7_value = this->SPI_read(NVM_PAR_P7);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3304      	adds	r3, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2140      	movs	r1, #64	; 0x40
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8003960:	4603      	mov	r3, r0
 8003962:	743b      	strb	r3, [r7, #16]
	uint8_t NVM_PAR_P8_value = this->SPI_read(NVM_PAR_P8);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3304      	adds	r3, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2141      	movs	r1, #65	; 0x41
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
 8003972:	4603      	mov	r3, r0
 8003974:	73fb      	strb	r3, [r7, #15]
	uint8_t NVM_PAR_P9_1_value = this->SPI_read(NVM_PAR_P9_1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3304      	adds	r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2142      	movs	r1, #66	; 0x42
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
 8003984:	4603      	mov	r3, r0
 8003986:	73bb      	strb	r3, [r7, #14]
	uint8_t NVM_PAR_P9_2_value = this->SPI_read(NVM_PAR_P9_2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3304      	adds	r3, #4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2143      	movs	r1, #67	; 0x43
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
 8003996:	4603      	mov	r3, r0
 8003998:	737b      	strb	r3, [r7, #13]
	uint8_t NVM_PAR_P10_value = this->SPI_read(NVM_PAR_P10);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3304      	adds	r3, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2144      	movs	r1, #68	; 0x44
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
 80039a8:	4603      	mov	r3, r0
 80039aa:	733b      	strb	r3, [r7, #12]
	uint8_t NVM_PAR_P11_value = this->SPI_read(NVM_PAR_P11);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3304      	adds	r3, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2145      	movs	r1, #69	; 0x45
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	72fb      	strb	r3, [r7, #11]

    this->calibCoef.par_t1 = drone::utils::functions::concatBytes(NVM_PAR_T1_2_value, NVM_PAR_T1_1_value);
 80039be:	7ffa      	ldrb	r2, [r7, #31]
 80039c0:	7fbb      	ldrb	r3, [r7, #30]
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fa83 	bl	8002ed0 <_ZN5drone5utils9functionsL11concatBytesEhh>
 80039ca:	4603      	mov	r3, r0
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    this->calibCoef.par_t2 = drone::utils::functions::concatBytes(NVM_PAR_T2_2_value, NVM_PAR_T2_1_value);
 80039d4:	7f7a      	ldrb	r2, [r7, #29]
 80039d6:	7f3b      	ldrb	r3, [r7, #28]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fa78 	bl	8002ed0 <_ZN5drone5utils9functionsL11concatBytesEhh>
 80039e0:	4603      	mov	r3, r0
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    this->calibCoef.par_t3 = static_cast<int8_t>(NVM_PAR_T3_value);
 80039ea:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    this->calibCoef.par_p1 = drone::utils::functions::concatBytes(NVM_PAR_P1_2_value, NVM_PAR_P1_1_value);
 80039f4:	7eba      	ldrb	r2, [r7, #26]
 80039f6:	7e7b      	ldrb	r3, [r7, #25]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fa68 	bl	8002ed0 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    this->calibCoef.par_p2 = drone::utils::functions::concatBytes(NVM_PAR_P2_2_value, NVM_PAR_P2_1_value);
 8003a0a:	7e3a      	ldrb	r2, [r7, #24]
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fa5d 	bl	8002ed0 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    this->calibCoef.par_p3 = static_cast<int8_t>(NVM_PAR_P3_value);
 8003a20:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    this->calibCoef.par_p4 = static_cast<int8_t>(NVM_PAR_P4_value);
 8003a2a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
    this->calibCoef.par_p5 = drone::utils::functions::concatBytes(NVM_PAR_P5_2_value, NVM_PAR_P5_1_value);
 8003a34:	7d3a      	ldrb	r2, [r7, #20]
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fa48 	bl	8002ed0 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8003a40:	4603      	mov	r3, r0
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    this->calibCoef.par_p6 = drone::utils::functions::concatBytes(NVM_PAR_P6_2_value, NVM_PAR_P6_1_value);
 8003a4a:	7cba      	ldrb	r2, [r7, #18]
 8003a4c:	7c7b      	ldrb	r3, [r7, #17]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fa3d 	bl	8002ed0 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8003a56:	4603      	mov	r3, r0
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    this->calibCoef.par_p7 = static_cast<int8_t>(NVM_PAR_P7_value);
 8003a60:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    this->calibCoef.par_p8 = static_cast<int8_t>(NVM_PAR_P8_value);
 8003a6a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    this->calibCoef.par_p9 = drone::utils::functions::concatBytes(NVM_PAR_P9_2_value, NVM_PAR_P9_1_value);
 8003a74:	7bba      	ldrb	r2, [r7, #14]
 8003a76:	7b7b      	ldrb	r3, [r7, #13]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fa28 	bl	8002ed0 <_ZN5drone5utils9functionsL11concatBytesEhh>
 8003a80:	4603      	mov	r3, r0
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    this->calibCoef.par_p10 = static_cast<int8_t>(NVM_PAR_P10_value);
 8003a8a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    this->calibCoef.par_p11 = static_cast<int8_t>(NVM_PAR_P11_value);
 8003a94:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    temp_var = 0.00390625f;
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	4b90      	ldr	r3, [pc, #576]	; (8003ce4 <_ZN6BMP39015read_calib_dataEv+0x4b4>)
 8003aa4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t1 = static_cast<double>(this->calibCoef.par_t1) / temp_var;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fcd8 	bl	8000464 <__aeabi_ui2d>
 8003ab4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ab8:	f7fc fe78 	bl	80007ac <__aeabi_ddiv>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    temp_var = 1073741824.0f;
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	4b87      	ldr	r3, [pc, #540]	; (8003ce8 <_ZN6BMP39015read_calib_dataEv+0x4b8>)
 8003acc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t2 = static_cast<double>(this->calibCoef.par_t2) / temp_var;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fc fcc4 	bl	8000464 <__aeabi_ui2d>
 8003adc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ae0:	f7fc fe64 	bl	80007ac <__aeabi_ddiv>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    temp_var = 281474976710656.0f;
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	4b7e      	ldr	r3, [pc, #504]	; (8003cec <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8003af4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_t3 = static_cast<double>(this->calibCoef.par_t3) / temp_var;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fc fcc0 	bl	8000484 <__aeabi_i2d>
 8003b04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b08:	f7fc fe50 	bl	80007ac <__aeabi_ddiv>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    temp_var = 1048576.0f;
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	4b75      	ldr	r3, [pc, #468]	; (8003cf0 <_ZN6BMP39015read_calib_dataEv+0x4c0>)
 8003b1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p1 = static_cast<double>(this->calibCoef.par_p1 - 16384) / temp_var;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003b26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fcaa 	bl	8000484 <__aeabi_i2d>
 8003b30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b34:	f7fc fe3a 	bl	80007ac <__aeabi_ddiv>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    temp_var = 536870912.0f;
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	4b6b      	ldr	r3, [pc, #428]	; (8003cf4 <_ZN6BMP39015read_calib_dataEv+0x4c4>)
 8003b48:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p2 = static_cast<double>(this->calibCoef.par_p2 - 16384) / temp_var;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8003b52:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fc94 	bl	8000484 <__aeabi_i2d>
 8003b5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b60:	f7fc fe24 	bl	80007ac <__aeabi_ddiv>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    temp_var = 4294967296.0f;
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <_ZN6BMP39015read_calib_dataEv+0x4c8>)
 8003b74:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p3 = static_cast<double>(this->calibCoef.par_p3) / temp_var;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f993 304e 	ldrsb.w	r3, [r3, #78]	; 0x4e
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fc80 	bl	8000484 <__aeabi_i2d>
 8003b84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b88:	f7fc fe10 	bl	80007ac <__aeabi_ddiv>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    temp_var = 137438953472.0f;
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	4b58      	ldr	r3, [pc, #352]	; (8003cfc <_ZN6BMP39015read_calib_dataEv+0x4cc>)
 8003b9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p4 = static_cast<double>(this->calibCoef.par_p4) / temp_var;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f993 304f 	ldrsb.w	r3, [r3, #79]	; 0x4f
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc fc6c 	bl	8000484 <__aeabi_i2d>
 8003bac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bb0:	f7fc fdfc 	bl	80007ac <__aeabi_ddiv>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

    temp_var = 0.125f;
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003bc6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p5 = static_cast<double>(this->calibCoef.par_p5) / temp_var;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fc fc47 	bl	8000464 <__aeabi_ui2d>
 8003bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bda:	f7fc fde7 	bl	80007ac <__aeabi_ddiv>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    temp_var = 64.0f;
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <_ZN6BMP39015read_calib_dataEv+0x4d0>)
 8003bee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p6 = static_cast<double>(this->calibCoef.par_p6) / temp_var;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc fc33 	bl	8000464 <__aeabi_ui2d>
 8003bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c02:	f7fc fdd3 	bl	80007ac <__aeabi_ddiv>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    temp_var = 256.0f;
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <_ZN6BMP39015read_calib_dataEv+0x4d4>)
 8003c16:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p7 = static_cast<double>(this->calibCoef.par_p7) / temp_var;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fc2f 	bl	8000484 <__aeabi_i2d>
 8003c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c2a:	f7fc fdbf 	bl	80007ac <__aeabi_ddiv>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    temp_var = 32768.0f;
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	4b32      	ldr	r3, [pc, #200]	; (8003d08 <_ZN6BMP39015read_calib_dataEv+0x4d8>)
 8003c3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p8 = static_cast<double>(this->calibCoef.par_p8) / temp_var;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f993 3055 	ldrsb.w	r3, [r3, #85]	; 0x55
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc fc1b 	bl	8000484 <__aeabi_i2d>
 8003c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c52:	f7fc fdab 	bl	80007ac <__aeabi_ddiv>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    temp_var = 281474976710656.0f;
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	4b21      	ldr	r3, [pc, #132]	; (8003cec <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8003c66:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p9 = static_cast<double>(this->calibCoef.par_p9) / temp_var;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fc fc07 	bl	8000484 <__aeabi_i2d>
 8003c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c7a:	f7fc fd97 	bl	80007ac <__aeabi_ddiv>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    temp_var = 281474976710656.0f;
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	4b17      	ldr	r3, [pc, #92]	; (8003cec <_ZN6BMP39015read_calib_dataEv+0x4bc>)
 8003c8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p10 = static_cast<double>(this->calibCoef.par_p10) / temp_var;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f993 3058 	ldrsb.w	r3, [r3, #88]	; 0x58
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fc fbf3 	bl	8000484 <__aeabi_i2d>
 8003c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ca2:	f7fc fd83 	bl	80007ac <__aeabi_ddiv>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    temp_var = 36893488147419103232.0f;
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8003cb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    this->quantizedCalibCoef.par_p11 = static_cast<double>(this->calibCoef.par_p11) / temp_var;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f993 3059 	ldrsb.w	r3, [r3, #89]	; 0x59
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fbde 	bl	8000484 <__aeabi_i2d>
 8003cc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ccc:	f7fc fd6e 	bl	80007ac <__aeabi_ddiv>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 8003cda:	bf00      	nop
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	3f700000 	.word	0x3f700000
 8003ce8:	41d00000 	.word	0x41d00000
 8003cec:	42f00000 	.word	0x42f00000
 8003cf0:	41300000 	.word	0x41300000
 8003cf4:	41c00000 	.word	0x41c00000
 8003cf8:	41f00000 	.word	0x41f00000
 8003cfc:	42400000 	.word	0x42400000
 8003d00:	40500000 	.word	0x40500000
 8003d04:	40700000 	.word	0x40700000
 8003d08:	40e00000 	.word	0x40e00000

08003d0c <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8003d16:	2301      	movs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	fb03 f303 	mul.w	r3, r3, r3
 8003d20:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	fb02 f303 	mul.w	r3, r2, r3
 8003d2a:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d201      	bcs.n	8003d42 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	e01d      	b.n	8003d7e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d202      	bcs.n	8003d50 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	e016      	b.n	8003d7e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d202      	bcs.n	8003d5e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	e00f      	b.n	8003d7e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d202      	bcs.n	8003d6c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	3303      	adds	r3, #3
 8003d6a:	e008      	b.n	8003d7e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8003d7c:	e7db      	b.n	8003d36 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8003d7e:	4618      	mov	r0, r3
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b63      	cmp	r3, #99	; 0x63
 8003da2:	d925      	bls.n	8003df0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8003da8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	2164      	movs	r1, #100	; 0x64
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68f9      	ldr	r1, [r7, #12]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	440b      	add	r3, r1
 8003dd0:	4918      	ldr	r1, [pc, #96]	; (8003e34 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003dd2:	5c8a      	ldrb	r2, [r1, r2]
 8003dd4:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4413      	add	r3, r2
 8003dde:	4915      	ldr	r1, [pc, #84]	; (8003e34 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	440a      	add	r2, r1
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	3b02      	subs	r3, #2
 8003dec:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8003dee:	e7d6      	b.n	8003d9e <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b09      	cmp	r3, #9
 8003df4:	d910      	bls.n	8003e18 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3301      	adds	r3, #1
 8003e04:	490b      	ldr	r1, [pc, #44]	; (8003e34 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003e06:	5c8a      	ldrb	r2, [r1, r2]
 8003e08:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8003e16:	e005      	b.n	8003e24 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	3330      	adds	r3, #48	; 0x30
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	701a      	strb	r2, [r3, #0]
    }
 8003e24:	bf00      	nop
 8003e26:	3724      	adds	r7, #36	; 0x24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	51eb851f 	.word	0x51eb851f
 8003e34:	0801489c 	.word	0x0801489c

08003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6839      	ldr	r1, [r7, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f830 	bl	8003eac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	f107 020c 	add.w	r2, r7, #12
 8003e54:	f107 0308 	add.w	r3, r7, #8
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f862 	bl	8003f24 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 f865 	bl	8003f44 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      { return __x._M_node == __y._M_node; }

#if ! __cpp_lib_three_way_comparison
      friend bool
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f855 	bl	8003f66 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f85d 	bl	8003f7e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	4621      	mov	r1, r4
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f863 	bl	8003f96 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f88f 	bl	8003ff8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8003eda:	4603      	mov	r3, r0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	f107 020c 	add.w	r2, r7, #12
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 f896 	bl	800401a <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8003eee:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10d      	bne.n	8003f10 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8003ef4:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f8a2 	bl	8004042 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	6839      	ldr	r1, [r7, #0]
 8003f04:	4620      	mov	r0, r4
 8003f06:	f000 f8a8 	bl	800405a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f871 	bl	8003ff8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8003f16:	4603      	mov	r3, r0
 8003f18:	e000      	b.n	8003f1c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x70>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
    }
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd90      	pop	{r4, r7, pc}

08003f24 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	1d1a      	adds	r2, r3, #4
 8003f50:	f107 030c 	add.w	r3, r7, #12
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f894 	bl	8004084 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003f96:	b590      	push	{r4, r7, lr}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01b      	beq.n	8003fe2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8003faa:	68fc      	ldr	r4, [r7, #12]
 8003fac:	68b8      	ldr	r0, [r7, #8]
 8003fae:	f000 f878 	bl	80040a2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f000 f84e 	bl	800405a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f083 0301 	eor.w	r3, r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d006      	beq.n	8003fd8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	68b8      	ldr	r0, [r7, #8]
 8003fd0:	f000 f87a 	bl	80040c8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003fd4:	60b8      	str	r0, [r7, #8]
 8003fd6:	e7e5      	b.n	8003fa4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
	  __x = _S_right(__x);
 8003fd8:	68b8      	ldr	r0, [r7, #8]
 8003fda:	f000 f881 	bl	80040e0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003fde:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8003fe0:	e7e0      	b.n	8003fa4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
      return iterator(__y);
 8003fe2:	f107 0314 	add.w	r3, r7, #20
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f885 	bl	80040f8 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8003fee:	697b      	ldr	r3, [r7, #20]
    }
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd90      	pop	{r4, r7, pc}

08003ff8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	1d1a      	adds	r2, r3, #4
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f874 	bl	80040f8 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f829 	bl	80040a2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8004050:	4603      	mov	r3, r0
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800405a:	b480      	push	{r7}
 800405c:	b085      	sub	sp, #20
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	bfb4      	ite	lt
 8004072:	2301      	movlt	r3, #1
 8004074:	2300      	movge	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>:
      _S_key(_Const_Link_type __x)
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f833 	bl	8004116 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 80040b0:	4602      	mov	r2, r0
 80040b2:	f107 030c 	add.w	r3, r7, #12
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f83a 	bl	8004132 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 80040be:	4603      	mov	r3, r0
      }
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr() const
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3310      	adds	r3, #16
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f811 	bl	800414a <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8004128:	4603      	mov	r3, r0
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>:
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
      { return __x; }
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f805 	bl	8004162 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8004158:	4603      	mov	r3, r0
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() const noexcept
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_ZN17BatteryManagement3runEv>:
//#include "../BatteryManagement_lib/BaterryManagement.hpp"

#include "BatteryManagement.hpp"

void BatteryManagement::run()
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	tick_counter++;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60da      	str	r2, [r3, #12]
	toPercentage();
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f818 	bl	80041c0 <_ZN17BatteryManagement12toPercentageEv>

	if (tick_counter>=frequency_tick)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	8912      	ldrh	r2, [r2, #8]
 8004198:	4293      	cmp	r3, r2
 800419a:	d30a      	bcc.n	80041b2 <_ZN17BatteryManagement3runEv+0x3a>
	{
		HAL_ADC_Start_DMA(adc_port, &batteryVal,1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a18      	ldr	r0, [r3, #32]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3310      	adds	r3, #16
 80041a4:	2201      	movs	r2, #1
 80041a6:	4619      	mov	r1, r3
 80041a8:	f002 ffd8 	bl	800715c <HAL_ADC_Start_DMA>
		if (batteryVal<=BATERRY_MIN_3V2)
		{
			//buzz->beep(100,1,1,100);
		}

		tick_counter = 0;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	60da      	str	r2, [r3, #12]
	}
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	0000      	movs	r0, r0
 80041bc:	0000      	movs	r0, r0
	...

080041c0 <_ZN17BatteryManagement12toPercentageEv>:

void BatteryManagement::toPercentage()
{
 80041c0:	b5b0      	push	{r4, r5, r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	if(batteryVal>BATERRY_MAX_4V2)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	8812      	ldrh	r2, [r2, #0]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d906      	bls.n	80041e2 <_ZN17BatteryManagement12toPercentageEv+0x22>
	{
		batteryPercentage = 100;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a50      	ldr	r2, [pc, #320]	; (8004318 <_ZN17BatteryManagement12toPercentageEv+0x158>)
 80041d8:	615a      	str	r2, [r3, #20]
		batteryVoltage = 4.2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a4f      	ldr	r2, [pc, #316]	; (800431c <_ZN17BatteryManagement12toPercentageEv+0x15c>)
 80041de:	619a      	str	r2, [r3, #24]
	else
	{
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
	}
}
 80041e0:	e081      	b.n	80042e6 <_ZN17BatteryManagement12toPercentageEv+0x126>
	else if(batteryVal<BATERRY_MIN_3V2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	8852      	ldrh	r2, [r2, #2]
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d207      	bcs.n	80041fe <_ZN17BatteryManagement12toPercentageEv+0x3e>
		batteryPercentage = 0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	615a      	str	r2, [r3, #20]
		batteryVoltage = 3.2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a49      	ldr	r2, [pc, #292]	; (8004320 <_ZN17BatteryManagement12toPercentageEv+0x160>)
 80041fa:	619a      	str	r2, [r3, #24]
}
 80041fc:	e073      	b.n	80042e6 <_ZN17BatteryManagement12toPercentageEv+0x126>
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f92a 	bl	8000464 <__aeabi_ui2d>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	a136      	add	r1, pc, #216	; (adr r1, 80042f0 <_ZN17BatteryManagement12toPercentageEv+0x130>)
 8004216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800421a:	f7fb ffe5 	bl	80001e8 <__aeabi_dsub>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4614      	mov	r4, r2
 8004224:	461d      	mov	r5, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	885b      	ldrh	r3, [r3, #2]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc f926 	bl	8000484 <__aeabi_i2d>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4620      	mov	r0, r4
 800423e:	4629      	mov	r1, r5
 8004240:	f7fc fab4 	bl	80007ac <__aeabi_ddiv>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	a32a      	add	r3, pc, #168	; (adr r3, 80042f8 <_ZN17BatteryManagement12toPercentageEv+0x138>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fb ffcb 	bl	80001ec <__adddf3>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4610      	mov	r0, r2
 800425c:	4619      	mov	r1, r3
 800425e:	f7fc fc53 	bl	8000b08 <__aeabi_d2f>
 8004262:	4602      	mov	r2, r0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	619a      	str	r2, [r3, #24]
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc f91b 	bl	80004a8 <__aeabi_f2d>
 8004272:	a323      	add	r3, pc, #140	; (adr r3, 8004300 <_ZN17BatteryManagement12toPercentageEv+0x140>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fc fa98 	bl	80007ac <__aeabi_ddiv>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	ec43 2b17 	vmov	d7, r2, r3
 8004284:	2050      	movs	r0, #80	; 0x50
 8004286:	eeb0 0a47 	vmov.f32	s0, s14
 800428a:	eef0 0a67 	vmov.f32	s1, s15
 800428e:	f000 f866 	bl	800435e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004292:	ec51 0b10 	vmov	r0, r1, d0
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <_ZN17BatteryManagement12toPercentageEv+0x164>)
 800429c:	f7fb ffa6 	bl	80001ec <__adddf3>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	ec43 2b17 	vmov	d7, r2, r3
 80042a8:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8004308 <_ZN17BatteryManagement12toPercentageEv+0x148>
 80042ac:	eeb0 0a47 	vmov.f32	s0, s14
 80042b0:	eef0 0a67 	vmov.f32	s1, s15
 80042b4:	f00e fa6e 	bl	8012794 <pow>
 80042b8:	ec53 2b10 	vmov	r2, r3, d0
 80042bc:	a114      	add	r1, pc, #80	; (adr r1, 8004310 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 80042be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042c2:	f7fc fa73 	bl	80007ac <__aeabi_ddiv>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	a111      	add	r1, pc, #68	; (adr r1, 8004310 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 80042cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042d0:	f7fb ff8a 	bl	80001e8 <__aeabi_dsub>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	f7fc fc14 	bl	8000b08 <__aeabi_d2f>
 80042e0:	4602      	mov	r2, r0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	615a      	str	r2, [r3, #20]
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bdb0      	pop	{r4, r5, r7, pc}
 80042ee:	bf00      	nop
 80042f0:	00000000 	.word	0x00000000
 80042f4:	407c2000 	.word	0x407c2000
 80042f8:	9999999a 	.word	0x9999999a
 80042fc:	40099999 	.word	0x40099999
 8004300:	9999999a 	.word	0x9999999a
 8004304:	400d9999 	.word	0x400d9999
 8004308:	51eb851f 	.word	0x51eb851f
 800430c:	3fc51eb8 	.word	0x3fc51eb8
 8004310:	00000000 	.word	0x00000000
 8004314:	405ec000 	.word	0x405ec000
 8004318:	42c80000 	.word	0x42c80000
 800431c:	40866666 	.word	0x40866666
 8004320:	404ccccd 	.word	0x404ccccd
 8004324:	3ff00000 	.word	0x3ff00000

08004328 <_ZN17BatteryManagement8msToTickEt>:
{
	return batteryPercentage;
}

uint16_t BatteryManagement::msToTick(uint16_t ms)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 8004334:	887b      	ldrh	r3, [r7, #2]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	ed93 7a01 	vldr	s14, [r3, #4]
 8004344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800434c:	ee17 3a90 	vmov	r3, s15
 8004350:	b29b      	uxth	r3, r3
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	ed87 0b02 	vstr	d0, [r7, #8]
 8004368:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc f88a 	bl	8000484 <__aeabi_i2d>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	ec43 2b11 	vmov	d1, r2, r3
 8004378:	ed97 0b02 	vldr	d0, [r7, #8]
 800437c:	f00e fa0a 	bl	8012794 <pow>
 8004380:	eeb0 7a40 	vmov.f32	s14, s0
 8004384:	eef0 7a60 	vmov.f32	s15, s1
    }
 8004388:	eeb0 0a47 	vmov.f32	s0, s14
 800438c:	eef0 0a67 	vmov.f32	s1, s15
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <_ZN6Buzzer4beepEiii>:
 */

#include "Buzzer.hpp"

bool Buzzer::beep(int duration_ms,int freq_ms,int repetition_count)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
	if (!this->busy)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	7d9b      	ldrb	r3, [r3, #22]
 80043a8:	f083 0301 	eor.w	r3, r3, #1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d029      	beq.n	8004406 <_ZN6Buzzer4beepEiii+0x70>
	{
		this->busy = true;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	759a      	strb	r2, [r3, #22]

		this->counterEnd = this->msToTick(duration_ms);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4619      	mov	r1, r3
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f877 	bl	80044b2 <_ZN6Buzzer8msToTickEt>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	825a      	strh	r2, [r3, #18]
		this->freqTick = this->msToTick(freq_ms);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	4619      	mov	r1, r3
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f86d 	bl	80044b2 <_ZN6Buzzer8msToTickEt>
 80043d8:	4603      	mov	r3, r0
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	819a      	strh	r2, [r3, #12]
		this->repetitions = this->freqTick * repetition_count * 2U - 1U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	899a      	ldrh	r2, [r3, #12]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	fb12 f303 	smulbb	r3, r2, r3
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	829a      	strh	r2, [r3, #20]

		Buzz_on();
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f874 	bl	80044e8 <_ZN6Buzzer7Buzz_onEv>

		return busy;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	7d9b      	ldrb	r3, [r3, #22]
 8004404:	e001      	b.n	800440a <_ZN6Buzzer4beepEiii+0x74>
	}

	return busy;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	7d9b      	ldrb	r3, [r3, #22]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZN6Buzzer3runEv>:

void Buzzer::run()
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
	if (this->busy)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	7d9b      	ldrb	r3, [r3, #22]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d032      	beq.n	8004488 <_ZN6Buzzer3runEv+0x76>
	{
		this->counterStart++;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8a1b      	ldrh	r3, [r3, #16]
 8004426:	3301      	adds	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	821a      	strh	r2, [r3, #16]

		if ((this->repetitions > 0U) && (this->freqTick!=0U))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8a9b      	ldrh	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01c      	beq.n	8004470 <_ZN6Buzzer3runEv+0x5e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	899b      	ldrh	r3, [r3, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d018      	beq.n	8004470 <_ZN6Buzzer3runEv+0x5e>
		{
			if (!((this->counterStart/this->freqTick) % 2U))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8a1a      	ldrh	r2, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	899b      	ldrh	r3, [r3, #12]
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	b29b      	uxth	r3, r3
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <_ZN6Buzzer3runEv+0x4a>
			{
				this->Buzz_on();
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f847 	bl	80044e8 <_ZN6Buzzer7Buzz_onEv>
 800445a:	e002      	b.n	8004462 <_ZN6Buzzer3runEv+0x50>
			}
			else
			{
				this->Buzz_off();
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f853 	bl	8004508 <_ZN6Buzzer8Buzz_offEv>
			}
			this->repetitions--;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8a9b      	ldrh	r3, [r3, #20]
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	829a      	strh	r2, [r3, #20]
 800446e:	e002      	b.n	8004476 <_ZN6Buzzer3runEv+0x64>
		} else
		{
			this->Buzz_off();
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f849 	bl	8004508 <_ZN6Buzzer8Buzz_offEv>
		}

		if (this->counterStart >= this->counterEnd)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8a1a      	ldrh	r2, [r3, #16]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8a5b      	ldrh	r3, [r3, #18]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <_ZN6Buzzer3runEv+0x76>
		{
			this->stop();
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f804 	bl	8004490 <_ZN6Buzzer4stopEv>
		}
	}
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_ZN6Buzzer4stopEv>:

void Buzzer::stop()
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	this->busy = false;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	759a      	strb	r2, [r3, #22]
	this->counterStart = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	821a      	strh	r2, [r3, #16]
	this->Buzz_off();
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f82f 	bl	8004508 <_ZN6Buzzer8Buzz_offEv>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <_ZN6Buzzer8msToTickEt>:
{
	return busy;
}

uint16_t Buzzer::msToTick(uint16_t ms)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80044ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d6:	ee17 3a90 	vmov	r3, s15
 80044da:	b29b      	uxth	r3, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <_ZN6Buzzer7Buzz_onEv>:

void Buzzer::Buzz_on()
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
//#if DISABLE_ALL_BEEPS == 5
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80044f0:	2201      	movs	r2, #1
 80044f2:	2110      	movs	r1, #16
 80044f4:	4803      	ldr	r0, [pc, #12]	; (8004504 <_ZN6Buzzer7Buzz_onEv+0x1c>)
 80044f6:	f004 f87f 	bl	80085f8 <HAL_GPIO_WritePin>
//#endif
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40020000 	.word	0x40020000

08004508 <_ZN6Buzzer8Buzz_offEv>:

void Buzzer::Buzz_off()
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8004510:	2200      	movs	r2, #0
 8004512:	2110      	movs	r1, #16
 8004514:	4803      	ldr	r0, [pc, #12]	; (8004524 <_ZN6Buzzer8Buzz_offEv+0x1c>)
 8004516:	f004 f86f 	bl	80085f8 <HAL_GPIO_WritePin>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40020000 	.word	0x40020000

08004528 <_ZN7Timeout15setTimeoutValueEh>:
	uint8_t* getTimeoutCounter()
	{
		return &timeout_counter;
	}

	void setTimeoutValue(uint8_t value)
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	70fb      	strb	r3, [r7, #3]
	{
		timeout_value = value;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	709a      	strb	r2, [r3, #2]
	}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <_ZN7TimeoutC1Ev>:
class Timeout
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	705a      	strb	r2, [r3, #1]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	709a      	strb	r2, [r3, #2]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>:
 *      Author: DragosDarie
 */

#include "FrSkyRX.hpp"

FrSkyRX::FrSkyRX(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,Buzzer *buzz,uint8_t timeout):
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	603b      	str	r3, [r7, #0]
	currentState {FrSkyRXState::NOT_CONNECTED}
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ffe1 	bl	8004546 <_ZN7TimeoutC1Ev>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	220f      	movs	r2, #15
 8004588:	70da      	strb	r2, [r3, #3]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	711a      	strb	r2, [r3, #4]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
{
	FrSkyRX::uart_port = uart_port;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	609a      	str	r2, [r3, #8]
	FrSkyRX::uart_port_dma=uart_port_dma;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]
	FrSkyRX::buzz=buzz;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	611a      	str	r2, [r3, #16]

	setTimeoutValue(timeout);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	7e3a      	ldrb	r2, [r7, #24]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ffb1 	bl	8004528 <_ZN7Timeout15setTimeoutValueEh>
}
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <_ZN7FrSkyRX5beginEv>:

void FrSkyRX::begin()
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6898      	ldr	r0, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3314      	adds	r3, #20
 80045e0:	2219      	movs	r2, #25
 80045e2:	4619      	mov	r1, r3
 80045e4:	f008 f9ea 	bl	800c9bc <HAL_UART_Receive_DMA>
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_ZN7FrSkyRX6updateEv>:

void FrSkyRX::update()
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[24]==this->END_BIT);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	7d1a      	ldrb	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	78db      	ldrb	r3, [r3, #3]
 8004600:	429a      	cmp	r2, r3
 8004602:	d108      	bne.n	8004616 <_ZN7FrSkyRX6updateEv+0x26>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	791b      	ldrb	r3, [r3, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d101      	bne.n	8004616 <_ZN7FrSkyRX6updateEv+0x26>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <_ZN7FrSkyRX6updateEv+0x28>
 8004616:	2300      	movs	r3, #0
 8004618:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 800461a:	7bbb      	ldrb	r3, [r7, #14]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d010      	beq.n	8004642 <_ZN7FrSkyRX6updateEv+0x52>
	{
		this->updateValues();
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f964 	bl	80048ee <_ZN7FrSkyRX12updateValuesEv>
		this->processStateMachine();
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f85a 	bl	80046e0 <_ZN7FrSkyRX19processStateMachineEv>

		if (this->isDisconnected())
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fb1f 	bl	8004c70 <_ZNK7FrSkyRX14isDisconnectedEv>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d034      	beq.n	80046a2 <_ZN7FrSkyRX6updateEv+0xb2>
			this->currentState = FrSkyRXState::TIMEOUT;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2204      	movs	r2, #4
 800463c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8004640:	e02f      	b.n	80046a2 <_ZN7FrSkyRX6updateEv+0xb2>
	}
	else if (this->wrongDataReceived==false)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004648:	2b00      	cmp	r3, #0
 800464a:	d12a      	bne.n	80046a2 <_ZN7FrSkyRX6updateEv+0xb2>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800464c:	2300      	movs	r3, #0
 800464e:	73fb      	strb	r3, [r7, #15]
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	2b17      	cmp	r3, #23
 8004654:	d825      	bhi.n	80046a2 <_ZN7FrSkyRX6updateEv+0xb2>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	7d1a      	ldrb	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	791b      	ldrb	r3, [r3, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d119      	bne.n	800469a <_ZN7FrSkyRX6updateEv+0xaa>
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	3301      	adds	r3, #1
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	7d1a      	ldrb	r2, [r3, #20]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	78db      	ldrb	r3, [r3, #3]
 8004674:	429a      	cmp	r2, r3
 8004676:	d110      	bne.n	800469a <_ZN7FrSkyRX6updateEv+0xaa>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6898      	ldr	r0, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f103 0114 	add.w	r1, r3, #20
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	b29b      	uxth	r3, r3
 8004686:	331a      	adds	r3, #26
 8004688:	b29b      	uxth	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	f008 f996 	bl	800c9bc <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				return;
 8004698:	e01e      	b.n	80046d8 <_ZN7FrSkyRX6updateEv+0xe8>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	3301      	adds	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	e7d6      	b.n	8004650 <_ZN7FrSkyRX6updateEv+0x60>
			}
		}
	}

	if (this->wrongDataReceived == true)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d103      	bne.n	80046b4 <_ZN7FrSkyRX6updateEv+0xc4>
		this->wrongDataReceived = false;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6898      	ldr	r0, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3314      	adds	r3, #20
 80046bc:	2219      	movs	r2, #25
 80046be:	4619      	mov	r1, r3
 80046c0:	f008 f97c 	bl	800c9bc <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0208 	bic.w	r2, r2, #8
 80046d6:	601a      	str	r2, [r3, #0]
}
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <_ZN7FrSkyRX19processStateMachineEv>:

void FrSkyRX::processStateMachine()
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	switch (this->currentState)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	f200 80e3 	bhi.w	80048ba <_ZN7FrSkyRX19processStateMachineEv+0x1da>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <_ZN7FrSkyRX19processStateMachineEv+0x1c>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004711 	.word	0x08004711
 8004700:	08004765 	.word	0x08004765
 8004704:	0800479b 	.word	0x0800479b
 8004708:	080047df 	.word	0x080047df
 800470c:	080048b1 	.word	0x080048b1
	{
	case FrSkyRXState::NOT_CONNECTED:
		if ((this->lu == 0U) && (this->throttle < 300U))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11b      	bne.n	8004752 <_ZN7FrSkyRX19processStateMachineEv+0x72>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004720:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80048c4 <_ZN7FrSkyRX19processStateMachineEv+0x1e4>
 8004724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472c:	d511      	bpl.n	8004752 <_ZN7FrSkyRX19processStateMachineEv+0x72>
		{
			this->currentState = FrSkyRXState::CONNECTED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			buzz->stop();
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fea8 	bl	8004490 <_ZN6Buzzer4stopEv>
			buzz->beep(600U,100U,3U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6918      	ldr	r0, [r3, #16]
 8004744:	2303      	movs	r3, #3
 8004746:	2264      	movs	r2, #100	; 0x64
 8004748:	f44f 7116 	mov.w	r1, #600	; 0x258
 800474c:	f7ff fe23 	bl	8004396 <_ZN6Buzzer4beepEiii>
		}
		else
		{
			buzz->beep(3000U,100U,2U);
		}
		break;
 8004750:	e0b3      	b.n	80048ba <_ZN7FrSkyRX19processStateMachineEv+0x1da>
			buzz->beep(3000U,100U,2U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6918      	ldr	r0, [r3, #16]
 8004756:	2302      	movs	r3, #2
 8004758:	2264      	movs	r2, #100	; 0x64
 800475a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800475e:	f7ff fe1a 	bl	8004396 <_ZN6Buzzer4beepEiii>
		break;
 8004762:	e0aa      	b.n	80048ba <_ZN7FrSkyRX19processStateMachineEv+0x1da>
	case FrSkyRXState::CONNECTED:
		if (this->lu == 1U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800476a:	2b01      	cmp	r3, #1
 800476c:	f040 80a2 	bne.w	80048b4 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
		{
			TIM3 -> CCR1 = 3000;
 8004770:	4b55      	ldr	r3, [pc, #340]	; (80048c8 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 8004772:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004776:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3000;
 8004778:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 800477a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3000;
 8004780:	4b51      	ldr	r3, [pc, #324]	; (80048c8 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 8004782:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004786:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3000;
 8004788:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 800478a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800478e:	641a      	str	r2, [r3, #64]	; 0x40
			this->currentState = FrSkyRXState::ARMED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		}
		break;
 8004798:	e08c      	b.n	80048b4 <_ZN7FrSkyRX19processStateMachineEv+0x1d4>
	case FrSkyRXState::ARMED:
		if (this->lu == 2U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	f040 8089 	bne.w	80048b8 <_ZN7FrSkyRX19processStateMachineEv+0x1d8>
		{
			TIM3 -> CCR1 = 3300;
 80047a6:	4b48      	ldr	r3, [pc, #288]	; (80048c8 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 80047a8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80047ac:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3 -> CCR2 = 3300;
 80047ae:	4b46      	ldr	r3, [pc, #280]	; (80048c8 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 80047b0:	f640 42e4 	movw	r2, #3300	; 0xce4
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3 -> CCR3 = 3300;
 80047b6:	4b44      	ldr	r3, [pc, #272]	; (80048c8 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 80047b8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3 -> CCR4 = 3300;
 80047be:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <_ZN7FrSkyRX19processStateMachineEv+0x1e8>)
 80047c0:	f640 42e4 	movw	r2, #3300	; 0xce4
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
			buzz->beep(200U,100U,1U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6918      	ldr	r0, [r3, #16]
 80047ca:	2301      	movs	r3, #1
 80047cc:	2264      	movs	r2, #100	; 0x64
 80047ce:	21c8      	movs	r1, #200	; 0xc8
 80047d0:	f7ff fde1 	bl	8004396 <_ZN6Buzzer4beepEiii>
			this->currentState = FrSkyRXState::READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2203      	movs	r2, #3
 80047d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		}
		break;
 80047dc:	e06c      	b.n	80048b8 <_ZN7FrSkyRX19processStateMachineEv+0x1d8>
	case FrSkyRXState::READY:
		target_roll = -static_cast<float>(mid_position - raw_roll) * roll_scaleFactor;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80047e4:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 80047e8:	ee07 3a90 	vmov	s15, r3
 80047ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f0:	eef1 7a67 	vneg.f32	s15, s15
 80047f4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80048cc <_ZN7FrSkyRX19processStateMachineEv+0x1ec>
 80047f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		target_pitch = static_cast<float>(mid_position - raw_pitch) * pitch_scaleFactor;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004808:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004814:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80048cc <_ZN7FrSkyRX19processStateMachineEv+0x1ec>
 8004818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		target_yaw = static_cast<float>(mid_position - raw_yaw) * yaw_scaleFactor;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8004828:	f5c3 7378 	rsb	r3, r3, #992	; 0x3e0
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004834:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80048d0 <_ZN7FrSkyRX19processStateMachineEv+0x1f0>
 8004838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

		target_roll = ((target_roll > 2.0F) || (target_roll < -2.0F)) ? target_roll : 0.0F;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004848:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800484c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	dc09      	bgt.n	800486a <_ZN7FrSkyRX19processStateMachineEv+0x18a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800485c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	d502      	bpl.n	8004870 <_ZN7FrSkyRX19processStateMachineEv+0x190>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	e001      	b.n	8004874 <_ZN7FrSkyRX19processStateMachineEv+0x194>
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6713      	str	r3, [r2, #112]	; 0x70
		target_pitch = ((target_pitch > 2.0F) || (target_pitch < -2.0F)) ? target_pitch : 0.0F;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800487e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488a:	dc09      	bgt.n	80048a0 <_ZN7FrSkyRX19processStateMachineEv+0x1c0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004892:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	d502      	bpl.n	80048a6 <_ZN7FrSkyRX19processStateMachineEv+0x1c6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a4:	e001      	b.n	80048aa <_ZN7FrSkyRX19processStateMachineEv+0x1ca>
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6753      	str	r3, [r2, #116]	; 0x74
		break;
 80048ae:	e004      	b.n	80048ba <_ZN7FrSkyRX19processStateMachineEv+0x1da>
	case FrSkyRXState::TIMEOUT:
		break;
 80048b0:	bf00      	nop
 80048b2:	e002      	b.n	80048ba <_ZN7FrSkyRX19processStateMachineEv+0x1da>
		break;
 80048b4:	bf00      	nop
 80048b6:	e000      	b.n	80048ba <_ZN7FrSkyRX19processStateMachineEv+0x1da>
		break;
 80048b8:	bf00      	nop
	}
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	43960000 	.word	0x43960000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	3c23d70a 	.word	0x3c23d70a
 80048d0:	3a83126f 	.word	0x3a83126f

080048d4 <_ZNK7FrSkyRX15getCurrentStateEv>:

FrSkyRXState FrSkyRX::getCurrentState() const
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	return this->currentState;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <_ZN7FrSkyRX12updateValuesEv>:

void FrSkyRX::updateValues()
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	this->channels[0]  = static_cast<int16_t>(rx_buff[1] | (rx_buff[2] << 8 & 0x07FF));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	7d5b      	ldrb	r3, [r3, #21]
 80048fa:	b21a      	sxth	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7d9b      	ldrb	r3, [r3, #22]
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	b21b      	sxth	r3, r3
 8004904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004908:	b21b      	sxth	r3, r3
 800490a:	4313      	orrs	r3, r2
 800490c:	b21b      	sxth	r3, r3
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	this->channels[1]  = static_cast<int16_t>(rx_buff[2] >> 3 | (rx_buff[3] << 5 & 0x07FF));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7d9b      	ldrb	r3, [r3, #22]
 800491a:	08db      	lsrs	r3, r3, #3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	b21a      	sxth	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	7ddb      	ldrb	r3, [r3, #23]
 8004924:	015b      	lsls	r3, r3, #5
 8004926:	b21b      	sxth	r3, r3
 8004928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800492c:	b21b      	sxth	r3, r3
 800492e:	4313      	orrs	r3, r2
 8004930:	b21b      	sxth	r3, r3
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	this->channels[2]  = static_cast<int16_t>(rx_buff[3] >> 6 | (rx_buff[4] << 2 | (rx_buff[5] << 10 & 0x07FF)));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	7ddb      	ldrb	r3, [r3, #23]
 800493e:	099b      	lsrs	r3, r3, #6
 8004940:	b2db      	uxtb	r3, r3
 8004942:	b21a      	sxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	7e1b      	ldrb	r3, [r3, #24]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	b219      	sxth	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7e5b      	ldrb	r3, [r3, #25]
 8004950:	029b      	lsls	r3, r3, #10
 8004952:	b21b      	sxth	r3, r3
 8004954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004958:	b21b      	sxth	r3, r3
 800495a:	430b      	orrs	r3, r1
 800495c:	b21b      	sxth	r3, r3
 800495e:	4313      	orrs	r3, r2
 8004960:	b21b      	sxth	r3, r3
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	this->channels[3]  = static_cast<int16_t>(rx_buff[5] >> 1 | (rx_buff[6] << 7 & 0x07FF));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7e5b      	ldrb	r3, [r3, #25]
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	b21a      	sxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7e9b      	ldrb	r3, [r3, #26]
 8004978:	01db      	lsls	r3, r3, #7
 800497a:	b21b      	sxth	r3, r3
 800497c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004980:	b21b      	sxth	r3, r3
 8004982:	4313      	orrs	r3, r2
 8004984:	b21b      	sxth	r3, r3
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	this->channels[4]  = static_cast<int16_t>(rx_buff[6] >> 4 | (rx_buff[7] << 4 & 0x07FF));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	7e9b      	ldrb	r3, [r3, #26]
 8004992:	091b      	lsrs	r3, r3, #4
 8004994:	b2db      	uxtb	r3, r3
 8004996:	b21a      	sxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7edb      	ldrb	r3, [r3, #27]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	b21b      	sxth	r3, r3
 80049a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049a4:	b21b      	sxth	r3, r3
 80049a6:	4313      	orrs	r3, r2
 80049a8:	b21b      	sxth	r3, r3
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	this->channels[5]  = static_cast<int16_t>(rx_buff[7] >> 7 | (rx_buff[8] << 1 | (rx_buff[9] << 9 & 0x07FF)));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	7edb      	ldrb	r3, [r3, #27]
 80049b6:	09db      	lsrs	r3, r3, #7
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	b21a      	sxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	7f1b      	ldrb	r3, [r3, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	b219      	sxth	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	7f5b      	ldrb	r3, [r3, #29]
 80049c8:	025b      	lsls	r3, r3, #9
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049d0:	b21b      	sxth	r3, r3
 80049d2:	430b      	orrs	r3, r1
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	4313      	orrs	r3, r2
 80049d8:	b21b      	sxth	r3, r3
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	this->channels[6]  = static_cast<int16_t>(rx_buff[9] >> 2 | (rx_buff[10] << 6 & 0x07FF));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	7f5b      	ldrb	r3, [r3, #29]
 80049e6:	089b      	lsrs	r3, r3, #2
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	b21a      	sxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	7f9b      	ldrb	r3, [r3, #30]
 80049f0:	019b      	lsls	r3, r3, #6
 80049f2:	b21b      	sxth	r3, r3
 80049f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049f8:	b21b      	sxth	r3, r3
 80049fa:	4313      	orrs	r3, r2
 80049fc:	b21b      	sxth	r3, r3
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	this->channels[7]  = static_cast<int16_t>(rx_buff[10] >> 5 | (rx_buff[11] << 3 & 0x07FF));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7f9b      	ldrb	r3, [r3, #30]
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	b21a      	sxth	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7fdb      	ldrb	r3, [r3, #31]
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	b21b      	sxth	r3, r3
 8004a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a1c:	b21b      	sxth	r3, r3
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	this->channels[8]  = static_cast<int16_t>(rx_buff[12] | (rx_buff[13] << 8 & 0x07FF));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a30:	b21a      	sxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	b21b      	sxth	r3, r3
 8004a3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a40:	b21b      	sxth	r3, r3
 8004a42:	4313      	orrs	r3, r2
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	this->channels[9]  = static_cast<int16_t>(rx_buff[13] >> 3 | (rx_buff[14] << 5 & 0x07FF));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	b21a      	sxth	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004a60:	015b      	lsls	r3, r3, #5
 8004a62:	b21b      	sxth	r3, r3
 8004a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a68:	b21b      	sxth	r3, r3
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	b21b      	sxth	r3, r3
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	this->channels[10] = static_cast<int16_t>(rx_buff[14] >> 6 | (rx_buff[15] << 2 | (rx_buff[16] << 10 & 0x07FF)));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004a7c:	099b      	lsrs	r3, r3, #6
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	b21a      	sxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	b219      	sxth	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a92:	029b      	lsls	r3, r3, #10
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a9a:	b21b      	sxth	r3, r3
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	b21b      	sxth	r3, r3
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	b21b      	sxth	r3, r3
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	this->channels[11] = static_cast<int16_t>(rx_buff[16] >> 1 | (rx_buff[17] << 7 & 0x07FF));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	b21a      	sxth	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004abe:	01db      	lsls	r3, r3, #7
 8004ac0:	b21b      	sxth	r3, r3
 8004ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ac6:	b21b      	sxth	r3, r3
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	this->channels[12] = static_cast<int16_t>(rx_buff[17] >> 4 | (rx_buff[18] << 4 & 0x07FF));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ada:	091b      	lsrs	r3, r3, #4
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	b21a      	sxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aee:	b21b      	sxth	r3, r3
 8004af0:	4313      	orrs	r3, r2
 8004af2:	b21b      	sxth	r3, r3
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	this->channels[13] = static_cast<int16_t>(rx_buff[18] >> 7 | (rx_buff[19] << 1 | (rx_buff[20] << 9 & 0x07FF)));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004b02:	09db      	lsrs	r3, r3, #7
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	b21a      	sxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	b219      	sxth	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b18:	025b      	lsls	r3, r3, #9
 8004b1a:	b21b      	sxth	r3, r3
 8004b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b20:	b21b      	sxth	r3, r3
 8004b22:	430b      	orrs	r3, r1
 8004b24:	b21b      	sxth	r3, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	b21b      	sxth	r3, r3
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	this->channels[14] = static_cast<int16_t>(rx_buff[20] >> 2 | (rx_buff[21] << 6 & 0x07FF));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b38:	089b      	lsrs	r3, r3, #2
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	b21a      	sxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	b21b      	sxth	r3, r3
 8004b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b4c:	b21b      	sxth	r3, r3
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	b21b      	sxth	r3, r3
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	this->channels[15] = static_cast<int16_t>(rx_buff[21] >> 5 | (rx_buff[22] << 3 & 0x07FF));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	b21a      	sxth	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b74:	b21b      	sxth	r3, r3
 8004b76:	4313      	orrs	r3, r2
 8004b78:	b21b      	sxth	r3, r3
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	this->throttle = static_cast<float>(channels[2]);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	this->raw_roll = this->channels[0];
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	this->raw_pitch = this->channels[1];
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	this->raw_yaw = this->channels[3];
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	if (this->channels[4]<1000)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bc4:	d204      	bcs.n	8004bd0 <_ZN7FrSkyRX12updateValuesEv+0x2e2>
		this->lb=0;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8004bce:	e003      	b.n	8004bd8 <_ZN7FrSkyRX12updateValuesEv+0x2ea>
	else
		this->lb=1;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

	if (this->channels[7]<1000)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be2:	d204      	bcs.n	8004bee <_ZN7FrSkyRX12updateValuesEv+0x300>
		this->rb=0;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8004bec:	e003      	b.n	8004bf6 <_ZN7FrSkyRX12updateValuesEv+0x308>
	else
		this->rb=1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	if (this->channels[5]<500)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c00:	d204      	bcs.n	8004c0c <_ZN7FrSkyRX12updateValuesEv+0x31e>
		this->lu = 0;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004c0a:	e00f      	b.n	8004c2c <_ZN7FrSkyRX12updateValuesEv+0x33e>
	else if(this->channels[5]<1500)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c12:	f240 52db 	movw	r2, #1499	; 0x5db
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d804      	bhi.n	8004c24 <_ZN7FrSkyRX12updateValuesEv+0x336>
		this->lu = 1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004c22:	e003      	b.n	8004c2c <_ZN7FrSkyRX12updateValuesEv+0x33e>
	else
		this->lu = 2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

	if (this->channels[6]<500)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004c32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c36:	d204      	bcs.n	8004c42 <_ZN7FrSkyRX12updateValuesEv+0x354>
		this->ru = 0;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	else if(this->channels[6]<1500)
		this->ru = 1;
	else
		this->ru = 2;
}
 8004c40:	e00f      	b.n	8004c62 <_ZN7FrSkyRX12updateValuesEv+0x374>
	else if(this->channels[6]<1500)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004c48:	f240 52db 	movw	r2, #1499	; 0x5db
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d804      	bhi.n	8004c5a <_ZN7FrSkyRX12updateValuesEv+0x36c>
		this->ru = 1;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 8004c58:	e003      	b.n	8004c62 <_ZN7FrSkyRX12updateValuesEv+0x374>
		this->ru = 2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <_ZNK7FrSkyRX14isDisconnectedEv>:

bool FrSkyRX::isDisconnected() const
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	const bool failsafe =
			(this->rb == 0) &&
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
			(this->ru == 0) &&
			(this->lb == 0) &&
			(this->lu == 0) &&
			(this->throttle > 1800) &&
			(this->raw_roll > 1800) &&
			(this->raw_pitch > 1800) &&
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d12c      	bne.n	8004cdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->ru == 0) &&
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
			(this->rb == 0) &&
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d127      	bne.n	8004cdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lb == 0) &&
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
			(this->ru == 0) &&
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d122      	bne.n	8004cdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->lu == 0) &&
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
			(this->lb == 0) &&
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11d      	bne.n	8004cdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->throttle > 1800) &&
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
			(this->lu == 0) &&
 8004ca6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004cf0 <_ZNK7FrSkyRX14isDisconnectedEv+0x80>
 8004caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb2:	dd13      	ble.n	8004cdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_roll > 1800) &&
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
			(this->throttle > 1800) &&
 8004cba:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004cbe:	d90d      	bls.n	8004cdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_pitch > 1800) &&
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
			(this->raw_roll > 1800) &&
 8004cc6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004cca:	d907      	bls.n	8004cdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
			(this->raw_yaw > 1800);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
			(this->raw_pitch > 1800) &&
 8004cd2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004cd6:	d901      	bls.n	8004cdc <_ZNK7FrSkyRX14isDisconnectedEv+0x6c>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <_ZNK7FrSkyRX14isDisconnectedEv+0x6e>
 8004cdc:	2300      	movs	r3, #0
	const bool failsafe =
 8004cde:	73fb      	strb	r3, [r7, #15]

	return failsafe;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	44e10000 	.word	0x44e10000

08004cf4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f805 	bl	8004d2a <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <_ZNSt15_Rb_tree_header8_M_resetEv>:
    _M_reset()
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
      _M_header._M_parent = 0;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
    }
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>:
      _Rb_tree() = default;
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f8bd 	bl	8004ee0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>:
      set() = default;
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ffeb 	bl	8004d56 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f8b8 	bl	8004f0a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff ffeb 	bl	8004d8a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <_ZN4HC05C1EP20__UART_HandleTypeDef>:
 *      Author: DragosDarie
 */

#include "HC05.hpp"

HC05::HC05(UART_HandleTypeDef *uart_port)
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff ffd0 	bl	8004d70 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	331c      	adds	r3, #28
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff ffe5 	bl	8004da4 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3328      	adds	r3, #40	; 0x28
 8004dde:	2264      	movs	r2, #100	; 0x64
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f00f fb20 	bl	8014428 <memset>
{
	HC05::uart_port = uart_port;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	619a      	str	r2, [r3, #24]
}
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <_ZN4HC054sendEv>:

void HC05::send()
{
 8004df8:	b5b0      	push	{r4, r5, r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)USART1_TxBuffer, strlen(USART1_TxBuffer));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699c      	ldr	r4, [r3, #24]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3328      	adds	r3, #40	; 0x28
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fb f9de 	bl	80001d0 <strlen>
 8004e14:	4603      	mov	r3, r0
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f007 fd4f 	bl	800c8c0 <HAL_UART_Transmit_DMA>
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004e2c <_ZN4HC0519printfSensorsValuesEv>:
{
	senList.push_back(sen);
}

void HC05::printfSensorsValues()
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	strcpy(USART1_TxBuffer,"");
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3328      	adds	r3, #40	; 0x28
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]

	for (int i=0;i<(int)senList.size();i++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	331c      	adds	r3, #28
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 f870 	bl	8004f2a <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4293      	cmp	r3, r2
 8004e52:	bfb4      	ite	lt
 8004e54:	2301      	movlt	r3, #1
 8004e56:	2300      	movge	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d019      	beq.n	8004e92 <_ZN4HC0519printfSensorsValuesEv+0x66>
	{
		strcat(USART1_TxBuffer,senList[i]->getSensorValues_str(senorsList));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	331c      	adds	r3, #28
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f86c 	bl	8004f4a <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>
 8004e72:	4603      	mov	r3, r0
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	4790      	blx	r2
 8004e80:	4603      	mov	r3, r0
 8004e82:	4619      	mov	r1, r3
 8004e84:	4620      	mov	r0, r4
 8004e86:	f00f fc0b 	bl	80146a0 <strcat>
	for (int i=0;i<(int)senList.size();i++)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e7d6      	b.n	8004e40 <_ZN4HC0519printfSensorsValuesEv+0x14>
	}

	strcat(USART1_TxBuffer,"\n\r");
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7fb f999 	bl	80001d0 <strlen>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4423      	add	r3, r4
 8004ea2:	4a06      	ldr	r2, [pc, #24]	; (8004ebc <_ZN4HC0519printfSensorsValuesEv+0x90>)
 8004ea4:	8811      	ldrh	r1, [r2, #0]
 8004ea6:	7892      	ldrb	r2, [r2, #2]
 8004ea8:	8019      	strh	r1, [r3, #0]
 8004eaa:	709a      	strb	r2, [r3, #2]

	send();
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ffa3 	bl	8004df8 <_ZN4HC054sendEv>
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd90      	pop	{r4, r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	0801484c 	.word	0x0801484c

08004ec0 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>:

void HC05::addSensorParameter(HC05::SENSOR_DATA_PARAMETER sen)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
	this->senorsList.insert(sen);
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	463a      	mov	r2, r7
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f849 	bl	8004f6a <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f858 	bl	8004f9e <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f860 	bl	8004fb6 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff ff06 	bl	8004d0c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f85a 	bl	8004fcc <_ZNSaIP15PrintableSensorEC1Ev>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 f862 	bl	8004fe4 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	109b      	asrs	r3, r3, #2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
      }
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>:
      insert(const value_type& __x)
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
	  _M_t._M_insert_unique(__x);
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	f107 0310 	add.w	r3, r7, #16
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f844 	bl	800500c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>
	return std::pair<iterator, bool>(__p.first, __p.second);
 8004f84:	f107 0310 	add.w	r3, r7, #16
 8004f88:	1d1a      	adds	r2, r3, #4
 8004f8a:	f107 0310 	add.w	r3, r7, #16
 8004f8e:	4619      	mov	r1, r3
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f88a 	bl	80050aa <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>
      }
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f89a 	bl	80050e0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      _Rb_tree_key_compare()
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
      { }
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <_ZNSaIP15PrintableSensorEC1Ev>:
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f88e 	bl	80050f6 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
	{ }
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800500c:	b5b0      	push	{r4, r5, r7, lr}
 800500e:	b08e      	sub	sp, #56	; 0x38
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 8005018:	f107 031c 	add.w	r3, r7, #28
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff f887 	bl	8004132 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8005024:	4602      	mov	r2, r0
 8005026:	f107 0314 	add.w	r3, r7, #20
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 f86d 	bl	800510c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>
      if (__res.second)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d022      	beq.n	800507e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 8005038:	f107 0310 	add.w	r3, r7, #16
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f8e9 	bl	8005216 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>
	  return _Res(_M_insert_(__res.first, __res.second,
 8005044:	697c      	ldr	r4, [r7, #20]
 8005046:	69bd      	ldr	r5, [r7, #24]
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f8f3 	bl	8005234 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 800504e:	4602      	mov	r2, r0
 8005050:	f107 0310 	add.w	r3, r7, #16
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	462a      	mov	r2, r5
 800505a:	4621      	mov	r1, r4
 800505c:	68b8      	ldr	r0, [r7, #8]
 800505e:	f000 f8f4 	bl	800524a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>
 8005062:	4603      	mov	r3, r0
 8005064:	623b      	str	r3, [r7, #32]
		      true);
 8005066:	2301      	movs	r3, #1
 8005068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800506c:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8005070:	f107 0320 	add.w	r3, r7, #32
 8005074:	4619      	mov	r1, r3
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f930 	bl	80052dc <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 800507c:	e011      	b.n	80050a2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff f836 	bl	80040f8 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 800508c:	2300      	movs	r3, #0
 800508e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005092:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8005096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800509a:	4619      	mov	r1, r3
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f91d 	bl	80052dc <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	3730      	adds	r7, #48	; 0x30
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bdb0      	pop	{r4, r5, r7, pc}

080050aa <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80050aa:	b590      	push	{r4, r7, lr}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80050b6:	68fc      	ldr	r4, [r7, #12]
 80050b8:	68b8      	ldr	r0, [r7, #8]
 80050ba:	f000 f928 	bl	800530e <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>
 80050be:	4603      	mov	r3, r0
 80050c0:	4619      	mov	r1, r3
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7fe ff2e 	bl	8003f24 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f92b 	bl	8005324 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80050ce:	4603      	mov	r3, r0
 80050d0:	781a      	ldrb	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	711a      	strb	r2, [r3, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd90      	pop	{r4, r7, pc}

080050e0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>:
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b08b      	sub	sp, #44	; 0x2c
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8005118:	68b8      	ldr	r0, [r7, #8]
 800511a:	f7fe ff24 	bl	8003f66 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 800511e:	4603      	mov	r3, r0
 8005120:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8005122:	68b8      	ldr	r0, [r7, #8]
 8005124:	f7fe ff2b 	bl	8003f7e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8005128:	4603      	mov	r3, r0
 800512a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d020      	beq.n	800517a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6e>
	  __y = __x;
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800513c:	68bc      	ldr	r4, [r7, #8]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe ffae 	bl	80040a2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8005146:	4603      	mov	r3, r0
 8005148:	461a      	mov	r2, r3
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4620      	mov	r0, r4
 800514e:	f7fe ff84 	bl	800405a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8005152:	4603      	mov	r3, r0
 8005154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8005158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x60>
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe ffb0 	bl	80040c8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005168:	4603      	mov	r3, r0
 800516a:	e004      	b.n	8005176 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6a>
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe ffb6 	bl	80040e0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005174:	4603      	mov	r3, r0
 8005176:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8005178:	e7db      	b.n	8005132 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x26>
      iterator __j = iterator(__y);
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe ffb8 	bl	80040f8 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8005188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01d      	beq.n	80051cc <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xc0>
	  if (__j == begin())
 8005190:	68b8      	ldr	r0, [r7, #8]
 8005192:	f000 f8d2 	bl	800533a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>
 8005196:	4603      	mov	r3, r0
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	f107 021c 	add.w	r2, r7, #28
 800519e:	f107 0310 	add.w	r3, r7, #16
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe ff38 	bl	800401a <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xb6>
	    return _Res(__x, __y);
 80051b0:	f107 0214 	add.w	r2, r7, #20
 80051b4:	f107 0318 	add.w	r3, r7, #24
 80051b8:	4619      	mov	r1, r3
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f8ce 	bl	800535c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 80051c0:	e025      	b.n	800520e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
	    --__j;
 80051c2:	f107 0310 	add.w	r3, r7, #16
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 f8e1 	bl	800538e <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80051cc:	68bc      	ldr	r4, [r7, #8]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe ff36 	bl	8004042 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80051d6:	4603      	mov	r3, r0
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	4619      	mov	r1, r3
 80051dc:	4620      	mov	r0, r4
 80051de:	f7fe ff3c 	bl	800405a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xee>
	return _Res(__x, __y);
 80051e8:	f107 0214 	add.w	r2, r7, #20
 80051ec:	f107 0318 	add.w	r3, r7, #24
 80051f0:	4619      	mov	r1, r3
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 f8b2 	bl	800535c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 80051f8:	e009      	b.n	800520e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
      return _Res(__j._M_node, 0);
 80051fa:	2300      	movs	r3, #0
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	f107 0220 	add.w	r2, r7, #32
 8005202:	f107 0310 	add.w	r3, r7, #16
 8005206:	4619      	mov	r1, r3
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f8d1 	bl	80053b0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	372c      	adds	r7, #44	; 0x2c
 8005212:	46bd      	mov	sp, r7
 8005214:	bd90      	pop	{r4, r7, pc}

08005216 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>:
	_Alloc_node(_Rb_tree& __t)
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800524a:	b5b0      	push	{r4, r5, r7, lr}
 800524c:	b088      	sub	sp, #32
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d11a      	bne.n	8005294 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7fe fe8d 	bl	8003f7e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8005264:	4602      	mov	r2, r0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4293      	cmp	r3, r2
 800526a:	d013      	beq.n	8005294 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800526c:	68fc      	ldr	r4, [r7, #12]
 800526e:	f107 0310 	add.w	r3, r7, #16
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe ff5c 	bl	8004132 <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 800527a:	4605      	mov	r5, r0
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fe fee0 	bl	8004042 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005282:	4603      	mov	r3, r0
 8005284:	461a      	mov	r2, r3
 8005286:	4629      	mov	r1, r5
 8005288:	4620      	mov	r0, r4
 800528a:	f7fe fee6 	bl	800405a <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4e>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x50>
 8005298:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800529a:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800529c:	6838      	ldr	r0, [r7, #0]
 800529e:	f7ff ffc9 	bl	8005234 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4619      	mov	r1, r3
 80052a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052a8:	f000 f898 	bl	80053dc <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>
 80052ac:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80052b2:	7ff8      	ldrb	r0, [r7, #31]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	69b9      	ldr	r1, [r7, #24]
 80052b8:	f00d f959 	bl	801256e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80052c6:	f107 0314 	add.w	r3, r7, #20
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe ff13 	bl	80040f8 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 80052d2:	697b      	ldr	r3, [r7, #20]
      }
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bdb0      	pop	{r4, r5, r7, pc}

080052dc <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80052e8:	68b8      	ldr	r0, [r7, #8]
 80052ea:	f000 f88b 	bl	8005404 <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>
 80052ee:	4602      	mov	r2, r0
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f88f 	bl	800541a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80052fc:	4603      	mov	r3, r0
 80052fe:	781a      	ldrb	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	711a      	strb	r2, [r3, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	f107 030c 	add.w	r3, r7, #12
 800534a:	4611      	mov	r1, r2
 800534c:	4618      	mov	r0, r3
 800534e:	f7fe fed3 	bl	80040f8 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005368:	68b8      	ldr	r0, [r7, #8]
 800536a:	f000 f87a 	bl	8005462 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>
 800536e:	4603      	mov	r3, r0
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f87e 	bl	8005478 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800537c:	4603      	mov	r3, r0
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f00d f8e5 	bl	801256a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80053a0:	4602      	mov	r2, r0
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
	return *this;
 80053a6:	687b      	ldr	r3, [r7, #4]
      }
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 80053bc:	68b8      	ldr	r0, [r7, #8]
 80053be:	f000 f85b 	bl	8005478 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80053c2:	4603      	mov	r3, r0
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>:
	  operator()(_Arg&& __arg) const
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681c      	ldr	r4, [r3, #0]
 80053ea:	6838      	ldr	r0, [r7, #0]
 80053ec:	f7ff ff22 	bl	8005234 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4619      	mov	r1, r3
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 f84a 	bl	800548e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>
 80053fa:	4603      	mov	r3, r0
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bd90      	pop	{r4, r7, pc}

08005404 <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr()
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3310      	adds	r3, #16
 8005452:	4618      	mov	r0, r3
 8005454:	f000 f832 	bl	80054bc <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8005458:	4603      	mov	r3, r0
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f81b 	bl	80054d4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>
 800549e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80054a0:	6838      	ldr	r0, [r7, #0]
 80054a2:	f7ff fec7 	bl	8005234 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f822 	bl	80054f6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>
	  return __tmp;
 80054b2:	68fb      	ldr	r3, [r7, #12]
	}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      _M_ptr() noexcept
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f836 	bl	8005536 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff ffa7 	bl	8005430 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2101      	movs	r1, #1
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f830 	bl	800554c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>
 80054ec:	4603      	mov	r3, r0
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80054f6:	b5b0      	push	{r4, r5, r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4619      	mov	r1, r3
 8005506:	2014      	movs	r0, #20
 8005508:	f7ff fbf4 	bl	8004cf4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff ff8f 	bl	8005430 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8005512:	4604      	mov	r4, r0
 8005514:	68b8      	ldr	r0, [r7, #8]
 8005516:	f7ff ff96 	bl	8005446 <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 800551a:	4605      	mov	r5, r0
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff fe89 	bl	8005234 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	4629      	mov	r1, r5
 8005528:	4620      	mov	r0, r4
 800552a:	f000 f81e 	bl	800556a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bdb0      	pop	{r4, r5, r7, pc}

08005536 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() noexcept
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005556:	2200      	movs	r2, #0
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f818 	bl	8005590 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>
 8005560:	4603      	mov	r3, r0
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fe5c 	bl	8005234 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f825 	bl	80055d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>:
#endif

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
	 // 3308. std::allocator<void>().allocate(n)
	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__n > this->_M_max_size())
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f82f 	bl	8005600 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4293      	cmp	r3, r2
 80055a8:	bf8c      	ite	hi
 80055aa:	2301      	movhi	r3, #1
 80055ac:	2300      	movls	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80055b4:	f00d f836 	bl	8012624 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f00c ff7a 	bl	80124bc <_Znwj>
 80055c8:	4603      	mov	r3, r0
      }
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80055d2:	b590      	push	{r4, r7, lr}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fe28 	bl	8005234 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80055e4:	4603      	mov	r3, r0
 80055e6:	681c      	ldr	r4, [r3, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4619      	mov	r1, r3
 80055ec:	2004      	movs	r0, #4
 80055ee:	f7ff fb81 	bl	8004cf4 <_ZnwjPv>
 80055f2:	4603      	mov	r3, r0
 80055f4:	601c      	str	r4, [r3, #0]
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}
	...

08005600 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005608:	4b03      	ldr	r3, [pc, #12]	; (8005618 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	06666666 	.word	0x06666666

0800561c <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	ed87 0a01 	vstr	s0, [r7, #4]
 8005626:	edc7 0a00 	vstr	s1, [r7]
 800562a:	edd7 0a00 	vldr	s1, [r7]
 800562e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005632:	f00d f91f 	bl	8012874 <atan2f>
 8005636:	eef0 7a40 	vmov.f32	s15, s0
 800563a:	eeb0 0a67 	vmov.f32	s0, s15
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	ed87 0a01 	vstr	s0, [r7, #4]
 800564e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005652:	f00d f911 	bl	8012878 <sqrtf>
 8005656:	eef0 7a40 	vmov.f32	s15, s0
 800565a:	eeb0 0a67 	vmov.f32	s0, s15
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "ICM42688P.hpp"

ICM42688P::ICM42688P(SPI_HandleTypeDef *spi_port)
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4618      	mov	r0, r3
 8005672:	f7fd fc43 	bl	8002efc <_ZN8SPI_ConnC1Ev>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	4618      	mov	r0, r3
 800567c:	f7fd fc4e 	bl	8002f1c <_ZN15PrintableSensorC1Ev>
 8005680:	4a48      	ldr	r2, [pc, #288]	; (80057a4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x140>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	4a48      	ldr	r2, [pc, #288]	; (80057a8 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x144>)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3f      	ldr	r2, [pc, #252]	; (80057ac <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x148>)
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a3e      	ldr	r2, [pc, #248]	; (80057b0 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x14c>)
 80056b6:	649a      	str	r2, [r3, #72]	; 0x48
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3e      	ldr	r2, [pc, #248]	; (80057b4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x150>)
 80056bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	655a      	str	r2, [r3, #84]	; 0x54
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	659a      	str	r2, [r3, #88]	; 0x58
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	661a      	str	r2, [r3, #96]	; 0x60
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	665a      	str	r2, [r3, #100]	; 0x64
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	669a      	str	r2, [r3, #104]	; 0x68
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	671a      	str	r2, [r3, #112]	; 0x70
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	675a      	str	r2, [r3, #116]	; 0x74
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	679a      	str	r2, [r3, #120]	; 0x78
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	67da      	str	r2, [r3, #124]	; 0x7c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x154>)
 800574a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1a      	ldr	r2, [pc, #104]	; (80057bc <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x158>)
 8005752:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x15c>)
 800575a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x160>)
 8005762:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x164>)
 800576a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a16      	ldr	r2, [pc, #88]	; (80057cc <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x168>)
 8005772:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800577c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005786:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005790:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
{
	ICM42688P::spi_port = spi_port;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	080149ac 	.word	0x080149ac
 80057a8:	080149c0 	.word	0x080149c0
 80057ac:	42652ee1 	.word	0x42652ee1
 80057b0:	4183126f 	.word	0x4183126f
 80057b4:	3a83126f 	.word	0x3a83126f
 80057b8:	c114cccd 	.word	0xc114cccd
 80057bc:	c134cccd 	.word	0xc134cccd
 80057c0:	40f5c28f 	.word	0x40f5c28f
 80057c4:	45057000 	.word	0x45057000
 80057c8:	c4548000 	.word	0xc4548000
 80057cc:	4520a000 	.word	0x4520a000

080057d0 <_ZN9ICM42688P11defaultInitEv>:

bool ICM42688P::defaultInit()
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	6078      	str	r0, [r7, #4]
	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 80057d8:	2300      	movs	r3, #0
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	230a      	movs	r3, #10
 80057de:	2200      	movs	r2, #0
 80057e0:	214d      	movs	r1, #77	; 0x4d
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f89a 	bl	800591c <_ZN9ICM42688P12initAndCheckEhhhb>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f083 0301 	eor.w	r3, r3, #1
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <_ZN9ICM42688P11defaultInitEv+0x28>
		return false;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e08d      	b.n	8005914 <_ZN9ICM42688P11defaultInitEv+0x144>

	SPI_write(DEVICE_CONFIG,DEVICE_CONFIG_SOFT_RESET_CONFIG);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2201      	movs	r2, #1
 8005800:	2111      	movs	r1, #17
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
	HAL_Delay(20);
 8005806:	2014      	movs	r0, #20
 8005808:	f001 fc40 	bl	800708c <HAL_Delay>

	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 800580c:	2300      	movs	r3, #0
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	230a      	movs	r3, #10
 8005812:	2200      	movs	r2, #0
 8005814:	214d      	movs	r1, #77	; 0x4d
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f880 	bl	800591c <_ZN9ICM42688P12initAndCheckEhhhb>
 800581c:	4603      	mov	r3, r0
 800581e:	f083 0301 	eor.w	r3, r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <_ZN9ICM42688P11defaultInitEv+0x5c>
		return false;
 8005828:	2300      	movs	r3, #0
 800582a:	e073      	b.n	8005914 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_CONFIG0,INT_CONFIG0_UI_DRDY_INT_CLEAR_ONSENSORREGREAD,10))
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	230a      	movs	r3, #10
 8005832:	2220      	movs	r2, #32
 8005834:	2163      	movs	r1, #99	; 0x63
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f870 	bl	800591c <_ZN9ICM42688P12initAndCheckEhhhb>
 800583c:	4603      	mov	r3, r0
 800583e:	f083 0301 	eor.w	r3, r3, #1
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <_ZN9ICM42688P11defaultInitEv+0x7c>
		return false;
 8005848:	2300      	movs	r3, #0
 800584a:	e063      	b.n	8005914 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_CONFIG,INT_CONFIG_INT1_POLARITY_ACTIVE_HIGH|INT_CONFIG_INT1_DRIVE_CIRCUIT_PUSH_PULL,10))
 800584c:	2300      	movs	r3, #0
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	230a      	movs	r3, #10
 8005852:	2203      	movs	r2, #3
 8005854:	2114      	movs	r1, #20
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f860 	bl	800591c <_ZN9ICM42688P12initAndCheckEhhhb>
 800585c:	4603      	mov	r3, r0
 800585e:	f083 0301 	eor.w	r3, r3, #1
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <_ZN9ICM42688P11defaultInitEv+0x9c>
		return false;
 8005868:	2300      	movs	r3, #0
 800586a:	e053      	b.n	8005914 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_SOURCE0,INT_SOURCE0_UI_DRDY_INT1_EN,10))
 800586c:	2300      	movs	r3, #0
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	230a      	movs	r3, #10
 8005872:	2208      	movs	r2, #8
 8005874:	2165      	movs	r1, #101	; 0x65
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f850 	bl	800591c <_ZN9ICM42688P12initAndCheckEhhhb>
 800587c:	4603      	mov	r3, r0
 800587e:	f083 0301 	eor.w	r3, r3, #1
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <_ZN9ICM42688P11defaultInitEv+0xbc>
		return false;
 8005888:	2300      	movs	r3, #0
 800588a:	e043      	b.n	8005914 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(GYRO_CONFIG_STATIC2,0b11,10))
 800588c:	2300      	movs	r3, #0
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	230a      	movs	r3, #10
 8005892:	2203      	movs	r2, #3
 8005894:	210b      	movs	r1, #11
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f840 	bl	800591c <_ZN9ICM42688P12initAndCheckEhhhb>
 800589c:	4603      	mov	r3, r0
 800589e:	f083 0301 	eor.w	r3, r3, #1
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <_ZN9ICM42688P11defaultInitEv+0xdc>
		return false;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e033      	b.n	8005914 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(GYRO_CONFIG0,GYRO_CONFIG0_GYRO_ODR_1KHZ|GYRO_CONFIG0_GYRO_FS_SEL_2000DPS,10))
 80058ac:	2300      	movs	r3, #0
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	230a      	movs	r3, #10
 80058b2:	2206      	movs	r2, #6
 80058b4:	214f      	movs	r1, #79	; 0x4f
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f830 	bl	800591c <_ZN9ICM42688P12initAndCheckEhhhb>
 80058bc:	4603      	mov	r3, r0
 80058be:	f083 0301 	eor.w	r3, r3, #1
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <_ZN9ICM42688P11defaultInitEv+0xfc>
		return false;
 80058c8:	2300      	movs	r3, #0
 80058ca:	e023      	b.n	8005914 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(ACCEL_CONFIG0,ACCEL_CONFIG0_ACCEL_ODR_1KHZ|ACCEL_CONFIG0_ACCEL_FS_SEL_2G,10))
 80058cc:	2300      	movs	r3, #0
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	230a      	movs	r3, #10
 80058d2:	2266      	movs	r2, #102	; 0x66
 80058d4:	2150      	movs	r1, #80	; 0x50
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f820 	bl	800591c <_ZN9ICM42688P12initAndCheckEhhhb>
 80058dc:	4603      	mov	r3, r0
 80058de:	f083 0301 	eor.w	r3, r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <_ZN9ICM42688P11defaultInitEv+0x11c>
		return false;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e013      	b.n	8005914 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(PWR_MGMT0,0x0F,10))
 80058ec:	2300      	movs	r3, #0
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	230a      	movs	r3, #10
 80058f2:	220f      	movs	r2, #15
 80058f4:	214e      	movs	r1, #78	; 0x4e
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f810 	bl	800591c <_ZN9ICM42688P12initAndCheckEhhhb>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f083 0301 	eor.w	r3, r3, #1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <_ZN9ICM42688P11defaultInitEv+0x13c>
		return false;
 8005908:	2300      	movs	r3, #0
 800590a:	e003      	b.n	8005914 <_ZN9ICM42688P11defaultInitEv+0x144>

	HAL_Delay(50);
 800590c:	2032      	movs	r0, #50	; 0x32
 800590e:	f001 fbbd 	bl	800708c <HAL_Delay>

	//computeGyroDrift(1000);

	return true;
 8005912:	2301      	movs	r3, #1
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <_ZN9ICM42688P12initAndCheckEhhhb>:

bool ICM42688P::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	4608      	mov	r0, r1
 8005926:	4611      	mov	r1, r2
 8005928:	461a      	mov	r2, r3
 800592a:	4603      	mov	r3, r0
 800592c:	70fb      	strb	r3, [r7, #3]
 800592e:	460b      	mov	r3, r1
 8005930:	70bb      	strb	r3, [r7, #2]
 8005932:	4613      	mov	r3, r2
 8005934:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	787b      	ldrb	r3, [r7, #1]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	429a      	cmp	r2, r3
 8005940:	da21      	bge.n	8005986 <_ZN9ICM42688P12initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8005942:	7e3b      	ldrb	r3, [r7, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <_ZN9ICM42688P12initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	78ba      	ldrb	r2, [r7, #2]
 8005950:	78f9      	ldrb	r1, [r7, #3]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
		if (SPI_read(addr)==val)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3304      	adds	r3, #4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	4611      	mov	r1, r2
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	78bb      	ldrb	r3, [r7, #2]
 800596c:	4293      	cmp	r3, r2
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <_ZN9ICM42688P12initAndCheckEhhhb+0x62>
			return true;
 800597a:	2301      	movs	r3, #1
 800597c:	e004      	b.n	8005988 <_ZN9ICM42688P12initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3301      	adds	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e7d9      	b.n	800593a <_ZN9ICM42688P12initAndCheckEhhhb+0x1e>
	}
	return false;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* ICM42688P::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b095      	sub	sp, #84	; 0x54
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3308      	adds	r3, #8
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GX)!=senorsList.end())
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	f107 030c 	add.w	r3, r7, #12
 80059aa:	4619      	mov	r1, r3
 80059ac:	6838      	ldr	r0, [r7, #0]
 80059ae:	f7fe fa43 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80059b2:	4603      	mov	r3, r0
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	6838      	ldr	r0, [r7, #0]
 80059b8:	f7fe fa57 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80059bc:	4603      	mov	r3, r0
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	f107 0210 	add.w	r2, r7, #16
 80059c4:	f107 0308 	add.w	r3, r7, #8
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fa5a 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d020      	beq.n	8005a18 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>
	{
		strcat(packet,toCharArray(euler_x));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f103 0408 	add.w	r4, r3, #8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	1d1a      	adds	r2, r3, #4
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80059e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059ea:	ee17 1a90 	vmov	r1, s15
 80059ee:	4610      	mov	r0, r2
 80059f0:	f7fd fa52 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4619      	mov	r1, r3
 80059f8:	4620      	mov	r0, r4
 80059fa:	f00e fe51 	bl	80146a0 <strcat>
		strcat(packet,",");
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f103 0408 	add.w	r4, r3, #8
 8005a04:	4620      	mov	r0, r4
 8005a06:	f7fa fbe3 	bl	80001d0 <strlen>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4423      	add	r3, r4
 8005a0e:	499a      	ldr	r1, [pc, #616]	; (8005c78 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005a10:	461a      	mov	r2, r3
 8005a12:	460b      	mov	r3, r1
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GY)!=senorsList.end())
 8005a18:	2301      	movs	r3, #1
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	f107 0318 	add.w	r3, r7, #24
 8005a20:	4619      	mov	r1, r3
 8005a22:	6838      	ldr	r0, [r7, #0]
 8005a24:	f7fe fa08 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	6838      	ldr	r0, [r7, #0]
 8005a2e:	f7fe fa1c 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005a32:	4603      	mov	r3, r0
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	f107 021c 	add.w	r2, r7, #28
 8005a3a:	f107 0314 	add.w	r3, r7, #20
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe fa1f 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d020      	beq.n	8005a8e <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xfe>
	{
		strcat(packet,toCharArray(euler_y));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f103 0408 	add.w	r4, r3, #8
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	1d1a      	adds	r2, r3, #4
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a60:	ee17 1a90 	vmov	r1, s15
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7fd fa17 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f00e fe16 	bl	80146a0 <strcat>
		strcat(packet,",");
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f103 0408 	add.w	r4, r3, #8
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7fa fba8 	bl	80001d0 <strlen>
 8005a80:	4603      	mov	r3, r0
 8005a82:	4423      	add	r3, r4
 8005a84:	497c      	ldr	r1, [pc, #496]	; (8005c78 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005a86:	461a      	mov	r2, r3
 8005a88:	460b      	mov	r3, r1
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GZ)!=senorsList.end())
 8005a8e:	2302      	movs	r3, #2
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a96:	4619      	mov	r1, r3
 8005a98:	6838      	ldr	r0, [r7, #0]
 8005a9a:	f7fe f9cd 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	6838      	ldr	r0, [r7, #0]
 8005aa4:	f7fe f9e1 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ab0:	f107 0320 	add.w	r3, r7, #32
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe f9e4 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d020      	beq.n	8005b04 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x174>
	{
		strcat(packet,toCharArray(euler_z));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f103 0408 	add.w	r4, r3, #8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	1d1a      	adds	r2, r3, #4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ad6:	ee17 1a90 	vmov	r1, s15
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7fd f9dc 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f00e fddb 	bl	80146a0 <strcat>
		strcat(packet,",");
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f103 0408 	add.w	r4, r3, #8
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7fa fb6d 	bl	80001d0 <strlen>
 8005af6:	4603      	mov	r3, r0
 8005af8:	4423      	add	r3, r4
 8005afa:	495f      	ldr	r1, [pc, #380]	; (8005c78 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005afc:	461a      	mov	r2, r3
 8005afe:	460b      	mov	r3, r1
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AX)!=senorsList.end())
 8005b04:	2306      	movs	r3, #6
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
 8005b08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6838      	ldr	r0, [r7, #0]
 8005b10:	f7fe f992 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005b14:	4603      	mov	r3, r0
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b18:	6838      	ldr	r0, [r7, #0]
 8005b1a:	f7fe f9a6 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
 8005b22:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe f9a9 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d022      	beq.n	8005b7e <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ee>
	{
		strcat(packet,toCharArray(-ax));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f103 0408 	add.w	r4, r3, #8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	1d1a      	adds	r2, r3, #4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005b48:	eef1 7a67 	vneg.f32	s15, s15
 8005b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b50:	ee17 1a90 	vmov	r1, s15
 8005b54:	4610      	mov	r0, r2
 8005b56:	f7fd f99f 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f00e fd9e 	bl	80146a0 <strcat>
		strcat(packet,",");
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f103 0408 	add.w	r4, r3, #8
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7fa fb30 	bl	80001d0 <strlen>
 8005b70:	4603      	mov	r3, r0
 8005b72:	4423      	add	r3, r4
 8005b74:	4940      	ldr	r1, [pc, #256]	; (8005c78 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005b76:	461a      	mov	r2, r3
 8005b78:	460b      	mov	r3, r1
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AY)!=senorsList.end())
 8005b7e:	2307      	movs	r3, #7
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b86:	4619      	mov	r1, r3
 8005b88:	6838      	ldr	r0, [r7, #0]
 8005b8a:	f7fe f955 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b92:	6838      	ldr	r0, [r7, #0]
 8005b94:	f7fe f969 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b9c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005ba0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe f96c 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x264>
	{
		strcat(packet,toCharArray(ay));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f103 0408 	add.w	r4, r3, #8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bc6:	ee17 1a90 	vmov	r1, s15
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f7fd f964 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f00e fd63 	bl	80146a0 <strcat>
		strcat(packet,",");
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f103 0408 	add.w	r4, r3, #8
 8005be0:	4620      	mov	r0, r4
 8005be2:	f7fa faf5 	bl	80001d0 <strlen>
 8005be6:	4603      	mov	r3, r0
 8005be8:	4423      	add	r3, r4
 8005bea:	4923      	ldr	r1, [pc, #140]	; (8005c78 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005bec:	461a      	mov	r2, r3
 8005bee:	460b      	mov	r3, r1
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AZ)!=senorsList.end())
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6838      	ldr	r0, [r7, #0]
 8005c00:	f7fe f91a 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005c04:	4603      	mov	r3, r0
 8005c06:	647b      	str	r3, [r7, #68]	; 0x44
 8005c08:	6838      	ldr	r0, [r7, #0]
 8005c0a:	f7fe f92e 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c12:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005c16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe f931 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d020      	beq.n	8005c6a <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2da>
	{
		strcat(packet,toCharArray(az));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f103 0408 	add.w	r4, r3, #8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	1d1a      	adds	r2, r3, #4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c3c:	ee17 1a90 	vmov	r1, s15
 8005c40:	4610      	mov	r0, r2
 8005c42:	f7fd f929 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f00e fd28 	bl	80146a0 <strcat>
		strcat(packet,",");
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f103 0408 	add.w	r4, r3, #8
 8005c56:	4620      	mov	r0, r4
 8005c58:	f7fa faba 	bl	80001d0 <strlen>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	4423      	add	r3, r4
 8005c60:	4905      	ldr	r1, [pc, #20]	; (8005c78 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x2e8>)
 8005c62:	461a      	mov	r2, r3
 8005c64:	460b      	mov	r3, r1
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3308      	adds	r3, #8
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3754      	adds	r7, #84	; 0x54
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd90      	pop	{r4, r7, pc}
 8005c76:	bf00      	nop
 8005c78:	0801486c 	.word	0x0801486c

08005c7c <_ZThn4_N9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	float ayScale = 2.0F;
	float azScale = 2.0F;
public:

	void SPI_write(uint8_t reg,uint8_t data);
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8005c7c:	f1a0 0004 	sub.w	r0, r0, #4
 8005c80:	f7ff be86 	b.w	8005990 <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08005c84 <_ZN9ICM42688P6updateEv>:

void ICM42688P::update()
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	uint8_t axL = SPI_read(ACCEL_DATA_X0);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3304      	adds	r3, #4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2120      	movs	r1, #32
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	75fb      	strb	r3, [r7, #23]
	uint8_t axH = SPI_read(ACCEL_DATA_X1);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	211f      	movs	r1, #31
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
 8005cac:	4603      	mov	r3, r0
 8005cae:	75bb      	strb	r3, [r7, #22]
	uint8_t ayL = SPI_read(ACCEL_DATA_Y0);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2122      	movs	r1, #34	; 0x22
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4798      	blx	r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	757b      	strb	r3, [r7, #21]
	uint8_t ayH = SPI_read(ACCEL_DATA_Y1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2121      	movs	r1, #33	; 0x21
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	753b      	strb	r3, [r7, #20]
	uint8_t azL = SPI_read(ACCEL_DATA_Z0);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2124      	movs	r1, #36	; 0x24
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	4798      	blx	r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	74fb      	strb	r3, [r7, #19]
	uint8_t azH = SPI_read(ACCEL_DATA_Z1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3304      	adds	r3, #4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2123      	movs	r1, #35	; 0x23
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	74bb      	strb	r3, [r7, #18]

	uint8_t gxL = SPI_read(GYRO_DATA_X0);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2126      	movs	r1, #38	; 0x26
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
 8005d06:	4603      	mov	r3, r0
 8005d08:	747b      	strb	r3, [r7, #17]
	uint8_t gxH = SPI_read(GYRO_DATA_X1);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2125      	movs	r1, #37	; 0x25
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
 8005d18:	4603      	mov	r3, r0
 8005d1a:	743b      	strb	r3, [r7, #16]
	uint8_t gyL = SPI_read(GYRO_DATA_Y0);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3304      	adds	r3, #4
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2128      	movs	r1, #40	; 0x28
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]
	uint8_t gyH = SPI_read(GYRO_DATA_Y1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3304      	adds	r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2127      	movs	r1, #39	; 0x27
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73bb      	strb	r3, [r7, #14]
	uint8_t gzL = SPI_read(GYRO_DATA_Z0);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3304      	adds	r3, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	212a      	movs	r1, #42	; 0x2a
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	737b      	strb	r3, [r7, #13]
	uint8_t gzH = SPI_read(GYRO_DATA_Z1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3304      	adds	r3, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2129      	movs	r1, #41	; 0x29
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
 8005d60:	4603      	mov	r3, r0
 8005d62:	733b      	strb	r3, [r7, #12]

	uint8_t tempL = SPI_read(TEMP_DATA0);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	211e      	movs	r1, #30
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	72fb      	strb	r3, [r7, #11]
	uint8_t tempH = SPI_read(TEMP_DATA1);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	211d      	movs	r1, #29
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
 8005d84:	4603      	mov	r3, r0
 8005d86:	72bb      	strb	r3, [r7, #10]

	this->raw_ax = (static_cast<float>(((int16_t)(((int16_t)axH<<8) | axL))) - this->axOffset) * this->axScale;
 8005d88:	7dbb      	ldrb	r3, [r7, #22]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	b21a      	sxth	r2, r3
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	b21b      	sxth	r3, r3
 8005d92:	4313      	orrs	r3, r2
 8005d94:	b21b      	sxth	r3, r3
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005da4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8005dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	this->raw_ay = (static_cast<float>(((int16_t)(((int16_t)ayH<<8) | ayL))) - this->ayOffset) * this->ayScale;
 8005db8:	7d3b      	ldrb	r3, [r7, #20]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	b21a      	sxth	r2, r3
 8005dbe:	7d7b      	ldrb	r3, [r7, #21]
 8005dc0:	b21b      	sxth	r3, r3
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b21b      	sxth	r3, r3
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005dd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8005dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	this->raw_az = (static_cast<float>(((int16_t)(((int16_t)azH<<8) | azL))) - this->azOffset) * this->azScale;
 8005de8:	7cbb      	ldrb	r3, [r7, #18]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	b21a      	sxth	r2, r3
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	b21b      	sxth	r3, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	b21b      	sxth	r3, r3
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005e04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8005e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	this->raw_gx = static_cast<float>((int16_t)(((int16_t)gxH<<8) | gxL)) - this->gxDrift;
 8005e18:	7c3b      	ldrb	r3, [r7, #16]
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	b21a      	sxth	r2, r3
 8005e1e:	7c7b      	ldrb	r3, [r7, #17]
 8005e20:	b21b      	sxth	r3, r3
 8005e22:	4313      	orrs	r3, r2
 8005e24:	b21b      	sxth	r3, r3
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	this->raw_gy = static_cast<float>((int16_t)(((int16_t)gyH<<8) | gyL)) - this->gyDrift;
 8005e3e:	7bbb      	ldrb	r3, [r7, #14]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	b21a      	sxth	r2, r3
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	ee07 3a90 	vmov	s15, r3
 8005e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	this->raw_gz = static_cast<float>((int16_t)(((int16_t)gzH<<8) | gzL)) - this->gzDrift;
 8005e64:	7b3b      	ldrb	r3, [r7, #12]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	b21a      	sxth	r2, r3
 8005e6a:	7b7b      	ldrb	r3, [r7, #13]
 8005e6c:	b21b      	sxth	r3, r3
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	b21b      	sxth	r3, r3
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	this->temp = static_cast<float>((int16_t)(((int16_t)tempH<<8) | tempL)) / 132.48F + 25.0F;
 8005e8a:	7abb      	ldrb	r3, [r7, #10]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	b21a      	sxth	r2, r3
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	b21b      	sxth	r3, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	b21b      	sxth	r3, r3
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ea0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8005ec4 <_ZN9ICM42688P6updateEv+0x240>
 8005ea4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ea8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	this->toEuler();
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f806 	bl	8005ec8 <_ZN9ICM42688P7toEulerEv>
	//this->SPI_read(INT_STATUS);
}
 8005ebc:	bf00      	nop
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	43047ae1 	.word	0x43047ae1

08005ec8 <_ZN9ICM42688P7toEulerEv>:

void ICM42688P::toEuler()
{
 8005ec8:	b5b0      	push	{r4, r5, r7, lr}
 8005eca:	ed2d 8b02 	vpush	{d8}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
	this->gx = this->gx + this->raw_gx*(DT/GYRO_FULLSCALE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8005eec:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	this->gy = this->gy + this->raw_gy*(DT/GYRO_FULLSCALE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8005f16:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	this->gz = this->gz + this->raw_gz*(DT/GYRO_FULLSCALE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8005f40:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	this->euler_x = this->euler_x + this->raw_gx*(DT/GYRO_FULLSCALE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8005f6a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	this->euler_y = this->euler_y + this->raw_gy*(DT/GYRO_FULLSCALE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8005f94:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	this->euler_z = this->euler_z + this->raw_gz*(DT/GYRO_FULLSCALE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8005fbe:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	this->ax = atan2(this->raw_ax,sqrt(this->raw_ay*this->raw_ay + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	ed93 8a1d 	vldr	s16, [r3, #116]	; 0x74
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffe:	f7ff fb21 	bl	8005644 <_ZSt4sqrtf>
 8006002:	eef0 7a40 	vmov.f32	s15, s0
 8006006:	eef0 0a67 	vmov.f32	s1, s15
 800600a:	eeb0 0a48 	vmov.f32	s0, s16
 800600e:	f7ff fb05 	bl	800561c <_ZSt5atan2ff>
 8006012:	eeb0 7a40 	vmov.f32	s14, s0
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800601c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	this->ay = atan2(this->raw_ay,sqrt(this->raw_ax*this->raw_ax + this->raw_az*this->raw_az))*RADIANS_TO_DEGREES;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	ed93 8a1e 	vldr	s16, [r3, #120]	; 0x78
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8006038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8006048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800604c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006050:	eeb0 0a67 	vmov.f32	s0, s15
 8006054:	f7ff faf6 	bl	8005644 <_ZSt4sqrtf>
 8006058:	eef0 7a40 	vmov.f32	s15, s0
 800605c:	eef0 0a67 	vmov.f32	s1, s15
 8006060:	eeb0 0a48 	vmov.f32	s0, s16
 8006064:	f7ff fada 	bl	800561c <_ZSt5atan2ff>
 8006068:	eeb0 7a40 	vmov.f32	s14, s0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	this->az = atan2(this->raw_az,sqrt(this->raw_ax*this->raw_ax + this->raw_ay*this->raw_ay))*RADIANS_TO_DEGREES;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	ed93 8a1f 	vldr	s16, [r3, #124]	; 0x7c
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800608e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800609e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060a6:	eeb0 0a67 	vmov.f32	s0, s15
 80060aa:	f7ff facb 	bl	8005644 <_ZSt4sqrtf>
 80060ae:	eef0 7a40 	vmov.f32	s15, s0
 80060b2:	eef0 0a67 	vmov.f32	s1, s15
 80060b6:	eeb0 0a48 	vmov.f32	s0, s16
 80060ba:	f7ff faaf 	bl	800561c <_ZSt5atan2ff>
 80060be:	eeb0 7a40 	vmov.f32	s14, s0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80060c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	this->euler_x = this->euler_x*0.9999+this->ay*0.0001;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fa f9e5 	bl	80004a8 <__aeabi_f2d>
 80060de:	a33e      	add	r3, pc, #248	; (adr r3, 80061d8 <_ZN9ICM42688P7toEulerEv+0x310>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f7fa fa38 	bl	8000558 <__aeabi_dmul>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4614      	mov	r4, r2
 80060ee:	461d      	mov	r5, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fa f9d7 	bl	80004a8 <__aeabi_f2d>
 80060fa:	a339      	add	r3, pc, #228	; (adr r3, 80061e0 <_ZN9ICM42688P7toEulerEv+0x318>)
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f7fa fa2a 	bl	8000558 <__aeabi_dmul>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4620      	mov	r0, r4
 800610a:	4629      	mov	r1, r5
 800610c:	f7fa f86e 	bl	80001ec <__adddf3>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4610      	mov	r0, r2
 8006116:	4619      	mov	r1, r3
 8006118:	f7fa fcf6 	bl	8000b08 <__aeabi_d2f>
 800611c:	4602      	mov	r2, r0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	this->euler_y = this->euler_y*0.9999-this->ax*0.0001;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612a:	4618      	mov	r0, r3
 800612c:	f7fa f9bc 	bl	80004a8 <__aeabi_f2d>
 8006130:	a329      	add	r3, pc, #164	; (adr r3, 80061d8 <_ZN9ICM42688P7toEulerEv+0x310>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa fa0f 	bl	8000558 <__aeabi_dmul>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4614      	mov	r4, r2
 8006140:	461d      	mov	r5, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006146:	4618      	mov	r0, r3
 8006148:	f7fa f9ae 	bl	80004a8 <__aeabi_f2d>
 800614c:	a324      	add	r3, pc, #144	; (adr r3, 80061e0 <_ZN9ICM42688P7toEulerEv+0x318>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f7fa fa01 	bl	8000558 <__aeabi_dmul>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4620      	mov	r0, r4
 800615c:	4629      	mov	r1, r5
 800615e:	f7fa f843 	bl	80001e8 <__aeabi_dsub>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4610      	mov	r0, r2
 8006168:	4619      	mov	r1, r3
 800616a:	f7fa fccd 	bl	8000b08 <__aeabi_d2f>
 800616e:	4602      	mov	r2, r0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	this->euler_z = this->euler_z*0.9999+this->az*0.0001;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800617c:	4618      	mov	r0, r3
 800617e:	f7fa f993 	bl	80004a8 <__aeabi_f2d>
 8006182:	a315      	add	r3, pc, #84	; (adr r3, 80061d8 <_ZN9ICM42688P7toEulerEv+0x310>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f7fa f9e6 	bl	8000558 <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4614      	mov	r4, r2
 8006192:	461d      	mov	r5, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006198:	4618      	mov	r0, r3
 800619a:	f7fa f985 	bl	80004a8 <__aeabi_f2d>
 800619e:	a310      	add	r3, pc, #64	; (adr r3, 80061e0 <_ZN9ICM42688P7toEulerEv+0x318>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fa f9d8 	bl	8000558 <__aeabi_dmul>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4620      	mov	r0, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	f7fa f81c 	bl	80001ec <__adddf3>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4610      	mov	r0, r2
 80061ba:	4619      	mov	r1, r3
 80061bc:	f7fa fca4 	bl	8000b08 <__aeabi_d2f>
 80061c0:	4602      	mov	r2, r0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	ecbd 8b02 	vpop	{d8}
 80061d2:	bdb0      	pop	{r4, r5, r7, pc}
 80061d4:	f3af 8000 	nop.w
 80061d8:	48e8a71e 	.word	0x48e8a71e
 80061dc:	3fefff2e 	.word	0x3fefff2e
 80061e0:	eb1c432d 	.word	0xeb1c432d
 80061e4:	3f1a36e2 	.word	0x3f1a36e2

080061e8 <_ZN9ICM42688P9getEulerXEv>:
	this->computeGyroDrift(count);
	this->computeAccOffset(count);
}

float ICM42688P::getEulerX()
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	return this->euler_x;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f6:	ee07 3a90 	vmov	s15, r3
}
 80061fa:	eeb0 0a67 	vmov.f32	s0, s15
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <_ZN9ICM42688P9getEulerYEv>:

float ICM42688P::getEulerY()
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	return this->euler_y;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006216:	ee07 3a90 	vmov	s15, r3
}
 800621a:	eeb0 0a67 	vmov.f32	s0, s15
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <_ZN9ICM42688P9getEulerZEv>:

float ICM42688P::getEulerZ()
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	return this->euler_z;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006236:	ee07 3a90 	vmov	s15, r3
}
 800623a:	eeb0 0a67 	vmov.f32	s0, s15
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <_ZN9ICM42688P9SPI_writeEhh>:
{
	return this->SPI_read(INT_STATUS);
}

void ICM42688P::SPI_write(uint8_t reg,uint8_t data)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
 8006254:	4613      	mov	r3, r2
 8006256:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_RESET);
 8006258:	2200      	movs	r2, #0
 800625a:	2120      	movs	r1, #32
 800625c:	480d      	ldr	r0, [pc, #52]	; (8006294 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 800625e:	f002 f9cb 	bl	80085f8 <HAL_GPIO_WritePin>
	this->spiTxBuff[0] = reg;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->spiTxBuff[1] = data;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	78ba      	ldrb	r2, [r7, #2]
 800626e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3340      	adds	r3, #64	; 0x40
 800627a:	2202      	movs	r2, #2
 800627c:	4619      	mov	r1, r3
 800627e:	f004 fd65 	bl	800ad4c <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_SET);
 8006282:	2201      	movs	r2, #1
 8006284:	2120      	movs	r1, #32
 8006286:	4803      	ldr	r0, [pc, #12]	; (8006294 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 8006288:	f002 f9b6 	bl	80085f8 <HAL_GPIO_WritePin>
}
 800628c:	bf00      	nop
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40020800 	.word	0x40020800

08006298 <_ZN9ICM42688P8SPI_readEh>:

uint8_t ICM42688P::SPI_read(uint8_t reg)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_RESET);
 80062a4:	2200      	movs	r2, #0
 80062a6:	2120      	movs	r1, #32
 80062a8:	4812      	ldr	r0, [pc, #72]	; (80062f4 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 80062aa:	f002 f9a5 	bl	80085f8 <HAL_GPIO_WritePin>
	this->spiTxBuff[0]=reg|0x80;
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_SPI_Transmit_DMA(this->spi_port, (uint8_t*)spiTxBuff, 1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3340      	adds	r3, #64	; 0x40
 80062c4:	2201      	movs	r2, #1
 80062c6:	4619      	mov	r1, r3
 80062c8:	f004 fd40 	bl	800ad4c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(this->spi_port, (uint8_t*)spiRxBuff, 1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3342      	adds	r3, #66	; 0x42
 80062d4:	2201      	movs	r2, #1
 80062d6:	4619      	mov	r1, r3
 80062d8:	f004 fdee 	bl	800aeb8 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_SET);
 80062dc:	2201      	movs	r2, #1
 80062de:	2120      	movs	r1, #32
 80062e0:	4804      	ldr	r0, [pc, #16]	; (80062f4 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 80062e2:	f002 f989 	bl	80085f8 <HAL_GPIO_WritePin>

	return this->spiRxBuff[0];
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40020800 	.word	0x40020800

080062f8 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "LIS3MDLTR.hpp"

LIS3MDLTR::LIS3MDLTR(SPI_HandleTypeDef *spi_port)
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4618      	mov	r0, r3
 8006306:	f7fc fdf9 	bl	8002efc <_ZN8SPI_ConnC1Ev>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3304      	adds	r3, #4
 800630e:	4618      	mov	r0, r3
 8006310:	f7fc fe04 	bl	8002f1c <_ZN15PrintableSensorC1Ev>
 8006314:	4a0e      	ldr	r2, [pc, #56]	; (8006350 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0x58>)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	4a0e      	ldr	r2, [pc, #56]	; (8006354 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0x5c>)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	605a      	str	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
{
	LIS3MDLTR::spi_port = spi_port;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	080149cc 	.word	0x080149cc
 8006354:	080149e0 	.word	0x080149e0

08006358 <_ZN9LIS3MDLTR6updateEv>:
{
	return SPI_read(LIS_WHO_AM_I);
}

void LIS3MDLTR::update()
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	uint8_t x_high=SPI_read(OUT_X_H);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3304      	adds	r3, #4
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2129      	movs	r1, #41	; 0x29
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]
	uint8_t x_low=SPI_read(OUT_X_L);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3304      	adds	r3, #4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2128      	movs	r1, #40	; 0x28
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
 8006380:	4603      	mov	r3, r0
 8006382:	73bb      	strb	r3, [r7, #14]
	uint8_t y_high=SPI_read(OUT_Y_H);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3304      	adds	r3, #4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	212b      	movs	r1, #43	; 0x2b
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
 8006392:	4603      	mov	r3, r0
 8006394:	737b      	strb	r3, [r7, #13]
	uint8_t y_low=SPI_read(OUT_Y_L);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3304      	adds	r3, #4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	212a      	movs	r1, #42	; 0x2a
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	4798      	blx	r3
 80063a4:	4603      	mov	r3, r0
 80063a6:	733b      	strb	r3, [r7, #12]
	uint8_t z_high=SPI_read(OUT_Z_H);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3304      	adds	r3, #4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	212d      	movs	r1, #45	; 0x2d
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	72fb      	strb	r3, [r7, #11]
	uint8_t z_low=SPI_read(OUT_Z_L);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3304      	adds	r3, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	212c      	movs	r1, #44	; 0x2c
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_high=SPI_read(TEMP_OUT_H);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3304      	adds	r3, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	212f      	movs	r1, #47	; 0x2f
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
 80063da:	4603      	mov	r3, r0
 80063dc:	727b      	strb	r3, [r7, #9]
	uint8_t temp_low=SPI_read(TEMP_OUT_L);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3304      	adds	r3, #4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	212e      	movs	r1, #46	; 0x2e
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
 80063ec:	4603      	mov	r3, r0
 80063ee:	723b      	strb	r3, [r7, #8]

	x_raw = ((int16_t)x_high)<<8 | x_low;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	b21a      	sxth	r2, r3
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
 80063f8:	b21b      	sxth	r3, r3
 80063fa:	4313      	orrs	r3, r2
 80063fc:	b21a      	sxth	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	y_raw = ((int16_t)y_high)<<8 | y_low;
 8006404:	7b7b      	ldrb	r3, [r7, #13]
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	b21a      	sxth	r2, r3
 800640a:	7b3b      	ldrb	r3, [r7, #12]
 800640c:	b21b      	sxth	r3, r3
 800640e:	4313      	orrs	r3, r2
 8006410:	b21a      	sxth	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	z_raw = ((int16_t)z_high)<<8 | z_low;
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	b21a      	sxth	r2, r3
 800641e:	7abb      	ldrb	r3, [r7, #10]
 8006420:	b21b      	sxth	r3, r3
 8006422:	4313      	orrs	r3, r2
 8006424:	b21a      	sxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	TEMP_val = ((int16_t)temp_high)<<8 | temp_low;
 800642c:	7a7b      	ldrb	r3, [r7, #9]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	b21a      	sxth	r2, r3
 8006432:	7a3b      	ldrb	r3, [r7, #8]
 8006434:	b21b      	sxth	r3, r3
 8006436:	4313      	orrs	r3, r2
 8006438:	b21a      	sxth	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
}
 8006440:	bf00      	nop
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* LIS3MDLTR::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8006448:	b590      	push	{r4, r7, lr}
 800644a:	b08d      	sub	sp, #52	; 0x34
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3308      	adds	r3, #8
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_X)!=senorsList.end())
 800645a:	2310      	movs	r3, #16
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	f107 0310 	add.w	r3, r7, #16
 8006462:	4619      	mov	r1, r3
 8006464:	6838      	ldr	r0, [r7, #0]
 8006466:	f7fd fce7 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800646a:	4603      	mov	r3, r0
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	6838      	ldr	r0, [r7, #0]
 8006470:	f7fd fcfb 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006474:	4603      	mov	r3, r0
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	f107 0214 	add.w	r2, r7, #20
 800647c:	f107 030c 	add.w	r3, r7, #12
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f7fd fcfe 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d01d      	beq.n	80064ca <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(x_raw));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f103 0408 	add.w	r4, r3, #8
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800649e:	4619      	mov	r1, r3
 80064a0:	4610      	mov	r0, r2
 80064a2:	f7fc fcf9 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4619      	mov	r1, r3
 80064aa:	4620      	mov	r0, r4
 80064ac:	f00e f8f8 	bl	80146a0 <strcat>
		strcat(packet,",");
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f103 0408 	add.w	r4, r3, #8
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7f9 fe8a 	bl	80001d0 <strlen>
 80064bc:	4603      	mov	r3, r0
 80064be:	4423      	add	r3, r4
 80064c0:	493d      	ldr	r1, [pc, #244]	; (80065b8 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 80064c2:	461a      	mov	r2, r3
 80064c4:	460b      	mov	r3, r1
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Y)!=senorsList.end())
 80064ca:	2311      	movs	r3, #17
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	f107 031c 	add.w	r3, r7, #28
 80064d2:	4619      	mov	r1, r3
 80064d4:	6838      	ldr	r0, [r7, #0]
 80064d6:	f7fd fcaf 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80064da:	4603      	mov	r3, r0
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	6838      	ldr	r0, [r7, #0]
 80064e0:	f7fd fcc3 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80064e4:	4603      	mov	r3, r0
 80064e6:	623b      	str	r3, [r7, #32]
 80064e8:	f107 0220 	add.w	r2, r7, #32
 80064ec:	f107 0318 	add.w	r3, r7, #24
 80064f0:	4611      	mov	r1, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fd fcc6 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01d      	beq.n	800653a <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(y_raw));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f103 0408 	add.w	r4, r3, #8
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fc fcc1 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8006516:	4603      	mov	r3, r0
 8006518:	4619      	mov	r1, r3
 800651a:	4620      	mov	r0, r4
 800651c:	f00e f8c0 	bl	80146a0 <strcat>
		strcat(packet,",");
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f103 0408 	add.w	r4, r3, #8
 8006526:	4620      	mov	r0, r4
 8006528:	f7f9 fe52 	bl	80001d0 <strlen>
 800652c:	4603      	mov	r3, r0
 800652e:	4423      	add	r3, r4
 8006530:	4921      	ldr	r1, [pc, #132]	; (80065b8 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 8006532:	461a      	mov	r2, r3
 8006534:	460b      	mov	r3, r1
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Z)!=senorsList.end())
 800653a:	2312      	movs	r3, #18
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
 800653e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006542:	4619      	mov	r1, r3
 8006544:	6838      	ldr	r0, [r7, #0]
 8006546:	f7fd fc77 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800654a:	4603      	mov	r3, r0
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
 800654e:	6838      	ldr	r0, [r7, #0]
 8006550:	f7fd fc8b 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006554:	4603      	mov	r3, r0
 8006556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006558:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800655c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f7fd fc8e 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01d      	beq.n	80065aa <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x162>
	{
		strcat(packet,toCharArray(z_raw));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f103 0408 	add.w	r4, r3, #8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	1d1a      	adds	r2, r3, #4
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fc fc89 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8006586:	4603      	mov	r3, r0
 8006588:	4619      	mov	r1, r3
 800658a:	4620      	mov	r0, r4
 800658c:	f00e f888 	bl	80146a0 <strcat>
		strcat(packet,",");
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f103 0408 	add.w	r4, r3, #8
 8006596:	4620      	mov	r0, r4
 8006598:	f7f9 fe1a 	bl	80001d0 <strlen>
 800659c:	4603      	mov	r3, r0
 800659e:	4423      	add	r3, r4
 80065a0:	4905      	ldr	r1, [pc, #20]	; (80065b8 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 80065a2:	461a      	mov	r2, r3
 80065a4:	460b      	mov	r3, r1
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	8013      	strh	r3, [r2, #0]
	}


	return packet;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3308      	adds	r3, #8
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3734      	adds	r7, #52	; 0x34
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}
 80065b6:	bf00      	nop
 80065b8:	08014870 	.word	0x08014870

080065bc <_ZThn4_N9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void update();
	int16_t getX();
	int16_t getY();
	int16_t getZ();
	int16_t getTEMP();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 80065bc:	f1a0 0004 	sub.w	r0, r0, #4
 80065c0:	f7ff bf42 	b.w	8006448 <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

080065c4 <_ZN9LIS3MDLTR11defaultInitEv>:

bool LIS3MDLTR::defaultInit()
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
	  this->SPI_write(CTRL_REG1,0b11111100);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	22fc      	movs	r2, #252	; 0xfc
 80065d4:	2120      	movs	r1, #32
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	4798      	blx	r3
	  uint8_t ctrl1 = this->SPI_read(CTRL_REG1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3304      	adds	r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2120      	movs	r1, #32
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]

	  SPI_write(CTRL_REG2,0b01100000);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2260      	movs	r2, #96	; 0x60
 80065f4:	2121      	movs	r1, #33	; 0x21
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
	  uint8_t ctrl2 = SPI_read(CTRL_REG2);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3304      	adds	r3, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2121      	movs	r1, #33	; 0x21
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
 8006608:	4603      	mov	r3, r0
 800660a:	73bb      	strb	r3, [r7, #14]

	  SPI_write(CTRL_REG3,0b00000000);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	2122      	movs	r1, #34	; 0x22
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	4798      	blx	r3
	  uint8_t ctrl3 = SPI_read(CTRL_REG3);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3304      	adds	r3, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2122      	movs	r1, #34	; 0x22
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
 8006628:	4603      	mov	r3, r0
 800662a:	737b      	strb	r3, [r7, #13]

	  SPI_write(CTRL_REG4,0b00001100);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	220c      	movs	r2, #12
 8006634:	2123      	movs	r1, #35	; 0x23
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
	  uint8_t ctrl4 = SPI_read(CTRL_REG4);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3304      	adds	r3, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2123      	movs	r1, #35	; 0x23
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
 8006648:	4603      	mov	r3, r0
 800664a:	733b      	strb	r3, [r7, #12]

	  SPI_write(CTRL_REG5,0b00000000);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2200      	movs	r2, #0
 8006654:	2124      	movs	r1, #36	; 0x24
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
	  uint8_t ctrl5 = SPI_read(CTRL_REG5);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3304      	adds	r3, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2124      	movs	r1, #36	; 0x24
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	4798      	blx	r3
 8006668:	4603      	mov	r3, r0
 800666a:	72fb      	strb	r3, [r7, #11]
		return false;

	if (!initAndCheck(CTRL_REG5,0b00000000,10))
		return false;*/

	return true;
 800666c:	2301      	movs	r3, #1
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <_ZN9LIS3MDLTR9SPI_writeEhh>:
	}
	return false;
}

void LIS3MDLTR::SPI_write(uint8_t reg,uint8_t data)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
 8006684:	4613      	mov	r3, r2
 8006686:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_RESET);
 8006688:	2200      	movs	r2, #0
 800668a:	2120      	movs	r1, #32
 800668c:	480f      	ldr	r0, [pc, #60]	; (80066cc <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 800668e:	f001 ffb3 	bl	80085f8 <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg & 0x7f;
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	b2da      	uxtb	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	spiTxBuff[1] = data;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	78ba      	ldrb	r2, [r7, #2]
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3340      	adds	r3, #64	; 0x40
 80066b0:	2202      	movs	r2, #2
 80066b2:	4619      	mov	r1, r3
 80066b4:	f004 fb4a 	bl	800ad4c <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_SET);
 80066b8:	2201      	movs	r2, #1
 80066ba:	2120      	movs	r1, #32
 80066bc:	4803      	ldr	r0, [pc, #12]	; (80066cc <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 80066be:	f001 ff9b 	bl	80085f8 <HAL_GPIO_WritePin>
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40020000 	.word	0x40020000

080066d0 <_ZN9LIS3MDLTR8SPI_readEh>:

uint8_t LIS3MDLTR::SPI_read(uint8_t reg)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_RESET);
 80066dc:	2200      	movs	r2, #0
 80066de:	2120      	movs	r1, #32
 80066e0:	4812      	ldr	r0, [pc, #72]	; (800672c <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 80066e2:	f001 ff89 	bl	80085f8 <HAL_GPIO_WritePin>
	spiTxBuff[0]=(reg & 0x3f)|0x80|0x40;
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3340      	adds	r3, #64	; 0x40
 80066fc:	2201      	movs	r2, #1
 80066fe:	4619      	mov	r1, r3
 8006700:	f004 fb24 	bl	800ad4c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3342      	adds	r3, #66	; 0x42
 800670c:	2201      	movs	r2, #1
 800670e:	4619      	mov	r1, r3
 8006710:	f004 fbd2 	bl	800aeb8 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_SET);
 8006714:	2201      	movs	r2, #1
 8006716:	2120      	movs	r1, #32
 8006718:	4804      	ldr	r0, [pc, #16]	; (800672c <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 800671a:	f001 ff6d 	bl	80085f8 <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40020000 	.word	0x40020000

08006730 <_ZN7Timeout19resetTimeoutCounterEv>:
	void resetTimeoutCounter()
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
		timeout_counter=0;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	705a      	strb	r2, [r3, #1]
	}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 */

#include "MB1043.hpp"
#include <stdlib.h>

MB1043::MB1043(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,uint8_t timeout)
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	70fb      	strb	r3, [r7, #3]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3336      	adds	r3, #54	; 0x36
 800675e:	4618      	mov	r0, r3
 8006760:	f7fd fef1 	bl	8004546 <_ZN7TimeoutC1Ev>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4618      	mov	r0, r3
 8006768:	f7fc fbd8 	bl	8002f1c <_ZN15PrintableSensorC1Ev>
 800676c:	4a10      	ldr	r2, [pc, #64]	; (80067b0 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x64>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2252      	movs	r2, #82	; 0x52
 8006776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	220d      	movs	r2, #13
 800677e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
	MB1043::uart_port = uart_port;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	63da      	str	r2, [r3, #60]	; 0x3c
	MB1043::uart_port_dma=uart_port_dma;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	641a      	str	r2, [r3, #64]	; 0x40

	setTimeoutValue(timeout);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3336      	adds	r3, #54	; 0x36
 800679a:	78fa      	ldrb	r2, [r7, #3]
 800679c:	4611      	mov	r1, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fd fec2 	bl	8004528 <_ZN7Timeout15setTimeoutValueEh>
}
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	080149ec 	.word	0x080149ec

080067b4 <_ZN6MB10435beginEv>:

void MB1043::begin()
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3345      	adds	r3, #69	; 0x45
 80067c4:	2206      	movs	r2, #6
 80067c6:	4619      	mov	r1, r3
 80067c8:	f006 f8f8 	bl	800c9bc <HAL_UART_Receive_DMA>
}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <_ZN6MB10436updateEv>:

void MB1043::update()
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0] == this->BEGIN_BIT) && (this->rx_buff[5]==this->END_BIT);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d109      	bne.n	8006800 <_ZN6MB10436updateEv+0x2c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d101      	bne.n	8006800 <_ZN6MB10436updateEv+0x2c>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <_ZN6MB10436updateEv+0x2e>
 8006800:	2300      	movs	r3, #0
 8006802:	73bb      	strb	r3, [r7, #14]

	if (isPacketOk)
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d027      	beq.n	800685a <_ZN6MB10436updateEv+0x86>
	{
		distance_str[0]=rx_buff[1];
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		distance_str[1]=rx_buff[2],
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		distance_str[2]=rx_buff[3],
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		distance_str[3]=rx_buff[4];
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

		distance = atoi(distance_str);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3351      	adds	r3, #81	; 0x51
 800683e:	4618      	mov	r0, r3
 8006840:	f00d fdb3 	bl	80143aa <atoi>
 8006844:	4603      	mov	r3, r0
 8006846:	b29a      	uxth	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

		resetTimeoutCounter();
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3336      	adds	r3, #54	; 0x36
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff ff6c 	bl	8006730 <_ZN7Timeout19resetTimeoutCounterEv>
 8006858:	e033      	b.n	80068c2 <_ZN6MB10436updateEv+0xee>
	}
	else if (this->wrongDataReceived==false)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006860:	2b00      	cmp	r3, #0
 8006862:	d12e      	bne.n	80068c2 <_ZN6MB10436updateEv+0xee>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b04      	cmp	r3, #4
 800686c:	d829      	bhi.n	80068c2 <_ZN6MB10436updateEv+0xee>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800687e:	429a      	cmp	r2, r3
 8006880:	d11b      	bne.n	80068ba <_ZN6MB10436updateEv+0xe6>
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	3301      	adds	r3, #1
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006894:	429a      	cmp	r2, r3
 8006896:	d110      	bne.n	80068ba <_ZN6MB10436updateEv+0xe6>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f103 0145 	add.w	r1, r3, #69	; 0x45
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3307      	adds	r3, #7
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	f006 f886 	bl	800c9bc <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				return;
 80068b8:	e01e      	b.n	80068f8 <_ZN6MB10436updateEv+0x124>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	3301      	adds	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	e7d2      	b.n	8006868 <_ZN6MB10436updateEv+0x94>
			}
		}
	}

	if (this->wrongDataReceived == true)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d103      	bne.n	80068d4 <_ZN6MB10436updateEv+0x100>
		this->wrongDataReceived = false;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3345      	adds	r3, #69	; 0x45
 80068dc:	2206      	movs	r2, #6
 80068de:	4619      	mov	r1, r3
 80068e0:	f006 f86c 	bl	800c9bc <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0208 	bic.w	r2, r2, #8
 80068f6:	601a      	str	r2, [r3, #0]
}
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* MB1043::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8006900:	b590      	push	{r4, r7, lr}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3304      	adds	r3, #4
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::SONAR_DISTANCE)!=senorsList.end())
 8006912:	2313      	movs	r3, #19
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	f107 0310 	add.w	r3, r7, #16
 800691a:	4619      	mov	r1, r3
 800691c:	6838      	ldr	r0, [r7, #0]
 800691e:	f7fd fa8b 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8006922:	4603      	mov	r3, r0
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	6838      	ldr	r0, [r7, #0]
 8006928:	f7fd fa9f 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800692c:	4603      	mov	r3, r0
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	f107 0214 	add.w	r2, r7, #20
 8006934:	f107 030c 	add.w	r3, r7, #12
 8006938:	4611      	mov	r1, r2
 800693a:	4618      	mov	r0, r3
 800693c:	f7fd faa2 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01a      	beq.n	800697c <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(distance));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	1d1c      	adds	r4, r3, #4
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fc fa9f 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 800695a:	4603      	mov	r3, r0
 800695c:	4619      	mov	r1, r3
 800695e:	4620      	mov	r0, r4
 8006960:	f00d fe9e 	bl	80146a0 <strcat>
		strcat(packet,",");
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	1d1c      	adds	r4, r3, #4
 8006968:	4620      	mov	r0, r4
 800696a:	f7f9 fc31 	bl	80001d0 <strlen>
 800696e:	4603      	mov	r3, r0
 8006970:	4423      	add	r3, r4
 8006972:	4905      	ldr	r1, [pc, #20]	; (8006988 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>)
 8006974:	461a      	mov	r2, r3
 8006976:	460b      	mov	r3, r1
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3304      	adds	r3, #4
}
 8006980:	4618      	mov	r0, r3
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	bd90      	pop	{r4, r7, pc}
 8006988:	08014874 	.word	0x08014874

0800698c <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	ed87 0a01 	vstr	s0, [r7, #4]
 8006996:	ed97 0a01 	vldr	s0, [r7, #4]
 800699a:	f00b fecf 	bl	801273c <tanf>
 800699e:	eef0 7a40 	vmov.f32	s15, s0
 80069a2:	eeb0 0a67 	vmov.f32	s0, s15
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688P>:
 */

#include "PMW3901UY.hpp"
//#include "utils_functions.hpp"

PMW3901UY::PMW3901UY(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,uint8_t timeout,ICM42688P& icm):
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	70fb      	strb	r3, [r7, #3]
	icm(icm)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3336      	adds	r3, #54	; 0x36
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fd fdc1 	bl	8004546 <_ZN7TimeoutC1Ev>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fc faa8 	bl	8002f1c <_ZN15PrintableSensorC1Ev>
 80069cc:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefhR9ICM42688P+0x80>)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	22fe      	movs	r2, #254	; 0xfe
 80069d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2204      	movs	r2, #4
 80069de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	22aa      	movs	r2, #170	; 0xaa
 80069e6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	645a      	str	r2, [r3, #68]	; 0x44
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
{
	PMW3901UY::uart_port = uart_port;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	63da      	str	r2, [r3, #60]	; 0x3c
	PMW3901UY::uart_port_dma=uart_port_dma;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	641a      	str	r2, [r3, #64]	; 0x40

	setTimeoutValue(timeout);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3336      	adds	r3, #54	; 0x36
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fd fd83 	bl	8004528 <_ZN7Timeout15setTimeoutValueEh>
}
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	080149f8 	.word	0x080149f8

08006a30 <_ZN9PMW3901UY5beginEv>:

void PMW3901UY::begin()
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (uart_port, rx_buff, packet_length);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3348      	adds	r3, #72	; 0x48
 8006a40:	2209      	movs	r2, #9
 8006a42:	4619      	mov	r1, r3
 8006a44:	f005 ffba 	bl	800c9bc <HAL_UART_Receive_DMA>
}
 8006a48:	bf00      	nop
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <_ZN9PMW3901UY6updateEv>:

void PMW3901UY::update()
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	const bool isPacketOk = (this->rx_buff[0]==this->BEGIN_BIT && this->rx_buff[1]==this->DATA_LEN_BIT && this->rx_buff[8]==this->END_BIT);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d111      	bne.n	8006a8c <_ZN9PMW3901UY6updateEv+0x3c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d109      	bne.n	8006a8c <_ZN9PMW3901UY6updateEv+0x3c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d101      	bne.n	8006a8c <_ZN9PMW3901UY6updateEv+0x3c>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <_ZN9PMW3901UY6updateEv+0x3e>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73bb      	strb	r3, [r7, #14]

	if(isPacketOk)
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d046      	beq.n	8006b24 <_ZN9PMW3901UY6updateEv+0xd4>
	{
		this->flow_x = (int16_t)(this->rx_buff[3]<<8 | this->rx_buff[2]);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	b21a      	sxth	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006aa6:	b21b      	sxth	r3, r3
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	b21a      	sxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		this->flow_y = (int16_t)(this->rx_buff[5]<<8 | this->rx_buff[4]);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	b21a      	sxth	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ac2:	b21b      	sxth	r3, r3
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b21a      	sxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		this->quality = this->rx_buff[7];
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

		this->x_pos += this->flow_x;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	b21a      	sxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		this->y_pos += this->flow_y;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	4413      	add	r3, r2
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	b21a      	sxth	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		this->process();
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f858 	bl	8006bc8 <_ZN9PMW3901UY7processEv>
		this->resetTimeoutCounter();
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3336      	adds	r3, #54	; 0x36
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fe07 	bl	8006730 <_ZN7Timeout19resetTimeoutCounterEv>
 8006b22:	e033      	b.n	8006b8c <_ZN9PMW3901UY6updateEv+0x13c>
	}
	else if (this->wrongDataReceived==false)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d12e      	bne.n	8006b8c <_ZN9PMW3901UY6updateEv+0x13c>
	{
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b07      	cmp	r3, #7
 8006b36:	d829      	bhi.n	8006b8c <_ZN9PMW3901UY6updateEv+0x13c>
		{
			if ((this->rx_buff[iter]==this->END_BIT) && (this->rx_buff[iter+1U]==this->BEGIN_BIT))
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d11b      	bne.n	8006b84 <_ZN9PMW3901UY6updateEv+0x134>
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d110      	bne.n	8006b84 <_ZN9PMW3901UY6updateEv+0x134>
			{
				HAL_UART_Receive_DMA (this->uart_port, this->rx_buff, this->packet_length+iter+1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	330a      	adds	r3, #10
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	f005 ff21 	bl	800c9bc <HAL_UART_Receive_DMA>
				this->wrongDataReceived = true;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				return;
 8006b82:	e01e      	b.n	8006bc2 <_ZN9PMW3901UY6updateEv+0x172>
		for (uint8_t iter=0;iter<this->packet_length-1U;iter++)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	3301      	adds	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
 8006b8a:	e7d2      	b.n	8006b32 <_ZN9PMW3901UY6updateEv+0xe2>
			}
		}
	}

	if (this->wrongDataReceived == true)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d103      	bne.n	8006b9e <_ZN9PMW3901UY6updateEv+0x14e>
		this->wrongDataReceived = false;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	HAL_UART_Receive_DMA(this->uart_port, this->rx_buff, this->packet_length);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3348      	adds	r3, #72	; 0x48
 8006ba6:	2209      	movs	r2, #9
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f005 ff07 	bl	800c9bc <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(this->uart_port_dma, DMA_IT_HT);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0208 	bic.w	r2, r2, #8
 8006bc0:	601a      	str	r2, [r3, #0]
}
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <_ZN9PMW3901UY7processEv>:

void PMW3901UY::process()
{
 8006bc8:	b5b0      	push	{r4, r5, r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	_mini.flow_x = static_cast<float>(this->flow_x);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	_mini.flow_x = static_cast<float>(this->flow_y);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	_mini.flow_x_i += _mini.flow_x;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8006c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	_mini.flow_y_i += _mini.flow_y;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8006c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	_pixel_flow.fix_x_i += (_mini.flow_x_i - _pixel_flow.fix_x_i) * 0.2F;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8006c36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006c3a:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8006e30 <_ZN9PMW3901UY7processEv+0x268>
 8006c3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	_pixel_flow.fix_y_i += (_mini.flow_y_i - _pixel_flow.fix_y_i) * 0.2F;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8006c5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006c62:	eddf 6a73 	vldr	s13, [pc, #460]	; 8006e30 <_ZN9PMW3901UY7processEv+0x268>
 8006c66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

	_pixel_flow.ang_x += (600.0F * tan(icm.getEulerX()*0.0174F) - _pixel_flow.ang_x) * 0.2F;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fab5 	bl	80061e8 <_ZN9ICM42688P9getEulerXEv>
 8006c7e:	eef0 7a40 	vmov.f32	s15, s0
 8006c82:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8006e34 <_ZN9PMW3901UY7processEv+0x26c>
 8006c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c8e:	f7ff fe7d 	bl	800698c <_ZSt3tanf>
 8006c92:	eef0 7a40 	vmov.f32	s15, s0
 8006c96:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8006e38 <_ZN9PMW3901UY7processEv+0x270>
 8006c9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8006ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ca8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006e30 <_ZN9PMW3901UY7processEv+0x268>
 8006cac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8006cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	_pixel_flow.ang_y += (600.0F * tan(icm.getEulerY()*0.0174F) - _pixel_flow.ang_y) * 0.2F;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff fa9f 	bl	8006208 <_ZN9ICM42688P9getEulerYEv>
 8006cca:	eef0 7a40 	vmov.f32	s15, s0
 8006cce:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8006e34 <_ZN9PMW3901UY7processEv+0x26c>
 8006cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cda:	f7ff fe57 	bl	800698c <_ZSt3tanf>
 8006cde:	eef0 7a40 	vmov.f32	s15, s0
 8006ce2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006e38 <_ZN9PMW3901UY7processEv+0x270>
 8006ce6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8006cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cf4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8006e30 <_ZN9PMW3901UY7processEv+0x268>
 8006cf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8006d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	_pixel_flow.out_x_i = _pixel_flow.fix_x_i - _pixel_flow.ang_x;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8006d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	_pixel_flow.out_x_i = _pixel_flow.fix_y_i - _pixel_flow.ang_y;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8006d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	_pixel_flow.x = (_pixel_flow.out_x_i - _pixel_flow.out_x_i_o);// / dT;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8006d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	_pixel_flow.out_x_i_o = _pixel_flow.out_x_i;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	_pixel_flow.y = (_pixel_flow.out_y_i - _pixel_flow.out_y_i_o);// / dT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8006d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	_pixel_flow.out_y_i_o = _pixel_flow.out_y_i;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	_pixel_flow.fit_x += (_pixel_flow.x - _pixel_flow.fix_x) * 0.1;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7f9 fb90 	bl	80004a8 <__aeabi_f2d>
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8006d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d9c:	ee17 0a90 	vmov	r0, s15
 8006da0:	f7f9 fb82 	bl	80004a8 <__aeabi_f2d>
 8006da4:	a320      	add	r3, pc, #128	; (adr r3, 8006e28 <_ZN9PMW3901UY7processEv+0x260>)
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	f7f9 fbd5 	bl	8000558 <__aeabi_dmul>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4620      	mov	r0, r4
 8006db4:	4629      	mov	r1, r5
 8006db6:	f7f9 fa19 	bl	80001ec <__adddf3>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	f7f9 fea1 	bl	8000b08 <__aeabi_d2f>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	_pixel_flow.fit_y += (_pixel_flow.y - _pixel_flow.fix_y) * 0.1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7f9 fb67 	bl	80004a8 <__aeabi_f2d>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	460d      	mov	r5, r1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8006dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dee:	ee17 0a90 	vmov	r0, s15
 8006df2:	f7f9 fb59 	bl	80004a8 <__aeabi_f2d>
 8006df6:	a30c      	add	r3, pc, #48	; (adr r3, 8006e28 <_ZN9PMW3901UY7processEv+0x260>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 fbac 	bl	8000558 <__aeabi_dmul>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 f9f0 	bl	80001ec <__adddf3>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4610      	mov	r0, r2
 8006e12:	4619      	mov	r1, r3
 8006e14:	f7f9 fe78 	bl	8000b08 <__aeabi_d2f>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bdb0      	pop	{r4, r5, r7, pc}
 8006e28:	9999999a 	.word	0x9999999a
 8006e2c:	3fb99999 	.word	0x3fb99999
 8006e30:	3e4ccccd 	.word	0x3e4ccccd
 8006e34:	3c8e8a72 	.word	0x3c8e8a72
 8006e38:	44160000 	.word	0x44160000

08006e3c <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* PMW3901UY::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b08f      	sub	sp, #60	; 0x3c
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_X)!=senorsList.end())
 8006e4e:	2314      	movs	r3, #20
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	f107 030c 	add.w	r3, r7, #12
 8006e56:	4619      	mov	r1, r3
 8006e58:	6838      	ldr	r0, [r7, #0]
 8006e5a:	f7fc ffed 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	6838      	ldr	r0, [r7, #0]
 8006e64:	f7fd f801 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	613b      	str	r3, [r7, #16]
 8006e6c:	f107 0210 	add.w	r2, r7, #16
 8006e70:	f107 0308 	add.w	r3, r7, #8
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fd f804 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d01a      	beq.n	8006eb8 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(x_pos));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	1d1c      	adds	r4, r3, #4
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7fc f801 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8006e96:	4603      	mov	r3, r0
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f00d fc00 	bl	80146a0 <strcat>
		strcat(packet,",");
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	1d1c      	adds	r4, r3, #4
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f7f9 f993 	bl	80001d0 <strlen>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4423      	add	r3, r4
 8006eae:	4955      	ldr	r1, [pc, #340]	; (8007004 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_Y)!=senorsList.end())
 8006eb8:	2315      	movs	r3, #21
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	f107 0318 	add.w	r3, r7, #24
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6838      	ldr	r0, [r7, #0]
 8006ec4:	f7fc ffb8 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	6838      	ldr	r0, [r7, #0]
 8006ece:	f7fc ffcc 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	61fb      	str	r3, [r7, #28]
 8006ed6:	f107 021c 	add.w	r2, r7, #28
 8006eda:	f107 0314 	add.w	r3, r7, #20
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fc ffcf 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01a      	beq.n	8006f22 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xe6>
	{
		strcat(packet,toCharArray(y_pos));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	1d1c      	adds	r4, r3, #4
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fb ffcc 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8006f00:	4603      	mov	r3, r0
 8006f02:	4619      	mov	r1, r3
 8006f04:	4620      	mov	r0, r4
 8006f06:	f00d fbcb 	bl	80146a0 <strcat>
		strcat(packet,",");
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	1d1c      	adds	r4, r3, #4
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7f9 f95e 	bl	80001d0 <strlen>
 8006f14:	4603      	mov	r3, r0
 8006f16:	4423      	add	r3, r4
 8006f18:	493a      	ldr	r1, [pc, #232]	; (8007004 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_X)!=senorsList.end())
 8006f22:	2316      	movs	r3, #22
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
 8006f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6838      	ldr	r0, [r7, #0]
 8006f2e:	f7fc ff83 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8006f32:	4603      	mov	r3, r0
 8006f34:	623b      	str	r3, [r7, #32]
 8006f36:	6838      	ldr	r0, [r7, #0]
 8006f38:	f7fc ff97 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006f44:	f107 0320 	add.w	r3, r7, #32
 8006f48:	4611      	mov	r1, r2
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fc ff9a 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01a      	beq.n	8006f8c <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x150>
	{
		strcat(packet,toCharArray(flow_x));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	1d1c      	adds	r4, r3, #4
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f7fb ff97 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f00d fb96 	bl	80146a0 <strcat>
		strcat(packet,",");
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	1d1c      	adds	r4, r3, #4
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f7f9 f929 	bl	80001d0 <strlen>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4423      	add	r3, r4
 8006f82:	4920      	ldr	r1, [pc, #128]	; (8007004 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8006f84:	461a      	mov	r2, r3
 8006f86:	460b      	mov	r3, r1
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_Y)!=senorsList.end())
 8006f8c:	2317      	movs	r3, #23
 8006f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f94:	4619      	mov	r1, r3
 8006f96:	6838      	ldr	r0, [r7, #0]
 8006f98:	f7fc ff4e 	bl	8003e38 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa0:	6838      	ldr	r0, [r7, #0]
 8006fa2:	f7fc ff62 	bl	8003e6a <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8006faa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fc ff65 	bl	8003e84 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01a      	beq.n	8006ff6 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ba>
	{
		strcat(packet,toCharArray(flow_y));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	1d1c      	adds	r4, r3, #4
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fb ff62 	bl	8002e98 <_ZN15PrintableSensor11toCharArrayEi>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f00d fb61 	bl	80146a0 <strcat>
		strcat(packet,",");
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	1d1c      	adds	r4, r3, #4
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7f9 f8f4 	bl	80001d0 <strlen>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4423      	add	r3, r4
 8006fec:	4905      	ldr	r1, [pc, #20]	; (8007004 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8006fee:	461a      	mov	r2, r3
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3304      	adds	r3, #4
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	373c      	adds	r7, #60	; 0x3c
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd90      	pop	{r4, r7, pc}
 8007002:	bf00      	nop
 8007004:	08014878 	.word	0x08014878

08007008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800700c:	4b0e      	ldr	r3, [pc, #56]	; (8007048 <HAL_Init+0x40>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a0d      	ldr	r2, [pc, #52]	; (8007048 <HAL_Init+0x40>)
 8007012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007018:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <HAL_Init+0x40>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a0a      	ldr	r2, [pc, #40]	; (8007048 <HAL_Init+0x40>)
 800701e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007024:	4b08      	ldr	r3, [pc, #32]	; (8007048 <HAL_Init+0x40>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a07      	ldr	r2, [pc, #28]	; (8007048 <HAL_Init+0x40>)
 800702a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800702e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007030:	2003      	movs	r0, #3
 8007032:	f000 fd0e 	bl	8007a52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007036:	200f      	movs	r0, #15
 8007038:	f7fb fd4a 	bl	8002ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800703c:	f7fb f8d8 	bl	80021f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40023c00 	.word	0x40023c00

0800704c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <HAL_IncTick+0x20>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <HAL_IncTick+0x24>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4413      	add	r3, r2
 800705c:	4a04      	ldr	r2, [pc, #16]	; (8007070 <HAL_IncTick+0x24>)
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	bf00      	nop
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	20000008 	.word	0x20000008
 8007070:	20000940 	.word	0x20000940

08007074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  return uwTick;
 8007078:	4b03      	ldr	r3, [pc, #12]	; (8007088 <HAL_GetTick+0x14>)
 800707a:	681b      	ldr	r3, [r3, #0]
}
 800707c:	4618      	mov	r0, r3
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20000940 	.word	0x20000940

0800708c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007094:	f7ff ffee 	bl	8007074 <HAL_GetTick>
 8007098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a4:	d005      	beq.n	80070b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80070a6:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <HAL_Delay+0x44>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80070b2:	bf00      	nop
 80070b4:	f7ff ffde 	bl	8007074 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d8f7      	bhi.n	80070b4 <HAL_Delay+0x28>
  {
  }
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000008 	.word	0x20000008

080070d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e033      	b.n	8007152 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fb f8a8 	bl	8002248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b00      	cmp	r3, #0
 8007110:	d118      	bne.n	8007144 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800711a:	f023 0302 	bic.w	r3, r3, #2
 800711e:	f043 0202 	orr.w	r2, r3, #2
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fa68 	bl	80075fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	f043 0201 	orr.w	r2, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
 8007142:	e001      	b.n	8007148 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_ADC_Start_DMA+0x1e>
 8007176:	2302      	movs	r3, #2
 8007178:	e0e9      	b.n	800734e <HAL_ADC_Start_DMA+0x1f2>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b01      	cmp	r3, #1
 800718e:	d018      	beq.n	80071c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80071a0:	4b6d      	ldr	r3, [pc, #436]	; (8007358 <HAL_ADC_Start_DMA+0x1fc>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a6d      	ldr	r2, [pc, #436]	; (800735c <HAL_ADC_Start_DMA+0x200>)
 80071a6:	fba2 2303 	umull	r2, r3, r2, r3
 80071aa:	0c9a      	lsrs	r2, r3, #18
 80071ac:	4613      	mov	r3, r2
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	4413      	add	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80071b4:	e002      	b.n	80071bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f9      	bne.n	80071b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d0:	d107      	bne.n	80071e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	f040 80a1 	bne.w	8007334 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80071fa:	f023 0301 	bic.w	r3, r3, #1
 80071fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007210:	2b00      	cmp	r3, #0
 8007212:	d007      	beq.n	8007224 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800721c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800722c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007230:	d106      	bne.n	8007240 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007236:	f023 0206 	bic.w	r2, r3, #6
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	645a      	str	r2, [r3, #68]	; 0x44
 800723e:	e002      	b.n	8007246 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800724e:	4b44      	ldr	r3, [pc, #272]	; (8007360 <HAL_ADC_Start_DMA+0x204>)
 8007250:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	4a43      	ldr	r2, [pc, #268]	; (8007364 <HAL_ADC_Start_DMA+0x208>)
 8007258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	4a42      	ldr	r2, [pc, #264]	; (8007368 <HAL_ADC_Start_DMA+0x20c>)
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	4a41      	ldr	r2, [pc, #260]	; (800736c <HAL_ADC_Start_DMA+0x210>)
 8007268:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007272:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007282:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007292:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	334c      	adds	r3, #76	; 0x4c
 800729e:	4619      	mov	r1, r3
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f000 fcb8 	bl	8007c18 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d12a      	bne.n	800730a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a2d      	ldr	r2, [pc, #180]	; (8007370 <HAL_ADC_Start_DMA+0x214>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d015      	beq.n	80072ea <HAL_ADC_Start_DMA+0x18e>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a2c      	ldr	r2, [pc, #176]	; (8007374 <HAL_ADC_Start_DMA+0x218>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d105      	bne.n	80072d4 <HAL_ADC_Start_DMA+0x178>
 80072c8:	4b25      	ldr	r3, [pc, #148]	; (8007360 <HAL_ADC_Start_DMA+0x204>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a27      	ldr	r2, [pc, #156]	; (8007378 <HAL_ADC_Start_DMA+0x21c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d136      	bne.n	800734c <HAL_ADC_Start_DMA+0x1f0>
 80072de:	4b20      	ldr	r3, [pc, #128]	; (8007360 <HAL_ADC_Start_DMA+0x204>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f003 0310 	and.w	r3, r3, #16
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d130      	bne.n	800734c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d129      	bne.n	800734c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007306:	609a      	str	r2, [r3, #8]
 8007308:	e020      	b.n	800734c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a18      	ldr	r2, [pc, #96]	; (8007370 <HAL_ADC_Start_DMA+0x214>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d11b      	bne.n	800734c <HAL_ADC_Start_DMA+0x1f0>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d114      	bne.n	800734c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007330:	609a      	str	r2, [r3, #8]
 8007332:	e00b      	b.n	800734c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	f043 0210 	orr.w	r2, r3, #16
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007344:	f043 0201 	orr.w	r2, r3, #1
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000000 	.word	0x20000000
 800735c:	431bde83 	.word	0x431bde83
 8007360:	40012300 	.word	0x40012300
 8007364:	080077f5 	.word	0x080077f5
 8007368:	080078af 	.word	0x080078af
 800736c:	080078cb 	.word	0x080078cb
 8007370:	40012000 	.word	0x40012000
 8007374:	40012100 	.word	0x40012100
 8007378:	40012200 	.word	0x40012200

0800737c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_ADC_ConfigChannel+0x1c>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e105      	b.n	80075e0 <HAL_ADC_ConfigChannel+0x228>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b09      	cmp	r3, #9
 80073e2:	d925      	bls.n	8007430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68d9      	ldr	r1, [r3, #12]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	4613      	mov	r3, r2
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4413      	add	r3, r2
 80073f8:	3b1e      	subs	r3, #30
 80073fa:	2207      	movs	r2, #7
 80073fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007400:	43da      	mvns	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	400a      	ands	r2, r1
 8007408:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68d9      	ldr	r1, [r3, #12]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	b29b      	uxth	r3, r3
 800741a:	4618      	mov	r0, r3
 800741c:	4603      	mov	r3, r0
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	4403      	add	r3, r0
 8007422:	3b1e      	subs	r3, #30
 8007424:	409a      	lsls	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	60da      	str	r2, [r3, #12]
 800742e:	e022      	b.n	8007476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6919      	ldr	r1, [r3, #16]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	4613      	mov	r3, r2
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	4413      	add	r3, r2
 8007444:	2207      	movs	r2, #7
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43da      	mvns	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	400a      	ands	r2, r1
 8007452:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6919      	ldr	r1, [r3, #16]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	4618      	mov	r0, r3
 8007466:	4603      	mov	r3, r0
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4403      	add	r3, r0
 800746c:	409a      	lsls	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2b06      	cmp	r3, #6
 800747c:	d824      	bhi.n	80074c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	3b05      	subs	r3, #5
 8007490:	221f      	movs	r2, #31
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	43da      	mvns	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	400a      	ands	r2, r1
 800749e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4618      	mov	r0, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	3b05      	subs	r3, #5
 80074ba:	fa00 f203 	lsl.w	r2, r0, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	635a      	str	r2, [r3, #52]	; 0x34
 80074c6:	e04c      	b.n	8007562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b0c      	cmp	r3, #12
 80074ce:	d824      	bhi.n	800751a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	3b23      	subs	r3, #35	; 0x23
 80074e2:	221f      	movs	r2, #31
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	43da      	mvns	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	400a      	ands	r2, r1
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	4618      	mov	r0, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	3b23      	subs	r3, #35	; 0x23
 800750c:	fa00 f203 	lsl.w	r2, r0, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
 8007518:	e023      	b.n	8007562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	3b41      	subs	r3, #65	; 0x41
 800752c:	221f      	movs	r2, #31
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	43da      	mvns	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	400a      	ands	r2, r1
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	4618      	mov	r0, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	3b41      	subs	r3, #65	; 0x41
 8007556:	fa00 f203 	lsl.w	r2, r0, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007562:	4b22      	ldr	r3, [pc, #136]	; (80075ec <HAL_ADC_ConfigChannel+0x234>)
 8007564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a21      	ldr	r2, [pc, #132]	; (80075f0 <HAL_ADC_ConfigChannel+0x238>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d109      	bne.n	8007584 <HAL_ADC_ConfigChannel+0x1cc>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b12      	cmp	r3, #18
 8007576:	d105      	bne.n	8007584 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a19      	ldr	r2, [pc, #100]	; (80075f0 <HAL_ADC_ConfigChannel+0x238>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d123      	bne.n	80075d6 <HAL_ADC_ConfigChannel+0x21e>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b10      	cmp	r3, #16
 8007594:	d003      	beq.n	800759e <HAL_ADC_ConfigChannel+0x1e6>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b11      	cmp	r3, #17
 800759c:	d11b      	bne.n	80075d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b10      	cmp	r3, #16
 80075b0:	d111      	bne.n	80075d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80075b2:	4b10      	ldr	r3, [pc, #64]	; (80075f4 <HAL_ADC_ConfigChannel+0x23c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a10      	ldr	r2, [pc, #64]	; (80075f8 <HAL_ADC_ConfigChannel+0x240>)
 80075b8:	fba2 2303 	umull	r2, r3, r2, r3
 80075bc:	0c9a      	lsrs	r2, r3, #18
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80075c8:	e002      	b.n	80075d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f9      	bne.n	80075ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	40012300 	.word	0x40012300
 80075f0:	40012000 	.word	0x40012000
 80075f4:	20000000 	.word	0x20000000
 80075f8:	431bde83 	.word	0x431bde83

080075fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007604:	4b79      	ldr	r3, [pc, #484]	; (80077ec <ADC_Init+0x1f0>)
 8007606:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	431a      	orrs	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6859      	ldr	r1, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	021a      	lsls	r2, r3, #8
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6859      	ldr	r1, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6899      	ldr	r1, [r3, #8]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768e:	4a58      	ldr	r2, [pc, #352]	; (80077f0 <ADC_Init+0x1f4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d022      	beq.n	80076da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6899      	ldr	r1, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80076c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6899      	ldr	r1, [r3, #8]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	609a      	str	r2, [r3, #8]
 80076d8:	e00f      	b.n	80076fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80076f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0202 	bic.w	r2, r2, #2
 8007708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6899      	ldr	r1, [r3, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7e1b      	ldrb	r3, [r3, #24]
 8007714:	005a      	lsls	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01b      	beq.n	8007760 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007736:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6859      	ldr	r1, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	3b01      	subs	r3, #1
 8007754:	035a      	lsls	r2, r3, #13
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	e007      	b.n	8007770 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800776e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800777e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	3b01      	subs	r3, #1
 800778c:	051a      	lsls	r2, r3, #20
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6899      	ldr	r1, [r3, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077b2:	025a      	lsls	r2, r3, #9
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6899      	ldr	r1, [r3, #8]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	029a      	lsls	r2, r3, #10
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	609a      	str	r2, [r3, #8]
}
 80077e0:	bf00      	nop
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	40012300 	.word	0x40012300
 80077f0:	0f000001 	.word	0x0f000001

080077f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800780a:	2b00      	cmp	r3, #0
 800780c:	d13c      	bne.n	8007888 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d12b      	bne.n	8007880 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800782c:	2b00      	cmp	r3, #0
 800782e:	d127      	bne.n	8007880 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007836:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800783a:	2b00      	cmp	r3, #0
 800783c:	d006      	beq.n	800784c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007848:	2b00      	cmp	r3, #0
 800784a:	d119      	bne.n	8007880 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0220 	bic.w	r2, r2, #32
 800785a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d105      	bne.n	8007880 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff fd7b 	bl	800737c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007886:	e00e      	b.n	80078a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff fd85 	bl	80073a4 <HAL_ADC_ErrorCallback>
}
 800789a:	e004      	b.n	80078a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff fd67 	bl	8007390 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2240      	movs	r2, #64	; 0x40
 80078dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e2:	f043 0204 	orr.w	r2, r3, #4
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fd5a 	bl	80073a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <__NVIC_SetPriorityGrouping>:
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <__NVIC_SetPriorityGrouping+0x44>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007914:	4013      	ands	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800792a:	4a04      	ldr	r2, [pc, #16]	; (800793c <__NVIC_SetPriorityGrouping+0x44>)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	60d3      	str	r3, [r2, #12]
}
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	e000ed00 	.word	0xe000ed00

08007940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007944:	4b04      	ldr	r3, [pc, #16]	; (8007958 <__NVIC_GetPriorityGrouping+0x18>)
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	0a1b      	lsrs	r3, r3, #8
 800794a:	f003 0307 	and.w	r3, r3, #7
}
 800794e:	4618      	mov	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	e000ed00 	.word	0xe000ed00

0800795c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796a:	2b00      	cmp	r3, #0
 800796c:	db0b      	blt.n	8007986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	f003 021f 	and.w	r2, r3, #31
 8007974:	4907      	ldr	r1, [pc, #28]	; (8007994 <__NVIC_EnableIRQ+0x38>)
 8007976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	2001      	movs	r0, #1
 800797e:	fa00 f202 	lsl.w	r2, r0, r2
 8007982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	e000e100 	.word	0xe000e100

08007998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	4603      	mov	r3, r0
 80079a0:	6039      	str	r1, [r7, #0]
 80079a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	db0a      	blt.n	80079c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	490c      	ldr	r1, [pc, #48]	; (80079e4 <__NVIC_SetPriority+0x4c>)
 80079b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b6:	0112      	lsls	r2, r2, #4
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	440b      	add	r3, r1
 80079bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079c0:	e00a      	b.n	80079d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	4908      	ldr	r1, [pc, #32]	; (80079e8 <__NVIC_SetPriority+0x50>)
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	3b04      	subs	r3, #4
 80079d0:	0112      	lsls	r2, r2, #4
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	440b      	add	r3, r1
 80079d6:	761a      	strb	r2, [r3, #24]
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	e000e100 	.word	0xe000e100
 80079e8:	e000ed00 	.word	0xe000ed00

080079ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b089      	sub	sp, #36	; 0x24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f1c3 0307 	rsb	r3, r3, #7
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	bf28      	it	cs
 8007a0a:	2304      	movcs	r3, #4
 8007a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2b06      	cmp	r3, #6
 8007a14:	d902      	bls.n	8007a1c <NVIC_EncodePriority+0x30>
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	3b03      	subs	r3, #3
 8007a1a:	e000      	b.n	8007a1e <NVIC_EncodePriority+0x32>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a20:	f04f 32ff 	mov.w	r2, #4294967295
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	43da      	mvns	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	401a      	ands	r2, r3
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a34:	f04f 31ff 	mov.w	r1, #4294967295
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3e:	43d9      	mvns	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a44:	4313      	orrs	r3, r2
         );
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3724      	adds	r7, #36	; 0x24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff ff4c 	bl	80078f8 <__NVIC_SetPriorityGrouping>
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a7a:	f7ff ff61 	bl	8007940 <__NVIC_GetPriorityGrouping>
 8007a7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	6978      	ldr	r0, [r7, #20]
 8007a86:	f7ff ffb1 	bl	80079ec <NVIC_EncodePriority>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a90:	4611      	mov	r1, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff ff80 	bl	8007998 <__NVIC_SetPriority>
}
 8007a98:	bf00      	nop
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff ff54 	bl	800795c <__NVIC_EnableIRQ>
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ac8:	f7ff fad4 	bl	8007074 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e099      	b.n	8007c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0201 	bic.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007af8:	e00f      	b.n	8007b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007afa:	f7ff fabb 	bl	8007074 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b05      	cmp	r3, #5
 8007b06:	d908      	bls.n	8007b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2203      	movs	r2, #3
 8007b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e078      	b.n	8007c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e8      	bne.n	8007afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	4b38      	ldr	r3, [pc, #224]	; (8007c14 <HAL_DMA_Init+0x158>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d107      	bne.n	8007b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f023 0307 	bic.w	r3, r3, #7
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d117      	bne.n	8007bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00e      	beq.n	8007bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fb01 	bl	80081c8 <DMA_CheckFifoParam>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2240      	movs	r2, #64	; 0x40
 8007bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e016      	b.n	8007c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fab8 	bl	800815c <DMA_CalcBaseAndBitshift>
 8007bec:	4603      	mov	r3, r0
 8007bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf4:	223f      	movs	r2, #63	; 0x3f
 8007bf6:	409a      	lsls	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	f010803f 	.word	0xf010803f

08007c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d101      	bne.n	8007c3e <HAL_DMA_Start_IT+0x26>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e040      	b.n	8007cc0 <HAL_DMA_Start_IT+0xa8>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d12f      	bne.n	8007cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2202      	movs	r2, #2
 8007c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 fa4a 	bl	8008100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c70:	223f      	movs	r2, #63	; 0x3f
 8007c72:	409a      	lsls	r2, r3
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0216 	orr.w	r2, r2, #22
 8007c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f042 0208 	orr.w	r2, r2, #8
 8007c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	e005      	b.n	8007cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007cd6:	f7ff f9cd 	bl	8007074 <HAL_GetTick>
 8007cda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d008      	beq.n	8007cfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2280      	movs	r2, #128	; 0x80
 8007cec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e052      	b.n	8007da0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0216 	bic.w	r2, r2, #22
 8007d08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695a      	ldr	r2, [r3, #20]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <HAL_DMA_Abort+0x62>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0208 	bic.w	r2, r2, #8
 8007d38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0201 	bic.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d4a:	e013      	b.n	8007d74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d4c:	f7ff f992 	bl	8007074 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b05      	cmp	r3, #5
 8007d58:	d90c      	bls.n	8007d74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2203      	movs	r2, #3
 8007d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e015      	b.n	8007da0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e4      	bne.n	8007d4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d86:	223f      	movs	r2, #63	; 0x3f
 8007d88:	409a      	lsls	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d004      	beq.n	8007dc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2280      	movs	r2, #128	; 0x80
 8007dc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e00c      	b.n	8007de0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2205      	movs	r2, #5
 8007dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007df8:	4b8e      	ldr	r3, [pc, #568]	; (8008034 <HAL_DMA_IRQHandler+0x248>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a8e      	ldr	r2, [pc, #568]	; (8008038 <HAL_DMA_IRQHandler+0x24c>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	0a9b      	lsrs	r3, r3, #10
 8007e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e16:	2208      	movs	r2, #8
 8007e18:	409a      	lsls	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01a      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d013      	beq.n	8007e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0204 	bic.w	r2, r2, #4
 8007e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e44:	2208      	movs	r2, #8
 8007e46:	409a      	lsls	r2, r3
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e50:	f043 0201 	orr.w	r2, r3, #1
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	409a      	lsls	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4013      	ands	r3, r2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d012      	beq.n	8007e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	409a      	lsls	r2, r3
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	f043 0202 	orr.w	r2, r3, #2
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e92:	2204      	movs	r2, #4
 8007e94:	409a      	lsls	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d012      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ebc:	f043 0204 	orr.w	r2, r3, #4
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec8:	2210      	movs	r2, #16
 8007eca:	409a      	lsls	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4013      	ands	r3, r2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d043      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0308 	and.w	r3, r3, #8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d03c      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee6:	2210      	movs	r2, #16
 8007ee8:	409a      	lsls	r2, r3
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d018      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d108      	bne.n	8007f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d024      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
 8007f1a:	e01f      	b.n	8007f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01b      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	4798      	blx	r3
 8007f2c:	e016      	b.n	8007f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d107      	bne.n	8007f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0208 	bic.w	r2, r2, #8
 8007f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f60:	2220      	movs	r2, #32
 8007f62:	409a      	lsls	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4013      	ands	r3, r2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 808f 	beq.w	800808c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0310 	and.w	r3, r3, #16
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8087 	beq.w	800808c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f82:	2220      	movs	r2, #32
 8007f84:	409a      	lsls	r2, r3
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	d136      	bne.n	8008004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0216 	bic.w	r2, r2, #22
 8007fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695a      	ldr	r2, [r3, #20]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d103      	bne.n	8007fc6 <HAL_DMA_IRQHandler+0x1da>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d007      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0208 	bic.w	r2, r2, #8
 8007fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fda:	223f      	movs	r2, #63	; 0x3f
 8007fdc:	409a      	lsls	r2, r3
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d07e      	beq.n	80080f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
        }
        return;
 8008002:	e079      	b.n	80080f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d01d      	beq.n	800804e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10d      	bne.n	800803c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008024:	2b00      	cmp	r3, #0
 8008026:	d031      	beq.n	800808c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	4798      	blx	r3
 8008030:	e02c      	b.n	800808c <HAL_DMA_IRQHandler+0x2a0>
 8008032:	bf00      	nop
 8008034:	20000000 	.word	0x20000000
 8008038:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008040:	2b00      	cmp	r3, #0
 8008042:	d023      	beq.n	800808c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
 800804c:	e01e      	b.n	800808c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10f      	bne.n	800807c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0210 	bic.w	r2, r2, #16
 800806a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008090:	2b00      	cmp	r3, #0
 8008092:	d032      	beq.n	80080fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d022      	beq.n	80080e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2205      	movs	r2, #5
 80080a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0201 	bic.w	r2, r2, #1
 80080b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60bb      	str	r3, [r7, #8]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d307      	bcc.n	80080d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1f2      	bne.n	80080b8 <HAL_DMA_IRQHandler+0x2cc>
 80080d2:	e000      	b.n	80080d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80080d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
 80080f6:	e000      	b.n	80080fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80080f8:	bf00      	nop
    }
  }
}
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800811c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	2b40      	cmp	r3, #64	; 0x40
 800812c:	d108      	bne.n	8008140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800813e:	e007      	b.n	8008150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	60da      	str	r2, [r3, #12]
}
 8008150:	bf00      	nop
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	3b10      	subs	r3, #16
 800816c:	4a14      	ldr	r2, [pc, #80]	; (80081c0 <DMA_CalcBaseAndBitshift+0x64>)
 800816e:	fba2 2303 	umull	r2, r3, r2, r3
 8008172:	091b      	lsrs	r3, r3, #4
 8008174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008176:	4a13      	ldr	r2, [pc, #76]	; (80081c4 <DMA_CalcBaseAndBitshift+0x68>)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b03      	cmp	r3, #3
 8008188:	d909      	bls.n	800819e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008192:	f023 0303 	bic.w	r3, r3, #3
 8008196:	1d1a      	adds	r2, r3, #4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	659a      	str	r2, [r3, #88]	; 0x58
 800819c:	e007      	b.n	80081ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80081a6:	f023 0303 	bic.w	r3, r3, #3
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	aaaaaaab 	.word	0xaaaaaaab
 80081c4:	080149fc 	.word	0x080149fc

080081c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11f      	bne.n	8008222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d856      	bhi.n	8008296 <DMA_CheckFifoParam+0xce>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <DMA_CheckFifoParam+0x28>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008213 	.word	0x08008213
 80081f8:	08008201 	.word	0x08008201
 80081fc:	08008297 	.word	0x08008297
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d046      	beq.n	800829a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008210:	e043      	b.n	800829a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800821a:	d140      	bne.n	800829e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008220:	e03d      	b.n	800829e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822a:	d121      	bne.n	8008270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d837      	bhi.n	80082a2 <DMA_CheckFifoParam+0xda>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <DMA_CheckFifoParam+0x70>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008249 	.word	0x08008249
 800823c:	0800824f 	.word	0x0800824f
 8008240:	08008249 	.word	0x08008249
 8008244:	08008261 	.word	0x08008261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
      break;
 800824c:	e030      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d025      	beq.n	80082a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800825e:	e022      	b.n	80082a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008268:	d11f      	bne.n	80082aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800826e:	e01c      	b.n	80082aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d903      	bls.n	800827e <DMA_CheckFifoParam+0xb6>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b03      	cmp	r3, #3
 800827a:	d003      	beq.n	8008284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800827c:	e018      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	73fb      	strb	r3, [r7, #15]
      break;
 8008282:	e015      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00e      	beq.n	80082ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
      break;
 8008294:	e00b      	b.n	80082ae <DMA_CheckFifoParam+0xe6>
      break;
 8008296:	bf00      	nop
 8008298:	e00a      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 800829a:	bf00      	nop
 800829c:	e008      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 800829e:	bf00      	nop
 80082a0:	e006      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 80082a2:	bf00      	nop
 80082a4:	e004      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 80082a6:	bf00      	nop
 80082a8:	e002      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80082aa:	bf00      	nop
 80082ac:	e000      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 80082ae:	bf00      	nop
    }
  } 
  
  return status; 
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop

080082c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b089      	sub	sp, #36	; 0x24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082d6:	2300      	movs	r3, #0
 80082d8:	61fb      	str	r3, [r7, #28]
 80082da:	e16b      	b.n	80085b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80082dc:	2201      	movs	r2, #1
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4013      	ands	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	f040 815a 	bne.w	80085ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f003 0303 	and.w	r3, r3, #3
 8008302:	2b01      	cmp	r3, #1
 8008304:	d005      	beq.n	8008312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800830e:	2b02      	cmp	r3, #2
 8008310:	d130      	bne.n	8008374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	2203      	movs	r2, #3
 800831e:	fa02 f303 	lsl.w	r3, r2, r3
 8008322:	43db      	mvns	r3, r3
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	4013      	ands	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4313      	orrs	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008348:	2201      	movs	r2, #1
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	fa02 f303 	lsl.w	r3, r2, r3
 8008350:	43db      	mvns	r3, r3
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	4013      	ands	r3, r2
 8008356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	091b      	lsrs	r3, r3, #4
 800835e:	f003 0201 	and.w	r2, r3, #1
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	fa02 f303 	lsl.w	r3, r2, r3
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	4313      	orrs	r3, r2
 800836c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	2b03      	cmp	r3, #3
 800837e:	d017      	beq.n	80083b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	2203      	movs	r2, #3
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	43db      	mvns	r3, r3
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	4013      	ands	r3, r2
 8008396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	fa02 f303 	lsl.w	r3, r2, r3
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f003 0303 	and.w	r3, r3, #3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d123      	bne.n	8008404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	08da      	lsrs	r2, r3, #3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3208      	adds	r2, #8
 80083c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	220f      	movs	r2, #15
 80083d4:	fa02 f303 	lsl.w	r3, r2, r3
 80083d8:	43db      	mvns	r3, r3
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	4013      	ands	r3, r2
 80083de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	691a      	ldr	r2, [r3, #16]
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	fa02 f303 	lsl.w	r3, r2, r3
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	08da      	lsrs	r2, r3, #3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3208      	adds	r2, #8
 80083fe:	69b9      	ldr	r1, [r7, #24]
 8008400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	2203      	movs	r2, #3
 8008410:	fa02 f303 	lsl.w	r3, r2, r3
 8008414:	43db      	mvns	r3, r3
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	4013      	ands	r3, r2
 800841a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f003 0203 	and.w	r2, r3, #3
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	4313      	orrs	r3, r2
 8008430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80b4 	beq.w	80085ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	4b60      	ldr	r3, [pc, #384]	; (80085cc <HAL_GPIO_Init+0x30c>)
 800844c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800844e:	4a5f      	ldr	r2, [pc, #380]	; (80085cc <HAL_GPIO_Init+0x30c>)
 8008450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008454:	6453      	str	r3, [r2, #68]	; 0x44
 8008456:	4b5d      	ldr	r3, [pc, #372]	; (80085cc <HAL_GPIO_Init+0x30c>)
 8008458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008462:	4a5b      	ldr	r2, [pc, #364]	; (80085d0 <HAL_GPIO_Init+0x310>)
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	089b      	lsrs	r3, r3, #2
 8008468:	3302      	adds	r3, #2
 800846a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800846e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	f003 0303 	and.w	r3, r3, #3
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	220f      	movs	r2, #15
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	43db      	mvns	r3, r3
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	4013      	ands	r3, r2
 8008484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a52      	ldr	r2, [pc, #328]	; (80085d4 <HAL_GPIO_Init+0x314>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d02b      	beq.n	80084e6 <HAL_GPIO_Init+0x226>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a51      	ldr	r2, [pc, #324]	; (80085d8 <HAL_GPIO_Init+0x318>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d025      	beq.n	80084e2 <HAL_GPIO_Init+0x222>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a50      	ldr	r2, [pc, #320]	; (80085dc <HAL_GPIO_Init+0x31c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01f      	beq.n	80084de <HAL_GPIO_Init+0x21e>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a4f      	ldr	r2, [pc, #316]	; (80085e0 <HAL_GPIO_Init+0x320>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d019      	beq.n	80084da <HAL_GPIO_Init+0x21a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a4e      	ldr	r2, [pc, #312]	; (80085e4 <HAL_GPIO_Init+0x324>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d013      	beq.n	80084d6 <HAL_GPIO_Init+0x216>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a4d      	ldr	r2, [pc, #308]	; (80085e8 <HAL_GPIO_Init+0x328>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00d      	beq.n	80084d2 <HAL_GPIO_Init+0x212>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a4c      	ldr	r2, [pc, #304]	; (80085ec <HAL_GPIO_Init+0x32c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d007      	beq.n	80084ce <HAL_GPIO_Init+0x20e>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a4b      	ldr	r2, [pc, #300]	; (80085f0 <HAL_GPIO_Init+0x330>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d101      	bne.n	80084ca <HAL_GPIO_Init+0x20a>
 80084c6:	2307      	movs	r3, #7
 80084c8:	e00e      	b.n	80084e8 <HAL_GPIO_Init+0x228>
 80084ca:	2308      	movs	r3, #8
 80084cc:	e00c      	b.n	80084e8 <HAL_GPIO_Init+0x228>
 80084ce:	2306      	movs	r3, #6
 80084d0:	e00a      	b.n	80084e8 <HAL_GPIO_Init+0x228>
 80084d2:	2305      	movs	r3, #5
 80084d4:	e008      	b.n	80084e8 <HAL_GPIO_Init+0x228>
 80084d6:	2304      	movs	r3, #4
 80084d8:	e006      	b.n	80084e8 <HAL_GPIO_Init+0x228>
 80084da:	2303      	movs	r3, #3
 80084dc:	e004      	b.n	80084e8 <HAL_GPIO_Init+0x228>
 80084de:	2302      	movs	r3, #2
 80084e0:	e002      	b.n	80084e8 <HAL_GPIO_Init+0x228>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e000      	b.n	80084e8 <HAL_GPIO_Init+0x228>
 80084e6:	2300      	movs	r3, #0
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	f002 0203 	and.w	r2, r2, #3
 80084ee:	0092      	lsls	r2, r2, #2
 80084f0:	4093      	lsls	r3, r2
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084f8:	4935      	ldr	r1, [pc, #212]	; (80085d0 <HAL_GPIO_Init+0x310>)
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	089b      	lsrs	r3, r3, #2
 80084fe:	3302      	adds	r3, #2
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008506:	4b3b      	ldr	r3, [pc, #236]	; (80085f4 <HAL_GPIO_Init+0x334>)
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	43db      	mvns	r3, r3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	4013      	ands	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	4313      	orrs	r3, r2
 8008528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800852a:	4a32      	ldr	r2, [pc, #200]	; (80085f4 <HAL_GPIO_Init+0x334>)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008530:	4b30      	ldr	r3, [pc, #192]	; (80085f4 <HAL_GPIO_Init+0x334>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	43db      	mvns	r3, r3
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	4013      	ands	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	4313      	orrs	r3, r2
 8008552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008554:	4a27      	ldr	r2, [pc, #156]	; (80085f4 <HAL_GPIO_Init+0x334>)
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800855a:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <HAL_GPIO_Init+0x334>)
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	43db      	mvns	r3, r3
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	4013      	ands	r3, r2
 8008568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800857e:	4a1d      	ldr	r2, [pc, #116]	; (80085f4 <HAL_GPIO_Init+0x334>)
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008584:	4b1b      	ldr	r3, [pc, #108]	; (80085f4 <HAL_GPIO_Init+0x334>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	43db      	mvns	r3, r3
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	4013      	ands	r3, r2
 8008592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80085a8:	4a12      	ldr	r2, [pc, #72]	; (80085f4 <HAL_GPIO_Init+0x334>)
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	3301      	adds	r3, #1
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	2b0f      	cmp	r3, #15
 80085b8:	f67f ae90 	bls.w	80082dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	3724      	adds	r7, #36	; 0x24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	40023800 	.word	0x40023800
 80085d0:	40013800 	.word	0x40013800
 80085d4:	40020000 	.word	0x40020000
 80085d8:	40020400 	.word	0x40020400
 80085dc:	40020800 	.word	0x40020800
 80085e0:	40020c00 	.word	0x40020c00
 80085e4:	40021000 	.word	0x40021000
 80085e8:	40021400 	.word	0x40021400
 80085ec:	40021800 	.word	0x40021800
 80085f0:	40021c00 	.word	0x40021c00
 80085f4:	40013c00 	.word	0x40013c00

080085f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	807b      	strh	r3, [r7, #2]
 8008604:	4613      	mov	r3, r2
 8008606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008608:	787b      	ldrb	r3, [r7, #1]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800860e:	887a      	ldrh	r2, [r7, #2]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008614:	e003      	b.n	800861e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008616:	887b      	ldrh	r3, [r7, #2]
 8008618:	041a      	lsls	r2, r3, #16
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	619a      	str	r2, [r3, #24]
}
 800861e:	bf00      	nop
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
	...

0800862c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008636:	4b08      	ldr	r3, [pc, #32]	; (8008658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008638:	695a      	ldr	r2, [r3, #20]
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	4013      	ands	r3, r2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d006      	beq.n	8008650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008642:	4a05      	ldr	r2, [pc, #20]	; (8008658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008644:	88fb      	ldrh	r3, [r7, #6]
 8008646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	4618      	mov	r0, r3
 800864c:	f7f9 f81e 	bl	800168c <HAL_GPIO_EXTI_Callback>
  }
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	40013c00 	.word	0x40013c00

0800865c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800865c:	b590      	push	{r4, r7, lr}
 800865e:	b08d      	sub	sp, #52	; 0x34
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f006 ff37 	bl	800f4e6 <USB_GetMode>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	f040 848a 	bne.w	8008f94 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f006 fe9b 	bl	800f3c0 <USB_ReadInterrupts>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8480 	beq.w	8008f92 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	0a1b      	lsrs	r3, r3, #8
 800869c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f006 fe88 	bl	800f3c0 <USB_ReadInterrupts>
 80086b0:	4603      	mov	r3, r0
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d107      	bne.n	80086ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	695a      	ldr	r2, [r3, #20]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f002 0202 	and.w	r2, r2, #2
 80086c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f006 fe76 	bl	800f3c0 <USB_ReadInterrupts>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b10      	cmp	r3, #16
 80086dc:	d161      	bne.n	80087a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699a      	ldr	r2, [r3, #24]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0210 	bic.w	r2, r2, #16
 80086ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	f003 020f 	and.w	r2, r3, #15
 80086fa:	4613      	mov	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	4413      	add	r3, r2
 800870a:	3304      	adds	r3, #4
 800870c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	0c5b      	lsrs	r3, r3, #17
 8008712:	f003 030f 	and.w	r3, r3, #15
 8008716:	2b02      	cmp	r3, #2
 8008718:	d124      	bne.n	8008764 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008720:	4013      	ands	r3, r2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d035      	beq.n	8008792 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	091b      	lsrs	r3, r3, #4
 800872e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008730:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008734:	b29b      	uxth	r3, r3
 8008736:	461a      	mov	r2, r3
 8008738:	6a38      	ldr	r0, [r7, #32]
 800873a:	f006 fcef 	bl	800f11c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	091b      	lsrs	r3, r3, #4
 8008746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800874a:	441a      	add	r2, r3
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	6a1a      	ldr	r2, [r3, #32]
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	091b      	lsrs	r3, r3, #4
 8008758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800875c:	441a      	add	r2, r3
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	621a      	str	r2, [r3, #32]
 8008762:	e016      	b.n	8008792 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	0c5b      	lsrs	r3, r3, #17
 8008768:	f003 030f 	and.w	r3, r3, #15
 800876c:	2b06      	cmp	r3, #6
 800876e:	d110      	bne.n	8008792 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008776:	2208      	movs	r2, #8
 8008778:	4619      	mov	r1, r3
 800877a:	6a38      	ldr	r0, [r7, #32]
 800877c:	f006 fcce 	bl	800f11c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	6a1a      	ldr	r2, [r3, #32]
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	091b      	lsrs	r3, r3, #4
 8008788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800878c:	441a      	add	r2, r3
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699a      	ldr	r2, [r3, #24]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0210 	orr.w	r2, r2, #16
 80087a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f006 fe0a 	bl	800f3c0 <USB_ReadInterrupts>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087b6:	f040 80a7 	bne.w	8008908 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f006 fe0f 	bl	800f3e6 <USB_ReadDevAllOutEpInterrupt>
 80087c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80087ca:	e099      	b.n	8008900 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 808e 	beq.w	80088f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	4611      	mov	r1, r2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f006 fe33 	bl	800f44e <USB_ReadDevOutEPInterrupt>
 80087e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00c      	beq.n	800880e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008800:	461a      	mov	r2, r3
 8008802:	2301      	movs	r3, #1
 8008804:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fe61 	bl	80094d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f003 0308 	and.w	r3, r3, #8
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00c      	beq.n	8008832 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008824:	461a      	mov	r2, r3
 8008826:	2308      	movs	r3, #8
 8008828:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800882a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 ff37 	bl	80096a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	d008      	beq.n	800884e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008848:	461a      	mov	r2, r3
 800884a:	2310      	movs	r3, #16
 800884c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d030      	beq.n	80088ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008860:	2b80      	cmp	r3, #128	; 0x80
 8008862:	d109      	bne.n	8008878 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008876:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	4613      	mov	r3, r2
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	3304      	adds	r3, #4
 800888c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	78db      	ldrb	r3, [r3, #3]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d108      	bne.n	80088a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2200      	movs	r2, #0
 800889a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f009 fcac 	bl	8012200 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b4:	461a      	mov	r2, r3
 80088b6:	2302      	movs	r3, #2
 80088b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f003 0320 	and.w	r3, r3, #32
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d008      	beq.n	80088d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d0:	461a      	mov	r2, r3
 80088d2:	2320      	movs	r3, #32
 80088d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ec:	461a      	mov	r2, r3
 80088ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	3301      	adds	r3, #1
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	085b      	lsrs	r3, r3, #1
 80088fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	2b00      	cmp	r3, #0
 8008904:	f47f af62 	bne.w	80087cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f006 fd57 	bl	800f3c0 <USB_ReadInterrupts>
 8008912:	4603      	mov	r3, r0
 8008914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800891c:	f040 80db 	bne.w	8008ad6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4618      	mov	r0, r3
 8008926:	f006 fd78 	bl	800f41a <USB_ReadDevAllInEpInterrupt>
 800892a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008930:	e0cd      	b.n	8008ace <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 80c2 	beq.w	8008ac2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008944:	b2d2      	uxtb	r2, r2
 8008946:	4611      	mov	r1, r2
 8008948:	4618      	mov	r0, r3
 800894a:	f006 fd9e 	bl	800f48a <USB_ReadDevInEPInterrupt>
 800894e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	d057      	beq.n	8008a0a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	f003 030f 	and.w	r3, r3, #15
 8008960:	2201      	movs	r2, #1
 8008962:	fa02 f303 	lsl.w	r3, r2, r3
 8008966:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	43db      	mvns	r3, r3
 8008974:	69f9      	ldr	r1, [r7, #28]
 8008976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800897a:	4013      	ands	r3, r2
 800897c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898a:	461a      	mov	r2, r3
 800898c:	2301      	movs	r3, #1
 800898e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d132      	bne.n	80089fe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899c:	4613      	mov	r3, r2
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	440b      	add	r3, r1
 80089a6:	334c      	adds	r3, #76	; 0x4c
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ae:	4613      	mov	r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4403      	add	r3, r0
 80089b8:	3348      	adds	r3, #72	; 0x48
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4419      	add	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	4613      	mov	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4403      	add	r3, r0
 80089cc:	334c      	adds	r3, #76	; 0x4c
 80089ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d113      	bne.n	80089fe <HAL_PCD_IRQHandler+0x3a2>
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089da:	4613      	mov	r3, r2
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	3354      	adds	r3, #84	; 0x54
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d108      	bne.n	80089fe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089f6:	461a      	mov	r2, r3
 80089f8:	2101      	movs	r1, #1
 80089fa:	f006 fda5 	bl	800f548 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f009 fb76 	bl	80120f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f003 0308 	and.w	r3, r3, #8
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a20:	461a      	mov	r2, r3
 8008a22:	2308      	movs	r3, #8
 8008a24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d008      	beq.n	8008a42 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	2310      	movs	r3, #16
 8008a40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d008      	beq.n	8008a5e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	461a      	mov	r2, r3
 8008a5a:	2340      	movs	r3, #64	; 0x40
 8008a5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d023      	beq.n	8008ab0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a6a:	6a38      	ldr	r0, [r7, #32]
 8008a6c:	f005 fdee 	bl	800e64c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a72:	4613      	mov	r3, r2
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	3338      	adds	r3, #56	; 0x38
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	4413      	add	r3, r2
 8008a80:	3304      	adds	r3, #4
 8008a82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	78db      	ldrb	r3, [r3, #3]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d108      	bne.n	8008a9e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f009 fbc3 	bl	8012224 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	461a      	mov	r2, r3
 8008aac:	2302      	movs	r3, #2
 8008aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fc79 	bl	80093b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f47f af2e 	bne.w	8008932 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f006 fc70 	bl	800f3c0 <USB_ReadInterrupts>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aea:	d122      	bne.n	8008b32 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008afa:	f023 0301 	bic.w	r3, r3, #1
 8008afe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d108      	bne.n	8008b1c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008b12:	2100      	movs	r1, #0
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fe09 	bl	800972c <HAL_PCDEx_LPM_Callback>
 8008b1a:	e002      	b.n	8008b22 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f009 fb61 	bl	80121e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	695a      	ldr	r2, [r3, #20]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f006 fc42 	bl	800f3c0 <USB_ReadInterrupts>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b46:	d112      	bne.n	8008b6e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d102      	bne.n	8008b5e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f009 fb1d 	bl	8012198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	695a      	ldr	r2, [r3, #20]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008b6c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f006 fc24 	bl	800f3c0 <USB_ReadInterrupts>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b82:	f040 80b7 	bne.w	8008cf4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b94:	f023 0301 	bic.w	r3, r3, #1
 8008b98:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2110      	movs	r1, #16
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f005 fd53 	bl	800e64c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008baa:	e046      	b.n	8008c3a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb8:	461a      	mov	r2, r3
 8008bba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bbe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd0:	0151      	lsls	r1, r2, #5
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	440a      	add	r2, r1
 8008bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bde:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bec:	461a      	mov	r2, r3
 8008bee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bf2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c04:	0151      	lsls	r1, r2, #5
 8008c06:	69fa      	ldr	r2, [r7, #28]
 8008c08:	440a      	add	r2, r1
 8008c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c24:	0151      	lsls	r1, r2, #5
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	440a      	add	r2, r1
 8008c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c32:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	3301      	adds	r3, #1
 8008c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d3b3      	bcc.n	8008bac <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	69fa      	ldr	r2, [r7, #28]
 8008c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c52:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c56:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d016      	beq.n	8008c8e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c6a:	69fa      	ldr	r2, [r7, #28]
 8008c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c70:	f043 030b 	orr.w	r3, r3, #11
 8008c74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c86:	f043 030b 	orr.w	r3, r3, #11
 8008c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8008c8c:	e015      	b.n	8008cba <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ca0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008ca4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb4:	f043 030b 	orr.w	r3, r3, #11
 8008cb8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69fa      	ldr	r2, [r7, #28]
 8008cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cc8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ccc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f006 fc32 	bl	800f548 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695a      	ldr	r2, [r3, #20]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f006 fb61 	bl	800f3c0 <USB_ReadInterrupts>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d08:	d124      	bne.n	8008d54 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f006 fbf7 	bl	800f502 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f005 fccb 	bl	800e6b4 <USB_GetDevSpeed>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	461a      	mov	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681c      	ldr	r4, [r3, #0]
 8008d2a:	f001 f96d 	bl	800a008 <HAL_RCC_GetHCLKFreq>
 8008d2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f005 fbe5 	bl	800e508 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f009 fa01 	bl	8012146 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	695a      	ldr	r2, [r3, #20]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f006 fb31 	bl	800f3c0 <USB_ReadInterrupts>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f003 0308 	and.w	r3, r3, #8
 8008d64:	2b08      	cmp	r3, #8
 8008d66:	d10a      	bne.n	8008d7e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f009 f9de 	bl	801212a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	695a      	ldr	r2, [r3, #20]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f002 0208 	and.w	r2, r2, #8
 8008d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f006 fb1c 	bl	800f3c0 <USB_ReadInterrupts>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8e:	2b80      	cmp	r3, #128	; 0x80
 8008d90:	d122      	bne.n	8008dd8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d9e:	2301      	movs	r3, #1
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
 8008da2:	e014      	b.n	8008dce <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da8:	4613      	mov	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	440b      	add	r3, r1
 8008db2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d105      	bne.n	8008dc8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fac5 	bl	8009352 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	3301      	adds	r3, #1
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d3e5      	bcc.n	8008da4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f006 faef 	bl	800f3c0 <USB_ReadInterrupts>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dec:	d13b      	bne.n	8008e66 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dee:	2301      	movs	r3, #1
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
 8008df2:	e02b      	b.n	8008e4c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e04:	6879      	ldr	r1, [r7, #4]
 8008e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e08:	4613      	mov	r3, r2
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	440b      	add	r3, r1
 8008e12:	3340      	adds	r3, #64	; 0x40
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d115      	bne.n	8008e46 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008e1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	da12      	bge.n	8008e46 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e24:	4613      	mov	r3, r2
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	333f      	adds	r3, #63	; 0x3f
 8008e30:	2201      	movs	r2, #1
 8008e32:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fa86 	bl	8009352 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	3301      	adds	r3, #1
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d3ce      	bcc.n	8008df4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	695a      	ldr	r2, [r3, #20]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f006 faa8 	bl	800f3c0 <USB_ReadInterrupts>
 8008e70:	4603      	mov	r3, r0
 8008e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e7a:	d155      	bne.n	8008f28 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e80:	e045      	b.n	8008f0e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e92:	6879      	ldr	r1, [r7, #4]
 8008e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e96:	4613      	mov	r3, r2
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d12e      	bne.n	8008f08 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008eaa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	da2b      	bge.n	8008f08 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008ebc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d121      	bne.n	8008f08 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec8:	4613      	mov	r3, r2
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	69fa      	ldr	r2, [r7, #28]
 8008efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f04:	6053      	str	r3, [r2, #4]
            break;
 8008f06:	e007      	b.n	8008f18 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d3b4      	bcc.n	8008e82 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	695a      	ldr	r2, [r3, #20]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f006 fa47 	bl	800f3c0 <USB_ReadInterrupts>
 8008f32:	4603      	mov	r3, r0
 8008f34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3c:	d10a      	bne.n	8008f54 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f009 f982 	bl	8012248 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	695a      	ldr	r2, [r3, #20]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f006 fa31 	bl	800f3c0 <USB_ReadInterrupts>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d115      	bne.n	8008f94 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f009 f972 	bl	8012264 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6859      	ldr	r1, [r3, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	605a      	str	r2, [r3, #4]
 8008f90:	e000      	b.n	8008f94 <HAL_PCD_IRQHandler+0x938>
      return;
 8008f92:	bf00      	nop
    }
  }
}
 8008f94:	3734      	adds	r7, #52	; 0x34
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd90      	pop	{r4, r7, pc}

08008f9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d101      	bne.n	8008fb4 <HAL_PCD_SetAddress+0x1a>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e013      	b.n	8008fdc <HAL_PCD_SetAddress+0x42>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	78fa      	ldrb	r2, [r7, #3]
 8008fca:	4611      	mov	r1, r2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f006 f9d1 	bl	800f374 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	4608      	mov	r0, r1
 8008fee:	4611      	mov	r1, r2
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	70fb      	strb	r3, [r7, #3]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	803b      	strh	r3, [r7, #0]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009006:	2b00      	cmp	r3, #0
 8009008:	da0f      	bge.n	800902a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	f003 020f 	and.w	r2, r3, #15
 8009010:	4613      	mov	r3, r2
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	4413      	add	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	3338      	adds	r3, #56	; 0x38
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	4413      	add	r3, r2
 800901e:	3304      	adds	r3, #4
 8009020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2201      	movs	r2, #1
 8009026:	705a      	strb	r2, [r3, #1]
 8009028:	e00f      	b.n	800904a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	f003 020f 	and.w	r2, r3, #15
 8009030:	4613      	mov	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	4413      	add	r3, r2
 8009040:	3304      	adds	r3, #4
 8009042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	b2da      	uxtb	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009056:	883a      	ldrh	r2, [r7, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	78ba      	ldrb	r2, [r7, #2]
 8009060:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	785b      	ldrb	r3, [r3, #1]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d004      	beq.n	8009074 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b29a      	uxth	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009074:	78bb      	ldrb	r3, [r7, #2]
 8009076:	2b02      	cmp	r3, #2
 8009078:	d102      	bne.n	8009080 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_PCD_EP_Open+0xaa>
 800908a:	2302      	movs	r3, #2
 800908c:	e00e      	b.n	80090ac <HAL_PCD_EP_Open+0xc8>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68f9      	ldr	r1, [r7, #12]
 800909c:	4618      	mov	r0, r3
 800909e:	f005 fb2e 	bl	800e6fe <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80090aa:	7afb      	ldrb	r3, [r7, #11]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	607a      	str	r2, [r7, #4]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	460b      	mov	r3, r1
 80090c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090c4:	7afb      	ldrb	r3, [r7, #11]
 80090c6:	f003 020f 	and.w	r2, r3, #15
 80090ca:	4613      	mov	r3, r2
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	4413      	add	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	3304      	adds	r3, #4
 80090dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2200      	movs	r2, #0
 80090ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2200      	movs	r2, #0
 80090f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090f6:	7afb      	ldrb	r3, [r7, #11]
 80090f8:	f003 030f 	and.w	r3, r3, #15
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d102      	bne.n	8009110 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009110:	7afb      	ldrb	r3, [r7, #11]
 8009112:	f003 030f 	and.w	r3, r3, #15
 8009116:	2b00      	cmp	r3, #0
 8009118:	d109      	bne.n	800912e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	b2db      	uxtb	r3, r3
 8009124:	461a      	mov	r2, r3
 8009126:	6979      	ldr	r1, [r7, #20]
 8009128:	f005 fdb8 	bl	800ec9c <USB_EP0StartXfer>
 800912c:	e008      	b.n	8009140 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	b2db      	uxtb	r3, r3
 8009138:	461a      	mov	r2, r3
 800913a:	6979      	ldr	r1, [r7, #20]
 800913c:	f005 fb66 	bl	800e80c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b086      	sub	sp, #24
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
 8009156:	460b      	mov	r3, r1
 8009158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	f003 020f 	and.w	r2, r3, #15
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	3338      	adds	r3, #56	; 0x38
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4413      	add	r3, r2
 800916e:	3304      	adds	r3, #4
 8009170:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2200      	movs	r2, #0
 8009182:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2201      	movs	r2, #1
 8009188:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	b2da      	uxtb	r2, r3
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d102      	bne.n	80091a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091a4:	7afb      	ldrb	r3, [r7, #11]
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d109      	bne.n	80091c2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	461a      	mov	r2, r3
 80091ba:	6979      	ldr	r1, [r7, #20]
 80091bc:	f005 fd6e 	bl	800ec9c <USB_EP0StartXfer>
 80091c0:	e008      	b.n	80091d4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	461a      	mov	r2, r3
 80091ce:	6979      	ldr	r1, [r7, #20]
 80091d0:	f005 fb1c 	bl	800e80c <USB_EPStartXfer>
  }

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	f003 020f 	and.w	r2, r3, #15
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d901      	bls.n	80091fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e050      	b.n	800929e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009200:	2b00      	cmp	r3, #0
 8009202:	da0f      	bge.n	8009224 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	f003 020f 	and.w	r2, r3, #15
 800920a:	4613      	mov	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	3338      	adds	r3, #56	; 0x38
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	4413      	add	r3, r2
 8009218:	3304      	adds	r3, #4
 800921a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2201      	movs	r2, #1
 8009220:	705a      	strb	r2, [r3, #1]
 8009222:	e00d      	b.n	8009240 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009224:	78fa      	ldrb	r2, [r7, #3]
 8009226:	4613      	mov	r3, r2
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	4413      	add	r3, r2
 8009236:	3304      	adds	r3, #4
 8009238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2201      	movs	r2, #1
 8009244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009246:	78fb      	ldrb	r3, [r7, #3]
 8009248:	f003 030f 	and.w	r3, r3, #15
 800924c:	b2da      	uxtb	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009258:	2b01      	cmp	r3, #1
 800925a:	d101      	bne.n	8009260 <HAL_PCD_EP_SetStall+0x82>
 800925c:	2302      	movs	r3, #2
 800925e:	e01e      	b.n	800929e <HAL_PCD_EP_SetStall+0xc0>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68f9      	ldr	r1, [r7, #12]
 800926e:	4618      	mov	r0, r3
 8009270:	f005 ffac 	bl	800f1cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	f003 030f 	and.w	r3, r3, #15
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	b2d9      	uxtb	r1, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800928e:	461a      	mov	r2, r3
 8009290:	f006 f95a 	bl	800f548 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80092b2:	78fb      	ldrb	r3, [r7, #3]
 80092b4:	f003 020f 	and.w	r2, r3, #15
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d901      	bls.n	80092c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e042      	b.n	800934a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	da0f      	bge.n	80092ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	f003 020f 	and.w	r2, r3, #15
 80092d2:	4613      	mov	r3, r2
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	3338      	adds	r3, #56	; 0x38
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	4413      	add	r3, r2
 80092e0:	3304      	adds	r3, #4
 80092e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	705a      	strb	r2, [r3, #1]
 80092ea:	e00f      	b.n	800930c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	f003 020f 	and.w	r2, r3, #15
 80092f2:	4613      	mov	r3, r2
 80092f4:	00db      	lsls	r3, r3, #3
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	4413      	add	r3, r2
 8009302:	3304      	adds	r3, #4
 8009304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009312:	78fb      	ldrb	r3, [r7, #3]
 8009314:	f003 030f 	and.w	r3, r3, #15
 8009318:	b2da      	uxtb	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009324:	2b01      	cmp	r3, #1
 8009326:	d101      	bne.n	800932c <HAL_PCD_EP_ClrStall+0x86>
 8009328:	2302      	movs	r3, #2
 800932a:	e00e      	b.n	800934a <HAL_PCD_EP_ClrStall+0xa4>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68f9      	ldr	r1, [r7, #12]
 800933a:	4618      	mov	r0, r3
 800933c:	f005 ffb4 	bl	800f2a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800935e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009362:	2b00      	cmp	r3, #0
 8009364:	da0c      	bge.n	8009380 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009366:	78fb      	ldrb	r3, [r7, #3]
 8009368:	f003 020f 	and.w	r2, r3, #15
 800936c:	4613      	mov	r3, r2
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	3338      	adds	r3, #56	; 0x38
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	4413      	add	r3, r2
 800937a:	3304      	adds	r3, #4
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e00c      	b.n	800939a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	f003 020f 	and.w	r2, r3, #15
 8009386:	4613      	mov	r3, r2
 8009388:	00db      	lsls	r3, r3, #3
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	4413      	add	r3, r2
 8009396:	3304      	adds	r3, #4
 8009398:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68f9      	ldr	r1, [r7, #12]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f005 fdd3 	bl	800ef4c <USB_EPStopXfer>
 80093a6:	4603      	mov	r3, r0
 80093a8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80093aa:	7afb      	ldrb	r3, [r7, #11]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08a      	sub	sp, #40	; 0x28
 80093b8:	af02      	add	r7, sp, #8
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	4613      	mov	r3, r2
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	3338      	adds	r3, #56	; 0x38
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	4413      	add	r3, r2
 80093d8:	3304      	adds	r3, #4
 80093da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6a1a      	ldr	r2, [r3, #32]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d901      	bls.n	80093ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e06c      	b.n	80094c6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	699a      	ldr	r2, [r3, #24]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d902      	bls.n	8009408 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	3303      	adds	r3, #3
 800940c:	089b      	lsrs	r3, r3, #2
 800940e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009410:	e02b      	b.n	800946a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	699a      	ldr	r2, [r3, #24]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	429a      	cmp	r2, r3
 8009426:	d902      	bls.n	800942e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	3303      	adds	r3, #3
 8009432:	089b      	lsrs	r3, r3, #2
 8009434:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6919      	ldr	r1, [r3, #16]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	b2da      	uxtb	r2, r3
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009446:	b2db      	uxtb	r3, r3
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	4603      	mov	r3, r0
 800944c:	6978      	ldr	r0, [r7, #20]
 800944e:	f005 fe27 	bl	800f0a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	691a      	ldr	r2, [r3, #16]
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	441a      	add	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a1a      	ldr	r2, [r3, #32]
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	441a      	add	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	b29b      	uxth	r3, r3
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	429a      	cmp	r2, r3
 800947e:	d809      	bhi.n	8009494 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6a1a      	ldr	r2, [r3, #32]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009488:	429a      	cmp	r2, r3
 800948a:	d203      	bcs.n	8009494 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1be      	bne.n	8009412 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	699a      	ldr	r2, [r3, #24]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	429a      	cmp	r2, r3
 800949e:	d811      	bhi.n	80094c4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f003 030f 	and.w	r3, r3, #15
 80094a6:	2201      	movs	r2, #1
 80094a8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	43db      	mvns	r3, r3
 80094ba:	6939      	ldr	r1, [r7, #16]
 80094bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094c0:	4013      	ands	r3, r2
 80094c2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3720      	adds	r7, #32
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	333c      	adds	r3, #60	; 0x3c
 80094e8:	3304      	adds	r3, #4
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	015a      	lsls	r2, r3, #5
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d17b      	bne.n	80095fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f003 0308 	and.w	r3, r3, #8
 800950c:	2b00      	cmp	r3, #0
 800950e:	d015      	beq.n	800953c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	4a61      	ldr	r2, [pc, #388]	; (8009698 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009514:	4293      	cmp	r3, r2
 8009516:	f240 80b9 	bls.w	800968c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 80b3 	beq.w	800968c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009532:	461a      	mov	r2, r3
 8009534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009538:	6093      	str	r3, [r2, #8]
 800953a:	e0a7      	b.n	800968c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009552:	461a      	mov	r2, r3
 8009554:	2320      	movs	r3, #32
 8009556:	6093      	str	r3, [r2, #8]
 8009558:	e098      	b.n	800968c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009560:	2b00      	cmp	r3, #0
 8009562:	f040 8093 	bne.w	800968c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	4a4b      	ldr	r2, [pc, #300]	; (8009698 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d90f      	bls.n	800958e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00a      	beq.n	800958e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009584:	461a      	mov	r2, r3
 8009586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800958a:	6093      	str	r3, [r2, #8]
 800958c:	e07e      	b.n	800968c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	4413      	add	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	4413      	add	r3, r2
 80095a0:	3304      	adds	r3, #4
 80095a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	69da      	ldr	r2, [r3, #28]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	0159      	lsls	r1, r3, #5
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	440b      	add	r3, r1
 80095b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095ba:	1ad2      	subs	r2, r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d114      	bne.n	80095f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d109      	bne.n	80095e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095d8:	461a      	mov	r2, r3
 80095da:	2101      	movs	r1, #1
 80095dc:	f005 ffb4 	bl	800f548 <USB_EP0_OutStart>
 80095e0:	e006      	b.n	80095f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	691a      	ldr	r2, [r3, #16]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	441a      	add	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f008 fd62 	bl	80120c0 <HAL_PCD_DataOutStageCallback>
 80095fc:	e046      	b.n	800968c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	4a26      	ldr	r2, [pc, #152]	; (800969c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d124      	bne.n	8009650 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00a      	beq.n	8009626 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	461a      	mov	r2, r3
 800961e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009622:	6093      	str	r3, [r2, #8]
 8009624:	e032      	b.n	800968c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b00      	cmp	r3, #0
 800962e:	d008      	beq.n	8009642 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963c:	461a      	mov	r2, r3
 800963e:	2320      	movs	r3, #32
 8009640:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f008 fd39 	bl	80120c0 <HAL_PCD_DataOutStageCallback>
 800964e:	e01d      	b.n	800968c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d114      	bne.n	8009680 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	4613      	mov	r3, r2
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d108      	bne.n	8009680 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6818      	ldr	r0, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009678:	461a      	mov	r2, r3
 800967a:	2100      	movs	r1, #0
 800967c:	f005 ff64 	bl	800f548 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	b2db      	uxtb	r3, r3
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f008 fd1a 	bl	80120c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3720      	adds	r7, #32
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	4f54300a 	.word	0x4f54300a
 800969c:	4f54310a 	.word	0x4f54310a

080096a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	333c      	adds	r3, #60	; 0x3c
 80096b8:	3304      	adds	r3, #4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4a15      	ldr	r2, [pc, #84]	; (8009728 <PCD_EP_OutSetupPacket_int+0x88>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d90e      	bls.n	80096f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d009      	beq.n	80096f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ec:	461a      	mov	r2, r3
 80096ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f008 fcd1 	bl	801209c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4a0a      	ldr	r2, [pc, #40]	; (8009728 <PCD_EP_OutSetupPacket_int+0x88>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d90c      	bls.n	800971c <PCD_EP_OutSetupPacket_int+0x7c>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d108      	bne.n	800971c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009714:	461a      	mov	r2, r3
 8009716:	2101      	movs	r1, #1
 8009718:	f005 ff16 	bl	800f548 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	4f54300a 	.word	0x4f54300a

0800972c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e267      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d075      	beq.n	800984e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009762:	4b88      	ldr	r3, [pc, #544]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f003 030c 	and.w	r3, r3, #12
 800976a:	2b04      	cmp	r3, #4
 800976c:	d00c      	beq.n	8009788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800976e:	4b85      	ldr	r3, [pc, #532]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009776:	2b08      	cmp	r3, #8
 8009778:	d112      	bne.n	80097a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800977a:	4b82      	ldr	r3, [pc, #520]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009786:	d10b      	bne.n	80097a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009788:	4b7e      	ldr	r3, [pc, #504]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d05b      	beq.n	800984c <HAL_RCC_OscConfig+0x108>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d157      	bne.n	800984c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e242      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097a8:	d106      	bne.n	80097b8 <HAL_RCC_OscConfig+0x74>
 80097aa:	4b76      	ldr	r3, [pc, #472]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a75      	ldr	r2, [pc, #468]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	e01d      	b.n	80097f4 <HAL_RCC_OscConfig+0xb0>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097c0:	d10c      	bne.n	80097dc <HAL_RCC_OscConfig+0x98>
 80097c2:	4b70      	ldr	r3, [pc, #448]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a6f      	ldr	r2, [pc, #444]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	4b6d      	ldr	r3, [pc, #436]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a6c      	ldr	r2, [pc, #432]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	e00b      	b.n	80097f4 <HAL_RCC_OscConfig+0xb0>
 80097dc:	4b69      	ldr	r3, [pc, #420]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a68      	ldr	r2, [pc, #416]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	4b66      	ldr	r3, [pc, #408]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a65      	ldr	r2, [pc, #404]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80097ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d013      	beq.n	8009824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097fc:	f7fd fc3a 	bl	8007074 <HAL_GetTick>
 8009800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009802:	e008      	b.n	8009816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009804:	f7fd fc36 	bl	8007074 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	2b64      	cmp	r3, #100	; 0x64
 8009810:	d901      	bls.n	8009816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e207      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009816:	4b5b      	ldr	r3, [pc, #364]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0f0      	beq.n	8009804 <HAL_RCC_OscConfig+0xc0>
 8009822:	e014      	b.n	800984e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009824:	f7fd fc26 	bl	8007074 <HAL_GetTick>
 8009828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800982a:	e008      	b.n	800983e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800982c:	f7fd fc22 	bl	8007074 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b64      	cmp	r3, #100	; 0x64
 8009838:	d901      	bls.n	800983e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e1f3      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800983e:	4b51      	ldr	r3, [pc, #324]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1f0      	bne.n	800982c <HAL_RCC_OscConfig+0xe8>
 800984a:	e000      	b.n	800984e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800984c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d063      	beq.n	8009922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800985a:	4b4a      	ldr	r3, [pc, #296]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f003 030c 	and.w	r3, r3, #12
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009866:	4b47      	ldr	r3, [pc, #284]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800986e:	2b08      	cmp	r3, #8
 8009870:	d11c      	bne.n	80098ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009872:	4b44      	ldr	r3, [pc, #272]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d116      	bne.n	80098ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800987e:	4b41      	ldr	r3, [pc, #260]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d005      	beq.n	8009896 <HAL_RCC_OscConfig+0x152>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d001      	beq.n	8009896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e1c7      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009896:	4b3b      	ldr	r3, [pc, #236]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	00db      	lsls	r3, r3, #3
 80098a4:	4937      	ldr	r1, [pc, #220]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098aa:	e03a      	b.n	8009922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d020      	beq.n	80098f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098b4:	4b34      	ldr	r3, [pc, #208]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80098b6:	2201      	movs	r2, #1
 80098b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ba:	f7fd fbdb 	bl	8007074 <HAL_GetTick>
 80098be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098c0:	e008      	b.n	80098d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098c2:	f7fd fbd7 	bl	8007074 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d901      	bls.n	80098d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e1a8      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098d4:	4b2b      	ldr	r3, [pc, #172]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0302 	and.w	r3, r3, #2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0f0      	beq.n	80098c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098e0:	4b28      	ldr	r3, [pc, #160]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	4925      	ldr	r1, [pc, #148]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	600b      	str	r3, [r1, #0]
 80098f4:	e015      	b.n	8009922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098f6:	4b24      	ldr	r3, [pc, #144]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098fc:	f7fd fbba 	bl	8007074 <HAL_GetTick>
 8009900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009902:	e008      	b.n	8009916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009904:	f7fd fbb6 	bl	8007074 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b02      	cmp	r3, #2
 8009910:	d901      	bls.n	8009916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e187      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009916:	4b1b      	ldr	r3, [pc, #108]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1f0      	bne.n	8009904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0308 	and.w	r3, r3, #8
 800992a:	2b00      	cmp	r3, #0
 800992c:	d036      	beq.n	800999c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d016      	beq.n	8009964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009936:	4b15      	ldr	r3, [pc, #84]	; (800998c <HAL_RCC_OscConfig+0x248>)
 8009938:	2201      	movs	r2, #1
 800993a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800993c:	f7fd fb9a 	bl	8007074 <HAL_GetTick>
 8009940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009942:	e008      	b.n	8009956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009944:	f7fd fb96 	bl	8007074 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	2b02      	cmp	r3, #2
 8009950:	d901      	bls.n	8009956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e167      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009956:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <HAL_RCC_OscConfig+0x240>)
 8009958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0f0      	beq.n	8009944 <HAL_RCC_OscConfig+0x200>
 8009962:	e01b      	b.n	800999c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009964:	4b09      	ldr	r3, [pc, #36]	; (800998c <HAL_RCC_OscConfig+0x248>)
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800996a:	f7fd fb83 	bl	8007074 <HAL_GetTick>
 800996e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009970:	e00e      	b.n	8009990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009972:	f7fd fb7f 	bl	8007074 <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b02      	cmp	r3, #2
 800997e:	d907      	bls.n	8009990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e150      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
 8009984:	40023800 	.word	0x40023800
 8009988:	42470000 	.word	0x42470000
 800998c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009990:	4b88      	ldr	r3, [pc, #544]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1ea      	bne.n	8009972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0304 	and.w	r3, r3, #4
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8097 	beq.w	8009ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099aa:	2300      	movs	r3, #0
 80099ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099ae:	4b81      	ldr	r3, [pc, #516]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10f      	bne.n	80099da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099ba:	2300      	movs	r3, #0
 80099bc:	60bb      	str	r3, [r7, #8]
 80099be:	4b7d      	ldr	r3, [pc, #500]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	4a7c      	ldr	r2, [pc, #496]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 80099c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099c8:	6413      	str	r3, [r2, #64]	; 0x40
 80099ca:	4b7a      	ldr	r3, [pc, #488]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d2:	60bb      	str	r3, [r7, #8]
 80099d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099d6:	2301      	movs	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099da:	4b77      	ldr	r3, [pc, #476]	; (8009bb8 <HAL_RCC_OscConfig+0x474>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d118      	bne.n	8009a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099e6:	4b74      	ldr	r3, [pc, #464]	; (8009bb8 <HAL_RCC_OscConfig+0x474>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a73      	ldr	r2, [pc, #460]	; (8009bb8 <HAL_RCC_OscConfig+0x474>)
 80099ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099f2:	f7fd fb3f 	bl	8007074 <HAL_GetTick>
 80099f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099f8:	e008      	b.n	8009a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099fa:	f7fd fb3b 	bl	8007074 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d901      	bls.n	8009a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e10c      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a0c:	4b6a      	ldr	r3, [pc, #424]	; (8009bb8 <HAL_RCC_OscConfig+0x474>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0f0      	beq.n	80099fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d106      	bne.n	8009a2e <HAL_RCC_OscConfig+0x2ea>
 8009a20:	4b64      	ldr	r3, [pc, #400]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a24:	4a63      	ldr	r2, [pc, #396]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a26:	f043 0301 	orr.w	r3, r3, #1
 8009a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a2c:	e01c      	b.n	8009a68 <HAL_RCC_OscConfig+0x324>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	d10c      	bne.n	8009a50 <HAL_RCC_OscConfig+0x30c>
 8009a36:	4b5f      	ldr	r3, [pc, #380]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3a:	4a5e      	ldr	r2, [pc, #376]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a3c:	f043 0304 	orr.w	r3, r3, #4
 8009a40:	6713      	str	r3, [r2, #112]	; 0x70
 8009a42:	4b5c      	ldr	r3, [pc, #368]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a46:	4a5b      	ldr	r2, [pc, #364]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a48:	f043 0301 	orr.w	r3, r3, #1
 8009a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a4e:	e00b      	b.n	8009a68 <HAL_RCC_OscConfig+0x324>
 8009a50:	4b58      	ldr	r3, [pc, #352]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a54:	4a57      	ldr	r2, [pc, #348]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a56:	f023 0301 	bic.w	r3, r3, #1
 8009a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a5c:	4b55      	ldr	r3, [pc, #340]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a60:	4a54      	ldr	r2, [pc, #336]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a62:	f023 0304 	bic.w	r3, r3, #4
 8009a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d015      	beq.n	8009a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a70:	f7fd fb00 	bl	8007074 <HAL_GetTick>
 8009a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a76:	e00a      	b.n	8009a8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a78:	f7fd fafc 	bl	8007074 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d901      	bls.n	8009a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e0cb      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a8e:	4b49      	ldr	r3, [pc, #292]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0ee      	beq.n	8009a78 <HAL_RCC_OscConfig+0x334>
 8009a9a:	e014      	b.n	8009ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a9c:	f7fd faea 	bl	8007074 <HAL_GetTick>
 8009aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009aa2:	e00a      	b.n	8009aba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009aa4:	f7fd fae6 	bl	8007074 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d901      	bls.n	8009aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e0b5      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009aba:	4b3e      	ldr	r3, [pc, #248]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1ee      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d105      	bne.n	8009ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009acc:	4b39      	ldr	r3, [pc, #228]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	4a38      	ldr	r2, [pc, #224]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 80a1 	beq.w	8009c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ae2:	4b34      	ldr	r3, [pc, #208]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f003 030c 	and.w	r3, r3, #12
 8009aea:	2b08      	cmp	r3, #8
 8009aec:	d05c      	beq.n	8009ba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d141      	bne.n	8009b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009af6:	4b31      	ldr	r3, [pc, #196]	; (8009bbc <HAL_RCC_OscConfig+0x478>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009afc:	f7fd faba 	bl	8007074 <HAL_GetTick>
 8009b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b02:	e008      	b.n	8009b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b04:	f7fd fab6 	bl	8007074 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d901      	bls.n	8009b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e087      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b16:	4b27      	ldr	r3, [pc, #156]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1f0      	bne.n	8009b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69da      	ldr	r2, [r3, #28]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	019b      	lsls	r3, r3, #6
 8009b32:	431a      	orrs	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b38:	085b      	lsrs	r3, r3, #1
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	041b      	lsls	r3, r3, #16
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	061b      	lsls	r3, r3, #24
 8009b46:	491b      	ldr	r1, [pc, #108]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b4c:	4b1b      	ldr	r3, [pc, #108]	; (8009bbc <HAL_RCC_OscConfig+0x478>)
 8009b4e:	2201      	movs	r2, #1
 8009b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b52:	f7fd fa8f 	bl	8007074 <HAL_GetTick>
 8009b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b58:	e008      	b.n	8009b6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b5a:	f7fd fa8b 	bl	8007074 <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d901      	bls.n	8009b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e05c      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b6c:	4b11      	ldr	r3, [pc, #68]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0f0      	beq.n	8009b5a <HAL_RCC_OscConfig+0x416>
 8009b78:	e054      	b.n	8009c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b7a:	4b10      	ldr	r3, [pc, #64]	; (8009bbc <HAL_RCC_OscConfig+0x478>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b80:	f7fd fa78 	bl	8007074 <HAL_GetTick>
 8009b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b86:	e008      	b.n	8009b9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b88:	f7fd fa74 	bl	8007074 <HAL_GetTick>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d901      	bls.n	8009b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e045      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b9a:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <HAL_RCC_OscConfig+0x470>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1f0      	bne.n	8009b88 <HAL_RCC_OscConfig+0x444>
 8009ba6:	e03d      	b.n	8009c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d107      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e038      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
 8009bb4:	40023800 	.word	0x40023800
 8009bb8:	40007000 	.word	0x40007000
 8009bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bc0:	4b1b      	ldr	r3, [pc, #108]	; (8009c30 <HAL_RCC_OscConfig+0x4ec>)
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d028      	beq.n	8009c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d121      	bne.n	8009c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d11a      	bne.n	8009c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d111      	bne.n	8009c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c06:	085b      	lsrs	r3, r3, #1
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d107      	bne.n	8009c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d001      	beq.n	8009c24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e000      	b.n	8009c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	40023800 	.word	0x40023800

08009c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e0cc      	b.n	8009de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c48:	4b68      	ldr	r3, [pc, #416]	; (8009dec <HAL_RCC_ClockConfig+0x1b8>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0307 	and.w	r3, r3, #7
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d90c      	bls.n	8009c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c56:	4b65      	ldr	r3, [pc, #404]	; (8009dec <HAL_RCC_ClockConfig+0x1b8>)
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	b2d2      	uxtb	r2, r2
 8009c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c5e:	4b63      	ldr	r3, [pc, #396]	; (8009dec <HAL_RCC_ClockConfig+0x1b8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0307 	and.w	r3, r3, #7
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d001      	beq.n	8009c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e0b8      	b.n	8009de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d020      	beq.n	8009cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d005      	beq.n	8009c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c88:	4b59      	ldr	r3, [pc, #356]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	4a58      	ldr	r2, [pc, #352]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0308 	and.w	r3, r3, #8
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ca0:	4b53      	ldr	r3, [pc, #332]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	4a52      	ldr	r2, [pc, #328]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cac:	4b50      	ldr	r3, [pc, #320]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	494d      	ldr	r1, [pc, #308]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d044      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d107      	bne.n	8009ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cd2:	4b47      	ldr	r3, [pc, #284]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d119      	bne.n	8009d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e07f      	b.n	8009de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d003      	beq.n	8009cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d107      	bne.n	8009d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cf2:	4b3f      	ldr	r3, [pc, #252]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d109      	bne.n	8009d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e06f      	b.n	8009de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d02:	4b3b      	ldr	r3, [pc, #236]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0302 	and.w	r3, r3, #2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e067      	b.n	8009de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d12:	4b37      	ldr	r3, [pc, #220]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f023 0203 	bic.w	r2, r3, #3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	4934      	ldr	r1, [pc, #208]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d24:	f7fd f9a6 	bl	8007074 <HAL_GetTick>
 8009d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d2a:	e00a      	b.n	8009d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d2c:	f7fd f9a2 	bl	8007074 <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d901      	bls.n	8009d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e04f      	b.n	8009de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d42:	4b2b      	ldr	r3, [pc, #172]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f003 020c 	and.w	r2, r3, #12
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d1eb      	bne.n	8009d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d54:	4b25      	ldr	r3, [pc, #148]	; (8009dec <HAL_RCC_ClockConfig+0x1b8>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0307 	and.w	r3, r3, #7
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d20c      	bcs.n	8009d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d62:	4b22      	ldr	r3, [pc, #136]	; (8009dec <HAL_RCC_ClockConfig+0x1b8>)
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	b2d2      	uxtb	r2, r2
 8009d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d6a:	4b20      	ldr	r3, [pc, #128]	; (8009dec <HAL_RCC_ClockConfig+0x1b8>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d001      	beq.n	8009d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e032      	b.n	8009de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 0304 	and.w	r3, r3, #4
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d008      	beq.n	8009d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d88:	4b19      	ldr	r3, [pc, #100]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	4916      	ldr	r1, [pc, #88]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0308 	and.w	r3, r3, #8
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d009      	beq.n	8009dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009da6:	4b12      	ldr	r3, [pc, #72]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	490e      	ldr	r1, [pc, #56]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009dba:	f000 f821 	bl	8009e00 <HAL_RCC_GetSysClockFreq>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	091b      	lsrs	r3, r3, #4
 8009dc6:	f003 030f 	and.w	r3, r3, #15
 8009dca:	490a      	ldr	r1, [pc, #40]	; (8009df4 <HAL_RCC_ClockConfig+0x1c0>)
 8009dcc:	5ccb      	ldrb	r3, [r1, r3]
 8009dce:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd2:	4a09      	ldr	r2, [pc, #36]	; (8009df8 <HAL_RCC_ClockConfig+0x1c4>)
 8009dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009dd6:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <HAL_RCC_ClockConfig+0x1c8>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f8 fe78 	bl	8002ad0 <HAL_InitTick>

  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	40023c00 	.word	0x40023c00
 8009df0:	40023800 	.word	0x40023800
 8009df4:	08014884 	.word	0x08014884
 8009df8:	20000000 	.word	0x20000000
 8009dfc:	20000004 	.word	0x20000004

08009e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e04:	b094      	sub	sp, #80	; 0x50
 8009e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e10:	2300      	movs	r3, #0
 8009e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e18:	4b79      	ldr	r3, [pc, #484]	; (800a000 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f003 030c 	and.w	r3, r3, #12
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d00d      	beq.n	8009e40 <HAL_RCC_GetSysClockFreq+0x40>
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	f200 80e1 	bhi.w	8009fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <HAL_RCC_GetSysClockFreq+0x34>
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d003      	beq.n	8009e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8009e32:	e0db      	b.n	8009fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e34:	4b73      	ldr	r3, [pc, #460]	; (800a004 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009e38:	e0db      	b.n	8009ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e3a:	4b72      	ldr	r3, [pc, #456]	; (800a004 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e3e:	e0d8      	b.n	8009ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e40:	4b6f      	ldr	r3, [pc, #444]	; (800a000 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e4a:	4b6d      	ldr	r3, [pc, #436]	; (800a000 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d063      	beq.n	8009f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e56:	4b6a      	ldr	r3, [pc, #424]	; (800a000 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	099b      	lsrs	r3, r3, #6
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e68:	633b      	str	r3, [r7, #48]	; 0x30
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009e72:	4622      	mov	r2, r4
 8009e74:	462b      	mov	r3, r5
 8009e76:	f04f 0000 	mov.w	r0, #0
 8009e7a:	f04f 0100 	mov.w	r1, #0
 8009e7e:	0159      	lsls	r1, r3, #5
 8009e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e84:	0150      	lsls	r0, r2, #5
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	1a51      	subs	r1, r2, r1
 8009e8e:	6139      	str	r1, [r7, #16]
 8009e90:	4629      	mov	r1, r5
 8009e92:	eb63 0301 	sbc.w	r3, r3, r1
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	f04f 0200 	mov.w	r2, #0
 8009e9c:	f04f 0300 	mov.w	r3, #0
 8009ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ea4:	4659      	mov	r1, fp
 8009ea6:	018b      	lsls	r3, r1, #6
 8009ea8:	4651      	mov	r1, sl
 8009eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009eae:	4651      	mov	r1, sl
 8009eb0:	018a      	lsls	r2, r1, #6
 8009eb2:	4651      	mov	r1, sl
 8009eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8009eb8:	4659      	mov	r1, fp
 8009eba:	eb63 0901 	sbc.w	r9, r3, r1
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	f04f 0300 	mov.w	r3, #0
 8009ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ed2:	4690      	mov	r8, r2
 8009ed4:	4699      	mov	r9, r3
 8009ed6:	4623      	mov	r3, r4
 8009ed8:	eb18 0303 	adds.w	r3, r8, r3
 8009edc:	60bb      	str	r3, [r7, #8]
 8009ede:	462b      	mov	r3, r5
 8009ee0:	eb49 0303 	adc.w	r3, r9, r3
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	f04f 0300 	mov.w	r3, #0
 8009eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	028b      	lsls	r3, r1, #10
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009efc:	4621      	mov	r1, r4
 8009efe:	028a      	lsls	r2, r1, #10
 8009f00:	4610      	mov	r0, r2
 8009f02:	4619      	mov	r1, r3
 8009f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f06:	2200      	movs	r2, #0
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f10:	f7f6 fe4a 	bl	8000ba8 <__aeabi_uldivmod>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4613      	mov	r3, r2
 8009f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f1c:	e058      	b.n	8009fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f1e:	4b38      	ldr	r3, [pc, #224]	; (800a000 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	099b      	lsrs	r3, r3, #6
 8009f24:	2200      	movs	r2, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	4611      	mov	r1, r2
 8009f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009f2e:	623b      	str	r3, [r7, #32]
 8009f30:	2300      	movs	r3, #0
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
 8009f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009f38:	4642      	mov	r2, r8
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	f04f 0000 	mov.w	r0, #0
 8009f40:	f04f 0100 	mov.w	r1, #0
 8009f44:	0159      	lsls	r1, r3, #5
 8009f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f4a:	0150      	lsls	r0, r2, #5
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4641      	mov	r1, r8
 8009f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8009f56:	4649      	mov	r1, r9
 8009f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8009f5c:	f04f 0200 	mov.w	r2, #0
 8009f60:	f04f 0300 	mov.w	r3, #0
 8009f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009f70:	ebb2 040a 	subs.w	r4, r2, sl
 8009f74:	eb63 050b 	sbc.w	r5, r3, fp
 8009f78:	f04f 0200 	mov.w	r2, #0
 8009f7c:	f04f 0300 	mov.w	r3, #0
 8009f80:	00eb      	lsls	r3, r5, #3
 8009f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f86:	00e2      	lsls	r2, r4, #3
 8009f88:	4614      	mov	r4, r2
 8009f8a:	461d      	mov	r5, r3
 8009f8c:	4643      	mov	r3, r8
 8009f8e:	18e3      	adds	r3, r4, r3
 8009f90:	603b      	str	r3, [r7, #0]
 8009f92:	464b      	mov	r3, r9
 8009f94:	eb45 0303 	adc.w	r3, r5, r3
 8009f98:	607b      	str	r3, [r7, #4]
 8009f9a:	f04f 0200 	mov.w	r2, #0
 8009f9e:	f04f 0300 	mov.w	r3, #0
 8009fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	028b      	lsls	r3, r1, #10
 8009faa:	4621      	mov	r1, r4
 8009fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	028a      	lsls	r2, r1, #10
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fba:	2200      	movs	r2, #0
 8009fbc:	61bb      	str	r3, [r7, #24]
 8009fbe:	61fa      	str	r2, [r7, #28]
 8009fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fc4:	f7f6 fdf0 	bl	8000ba8 <__aeabi_uldivmod>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4613      	mov	r3, r2
 8009fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	0c1b      	lsrs	r3, r3, #16
 8009fd6:	f003 0303 	and.w	r3, r3, #3
 8009fda:	3301      	adds	r3, #1
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009fea:	e002      	b.n	8009ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <HAL_RCC_GetSysClockFreq+0x204>)
 8009fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3750      	adds	r7, #80	; 0x50
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ffe:	bf00      	nop
 800a000:	40023800 	.word	0x40023800
 800a004:	00f42400 	.word	0x00f42400

0800a008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a008:	b480      	push	{r7}
 800a00a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a00c:	4b03      	ldr	r3, [pc, #12]	; (800a01c <HAL_RCC_GetHCLKFreq+0x14>)
 800a00e:	681b      	ldr	r3, [r3, #0]
}
 800a010:	4618      	mov	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	20000000 	.word	0x20000000

0800a020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a024:	f7ff fff0 	bl	800a008 <HAL_RCC_GetHCLKFreq>
 800a028:	4602      	mov	r2, r0
 800a02a:	4b05      	ldr	r3, [pc, #20]	; (800a040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	0a9b      	lsrs	r3, r3, #10
 800a030:	f003 0307 	and.w	r3, r3, #7
 800a034:	4903      	ldr	r1, [pc, #12]	; (800a044 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a036:	5ccb      	ldrb	r3, [r1, r3]
 800a038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	40023800 	.word	0x40023800
 800a044:	08014894 	.word	0x08014894

0800a048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a04c:	f7ff ffdc 	bl	800a008 <HAL_RCC_GetHCLKFreq>
 800a050:	4602      	mov	r2, r0
 800a052:	4b05      	ldr	r3, [pc, #20]	; (800a068 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	0b5b      	lsrs	r3, r3, #13
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	4903      	ldr	r1, [pc, #12]	; (800a06c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a05e:	5ccb      	ldrb	r3, [r1, r3]
 800a060:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a064:	4618      	mov	r0, r3
 800a066:	bd80      	pop	{r7, pc}
 800a068:	40023800 	.word	0x40023800
 800a06c:	08014894 	.word	0x08014894

0800a070 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	220f      	movs	r2, #15
 800a07e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a080:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <HAL_RCC_GetClockConfig+0x5c>)
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f003 0203 	and.w	r2, r3, #3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a08c:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <HAL_RCC_GetClockConfig+0x5c>)
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a098:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <HAL_RCC_GetClockConfig+0x5c>)
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a0a4:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <HAL_RCC_GetClockConfig+0x5c>)
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	08db      	lsrs	r3, r3, #3
 800a0aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a0b2:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <HAL_RCC_GetClockConfig+0x60>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0207 	and.w	r2, r3, #7
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	601a      	str	r2, [r3, #0]
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	40023800 	.word	0x40023800
 800a0d0:	40023c00 	.word	0x40023c00

0800a0d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e022      	b.n	800a12c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d105      	bne.n	800a0fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7f8 f91b 	bl	8002334 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2203      	movs	r2, #3
 800a102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f814 	bl	800a134 <HAL_SD_InitCard>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e00a      	b.n	800a12c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a134:	b5b0      	push	{r4, r5, r7, lr}
 800a136:	b08e      	sub	sp, #56	; 0x38
 800a138:	af04      	add	r7, sp, #16
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a140:	2300      	movs	r3, #0
 800a142:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a150:	2376      	movs	r3, #118	; 0x76
 800a152:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681d      	ldr	r5, [r3, #0]
 800a158:	466c      	mov	r4, sp
 800a15a:	f107 0314 	add.w	r3, r7, #20
 800a15e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a166:	f107 0308 	add.w	r3, r7, #8
 800a16a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a16c:	4628      	mov	r0, r5
 800a16e:	f003 fd35 	bl	800dbdc <SDIO_Init>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e04f      	b.n	800a224 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a184:	4b29      	ldr	r3, [pc, #164]	; (800a22c <HAL_SD_InitCard+0xf8>)
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f003 fd5c 	bl	800dc4c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a194:	4b25      	ldr	r3, [pc, #148]	; (800a22c <HAL_SD_InitCard+0xf8>)
 800a196:	2201      	movs	r2, #1
 800a198:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a19a:	2002      	movs	r0, #2
 800a19c:	f7fc ff76 	bl	800708c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fb53 	bl	800a84c <SD_PowerON>
 800a1a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00b      	beq.n	800a1c6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e02e      	b.n	800a224 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fa72 	bl	800a6b0 <SD_InitCard>
 800a1cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00b      	beq.n	800a1ec <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e01b      	b.n	800a224 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f003 fdbb 	bl	800dd70 <SDMMC_CmdBlockLength>
 800a1fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00f      	beq.n	800a222 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a0a      	ldr	r2, [pc, #40]	; (800a230 <HAL_SD_InitCard+0xfc>)
 800a208:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	431a      	orrs	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e000      	b.n	800a224 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3728      	adds	r7, #40	; 0x28
 800a228:	46bd      	mov	sp, r7
 800a22a:	bdb0      	pop	{r4, r5, r7, pc}
 800a22c:	422580a0 	.word	0x422580a0
 800a230:	004005ff 	.word	0x004005ff

0800a234 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a242:	0f9b      	lsrs	r3, r3, #30
 800a244:	b2da      	uxtb	r2, r3
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a24e:	0e9b      	lsrs	r3, r3, #26
 800a250:	b2db      	uxtb	r3, r3
 800a252:	f003 030f 	and.w	r3, r3, #15
 800a256:	b2da      	uxtb	r2, r3
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a260:	0e1b      	lsrs	r3, r3, #24
 800a262:	b2db      	uxtb	r3, r3
 800a264:	f003 0303 	and.w	r3, r3, #3
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a272:	0c1b      	lsrs	r3, r3, #16
 800a274:	b2da      	uxtb	r2, r3
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a27e:	0a1b      	lsrs	r3, r3, #8
 800a280:	b2da      	uxtb	r2, r3
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a294:	0d1b      	lsrs	r3, r3, #20
 800a296:	b29a      	uxth	r2, r3
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2a0:	0c1b      	lsrs	r3, r3, #16
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2b2:	0bdb      	lsrs	r3, r3, #15
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2c4:	0b9b      	lsrs	r3, r3, #14
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	f003 0301 	and.w	r3, r3, #1
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2d6:	0b5b      	lsrs	r3, r3, #13
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2e8:	0b1b      	lsrs	r3, r3, #12
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a300:	2b00      	cmp	r3, #0
 800a302:	d163      	bne.n	800a3cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a308:	009a      	lsls	r2, r3, #2
 800a30a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a30e:	4013      	ands	r3, r2
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a314:	0f92      	lsrs	r2, r2, #30
 800a316:	431a      	orrs	r2, r3
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a320:	0edb      	lsrs	r3, r3, #27
 800a322:	b2db      	uxtb	r3, r3
 800a324:	f003 0307 	and.w	r3, r3, #7
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a332:	0e1b      	lsrs	r3, r3, #24
 800a334:	b2db      	uxtb	r3, r3
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a344:	0d5b      	lsrs	r3, r3, #21
 800a346:	b2db      	uxtb	r3, r3
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a356:	0c9b      	lsrs	r3, r3, #18
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	f003 0307 	and.w	r3, r3, #7
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a368:	0bdb      	lsrs	r3, r3, #15
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	b2da      	uxtb	r2, r3
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	7e1b      	ldrb	r3, [r3, #24]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	3302      	adds	r3, #2
 800a38c:	2201      	movs	r2, #1
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a396:	fb03 f202 	mul.w	r2, r3, r2
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	7a1b      	ldrb	r3, [r3, #8]
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	f003 030f 	and.w	r3, r3, #15
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	409a      	lsls	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a3b8:	0a52      	lsrs	r2, r2, #9
 800a3ba:	fb03 f202 	mul.w	r2, r3, r2
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3c8:	661a      	str	r2, [r3, #96]	; 0x60
 800a3ca:	e031      	b.n	800a430 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d11d      	bne.n	800a410 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3d8:	041b      	lsls	r3, r3, #16
 800a3da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3e2:	0c1b      	lsrs	r3, r3, #16
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	029a      	lsls	r2, r3, #10
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a404:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	661a      	str	r2, [r3, #96]	; 0x60
 800a40e:	e00f      	b.n	800a430 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a58      	ldr	r2, [pc, #352]	; (800a578 <HAL_SD_GetCardCSD+0x344>)
 800a416:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e09d      	b.n	800a56c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a434:	0b9b      	lsrs	r3, r3, #14
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a446:	09db      	lsrs	r3, r3, #7
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a468:	0fdb      	lsrs	r3, r3, #31
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a474:	0f5b      	lsrs	r3, r3, #29
 800a476:	b2db      	uxtb	r3, r3
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	0e9b      	lsrs	r3, r3, #26
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a498:	0d9b      	lsrs	r3, r3, #22
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	f003 030f 	and.w	r3, r3, #15
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4aa:	0d5b      	lsrs	r3, r3, #21
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c6:	0c1b      	lsrs	r3, r3, #16
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4da:	0bdb      	lsrs	r3, r3, #15
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ee:	0b9b      	lsrs	r3, r3, #14
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a502:	0b5b      	lsrs	r3, r3, #13
 800a504:	b2db      	uxtb	r3, r3
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a516:	0b1b      	lsrs	r3, r3, #12
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52a:	0a9b      	lsrs	r3, r3, #10
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	b2da      	uxtb	r2, r3
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a53e:	0a1b      	lsrs	r3, r3, #8
 800a540:	b2db      	uxtb	r3, r3
 800a542:	f003 0303 	and.w	r3, r3, #3
 800a546:	b2da      	uxtb	r2, r3
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a552:	085b      	lsrs	r3, r3, #1
 800a554:	b2db      	uxtb	r3, r3
 800a556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	004005ff 	.word	0x004005ff

0800a57c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a57c:	b5b0      	push	{r4, r5, r7, lr}
 800a57e:	b08e      	sub	sp, #56	; 0x38
 800a580:	af04      	add	r7, sp, #16
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2203      	movs	r2, #3
 800a590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d02e      	beq.n	800a5fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a2:	d106      	bne.n	800a5b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	639a      	str	r2, [r3, #56]	; 0x38
 800a5b0:	e029      	b.n	800a606 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5b8:	d10a      	bne.n	800a5d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f9d4 	bl	800a968 <SD_WideBus_Enable>
 800a5c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	431a      	orrs	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	639a      	str	r2, [r3, #56]	; 0x38
 800a5ce:	e01a      	b.n	800a606 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10a      	bne.n	800a5ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fa11 	bl	800a9fe <SD_WideBus_Disable>
 800a5dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	431a      	orrs	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	639a      	str	r2, [r3, #56]	; 0x38
 800a5ea:	e00c      	b.n	800a606 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38
 800a5f8:	e005      	b.n	800a606 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00b      	beq.n	800a626 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a26      	ldr	r2, [pc, #152]	; (800a6ac <HAL_SD_ConfigWideBusOperation+0x130>)
 800a614:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2201      	movs	r2, #1
 800a61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a624:	e01f      	b.n	800a666 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681d      	ldr	r5, [r3, #0]
 800a64c:	466c      	mov	r4, sp
 800a64e:	f107 0314 	add.w	r3, r7, #20
 800a652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a65a:	f107 0308 	add.w	r3, r7, #8
 800a65e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a660:	4628      	mov	r0, r5
 800a662:	f003 fabb 	bl	800dbdc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a66e:	4618      	mov	r0, r3
 800a670:	f003 fb7e 	bl	800dd70 <SDMMC_CmdBlockLength>
 800a674:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00c      	beq.n	800a696 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a0a      	ldr	r2, [pc, #40]	; (800a6ac <HAL_SD_ConfigWideBusOperation+0x130>)
 800a682:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	431a      	orrs	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a69e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3728      	adds	r7, #40	; 0x28
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	004005ff 	.word	0x004005ff

0800a6b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a6b0:	b5b0      	push	{r4, r5, r7, lr}
 800a6b2:	b094      	sub	sp, #80	; 0x50
 800a6b4:	af04      	add	r7, sp, #16
 800a6b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f003 fad1 	bl	800dc68 <SDIO_GetPowerState>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d102      	bne.n	800a6d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a6d0:	e0b8      	b.n	800a844 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d02f      	beq.n	800a73a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f003 fc50 	bl	800df84 <SDMMC_CmdSendCID>
 800a6e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <SD_InitCard+0x40>
    {
      return errorstate;
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ee:	e0a9      	b.n	800a844 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f003 fafb 	bl	800dcf2 <SDIO_GetResponse>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2104      	movs	r1, #4
 800a708:	4618      	mov	r0, r3
 800a70a:	f003 faf2 	bl	800dcf2 <SDIO_GetResponse>
 800a70e:	4602      	mov	r2, r0
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2108      	movs	r1, #8
 800a71a:	4618      	mov	r0, r3
 800a71c:	f003 fae9 	bl	800dcf2 <SDIO_GetResponse>
 800a720:	4602      	mov	r2, r0
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	210c      	movs	r1, #12
 800a72c:	4618      	mov	r0, r3
 800a72e:	f003 fae0 	bl	800dcf2 <SDIO_GetResponse>
 800a732:	4602      	mov	r2, r0
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d00d      	beq.n	800a75e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f107 020e 	add.w	r2, r7, #14
 800a74a:	4611      	mov	r1, r2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f003 fc56 	bl	800dffe <SDMMC_CmdSetRelAdd>
 800a752:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <SD_InitCard+0xae>
    {
      return errorstate;
 800a75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a75c:	e072      	b.n	800a844 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a762:	2b03      	cmp	r3, #3
 800a764:	d036      	beq.n	800a7d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a766:	89fb      	ldrh	r3, [r7, #14]
 800a768:	461a      	mov	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a776:	041b      	lsls	r3, r3, #16
 800a778:	4619      	mov	r1, r3
 800a77a:	4610      	mov	r0, r2
 800a77c:	f003 fc20 	bl	800dfc0 <SDMMC_CmdSendCSD>
 800a780:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <SD_InitCard+0xdc>
    {
      return errorstate;
 800a788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a78a:	e05b      	b.n	800a844 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2100      	movs	r1, #0
 800a792:	4618      	mov	r0, r3
 800a794:	f003 faad 	bl	800dcf2 <SDIO_GetResponse>
 800a798:	4602      	mov	r2, r0
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2104      	movs	r1, #4
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f003 faa4 	bl	800dcf2 <SDIO_GetResponse>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2108      	movs	r1, #8
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f003 fa9b 	bl	800dcf2 <SDIO_GetResponse>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	210c      	movs	r1, #12
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f003 fa92 	bl	800dcf2 <SDIO_GetResponse>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2104      	movs	r1, #4
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f003 fa89 	bl	800dcf2 <SDIO_GetResponse>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	0d1a      	lsrs	r2, r3, #20
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a7e8:	f107 0310 	add.w	r3, r7, #16
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff fd20 	bl	800a234 <HAL_SD_GetCardCSD>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a7fe:	e021      	b.n	800a844 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6819      	ldr	r1, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a808:	041b      	lsls	r3, r3, #16
 800a80a:	2200      	movs	r2, #0
 800a80c:	461c      	mov	r4, r3
 800a80e:	4615      	mov	r5, r2
 800a810:	4622      	mov	r2, r4
 800a812:	462b      	mov	r3, r5
 800a814:	4608      	mov	r0, r1
 800a816:	f003 facd 	bl	800ddb4 <SDMMC_CmdSelDesel>
 800a81a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d001      	beq.n	800a826 <SD_InitCard+0x176>
  {
    return errorstate;
 800a822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a824:	e00e      	b.n	800a844 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681d      	ldr	r5, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	466c      	mov	r4, sp
 800a82e:	f103 0210 	add.w	r2, r3, #16
 800a832:	ca07      	ldmia	r2, {r0, r1, r2}
 800a834:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a838:	3304      	adds	r3, #4
 800a83a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a83c:	4628      	mov	r0, r5
 800a83e:	f003 f9cd 	bl	800dbdc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3740      	adds	r7, #64	; 0x40
 800a848:	46bd      	mov	sp, r7
 800a84a:	bdb0      	pop	{r4, r5, r7, pc}

0800a84c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a858:	2300      	movs	r3, #0
 800a85a:	617b      	str	r3, [r7, #20]
 800a85c:	2300      	movs	r3, #0
 800a85e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4618      	mov	r0, r3
 800a866:	f003 fac8 	bl	800ddfa <SDMMC_CmdGoIdleState>
 800a86a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	e072      	b.n	800a95c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f003 fadb 	bl	800de36 <SDMMC_CmdOperCond>
 800a880:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00d      	beq.n	800a8a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4618      	mov	r0, r3
 800a894:	f003 fab1 	bl	800ddfa <SDMMC_CmdGoIdleState>
 800a898:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d004      	beq.n	800a8aa <SD_PowerON+0x5e>
    {
      return errorstate;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	e05b      	b.n	800a95c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d137      	bne.n	800a922 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f003 fadb 	bl	800de74 <SDMMC_CmdAppCommand>
 800a8be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d02d      	beq.n	800a922 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8ca:	e047      	b.n	800a95c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f003 face 	bl	800de74 <SDMMC_CmdAppCommand>
 800a8d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <SD_PowerON+0x98>
    {
      return errorstate;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	e03b      	b.n	800a95c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	491e      	ldr	r1, [pc, #120]	; (800a964 <SD_PowerON+0x118>)
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f003 fae4 	bl	800deb8 <SDMMC_CmdAppOperCommand>
 800a8f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8fc:	e02e      	b.n	800a95c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2100      	movs	r1, #0
 800a904:	4618      	mov	r0, r3
 800a906:	f003 f9f4 	bl	800dcf2 <SDIO_GetResponse>
 800a90a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	0fdb      	lsrs	r3, r3, #31
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <SD_PowerON+0xcc>
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <SD_PowerON+0xce>
 800a918:	2300      	movs	r3, #0
 800a91a:	613b      	str	r3, [r7, #16]

    count++;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	3301      	adds	r3, #1
 800a920:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a928:	4293      	cmp	r3, r2
 800a92a:	d802      	bhi.n	800a932 <SD_PowerON+0xe6>
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d0cc      	beq.n	800a8cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a938:	4293      	cmp	r3, r2
 800a93a:	d902      	bls.n	800a942 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a93c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a940:	e00c      	b.n	800a95c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	645a      	str	r2, [r3, #68]	; 0x44
 800a952:	e002      	b.n	800a95a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	c1100000 	.word	0xc1100000

0800a968 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a970:	2300      	movs	r3, #0
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	2300      	movs	r3, #0
 800a976:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2100      	movs	r1, #0
 800a97e:	4618      	mov	r0, r3
 800a980:	f003 f9b7 	bl	800dcf2 <SDIO_GetResponse>
 800a984:	4603      	mov	r3, r0
 800a986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a98a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a98e:	d102      	bne.n	800a996 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a994:	e02f      	b.n	800a9f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a996:	f107 030c 	add.w	r3, r7, #12
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f879 	bl	800aa94 <SD_FindSCR>
 800a9a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	e023      	b.n	800a9f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01c      	beq.n	800a9f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c0:	041b      	lsls	r3, r3, #16
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	f003 fa55 	bl	800de74 <SDMMC_CmdAppCommand>
 800a9ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	e00f      	b.n	800a9f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2102      	movs	r1, #2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f003 fa8e 	bl	800defe <SDMMC_CmdBusWidth>
 800a9e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	e003      	b.n	800a9f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e001      	b.n	800a9f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a9f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b086      	sub	sp, #24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2100      	movs	r1, #0
 800aa14:	4618      	mov	r0, r3
 800aa16:	f003 f96c 	bl	800dcf2 <SDIO_GetResponse>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa24:	d102      	bne.n	800aa2c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa2a:	e02f      	b.n	800aa8c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa2c:	f107 030c 	add.w	r3, r7, #12
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f82e 	bl	800aa94 <SD_FindSCR>
 800aa38:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	e023      	b.n	800aa8c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d01c      	beq.n	800aa88 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa56:	041b      	lsls	r3, r3, #16
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	f003 fa0a 	bl	800de74 <SDMMC_CmdAppCommand>
 800aa60:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	e00f      	b.n	800aa8c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2100      	movs	r1, #0
 800aa72:	4618      	mov	r0, r3
 800aa74:	f003 fa43 	bl	800defe <SDMMC_CmdBusWidth>
 800aa78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	e003      	b.n	800aa8c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa84:	2300      	movs	r3, #0
 800aa86:	e001      	b.n	800aa8c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aa94:	b590      	push	{r4, r7, lr}
 800aa96:	b08f      	sub	sp, #60	; 0x3c
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aa9e:	f7fc fae9 	bl	8007074 <HAL_GetTick>
 800aaa2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60bb      	str	r3, [r7, #8]
 800aaac:	2300      	movs	r3, #0
 800aaae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2108      	movs	r1, #8
 800aaba:	4618      	mov	r0, r3
 800aabc:	f003 f958 	bl	800dd70 <SDMMC_CmdBlockLength>
 800aac0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <SD_FindSCR+0x38>
  {
    return errorstate;
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	e0b2      	b.n	800ac32 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad4:	041b      	lsls	r3, r3, #16
 800aad6:	4619      	mov	r1, r3
 800aad8:	4610      	mov	r0, r2
 800aada:	f003 f9cb 	bl	800de74 <SDMMC_CmdAppCommand>
 800aade:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <SD_FindSCR+0x56>
  {
    return errorstate;
 800aae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae8:	e0a3      	b.n	800ac32 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aaea:	f04f 33ff 	mov.w	r3, #4294967295
 800aaee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800aaf0:	2308      	movs	r3, #8
 800aaf2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800aaf4:	2330      	movs	r3, #48	; 0x30
 800aaf6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aaf8:	2302      	movs	r3, #2
 800aafa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ab00:	2301      	movs	r3, #1
 800ab02:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f107 0210 	add.w	r2, r7, #16
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f003 f902 	bl	800dd18 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f003 fa12 	bl	800df42 <SDMMC_CmdSendSCR>
 800ab1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d02a      	beq.n	800ab7c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	e083      	b.n	800ac32 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00f      	beq.n	800ab58 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6819      	ldr	r1, [r3, #0]
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	f107 0208 	add.w	r2, r7, #8
 800ab44:	18d4      	adds	r4, r2, r3
 800ab46:	4608      	mov	r0, r1
 800ab48:	f003 f873 	bl	800dc32 <SDIO_ReadFIFO>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	6023      	str	r3, [r4, #0]
      index++;
 800ab50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab52:	3301      	adds	r3, #1
 800ab54:	637b      	str	r3, [r7, #52]	; 0x34
 800ab56:	e006      	b.n	800ab66 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d012      	beq.n	800ab8c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ab66:	f7fc fa85 	bl	8007074 <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab74:	d102      	bne.n	800ab7c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ab76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab7a:	e05a      	b.n	800ac32 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab82:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d0cf      	beq.n	800ab2a <SD_FindSCR+0x96>
 800ab8a:	e000      	b.n	800ab8e <SD_FindSCR+0xfa>
      break;
 800ab8c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2208      	movs	r2, #8
 800aba2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aba4:	2308      	movs	r3, #8
 800aba6:	e044      	b.n	800ac32 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abae:	f003 0302 	and.w	r3, r3, #2
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2202      	movs	r2, #2
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800abbe:	2302      	movs	r3, #2
 800abc0:	e037      	b.n	800ac32 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc8:	f003 0320 	and.w	r3, r3, #32
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d005      	beq.n	800abdc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2220      	movs	r2, #32
 800abd6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800abd8:	2320      	movs	r3, #32
 800abda:	e02a      	b.n	800ac32 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f240 523a 	movw	r2, #1338	; 0x53a
 800abe4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	061a      	lsls	r2, r3, #24
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abf2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	0a1b      	lsrs	r3, r3, #8
 800abf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800abfc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	0e1b      	lsrs	r3, r3, #24
 800ac02:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac06:	601a      	str	r2, [r3, #0]
    scr++;
 800ac08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	061a      	lsls	r2, r3, #24
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac1a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	0a1b      	lsrs	r3, r3, #8
 800ac20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac24:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	0e1b      	lsrs	r3, r3, #24
 800ac2a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	373c      	adds	r7, #60	; 0x3c
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd90      	pop	{r4, r7, pc}

0800ac3a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d101      	bne.n	800ac4c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e07b      	b.n	800ad44 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d108      	bne.n	800ac66 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac5c:	d009      	beq.n	800ac72 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	61da      	str	r2, [r3, #28]
 800ac64:	e005      	b.n	800ac72 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d106      	bne.n	800ac92 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7f7 fbb9 	bl	8002404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2202      	movs	r2, #2
 800ac96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aca8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800acba:	431a      	orrs	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acc4:	431a      	orrs	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	f003 0302 	and.w	r3, r3, #2
 800acce:	431a      	orrs	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	431a      	orrs	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ace2:	431a      	orrs	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	69db      	ldr	r3, [r3, #28]
 800ace8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf6:	ea42 0103 	orr.w	r1, r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	430a      	orrs	r2, r1
 800ad08:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	0c1b      	lsrs	r3, r3, #16
 800ad10:	f003 0104 	and.w	r1, r3, #4
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	f003 0210 	and.w	r2, r3, #16
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	69da      	ldr	r2, [r3, #28]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4613      	mov	r3, r2
 800ad58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d101      	bne.n	800ad6c <HAL_SPI_Transmit_DMA+0x20>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e09b      	b.n	800aea4 <HAL_SPI_Transmit_DMA+0x158>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d002      	beq.n	800ad86 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800ad80:	2302      	movs	r3, #2
 800ad82:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ad84:	e089      	b.n	800ae9a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <HAL_SPI_Transmit_DMA+0x46>
 800ad8c:	88fb      	ldrh	r3, [r7, #6]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d102      	bne.n	800ad98 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ad96:	e080      	b.n	800ae9a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2203      	movs	r2, #3
 800ad9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	88fa      	ldrh	r2, [r7, #6]
 800adb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	88fa      	ldrh	r2, [r7, #6]
 800adb6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adde:	d10f      	bne.n	800ae00 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae04:	4a29      	ldr	r2, [pc, #164]	; (800aeac <HAL_SPI_Transmit_DMA+0x160>)
 800ae06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae0c:	4a28      	ldr	r2, [pc, #160]	; (800aeb0 <HAL_SPI_Transmit_DMA+0x164>)
 800ae0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae14:	4a27      	ldr	r2, [pc, #156]	; (800aeb4 <HAL_SPI_Transmit_DMA+0x168>)
 800ae16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae28:	4619      	mov	r1, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	330c      	adds	r3, #12
 800ae30:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ae38:	f7fc feee 	bl	8007c18 <HAL_DMA_Start_IT>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00c      	beq.n	800ae5c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae46:	f043 0210 	orr.w	r2, r3, #16
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ae5a:	e01e      	b.n	800ae9a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae66:	2b40      	cmp	r3, #64	; 0x40
 800ae68:	d007      	beq.n	800ae7a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae78:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	685a      	ldr	r2, [r3, #4]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f042 0220 	orr.w	r2, r2, #32
 800ae88:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f042 0202 	orr.w	r2, r2, #2
 800ae98:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	0800b4b9 	.word	0x0800b4b9
 800aeb0:	0800b2d9 	.word	0x0800b2d9
 800aeb4:	0800b50d 	.word	0x0800b50d

0800aeb8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	4613      	mov	r3, r2
 800aec4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d110      	bne.n	800aef4 <HAL_SPI_Receive_DMA+0x3c>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aeda:	d10b      	bne.n	800aef4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2204      	movs	r2, #4
 800aee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800aee4:	88fb      	ldrh	r3, [r7, #6]
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	68b9      	ldr	r1, [r7, #8]
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 f8ac 	bl	800b048 <HAL_SPI_TransmitReceive_DMA>
 800aef0:	4603      	mov	r3, r0
 800aef2:	e09f      	b.n	800b034 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d101      	bne.n	800af02 <HAL_SPI_Receive_DMA+0x4a>
 800aefe:	2302      	movs	r3, #2
 800af00:	e098      	b.n	800b034 <HAL_SPI_Receive_DMA+0x17c>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b01      	cmp	r3, #1
 800af14:	d002      	beq.n	800af1c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800af16:	2302      	movs	r3, #2
 800af18:	75fb      	strb	r3, [r7, #23]
    goto error;
 800af1a:	e086      	b.n	800b02a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <HAL_SPI_Receive_DMA+0x70>
 800af22:	88fb      	ldrh	r3, [r7, #6]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d102      	bne.n	800af2e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800af2c:	e07d      	b.n	800b02a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2204      	movs	r2, #4
 800af32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	88fa      	ldrh	r2, [r7, #6]
 800af46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	88fa      	ldrh	r2, [r7, #6]
 800af4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af6e:	d10f      	bne.n	800af90 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af94:	4a29      	ldr	r2, [pc, #164]	; (800b03c <HAL_SPI_Receive_DMA+0x184>)
 800af96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af9c:	4a28      	ldr	r2, [pc, #160]	; (800b040 <HAL_SPI_Receive_DMA+0x188>)
 800af9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afa4:	4a27      	ldr	r2, [pc, #156]	; (800b044 <HAL_SPI_Receive_DMA+0x18c>)
 800afa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afac:	2200      	movs	r2, #0
 800afae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	330c      	adds	r3, #12
 800afba:	4619      	mov	r1, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800afc8:	f7fc fe26 	bl	8007c18 <HAL_DMA_Start_IT>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00c      	beq.n	800afec <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd6:	f043 0210 	orr.w	r2, r3, #16
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800afea:	e01e      	b.n	800b02a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff6:	2b40      	cmp	r3, #64	; 0x40
 800aff8:	d007      	beq.n	800b00a <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b008:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f042 0220 	orr.w	r2, r2, #32
 800b018:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f042 0201 	orr.w	r2, r2, #1
 800b028:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b032:	7dfb      	ldrb	r3, [r7, #23]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	0800b4d5 	.word	0x0800b4d5
 800b040:	0800b381 	.word	0x0800b381
 800b044:	0800b50d 	.word	0x0800b50d

0800b048 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b060:	2b01      	cmp	r3, #1
 800b062:	d101      	bne.n	800b068 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b064:	2302      	movs	r3, #2
 800b066:	e0e3      	b.n	800b230 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b076:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b07e:	7dbb      	ldrb	r3, [r7, #22]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d00d      	beq.n	800b0a0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b08a:	d106      	bne.n	800b09a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <HAL_SPI_TransmitReceive_DMA+0x52>
 800b094:	7dbb      	ldrb	r3, [r7, #22]
 800b096:	2b04      	cmp	r3, #4
 800b098:	d002      	beq.n	800b0a0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800b09a:	2302      	movs	r3, #2
 800b09c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b09e:	e0c2      	b.n	800b226 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d005      	beq.n	800b0b2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b0ac:	887b      	ldrh	r3, [r7, #2]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d102      	bne.n	800b0b8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b0b6:	e0b6      	b.n	800b226 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d003      	beq.n	800b0cc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2205      	movs	r2, #5
 800b0c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	887a      	ldrh	r2, [r7, #2]
 800b0dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	887a      	ldrh	r2, [r7, #2]
 800b0e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	887a      	ldrh	r2, [r7, #2]
 800b0ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	887a      	ldrh	r2, [r7, #2]
 800b0f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d108      	bne.n	800b120 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b112:	4a49      	ldr	r2, [pc, #292]	; (800b238 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800b114:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b11a:	4a48      	ldr	r2, [pc, #288]	; (800b23c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800b11c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b11e:	e007      	b.n	800b130 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b124:	4a46      	ldr	r2, [pc, #280]	; (800b240 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800b126:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b12c:	4a45      	ldr	r2, [pc, #276]	; (800b244 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800b12e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b134:	4a44      	ldr	r2, [pc, #272]	; (800b248 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800b136:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b13c:	2200      	movs	r2, #0
 800b13e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	330c      	adds	r3, #12
 800b14a:	4619      	mov	r1, r3
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b150:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b156:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b158:	f7fc fd5e 	bl	8007c18 <HAL_DMA_Start_IT>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00c      	beq.n	800b17c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b166:	f043 0210 	orr.w	r2, r3, #16
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b17a:	e054      	b.n	800b226 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f042 0201 	orr.w	r2, r2, #1
 800b18a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b190:	2200      	movs	r2, #0
 800b192:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b198:	2200      	movs	r2, #0
 800b19a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	330c      	adds	r3, #12
 800b1bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b1c4:	f7fc fd28 	bl	8007c18 <HAL_DMA_Start_IT>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00c      	beq.n	800b1e8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1d2:	f043 0210 	orr.w	r2, r3, #16
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b1e6:	e01e      	b.n	800b226 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f2:	2b40      	cmp	r3, #64	; 0x40
 800b1f4:	d007      	beq.n	800b206 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b204:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f042 0220 	orr.w	r2, r2, #32
 800b214:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f042 0202 	orr.w	r2, r2, #2
 800b224:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	0800b4d5 	.word	0x0800b4d5
 800b23c:	0800b381 	.word	0x0800b381
 800b240:	0800b4f1 	.word	0x0800b4f1
 800b244:	0800b429 	.word	0x0800b429
 800b248:	0800b50d 	.word	0x0800b50d

0800b24c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2e6:	f7fb fec5 	bl	8007074 <HAL_GetTick>
 800b2ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2fa:	d03b      	beq.n	800b374 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f022 0220 	bic.w	r2, r2, #32
 800b30a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685a      	ldr	r2, [r3, #4]
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0202 	bic.w	r2, r2, #2
 800b31a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b31c:	693a      	ldr	r2, [r7, #16]
 800b31e:	2164      	movs	r1, #100	; 0x64
 800b320:	6978      	ldr	r0, [r7, #20]
 800b322:	f000 fa01 	bl	800b728 <SPI_EndRxTxTransaction>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d005      	beq.n	800b338 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b330:	f043 0220 	orr.w	r2, r3, #32
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b340:	2300      	movs	r3, #0
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2200      	movs	r2, #0
 800b35a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b36c:	6978      	ldr	r0, [r7, #20]
 800b36e:	f7ff ffa9 	bl	800b2c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b372:	e002      	b.n	800b37a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b374:	6978      	ldr	r0, [r7, #20]
 800b376:	f7ff ff69 	bl	800b24c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b37a:	3718      	adds	r7, #24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b38e:	f7fb fe71 	bl	8007074 <HAL_GetTick>
 800b392:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a2:	d03b      	beq.n	800b41c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f022 0220 	bic.w	r2, r2, #32
 800b3b2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10d      	bne.n	800b3d8 <SPI_DMAReceiveCplt+0x58>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3c4:	d108      	bne.n	800b3d8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 0203 	bic.w	r2, r2, #3
 800b3d4:	605a      	str	r2, [r3, #4]
 800b3d6:	e007      	b.n	800b3e8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f022 0201 	bic.w	r2, r2, #1
 800b3e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	2164      	movs	r1, #100	; 0x64
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 f935 	bl	800b65c <SPI_EndRxTransaction>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d002      	beq.n	800b3fe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f7ff ff55 	bl	800b2c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b41a:	e002      	b.n	800b422 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff ff1f 	bl	800b260 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b434:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b436:	f7fb fe1d 	bl	8007074 <HAL_GetTick>
 800b43a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b44a:	d02f      	beq.n	800b4ac <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f022 0220 	bic.w	r2, r2, #32
 800b45a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	2164      	movs	r1, #100	; 0x64
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 f961 	bl	800b728 <SPI_EndRxTxTransaction>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b470:	f043 0220 	orr.w	r2, r3, #32
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f022 0203 	bic.w	r2, r2, #3
 800b486:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d003      	beq.n	800b4ac <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f7ff ff0d 	bl	800b2c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b4aa:	e002      	b.n	800b4b2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f7ff fee1 	bl	800b274 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f7ff fede 	bl	800b288 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b4cc:	bf00      	nop
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f7ff feda 	bl	800b29c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b4e8:	bf00      	nop
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff fed6 	bl	800b2b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b504:	bf00      	nop
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b518:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f022 0203 	bic.w	r2, r2, #3
 800b528:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b52e:	f043 0210 	orr.w	r2, r3, #16
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff fec0 	bl	800b2c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b544:	bf00      	nop
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	4613      	mov	r3, r2
 800b55a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b55c:	f7fb fd8a 	bl	8007074 <HAL_GetTick>
 800b560:	4602      	mov	r2, r0
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	4413      	add	r3, r2
 800b56a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b56c:	f7fb fd82 	bl	8007074 <HAL_GetTick>
 800b570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b572:	4b39      	ldr	r3, [pc, #228]	; (800b658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	015b      	lsls	r3, r3, #5
 800b578:	0d1b      	lsrs	r3, r3, #20
 800b57a:	69fa      	ldr	r2, [r7, #28]
 800b57c:	fb02 f303 	mul.w	r3, r2, r3
 800b580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b582:	e054      	b.n	800b62e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58a:	d050      	beq.n	800b62e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b58c:	f7fb fd72 	bl	8007074 <HAL_GetTick>
 800b590:	4602      	mov	r2, r0
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	69fa      	ldr	r2, [r7, #28]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d902      	bls.n	800b5a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d13d      	bne.n	800b61e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b5b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5ba:	d111      	bne.n	800b5e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5c4:	d004      	beq.n	800b5d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5ce:	d107      	bne.n	800b5e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5e8:	d10f      	bne.n	800b60a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e017      	b.n	800b64e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b624:	2300      	movs	r3, #0
 800b626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	4013      	ands	r3, r2
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	bf0c      	ite	eq
 800b63e:	2301      	moveq	r3, #1
 800b640:	2300      	movne	r3, #0
 800b642:	b2db      	uxtb	r3, r3
 800b644:	461a      	mov	r2, r3
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d19b      	bne.n	800b584 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3720      	adds	r7, #32
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20000000 	.word	0x20000000

0800b65c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af02      	add	r7, sp, #8
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b670:	d111      	bne.n	800b696 <SPI_EndRxTransaction+0x3a>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b67a:	d004      	beq.n	800b686 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b684:	d107      	bne.n	800b696 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b694:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b69e:	d12a      	bne.n	800b6f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a8:	d012      	beq.n	800b6d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2180      	movs	r1, #128	; 0x80
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f7ff ff49 	bl	800b54c <SPI_WaitFlagStateUntilTimeout>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d02d      	beq.n	800b71c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c4:	f043 0220 	orr.w	r2, r3, #32
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	e026      	b.n	800b71e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	2101      	movs	r1, #1
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7ff ff36 	bl	800b54c <SPI_WaitFlagStateUntilTimeout>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d01a      	beq.n	800b71c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ea:	f043 0220 	orr.w	r2, r3, #32
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e013      	b.n	800b71e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2101      	movs	r1, #1
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f7ff ff23 	bl	800b54c <SPI_WaitFlagStateUntilTimeout>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d007      	beq.n	800b71c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b710:	f043 0220 	orr.w	r2, r3, #32
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e000      	b.n	800b71e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
	...

0800b728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b088      	sub	sp, #32
 800b72c:	af02      	add	r7, sp, #8
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b734:	4b1b      	ldr	r3, [pc, #108]	; (800b7a4 <SPI_EndRxTxTransaction+0x7c>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a1b      	ldr	r2, [pc, #108]	; (800b7a8 <SPI_EndRxTxTransaction+0x80>)
 800b73a:	fba2 2303 	umull	r2, r3, r2, r3
 800b73e:	0d5b      	lsrs	r3, r3, #21
 800b740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b744:	fb02 f303 	mul.w	r3, r2, r3
 800b748:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b752:	d112      	bne.n	800b77a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2200      	movs	r2, #0
 800b75c:	2180      	movs	r1, #128	; 0x80
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f7ff fef4 	bl	800b54c <SPI_WaitFlagStateUntilTimeout>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d016      	beq.n	800b798 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b76e:	f043 0220 	orr.w	r2, r3, #32
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	e00f      	b.n	800b79a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00a      	beq.n	800b796 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	3b01      	subs	r3, #1
 800b784:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b790:	2b80      	cmp	r3, #128	; 0x80
 800b792:	d0f2      	beq.n	800b77a <SPI_EndRxTxTransaction+0x52>
 800b794:	e000      	b.n	800b798 <SPI_EndRxTxTransaction+0x70>
        break;
 800b796:	bf00      	nop
  }

  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3718      	adds	r7, #24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20000000 	.word	0x20000000
 800b7a8:	165e9f81 	.word	0x165e9f81

0800b7ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e041      	b.n	800b842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d106      	bne.n	800b7d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7f6 fec2 	bl	800255c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2202      	movs	r2, #2
 800b7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	f000 fc7a 	bl	800c0e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
	...

0800b84c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d001      	beq.n	800b864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e04e      	b.n	800b902 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f042 0201 	orr.w	r2, r2, #1
 800b87a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a23      	ldr	r2, [pc, #140]	; (800b910 <HAL_TIM_Base_Start_IT+0xc4>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d022      	beq.n	800b8cc <HAL_TIM_Base_Start_IT+0x80>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b88e:	d01d      	beq.n	800b8cc <HAL_TIM_Base_Start_IT+0x80>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a1f      	ldr	r2, [pc, #124]	; (800b914 <HAL_TIM_Base_Start_IT+0xc8>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d018      	beq.n	800b8cc <HAL_TIM_Base_Start_IT+0x80>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a1e      	ldr	r2, [pc, #120]	; (800b918 <HAL_TIM_Base_Start_IT+0xcc>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d013      	beq.n	800b8cc <HAL_TIM_Base_Start_IT+0x80>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a1c      	ldr	r2, [pc, #112]	; (800b91c <HAL_TIM_Base_Start_IT+0xd0>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d00e      	beq.n	800b8cc <HAL_TIM_Base_Start_IT+0x80>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a1b      	ldr	r2, [pc, #108]	; (800b920 <HAL_TIM_Base_Start_IT+0xd4>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d009      	beq.n	800b8cc <HAL_TIM_Base_Start_IT+0x80>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a19      	ldr	r2, [pc, #100]	; (800b924 <HAL_TIM_Base_Start_IT+0xd8>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d004      	beq.n	800b8cc <HAL_TIM_Base_Start_IT+0x80>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a18      	ldr	r2, [pc, #96]	; (800b928 <HAL_TIM_Base_Start_IT+0xdc>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d111      	bne.n	800b8f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b06      	cmp	r3, #6
 800b8dc:	d010      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f042 0201 	orr.w	r2, r2, #1
 800b8ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8ee:	e007      	b.n	800b900 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f042 0201 	orr.w	r2, r2, #1
 800b8fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	40010000 	.word	0x40010000
 800b914:	40000400 	.word	0x40000400
 800b918:	40000800 	.word	0x40000800
 800b91c:	40000c00 	.word	0x40000c00
 800b920:	40010400 	.word	0x40010400
 800b924:	40014000 	.word	0x40014000
 800b928:	40001800 	.word	0x40001800

0800b92c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e041      	b.n	800b9c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d106      	bne.n	800b958 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f839 	bl	800b9ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2202      	movs	r2, #2
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f000 fbba 	bl	800c0e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
	...

0800b9e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d109      	bne.n	800ba04 <HAL_TIM_PWM_Start+0x24>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	bf14      	ite	ne
 800b9fc:	2301      	movne	r3, #1
 800b9fe:	2300      	moveq	r3, #0
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	e022      	b.n	800ba4a <HAL_TIM_PWM_Start+0x6a>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b04      	cmp	r3, #4
 800ba08:	d109      	bne.n	800ba1e <HAL_TIM_PWM_Start+0x3e>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	bf14      	ite	ne
 800ba16:	2301      	movne	r3, #1
 800ba18:	2300      	moveq	r3, #0
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	e015      	b.n	800ba4a <HAL_TIM_PWM_Start+0x6a>
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	d109      	bne.n	800ba38 <HAL_TIM_PWM_Start+0x58>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	bf14      	ite	ne
 800ba30:	2301      	movne	r3, #1
 800ba32:	2300      	moveq	r3, #0
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	e008      	b.n	800ba4a <HAL_TIM_PWM_Start+0x6a>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	bf14      	ite	ne
 800ba44:	2301      	movne	r3, #1
 800ba46:	2300      	moveq	r3, #0
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e07c      	b.n	800bb4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d104      	bne.n	800ba62 <HAL_TIM_PWM_Start+0x82>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba60:	e013      	b.n	800ba8a <HAL_TIM_PWM_Start+0xaa>
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	d104      	bne.n	800ba72 <HAL_TIM_PWM_Start+0x92>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba70:	e00b      	b.n	800ba8a <HAL_TIM_PWM_Start+0xaa>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b08      	cmp	r3, #8
 800ba76:	d104      	bne.n	800ba82 <HAL_TIM_PWM_Start+0xa2>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba80:	e003      	b.n	800ba8a <HAL_TIM_PWM_Start+0xaa>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2202      	movs	r2, #2
 800ba86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	6839      	ldr	r1, [r7, #0]
 800ba92:	4618      	mov	r0, r3
 800ba94:	f000 fe10 	bl	800c6b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a2d      	ldr	r2, [pc, #180]	; (800bb54 <HAL_TIM_PWM_Start+0x174>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d004      	beq.n	800baac <HAL_TIM_PWM_Start+0xcc>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a2c      	ldr	r2, [pc, #176]	; (800bb58 <HAL_TIM_PWM_Start+0x178>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d101      	bne.n	800bab0 <HAL_TIM_PWM_Start+0xd0>
 800baac:	2301      	movs	r3, #1
 800baae:	e000      	b.n	800bab2 <HAL_TIM_PWM_Start+0xd2>
 800bab0:	2300      	movs	r3, #0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d007      	beq.n	800bac6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bac4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a22      	ldr	r2, [pc, #136]	; (800bb54 <HAL_TIM_PWM_Start+0x174>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d022      	beq.n	800bb16 <HAL_TIM_PWM_Start+0x136>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad8:	d01d      	beq.n	800bb16 <HAL_TIM_PWM_Start+0x136>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a1f      	ldr	r2, [pc, #124]	; (800bb5c <HAL_TIM_PWM_Start+0x17c>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d018      	beq.n	800bb16 <HAL_TIM_PWM_Start+0x136>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a1d      	ldr	r2, [pc, #116]	; (800bb60 <HAL_TIM_PWM_Start+0x180>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d013      	beq.n	800bb16 <HAL_TIM_PWM_Start+0x136>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a1c      	ldr	r2, [pc, #112]	; (800bb64 <HAL_TIM_PWM_Start+0x184>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00e      	beq.n	800bb16 <HAL_TIM_PWM_Start+0x136>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a16      	ldr	r2, [pc, #88]	; (800bb58 <HAL_TIM_PWM_Start+0x178>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d009      	beq.n	800bb16 <HAL_TIM_PWM_Start+0x136>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a18      	ldr	r2, [pc, #96]	; (800bb68 <HAL_TIM_PWM_Start+0x188>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d004      	beq.n	800bb16 <HAL_TIM_PWM_Start+0x136>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a16      	ldr	r2, [pc, #88]	; (800bb6c <HAL_TIM_PWM_Start+0x18c>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d111      	bne.n	800bb3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	f003 0307 	and.w	r3, r3, #7
 800bb20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2b06      	cmp	r3, #6
 800bb26:	d010      	beq.n	800bb4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f042 0201 	orr.w	r2, r2, #1
 800bb36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb38:	e007      	b.n	800bb4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f042 0201 	orr.w	r2, r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	40010000 	.word	0x40010000
 800bb58:	40010400 	.word	0x40010400
 800bb5c:	40000400 	.word	0x40000400
 800bb60:	40000800 	.word	0x40000800
 800bb64:	40000c00 	.word	0x40000c00
 800bb68:	40014000 	.word	0x40014000
 800bb6c:	40001800 	.word	0x40001800

0800bb70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	f003 0302 	and.w	r3, r3, #2
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d122      	bne.n	800bbcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	f003 0302 	and.w	r3, r3, #2
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d11b      	bne.n	800bbcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f06f 0202 	mvn.w	r2, #2
 800bb9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	f003 0303 	and.w	r3, r3, #3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d003      	beq.n	800bbba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fa77 	bl	800c0a6 <HAL_TIM_IC_CaptureCallback>
 800bbb8:	e005      	b.n	800bbc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fa69 	bl	800c092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fa7a 	bl	800c0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	f003 0304 	and.w	r3, r3, #4
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d122      	bne.n	800bc20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	f003 0304 	and.w	r3, r3, #4
 800bbe4:	2b04      	cmp	r3, #4
 800bbe6:	d11b      	bne.n	800bc20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f06f 0204 	mvn.w	r2, #4
 800bbf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2202      	movs	r2, #2
 800bbf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d003      	beq.n	800bc0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fa4d 	bl	800c0a6 <HAL_TIM_IC_CaptureCallback>
 800bc0c:	e005      	b.n	800bc1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fa3f 	bl	800c092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fa50 	bl	800c0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	f003 0308 	and.w	r3, r3, #8
 800bc2a:	2b08      	cmp	r3, #8
 800bc2c:	d122      	bne.n	800bc74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f003 0308 	and.w	r3, r3, #8
 800bc38:	2b08      	cmp	r3, #8
 800bc3a:	d11b      	bne.n	800bc74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f06f 0208 	mvn.w	r2, #8
 800bc44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2204      	movs	r2, #4
 800bc4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d003      	beq.n	800bc62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fa23 	bl	800c0a6 <HAL_TIM_IC_CaptureCallback>
 800bc60:	e005      	b.n	800bc6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fa15 	bl	800c092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fa26 	bl	800c0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	f003 0310 	and.w	r3, r3, #16
 800bc7e:	2b10      	cmp	r3, #16
 800bc80:	d122      	bne.n	800bcc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	f003 0310 	and.w	r3, r3, #16
 800bc8c:	2b10      	cmp	r3, #16
 800bc8e:	d11b      	bne.n	800bcc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f06f 0210 	mvn.w	r2, #16
 800bc98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2208      	movs	r2, #8
 800bc9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	69db      	ldr	r3, [r3, #28]
 800bca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d003      	beq.n	800bcb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 f9f9 	bl	800c0a6 <HAL_TIM_IC_CaptureCallback>
 800bcb4:	e005      	b.n	800bcc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f9eb 	bl	800c092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 f9fc 	bl	800c0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d10e      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	f003 0301 	and.w	r3, r3, #1
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d107      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f06f 0201 	mvn.w	r2, #1
 800bcec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7f5 fcba 	bl	8001668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcfe:	2b80      	cmp	r3, #128	; 0x80
 800bd00:	d10e      	bne.n	800bd20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd0c:	2b80      	cmp	r3, #128	; 0x80
 800bd0e:	d107      	bne.n	800bd20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fd78 	bl	800c810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd2a:	2b40      	cmp	r3, #64	; 0x40
 800bd2c:	d10e      	bne.n	800bd4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd38:	2b40      	cmp	r3, #64	; 0x40
 800bd3a:	d107      	bne.n	800bd4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f9c1 	bl	800c0ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	f003 0320 	and.w	r3, r3, #32
 800bd56:	2b20      	cmp	r3, #32
 800bd58:	d10e      	bne.n	800bd78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	f003 0320 	and.w	r3, r3, #32
 800bd64:	2b20      	cmp	r3, #32
 800bd66:	d107      	bne.n	800bd78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f06f 0220 	mvn.w	r2, #32
 800bd70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fd42 	bl	800c7fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd78:	bf00      	nop
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d101      	bne.n	800bd9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	e0ae      	b.n	800befc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b0c      	cmp	r3, #12
 800bdaa:	f200 809f 	bhi.w	800beec <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bdae:	a201      	add	r2, pc, #4	; (adr r2, 800bdb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb4:	0800bde9 	.word	0x0800bde9
 800bdb8:	0800beed 	.word	0x0800beed
 800bdbc:	0800beed 	.word	0x0800beed
 800bdc0:	0800beed 	.word	0x0800beed
 800bdc4:	0800be29 	.word	0x0800be29
 800bdc8:	0800beed 	.word	0x0800beed
 800bdcc:	0800beed 	.word	0x0800beed
 800bdd0:	0800beed 	.word	0x0800beed
 800bdd4:	0800be6b 	.word	0x0800be6b
 800bdd8:	0800beed 	.word	0x0800beed
 800bddc:	0800beed 	.word	0x0800beed
 800bde0:	0800beed 	.word	0x0800beed
 800bde4:	0800beab 	.word	0x0800beab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	68b9      	ldr	r1, [r7, #8]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fa18 	bl	800c224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	699a      	ldr	r2, [r3, #24]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f042 0208 	orr.w	r2, r2, #8
 800be02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	699a      	ldr	r2, [r3, #24]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f022 0204 	bic.w	r2, r2, #4
 800be12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6999      	ldr	r1, [r3, #24]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	691a      	ldr	r2, [r3, #16]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	430a      	orrs	r2, r1
 800be24:	619a      	str	r2, [r3, #24]
      break;
 800be26:	e064      	b.n	800bef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68b9      	ldr	r1, [r7, #8]
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 fa68 	bl	800c304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	699a      	ldr	r2, [r3, #24]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	699a      	ldr	r2, [r3, #24]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6999      	ldr	r1, [r3, #24]
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	021a      	lsls	r2, r3, #8
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	430a      	orrs	r2, r1
 800be66:	619a      	str	r2, [r3, #24]
      break;
 800be68:	e043      	b.n	800bef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68b9      	ldr	r1, [r7, #8]
 800be70:	4618      	mov	r0, r3
 800be72:	f000 fabd 	bl	800c3f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69da      	ldr	r2, [r3, #28]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f042 0208 	orr.w	r2, r2, #8
 800be84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	69da      	ldr	r2, [r3, #28]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f022 0204 	bic.w	r2, r2, #4
 800be94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	69d9      	ldr	r1, [r3, #28]
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	691a      	ldr	r2, [r3, #16]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	430a      	orrs	r2, r1
 800bea6:	61da      	str	r2, [r3, #28]
      break;
 800bea8:	e023      	b.n	800bef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68b9      	ldr	r1, [r7, #8]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 fb11 	bl	800c4d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	69da      	ldr	r2, [r3, #28]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	69da      	ldr	r2, [r3, #28]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	69d9      	ldr	r1, [r3, #28]
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	021a      	lsls	r2, r3, #8
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	61da      	str	r2, [r3, #28]
      break;
 800beea:	e002      	b.n	800bef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	75fb      	strb	r3, [r7, #23]
      break;
 800bef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800befa:	7dfb      	ldrb	r3, [r7, #23]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d101      	bne.n	800bf20 <HAL_TIM_ConfigClockSource+0x1c>
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	e0b4      	b.n	800c08a <HAL_TIM_ConfigClockSource+0x186>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bf3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf58:	d03e      	beq.n	800bfd8 <HAL_TIM_ConfigClockSource+0xd4>
 800bf5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf5e:	f200 8087 	bhi.w	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf66:	f000 8086 	beq.w	800c076 <HAL_TIM_ConfigClockSource+0x172>
 800bf6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf6e:	d87f      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf70:	2b70      	cmp	r3, #112	; 0x70
 800bf72:	d01a      	beq.n	800bfaa <HAL_TIM_ConfigClockSource+0xa6>
 800bf74:	2b70      	cmp	r3, #112	; 0x70
 800bf76:	d87b      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf78:	2b60      	cmp	r3, #96	; 0x60
 800bf7a:	d050      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x11a>
 800bf7c:	2b60      	cmp	r3, #96	; 0x60
 800bf7e:	d877      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf80:	2b50      	cmp	r3, #80	; 0x50
 800bf82:	d03c      	beq.n	800bffe <HAL_TIM_ConfigClockSource+0xfa>
 800bf84:	2b50      	cmp	r3, #80	; 0x50
 800bf86:	d873      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf88:	2b40      	cmp	r3, #64	; 0x40
 800bf8a:	d058      	beq.n	800c03e <HAL_TIM_ConfigClockSource+0x13a>
 800bf8c:	2b40      	cmp	r3, #64	; 0x40
 800bf8e:	d86f      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf90:	2b30      	cmp	r3, #48	; 0x30
 800bf92:	d064      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x15a>
 800bf94:	2b30      	cmp	r3, #48	; 0x30
 800bf96:	d86b      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf98:	2b20      	cmp	r3, #32
 800bf9a:	d060      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x15a>
 800bf9c:	2b20      	cmp	r3, #32
 800bf9e:	d867      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d05c      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x15a>
 800bfa4:	2b10      	cmp	r3, #16
 800bfa6:	d05a      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x15a>
 800bfa8:	e062      	b.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	6899      	ldr	r1, [r3, #8]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	f000 fb5d 	bl	800c678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bfcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	609a      	str	r2, [r3, #8]
      break;
 800bfd6:	e04f      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6818      	ldr	r0, [r3, #0]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	6899      	ldr	r1, [r3, #8]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	f000 fb46 	bl	800c678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	689a      	ldr	r2, [r3, #8]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bffa:	609a      	str	r2, [r3, #8]
      break;
 800bffc:	e03c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	6859      	ldr	r1, [r3, #4]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f000 faba 	bl	800c584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2150      	movs	r1, #80	; 0x50
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fb13 	bl	800c642 <TIM_ITRx_SetConfig>
      break;
 800c01c:	e02c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	6859      	ldr	r1, [r3, #4]
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	461a      	mov	r2, r3
 800c02c:	f000 fad9 	bl	800c5e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2160      	movs	r1, #96	; 0x60
 800c036:	4618      	mov	r0, r3
 800c038:	f000 fb03 	bl	800c642 <TIM_ITRx_SetConfig>
      break;
 800c03c:	e01c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	6859      	ldr	r1, [r3, #4]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	461a      	mov	r2, r3
 800c04c:	f000 fa9a 	bl	800c584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2140      	movs	r1, #64	; 0x40
 800c056:	4618      	mov	r0, r3
 800c058:	f000 faf3 	bl	800c642 <TIM_ITRx_SetConfig>
      break;
 800c05c:	e00c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4619      	mov	r1, r3
 800c068:	4610      	mov	r0, r2
 800c06a:	f000 faea 	bl	800c642 <TIM_ITRx_SetConfig>
      break;
 800c06e:	e003      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	73fb      	strb	r3, [r7, #15]
      break;
 800c074:	e000      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c088:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c092:	b480      	push	{r7}
 800c094:	b083      	sub	sp, #12
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c09a:	bf00      	nop
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0ae:	bf00      	nop
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b083      	sub	sp, #12
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0d6:	bf00      	nop
 800c0d8:	370c      	adds	r7, #12
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a40      	ldr	r2, [pc, #256]	; (800c1f8 <TIM_Base_SetConfig+0x114>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d013      	beq.n	800c124 <TIM_Base_SetConfig+0x40>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c102:	d00f      	beq.n	800c124 <TIM_Base_SetConfig+0x40>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a3d      	ldr	r2, [pc, #244]	; (800c1fc <TIM_Base_SetConfig+0x118>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d00b      	beq.n	800c124 <TIM_Base_SetConfig+0x40>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4a3c      	ldr	r2, [pc, #240]	; (800c200 <TIM_Base_SetConfig+0x11c>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d007      	beq.n	800c124 <TIM_Base_SetConfig+0x40>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a3b      	ldr	r2, [pc, #236]	; (800c204 <TIM_Base_SetConfig+0x120>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d003      	beq.n	800c124 <TIM_Base_SetConfig+0x40>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a3a      	ldr	r2, [pc, #232]	; (800c208 <TIM_Base_SetConfig+0x124>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d108      	bne.n	800c136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c12a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	4313      	orrs	r3, r2
 800c134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a2f      	ldr	r2, [pc, #188]	; (800c1f8 <TIM_Base_SetConfig+0x114>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d02b      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c144:	d027      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a2c      	ldr	r2, [pc, #176]	; (800c1fc <TIM_Base_SetConfig+0x118>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d023      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a2b      	ldr	r2, [pc, #172]	; (800c200 <TIM_Base_SetConfig+0x11c>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d01f      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a2a      	ldr	r2, [pc, #168]	; (800c204 <TIM_Base_SetConfig+0x120>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d01b      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a29      	ldr	r2, [pc, #164]	; (800c208 <TIM_Base_SetConfig+0x124>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d017      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a28      	ldr	r2, [pc, #160]	; (800c20c <TIM_Base_SetConfig+0x128>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d013      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a27      	ldr	r2, [pc, #156]	; (800c210 <TIM_Base_SetConfig+0x12c>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d00f      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a26      	ldr	r2, [pc, #152]	; (800c214 <TIM_Base_SetConfig+0x130>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d00b      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a25      	ldr	r2, [pc, #148]	; (800c218 <TIM_Base_SetConfig+0x134>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d007      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a24      	ldr	r2, [pc, #144]	; (800c21c <TIM_Base_SetConfig+0x138>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d003      	beq.n	800c196 <TIM_Base_SetConfig+0xb2>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a23      	ldr	r2, [pc, #140]	; (800c220 <TIM_Base_SetConfig+0x13c>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d108      	bne.n	800c1a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c19c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	689a      	ldr	r2, [r3, #8]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a0a      	ldr	r2, [pc, #40]	; (800c1f8 <TIM_Base_SetConfig+0x114>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d003      	beq.n	800c1dc <TIM_Base_SetConfig+0xf8>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a0c      	ldr	r2, [pc, #48]	; (800c208 <TIM_Base_SetConfig+0x124>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d103      	bne.n	800c1e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	691a      	ldr	r2, [r3, #16]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	615a      	str	r2, [r3, #20]
}
 800c1ea:	bf00      	nop
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	40010000 	.word	0x40010000
 800c1fc:	40000400 	.word	0x40000400
 800c200:	40000800 	.word	0x40000800
 800c204:	40000c00 	.word	0x40000c00
 800c208:	40010400 	.word	0x40010400
 800c20c:	40014000 	.word	0x40014000
 800c210:	40014400 	.word	0x40014400
 800c214:	40014800 	.word	0x40014800
 800c218:	40001800 	.word	0x40001800
 800c21c:	40001c00 	.word	0x40001c00
 800c220:	40002000 	.word	0x40002000

0800c224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	f023 0201 	bic.w	r2, r3, #1
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f023 0303 	bic.w	r3, r3, #3
 800c25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	4313      	orrs	r3, r2
 800c264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f023 0302 	bic.w	r3, r3, #2
 800c26c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	4313      	orrs	r3, r2
 800c276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a20      	ldr	r2, [pc, #128]	; (800c2fc <TIM_OC1_SetConfig+0xd8>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d003      	beq.n	800c288 <TIM_OC1_SetConfig+0x64>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a1f      	ldr	r2, [pc, #124]	; (800c300 <TIM_OC1_SetConfig+0xdc>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d10c      	bne.n	800c2a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	f023 0308 	bic.w	r3, r3, #8
 800c28e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	697a      	ldr	r2, [r7, #20]
 800c296:	4313      	orrs	r3, r2
 800c298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	f023 0304 	bic.w	r3, r3, #4
 800c2a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a15      	ldr	r2, [pc, #84]	; (800c2fc <TIM_OC1_SetConfig+0xd8>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d003      	beq.n	800c2b2 <TIM_OC1_SetConfig+0x8e>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a14      	ldr	r2, [pc, #80]	; (800c300 <TIM_OC1_SetConfig+0xdc>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d111      	bne.n	800c2d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	695b      	ldr	r3, [r3, #20]
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	685a      	ldr	r2, [r3, #4]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	621a      	str	r2, [r3, #32]
}
 800c2f0:	bf00      	nop
 800c2f2:	371c      	adds	r7, #28
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	40010000 	.word	0x40010000
 800c300:	40010400 	.word	0x40010400

0800c304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	f023 0210 	bic.w	r2, r3, #16
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a1b      	ldr	r3, [r3, #32]
 800c31e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c33a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	021b      	lsls	r3, r3, #8
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	4313      	orrs	r3, r2
 800c346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f023 0320 	bic.w	r3, r3, #32
 800c34e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	011b      	lsls	r3, r3, #4
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	4313      	orrs	r3, r2
 800c35a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a22      	ldr	r2, [pc, #136]	; (800c3e8 <TIM_OC2_SetConfig+0xe4>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d003      	beq.n	800c36c <TIM_OC2_SetConfig+0x68>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a21      	ldr	r2, [pc, #132]	; (800c3ec <TIM_OC2_SetConfig+0xe8>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d10d      	bne.n	800c388 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	011b      	lsls	r3, r3, #4
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c386:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a17      	ldr	r2, [pc, #92]	; (800c3e8 <TIM_OC2_SetConfig+0xe4>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d003      	beq.n	800c398 <TIM_OC2_SetConfig+0x94>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a16      	ldr	r2, [pc, #88]	; (800c3ec <TIM_OC2_SetConfig+0xe8>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d113      	bne.n	800c3c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c39e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	685a      	ldr	r2, [r3, #4]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	697a      	ldr	r2, [r7, #20]
 800c3d8:	621a      	str	r2, [r3, #32]
}
 800c3da:	bf00      	nop
 800c3dc:	371c      	adds	r7, #28
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	40010000 	.word	0x40010000
 800c3ec:	40010400 	.word	0x40010400

0800c3f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b087      	sub	sp, #28
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c41e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0303 	bic.w	r3, r3, #3
 800c426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	4313      	orrs	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	021b      	lsls	r3, r3, #8
 800c440:	697a      	ldr	r2, [r7, #20]
 800c442:	4313      	orrs	r3, r2
 800c444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a21      	ldr	r2, [pc, #132]	; (800c4d0 <TIM_OC3_SetConfig+0xe0>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d003      	beq.n	800c456 <TIM_OC3_SetConfig+0x66>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a20      	ldr	r2, [pc, #128]	; (800c4d4 <TIM_OC3_SetConfig+0xe4>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d10d      	bne.n	800c472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c45c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	021b      	lsls	r3, r3, #8
 800c464:	697a      	ldr	r2, [r7, #20]
 800c466:	4313      	orrs	r3, r2
 800c468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a16      	ldr	r2, [pc, #88]	; (800c4d0 <TIM_OC3_SetConfig+0xe0>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d003      	beq.n	800c482 <TIM_OC3_SetConfig+0x92>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a15      	ldr	r2, [pc, #84]	; (800c4d4 <TIM_OC3_SetConfig+0xe4>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d113      	bne.n	800c4aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	011b      	lsls	r3, r3, #4
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	011b      	lsls	r3, r3, #4
 800c4a4:	693a      	ldr	r2, [r7, #16]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	693a      	ldr	r2, [r7, #16]
 800c4ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	685a      	ldr	r2, [r3, #4]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	697a      	ldr	r2, [r7, #20]
 800c4c2:	621a      	str	r2, [r3, #32]
}
 800c4c4:	bf00      	nop
 800c4c6:	371c      	adds	r7, #28
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr
 800c4d0:	40010000 	.word	0x40010000
 800c4d4:	40010400 	.word	0x40010400

0800c4d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b087      	sub	sp, #28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c50e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	021b      	lsls	r3, r3, #8
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	4313      	orrs	r3, r2
 800c51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	031b      	lsls	r3, r3, #12
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a12      	ldr	r2, [pc, #72]	; (800c57c <TIM_OC4_SetConfig+0xa4>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d003      	beq.n	800c540 <TIM_OC4_SetConfig+0x68>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a11      	ldr	r2, [pc, #68]	; (800c580 <TIM_OC4_SetConfig+0xa8>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d109      	bne.n	800c554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	695b      	ldr	r3, [r3, #20]
 800c54c:	019b      	lsls	r3, r3, #6
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	4313      	orrs	r3, r2
 800c552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	621a      	str	r2, [r3, #32]
}
 800c56e:	bf00      	nop
 800c570:	371c      	adds	r7, #28
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	40010000 	.word	0x40010000
 800c580:	40010400 	.word	0x40010400

0800c584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c584:	b480      	push	{r7}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6a1b      	ldr	r3, [r3, #32]
 800c594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	f023 0201 	bic.w	r2, r3, #1
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	011b      	lsls	r3, r3, #4
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	f023 030a 	bic.w	r3, r3, #10
 800c5c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5c2:	697a      	ldr	r2, [r7, #20]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	621a      	str	r2, [r3, #32]
}
 800c5d6:	bf00      	nop
 800c5d8:	371c      	adds	r7, #28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b087      	sub	sp, #28
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	60f8      	str	r0, [r7, #12]
 800c5ea:	60b9      	str	r1, [r7, #8]
 800c5ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6a1b      	ldr	r3, [r3, #32]
 800c5f2:	f023 0210 	bic.w	r2, r3, #16
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	699b      	ldr	r3, [r3, #24]
 800c5fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6a1b      	ldr	r3, [r3, #32]
 800c604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c60c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	031b      	lsls	r3, r3, #12
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	4313      	orrs	r3, r2
 800c616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c61e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	011b      	lsls	r3, r3, #4
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	4313      	orrs	r3, r2
 800c628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	697a      	ldr	r2, [r7, #20]
 800c62e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	693a      	ldr	r2, [r7, #16]
 800c634:	621a      	str	r2, [r3, #32]
}
 800c636:	bf00      	nop
 800c638:	371c      	adds	r7, #28
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c642:	b480      	push	{r7}
 800c644:	b085      	sub	sp, #20
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	4313      	orrs	r3, r2
 800c660:	f043 0307 	orr.w	r3, r3, #7
 800c664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	609a      	str	r2, [r3, #8]
}
 800c66c:	bf00      	nop
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
 800c684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	021a      	lsls	r2, r3, #8
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	431a      	orrs	r2, r3
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	697a      	ldr	r2, [r7, #20]
 800c6aa:	609a      	str	r2, [r3, #8]
}
 800c6ac:	bf00      	nop
 800c6ae:	371c      	adds	r7, #28
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b087      	sub	sp, #28
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f003 031f 	and.w	r3, r3, #31
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6a1a      	ldr	r2, [r3, #32]
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	43db      	mvns	r3, r3
 800c6da:	401a      	ands	r2, r3
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6a1a      	ldr	r2, [r3, #32]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	f003 031f 	and.w	r3, r3, #31
 800c6ea:	6879      	ldr	r1, [r7, #4]
 800c6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	621a      	str	r2, [r3, #32]
}
 800c6f6:	bf00      	nop
 800c6f8:	371c      	adds	r7, #28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
	...

0800c704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c714:	2b01      	cmp	r3, #1
 800c716:	d101      	bne.n	800c71c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c718:	2302      	movs	r3, #2
 800c71a:	e05a      	b.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2202      	movs	r2, #2
 800c728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a21      	ldr	r2, [pc, #132]	; (800c7e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d022      	beq.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c768:	d01d      	beq.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a1d      	ldr	r2, [pc, #116]	; (800c7e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d018      	beq.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a1b      	ldr	r2, [pc, #108]	; (800c7e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d013      	beq.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a1a      	ldr	r2, [pc, #104]	; (800c7ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d00e      	beq.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a18      	ldr	r2, [pc, #96]	; (800c7f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d009      	beq.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a17      	ldr	r2, [pc, #92]	; (800c7f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d004      	beq.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a15      	ldr	r2, [pc, #84]	; (800c7f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d10c      	bne.n	800c7c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3714      	adds	r7, #20
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	40010000 	.word	0x40010000
 800c7e4:	40000400 	.word	0x40000400
 800c7e8:	40000800 	.word	0x40000800
 800c7ec:	40000c00 	.word	0x40000c00
 800c7f0:	40010400 	.word	0x40010400
 800c7f4:	40014000 	.word	0x40014000
 800c7f8:	40001800 	.word	0x40001800

0800c7fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c832:	2301      	movs	r3, #1
 800c834:	e03f      	b.n	800c8b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d106      	bne.n	800c850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7f5 ff1e 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2224      	movs	r2, #36	; 0x24
 800c854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68da      	ldr	r2, [r3, #12]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 ff43 	bl	800d6f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	691a      	ldr	r2, [r3, #16]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c87c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	695a      	ldr	r2, [r3, #20]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c88c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68da      	ldr	r2, [r3, #12]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c89c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2220      	movs	r2, #32
 800c8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2220      	movs	r2, #32
 800c8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
	...

0800c8c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08c      	sub	sp, #48	; 0x30
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	2b20      	cmp	r3, #32
 800c8d8:	d165      	bne.n	800c9a6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d002      	beq.n	800c8e6 <HAL_UART_Transmit_DMA+0x26>
 800c8e0:	88fb      	ldrh	r3, [r7, #6]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d101      	bne.n	800c8ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e05e      	b.n	800c9a8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d101      	bne.n	800c8f8 <HAL_UART_Transmit_DMA+0x38>
 800c8f4:	2302      	movs	r3, #2
 800c8f6:	e057      	b.n	800c9a8 <HAL_UART_Transmit_DMA+0xe8>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	88fa      	ldrh	r2, [r7, #6]
 800c90a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	88fa      	ldrh	r2, [r7, #6]
 800c910:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2200      	movs	r2, #0
 800c916:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2221      	movs	r2, #33	; 0x21
 800c91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c924:	4a22      	ldr	r2, [pc, #136]	; (800c9b0 <HAL_UART_Transmit_DMA+0xf0>)
 800c926:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c92c:	4a21      	ldr	r2, [pc, #132]	; (800c9b4 <HAL_UART_Transmit_DMA+0xf4>)
 800c92e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c934:	4a20      	ldr	r2, [pc, #128]	; (800c9b8 <HAL_UART_Transmit_DMA+0xf8>)
 800c936:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c93c:	2200      	movs	r2, #0
 800c93e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c940:	f107 0308 	add.w	r3, r7, #8
 800c944:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94c:	6819      	ldr	r1, [r3, #0]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3304      	adds	r3, #4
 800c954:	461a      	mov	r2, r3
 800c956:	88fb      	ldrh	r3, [r7, #6]
 800c958:	f7fb f95e 	bl	8007c18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c964:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3314      	adds	r3, #20
 800c974:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	e853 3f00 	ldrex	r3, [r3]
 800c97c:	617b      	str	r3, [r7, #20]
   return(result);
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c984:	62bb      	str	r3, [r7, #40]	; 0x28
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3314      	adds	r3, #20
 800c98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c98e:	627a      	str	r2, [r7, #36]	; 0x24
 800c990:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c992:	6a39      	ldr	r1, [r7, #32]
 800c994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c996:	e841 2300 	strex	r3, r2, [r1]
 800c99a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1e5      	bne.n	800c96e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e000      	b.n	800c9a8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c9a6:	2302      	movs	r3, #2
  }
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3730      	adds	r7, #48	; 0x30
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	0800cf8d 	.word	0x0800cf8d
 800c9b4:	0800d027 	.word	0x0800d027
 800c9b8:	0800d19f 	.word	0x0800d19f

0800c9bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	2b20      	cmp	r3, #32
 800c9d4:	d11d      	bne.n	800ca12 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <HAL_UART_Receive_DMA+0x26>
 800c9dc:	88fb      	ldrh	r3, [r7, #6]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e016      	b.n	800ca14 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d101      	bne.n	800c9f4 <HAL_UART_Receive_DMA+0x38>
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	e00f      	b.n	800ca14 <HAL_UART_Receive_DMA+0x58>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ca02:	88fb      	ldrh	r3, [r7, #6]
 800ca04:	461a      	mov	r2, r3
 800ca06:	68b9      	ldr	r1, [r7, #8]
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 fc13 	bl	800d234 <UART_Start_Receive_DMA>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	e000      	b.n	800ca14 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ca12:	2302      	movs	r3, #2
  }
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b0ba      	sub	sp, #232	; 0xe8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ca42:	2300      	movs	r3, #0
 800ca44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ca4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca52:	f003 030f 	and.w	r3, r3, #15
 800ca56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ca5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d10f      	bne.n	800ca82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ca62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca66:	f003 0320 	and.w	r3, r3, #32
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d009      	beq.n	800ca82 <HAL_UART_IRQHandler+0x66>
 800ca6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca72:	f003 0320 	and.w	r3, r3, #32
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fd7f 	bl	800d57e <UART_Receive_IT>
      return;
 800ca80:	e256      	b.n	800cf30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ca82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 80de 	beq.w	800cc48 <HAL_UART_IRQHandler+0x22c>
 800ca8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d106      	bne.n	800caa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ca98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 80d1 	beq.w	800cc48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800caa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00b      	beq.n	800caca <HAL_UART_IRQHandler+0xae>
 800cab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d005      	beq.n	800caca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac2:	f043 0201 	orr.w	r2, r3, #1
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800caca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cace:	f003 0304 	and.w	r3, r3, #4
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00b      	beq.n	800caee <HAL_UART_IRQHandler+0xd2>
 800cad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cada:	f003 0301 	and.w	r3, r3, #1
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d005      	beq.n	800caee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae6:	f043 0202 	orr.w	r2, r3, #2
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800caee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caf2:	f003 0302 	and.w	r3, r3, #2
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00b      	beq.n	800cb12 <HAL_UART_IRQHandler+0xf6>
 800cafa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cafe:	f003 0301 	and.w	r3, r3, #1
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d005      	beq.n	800cb12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0a:	f043 0204 	orr.w	r2, r3, #4
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cb12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb16:	f003 0308 	and.w	r3, r3, #8
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d011      	beq.n	800cb42 <HAL_UART_IRQHandler+0x126>
 800cb1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb22:	f003 0320 	and.w	r3, r3, #32
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d105      	bne.n	800cb36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cb2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb2e:	f003 0301 	and.w	r3, r3, #1
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d005      	beq.n	800cb42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3a:	f043 0208 	orr.w	r2, r3, #8
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f000 81ed 	beq.w	800cf26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb50:	f003 0320 	and.w	r3, r3, #32
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d008      	beq.n	800cb6a <HAL_UART_IRQHandler+0x14e>
 800cb58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb5c:	f003 0320 	and.w	r3, r3, #32
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d002      	beq.n	800cb6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fd0a 	bl	800d57e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	695b      	ldr	r3, [r3, #20]
 800cb70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb74:	2b40      	cmp	r3, #64	; 0x40
 800cb76:	bf0c      	ite	eq
 800cb78:	2301      	moveq	r3, #1
 800cb7a:	2300      	movne	r3, #0
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb86:	f003 0308 	and.w	r3, r3, #8
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d103      	bne.n	800cb96 <HAL_UART_IRQHandler+0x17a>
 800cb8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d04f      	beq.n	800cc36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fc12 	bl	800d3c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	695b      	ldr	r3, [r3, #20]
 800cba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba6:	2b40      	cmp	r3, #64	; 0x40
 800cba8:	d141      	bne.n	800cc2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	3314      	adds	r3, #20
 800cbb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cbb8:	e853 3f00 	ldrex	r3, [r3]
 800cbbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cbc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cbc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	3314      	adds	r3, #20
 800cbd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cbd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cbda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cbe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cbe6:	e841 2300 	strex	r3, r2, [r1]
 800cbea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cbee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1d9      	bne.n	800cbaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d013      	beq.n	800cc26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc02:	4a7d      	ldr	r2, [pc, #500]	; (800cdf8 <HAL_UART_IRQHandler+0x3dc>)
 800cc04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fb f8cc 	bl	8007da8 <HAL_DMA_Abort_IT>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d016      	beq.n	800cc44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cc20:	4610      	mov	r0, r2
 800cc22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc24:	e00e      	b.n	800cc44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f99a 	bl	800cf60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc2c:	e00a      	b.n	800cc44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f996 	bl	800cf60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc34:	e006      	b.n	800cc44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f992 	bl	800cf60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800cc42:	e170      	b.n	800cf26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc44:	bf00      	nop
    return;
 800cc46:	e16e      	b.n	800cf26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	f040 814a 	bne.w	800cee6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cc52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc56:	f003 0310 	and.w	r3, r3, #16
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 8143 	beq.w	800cee6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cc60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc64:	f003 0310 	and.w	r3, r3, #16
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 813c 	beq.w	800cee6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc6e:	2300      	movs	r3, #0
 800cc70:	60bb      	str	r3, [r7, #8]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	60bb      	str	r3, [r7, #8]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	60bb      	str	r3, [r7, #8]
 800cc82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc8e:	2b40      	cmp	r3, #64	; 0x40
 800cc90:	f040 80b4 	bne.w	800cdfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f000 8140 	beq.w	800cf2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ccae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	f080 8139 	bcs.w	800cf2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ccbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc4:	69db      	ldr	r3, [r3, #28]
 800ccc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccca:	f000 8088 	beq.w	800cdde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	330c      	adds	r3, #12
 800ccd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ccdc:	e853 3f00 	ldrex	r3, [r3]
 800cce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	330c      	adds	r3, #12
 800ccf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ccfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ccfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cd06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cd0a:	e841 2300 	strex	r3, r2, [r1]
 800cd0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cd12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1d9      	bne.n	800ccce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3314      	adds	r3, #20
 800cd20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd24:	e853 3f00 	ldrex	r3, [r3]
 800cd28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cd2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd2c:	f023 0301 	bic.w	r3, r3, #1
 800cd30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	3314      	adds	r3, #20
 800cd3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cd3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cd42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd4a:	e841 2300 	strex	r3, r2, [r1]
 800cd4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1e1      	bne.n	800cd1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3314      	adds	r3, #20
 800cd5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd60:	e853 3f00 	ldrex	r3, [r3]
 800cd64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cd66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3314      	adds	r3, #20
 800cd76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cd7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cd7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cd80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd82:	e841 2300 	strex	r3, r2, [r1]
 800cd86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cd88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1e3      	bne.n	800cd56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2220      	movs	r2, #32
 800cd92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	330c      	adds	r3, #12
 800cda2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cda6:	e853 3f00 	ldrex	r3, [r3]
 800cdaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cdac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdae:	f023 0310 	bic.w	r3, r3, #16
 800cdb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	330c      	adds	r3, #12
 800cdbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cdc0:	65ba      	str	r2, [r7, #88]	; 0x58
 800cdc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdc8:	e841 2300 	strex	r3, r2, [r1]
 800cdcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cdce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1e3      	bne.n	800cd9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fa ff75 	bl	8007cc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	4619      	mov	r1, r3
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 f8c0 	bl	800cf74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cdf4:	e099      	b.n	800cf2a <HAL_UART_IRQHandler+0x50e>
 800cdf6:	bf00      	nop
 800cdf8:	0800d487 	.word	0x0800d487
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 808b 	beq.w	800cf2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ce18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f000 8086 	beq.w	800cf2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	330c      	adds	r3, #12
 800ce28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2c:	e853 3f00 	ldrex	r3, [r3]
 800ce30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	330c      	adds	r3, #12
 800ce42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ce46:	647a      	str	r2, [r7, #68]	; 0x44
 800ce48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce4e:	e841 2300 	strex	r3, r2, [r1]
 800ce52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1e3      	bne.n	800ce22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	3314      	adds	r3, #20
 800ce60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	e853 3f00 	ldrex	r3, [r3]
 800ce68:	623b      	str	r3, [r7, #32]
   return(result);
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	f023 0301 	bic.w	r3, r3, #1
 800ce70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	3314      	adds	r3, #20
 800ce7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ce7e:	633a      	str	r2, [r7, #48]	; 0x30
 800ce80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce86:	e841 2300 	strex	r3, r2, [r1]
 800ce8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1e3      	bne.n	800ce5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2220      	movs	r2, #32
 800ce96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	330c      	adds	r3, #12
 800cea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	e853 3f00 	ldrex	r3, [r3]
 800ceae:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f023 0310 	bic.w	r3, r3, #16
 800ceb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	330c      	adds	r3, #12
 800cec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cec4:	61fa      	str	r2, [r7, #28]
 800cec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec8:	69b9      	ldr	r1, [r7, #24]
 800ceca:	69fa      	ldr	r2, [r7, #28]
 800cecc:	e841 2300 	strex	r3, r2, [r1]
 800ced0:	617b      	str	r3, [r7, #20]
   return(result);
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1e3      	bne.n	800cea0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ced8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 f848 	bl	800cf74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cee4:	e023      	b.n	800cf2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d009      	beq.n	800cf06 <HAL_UART_IRQHandler+0x4ea>
 800cef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d003      	beq.n	800cf06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fad5 	bl	800d4ae <UART_Transmit_IT>
    return;
 800cf04:	e014      	b.n	800cf30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cf06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00e      	beq.n	800cf30 <HAL_UART_IRQHandler+0x514>
 800cf12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d008      	beq.n	800cf30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 fb15 	bl	800d54e <UART_EndTransmit_IT>
    return;
 800cf24:	e004      	b.n	800cf30 <HAL_UART_IRQHandler+0x514>
    return;
 800cf26:	bf00      	nop
 800cf28:	e002      	b.n	800cf30 <HAL_UART_IRQHandler+0x514>
      return;
 800cf2a:	bf00      	nop
 800cf2c:	e000      	b.n	800cf30 <HAL_UART_IRQHandler+0x514>
      return;
 800cf2e:	bf00      	nop
  }
}
 800cf30:	37e8      	adds	r7, #232	; 0xe8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop

0800cf38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b090      	sub	sp, #64	; 0x40
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf98:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d137      	bne.n	800d018 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800cfa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfaa:	2200      	movs	r2, #0
 800cfac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	3314      	adds	r3, #20
 800cfb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb8:	e853 3f00 	ldrex	r3, [r3]
 800cfbc:	623b      	str	r3, [r7, #32]
   return(result);
 800cfbe:	6a3b      	ldr	r3, [r7, #32]
 800cfc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3314      	adds	r3, #20
 800cfcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfce:	633a      	str	r2, [r7, #48]	; 0x30
 800cfd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfd6:	e841 2300 	strex	r3, r2, [r1]
 800cfda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1e5      	bne.n	800cfae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	330c      	adds	r3, #12
 800cfe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	e853 3f00 	ldrex	r3, [r3]
 800cff0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cff8:	637b      	str	r3, [r7, #52]	; 0x34
 800cffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	330c      	adds	r3, #12
 800d000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d002:	61fa      	str	r2, [r7, #28]
 800d004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d006:	69b9      	ldr	r1, [r7, #24]
 800d008:	69fa      	ldr	r2, [r7, #28]
 800d00a:	e841 2300 	strex	r3, r2, [r1]
 800d00e:	617b      	str	r3, [r7, #20]
   return(result);
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d1e5      	bne.n	800cfe2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d016:	e002      	b.n	800d01e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d018:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d01a:	f7f4 fb1b 	bl	8001654 <HAL_UART_TxCpltCallback>
}
 800d01e:	bf00      	nop
 800d020:	3740      	adds	r7, #64	; 0x40
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b084      	sub	sp, #16
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d032:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7ff ff7f 	bl	800cf38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b09c      	sub	sp, #112	; 0x70
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d172      	bne.n	800d144 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d060:	2200      	movs	r2, #0
 800d062:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	330c      	adds	r3, #12
 800d06a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d06e:	e853 3f00 	ldrex	r3, [r3]
 800d072:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d07a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d07c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	330c      	adds	r3, #12
 800d082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d084:	65ba      	str	r2, [r7, #88]	; 0x58
 800d086:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d08a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d08c:	e841 2300 	strex	r3, r2, [r1]
 800d090:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1e5      	bne.n	800d064 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3314      	adds	r3, #20
 800d09e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a2:	e853 3f00 	ldrex	r3, [r3]
 800d0a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0aa:	f023 0301 	bic.w	r3, r3, #1
 800d0ae:	667b      	str	r3, [r7, #100]	; 0x64
 800d0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	3314      	adds	r3, #20
 800d0b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0b8:	647a      	str	r2, [r7, #68]	; 0x44
 800d0ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d0be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0c0:	e841 2300 	strex	r3, r2, [r1]
 800d0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1e5      	bne.n	800d098 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3314      	adds	r3, #20
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	e853 3f00 	ldrex	r3, [r3]
 800d0da:	623b      	str	r3, [r7, #32]
   return(result);
 800d0dc:	6a3b      	ldr	r3, [r7, #32]
 800d0de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0e2:	663b      	str	r3, [r7, #96]	; 0x60
 800d0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	3314      	adds	r3, #20
 800d0ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d0ec:	633a      	str	r2, [r7, #48]	; 0x30
 800d0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f4:	e841 2300 	strex	r3, r2, [r1]
 800d0f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1e5      	bne.n	800d0cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d102:	2220      	movs	r2, #32
 800d104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d119      	bne.n	800d144 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	330c      	adds	r3, #12
 800d116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	e853 3f00 	ldrex	r3, [r3]
 800d11e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 0310 	bic.w	r3, r3, #16
 800d126:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	330c      	adds	r3, #12
 800d12e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d130:	61fa      	str	r2, [r7, #28]
 800d132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d134:	69b9      	ldr	r1, [r7, #24]
 800d136:	69fa      	ldr	r2, [r7, #28]
 800d138:	e841 2300 	strex	r3, r2, [r1]
 800d13c:	617b      	str	r3, [r7, #20]
   return(result);
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1e5      	bne.n	800d110 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d106      	bne.n	800d15a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d14e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d150:	4619      	mov	r1, r3
 800d152:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d154:	f7ff ff0e 	bl	800cf74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d158:	e002      	b.n	800d160 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d15a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d15c:	f7f4 fb00 	bl	8001760 <HAL_UART_RxCpltCallback>
}
 800d160:	bf00      	nop
 800d162:	3770      	adds	r7, #112	; 0x70
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d174:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d108      	bne.n	800d190 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d182:	085b      	lsrs	r3, r3, #1
 800d184:	b29b      	uxth	r3, r3
 800d186:	4619      	mov	r1, r3
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f7ff fef3 	bl	800cf74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d18e:	e002      	b.n	800d196 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f7ff fedb 	bl	800cf4c <HAL_UART_RxHalfCpltCallback>
}
 800d196:	bf00      	nop
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b084      	sub	sp, #16
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	695b      	ldr	r3, [r3, #20]
 800d1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ba:	2b80      	cmp	r3, #128	; 0x80
 800d1bc:	bf0c      	ite	eq
 800d1be:	2301      	moveq	r3, #1
 800d1c0:	2300      	movne	r3, #0
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b21      	cmp	r3, #33	; 0x21
 800d1d0:	d108      	bne.n	800d1e4 <UART_DMAError+0x46>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d005      	beq.n	800d1e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d1de:	68b8      	ldr	r0, [r7, #8]
 800d1e0:	f000 f8c6 	bl	800d370 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	695b      	ldr	r3, [r3, #20]
 800d1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ee:	2b40      	cmp	r3, #64	; 0x40
 800d1f0:	bf0c      	ite	eq
 800d1f2:	2301      	moveq	r3, #1
 800d1f4:	2300      	movne	r3, #0
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d200:	b2db      	uxtb	r3, r3
 800d202:	2b22      	cmp	r3, #34	; 0x22
 800d204:	d108      	bne.n	800d218 <UART_DMAError+0x7a>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	2200      	movs	r2, #0
 800d210:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d212:	68b8      	ldr	r0, [r7, #8]
 800d214:	f000 f8d4 	bl	800d3c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21c:	f043 0210 	orr.w	r2, r3, #16
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d224:	68b8      	ldr	r0, [r7, #8]
 800d226:	f7ff fe9b 	bl	800cf60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d22a:	bf00      	nop
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b098      	sub	sp, #96	; 0x60
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	4613      	mov	r3, r2
 800d240:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	88fa      	ldrh	r2, [r7, #6]
 800d24c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2222      	movs	r2, #34	; 0x22
 800d258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d260:	4a40      	ldr	r2, [pc, #256]	; (800d364 <UART_Start_Receive_DMA+0x130>)
 800d262:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d268:	4a3f      	ldr	r2, [pc, #252]	; (800d368 <UART_Start_Receive_DMA+0x134>)
 800d26a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d270:	4a3e      	ldr	r2, [pc, #248]	; (800d36c <UART_Start_Receive_DMA+0x138>)
 800d272:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d278:	2200      	movs	r2, #0
 800d27a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d27c:	f107 0308 	add.w	r3, r7, #8
 800d280:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	3304      	adds	r3, #4
 800d28c:	4619      	mov	r1, r3
 800d28e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	88fb      	ldrh	r3, [r7, #6]
 800d294:	f7fa fcc0 	bl	8007c18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d298:	2300      	movs	r3, #0
 800d29a:	613b      	str	r3, [r7, #16]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	613b      	str	r3, [r7, #16]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	613b      	str	r3, [r7, #16]
 800d2ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d019      	beq.n	800d2f2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	330c      	adds	r3, #12
 800d2c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2c8:	e853 3f00 	ldrex	r3, [r3]
 800d2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2d4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	330c      	adds	r3, #12
 800d2dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2de:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d2e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d2e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2e6:	e841 2300 	strex	r3, r2, [r1]
 800d2ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1e5      	bne.n	800d2be <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	3314      	adds	r3, #20
 800d2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	e853 3f00 	ldrex	r3, [r3]
 800d300:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	f043 0301 	orr.w	r3, r3, #1
 800d308:	657b      	str	r3, [r7, #84]	; 0x54
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	3314      	adds	r3, #20
 800d310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d312:	63ba      	str	r2, [r7, #56]	; 0x38
 800d314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d316:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d31a:	e841 2300 	strex	r3, r2, [r1]
 800d31e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1e5      	bne.n	800d2f2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	3314      	adds	r3, #20
 800d32c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	e853 3f00 	ldrex	r3, [r3]
 800d334:	617b      	str	r3, [r7, #20]
   return(result);
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d33c:	653b      	str	r3, [r7, #80]	; 0x50
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	3314      	adds	r3, #20
 800d344:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d346:	627a      	str	r2, [r7, #36]	; 0x24
 800d348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34a:	6a39      	ldr	r1, [r7, #32]
 800d34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d34e:	e841 2300 	strex	r3, r2, [r1]
 800d352:	61fb      	str	r3, [r7, #28]
   return(result);
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1e5      	bne.n	800d326 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3760      	adds	r7, #96	; 0x60
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	0800d043 	.word	0x0800d043
 800d368:	0800d169 	.word	0x0800d169
 800d36c:	0800d19f 	.word	0x0800d19f

0800d370 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d370:	b480      	push	{r7}
 800d372:	b089      	sub	sp, #36	; 0x24
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	330c      	adds	r3, #12
 800d37e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	e853 3f00 	ldrex	r3, [r3]
 800d386:	60bb      	str	r3, [r7, #8]
   return(result);
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d38e:	61fb      	str	r3, [r7, #28]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	330c      	adds	r3, #12
 800d396:	69fa      	ldr	r2, [r7, #28]
 800d398:	61ba      	str	r2, [r7, #24]
 800d39a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d39c:	6979      	ldr	r1, [r7, #20]
 800d39e:	69ba      	ldr	r2, [r7, #24]
 800d3a0:	e841 2300 	strex	r3, r2, [r1]
 800d3a4:	613b      	str	r3, [r7, #16]
   return(result);
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1e5      	bne.n	800d378 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2220      	movs	r2, #32
 800d3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d3b4:	bf00      	nop
 800d3b6:	3724      	adds	r7, #36	; 0x24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b095      	sub	sp, #84	; 0x54
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	330c      	adds	r3, #12
 800d3ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d2:	e853 3f00 	ldrex	r3, [r3]
 800d3d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	330c      	adds	r3, #12
 800d3e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3e8:	643a      	str	r2, [r7, #64]	; 0x40
 800d3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3f0:	e841 2300 	strex	r3, r2, [r1]
 800d3f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1e5      	bne.n	800d3c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3314      	adds	r3, #20
 800d402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	e853 3f00 	ldrex	r3, [r3]
 800d40a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	f023 0301 	bic.w	r3, r3, #1
 800d412:	64bb      	str	r3, [r7, #72]	; 0x48
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	3314      	adds	r3, #20
 800d41a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d41c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d41e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d424:	e841 2300 	strex	r3, r2, [r1]
 800d428:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1e5      	bne.n	800d3fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d434:	2b01      	cmp	r3, #1
 800d436:	d119      	bne.n	800d46c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	330c      	adds	r3, #12
 800d43e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	e853 3f00 	ldrex	r3, [r3]
 800d446:	60bb      	str	r3, [r7, #8]
   return(result);
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	f023 0310 	bic.w	r3, r3, #16
 800d44e:	647b      	str	r3, [r7, #68]	; 0x44
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	330c      	adds	r3, #12
 800d456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d458:	61ba      	str	r2, [r7, #24]
 800d45a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45c:	6979      	ldr	r1, [r7, #20]
 800d45e:	69ba      	ldr	r2, [r7, #24]
 800d460:	e841 2300 	strex	r3, r2, [r1]
 800d464:	613b      	str	r3, [r7, #16]
   return(result);
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1e5      	bne.n	800d438 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2220      	movs	r2, #32
 800d470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d47a:	bf00      	nop
 800d47c:	3754      	adds	r7, #84	; 0x54
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b084      	sub	sp, #16
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d492:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2200      	movs	r2, #0
 800d49e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f7ff fd5d 	bl	800cf60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4a6:	bf00      	nop
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b085      	sub	sp, #20
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	2b21      	cmp	r3, #33	; 0x21
 800d4c0:	d13e      	bne.n	800d540 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4ca:	d114      	bne.n	800d4f6 <UART_Transmit_IT+0x48>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	691b      	ldr	r3, [r3, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d110      	bne.n	800d4f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a1b      	ldr	r3, [r3, #32]
 800d4d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	881b      	ldrh	r3, [r3, #0]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	1c9a      	adds	r2, r3, #2
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	621a      	str	r2, [r3, #32]
 800d4f4:	e008      	b.n	800d508 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	1c59      	adds	r1, r3, #1
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	6211      	str	r1, [r2, #32]
 800d500:	781a      	ldrb	r2, [r3, #0]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	3b01      	subs	r3, #1
 800d510:	b29b      	uxth	r3, r3
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	4619      	mov	r1, r3
 800d516:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10f      	bne.n	800d53c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68da      	ldr	r2, [r3, #12]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d52a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68da      	ldr	r2, [r3, #12]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d53a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d53c:	2300      	movs	r3, #0
 800d53e:	e000      	b.n	800d542 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d540:	2302      	movs	r3, #2
  }
}
 800d542:	4618      	mov	r0, r3
 800d544:	3714      	adds	r7, #20
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr

0800d54e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b082      	sub	sp, #8
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68da      	ldr	r2, [r3, #12]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d564:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2220      	movs	r2, #32
 800d56a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f7f4 f870 	bl	8001654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d574:	2300      	movs	r3, #0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b08c      	sub	sp, #48	; 0x30
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	2b22      	cmp	r3, #34	; 0x22
 800d590:	f040 80ab 	bne.w	800d6ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d59c:	d117      	bne.n	800d5ce <UART_Receive_IT+0x50>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d113      	bne.n	800d5ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5bc:	b29a      	uxth	r2, r3
 800d5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c6:	1c9a      	adds	r2, r3, #2
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	629a      	str	r2, [r3, #40]	; 0x28
 800d5cc:	e026      	b.n	800d61c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	689b      	ldr	r3, [r3, #8]
 800d5dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5e0:	d007      	beq.n	800d5f2 <UART_Receive_IT+0x74>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10a      	bne.n	800d600 <UART_Receive_IT+0x82>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	e008      	b.n	800d612 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	b2db      	uxtb	r3, r3
 800d608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d610:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d616:	1c5a      	adds	r2, r3, #1
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d620:	b29b      	uxth	r3, r3
 800d622:	3b01      	subs	r3, #1
 800d624:	b29b      	uxth	r3, r3
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	4619      	mov	r1, r3
 800d62a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d15a      	bne.n	800d6e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	68da      	ldr	r2, [r3, #12]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f022 0220 	bic.w	r2, r2, #32
 800d63e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d64e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	695a      	ldr	r2, [r3, #20]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f022 0201 	bic.w	r2, r2, #1
 800d65e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2220      	movs	r2, #32
 800d664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d135      	bne.n	800d6dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	330c      	adds	r3, #12
 800d67c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	e853 3f00 	ldrex	r3, [r3]
 800d684:	613b      	str	r3, [r7, #16]
   return(result);
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	f023 0310 	bic.w	r3, r3, #16
 800d68c:	627b      	str	r3, [r7, #36]	; 0x24
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	330c      	adds	r3, #12
 800d694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d696:	623a      	str	r2, [r7, #32]
 800d698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69a:	69f9      	ldr	r1, [r7, #28]
 800d69c:	6a3a      	ldr	r2, [r7, #32]
 800d69e:	e841 2300 	strex	r3, r2, [r1]
 800d6a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1e5      	bne.n	800d676 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 0310 	and.w	r3, r3, #16
 800d6b4:	2b10      	cmp	r3, #16
 800d6b6:	d10a      	bne.n	800d6ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff fc4d 	bl	800cf74 <HAL_UARTEx_RxEventCallback>
 800d6da:	e002      	b.n	800d6e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7f4 f83f 	bl	8001760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e002      	b.n	800d6ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e000      	b.n	800d6ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d6ea:	2302      	movs	r3, #2
  }
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3730      	adds	r7, #48	; 0x30
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d6f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d6f8:	b0c0      	sub	sp, #256	; 0x100
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d70c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d710:	68d9      	ldr	r1, [r3, #12]
 800d712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	ea40 0301 	orr.w	r3, r0, r1
 800d71c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d71e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d722:	689a      	ldr	r2, [r3, #8]
 800d724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	431a      	orrs	r2, r3
 800d72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	431a      	orrs	r2, r3
 800d734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d738:	69db      	ldr	r3, [r3, #28]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d74c:	f021 010c 	bic.w	r1, r1, #12
 800d750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d75a:	430b      	orrs	r3, r1
 800d75c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d75e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	695b      	ldr	r3, [r3, #20]
 800d766:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d76a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d76e:	6999      	ldr	r1, [r3, #24]
 800d770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	ea40 0301 	orr.w	r3, r0, r1
 800d77a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	4b8f      	ldr	r3, [pc, #572]	; (800d9c0 <UART_SetConfig+0x2cc>)
 800d784:	429a      	cmp	r2, r3
 800d786:	d005      	beq.n	800d794 <UART_SetConfig+0xa0>
 800d788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	4b8d      	ldr	r3, [pc, #564]	; (800d9c4 <UART_SetConfig+0x2d0>)
 800d790:	429a      	cmp	r2, r3
 800d792:	d104      	bne.n	800d79e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d794:	f7fc fc58 	bl	800a048 <HAL_RCC_GetPCLK2Freq>
 800d798:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d79c:	e003      	b.n	800d7a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d79e:	f7fc fc3f 	bl	800a020 <HAL_RCC_GetPCLK1Freq>
 800d7a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7aa:	69db      	ldr	r3, [r3, #28]
 800d7ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7b0:	f040 810c 	bne.w	800d9cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d7b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d7be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d7c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d7c6:	4622      	mov	r2, r4
 800d7c8:	462b      	mov	r3, r5
 800d7ca:	1891      	adds	r1, r2, r2
 800d7cc:	65b9      	str	r1, [r7, #88]	; 0x58
 800d7ce:	415b      	adcs	r3, r3
 800d7d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	eb12 0801 	adds.w	r8, r2, r1
 800d7dc:	4629      	mov	r1, r5
 800d7de:	eb43 0901 	adc.w	r9, r3, r1
 800d7e2:	f04f 0200 	mov.w	r2, #0
 800d7e6:	f04f 0300 	mov.w	r3, #0
 800d7ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d7ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d7f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d7f6:	4690      	mov	r8, r2
 800d7f8:	4699      	mov	r9, r3
 800d7fa:	4623      	mov	r3, r4
 800d7fc:	eb18 0303 	adds.w	r3, r8, r3
 800d800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d804:	462b      	mov	r3, r5
 800d806:	eb49 0303 	adc.w	r3, r9, r3
 800d80a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d81a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d81e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d822:	460b      	mov	r3, r1
 800d824:	18db      	adds	r3, r3, r3
 800d826:	653b      	str	r3, [r7, #80]	; 0x50
 800d828:	4613      	mov	r3, r2
 800d82a:	eb42 0303 	adc.w	r3, r2, r3
 800d82e:	657b      	str	r3, [r7, #84]	; 0x54
 800d830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d838:	f7f3 f9b6 	bl	8000ba8 <__aeabi_uldivmod>
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	4b61      	ldr	r3, [pc, #388]	; (800d9c8 <UART_SetConfig+0x2d4>)
 800d842:	fba3 2302 	umull	r2, r3, r3, r2
 800d846:	095b      	lsrs	r3, r3, #5
 800d848:	011c      	lsls	r4, r3, #4
 800d84a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d84e:	2200      	movs	r2, #0
 800d850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d854:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d85c:	4642      	mov	r2, r8
 800d85e:	464b      	mov	r3, r9
 800d860:	1891      	adds	r1, r2, r2
 800d862:	64b9      	str	r1, [r7, #72]	; 0x48
 800d864:	415b      	adcs	r3, r3
 800d866:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d86c:	4641      	mov	r1, r8
 800d86e:	eb12 0a01 	adds.w	sl, r2, r1
 800d872:	4649      	mov	r1, r9
 800d874:	eb43 0b01 	adc.w	fp, r3, r1
 800d878:	f04f 0200 	mov.w	r2, #0
 800d87c:	f04f 0300 	mov.w	r3, #0
 800d880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d88c:	4692      	mov	sl, r2
 800d88e:	469b      	mov	fp, r3
 800d890:	4643      	mov	r3, r8
 800d892:	eb1a 0303 	adds.w	r3, sl, r3
 800d896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d89a:	464b      	mov	r3, r9
 800d89c:	eb4b 0303 	adc.w	r3, fp, r3
 800d8a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d8b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d8b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	18db      	adds	r3, r3, r3
 800d8bc:	643b      	str	r3, [r7, #64]	; 0x40
 800d8be:	4613      	mov	r3, r2
 800d8c0:	eb42 0303 	adc.w	r3, r2, r3
 800d8c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d8c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d8ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d8ce:	f7f3 f96b 	bl	8000ba8 <__aeabi_uldivmod>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	4b3b      	ldr	r3, [pc, #236]	; (800d9c8 <UART_SetConfig+0x2d4>)
 800d8da:	fba3 2301 	umull	r2, r3, r3, r1
 800d8de:	095b      	lsrs	r3, r3, #5
 800d8e0:	2264      	movs	r2, #100	; 0x64
 800d8e2:	fb02 f303 	mul.w	r3, r2, r3
 800d8e6:	1acb      	subs	r3, r1, r3
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d8ee:	4b36      	ldr	r3, [pc, #216]	; (800d9c8 <UART_SetConfig+0x2d4>)
 800d8f0:	fba3 2302 	umull	r2, r3, r3, r2
 800d8f4:	095b      	lsrs	r3, r3, #5
 800d8f6:	005b      	lsls	r3, r3, #1
 800d8f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d8fc:	441c      	add	r4, r3
 800d8fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d902:	2200      	movs	r2, #0
 800d904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d908:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d90c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d910:	4642      	mov	r2, r8
 800d912:	464b      	mov	r3, r9
 800d914:	1891      	adds	r1, r2, r2
 800d916:	63b9      	str	r1, [r7, #56]	; 0x38
 800d918:	415b      	adcs	r3, r3
 800d91a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d91c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d920:	4641      	mov	r1, r8
 800d922:	1851      	adds	r1, r2, r1
 800d924:	6339      	str	r1, [r7, #48]	; 0x30
 800d926:	4649      	mov	r1, r9
 800d928:	414b      	adcs	r3, r1
 800d92a:	637b      	str	r3, [r7, #52]	; 0x34
 800d92c:	f04f 0200 	mov.w	r2, #0
 800d930:	f04f 0300 	mov.w	r3, #0
 800d934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d938:	4659      	mov	r1, fp
 800d93a:	00cb      	lsls	r3, r1, #3
 800d93c:	4651      	mov	r1, sl
 800d93e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d942:	4651      	mov	r1, sl
 800d944:	00ca      	lsls	r2, r1, #3
 800d946:	4610      	mov	r0, r2
 800d948:	4619      	mov	r1, r3
 800d94a:	4603      	mov	r3, r0
 800d94c:	4642      	mov	r2, r8
 800d94e:	189b      	adds	r3, r3, r2
 800d950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d954:	464b      	mov	r3, r9
 800d956:	460a      	mov	r2, r1
 800d958:	eb42 0303 	adc.w	r3, r2, r3
 800d95c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d96c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d974:	460b      	mov	r3, r1
 800d976:	18db      	adds	r3, r3, r3
 800d978:	62bb      	str	r3, [r7, #40]	; 0x28
 800d97a:	4613      	mov	r3, r2
 800d97c:	eb42 0303 	adc.w	r3, r2, r3
 800d980:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d98a:	f7f3 f90d 	bl	8000ba8 <__aeabi_uldivmod>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4b0d      	ldr	r3, [pc, #52]	; (800d9c8 <UART_SetConfig+0x2d4>)
 800d994:	fba3 1302 	umull	r1, r3, r3, r2
 800d998:	095b      	lsrs	r3, r3, #5
 800d99a:	2164      	movs	r1, #100	; 0x64
 800d99c:	fb01 f303 	mul.w	r3, r1, r3
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	3332      	adds	r3, #50	; 0x32
 800d9a6:	4a08      	ldr	r2, [pc, #32]	; (800d9c8 <UART_SetConfig+0x2d4>)
 800d9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ac:	095b      	lsrs	r3, r3, #5
 800d9ae:	f003 0207 	and.w	r2, r3, #7
 800d9b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4422      	add	r2, r4
 800d9ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d9bc:	e105      	b.n	800dbca <UART_SetConfig+0x4d6>
 800d9be:	bf00      	nop
 800d9c0:	40011000 	.word	0x40011000
 800d9c4:	40011400 	.word	0x40011400
 800d9c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d9cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d9d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d9da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d9de:	4642      	mov	r2, r8
 800d9e0:	464b      	mov	r3, r9
 800d9e2:	1891      	adds	r1, r2, r2
 800d9e4:	6239      	str	r1, [r7, #32]
 800d9e6:	415b      	adcs	r3, r3
 800d9e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d9ee:	4641      	mov	r1, r8
 800d9f0:	1854      	adds	r4, r2, r1
 800d9f2:	4649      	mov	r1, r9
 800d9f4:	eb43 0501 	adc.w	r5, r3, r1
 800d9f8:	f04f 0200 	mov.w	r2, #0
 800d9fc:	f04f 0300 	mov.w	r3, #0
 800da00:	00eb      	lsls	r3, r5, #3
 800da02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da06:	00e2      	lsls	r2, r4, #3
 800da08:	4614      	mov	r4, r2
 800da0a:	461d      	mov	r5, r3
 800da0c:	4643      	mov	r3, r8
 800da0e:	18e3      	adds	r3, r4, r3
 800da10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800da14:	464b      	mov	r3, r9
 800da16:	eb45 0303 	adc.w	r3, r5, r3
 800da1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800da1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800da2e:	f04f 0200 	mov.w	r2, #0
 800da32:	f04f 0300 	mov.w	r3, #0
 800da36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800da3a:	4629      	mov	r1, r5
 800da3c:	008b      	lsls	r3, r1, #2
 800da3e:	4621      	mov	r1, r4
 800da40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800da44:	4621      	mov	r1, r4
 800da46:	008a      	lsls	r2, r1, #2
 800da48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800da4c:	f7f3 f8ac 	bl	8000ba8 <__aeabi_uldivmod>
 800da50:	4602      	mov	r2, r0
 800da52:	460b      	mov	r3, r1
 800da54:	4b60      	ldr	r3, [pc, #384]	; (800dbd8 <UART_SetConfig+0x4e4>)
 800da56:	fba3 2302 	umull	r2, r3, r3, r2
 800da5a:	095b      	lsrs	r3, r3, #5
 800da5c:	011c      	lsls	r4, r3, #4
 800da5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800da62:	2200      	movs	r2, #0
 800da64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800da68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800da6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800da70:	4642      	mov	r2, r8
 800da72:	464b      	mov	r3, r9
 800da74:	1891      	adds	r1, r2, r2
 800da76:	61b9      	str	r1, [r7, #24]
 800da78:	415b      	adcs	r3, r3
 800da7a:	61fb      	str	r3, [r7, #28]
 800da7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da80:	4641      	mov	r1, r8
 800da82:	1851      	adds	r1, r2, r1
 800da84:	6139      	str	r1, [r7, #16]
 800da86:	4649      	mov	r1, r9
 800da88:	414b      	adcs	r3, r1
 800da8a:	617b      	str	r3, [r7, #20]
 800da8c:	f04f 0200 	mov.w	r2, #0
 800da90:	f04f 0300 	mov.w	r3, #0
 800da94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800da98:	4659      	mov	r1, fp
 800da9a:	00cb      	lsls	r3, r1, #3
 800da9c:	4651      	mov	r1, sl
 800da9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800daa2:	4651      	mov	r1, sl
 800daa4:	00ca      	lsls	r2, r1, #3
 800daa6:	4610      	mov	r0, r2
 800daa8:	4619      	mov	r1, r3
 800daaa:	4603      	mov	r3, r0
 800daac:	4642      	mov	r2, r8
 800daae:	189b      	adds	r3, r3, r2
 800dab0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dab4:	464b      	mov	r3, r9
 800dab6:	460a      	mov	r2, r1
 800dab8:	eb42 0303 	adc.w	r3, r2, r3
 800dabc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	67bb      	str	r3, [r7, #120]	; 0x78
 800daca:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dacc:	f04f 0200 	mov.w	r2, #0
 800dad0:	f04f 0300 	mov.w	r3, #0
 800dad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800dad8:	4649      	mov	r1, r9
 800dada:	008b      	lsls	r3, r1, #2
 800dadc:	4641      	mov	r1, r8
 800dade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dae2:	4641      	mov	r1, r8
 800dae4:	008a      	lsls	r2, r1, #2
 800dae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800daea:	f7f3 f85d 	bl	8000ba8 <__aeabi_uldivmod>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	4b39      	ldr	r3, [pc, #228]	; (800dbd8 <UART_SetConfig+0x4e4>)
 800daf4:	fba3 1302 	umull	r1, r3, r3, r2
 800daf8:	095b      	lsrs	r3, r3, #5
 800dafa:	2164      	movs	r1, #100	; 0x64
 800dafc:	fb01 f303 	mul.w	r3, r1, r3
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	011b      	lsls	r3, r3, #4
 800db04:	3332      	adds	r3, #50	; 0x32
 800db06:	4a34      	ldr	r2, [pc, #208]	; (800dbd8 <UART_SetConfig+0x4e4>)
 800db08:	fba2 2303 	umull	r2, r3, r2, r3
 800db0c:	095b      	lsrs	r3, r3, #5
 800db0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db12:	441c      	add	r4, r3
 800db14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db18:	2200      	movs	r2, #0
 800db1a:	673b      	str	r3, [r7, #112]	; 0x70
 800db1c:	677a      	str	r2, [r7, #116]	; 0x74
 800db1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800db22:	4642      	mov	r2, r8
 800db24:	464b      	mov	r3, r9
 800db26:	1891      	adds	r1, r2, r2
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	415b      	adcs	r3, r3
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db32:	4641      	mov	r1, r8
 800db34:	1851      	adds	r1, r2, r1
 800db36:	6039      	str	r1, [r7, #0]
 800db38:	4649      	mov	r1, r9
 800db3a:	414b      	adcs	r3, r1
 800db3c:	607b      	str	r3, [r7, #4]
 800db3e:	f04f 0200 	mov.w	r2, #0
 800db42:	f04f 0300 	mov.w	r3, #0
 800db46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800db4a:	4659      	mov	r1, fp
 800db4c:	00cb      	lsls	r3, r1, #3
 800db4e:	4651      	mov	r1, sl
 800db50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db54:	4651      	mov	r1, sl
 800db56:	00ca      	lsls	r2, r1, #3
 800db58:	4610      	mov	r0, r2
 800db5a:	4619      	mov	r1, r3
 800db5c:	4603      	mov	r3, r0
 800db5e:	4642      	mov	r2, r8
 800db60:	189b      	adds	r3, r3, r2
 800db62:	66bb      	str	r3, [r7, #104]	; 0x68
 800db64:	464b      	mov	r3, r9
 800db66:	460a      	mov	r2, r1
 800db68:	eb42 0303 	adc.w	r3, r2, r3
 800db6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800db6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	663b      	str	r3, [r7, #96]	; 0x60
 800db78:	667a      	str	r2, [r7, #100]	; 0x64
 800db7a:	f04f 0200 	mov.w	r2, #0
 800db7e:	f04f 0300 	mov.w	r3, #0
 800db82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800db86:	4649      	mov	r1, r9
 800db88:	008b      	lsls	r3, r1, #2
 800db8a:	4641      	mov	r1, r8
 800db8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db90:	4641      	mov	r1, r8
 800db92:	008a      	lsls	r2, r1, #2
 800db94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800db98:	f7f3 f806 	bl	8000ba8 <__aeabi_uldivmod>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	4b0d      	ldr	r3, [pc, #52]	; (800dbd8 <UART_SetConfig+0x4e4>)
 800dba2:	fba3 1302 	umull	r1, r3, r3, r2
 800dba6:	095b      	lsrs	r3, r3, #5
 800dba8:	2164      	movs	r1, #100	; 0x64
 800dbaa:	fb01 f303 	mul.w	r3, r1, r3
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	011b      	lsls	r3, r3, #4
 800dbb2:	3332      	adds	r3, #50	; 0x32
 800dbb4:	4a08      	ldr	r2, [pc, #32]	; (800dbd8 <UART_SetConfig+0x4e4>)
 800dbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800dbba:	095b      	lsrs	r3, r3, #5
 800dbbc:	f003 020f 	and.w	r2, r3, #15
 800dbc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4422      	add	r2, r4
 800dbc8:	609a      	str	r2, [r3, #8]
}
 800dbca:	bf00      	nop
 800dbcc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbd6:	bf00      	nop
 800dbd8:	51eb851f 	.word	0x51eb851f

0800dbdc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800dbdc:	b084      	sub	sp, #16
 800dbde:	b480      	push	{r7}
 800dbe0:	b085      	sub	sp, #20
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
 800dbe6:	f107 001c 	add.w	r0, r7, #28
 800dbea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800dbf2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dbf6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800dbfa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800dbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800dbfe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800dc02:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dc06:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800dc16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	431a      	orrs	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dc22:	2300      	movs	r3, #0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3714      	adds	r7, #20
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	b004      	add	sp, #16
 800dc30:	4770      	bx	lr

0800dc32 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800dc32:	b480      	push	{r7}
 800dc34:	b083      	sub	sp, #12
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2203      	movs	r2, #3
 800dc58:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f003 0303 	and.w	r3, r3, #3
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dca2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800dca8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800dcae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dcbe:	f023 030f 	bic.w	r3, r3, #15
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	431a      	orrs	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	691b      	ldr	r3, [r3, #16]
 800dce4:	b2db      	uxtb	r3, r3
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	370c      	adds	r7, #12
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800dcf2:	b480      	push	{r7}
 800dcf4:	b085      	sub	sp, #20
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	3314      	adds	r3, #20
 800dd00:	461a      	mov	r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	4413      	add	r3, r2
 800dd06:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
}  
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3714      	adds	r7, #20
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dd3e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800dd44:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800dd4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd56:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	431a      	orrs	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dd62:	2300      	movs	r3, #0

}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b088      	sub	sp, #32
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dd7e:	2310      	movs	r3, #16
 800dd80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd82:	2340      	movs	r3, #64	; 0x40
 800dd84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd86:	2300      	movs	r3, #0
 800dd88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd90:	f107 0308 	add.w	r3, r7, #8
 800dd94:	4619      	mov	r1, r3
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7ff ff74 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800dd9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dda0:	2110      	movs	r1, #16
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f94c 	bl	800e040 <SDMMC_GetCmdResp1>
 800dda8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3720      	adds	r7, #32
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b08a      	sub	sp, #40	; 0x28
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ddc4:	2307      	movs	r3, #7
 800ddc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ddc8:	2340      	movs	r3, #64	; 0x40
 800ddca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddd4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddd6:	f107 0310 	add.w	r3, r7, #16
 800ddda:	4619      	mov	r1, r3
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f7ff ff51 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800dde2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dde6:	2107      	movs	r1, #7
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f000 f929 	bl	800e040 <SDMMC_GetCmdResp1>
 800ddee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ddf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3728      	adds	r7, #40	; 0x28
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b088      	sub	sp, #32
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800de02:	2300      	movs	r3, #0
 800de04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800de06:	2300      	movs	r3, #0
 800de08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800de0a:	2300      	movs	r3, #0
 800de0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de0e:	2300      	movs	r3, #0
 800de10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de18:	f107 0308 	add.w	r3, r7, #8
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7ff ff30 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fb43 	bl	800e4b0 <SDMMC_GetCmdError>
 800de2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de2c:	69fb      	ldr	r3, [r7, #28]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b088      	sub	sp, #32
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800de3e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800de42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800de44:	2308      	movs	r3, #8
 800de46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de48:	2340      	movs	r3, #64	; 0x40
 800de4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de4c:	2300      	movs	r3, #0
 800de4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de56:	f107 0308 	add.w	r3, r7, #8
 800de5a:	4619      	mov	r1, r3
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7ff ff11 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 fad6 	bl	800e414 <SDMMC_GetCmdResp7>
 800de68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de6a:	69fb      	ldr	r3, [r7, #28]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3720      	adds	r7, #32
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b088      	sub	sp, #32
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800de82:	2337      	movs	r3, #55	; 0x37
 800de84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de86:	2340      	movs	r3, #64	; 0x40
 800de88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de8a:	2300      	movs	r3, #0
 800de8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de94:	f107 0308 	add.w	r3, r7, #8
 800de98:	4619      	mov	r1, r3
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7ff fef2 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800dea0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dea4:	2137      	movs	r1, #55	; 0x37
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 f8ca 	bl	800e040 <SDMMC_GetCmdResp1>
 800deac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deae:	69fb      	ldr	r3, [r7, #28]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3720      	adds	r7, #32
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b088      	sub	sp, #32
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800decc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dece:	2329      	movs	r3, #41	; 0x29
 800ded0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ded2:	2340      	movs	r3, #64	; 0x40
 800ded4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800deda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dede:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dee0:	f107 0308 	add.w	r3, r7, #8
 800dee4:	4619      	mov	r1, r3
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7ff fecc 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f9dd 	bl	800e2ac <SDMMC_GetCmdResp3>
 800def2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800def4:	69fb      	ldr	r3, [r7, #28]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3720      	adds	r7, #32
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800defe:	b580      	push	{r7, lr}
 800df00:	b088      	sub	sp, #32
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
 800df06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800df0c:	2306      	movs	r3, #6
 800df0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df10:	2340      	movs	r3, #64	; 0x40
 800df12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df14:	2300      	movs	r3, #0
 800df16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df1e:	f107 0308 	add.w	r3, r7, #8
 800df22:	4619      	mov	r1, r3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f7ff fead 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800df2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800df2e:	2106      	movs	r1, #6
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 f885 	bl	800e040 <SDMMC_GetCmdResp1>
 800df36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df38:	69fb      	ldr	r3, [r7, #28]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3720      	adds	r7, #32
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b088      	sub	sp, #32
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800df4a:	2300      	movs	r3, #0
 800df4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800df4e:	2333      	movs	r3, #51	; 0x33
 800df50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df52:	2340      	movs	r3, #64	; 0x40
 800df54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df56:	2300      	movs	r3, #0
 800df58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df60:	f107 0308 	add.w	r3, r7, #8
 800df64:	4619      	mov	r1, r3
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7ff fe8c 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800df6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800df70:	2133      	movs	r1, #51	; 0x33
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 f864 	bl	800e040 <SDMMC_GetCmdResp1>
 800df78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df7a:	69fb      	ldr	r3, [r7, #28]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3720      	adds	r7, #32
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b088      	sub	sp, #32
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800df8c:	2300      	movs	r3, #0
 800df8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800df90:	2302      	movs	r3, #2
 800df92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800df94:	23c0      	movs	r3, #192	; 0xc0
 800df96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df98:	2300      	movs	r3, #0
 800df9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfa2:	f107 0308 	add.w	r3, r7, #8
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7ff fe6b 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 f934 	bl	800e21c <SDMMC_GetCmdResp2>
 800dfb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfb6:	69fb      	ldr	r3, [r7, #28]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3720      	adds	r7, #32
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b088      	sub	sp, #32
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dfce:	2309      	movs	r3, #9
 800dfd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dfd2:	23c0      	movs	r3, #192	; 0xc0
 800dfd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfe0:	f107 0308 	add.w	r3, r7, #8
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7ff fe4c 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 f915 	bl	800e21c <SDMMC_GetCmdResp2>
 800dff2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dff4:	69fb      	ldr	r3, [r7, #28]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3720      	adds	r7, #32
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b088      	sub	sp, #32
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
 800e006:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e008:	2300      	movs	r3, #0
 800e00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e00c:	2303      	movs	r3, #3
 800e00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e010:	2340      	movs	r3, #64	; 0x40
 800e012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e014:	2300      	movs	r3, #0
 800e016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e01c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e01e:	f107 0308 	add.w	r3, r7, #8
 800e022:	4619      	mov	r1, r3
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff fe2d 	bl	800dc84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e02a:	683a      	ldr	r2, [r7, #0]
 800e02c:	2103      	movs	r1, #3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 f97a 	bl	800e328 <SDMMC_GetCmdResp6>
 800e034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e036:	69fb      	ldr	r3, [r7, #28]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3720      	adds	r7, #32
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b088      	sub	sp, #32
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	460b      	mov	r3, r1
 800e04a:	607a      	str	r2, [r7, #4]
 800e04c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e04e:	4b70      	ldr	r3, [pc, #448]	; (800e210 <SDMMC_GetCmdResp1+0x1d0>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a70      	ldr	r2, [pc, #448]	; (800e214 <SDMMC_GetCmdResp1+0x1d4>)
 800e054:	fba2 2303 	umull	r2, r3, r2, r3
 800e058:	0a5a      	lsrs	r2, r3, #9
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	fb02 f303 	mul.w	r3, r2, r3
 800e060:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	1e5a      	subs	r2, r3, #1
 800e066:	61fa      	str	r2, [r7, #28]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d102      	bne.n	800e072 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e06c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e070:	e0c9      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e076:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d0ef      	beq.n	800e062 <SDMMC_GetCmdResp1+0x22>
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1ea      	bne.n	800e062 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e090:	f003 0304 	and.w	r3, r3, #4
 800e094:	2b00      	cmp	r3, #0
 800e096:	d004      	beq.n	800e0a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2204      	movs	r2, #4
 800e09c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e09e:	2304      	movs	r3, #4
 800e0a0:	e0b1      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a6:	f003 0301 	and.w	r3, r3, #1
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d004      	beq.n	800e0b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e0a6      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	22c5      	movs	r2, #197	; 0xc5
 800e0bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f7ff fe0a 	bl	800dcd8 <SDIO_GetCommandResponse>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	7afb      	ldrb	r3, [r7, #11]
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d001      	beq.n	800e0d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e099      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f7ff fe0c 	bl	800dcf2 <SDIO_GetResponse>
 800e0da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	4b4e      	ldr	r3, [pc, #312]	; (800e218 <SDMMC_GetCmdResp1+0x1d8>)
 800e0e0:	4013      	ands	r3, r2
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d101      	bne.n	800e0ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e08d      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	da02      	bge.n	800e0f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e0f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e0f4:	e087      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e100:	2340      	movs	r3, #64	; 0x40
 800e102:	e080      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e10e:	2380      	movs	r3, #128	; 0x80
 800e110:	e079      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d002      	beq.n	800e122 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e11c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e120:	e071      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d002      	beq.n	800e132 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e12c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e130:	e069      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e13c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e140:	e061      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e14c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e150:	e059      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d002      	beq.n	800e162 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e15c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e160:	e051      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e16c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e170:	e049      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e17c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e180:	e041      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e18c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e190:	e039      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d002      	beq.n	800e1a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e19c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e1a0:	e031      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d002      	beq.n	800e1b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e1ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e1b0:	e029      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d002      	beq.n	800e1c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e1bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e1c0:	e021      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e1cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e1d0:	e019      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e1dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e1e0:	e011      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e1ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e1f0:	e009      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	f003 0308 	and.w	r3, r3, #8
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d002      	beq.n	800e202 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e1fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e200:	e001      	b.n	800e206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e206:	4618      	mov	r0, r3
 800e208:	3720      	adds	r7, #32
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	20000000 	.word	0x20000000
 800e214:	10624dd3 	.word	0x10624dd3
 800e218:	fdffe008 	.word	0xfdffe008

0800e21c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b085      	sub	sp, #20
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e224:	4b1f      	ldr	r3, [pc, #124]	; (800e2a4 <SDMMC_GetCmdResp2+0x88>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a1f      	ldr	r2, [pc, #124]	; (800e2a8 <SDMMC_GetCmdResp2+0x8c>)
 800e22a:	fba2 2303 	umull	r2, r3, r2, r3
 800e22e:	0a5b      	lsrs	r3, r3, #9
 800e230:	f241 3288 	movw	r2, #5000	; 0x1388
 800e234:	fb02 f303 	mul.w	r3, r2, r3
 800e238:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	1e5a      	subs	r2, r3, #1
 800e23e:	60fa      	str	r2, [r7, #12]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d102      	bne.n	800e24a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e248:	e026      	b.n	800e298 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e256:	2b00      	cmp	r3, #0
 800e258:	d0ef      	beq.n	800e23a <SDMMC_GetCmdResp2+0x1e>
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e260:	2b00      	cmp	r3, #0
 800e262:	d1ea      	bne.n	800e23a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e268:	f003 0304 	and.w	r3, r3, #4
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d004      	beq.n	800e27a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2204      	movs	r2, #4
 800e274:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e276:	2304      	movs	r3, #4
 800e278:	e00e      	b.n	800e298 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27e:	f003 0301 	and.w	r3, r3, #1
 800e282:	2b00      	cmp	r3, #0
 800e284:	d004      	beq.n	800e290 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2201      	movs	r2, #1
 800e28a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e28c:	2301      	movs	r3, #1
 800e28e:	e003      	b.n	800e298 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	22c5      	movs	r2, #197	; 0xc5
 800e294:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e296:	2300      	movs	r3, #0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3714      	adds	r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr
 800e2a4:	20000000 	.word	0x20000000
 800e2a8:	10624dd3 	.word	0x10624dd3

0800e2ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2b4:	4b1a      	ldr	r3, [pc, #104]	; (800e320 <SDMMC_GetCmdResp3+0x74>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a1a      	ldr	r2, [pc, #104]	; (800e324 <SDMMC_GetCmdResp3+0x78>)
 800e2ba:	fba2 2303 	umull	r2, r3, r2, r3
 800e2be:	0a5b      	lsrs	r3, r3, #9
 800e2c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2c4:	fb02 f303 	mul.w	r3, r2, r3
 800e2c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	1e5a      	subs	r2, r3, #1
 800e2ce:	60fa      	str	r2, [r7, #12]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d102      	bne.n	800e2da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2d8:	e01b      	b.n	800e312 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0ef      	beq.n	800e2ca <SDMMC_GetCmdResp3+0x1e>
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1ea      	bne.n	800e2ca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f8:	f003 0304 	and.w	r3, r3, #4
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d004      	beq.n	800e30a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2204      	movs	r2, #4
 800e304:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e306:	2304      	movs	r3, #4
 800e308:	e003      	b.n	800e312 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	22c5      	movs	r2, #197	; 0xc5
 800e30e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3714      	adds	r7, #20
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop
 800e320:	20000000 	.word	0x20000000
 800e324:	10624dd3 	.word	0x10624dd3

0800e328 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	460b      	mov	r3, r1
 800e332:	607a      	str	r2, [r7, #4]
 800e334:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e336:	4b35      	ldr	r3, [pc, #212]	; (800e40c <SDMMC_GetCmdResp6+0xe4>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a35      	ldr	r2, [pc, #212]	; (800e410 <SDMMC_GetCmdResp6+0xe8>)
 800e33c:	fba2 2303 	umull	r2, r3, r2, r3
 800e340:	0a5b      	lsrs	r3, r3, #9
 800e342:	f241 3288 	movw	r2, #5000	; 0x1388
 800e346:	fb02 f303 	mul.w	r3, r2, r3
 800e34a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	1e5a      	subs	r2, r3, #1
 800e350:	61fa      	str	r2, [r7, #28]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d102      	bne.n	800e35c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e356:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e35a:	e052      	b.n	800e402 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e360:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d0ef      	beq.n	800e34c <SDMMC_GetCmdResp6+0x24>
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1ea      	bne.n	800e34c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e37a:	f003 0304 	and.w	r3, r3, #4
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d004      	beq.n	800e38c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2204      	movs	r2, #4
 800e386:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e388:	2304      	movs	r3, #4
 800e38a:	e03a      	b.n	800e402 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e390:	f003 0301 	and.w	r3, r3, #1
 800e394:	2b00      	cmp	r3, #0
 800e396:	d004      	beq.n	800e3a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2201      	movs	r2, #1
 800e39c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e02f      	b.n	800e402 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7ff fc98 	bl	800dcd8 <SDIO_GetCommandResponse>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	7afb      	ldrb	r3, [r7, #11]
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d001      	beq.n	800e3b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e025      	b.n	800e402 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	22c5      	movs	r2, #197	; 0xc5
 800e3ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e3bc:	2100      	movs	r1, #0
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f7ff fc97 	bl	800dcf2 <SDIO_GetResponse>
 800e3c4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d106      	bne.n	800e3de <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	0c1b      	lsrs	r3, r3, #16
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e011      	b.n	800e402 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d002      	beq.n	800e3ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e3e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3ec:	e009      	b.n	800e402 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e3f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3fc:	e001      	b.n	800e402 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e3fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e402:	4618      	mov	r0, r3
 800e404:	3720      	adds	r7, #32
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	20000000 	.word	0x20000000
 800e410:	10624dd3 	.word	0x10624dd3

0800e414 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e41c:	4b22      	ldr	r3, [pc, #136]	; (800e4a8 <SDMMC_GetCmdResp7+0x94>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a22      	ldr	r2, [pc, #136]	; (800e4ac <SDMMC_GetCmdResp7+0x98>)
 800e422:	fba2 2303 	umull	r2, r3, r2, r3
 800e426:	0a5b      	lsrs	r3, r3, #9
 800e428:	f241 3288 	movw	r2, #5000	; 0x1388
 800e42c:	fb02 f303 	mul.w	r3, r2, r3
 800e430:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	1e5a      	subs	r2, r3, #1
 800e436:	60fa      	str	r2, [r7, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e43c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e440:	e02c      	b.n	800e49c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e446:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d0ef      	beq.n	800e432 <SDMMC_GetCmdResp7+0x1e>
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1ea      	bne.n	800e432 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e460:	f003 0304 	and.w	r3, r3, #4
 800e464:	2b00      	cmp	r3, #0
 800e466:	d004      	beq.n	800e472 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2204      	movs	r2, #4
 800e46c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e46e:	2304      	movs	r3, #4
 800e470:	e014      	b.n	800e49c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e476:	f003 0301 	and.w	r3, r3, #1
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d004      	beq.n	800e488 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2201      	movs	r2, #1
 800e482:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e484:	2301      	movs	r3, #1
 800e486:	e009      	b.n	800e49c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2240      	movs	r2, #64	; 0x40
 800e498:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e49a:	2300      	movs	r3, #0
  
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3714      	adds	r7, #20
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr
 800e4a8:	20000000 	.word	0x20000000
 800e4ac:	10624dd3 	.word	0x10624dd3

0800e4b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4b8:	4b11      	ldr	r3, [pc, #68]	; (800e500 <SDMMC_GetCmdError+0x50>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a11      	ldr	r2, [pc, #68]	; (800e504 <SDMMC_GetCmdError+0x54>)
 800e4be:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c2:	0a5b      	lsrs	r3, r3, #9
 800e4c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4c8:	fb02 f303 	mul.w	r3, r2, r3
 800e4cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	1e5a      	subs	r2, r3, #1
 800e4d2:	60fa      	str	r2, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d102      	bne.n	800e4de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4dc:	e009      	b.n	800e4f2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d0f1      	beq.n	800e4ce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	22c5      	movs	r2, #197	; 0xc5
 800e4ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e4f0:	2300      	movs	r3, #0
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3714      	adds	r7, #20
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	20000000 	.word	0x20000000
 800e504:	10624dd3 	.word	0x10624dd3

0800e508 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e508:	b480      	push	{r7}
 800e50a:	b087      	sub	sp, #28
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	4613      	mov	r3, r2
 800e514:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e516:	79fb      	ldrb	r3, [r7, #7]
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d165      	bne.n	800e5e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	4a41      	ldr	r2, [pc, #260]	; (800e624 <USB_SetTurnaroundTime+0x11c>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d906      	bls.n	800e532 <USB_SetTurnaroundTime+0x2a>
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	4a40      	ldr	r2, [pc, #256]	; (800e628 <USB_SetTurnaroundTime+0x120>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d202      	bcs.n	800e532 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e52c:	230f      	movs	r3, #15
 800e52e:	617b      	str	r3, [r7, #20]
 800e530:	e062      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	4a3c      	ldr	r2, [pc, #240]	; (800e628 <USB_SetTurnaroundTime+0x120>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d306      	bcc.n	800e548 <USB_SetTurnaroundTime+0x40>
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	4a3b      	ldr	r2, [pc, #236]	; (800e62c <USB_SetTurnaroundTime+0x124>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d202      	bcs.n	800e548 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e542:	230e      	movs	r3, #14
 800e544:	617b      	str	r3, [r7, #20]
 800e546:	e057      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	4a38      	ldr	r2, [pc, #224]	; (800e62c <USB_SetTurnaroundTime+0x124>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d306      	bcc.n	800e55e <USB_SetTurnaroundTime+0x56>
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	4a37      	ldr	r2, [pc, #220]	; (800e630 <USB_SetTurnaroundTime+0x128>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d202      	bcs.n	800e55e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e558:	230d      	movs	r3, #13
 800e55a:	617b      	str	r3, [r7, #20]
 800e55c:	e04c      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	4a33      	ldr	r2, [pc, #204]	; (800e630 <USB_SetTurnaroundTime+0x128>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d306      	bcc.n	800e574 <USB_SetTurnaroundTime+0x6c>
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	4a32      	ldr	r2, [pc, #200]	; (800e634 <USB_SetTurnaroundTime+0x12c>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d802      	bhi.n	800e574 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e56e:	230c      	movs	r3, #12
 800e570:	617b      	str	r3, [r7, #20]
 800e572:	e041      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	4a2f      	ldr	r2, [pc, #188]	; (800e634 <USB_SetTurnaroundTime+0x12c>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d906      	bls.n	800e58a <USB_SetTurnaroundTime+0x82>
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	4a2e      	ldr	r2, [pc, #184]	; (800e638 <USB_SetTurnaroundTime+0x130>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d802      	bhi.n	800e58a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e584:	230b      	movs	r3, #11
 800e586:	617b      	str	r3, [r7, #20]
 800e588:	e036      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	4a2a      	ldr	r2, [pc, #168]	; (800e638 <USB_SetTurnaroundTime+0x130>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d906      	bls.n	800e5a0 <USB_SetTurnaroundTime+0x98>
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	4a29      	ldr	r2, [pc, #164]	; (800e63c <USB_SetTurnaroundTime+0x134>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d802      	bhi.n	800e5a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e59a:	230a      	movs	r3, #10
 800e59c:	617b      	str	r3, [r7, #20]
 800e59e:	e02b      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	4a26      	ldr	r2, [pc, #152]	; (800e63c <USB_SetTurnaroundTime+0x134>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d906      	bls.n	800e5b6 <USB_SetTurnaroundTime+0xae>
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	4a25      	ldr	r2, [pc, #148]	; (800e640 <USB_SetTurnaroundTime+0x138>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d202      	bcs.n	800e5b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e5b0:	2309      	movs	r3, #9
 800e5b2:	617b      	str	r3, [r7, #20]
 800e5b4:	e020      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	4a21      	ldr	r2, [pc, #132]	; (800e640 <USB_SetTurnaroundTime+0x138>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d306      	bcc.n	800e5cc <USB_SetTurnaroundTime+0xc4>
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	4a20      	ldr	r2, [pc, #128]	; (800e644 <USB_SetTurnaroundTime+0x13c>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d802      	bhi.n	800e5cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e5c6:	2308      	movs	r3, #8
 800e5c8:	617b      	str	r3, [r7, #20]
 800e5ca:	e015      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	4a1d      	ldr	r2, [pc, #116]	; (800e644 <USB_SetTurnaroundTime+0x13c>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d906      	bls.n	800e5e2 <USB_SetTurnaroundTime+0xda>
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	4a1c      	ldr	r2, [pc, #112]	; (800e648 <USB_SetTurnaroundTime+0x140>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d202      	bcs.n	800e5e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e5dc:	2307      	movs	r3, #7
 800e5de:	617b      	str	r3, [r7, #20]
 800e5e0:	e00a      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e5e2:	2306      	movs	r3, #6
 800e5e4:	617b      	str	r3, [r7, #20]
 800e5e6:	e007      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e5e8:	79fb      	ldrb	r3, [r7, #7]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d102      	bne.n	800e5f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e5ee:	2309      	movs	r3, #9
 800e5f0:	617b      	str	r3, [r7, #20]
 800e5f2:	e001      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e5f4:	2309      	movs	r3, #9
 800e5f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	68da      	ldr	r2, [r3, #12]
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	029b      	lsls	r3, r3, #10
 800e60c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e610:	431a      	orrs	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	371c      	adds	r7, #28
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr
 800e624:	00d8acbf 	.word	0x00d8acbf
 800e628:	00e4e1c0 	.word	0x00e4e1c0
 800e62c:	00f42400 	.word	0x00f42400
 800e630:	01067380 	.word	0x01067380
 800e634:	011a499f 	.word	0x011a499f
 800e638:	01312cff 	.word	0x01312cff
 800e63c:	014ca43f 	.word	0x014ca43f
 800e640:	016e3600 	.word	0x016e3600
 800e644:	01a6ab1f 	.word	0x01a6ab1f
 800e648:	01e84800 	.word	0x01e84800

0800e64c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e656:	2300      	movs	r3, #0
 800e658:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	3301      	adds	r3, #1
 800e65e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4a13      	ldr	r2, [pc, #76]	; (800e6b0 <USB_FlushTxFifo+0x64>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d901      	bls.n	800e66c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e668:	2303      	movs	r3, #3
 800e66a:	e01b      	b.n	800e6a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	691b      	ldr	r3, [r3, #16]
 800e670:	2b00      	cmp	r3, #0
 800e672:	daf2      	bge.n	800e65a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e674:	2300      	movs	r3, #0
 800e676:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	019b      	lsls	r3, r3, #6
 800e67c:	f043 0220 	orr.w	r2, r3, #32
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	3301      	adds	r3, #1
 800e688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	4a08      	ldr	r2, [pc, #32]	; (800e6b0 <USB_FlushTxFifo+0x64>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d901      	bls.n	800e696 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e692:	2303      	movs	r3, #3
 800e694:	e006      	b.n	800e6a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	691b      	ldr	r3, [r3, #16]
 800e69a:	f003 0320 	and.w	r3, r3, #32
 800e69e:	2b20      	cmp	r3, #32
 800e6a0:	d0f0      	beq.n	800e684 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3714      	adds	r7, #20
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr
 800e6b0:	00030d40 	.word	0x00030d40

0800e6b4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b087      	sub	sp, #28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c6:	689b      	ldr	r3, [r3, #8]
 800e6c8:	f003 0306 	and.w	r3, r3, #6
 800e6cc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d102      	bne.n	800e6da <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	75fb      	strb	r3, [r7, #23]
 800e6d8:	e00a      	b.n	800e6f0 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d002      	beq.n	800e6e6 <USB_GetDevSpeed+0x32>
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2b06      	cmp	r3, #6
 800e6e4:	d102      	bne.n	800e6ec <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e6e6:	2302      	movs	r3, #2
 800e6e8:	75fb      	strb	r3, [r7, #23]
 800e6ea:	e001      	b.n	800e6f0 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e6ec:	230f      	movs	r3, #15
 800e6ee:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	371c      	adds	r7, #28
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr

0800e6fe <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e6fe:	b480      	push	{r7}
 800e700:	b085      	sub	sp, #20
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	785b      	ldrb	r3, [r3, #1]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d13a      	bne.n	800e790 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e720:	69da      	ldr	r2, [r3, #28]
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	f003 030f 	and.w	r3, r3, #15
 800e72a:	2101      	movs	r1, #1
 800e72c:	fa01 f303 	lsl.w	r3, r1, r3
 800e730:	b29b      	uxth	r3, r3
 800e732:	68f9      	ldr	r1, [r7, #12]
 800e734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e738:	4313      	orrs	r3, r2
 800e73a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	015a      	lsls	r2, r3, #5
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	4413      	add	r3, r2
 800e744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d155      	bne.n	800e7fe <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	791b      	ldrb	r3, [r3, #4]
 800e76c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e76e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	059b      	lsls	r3, r3, #22
 800e774:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e776:	4313      	orrs	r3, r2
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	0151      	lsls	r1, r2, #5
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	440a      	add	r2, r1
 800e780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e78c:	6013      	str	r3, [r2, #0]
 800e78e:	e036      	b.n	800e7fe <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e796:	69da      	ldr	r2, [r3, #28]
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	f003 030f 	and.w	r3, r3, #15
 800e7a0:	2101      	movs	r1, #1
 800e7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e7a6:	041b      	lsls	r3, r3, #16
 800e7a8:	68f9      	ldr	r1, [r7, #12]
 800e7aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	015a      	lsls	r2, r3, #5
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d11a      	bne.n	800e7fe <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	015a      	lsls	r2, r3, #5
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	791b      	ldrb	r3, [r3, #4]
 800e7e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e7e4:	430b      	orrs	r3, r1
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	68ba      	ldr	r2, [r7, #8]
 800e7ea:	0151      	lsls	r1, r2, #5
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	440a      	add	r2, r1
 800e7f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7fc:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3714      	adds	r7, #20
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b08a      	sub	sp, #40	; 0x28
 800e810:	af02      	add	r7, sp, #8
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	4613      	mov	r3, r2
 800e818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	785b      	ldrb	r3, [r3, #1]
 800e828:	2b01      	cmp	r3, #1
 800e82a:	f040 815c 	bne.w	800eae6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	699b      	ldr	r3, [r3, #24]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d132      	bne.n	800e89c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	015a      	lsls	r2, r3, #5
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	4413      	add	r3, r2
 800e83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	69ba      	ldr	r2, [r7, #24]
 800e846:	0151      	lsls	r1, r2, #5
 800e848:	69fa      	ldr	r2, [r7, #28]
 800e84a:	440a      	add	r2, r1
 800e84c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	015a      	lsls	r2, r3, #5
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	4413      	add	r3, r2
 800e862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e866:	691b      	ldr	r3, [r3, #16]
 800e868:	69ba      	ldr	r2, [r7, #24]
 800e86a:	0151      	lsls	r1, r2, #5
 800e86c:	69fa      	ldr	r2, [r7, #28]
 800e86e:	440a      	add	r2, r1
 800e870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	015a      	lsls	r2, r3, #5
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	4413      	add	r3, r2
 800e882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e886:	691b      	ldr	r3, [r3, #16]
 800e888:	69ba      	ldr	r2, [r7, #24]
 800e88a:	0151      	lsls	r1, r2, #5
 800e88c:	69fa      	ldr	r2, [r7, #28]
 800e88e:	440a      	add	r2, r1
 800e890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e894:	0cdb      	lsrs	r3, r3, #19
 800e896:	04db      	lsls	r3, r3, #19
 800e898:	6113      	str	r3, [r2, #16]
 800e89a:	e074      	b.n	800e986 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	015a      	lsls	r2, r3, #5
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	69ba      	ldr	r2, [r7, #24]
 800e8ac:	0151      	lsls	r1, r2, #5
 800e8ae:	69fa      	ldr	r2, [r7, #28]
 800e8b0:	440a      	add	r2, r1
 800e8b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8b6:	0cdb      	lsrs	r3, r3, #19
 800e8b8:	04db      	lsls	r3, r3, #19
 800e8ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	015a      	lsls	r2, r3, #5
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	69ba      	ldr	r2, [r7, #24]
 800e8cc:	0151      	lsls	r1, r2, #5
 800e8ce:	69fa      	ldr	r2, [r7, #28]
 800e8d0:	440a      	add	r2, r1
 800e8d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e8da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e8de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	015a      	lsls	r2, r3, #5
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	6999      	ldr	r1, [r3, #24]
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	440b      	add	r3, r1
 800e8f8:	1e59      	subs	r1, r3, #1
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800e902:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e904:	4b9d      	ldr	r3, [pc, #628]	; (800eb7c <USB_EPStartXfer+0x370>)
 800e906:	400b      	ands	r3, r1
 800e908:	69b9      	ldr	r1, [r7, #24]
 800e90a:	0148      	lsls	r0, r1, #5
 800e90c:	69f9      	ldr	r1, [r7, #28]
 800e90e:	4401      	add	r1, r0
 800e910:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e914:	4313      	orrs	r3, r2
 800e916:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	015a      	lsls	r2, r3, #5
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	4413      	add	r3, r2
 800e920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e924:	691a      	ldr	r2, [r3, #16]
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	699b      	ldr	r3, [r3, #24]
 800e92a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e92e:	69b9      	ldr	r1, [r7, #24]
 800e930:	0148      	lsls	r0, r1, #5
 800e932:	69f9      	ldr	r1, [r7, #28]
 800e934:	4401      	add	r1, r0
 800e936:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e93a:	4313      	orrs	r3, r2
 800e93c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	791b      	ldrb	r3, [r3, #4]
 800e942:	2b01      	cmp	r3, #1
 800e944:	d11f      	bne.n	800e986 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	015a      	lsls	r2, r3, #5
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	4413      	add	r3, r2
 800e94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e952:	691b      	ldr	r3, [r3, #16]
 800e954:	69ba      	ldr	r2, [r7, #24]
 800e956:	0151      	lsls	r1, r2, #5
 800e958:	69fa      	ldr	r2, [r7, #28]
 800e95a:	440a      	add	r2, r1
 800e95c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e960:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e964:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	015a      	lsls	r2, r3, #5
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	4413      	add	r3, r2
 800e96e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e972:	691b      	ldr	r3, [r3, #16]
 800e974:	69ba      	ldr	r2, [r7, #24]
 800e976:	0151      	lsls	r1, r2, #5
 800e978:	69fa      	ldr	r2, [r7, #28]
 800e97a:	440a      	add	r2, r1
 800e97c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e984:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e986:	79fb      	ldrb	r3, [r7, #7]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d14b      	bne.n	800ea24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d009      	beq.n	800e9a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	015a      	lsls	r2, r3, #5
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	4413      	add	r3, r2
 800e99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	695b      	ldr	r3, [r3, #20]
 800e9a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	791b      	ldrb	r3, [r3, #4]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d128      	bne.n	800ea02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d110      	bne.n	800e9e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	015a      	lsls	r2, r3, #5
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	69ba      	ldr	r2, [r7, #24]
 800e9d0:	0151      	lsls	r1, r2, #5
 800e9d2:	69fa      	ldr	r2, [r7, #28]
 800e9d4:	440a      	add	r2, r1
 800e9d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	e00f      	b.n	800ea02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	015a      	lsls	r2, r3, #5
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	69ba      	ldr	r2, [r7, #24]
 800e9f2:	0151      	lsls	r1, r2, #5
 800e9f4:	69fa      	ldr	r2, [r7, #28]
 800e9f6:	440a      	add	r2, r1
 800e9f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	015a      	lsls	r2, r3, #5
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	4413      	add	r3, r2
 800ea0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	69ba      	ldr	r2, [r7, #24]
 800ea12:	0151      	lsls	r1, r2, #5
 800ea14:	69fa      	ldr	r2, [r7, #28]
 800ea16:	440a      	add	r2, r1
 800ea18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea20:	6013      	str	r3, [r2, #0]
 800ea22:	e133      	b.n	800ec8c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	015a      	lsls	r2, r3, #5
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	69ba      	ldr	r2, [r7, #24]
 800ea34:	0151      	lsls	r1, r2, #5
 800ea36:	69fa      	ldr	r2, [r7, #28]
 800ea38:	440a      	add	r2, r1
 800ea3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	791b      	ldrb	r3, [r3, #4]
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d015      	beq.n	800ea78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	f000 811b 	beq.w	800ec8c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	f003 030f 	and.w	r3, r3, #15
 800ea66:	2101      	movs	r1, #1
 800ea68:	fa01 f303 	lsl.w	r3, r1, r3
 800ea6c:	69f9      	ldr	r1, [r7, #28]
 800ea6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea72:	4313      	orrs	r3, r2
 800ea74:	634b      	str	r3, [r1, #52]	; 0x34
 800ea76:	e109      	b.n	800ec8c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d110      	bne.n	800eaaa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	015a      	lsls	r2, r3, #5
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	4413      	add	r3, r2
 800ea90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	69ba      	ldr	r2, [r7, #24]
 800ea98:	0151      	lsls	r1, r2, #5
 800ea9a:	69fa      	ldr	r2, [r7, #28]
 800ea9c:	440a      	add	r2, r1
 800ea9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eaa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eaa6:	6013      	str	r3, [r2, #0]
 800eaa8:	e00f      	b.n	800eaca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	015a      	lsls	r2, r3, #5
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	4413      	add	r3, r2
 800eab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	69ba      	ldr	r2, [r7, #24]
 800eaba:	0151      	lsls	r1, r2, #5
 800eabc:	69fa      	ldr	r2, [r7, #28]
 800eabe:	440a      	add	r2, r1
 800eac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eac8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	6919      	ldr	r1, [r3, #16]
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	781a      	ldrb	r2, [r3, #0]
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	b298      	uxth	r0, r3
 800ead8:	79fb      	ldrb	r3, [r7, #7]
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	4603      	mov	r3, r0
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f000 fade 	bl	800f0a0 <USB_WritePacket>
 800eae4:	e0d2      	b.n	800ec8c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eae6:	69bb      	ldr	r3, [r7, #24]
 800eae8:	015a      	lsls	r2, r3, #5
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	4413      	add	r3, r2
 800eaee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	69ba      	ldr	r2, [r7, #24]
 800eaf6:	0151      	lsls	r1, r2, #5
 800eaf8:	69fa      	ldr	r2, [r7, #28]
 800eafa:	440a      	add	r2, r1
 800eafc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb00:	0cdb      	lsrs	r3, r3, #19
 800eb02:	04db      	lsls	r3, r3, #19
 800eb04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	015a      	lsls	r2, r3, #5
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	69ba      	ldr	r2, [r7, #24]
 800eb16:	0151      	lsls	r1, r2, #5
 800eb18:	69fa      	ldr	r2, [r7, #28]
 800eb1a:	440a      	add	r2, r1
 800eb1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eb24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eb28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d126      	bne.n	800eb80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	015a      	lsls	r2, r3, #5
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	4413      	add	r3, r2
 800eb3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb3e:	691a      	ldr	r2, [r3, #16]
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb48:	69b9      	ldr	r1, [r7, #24]
 800eb4a:	0148      	lsls	r0, r1, #5
 800eb4c:	69f9      	ldr	r1, [r7, #28]
 800eb4e:	4401      	add	r1, r0
 800eb50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb54:	4313      	orrs	r3, r2
 800eb56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	015a      	lsls	r2, r3, #5
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	4413      	add	r3, r2
 800eb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb64:	691b      	ldr	r3, [r3, #16]
 800eb66:	69ba      	ldr	r2, [r7, #24]
 800eb68:	0151      	lsls	r1, r2, #5
 800eb6a:	69fa      	ldr	r2, [r7, #28]
 800eb6c:	440a      	add	r2, r1
 800eb6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb76:	6113      	str	r3, [r2, #16]
 800eb78:	e03a      	b.n	800ebf0 <USB_EPStartXfer+0x3e4>
 800eb7a:	bf00      	nop
 800eb7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	699a      	ldr	r2, [r3, #24]
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	4413      	add	r3, r2
 800eb8a:	1e5a      	subs	r2, r3, #1
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb94:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	8afa      	ldrh	r2, [r7, #22]
 800eb9c:	fb03 f202 	mul.w	r2, r3, r2
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	015a      	lsls	r2, r3, #5
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	4413      	add	r3, r2
 800ebac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebb0:	691a      	ldr	r2, [r3, #16]
 800ebb2:	8afb      	ldrh	r3, [r7, #22]
 800ebb4:	04d9      	lsls	r1, r3, #19
 800ebb6:	4b38      	ldr	r3, [pc, #224]	; (800ec98 <USB_EPStartXfer+0x48c>)
 800ebb8:	400b      	ands	r3, r1
 800ebba:	69b9      	ldr	r1, [r7, #24]
 800ebbc:	0148      	lsls	r0, r1, #5
 800ebbe:	69f9      	ldr	r1, [r7, #28]
 800ebc0:	4401      	add	r1, r0
 800ebc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	015a      	lsls	r2, r3, #5
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebd6:	691a      	ldr	r2, [r3, #16]
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	69db      	ldr	r3, [r3, #28]
 800ebdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ebe0:	69b9      	ldr	r1, [r7, #24]
 800ebe2:	0148      	lsls	r0, r1, #5
 800ebe4:	69f9      	ldr	r1, [r7, #28]
 800ebe6:	4401      	add	r1, r0
 800ebe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ebec:	4313      	orrs	r3, r2
 800ebee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ebf0:	79fb      	ldrb	r3, [r7, #7]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d10d      	bne.n	800ec12 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d009      	beq.n	800ec12 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	6919      	ldr	r1, [r3, #16]
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	015a      	lsls	r2, r3, #5
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	4413      	add	r3, r2
 800ec0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec0e:	460a      	mov	r2, r1
 800ec10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	791b      	ldrb	r3, [r3, #4]
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d128      	bne.n	800ec6c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec20:	689b      	ldr	r3, [r3, #8]
 800ec22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d110      	bne.n	800ec4c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	015a      	lsls	r2, r3, #5
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	4413      	add	r3, r2
 800ec32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	69ba      	ldr	r2, [r7, #24]
 800ec3a:	0151      	lsls	r1, r2, #5
 800ec3c:	69fa      	ldr	r2, [r7, #28]
 800ec3e:	440a      	add	r2, r1
 800ec40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec48:	6013      	str	r3, [r2, #0]
 800ec4a:	e00f      	b.n	800ec6c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	015a      	lsls	r2, r3, #5
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	4413      	add	r3, r2
 800ec54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	69ba      	ldr	r2, [r7, #24]
 800ec5c:	0151      	lsls	r1, r2, #5
 800ec5e:	69fa      	ldr	r2, [r7, #28]
 800ec60:	440a      	add	r2, r1
 800ec62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	015a      	lsls	r2, r3, #5
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	4413      	add	r3, r2
 800ec74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	69ba      	ldr	r2, [r7, #24]
 800ec7c:	0151      	lsls	r1, r2, #5
 800ec7e:	69fa      	ldr	r2, [r7, #28]
 800ec80:	440a      	add	r2, r1
 800ec82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3720      	adds	r7, #32
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	1ff80000 	.word	0x1ff80000

0800ec9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	4613      	mov	r3, r2
 800eca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	785b      	ldrb	r3, [r3, #1]
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	f040 80ce 	bne.w	800ee5a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	699b      	ldr	r3, [r3, #24]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d132      	bne.n	800ed2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	015a      	lsls	r2, r3, #5
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	4413      	add	r3, r2
 800ecce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd2:	691b      	ldr	r3, [r3, #16]
 800ecd4:	693a      	ldr	r2, [r7, #16]
 800ecd6:	0151      	lsls	r1, r2, #5
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	440a      	add	r2, r1
 800ecdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ece0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ece4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ece8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	015a      	lsls	r2, r3, #5
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	693a      	ldr	r2, [r7, #16]
 800ecfa:	0151      	lsls	r1, r2, #5
 800ecfc:	697a      	ldr	r2, [r7, #20]
 800ecfe:	440a      	add	r2, r1
 800ed00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	015a      	lsls	r2, r3, #5
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	4413      	add	r3, r2
 800ed12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed16:	691b      	ldr	r3, [r3, #16]
 800ed18:	693a      	ldr	r2, [r7, #16]
 800ed1a:	0151      	lsls	r1, r2, #5
 800ed1c:	697a      	ldr	r2, [r7, #20]
 800ed1e:	440a      	add	r2, r1
 800ed20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed24:	0cdb      	lsrs	r3, r3, #19
 800ed26:	04db      	lsls	r3, r3, #19
 800ed28:	6113      	str	r3, [r2, #16]
 800ed2a:	e04e      	b.n	800edca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	015a      	lsls	r2, r3, #5
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	4413      	add	r3, r2
 800ed34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed38:	691b      	ldr	r3, [r3, #16]
 800ed3a:	693a      	ldr	r2, [r7, #16]
 800ed3c:	0151      	lsls	r1, r2, #5
 800ed3e:	697a      	ldr	r2, [r7, #20]
 800ed40:	440a      	add	r2, r1
 800ed42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed46:	0cdb      	lsrs	r3, r3, #19
 800ed48:	04db      	lsls	r3, r3, #19
 800ed4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	015a      	lsls	r2, r3, #5
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	4413      	add	r3, r2
 800ed54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	693a      	ldr	r2, [r7, #16]
 800ed5c:	0151      	lsls	r1, r2, #5
 800ed5e:	697a      	ldr	r2, [r7, #20]
 800ed60:	440a      	add	r2, r1
 800ed62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ed6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ed6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	699a      	ldr	r2, [r3, #24]
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d903      	bls.n	800ed84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	68da      	ldr	r2, [r3, #12]
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	015a      	lsls	r2, r3, #5
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed90:	691b      	ldr	r3, [r3, #16]
 800ed92:	693a      	ldr	r2, [r7, #16]
 800ed94:	0151      	lsls	r1, r2, #5
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	440a      	add	r2, r1
 800ed9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eda2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	015a      	lsls	r2, r3, #5
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	4413      	add	r3, r2
 800edac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edb0:	691a      	ldr	r2, [r3, #16]
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	699b      	ldr	r3, [r3, #24]
 800edb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800edba:	6939      	ldr	r1, [r7, #16]
 800edbc:	0148      	lsls	r0, r1, #5
 800edbe:	6979      	ldr	r1, [r7, #20]
 800edc0:	4401      	add	r1, r0
 800edc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800edc6:	4313      	orrs	r3, r2
 800edc8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800edca:	79fb      	ldrb	r3, [r7, #7]
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d11e      	bne.n	800ee0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	695b      	ldr	r3, [r3, #20]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d009      	beq.n	800edec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	015a      	lsls	r2, r3, #5
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	4413      	add	r3, r2
 800ede0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ede4:	461a      	mov	r2, r3
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	695b      	ldr	r3, [r3, #20]
 800edea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	015a      	lsls	r2, r3, #5
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	4413      	add	r3, r2
 800edf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	693a      	ldr	r2, [r7, #16]
 800edfc:	0151      	lsls	r1, r2, #5
 800edfe:	697a      	ldr	r2, [r7, #20]
 800ee00:	440a      	add	r2, r1
 800ee02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee0a:	6013      	str	r3, [r2, #0]
 800ee0c:	e097      	b.n	800ef3e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	015a      	lsls	r2, r3, #5
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	4413      	add	r3, r2
 800ee16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	693a      	ldr	r2, [r7, #16]
 800ee1e:	0151      	lsls	r1, r2, #5
 800ee20:	697a      	ldr	r2, [r7, #20]
 800ee22:	440a      	add	r2, r1
 800ee24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	699b      	ldr	r3, [r3, #24]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f000 8083 	beq.w	800ef3e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	f003 030f 	and.w	r3, r3, #15
 800ee48:	2101      	movs	r1, #1
 800ee4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ee4e:	6979      	ldr	r1, [r7, #20]
 800ee50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee54:	4313      	orrs	r3, r2
 800ee56:	634b      	str	r3, [r1, #52]	; 0x34
 800ee58:	e071      	b.n	800ef3e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	015a      	lsls	r2, r3, #5
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	4413      	add	r3, r2
 800ee62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee66:	691b      	ldr	r3, [r3, #16]
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	0151      	lsls	r1, r2, #5
 800ee6c:	697a      	ldr	r2, [r7, #20]
 800ee6e:	440a      	add	r2, r1
 800ee70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee74:	0cdb      	lsrs	r3, r3, #19
 800ee76:	04db      	lsls	r3, r3, #19
 800ee78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	015a      	lsls	r2, r3, #5
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	4413      	add	r3, r2
 800ee82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	0151      	lsls	r1, r2, #5
 800ee8c:	697a      	ldr	r2, [r7, #20]
 800ee8e:	440a      	add	r2, r1
 800ee90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	699b      	ldr	r3, [r3, #24]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d003      	beq.n	800eeae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	68da      	ldr	r2, [r3, #12]
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	68da      	ldr	r2, [r3, #12]
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	015a      	lsls	r2, r3, #5
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	4413      	add	r3, r2
 800eebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eec2:	691b      	ldr	r3, [r3, #16]
 800eec4:	693a      	ldr	r2, [r7, #16]
 800eec6:	0151      	lsls	r1, r2, #5
 800eec8:	697a      	ldr	r2, [r7, #20]
 800eeca:	440a      	add	r2, r1
 800eecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eed4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	015a      	lsls	r2, r3, #5
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	4413      	add	r3, r2
 800eede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eee2:	691a      	ldr	r2, [r3, #16]
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	69db      	ldr	r3, [r3, #28]
 800eee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eeec:	6939      	ldr	r1, [r7, #16]
 800eeee:	0148      	lsls	r0, r1, #5
 800eef0:	6979      	ldr	r1, [r7, #20]
 800eef2:	4401      	add	r1, r0
 800eef4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eef8:	4313      	orrs	r3, r2
 800eefa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800eefc:	79fb      	ldrb	r3, [r7, #7]
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d10d      	bne.n	800ef1e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d009      	beq.n	800ef1e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	6919      	ldr	r1, [r3, #16]
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	015a      	lsls	r2, r3, #5
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	4413      	add	r3, r2
 800ef16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef1a:	460a      	mov	r2, r1
 800ef1c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	015a      	lsls	r2, r3, #5
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	4413      	add	r3, r2
 800ef26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	693a      	ldr	r2, [r7, #16]
 800ef2e:	0151      	lsls	r1, r2, #5
 800ef30:	697a      	ldr	r2, [r7, #20]
 800ef32:	440a      	add	r2, r1
 800ef34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef3e:	2300      	movs	r3, #0
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	371c      	adds	r7, #28
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr

0800ef4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b087      	sub	sp, #28
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ef56:	2300      	movs	r3, #0
 800ef58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	785b      	ldrb	r3, [r3, #1]
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d14a      	bne.n	800f000 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	015a      	lsls	r2, r3, #5
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	4413      	add	r3, r2
 800ef74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef82:	f040 8086 	bne.w	800f092 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	015a      	lsls	r2, r3, #5
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	4413      	add	r3, r2
 800ef90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	7812      	ldrb	r2, [r2, #0]
 800ef9a:	0151      	lsls	r1, r2, #5
 800ef9c:	693a      	ldr	r2, [r7, #16]
 800ef9e:	440a      	add	r2, r1
 800efa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800efa8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	015a      	lsls	r2, r3, #5
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	4413      	add	r3, r2
 800efb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	7812      	ldrb	r2, [r2, #0]
 800efbe:	0151      	lsls	r1, r2, #5
 800efc0:	693a      	ldr	r2, [r7, #16]
 800efc2:	440a      	add	r2, r1
 800efc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800efcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3301      	adds	r3, #1
 800efd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f242 7210 	movw	r2, #10000	; 0x2710
 800efda:	4293      	cmp	r3, r2
 800efdc:	d902      	bls.n	800efe4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800efde:	2301      	movs	r3, #1
 800efe0:	75fb      	strb	r3, [r7, #23]
          break;
 800efe2:	e056      	b.n	800f092 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	015a      	lsls	r2, r3, #5
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	4413      	add	r3, r2
 800efee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800effc:	d0e7      	beq.n	800efce <USB_EPStopXfer+0x82>
 800effe:	e048      	b.n	800f092 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	015a      	lsls	r2, r3, #5
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	4413      	add	r3, r2
 800f00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f018:	d13b      	bne.n	800f092 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	015a      	lsls	r2, r3, #5
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	4413      	add	r3, r2
 800f024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	7812      	ldrb	r2, [r2, #0]
 800f02e:	0151      	lsls	r1, r2, #5
 800f030:	693a      	ldr	r2, [r7, #16]
 800f032:	440a      	add	r2, r1
 800f034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f038:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f03c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	015a      	lsls	r2, r3, #5
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	4413      	add	r3, r2
 800f048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	683a      	ldr	r2, [r7, #0]
 800f050:	7812      	ldrb	r2, [r2, #0]
 800f052:	0151      	lsls	r1, r2, #5
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	440a      	add	r2, r1
 800f058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f05c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f060:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	3301      	adds	r3, #1
 800f066:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f242 7210 	movw	r2, #10000	; 0x2710
 800f06e:	4293      	cmp	r3, r2
 800f070:	d902      	bls.n	800f078 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f072:	2301      	movs	r3, #1
 800f074:	75fb      	strb	r3, [r7, #23]
          break;
 800f076:	e00c      	b.n	800f092 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	015a      	lsls	r2, r3, #5
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	4413      	add	r3, r2
 800f082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f08c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f090:	d0e7      	beq.n	800f062 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f092:	7dfb      	ldrb	r3, [r7, #23]
}
 800f094:	4618      	mov	r0, r3
 800f096:	371c      	adds	r7, #28
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b089      	sub	sp, #36	; 0x24
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	4611      	mov	r1, r2
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	71fb      	strb	r3, [r7, #7]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f0be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d123      	bne.n	800f10e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f0c6:	88bb      	ldrh	r3, [r7, #4]
 800f0c8:	3303      	adds	r3, #3
 800f0ca:	089b      	lsrs	r3, r3, #2
 800f0cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	61bb      	str	r3, [r7, #24]
 800f0d2:	e018      	b.n	800f106 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f0d4:	79fb      	ldrb	r3, [r7, #7]
 800f0d6:	031a      	lsls	r2, r3, #12
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	4413      	add	r3, r2
 800f0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	3301      	adds	r3, #1
 800f104:	61bb      	str	r3, [r7, #24]
 800f106:	69ba      	ldr	r2, [r7, #24]
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d3e2      	bcc.n	800f0d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3724      	adds	r7, #36	; 0x24
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b08b      	sub	sp, #44	; 0x2c
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	4613      	mov	r3, r2
 800f128:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f132:	88fb      	ldrh	r3, [r7, #6]
 800f134:	089b      	lsrs	r3, r3, #2
 800f136:	b29b      	uxth	r3, r3
 800f138:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f13a:	88fb      	ldrh	r3, [r7, #6]
 800f13c:	f003 0303 	and.w	r3, r3, #3
 800f140:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f142:	2300      	movs	r3, #0
 800f144:	623b      	str	r3, [r7, #32]
 800f146:	e014      	b.n	800f172 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	601a      	str	r2, [r3, #0]
    pDest++;
 800f154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f156:	3301      	adds	r3, #1
 800f158:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	3301      	adds	r3, #1
 800f15e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	3301      	adds	r3, #1
 800f164:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f168:	3301      	adds	r3, #1
 800f16a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f16c:	6a3b      	ldr	r3, [r7, #32]
 800f16e:	3301      	adds	r3, #1
 800f170:	623b      	str	r3, [r7, #32]
 800f172:	6a3a      	ldr	r2, [r7, #32]
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	429a      	cmp	r2, r3
 800f178:	d3e6      	bcc.n	800f148 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f17a:	8bfb      	ldrh	r3, [r7, #30]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d01e      	beq.n	800f1be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f180:	2300      	movs	r3, #0
 800f182:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f18a:	461a      	mov	r2, r3
 800f18c:	f107 0310 	add.w	r3, r7, #16
 800f190:	6812      	ldr	r2, [r2, #0]
 800f192:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f194:	693a      	ldr	r2, [r7, #16]
 800f196:	6a3b      	ldr	r3, [r7, #32]
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	00db      	lsls	r3, r3, #3
 800f19c:	fa22 f303 	lsr.w	r3, r2, r3
 800f1a0:	b2da      	uxtb	r2, r3
 800f1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a4:	701a      	strb	r2, [r3, #0]
      i++;
 800f1a6:	6a3b      	ldr	r3, [r7, #32]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f1b2:	8bfb      	ldrh	r3, [r7, #30]
 800f1b4:	3b01      	subs	r3, #1
 800f1b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f1b8:	8bfb      	ldrh	r3, [r7, #30]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1ea      	bne.n	800f194 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	372c      	adds	r7, #44	; 0x2c
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr

0800f1cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b085      	sub	sp, #20
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	785b      	ldrb	r3, [r3, #1]
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d12c      	bne.n	800f242 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	015a      	lsls	r2, r3, #5
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	db12      	blt.n	800f220 <USB_EPSetStall+0x54>
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00f      	beq.n	800f220 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	015a      	lsls	r2, r3, #5
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	4413      	add	r3, r2
 800f208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	0151      	lsls	r1, r2, #5
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	440a      	add	r2, r1
 800f216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f21a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f21e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	015a      	lsls	r2, r3, #5
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	4413      	add	r3, r2
 800f228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	0151      	lsls	r1, r2, #5
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	440a      	add	r2, r1
 800f236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f23a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f23e:	6013      	str	r3, [r2, #0]
 800f240:	e02b      	b.n	800f29a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	015a      	lsls	r2, r3, #5
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	4413      	add	r3, r2
 800f24a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	db12      	blt.n	800f27a <USB_EPSetStall+0xae>
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d00f      	beq.n	800f27a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	015a      	lsls	r2, r3, #5
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	4413      	add	r3, r2
 800f262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	0151      	lsls	r1, r2, #5
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	440a      	add	r2, r1
 800f270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f278:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	015a      	lsls	r2, r3, #5
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	4413      	add	r3, r2
 800f282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68ba      	ldr	r2, [r7, #8]
 800f28a:	0151      	lsls	r1, r2, #5
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	440a      	add	r2, r1
 800f290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f298:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3714      	adds	r7, #20
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	785b      	ldrb	r3, [r3, #1]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d128      	bne.n	800f316 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	015a      	lsls	r2, r3, #5
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	4413      	add	r3, r2
 800f2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	0151      	lsls	r1, r2, #5
 800f2d6:	68fa      	ldr	r2, [r7, #12]
 800f2d8:	440a      	add	r2, r1
 800f2da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f2e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	791b      	ldrb	r3, [r3, #4]
 800f2e8:	2b03      	cmp	r3, #3
 800f2ea:	d003      	beq.n	800f2f4 <USB_EPClearStall+0x4c>
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	791b      	ldrb	r3, [r3, #4]
 800f2f0:	2b02      	cmp	r3, #2
 800f2f2:	d138      	bne.n	800f366 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	015a      	lsls	r2, r3, #5
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	0151      	lsls	r1, r2, #5
 800f306:	68fa      	ldr	r2, [r7, #12]
 800f308:	440a      	add	r2, r1
 800f30a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f30e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	e027      	b.n	800f366 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	015a      	lsls	r2, r3, #5
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	4413      	add	r3, r2
 800f31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	68ba      	ldr	r2, [r7, #8]
 800f326:	0151      	lsls	r1, r2, #5
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	440a      	add	r2, r1
 800f32c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f330:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f334:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	791b      	ldrb	r3, [r3, #4]
 800f33a:	2b03      	cmp	r3, #3
 800f33c:	d003      	beq.n	800f346 <USB_EPClearStall+0x9e>
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	791b      	ldrb	r3, [r3, #4]
 800f342:	2b02      	cmp	r3, #2
 800f344:	d10f      	bne.n	800f366 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	015a      	lsls	r2, r3, #5
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	4413      	add	r3, r2
 800f34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	0151      	lsls	r1, r2, #5
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	440a      	add	r2, r1
 800f35c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f364:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f366:	2300      	movs	r3, #0
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3714      	adds	r7, #20
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr

0800f374 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f374:	b480      	push	{r7}
 800f376:	b085      	sub	sp, #20
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	460b      	mov	r3, r1
 800f37e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68fa      	ldr	r2, [r7, #12]
 800f38e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f392:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f396:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	78fb      	ldrb	r3, [r7, #3]
 800f3a2:	011b      	lsls	r3, r3, #4
 800f3a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f3a8:	68f9      	ldr	r1, [r7, #12]
 800f3aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	695b      	ldr	r3, [r3, #20]
 800f3cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	699b      	ldr	r3, [r3, #24]
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	4013      	ands	r3, r2
 800f3d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3714      	adds	r7, #20
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f3e6:	b480      	push	{r7}
 800f3e8:	b085      	sub	sp, #20
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3f8:	699b      	ldr	r3, [r3, #24]
 800f3fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f402:	69db      	ldr	r3, [r3, #28]
 800f404:	68ba      	ldr	r2, [r7, #8]
 800f406:	4013      	ands	r3, r2
 800f408:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	0c1b      	lsrs	r3, r3, #16
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3714      	adds	r7, #20
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr

0800f41a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f41a:	b480      	push	{r7}
 800f41c:	b085      	sub	sp, #20
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f42c:	699b      	ldr	r3, [r3, #24]
 800f42e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f436:	69db      	ldr	r3, [r3, #28]
 800f438:	68ba      	ldr	r2, [r7, #8]
 800f43a:	4013      	ands	r3, r2
 800f43c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	b29b      	uxth	r3, r3
}
 800f442:	4618      	mov	r0, r3
 800f444:	3714      	adds	r7, #20
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr

0800f44e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f44e:	b480      	push	{r7}
 800f450:	b085      	sub	sp, #20
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	460b      	mov	r3, r1
 800f458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f45e:	78fb      	ldrb	r3, [r7, #3]
 800f460:	015a      	lsls	r2, r3, #5
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	4413      	add	r3, r2
 800f466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f474:	695b      	ldr	r3, [r3, #20]
 800f476:	68ba      	ldr	r2, [r7, #8]
 800f478:	4013      	ands	r3, r2
 800f47a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f47c:	68bb      	ldr	r3, [r7, #8]
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3714      	adds	r7, #20
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr

0800f48a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f48a:	b480      	push	{r7}
 800f48c:	b087      	sub	sp, #28
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	460b      	mov	r3, r1
 800f494:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4a0:	691b      	ldr	r3, [r3, #16]
 800f4a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f4ae:	78fb      	ldrb	r3, [r7, #3]
 800f4b0:	f003 030f 	and.w	r3, r3, #15
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800f4ba:	01db      	lsls	r3, r3, #7
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	693a      	ldr	r2, [r7, #16]
 800f4c0:	4313      	orrs	r3, r2
 800f4c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f4c4:	78fb      	ldrb	r3, [r7, #3]
 800f4c6:	015a      	lsls	r2, r3, #5
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	693a      	ldr	r2, [r7, #16]
 800f4d4:	4013      	ands	r3, r2
 800f4d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f4d8:	68bb      	ldr	r3, [r7, #8]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	371c      	adds	r7, #28
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b083      	sub	sp, #12
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	695b      	ldr	r3, [r3, #20]
 800f4f2:	f003 0301 	and.w	r3, r3, #1
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	370c      	adds	r7, #12
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr

0800f502 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f502:	b480      	push	{r7}
 800f504:	b085      	sub	sp, #20
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	68fa      	ldr	r2, [r7, #12]
 800f518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f51c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f520:	f023 0307 	bic.w	r3, r3, #7
 800f524:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	68fa      	ldr	r2, [r7, #12]
 800f530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f538:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f53a:	2300      	movs	r3, #0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3714      	adds	r7, #20
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f548:	b480      	push	{r7}
 800f54a:	b087      	sub	sp, #28
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	460b      	mov	r3, r1
 800f552:	607a      	str	r2, [r7, #4]
 800f554:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	333c      	adds	r3, #60	; 0x3c
 800f55e:	3304      	adds	r3, #4
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	4a26      	ldr	r2, [pc, #152]	; (800f600 <USB_EP0_OutStart+0xb8>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d90a      	bls.n	800f582 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f57c:	d101      	bne.n	800f582 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f57e:	2300      	movs	r3, #0
 800f580:	e037      	b.n	800f5f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f588:	461a      	mov	r2, r3
 800f58a:	2300      	movs	r3, #0
 800f58c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f594:	691b      	ldr	r3, [r3, #16]
 800f596:	697a      	ldr	r2, [r7, #20]
 800f598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f59c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f5a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5a8:	691b      	ldr	r3, [r3, #16]
 800f5aa:	697a      	ldr	r2, [r7, #20]
 800f5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5b0:	f043 0318 	orr.w	r3, r3, #24
 800f5b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5bc:	691b      	ldr	r3, [r3, #16]
 800f5be:	697a      	ldr	r2, [r7, #20]
 800f5c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f5c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f5ca:	7afb      	ldrb	r3, [r7, #11]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d10f      	bne.n	800f5f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	697a      	ldr	r2, [r7, #20]
 800f5e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f5ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	371c      	adds	r7, #28
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	4f54300a 	.word	0x4f54300a

0800f604 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f60c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f60e:	4618      	mov	r0, r3
 800f610:	370c      	adds	r7, #12
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr

0800f61a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b084      	sub	sp, #16
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
 800f622:	460b      	mov	r3, r1
 800f624:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f626:	2300      	movs	r3, #0
 800f628:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f630:	2b00      	cmp	r3, #0
 800f632:	d009      	beq.n	800f648 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	78fa      	ldrb	r2, [r7, #3]
 800f63e:	4611      	mov	r1, r2
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	4798      	blx	r3
 800f644:	4603      	mov	r3, r0
 800f646:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f648:	7bfb      	ldrb	r3, [r7, #15]
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}

0800f652 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b084      	sub	sp, #16
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]
 800f65a:	460b      	mov	r3, r1
 800f65c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f65e:	2300      	movs	r3, #0
 800f660:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	78fa      	ldrb	r2, [r7, #3]
 800f66c:	4611      	mov	r1, r2
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	4798      	blx	r3
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d001      	beq.n	800f67c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f678:	2303      	movs	r3, #3
 800f67a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3710      	adds	r7, #16
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f686:	b580      	push	{r7, lr}
 800f688:	b084      	sub	sp, #16
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
 800f68e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f696:	6839      	ldr	r1, [r7, #0]
 800f698:	4618      	mov	r0, r3
 800f69a:	f001 f8b2 	bl	8010802 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f6ba:	f003 031f 	and.w	r3, r3, #31
 800f6be:	2b02      	cmp	r3, #2
 800f6c0:	d01a      	beq.n	800f6f8 <USBD_LL_SetupStage+0x72>
 800f6c2:	2b02      	cmp	r3, #2
 800f6c4:	d822      	bhi.n	800f70c <USBD_LL_SetupStage+0x86>
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d002      	beq.n	800f6d0 <USBD_LL_SetupStage+0x4a>
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d00a      	beq.n	800f6e4 <USBD_LL_SetupStage+0x5e>
 800f6ce:	e01d      	b.n	800f70c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f000 fb09 	bl	800fcf0 <USBD_StdDevReq>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800f6e2:	e020      	b.n	800f726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 fb71 	bl	800fdd4 <USBD_StdItfReq>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800f6f6:	e016      	b.n	800f726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f6fe:	4619      	mov	r1, r3
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 fbd3 	bl	800feac <USBD_StdEPReq>
 800f706:	4603      	mov	r3, r0
 800f708:	73fb      	strb	r3, [r7, #15]
      break;
 800f70a:	e00c      	b.n	800f726 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f712:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f716:	b2db      	uxtb	r3, r3
 800f718:	4619      	mov	r1, r3
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f002 fdd6 	bl	80122cc <USBD_LL_StallEP>
 800f720:	4603      	mov	r3, r0
 800f722:	73fb      	strb	r3, [r7, #15]
      break;
 800f724:	bf00      	nop
  }

  return ret;
 800f726:	7bfb      	ldrb	r3, [r7, #15]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3710      	adds	r7, #16
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b086      	sub	sp, #24
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	460b      	mov	r3, r1
 800f73a:	607a      	str	r2, [r7, #4]
 800f73c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f73e:	2300      	movs	r3, #0
 800f740:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f742:	7afb      	ldrb	r3, [r7, #11]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d16e      	bne.n	800f826 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f74e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f756:	2b03      	cmp	r3, #3
 800f758:	f040 8098 	bne.w	800f88c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	689a      	ldr	r2, [r3, #8]
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	429a      	cmp	r2, r3
 800f766:	d913      	bls.n	800f790 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	689a      	ldr	r2, [r3, #8]
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	1ad2      	subs	r2, r2, r3
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	68da      	ldr	r2, [r3, #12]
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	4293      	cmp	r3, r2
 800f780:	bf28      	it	cs
 800f782:	4613      	movcs	r3, r2
 800f784:	461a      	mov	r2, r3
 800f786:	6879      	ldr	r1, [r7, #4]
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f001 f8b1 	bl	80108f0 <USBD_CtlContinueRx>
 800f78e:	e07d      	b.n	800f88c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f796:	f003 031f 	and.w	r3, r3, #31
 800f79a:	2b02      	cmp	r3, #2
 800f79c:	d014      	beq.n	800f7c8 <USBD_LL_DataOutStage+0x98>
 800f79e:	2b02      	cmp	r3, #2
 800f7a0:	d81d      	bhi.n	800f7de <USBD_LL_DataOutStage+0xae>
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d002      	beq.n	800f7ac <USBD_LL_DataOutStage+0x7c>
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d003      	beq.n	800f7b2 <USBD_LL_DataOutStage+0x82>
 800f7aa:	e018      	b.n	800f7de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	75bb      	strb	r3, [r7, #22]
            break;
 800f7b0:	e018      	b.n	800f7e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f000 fa5e 	bl	800fc7e <USBD_CoreFindIF>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	75bb      	strb	r3, [r7, #22]
            break;
 800f7c6:	e00d      	b.n	800f7e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f000 fa60 	bl	800fc98 <USBD_CoreFindEP>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	75bb      	strb	r3, [r7, #22]
            break;
 800f7dc:	e002      	b.n	800f7e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	75bb      	strb	r3, [r7, #22]
            break;
 800f7e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f7e4:	7dbb      	ldrb	r3, [r7, #22]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d119      	bne.n	800f81e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d113      	bne.n	800f81e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f7f6:	7dba      	ldrb	r2, [r7, #22]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	32ae      	adds	r2, #174	; 0xae
 800f7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f800:	691b      	ldr	r3, [r3, #16]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00b      	beq.n	800f81e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f806:	7dba      	ldrb	r2, [r7, #22]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f80e:	7dba      	ldrb	r2, [r7, #22]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	32ae      	adds	r2, #174	; 0xae
 800f814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f818:	691b      	ldr	r3, [r3, #16]
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f001 f877 	bl	8010912 <USBD_CtlSendStatus>
 800f824:	e032      	b.n	800f88c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f826:	7afb      	ldrb	r3, [r7, #11]
 800f828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	4619      	mov	r1, r3
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f000 fa31 	bl	800fc98 <USBD_CoreFindEP>
 800f836:	4603      	mov	r3, r0
 800f838:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f83a:	7dbb      	ldrb	r3, [r7, #22]
 800f83c:	2bff      	cmp	r3, #255	; 0xff
 800f83e:	d025      	beq.n	800f88c <USBD_LL_DataOutStage+0x15c>
 800f840:	7dbb      	ldrb	r3, [r7, #22]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d122      	bne.n	800f88c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	2b03      	cmp	r3, #3
 800f850:	d117      	bne.n	800f882 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f852:	7dba      	ldrb	r2, [r7, #22]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	32ae      	adds	r2, #174	; 0xae
 800f858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f85c:	699b      	ldr	r3, [r3, #24]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00f      	beq.n	800f882 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f862:	7dba      	ldrb	r2, [r7, #22]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f86a:	7dba      	ldrb	r2, [r7, #22]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	32ae      	adds	r2, #174	; 0xae
 800f870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f874:	699b      	ldr	r3, [r3, #24]
 800f876:	7afa      	ldrb	r2, [r7, #11]
 800f878:	4611      	mov	r1, r2
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	4798      	blx	r3
 800f87e:	4603      	mov	r3, r0
 800f880:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f882:	7dfb      	ldrb	r3, [r7, #23]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d001      	beq.n	800f88c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f888:	7dfb      	ldrb	r3, [r7, #23]
 800f88a:	e000      	b.n	800f88e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f88c:	2300      	movs	r3, #0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3718      	adds	r7, #24
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}

0800f896 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b086      	sub	sp, #24
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	60f8      	str	r0, [r7, #12]
 800f89e:	460b      	mov	r3, r1
 800f8a0:	607a      	str	r2, [r7, #4]
 800f8a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f8a4:	7afb      	ldrb	r3, [r7, #11]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d16f      	bne.n	800f98a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	3314      	adds	r3, #20
 800f8ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f8b6:	2b02      	cmp	r3, #2
 800f8b8:	d15a      	bne.n	800f970 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	689a      	ldr	r2, [r3, #8]
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d914      	bls.n	800f8f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	689a      	ldr	r2, [r3, #8]
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	1ad2      	subs	r2, r2, r3
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	6879      	ldr	r1, [r7, #4]
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f000 fff6 	bl	80108ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	f002 fd99 	bl	8012420 <USBD_LL_PrepareReceive>
 800f8ee:	e03f      	b.n	800f970 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	68da      	ldr	r2, [r3, #12]
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	689b      	ldr	r3, [r3, #8]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d11c      	bne.n	800f936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	685a      	ldr	r2, [r3, #4]
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f904:	429a      	cmp	r2, r3
 800f906:	d316      	bcc.n	800f936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	685a      	ldr	r2, [r3, #4]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f912:	429a      	cmp	r2, r3
 800f914:	d20f      	bcs.n	800f936 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f916:	2200      	movs	r2, #0
 800f918:	2100      	movs	r1, #0
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	f000 ffd7 	bl	80108ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f928:	2300      	movs	r3, #0
 800f92a:	2200      	movs	r2, #0
 800f92c:	2100      	movs	r1, #0
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f002 fd76 	bl	8012420 <USBD_LL_PrepareReceive>
 800f934:	e01c      	b.n	800f970 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	2b03      	cmp	r3, #3
 800f940:	d10f      	bne.n	800f962 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d009      	beq.n	800f962 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2200      	movs	r2, #0
 800f952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f962:	2180      	movs	r1, #128	; 0x80
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f002 fcb1 	bl	80122cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f000 ffe4 	bl	8010938 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d03a      	beq.n	800f9f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f7ff fe42 	bl	800f604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2200      	movs	r2, #0
 800f984:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f988:	e032      	b.n	800f9f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f98a:	7afb      	ldrb	r3, [r7, #11]
 800f98c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f990:	b2db      	uxtb	r3, r3
 800f992:	4619      	mov	r1, r3
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f000 f97f 	bl	800fc98 <USBD_CoreFindEP>
 800f99a:	4603      	mov	r3, r0
 800f99c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f99e:	7dfb      	ldrb	r3, [r7, #23]
 800f9a0:	2bff      	cmp	r3, #255	; 0xff
 800f9a2:	d025      	beq.n	800f9f0 <USBD_LL_DataInStage+0x15a>
 800f9a4:	7dfb      	ldrb	r3, [r7, #23]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d122      	bne.n	800f9f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	d11c      	bne.n	800f9f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f9b6:	7dfa      	ldrb	r2, [r7, #23]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	32ae      	adds	r2, #174	; 0xae
 800f9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9c0:	695b      	ldr	r3, [r3, #20]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d014      	beq.n	800f9f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f9c6:	7dfa      	ldrb	r2, [r7, #23]
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f9ce:	7dfa      	ldrb	r2, [r7, #23]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	32ae      	adds	r2, #174	; 0xae
 800f9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	7afa      	ldrb	r2, [r7, #11]
 800f9dc:	4611      	mov	r1, r2
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	4798      	blx	r3
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f9e6:	7dbb      	ldrb	r3, [r7, #22]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d001      	beq.n	800f9f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f9ec:	7dbb      	ldrb	r3, [r7, #22]
 800f9ee:	e000      	b.n	800f9f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3718      	adds	r7, #24
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa02:	2300      	movs	r3, #0
 800fa04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d014      	beq.n	800fa60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00e      	beq.n	800fa60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	6852      	ldr	r2, [r2, #4]
 800fa4e:	b2d2      	uxtb	r2, r2
 800fa50:	4611      	mov	r1, r2
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	4798      	blx	r3
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d001      	beq.n	800fa60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fa5c:	2303      	movs	r3, #3
 800fa5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa60:	2340      	movs	r3, #64	; 0x40
 800fa62:	2200      	movs	r2, #0
 800fa64:	2100      	movs	r1, #0
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f002 fc0a 	bl	8012280 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2240      	movs	r2, #64	; 0x40
 800fa78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa7c:	2340      	movs	r3, #64	; 0x40
 800fa7e:	2200      	movs	r2, #0
 800fa80:	2180      	movs	r1, #128	; 0x80
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f002 fbfc 	bl	8012280 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2240      	movs	r2, #64	; 0x40
 800fa92:	621a      	str	r2, [r3, #32]

  return ret;
 800fa94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3710      	adds	r7, #16
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b083      	sub	sp, #12
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
 800faa6:	460b      	mov	r3, r1
 800faa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	78fa      	ldrb	r2, [r7, #3]
 800faae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fab0:	2300      	movs	r3, #0
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	370c      	adds	r7, #12
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr

0800fabe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fabe:	b480      	push	{r7}
 800fac0:	b083      	sub	sp, #12
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800facc:	b2da      	uxtb	r2, r3
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2204      	movs	r2, #4
 800fad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	370c      	adds	r7, #12
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800faea:	b480      	push	{r7}
 800faec:	b083      	sub	sp, #12
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	2b04      	cmp	r3, #4
 800fafc:	d106      	bne.n	800fb0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fb04:	b2da      	uxtb	r2, r3
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	370c      	adds	r7, #12
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr

0800fb1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b082      	sub	sp, #8
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	2b03      	cmp	r3, #3
 800fb2c:	d110      	bne.n	800fb50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00b      	beq.n	800fb50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb3e:	69db      	ldr	r3, [r3, #28]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d005      	beq.n	800fb50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb4a:	69db      	ldr	r3, [r3, #28]
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fb50:	2300      	movs	r3, #0
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b082      	sub	sp, #8
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	460b      	mov	r3, r1
 800fb64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	32ae      	adds	r2, #174	; 0xae
 800fb70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d101      	bne.n	800fb7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fb78:	2303      	movs	r3, #3
 800fb7a:	e01c      	b.n	800fbb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	2b03      	cmp	r3, #3
 800fb86:	d115      	bne.n	800fbb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	32ae      	adds	r2, #174	; 0xae
 800fb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb96:	6a1b      	ldr	r3, [r3, #32]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d00b      	beq.n	800fbb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	32ae      	adds	r2, #174	; 0xae
 800fba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbaa:	6a1b      	ldr	r3, [r3, #32]
 800fbac:	78fa      	ldrb	r2, [r7, #3]
 800fbae:	4611      	mov	r1, r2
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fbb4:	2300      	movs	r3, #0
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b082      	sub	sp, #8
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	32ae      	adds	r2, #174	; 0xae
 800fbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d101      	bne.n	800fbe0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fbdc:	2303      	movs	r3, #3
 800fbde:	e01c      	b.n	800fc1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	2b03      	cmp	r3, #3
 800fbea:	d115      	bne.n	800fc18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	32ae      	adds	r2, #174	; 0xae
 800fbf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00b      	beq.n	800fc18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	32ae      	adds	r2, #174	; 0xae
 800fc0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc10:	78fa      	ldrb	r2, [r7, #3]
 800fc12:	4611      	mov	r1, r2
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc18:	2300      	movs	r3, #0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fc22:	b480      	push	{r7}
 800fc24:	b083      	sub	sp, #12
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fc40:	2300      	movs	r3, #0
 800fc42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2201      	movs	r2, #1
 800fc48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00e      	beq.n	800fc74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	6852      	ldr	r2, [r2, #4]
 800fc62:	b2d2      	uxtb	r2, r2
 800fc64:	4611      	mov	r1, r2
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	4798      	blx	r3
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d001      	beq.n	800fc74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fc70:	2303      	movs	r3, #3
 800fc72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fc7e:	b480      	push	{r7}
 800fc80:	b083      	sub	sp, #12
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	460b      	mov	r3, r1
 800fc88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fc8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	370c      	adds	r7, #12
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fca4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	370c      	adds	r7, #12
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr

0800fcb2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fcb2:	b480      	push	{r7}
 800fcb4:	b087      	sub	sp, #28
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fcd0:	8a3b      	ldrh	r3, [r7, #16]
 800fcd2:	021b      	lsls	r3, r3, #8
 800fcd4:	b21a      	sxth	r2, r3
 800fcd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	b21b      	sxth	r3, r3
 800fcde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fce0:	89fb      	ldrh	r3, [r7, #14]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	371c      	adds	r7, #28
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
	...

0800fcf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd06:	2b40      	cmp	r3, #64	; 0x40
 800fd08:	d005      	beq.n	800fd16 <USBD_StdDevReq+0x26>
 800fd0a:	2b40      	cmp	r3, #64	; 0x40
 800fd0c:	d857      	bhi.n	800fdbe <USBD_StdDevReq+0xce>
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d00f      	beq.n	800fd32 <USBD_StdDevReq+0x42>
 800fd12:	2b20      	cmp	r3, #32
 800fd14:	d153      	bne.n	800fdbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	32ae      	adds	r2, #174	; 0xae
 800fd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	6839      	ldr	r1, [r7, #0]
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	4798      	blx	r3
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	73fb      	strb	r3, [r7, #15]
      break;
 800fd30:	e04a      	b.n	800fdc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	785b      	ldrb	r3, [r3, #1]
 800fd36:	2b09      	cmp	r3, #9
 800fd38:	d83b      	bhi.n	800fdb2 <USBD_StdDevReq+0xc2>
 800fd3a:	a201      	add	r2, pc, #4	; (adr r2, 800fd40 <USBD_StdDevReq+0x50>)
 800fd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd40:	0800fd95 	.word	0x0800fd95
 800fd44:	0800fda9 	.word	0x0800fda9
 800fd48:	0800fdb3 	.word	0x0800fdb3
 800fd4c:	0800fd9f 	.word	0x0800fd9f
 800fd50:	0800fdb3 	.word	0x0800fdb3
 800fd54:	0800fd73 	.word	0x0800fd73
 800fd58:	0800fd69 	.word	0x0800fd69
 800fd5c:	0800fdb3 	.word	0x0800fdb3
 800fd60:	0800fd8b 	.word	0x0800fd8b
 800fd64:	0800fd7d 	.word	0x0800fd7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fd68:	6839      	ldr	r1, [r7, #0]
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 fa3c 	bl	80101e8 <USBD_GetDescriptor>
          break;
 800fd70:	e024      	b.n	800fdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fd72:	6839      	ldr	r1, [r7, #0]
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 fba1 	bl	80104bc <USBD_SetAddress>
          break;
 800fd7a:	e01f      	b.n	800fdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fd7c:	6839      	ldr	r1, [r7, #0]
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f000 fbe0 	bl	8010544 <USBD_SetConfig>
 800fd84:	4603      	mov	r3, r0
 800fd86:	73fb      	strb	r3, [r7, #15]
          break;
 800fd88:	e018      	b.n	800fdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fd8a:	6839      	ldr	r1, [r7, #0]
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 fc83 	bl	8010698 <USBD_GetConfig>
          break;
 800fd92:	e013      	b.n	800fdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fd94:	6839      	ldr	r1, [r7, #0]
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 fcb4 	bl	8010704 <USBD_GetStatus>
          break;
 800fd9c:	e00e      	b.n	800fdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fd9e:	6839      	ldr	r1, [r7, #0]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fce3 	bl	801076c <USBD_SetFeature>
          break;
 800fda6:	e009      	b.n	800fdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fd07 	bl	80107be <USBD_ClrFeature>
          break;
 800fdb0:	e004      	b.n	800fdbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fdb2:	6839      	ldr	r1, [r7, #0]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 fd5e 	bl	8010876 <USBD_CtlError>
          break;
 800fdba:	bf00      	nop
      }
      break;
 800fdbc:	e004      	b.n	800fdc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fdbe:	6839      	ldr	r1, [r7, #0]
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f000 fd58 	bl	8010876 <USBD_CtlError>
      break;
 800fdc6:	bf00      	nop
  }

  return ret;
 800fdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3710      	adds	r7, #16
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop

0800fdd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdde:	2300      	movs	r3, #0
 800fde0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fdea:	2b40      	cmp	r3, #64	; 0x40
 800fdec:	d005      	beq.n	800fdfa <USBD_StdItfReq+0x26>
 800fdee:	2b40      	cmp	r3, #64	; 0x40
 800fdf0:	d852      	bhi.n	800fe98 <USBD_StdItfReq+0xc4>
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d001      	beq.n	800fdfa <USBD_StdItfReq+0x26>
 800fdf6:	2b20      	cmp	r3, #32
 800fdf8:	d14e      	bne.n	800fe98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	3b01      	subs	r3, #1
 800fe04:	2b02      	cmp	r3, #2
 800fe06:	d840      	bhi.n	800fe8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	889b      	ldrh	r3, [r3, #4]
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d836      	bhi.n	800fe80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	889b      	ldrh	r3, [r3, #4]
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	4619      	mov	r1, r3
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7ff ff2f 	bl	800fc7e <USBD_CoreFindIF>
 800fe20:	4603      	mov	r3, r0
 800fe22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fe24:	7bbb      	ldrb	r3, [r7, #14]
 800fe26:	2bff      	cmp	r3, #255	; 0xff
 800fe28:	d01d      	beq.n	800fe66 <USBD_StdItfReq+0x92>
 800fe2a:	7bbb      	ldrb	r3, [r7, #14]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d11a      	bne.n	800fe66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800fe30:	7bba      	ldrb	r2, [r7, #14]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	32ae      	adds	r2, #174	; 0xae
 800fe36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00f      	beq.n	800fe60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fe40:	7bba      	ldrb	r2, [r7, #14]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fe48:	7bba      	ldrb	r2, [r7, #14]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	32ae      	adds	r2, #174	; 0xae
 800fe4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe52:	689b      	ldr	r3, [r3, #8]
 800fe54:	6839      	ldr	r1, [r7, #0]
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	4798      	blx	r3
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fe5e:	e004      	b.n	800fe6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800fe60:	2303      	movs	r3, #3
 800fe62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fe64:	e001      	b.n	800fe6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fe66:	2303      	movs	r3, #3
 800fe68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	88db      	ldrh	r3, [r3, #6]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d110      	bne.n	800fe94 <USBD_StdItfReq+0xc0>
 800fe72:	7bfb      	ldrb	r3, [r7, #15]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d10d      	bne.n	800fe94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 fd4a 	bl	8010912 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fe7e:	e009      	b.n	800fe94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fe80:	6839      	ldr	r1, [r7, #0]
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fcf7 	bl	8010876 <USBD_CtlError>
          break;
 800fe88:	e004      	b.n	800fe94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fe8a:	6839      	ldr	r1, [r7, #0]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f000 fcf2 	bl	8010876 <USBD_CtlError>
          break;
 800fe92:	e000      	b.n	800fe96 <USBD_StdItfReq+0xc2>
          break;
 800fe94:	bf00      	nop
      }
      break;
 800fe96:	e004      	b.n	800fea2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800fe98:	6839      	ldr	r1, [r7, #0]
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fceb 	bl	8010876 <USBD_CtlError>
      break;
 800fea0:	bf00      	nop
  }

  return ret;
 800fea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3710      	adds	r7, #16
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800feb6:	2300      	movs	r3, #0
 800feb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	889b      	ldrh	r3, [r3, #4]
 800febe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fec8:	2b40      	cmp	r3, #64	; 0x40
 800feca:	d007      	beq.n	800fedc <USBD_StdEPReq+0x30>
 800fecc:	2b40      	cmp	r3, #64	; 0x40
 800fece:	f200 817f 	bhi.w	80101d0 <USBD_StdEPReq+0x324>
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d02a      	beq.n	800ff2c <USBD_StdEPReq+0x80>
 800fed6:	2b20      	cmp	r3, #32
 800fed8:	f040 817a 	bne.w	80101d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800fedc:	7bbb      	ldrb	r3, [r7, #14]
 800fede:	4619      	mov	r1, r3
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7ff fed9 	bl	800fc98 <USBD_CoreFindEP>
 800fee6:	4603      	mov	r3, r0
 800fee8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800feea:	7b7b      	ldrb	r3, [r7, #13]
 800feec:	2bff      	cmp	r3, #255	; 0xff
 800feee:	f000 8174 	beq.w	80101da <USBD_StdEPReq+0x32e>
 800fef2:	7b7b      	ldrb	r3, [r7, #13]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f040 8170 	bne.w	80101da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800fefa:	7b7a      	ldrb	r2, [r7, #13]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ff02:	7b7a      	ldrb	r2, [r7, #13]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	32ae      	adds	r2, #174	; 0xae
 800ff08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	f000 8163 	beq.w	80101da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ff14:	7b7a      	ldrb	r2, [r7, #13]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	32ae      	adds	r2, #174	; 0xae
 800ff1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	6839      	ldr	r1, [r7, #0]
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	4798      	blx	r3
 800ff26:	4603      	mov	r3, r0
 800ff28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ff2a:	e156      	b.n	80101da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	785b      	ldrb	r3, [r3, #1]
 800ff30:	2b03      	cmp	r3, #3
 800ff32:	d008      	beq.n	800ff46 <USBD_StdEPReq+0x9a>
 800ff34:	2b03      	cmp	r3, #3
 800ff36:	f300 8145 	bgt.w	80101c4 <USBD_StdEPReq+0x318>
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f000 809b 	beq.w	8010076 <USBD_StdEPReq+0x1ca>
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d03c      	beq.n	800ffbe <USBD_StdEPReq+0x112>
 800ff44:	e13e      	b.n	80101c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b02      	cmp	r3, #2
 800ff50:	d002      	beq.n	800ff58 <USBD_StdEPReq+0xac>
 800ff52:	2b03      	cmp	r3, #3
 800ff54:	d016      	beq.n	800ff84 <USBD_StdEPReq+0xd8>
 800ff56:	e02c      	b.n	800ffb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff58:	7bbb      	ldrb	r3, [r7, #14]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d00d      	beq.n	800ff7a <USBD_StdEPReq+0xce>
 800ff5e:	7bbb      	ldrb	r3, [r7, #14]
 800ff60:	2b80      	cmp	r3, #128	; 0x80
 800ff62:	d00a      	beq.n	800ff7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
 800ff66:	4619      	mov	r1, r3
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f002 f9af 	bl	80122cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff6e:	2180      	movs	r1, #128	; 0x80
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f002 f9ab 	bl	80122cc <USBD_LL_StallEP>
 800ff76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ff78:	e020      	b.n	800ffbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ff7a:	6839      	ldr	r1, [r7, #0]
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f000 fc7a 	bl	8010876 <USBD_CtlError>
              break;
 800ff82:	e01b      	b.n	800ffbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	885b      	ldrh	r3, [r3, #2]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d10e      	bne.n	800ffaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ff8c:	7bbb      	ldrb	r3, [r7, #14]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d00b      	beq.n	800ffaa <USBD_StdEPReq+0xfe>
 800ff92:	7bbb      	ldrb	r3, [r7, #14]
 800ff94:	2b80      	cmp	r3, #128	; 0x80
 800ff96:	d008      	beq.n	800ffaa <USBD_StdEPReq+0xfe>
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	88db      	ldrh	r3, [r3, #6]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d104      	bne.n	800ffaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ffa0:	7bbb      	ldrb	r3, [r7, #14]
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f002 f991 	bl	80122cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 fcb1 	bl	8010912 <USBD_CtlSendStatus>

              break;
 800ffb0:	e004      	b.n	800ffbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ffb2:	6839      	ldr	r1, [r7, #0]
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 fc5e 	bl	8010876 <USBD_CtlError>
              break;
 800ffba:	bf00      	nop
          }
          break;
 800ffbc:	e107      	b.n	80101ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	2b02      	cmp	r3, #2
 800ffc8:	d002      	beq.n	800ffd0 <USBD_StdEPReq+0x124>
 800ffca:	2b03      	cmp	r3, #3
 800ffcc:	d016      	beq.n	800fffc <USBD_StdEPReq+0x150>
 800ffce:	e04b      	b.n	8010068 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ffd0:	7bbb      	ldrb	r3, [r7, #14]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00d      	beq.n	800fff2 <USBD_StdEPReq+0x146>
 800ffd6:	7bbb      	ldrb	r3, [r7, #14]
 800ffd8:	2b80      	cmp	r3, #128	; 0x80
 800ffda:	d00a      	beq.n	800fff2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ffdc:	7bbb      	ldrb	r3, [r7, #14]
 800ffde:	4619      	mov	r1, r3
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f002 f973 	bl	80122cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffe6:	2180      	movs	r1, #128	; 0x80
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f002 f96f 	bl	80122cc <USBD_LL_StallEP>
 800ffee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fff0:	e040      	b.n	8010074 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fff2:	6839      	ldr	r1, [r7, #0]
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 fc3e 	bl	8010876 <USBD_CtlError>
              break;
 800fffa:	e03b      	b.n	8010074 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	885b      	ldrh	r3, [r3, #2]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d136      	bne.n	8010072 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010004:	7bbb      	ldrb	r3, [r7, #14]
 8010006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801000a:	2b00      	cmp	r3, #0
 801000c:	d004      	beq.n	8010018 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801000e:	7bbb      	ldrb	r3, [r7, #14]
 8010010:	4619      	mov	r1, r3
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f002 f979 	bl	801230a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 fc7a 	bl	8010912 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801001e:	7bbb      	ldrb	r3, [r7, #14]
 8010020:	4619      	mov	r1, r3
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7ff fe38 	bl	800fc98 <USBD_CoreFindEP>
 8010028:	4603      	mov	r3, r0
 801002a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801002c:	7b7b      	ldrb	r3, [r7, #13]
 801002e:	2bff      	cmp	r3, #255	; 0xff
 8010030:	d01f      	beq.n	8010072 <USBD_StdEPReq+0x1c6>
 8010032:	7b7b      	ldrb	r3, [r7, #13]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d11c      	bne.n	8010072 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010038:	7b7a      	ldrb	r2, [r7, #13]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010040:	7b7a      	ldrb	r2, [r7, #13]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	32ae      	adds	r2, #174	; 0xae
 8010046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801004a:	689b      	ldr	r3, [r3, #8]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d010      	beq.n	8010072 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010050:	7b7a      	ldrb	r2, [r7, #13]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	32ae      	adds	r2, #174	; 0xae
 8010056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	6839      	ldr	r1, [r7, #0]
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	4798      	blx	r3
 8010062:	4603      	mov	r3, r0
 8010064:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010066:	e004      	b.n	8010072 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010068:	6839      	ldr	r1, [r7, #0]
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 fc03 	bl	8010876 <USBD_CtlError>
              break;
 8010070:	e000      	b.n	8010074 <USBD_StdEPReq+0x1c8>
              break;
 8010072:	bf00      	nop
          }
          break;
 8010074:	e0ab      	b.n	80101ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801007c:	b2db      	uxtb	r3, r3
 801007e:	2b02      	cmp	r3, #2
 8010080:	d002      	beq.n	8010088 <USBD_StdEPReq+0x1dc>
 8010082:	2b03      	cmp	r3, #3
 8010084:	d032      	beq.n	80100ec <USBD_StdEPReq+0x240>
 8010086:	e097      	b.n	80101b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010088:	7bbb      	ldrb	r3, [r7, #14]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d007      	beq.n	801009e <USBD_StdEPReq+0x1f2>
 801008e:	7bbb      	ldrb	r3, [r7, #14]
 8010090:	2b80      	cmp	r3, #128	; 0x80
 8010092:	d004      	beq.n	801009e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 fbed 	bl	8010876 <USBD_CtlError>
                break;
 801009c:	e091      	b.n	80101c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801009e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	da0b      	bge.n	80100be <USBD_StdEPReq+0x212>
 80100a6:	7bbb      	ldrb	r3, [r7, #14]
 80100a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80100ac:	4613      	mov	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	4413      	add	r3, r2
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	3310      	adds	r3, #16
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	4413      	add	r3, r2
 80100ba:	3304      	adds	r3, #4
 80100bc:	e00b      	b.n	80100d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80100be:	7bbb      	ldrb	r3, [r7, #14]
 80100c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80100c4:	4613      	mov	r3, r2
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	4413      	add	r3, r2
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	4413      	add	r3, r2
 80100d4:	3304      	adds	r3, #4
 80100d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	2200      	movs	r2, #0
 80100dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	2202      	movs	r2, #2
 80100e2:	4619      	mov	r1, r3
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 fbd7 	bl	8010898 <USBD_CtlSendData>
              break;
 80100ea:	e06a      	b.n	80101c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80100ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	da11      	bge.n	8010118 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80100f4:	7bbb      	ldrb	r3, [r7, #14]
 80100f6:	f003 020f 	and.w	r2, r3, #15
 80100fa:	6879      	ldr	r1, [r7, #4]
 80100fc:	4613      	mov	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	4413      	add	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	440b      	add	r3, r1
 8010106:	3324      	adds	r3, #36	; 0x24
 8010108:	881b      	ldrh	r3, [r3, #0]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d117      	bne.n	801013e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801010e:	6839      	ldr	r1, [r7, #0]
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fbb0 	bl	8010876 <USBD_CtlError>
                  break;
 8010116:	e054      	b.n	80101c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010118:	7bbb      	ldrb	r3, [r7, #14]
 801011a:	f003 020f 	and.w	r2, r3, #15
 801011e:	6879      	ldr	r1, [r7, #4]
 8010120:	4613      	mov	r3, r2
 8010122:	009b      	lsls	r3, r3, #2
 8010124:	4413      	add	r3, r2
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	440b      	add	r3, r1
 801012a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801012e:	881b      	ldrh	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d104      	bne.n	801013e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010134:	6839      	ldr	r1, [r7, #0]
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 fb9d 	bl	8010876 <USBD_CtlError>
                  break;
 801013c:	e041      	b.n	80101c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801013e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010142:	2b00      	cmp	r3, #0
 8010144:	da0b      	bge.n	801015e <USBD_StdEPReq+0x2b2>
 8010146:	7bbb      	ldrb	r3, [r7, #14]
 8010148:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801014c:	4613      	mov	r3, r2
 801014e:	009b      	lsls	r3, r3, #2
 8010150:	4413      	add	r3, r2
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	3310      	adds	r3, #16
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	4413      	add	r3, r2
 801015a:	3304      	adds	r3, #4
 801015c:	e00b      	b.n	8010176 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801015e:	7bbb      	ldrb	r3, [r7, #14]
 8010160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010164:	4613      	mov	r3, r2
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	4413      	add	r3, r2
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	4413      	add	r3, r2
 8010174:	3304      	adds	r3, #4
 8010176:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010178:	7bbb      	ldrb	r3, [r7, #14]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d002      	beq.n	8010184 <USBD_StdEPReq+0x2d8>
 801017e:	7bbb      	ldrb	r3, [r7, #14]
 8010180:	2b80      	cmp	r3, #128	; 0x80
 8010182:	d103      	bne.n	801018c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	2200      	movs	r2, #0
 8010188:	601a      	str	r2, [r3, #0]
 801018a:	e00e      	b.n	80101aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801018c:	7bbb      	ldrb	r3, [r7, #14]
 801018e:	4619      	mov	r1, r3
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f002 f8d9 	bl	8012348 <USBD_LL_IsStallEP>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d003      	beq.n	80101a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	2201      	movs	r2, #1
 80101a0:	601a      	str	r2, [r3, #0]
 80101a2:	e002      	b.n	80101aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	2200      	movs	r2, #0
 80101a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	2202      	movs	r2, #2
 80101ae:	4619      	mov	r1, r3
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 fb71 	bl	8010898 <USBD_CtlSendData>
              break;
 80101b6:	e004      	b.n	80101c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80101b8:	6839      	ldr	r1, [r7, #0]
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 fb5b 	bl	8010876 <USBD_CtlError>
              break;
 80101c0:	bf00      	nop
          }
          break;
 80101c2:	e004      	b.n	80101ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80101c4:	6839      	ldr	r1, [r7, #0]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 fb55 	bl	8010876 <USBD_CtlError>
          break;
 80101cc:	bf00      	nop
      }
      break;
 80101ce:	e005      	b.n	80101dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80101d0:	6839      	ldr	r1, [r7, #0]
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 fb4f 	bl	8010876 <USBD_CtlError>
      break;
 80101d8:	e000      	b.n	80101dc <USBD_StdEPReq+0x330>
      break;
 80101da:	bf00      	nop
  }

  return ret;
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3710      	adds	r7, #16
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
	...

080101e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80101f2:	2300      	movs	r3, #0
 80101f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80101f6:	2300      	movs	r3, #0
 80101f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80101fa:	2300      	movs	r3, #0
 80101fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	885b      	ldrh	r3, [r3, #2]
 8010202:	0a1b      	lsrs	r3, r3, #8
 8010204:	b29b      	uxth	r3, r3
 8010206:	3b01      	subs	r3, #1
 8010208:	2b06      	cmp	r3, #6
 801020a:	f200 8128 	bhi.w	801045e <USBD_GetDescriptor+0x276>
 801020e:	a201      	add	r2, pc, #4	; (adr r2, 8010214 <USBD_GetDescriptor+0x2c>)
 8010210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010214:	08010231 	.word	0x08010231
 8010218:	08010249 	.word	0x08010249
 801021c:	08010289 	.word	0x08010289
 8010220:	0801045f 	.word	0x0801045f
 8010224:	0801045f 	.word	0x0801045f
 8010228:	080103ff 	.word	0x080103ff
 801022c:	0801042b 	.word	0x0801042b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	7c12      	ldrb	r2, [r2, #16]
 801023c:	f107 0108 	add.w	r1, r7, #8
 8010240:	4610      	mov	r0, r2
 8010242:	4798      	blx	r3
 8010244:	60f8      	str	r0, [r7, #12]
      break;
 8010246:	e112      	b.n	801046e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	7c1b      	ldrb	r3, [r3, #16]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d10d      	bne.n	801026c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010258:	f107 0208 	add.w	r2, r7, #8
 801025c:	4610      	mov	r0, r2
 801025e:	4798      	blx	r3
 8010260:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	3301      	adds	r3, #1
 8010266:	2202      	movs	r2, #2
 8010268:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801026a:	e100      	b.n	801046e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010274:	f107 0208 	add.w	r2, r7, #8
 8010278:	4610      	mov	r0, r2
 801027a:	4798      	blx	r3
 801027c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	3301      	adds	r3, #1
 8010282:	2202      	movs	r2, #2
 8010284:	701a      	strb	r2, [r3, #0]
      break;
 8010286:	e0f2      	b.n	801046e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	885b      	ldrh	r3, [r3, #2]
 801028c:	b2db      	uxtb	r3, r3
 801028e:	2b05      	cmp	r3, #5
 8010290:	f200 80ac 	bhi.w	80103ec <USBD_GetDescriptor+0x204>
 8010294:	a201      	add	r2, pc, #4	; (adr r2, 801029c <USBD_GetDescriptor+0xb4>)
 8010296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029a:	bf00      	nop
 801029c:	080102b5 	.word	0x080102b5
 80102a0:	080102e9 	.word	0x080102e9
 80102a4:	0801031d 	.word	0x0801031d
 80102a8:	08010351 	.word	0x08010351
 80102ac:	08010385 	.word	0x08010385
 80102b0:	080103b9 	.word	0x080103b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d00b      	beq.n	80102d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	7c12      	ldrb	r2, [r2, #16]
 80102cc:	f107 0108 	add.w	r1, r7, #8
 80102d0:	4610      	mov	r0, r2
 80102d2:	4798      	blx	r3
 80102d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102d6:	e091      	b.n	80103fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80102d8:	6839      	ldr	r1, [r7, #0]
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f000 facb 	bl	8010876 <USBD_CtlError>
            err++;
 80102e0:	7afb      	ldrb	r3, [r7, #11]
 80102e2:	3301      	adds	r3, #1
 80102e4:	72fb      	strb	r3, [r7, #11]
          break;
 80102e6:	e089      	b.n	80103fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00b      	beq.n	801030c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	7c12      	ldrb	r2, [r2, #16]
 8010300:	f107 0108 	add.w	r1, r7, #8
 8010304:	4610      	mov	r0, r2
 8010306:	4798      	blx	r3
 8010308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801030a:	e077      	b.n	80103fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801030c:	6839      	ldr	r1, [r7, #0]
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 fab1 	bl	8010876 <USBD_CtlError>
            err++;
 8010314:	7afb      	ldrb	r3, [r7, #11]
 8010316:	3301      	adds	r3, #1
 8010318:	72fb      	strb	r3, [r7, #11]
          break;
 801031a:	e06f      	b.n	80103fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d00b      	beq.n	8010340 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	7c12      	ldrb	r2, [r2, #16]
 8010334:	f107 0108 	add.w	r1, r7, #8
 8010338:	4610      	mov	r0, r2
 801033a:	4798      	blx	r3
 801033c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801033e:	e05d      	b.n	80103fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010340:	6839      	ldr	r1, [r7, #0]
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f000 fa97 	bl	8010876 <USBD_CtlError>
            err++;
 8010348:	7afb      	ldrb	r3, [r7, #11]
 801034a:	3301      	adds	r3, #1
 801034c:	72fb      	strb	r3, [r7, #11]
          break;
 801034e:	e055      	b.n	80103fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d00b      	beq.n	8010374 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	7c12      	ldrb	r2, [r2, #16]
 8010368:	f107 0108 	add.w	r1, r7, #8
 801036c:	4610      	mov	r0, r2
 801036e:	4798      	blx	r3
 8010370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010372:	e043      	b.n	80103fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010374:	6839      	ldr	r1, [r7, #0]
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 fa7d 	bl	8010876 <USBD_CtlError>
            err++;
 801037c:	7afb      	ldrb	r3, [r7, #11]
 801037e:	3301      	adds	r3, #1
 8010380:	72fb      	strb	r3, [r7, #11]
          break;
 8010382:	e03b      	b.n	80103fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801038a:	695b      	ldr	r3, [r3, #20]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00b      	beq.n	80103a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010396:	695b      	ldr	r3, [r3, #20]
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	7c12      	ldrb	r2, [r2, #16]
 801039c:	f107 0108 	add.w	r1, r7, #8
 80103a0:	4610      	mov	r0, r2
 80103a2:	4798      	blx	r3
 80103a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103a6:	e029      	b.n	80103fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80103a8:	6839      	ldr	r1, [r7, #0]
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 fa63 	bl	8010876 <USBD_CtlError>
            err++;
 80103b0:	7afb      	ldrb	r3, [r7, #11]
 80103b2:	3301      	adds	r3, #1
 80103b4:	72fb      	strb	r3, [r7, #11]
          break;
 80103b6:	e021      	b.n	80103fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103be:	699b      	ldr	r3, [r3, #24]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00b      	beq.n	80103dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103ca:	699b      	ldr	r3, [r3, #24]
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	7c12      	ldrb	r2, [r2, #16]
 80103d0:	f107 0108 	add.w	r1, r7, #8
 80103d4:	4610      	mov	r0, r2
 80103d6:	4798      	blx	r3
 80103d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103da:	e00f      	b.n	80103fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80103dc:	6839      	ldr	r1, [r7, #0]
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 fa49 	bl	8010876 <USBD_CtlError>
            err++;
 80103e4:	7afb      	ldrb	r3, [r7, #11]
 80103e6:	3301      	adds	r3, #1
 80103e8:	72fb      	strb	r3, [r7, #11]
          break;
 80103ea:	e007      	b.n	80103fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80103ec:	6839      	ldr	r1, [r7, #0]
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 fa41 	bl	8010876 <USBD_CtlError>
          err++;
 80103f4:	7afb      	ldrb	r3, [r7, #11]
 80103f6:	3301      	adds	r3, #1
 80103f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80103fa:	bf00      	nop
      }
      break;
 80103fc:	e037      	b.n	801046e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	7c1b      	ldrb	r3, [r3, #16]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d109      	bne.n	801041a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801040c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801040e:	f107 0208 	add.w	r2, r7, #8
 8010412:	4610      	mov	r0, r2
 8010414:	4798      	blx	r3
 8010416:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010418:	e029      	b.n	801046e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801041a:	6839      	ldr	r1, [r7, #0]
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f000 fa2a 	bl	8010876 <USBD_CtlError>
        err++;
 8010422:	7afb      	ldrb	r3, [r7, #11]
 8010424:	3301      	adds	r3, #1
 8010426:	72fb      	strb	r3, [r7, #11]
      break;
 8010428:	e021      	b.n	801046e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	7c1b      	ldrb	r3, [r3, #16]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d10d      	bne.n	801044e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801043a:	f107 0208 	add.w	r2, r7, #8
 801043e:	4610      	mov	r0, r2
 8010440:	4798      	blx	r3
 8010442:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	3301      	adds	r3, #1
 8010448:	2207      	movs	r2, #7
 801044a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801044c:	e00f      	b.n	801046e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801044e:	6839      	ldr	r1, [r7, #0]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 fa10 	bl	8010876 <USBD_CtlError>
        err++;
 8010456:	7afb      	ldrb	r3, [r7, #11]
 8010458:	3301      	adds	r3, #1
 801045a:	72fb      	strb	r3, [r7, #11]
      break;
 801045c:	e007      	b.n	801046e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801045e:	6839      	ldr	r1, [r7, #0]
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f000 fa08 	bl	8010876 <USBD_CtlError>
      err++;
 8010466:	7afb      	ldrb	r3, [r7, #11]
 8010468:	3301      	adds	r3, #1
 801046a:	72fb      	strb	r3, [r7, #11]
      break;
 801046c:	bf00      	nop
  }

  if (err != 0U)
 801046e:	7afb      	ldrb	r3, [r7, #11]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d11e      	bne.n	80104b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	88db      	ldrh	r3, [r3, #6]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d016      	beq.n	80104aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801047c:	893b      	ldrh	r3, [r7, #8]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00e      	beq.n	80104a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	88da      	ldrh	r2, [r3, #6]
 8010486:	893b      	ldrh	r3, [r7, #8]
 8010488:	4293      	cmp	r3, r2
 801048a:	bf28      	it	cs
 801048c:	4613      	movcs	r3, r2
 801048e:	b29b      	uxth	r3, r3
 8010490:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010492:	893b      	ldrh	r3, [r7, #8]
 8010494:	461a      	mov	r2, r3
 8010496:	68f9      	ldr	r1, [r7, #12]
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 f9fd 	bl	8010898 <USBD_CtlSendData>
 801049e:	e009      	b.n	80104b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80104a0:	6839      	ldr	r1, [r7, #0]
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 f9e7 	bl	8010876 <USBD_CtlError>
 80104a8:	e004      	b.n	80104b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 fa31 	bl	8010912 <USBD_CtlSendStatus>
 80104b0:	e000      	b.n	80104b4 <USBD_GetDescriptor+0x2cc>
    return;
 80104b2:	bf00      	nop
  }
}
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop

080104bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b084      	sub	sp, #16
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	889b      	ldrh	r3, [r3, #4]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d131      	bne.n	8010532 <USBD_SetAddress+0x76>
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	88db      	ldrh	r3, [r3, #6]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d12d      	bne.n	8010532 <USBD_SetAddress+0x76>
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	885b      	ldrh	r3, [r3, #2]
 80104da:	2b7f      	cmp	r3, #127	; 0x7f
 80104dc:	d829      	bhi.n	8010532 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	885b      	ldrh	r3, [r3, #2]
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	2b03      	cmp	r3, #3
 80104f4:	d104      	bne.n	8010500 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 f9bc 	bl	8010876 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104fe:	e01d      	b.n	801053c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	7bfa      	ldrb	r2, [r7, #15]
 8010504:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010508:	7bfb      	ldrb	r3, [r7, #15]
 801050a:	4619      	mov	r1, r3
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f001 ff47 	bl	80123a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f9fd 	bl	8010912 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d004      	beq.n	8010528 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2202      	movs	r2, #2
 8010522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010526:	e009      	b.n	801053c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2201      	movs	r2, #1
 801052c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010530:	e004      	b.n	801053c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010532:	6839      	ldr	r1, [r7, #0]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 f99e 	bl	8010876 <USBD_CtlError>
  }
}
 801053a:	bf00      	nop
 801053c:	bf00      	nop
 801053e:	3710      	adds	r7, #16
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801054e:	2300      	movs	r3, #0
 8010550:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	885b      	ldrh	r3, [r3, #2]
 8010556:	b2da      	uxtb	r2, r3
 8010558:	4b4e      	ldr	r3, [pc, #312]	; (8010694 <USBD_SetConfig+0x150>)
 801055a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801055c:	4b4d      	ldr	r3, [pc, #308]	; (8010694 <USBD_SetConfig+0x150>)
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d905      	bls.n	8010570 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010564:	6839      	ldr	r1, [r7, #0]
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 f985 	bl	8010876 <USBD_CtlError>
    return USBD_FAIL;
 801056c:	2303      	movs	r3, #3
 801056e:	e08c      	b.n	801068a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010576:	b2db      	uxtb	r3, r3
 8010578:	2b02      	cmp	r3, #2
 801057a:	d002      	beq.n	8010582 <USBD_SetConfig+0x3e>
 801057c:	2b03      	cmp	r3, #3
 801057e:	d029      	beq.n	80105d4 <USBD_SetConfig+0x90>
 8010580:	e075      	b.n	801066e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010582:	4b44      	ldr	r3, [pc, #272]	; (8010694 <USBD_SetConfig+0x150>)
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d020      	beq.n	80105cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801058a:	4b42      	ldr	r3, [pc, #264]	; (8010694 <USBD_SetConfig+0x150>)
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	461a      	mov	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010594:	4b3f      	ldr	r3, [pc, #252]	; (8010694 <USBD_SetConfig+0x150>)
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	4619      	mov	r1, r3
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7ff f83d 	bl	800f61a <USBD_SetClassConfig>
 80105a0:	4603      	mov	r3, r0
 80105a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80105a4:	7bfb      	ldrb	r3, [r7, #15]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d008      	beq.n	80105bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80105aa:	6839      	ldr	r1, [r7, #0]
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 f962 	bl	8010876 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2202      	movs	r2, #2
 80105b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80105ba:	e065      	b.n	8010688 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f000 f9a8 	bl	8010912 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2203      	movs	r2, #3
 80105c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80105ca:	e05d      	b.n	8010688 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f000 f9a0 	bl	8010912 <USBD_CtlSendStatus>
      break;
 80105d2:	e059      	b.n	8010688 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80105d4:	4b2f      	ldr	r3, [pc, #188]	; (8010694 <USBD_SetConfig+0x150>)
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d112      	bne.n	8010602 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2202      	movs	r2, #2
 80105e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80105e4:	4b2b      	ldr	r3, [pc, #172]	; (8010694 <USBD_SetConfig+0x150>)
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	461a      	mov	r2, r3
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80105ee:	4b29      	ldr	r3, [pc, #164]	; (8010694 <USBD_SetConfig+0x150>)
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	4619      	mov	r1, r3
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7ff f82c 	bl	800f652 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 f989 	bl	8010912 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010600:	e042      	b.n	8010688 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010602:	4b24      	ldr	r3, [pc, #144]	; (8010694 <USBD_SetConfig+0x150>)
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	461a      	mov	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	429a      	cmp	r2, r3
 801060e:	d02a      	beq.n	8010666 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	b2db      	uxtb	r3, r3
 8010616:	4619      	mov	r1, r3
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7ff f81a 	bl	800f652 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801061e:	4b1d      	ldr	r3, [pc, #116]	; (8010694 <USBD_SetConfig+0x150>)
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	461a      	mov	r2, r3
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010628:	4b1a      	ldr	r3, [pc, #104]	; (8010694 <USBD_SetConfig+0x150>)
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	4619      	mov	r1, r3
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f7fe fff3 	bl	800f61a <USBD_SetClassConfig>
 8010634:	4603      	mov	r3, r0
 8010636:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010638:	7bfb      	ldrb	r3, [r7, #15]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00f      	beq.n	801065e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801063e:	6839      	ldr	r1, [r7, #0]
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 f918 	bl	8010876 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	b2db      	uxtb	r3, r3
 801064c:	4619      	mov	r1, r3
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f7fe ffff 	bl	800f652 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2202      	movs	r2, #2
 8010658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801065c:	e014      	b.n	8010688 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 f957 	bl	8010912 <USBD_CtlSendStatus>
      break;
 8010664:	e010      	b.n	8010688 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 f953 	bl	8010912 <USBD_CtlSendStatus>
      break;
 801066c:	e00c      	b.n	8010688 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801066e:	6839      	ldr	r1, [r7, #0]
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f000 f900 	bl	8010876 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010676:	4b07      	ldr	r3, [pc, #28]	; (8010694 <USBD_SetConfig+0x150>)
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	4619      	mov	r1, r3
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7fe ffe8 	bl	800f652 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010682:	2303      	movs	r3, #3
 8010684:	73fb      	strb	r3, [r7, #15]
      break;
 8010686:	bf00      	nop
  }

  return ret;
 8010688:	7bfb      	ldrb	r3, [r7, #15]
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	20000944 	.word	0x20000944

08010698 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	88db      	ldrh	r3, [r3, #6]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d004      	beq.n	80106b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80106aa:	6839      	ldr	r1, [r7, #0]
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f000 f8e2 	bl	8010876 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80106b2:	e023      	b.n	80106fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	2b02      	cmp	r3, #2
 80106be:	dc02      	bgt.n	80106c6 <USBD_GetConfig+0x2e>
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	dc03      	bgt.n	80106cc <USBD_GetConfig+0x34>
 80106c4:	e015      	b.n	80106f2 <USBD_GetConfig+0x5a>
 80106c6:	2b03      	cmp	r3, #3
 80106c8:	d00b      	beq.n	80106e2 <USBD_GetConfig+0x4a>
 80106ca:	e012      	b.n	80106f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	3308      	adds	r3, #8
 80106d6:	2201      	movs	r2, #1
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f000 f8dc 	bl	8010898 <USBD_CtlSendData>
        break;
 80106e0:	e00c      	b.n	80106fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	3304      	adds	r3, #4
 80106e6:	2201      	movs	r2, #1
 80106e8:	4619      	mov	r1, r3
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f000 f8d4 	bl	8010898 <USBD_CtlSendData>
        break;
 80106f0:	e004      	b.n	80106fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80106f2:	6839      	ldr	r1, [r7, #0]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 f8be 	bl	8010876 <USBD_CtlError>
        break;
 80106fa:	bf00      	nop
}
 80106fc:	bf00      	nop
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010714:	b2db      	uxtb	r3, r3
 8010716:	3b01      	subs	r3, #1
 8010718:	2b02      	cmp	r3, #2
 801071a:	d81e      	bhi.n	801075a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	88db      	ldrh	r3, [r3, #6]
 8010720:	2b02      	cmp	r3, #2
 8010722:	d004      	beq.n	801072e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010724:	6839      	ldr	r1, [r7, #0]
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f000 f8a5 	bl	8010876 <USBD_CtlError>
        break;
 801072c:	e01a      	b.n	8010764 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2201      	movs	r2, #1
 8010732:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801073a:	2b00      	cmp	r3, #0
 801073c:	d005      	beq.n	801074a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	f043 0202 	orr.w	r2, r3, #2
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	330c      	adds	r3, #12
 801074e:	2202      	movs	r2, #2
 8010750:	4619      	mov	r1, r3
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 f8a0 	bl	8010898 <USBD_CtlSendData>
      break;
 8010758:	e004      	b.n	8010764 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801075a:	6839      	ldr	r1, [r7, #0]
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f000 f88a 	bl	8010876 <USBD_CtlError>
      break;
 8010762:	bf00      	nop
  }
}
 8010764:	bf00      	nop
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	885b      	ldrh	r3, [r3, #2]
 801077a:	2b01      	cmp	r3, #1
 801077c:	d107      	bne.n	801078e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2201      	movs	r2, #1
 8010782:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 f8c3 	bl	8010912 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801078c:	e013      	b.n	80107b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	885b      	ldrh	r3, [r3, #2]
 8010792:	2b02      	cmp	r3, #2
 8010794:	d10b      	bne.n	80107ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	889b      	ldrh	r3, [r3, #4]
 801079a:	0a1b      	lsrs	r3, r3, #8
 801079c:	b29b      	uxth	r3, r3
 801079e:	b2da      	uxtb	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f000 f8b3 	bl	8010912 <USBD_CtlSendStatus>
}
 80107ac:	e003      	b.n	80107b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 f860 	bl	8010876 <USBD_CtlError>
}
 80107b6:	bf00      	nop
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b082      	sub	sp, #8
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
 80107c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	3b01      	subs	r3, #1
 80107d2:	2b02      	cmp	r3, #2
 80107d4:	d80b      	bhi.n	80107ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	885b      	ldrh	r3, [r3, #2]
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d10c      	bne.n	80107f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2200      	movs	r2, #0
 80107e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f893 	bl	8010912 <USBD_CtlSendStatus>
      }
      break;
 80107ec:	e004      	b.n	80107f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80107ee:	6839      	ldr	r1, [r7, #0]
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 f840 	bl	8010876 <USBD_CtlError>
      break;
 80107f6:	e000      	b.n	80107fa <USBD_ClrFeature+0x3c>
      break;
 80107f8:	bf00      	nop
  }
}
 80107fa:	bf00      	nop
 80107fc:	3708      	adds	r7, #8
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b084      	sub	sp, #16
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	781a      	ldrb	r2, [r3, #0]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	3301      	adds	r3, #1
 801081c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	781a      	ldrb	r2, [r3, #0]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	3301      	adds	r3, #1
 801082a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f7ff fa40 	bl	800fcb2 <SWAPBYTE>
 8010832:	4603      	mov	r3, r0
 8010834:	461a      	mov	r2, r3
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	3301      	adds	r3, #1
 801083e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	3301      	adds	r3, #1
 8010844:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010846:	68f8      	ldr	r0, [r7, #12]
 8010848:	f7ff fa33 	bl	800fcb2 <SWAPBYTE>
 801084c:	4603      	mov	r3, r0
 801084e:	461a      	mov	r2, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	3301      	adds	r3, #1
 8010858:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	3301      	adds	r3, #1
 801085e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010860:	68f8      	ldr	r0, [r7, #12]
 8010862:	f7ff fa26 	bl	800fcb2 <SWAPBYTE>
 8010866:	4603      	mov	r3, r0
 8010868:	461a      	mov	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	80da      	strh	r2, [r3, #6]
}
 801086e:	bf00      	nop
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b082      	sub	sp, #8
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010880:	2180      	movs	r1, #128	; 0x80
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f001 fd22 	bl	80122cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010888:	2100      	movs	r1, #0
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f001 fd1e 	bl	80122cc <USBD_LL_StallEP>
}
 8010890:	bf00      	nop
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2202      	movs	r2, #2
 80108a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	2100      	movs	r1, #0
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f001 fd8d 	bl	80123de <USBD_LL_Transmit>

  return USBD_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}

080108ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80108ce:	b580      	push	{r7, lr}
 80108d0:	b084      	sub	sp, #16
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	60f8      	str	r0, [r7, #12]
 80108d6:	60b9      	str	r1, [r7, #8]
 80108d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	68ba      	ldr	r2, [r7, #8]
 80108de:	2100      	movs	r1, #0
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f001 fd7c 	bl	80123de <USBD_LL_Transmit>

  return USBD_OK;
 80108e6:	2300      	movs	r3, #0
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3710      	adds	r7, #16
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b084      	sub	sp, #16
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	2100      	movs	r1, #0
 8010902:	68f8      	ldr	r0, [r7, #12]
 8010904:	f001 fd8c 	bl	8012420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b082      	sub	sp, #8
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2204      	movs	r2, #4
 801091e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010922:	2300      	movs	r3, #0
 8010924:	2200      	movs	r2, #0
 8010926:	2100      	movs	r1, #0
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f001 fd58 	bl	80123de <USBD_LL_Transmit>

  return USBD_OK;
 801092e:	2300      	movs	r3, #0
}
 8010930:	4618      	mov	r0, r3
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2205      	movs	r2, #5
 8010944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010948:	2300      	movs	r3, #0
 801094a:	2200      	movs	r2, #0
 801094c:	2100      	movs	r1, #0
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f001 fd66 	bl	8012420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801095e:	b480      	push	{r7}
 8010960:	b083      	sub	sp, #12
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f103 0208 	add.w	r2, r3, #8
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f04f 32ff 	mov.w	r2, #4294967295
 8010976:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f103 0208 	add.w	r2, r3, #8
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f103 0208 	add.w	r2, r3, #8
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010992:	bf00      	nop
 8010994:	370c      	adds	r7, #12
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr

0801099e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801099e:	b480      	push	{r7}
 80109a0:	b083      	sub	sp, #12
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2200      	movs	r2, #0
 80109aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80109ac:	bf00      	nop
 80109ae:	370c      	adds	r7, #12
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	68fa      	ldr	r2, [r7, #12]
 80109cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	689a      	ldr	r2, [r3, #8]
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	689b      	ldr	r3, [r3, #8]
 80109da:	683a      	ldr	r2, [r7, #0]
 80109dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	683a      	ldr	r2, [r7, #0]
 80109e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	1c5a      	adds	r2, r3, #1
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	601a      	str	r2, [r3, #0]
}
 80109f4:	bf00      	nop
 80109f6:	3714      	adds	r7, #20
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr

08010a00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a00:	b480      	push	{r7}
 8010a02:	b085      	sub	sp, #20
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a16:	d103      	bne.n	8010a20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	691b      	ldr	r3, [r3, #16]
 8010a1c:	60fb      	str	r3, [r7, #12]
 8010a1e:	e00c      	b.n	8010a3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	3308      	adds	r3, #8
 8010a24:	60fb      	str	r3, [r7, #12]
 8010a26:	e002      	b.n	8010a2e <vListInsert+0x2e>
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	60fb      	str	r3, [r7, #12]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d2f6      	bcs.n	8010a28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	685a      	ldr	r2, [r3, #4]
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	683a      	ldr	r2, [r7, #0]
 8010a48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	68fa      	ldr	r2, [r7, #12]
 8010a4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	683a      	ldr	r2, [r7, #0]
 8010a54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	1c5a      	adds	r2, r3, #1
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	601a      	str	r2, [r3, #0]
}
 8010a66:	bf00      	nop
 8010a68:	3714      	adds	r7, #20
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr

08010a72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010a72:	b480      	push	{r7}
 8010a74:	b085      	sub	sp, #20
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	691b      	ldr	r3, [r3, #16]
 8010a7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	6892      	ldr	r2, [r2, #8]
 8010a88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	689b      	ldr	r3, [r3, #8]
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	6852      	ldr	r2, [r2, #4]
 8010a92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d103      	bne.n	8010aa6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	689a      	ldr	r2, [r3, #8]
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	1e5a      	subs	r2, r3, #1
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3714      	adds	r7, #20
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr

08010ac6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b08e      	sub	sp, #56	; 0x38
 8010aca:	af04      	add	r7, sp, #16
 8010acc:	60f8      	str	r0, [r7, #12]
 8010ace:	60b9      	str	r1, [r7, #8]
 8010ad0:	607a      	str	r2, [r7, #4]
 8010ad2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d10a      	bne.n	8010af0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	f383 8811 	msr	BASEPRI, r3
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010aec:	bf00      	nop
 8010aee:	e7fe      	b.n	8010aee <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d10a      	bne.n	8010b0c <xTaskCreateStatic+0x46>
	__asm volatile
 8010af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afa:	f383 8811 	msr	BASEPRI, r3
 8010afe:	f3bf 8f6f 	isb	sy
 8010b02:	f3bf 8f4f 	dsb	sy
 8010b06:	61fb      	str	r3, [r7, #28]
}
 8010b08:	bf00      	nop
 8010b0a:	e7fe      	b.n	8010b0a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010b0c:	2354      	movs	r3, #84	; 0x54
 8010b0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	2b54      	cmp	r3, #84	; 0x54
 8010b14:	d00a      	beq.n	8010b2c <xTaskCreateStatic+0x66>
	__asm volatile
 8010b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b1a:	f383 8811 	msr	BASEPRI, r3
 8010b1e:	f3bf 8f6f 	isb	sy
 8010b22:	f3bf 8f4f 	dsb	sy
 8010b26:	61bb      	str	r3, [r7, #24]
}
 8010b28:	bf00      	nop
 8010b2a:	e7fe      	b.n	8010b2a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010b2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d01e      	beq.n	8010b72 <xTaskCreateStatic+0xac>
 8010b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d01b      	beq.n	8010b72 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b46:	2202      	movs	r2, #2
 8010b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	9303      	str	r3, [sp, #12]
 8010b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b52:	9302      	str	r3, [sp, #8]
 8010b54:	f107 0314 	add.w	r3, r7, #20
 8010b58:	9301      	str	r3, [sp, #4]
 8010b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5c:	9300      	str	r3, [sp, #0]
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	68b9      	ldr	r1, [r7, #8]
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f000 f850 	bl	8010c0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b6c:	f000 f8d4 	bl	8010d18 <prvAddNewTaskToReadyList>
 8010b70:	e001      	b.n	8010b76 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010b72:	2300      	movs	r3, #0
 8010b74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010b76:	697b      	ldr	r3, [r7, #20]
	}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3728      	adds	r7, #40	; 0x28
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}

08010b80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b08c      	sub	sp, #48	; 0x30
 8010b84:	af04      	add	r7, sp, #16
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	603b      	str	r3, [r7, #0]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010b90:	88fb      	ldrh	r3, [r7, #6]
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	4618      	mov	r0, r3
 8010b96:	f001 f897 	bl	8011cc8 <pvPortMalloc>
 8010b9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d00e      	beq.n	8010bc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010ba2:	2054      	movs	r0, #84	; 0x54
 8010ba4:	f001 f890 	bl	8011cc8 <pvPortMalloc>
 8010ba8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d003      	beq.n	8010bb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010bb0:	69fb      	ldr	r3, [r7, #28]
 8010bb2:	697a      	ldr	r2, [r7, #20]
 8010bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8010bb6:	e005      	b.n	8010bc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010bb8:	6978      	ldr	r0, [r7, #20]
 8010bba:	f001 f951 	bl	8011e60 <vPortFree>
 8010bbe:	e001      	b.n	8010bc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d017      	beq.n	8010bfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010bd2:	88fa      	ldrh	r2, [r7, #6]
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	9303      	str	r3, [sp, #12]
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	9302      	str	r3, [sp, #8]
 8010bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bde:	9301      	str	r3, [sp, #4]
 8010be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be2:	9300      	str	r3, [sp, #0]
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	68b9      	ldr	r1, [r7, #8]
 8010be8:	68f8      	ldr	r0, [r7, #12]
 8010bea:	f000 f80e 	bl	8010c0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010bee:	69f8      	ldr	r0, [r7, #28]
 8010bf0:	f000 f892 	bl	8010d18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	61bb      	str	r3, [r7, #24]
 8010bf8:	e002      	b.n	8010c00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8010bfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010c00:	69bb      	ldr	r3, [r7, #24]
	}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3720      	adds	r7, #32
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}

08010c0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010c0a:	b580      	push	{r7, lr}
 8010c0c:	b088      	sub	sp, #32
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	60f8      	str	r0, [r7, #12]
 8010c12:	60b9      	str	r1, [r7, #8]
 8010c14:	607a      	str	r2, [r7, #4]
 8010c16:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010c22:	3b01      	subs	r3, #1
 8010c24:	009b      	lsls	r3, r3, #2
 8010c26:	4413      	add	r3, r2
 8010c28:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	f023 0307 	bic.w	r3, r3, #7
 8010c30:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	f003 0307 	and.w	r3, r3, #7
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00a      	beq.n	8010c52 <prvInitialiseNewTask+0x48>
	__asm volatile
 8010c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c40:	f383 8811 	msr	BASEPRI, r3
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	617b      	str	r3, [r7, #20]
}
 8010c4e:	bf00      	nop
 8010c50:	e7fe      	b.n	8010c50 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d01f      	beq.n	8010c98 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c58:	2300      	movs	r3, #0
 8010c5a:	61fb      	str	r3, [r7, #28]
 8010c5c:	e012      	b.n	8010c84 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c5e:	68ba      	ldr	r2, [r7, #8]
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	4413      	add	r3, r2
 8010c64:	7819      	ldrb	r1, [r3, #0]
 8010c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	4413      	add	r3, r2
 8010c6c:	3334      	adds	r3, #52	; 0x34
 8010c6e:	460a      	mov	r2, r1
 8010c70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	69fb      	ldr	r3, [r7, #28]
 8010c76:	4413      	add	r3, r2
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d006      	beq.n	8010c8c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	3301      	adds	r3, #1
 8010c82:	61fb      	str	r3, [r7, #28]
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	2b0f      	cmp	r3, #15
 8010c88:	d9e9      	bls.n	8010c5e <prvInitialiseNewTask+0x54>
 8010c8a:	e000      	b.n	8010c8e <prvInitialiseNewTask+0x84>
			{
				break;
 8010c8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	2200      	movs	r2, #0
 8010c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c96:	e003      	b.n	8010ca0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca2:	2b06      	cmp	r3, #6
 8010ca4:	d901      	bls.n	8010caa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ca6:	2306      	movs	r3, #6
 8010ca8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cb4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	2200      	movs	r2, #0
 8010cba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cbe:	3304      	adds	r3, #4
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7ff fe6c 	bl	801099e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc8:	3318      	adds	r3, #24
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7ff fe67 	bl	801099e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd8:	f1c3 0207 	rsb	r2, r3, #7
 8010cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ce4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	2200      	movs	r2, #0
 8010cea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010cf4:	683a      	ldr	r2, [r7, #0]
 8010cf6:	68f9      	ldr	r1, [r7, #12]
 8010cf8:	69b8      	ldr	r0, [r7, #24]
 8010cfa:	f000 fd93 	bl	8011824 <pxPortInitialiseStack>
 8010cfe:	4602      	mov	r2, r0
 8010d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d002      	beq.n	8010d10 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d10:	bf00      	nop
 8010d12:	3720      	adds	r7, #32
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010d20:	f000 feb0 	bl	8011a84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010d24:	4b2a      	ldr	r3, [pc, #168]	; (8010dd0 <prvAddNewTaskToReadyList+0xb8>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	3301      	adds	r3, #1
 8010d2a:	4a29      	ldr	r2, [pc, #164]	; (8010dd0 <prvAddNewTaskToReadyList+0xb8>)
 8010d2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010d2e:	4b29      	ldr	r3, [pc, #164]	; (8010dd4 <prvAddNewTaskToReadyList+0xbc>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d109      	bne.n	8010d4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010d36:	4a27      	ldr	r2, [pc, #156]	; (8010dd4 <prvAddNewTaskToReadyList+0xbc>)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010d3c:	4b24      	ldr	r3, [pc, #144]	; (8010dd0 <prvAddNewTaskToReadyList+0xb8>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	d110      	bne.n	8010d66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010d44:	f000 fb16 	bl	8011374 <prvInitialiseTaskLists>
 8010d48:	e00d      	b.n	8010d66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010d4a:	4b23      	ldr	r3, [pc, #140]	; (8010dd8 <prvAddNewTaskToReadyList+0xc0>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d109      	bne.n	8010d66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d52:	4b20      	ldr	r3, [pc, #128]	; (8010dd4 <prvAddNewTaskToReadyList+0xbc>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d802      	bhi.n	8010d66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010d60:	4a1c      	ldr	r2, [pc, #112]	; (8010dd4 <prvAddNewTaskToReadyList+0xbc>)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010d66:	4b1d      	ldr	r3, [pc, #116]	; (8010ddc <prvAddNewTaskToReadyList+0xc4>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	4a1b      	ldr	r2, [pc, #108]	; (8010ddc <prvAddNewTaskToReadyList+0xc4>)
 8010d6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d74:	2201      	movs	r2, #1
 8010d76:	409a      	lsls	r2, r3
 8010d78:	4b19      	ldr	r3, [pc, #100]	; (8010de0 <prvAddNewTaskToReadyList+0xc8>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	4a18      	ldr	r2, [pc, #96]	; (8010de0 <prvAddNewTaskToReadyList+0xc8>)
 8010d80:	6013      	str	r3, [r2, #0]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d86:	4613      	mov	r3, r2
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	4413      	add	r3, r2
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	4a15      	ldr	r2, [pc, #84]	; (8010de4 <prvAddNewTaskToReadyList+0xcc>)
 8010d90:	441a      	add	r2, r3
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	3304      	adds	r3, #4
 8010d96:	4619      	mov	r1, r3
 8010d98:	4610      	mov	r0, r2
 8010d9a:	f7ff fe0d 	bl	80109b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d9e:	f000 fea1 	bl	8011ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010da2:	4b0d      	ldr	r3, [pc, #52]	; (8010dd8 <prvAddNewTaskToReadyList+0xc0>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d00e      	beq.n	8010dc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010daa:	4b0a      	ldr	r3, [pc, #40]	; (8010dd4 <prvAddNewTaskToReadyList+0xbc>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d207      	bcs.n	8010dc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010db8:	4b0b      	ldr	r3, [pc, #44]	; (8010de8 <prvAddNewTaskToReadyList+0xd0>)
 8010dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dbe:	601a      	str	r2, [r3, #0]
 8010dc0:	f3bf 8f4f 	dsb	sy
 8010dc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010dc8:	bf00      	nop
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	20000a48 	.word	0x20000a48
 8010dd4:	20000948 	.word	0x20000948
 8010dd8:	20000a54 	.word	0x20000a54
 8010ddc:	20000a64 	.word	0x20000a64
 8010de0:	20000a50 	.word	0x20000a50
 8010de4:	2000094c 	.word	0x2000094c
 8010de8:	e000ed04 	.word	0xe000ed04

08010dec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b08a      	sub	sp, #40	; 0x28
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010df6:	2300      	movs	r3, #0
 8010df8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d10a      	bne.n	8010e16 <vTaskDelayUntil+0x2a>
	__asm volatile
 8010e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e04:	f383 8811 	msr	BASEPRI, r3
 8010e08:	f3bf 8f6f 	isb	sy
 8010e0c:	f3bf 8f4f 	dsb	sy
 8010e10:	617b      	str	r3, [r7, #20]
}
 8010e12:	bf00      	nop
 8010e14:	e7fe      	b.n	8010e14 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d10a      	bne.n	8010e32 <vTaskDelayUntil+0x46>
	__asm volatile
 8010e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e20:	f383 8811 	msr	BASEPRI, r3
 8010e24:	f3bf 8f6f 	isb	sy
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	613b      	str	r3, [r7, #16]
}
 8010e2e:	bf00      	nop
 8010e30:	e7fe      	b.n	8010e30 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8010e32:	4b2a      	ldr	r3, [pc, #168]	; (8010edc <vTaskDelayUntil+0xf0>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00a      	beq.n	8010e50 <vTaskDelayUntil+0x64>
	__asm volatile
 8010e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e3e:	f383 8811 	msr	BASEPRI, r3
 8010e42:	f3bf 8f6f 	isb	sy
 8010e46:	f3bf 8f4f 	dsb	sy
 8010e4a:	60fb      	str	r3, [r7, #12]
}
 8010e4c:	bf00      	nop
 8010e4e:	e7fe      	b.n	8010e4e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8010e50:	f000 f8aa 	bl	8010fa8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010e54:	4b22      	ldr	r3, [pc, #136]	; (8010ee0 <vTaskDelayUntil+0xf4>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	683a      	ldr	r2, [r7, #0]
 8010e60:	4413      	add	r3, r2
 8010e62:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	6a3a      	ldr	r2, [r7, #32]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d20b      	bcs.n	8010e86 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	69fa      	ldr	r2, [r7, #28]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d211      	bcs.n	8010e9c <vTaskDelayUntil+0xb0>
 8010e78:	69fa      	ldr	r2, [r7, #28]
 8010e7a:	6a3b      	ldr	r3, [r7, #32]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d90d      	bls.n	8010e9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8010e80:	2301      	movs	r3, #1
 8010e82:	627b      	str	r3, [r7, #36]	; 0x24
 8010e84:	e00a      	b.n	8010e9c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	69fa      	ldr	r2, [r7, #28]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d303      	bcc.n	8010e98 <vTaskDelayUntil+0xac>
 8010e90:	69fa      	ldr	r2, [r7, #28]
 8010e92:	6a3b      	ldr	r3, [r7, #32]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d901      	bls.n	8010e9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	69fa      	ldr	r2, [r7, #28]
 8010ea0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d006      	beq.n	8010eb6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010ea8:	69fa      	ldr	r2, [r7, #28]
 8010eaa:	6a3b      	ldr	r3, [r7, #32]
 8010eac:	1ad3      	subs	r3, r2, r3
 8010eae:	2100      	movs	r1, #0
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f000 fc51 	bl	8011758 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010eb6:	f000 f885 	bl	8010fc4 <xTaskResumeAll>
 8010eba:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010ebc:	69bb      	ldr	r3, [r7, #24]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d107      	bne.n	8010ed2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8010ec2:	4b08      	ldr	r3, [pc, #32]	; (8010ee4 <vTaskDelayUntil+0xf8>)
 8010ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ec8:	601a      	str	r2, [r3, #0]
 8010eca:	f3bf 8f4f 	dsb	sy
 8010ece:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ed2:	bf00      	nop
 8010ed4:	3728      	adds	r7, #40	; 0x28
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	20000a70 	.word	0x20000a70
 8010ee0:	20000a4c 	.word	0x20000a4c
 8010ee4:	e000ed04 	.word	0xe000ed04

08010ee8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b08a      	sub	sp, #40	; 0x28
 8010eec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010ef6:	463a      	mov	r2, r7
 8010ef8:	1d39      	adds	r1, r7, #4
 8010efa:	f107 0308 	add.w	r3, r7, #8
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7f0 f9c0 	bl	8001284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010f04:	6839      	ldr	r1, [r7, #0]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	68ba      	ldr	r2, [r7, #8]
 8010f0a:	9202      	str	r2, [sp, #8]
 8010f0c:	9301      	str	r3, [sp, #4]
 8010f0e:	2300      	movs	r3, #0
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	2300      	movs	r3, #0
 8010f14:	460a      	mov	r2, r1
 8010f16:	491e      	ldr	r1, [pc, #120]	; (8010f90 <vTaskStartScheduler+0xa8>)
 8010f18:	481e      	ldr	r0, [pc, #120]	; (8010f94 <vTaskStartScheduler+0xac>)
 8010f1a:	f7ff fdd4 	bl	8010ac6 <xTaskCreateStatic>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	4a1d      	ldr	r2, [pc, #116]	; (8010f98 <vTaskStartScheduler+0xb0>)
 8010f22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010f24:	4b1c      	ldr	r3, [pc, #112]	; (8010f98 <vTaskStartScheduler+0xb0>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d002      	beq.n	8010f32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	617b      	str	r3, [r7, #20]
 8010f30:	e001      	b.n	8010f36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010f32:	2300      	movs	r3, #0
 8010f34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d116      	bne.n	8010f6a <vTaskStartScheduler+0x82>
	__asm volatile
 8010f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
 8010f4c:	613b      	str	r3, [r7, #16]
}
 8010f4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010f50:	4b12      	ldr	r3, [pc, #72]	; (8010f9c <vTaskStartScheduler+0xb4>)
 8010f52:	f04f 32ff 	mov.w	r2, #4294967295
 8010f56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010f58:	4b11      	ldr	r3, [pc, #68]	; (8010fa0 <vTaskStartScheduler+0xb8>)
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010f5e:	4b11      	ldr	r3, [pc, #68]	; (8010fa4 <vTaskStartScheduler+0xbc>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010f64:	f000 fcec 	bl	8011940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010f68:	e00e      	b.n	8010f88 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f70:	d10a      	bne.n	8010f88 <vTaskStartScheduler+0xa0>
	__asm volatile
 8010f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f76:	f383 8811 	msr	BASEPRI, r3
 8010f7a:	f3bf 8f6f 	isb	sy
 8010f7e:	f3bf 8f4f 	dsb	sy
 8010f82:	60fb      	str	r3, [r7, #12]
}
 8010f84:	bf00      	nop
 8010f86:	e7fe      	b.n	8010f86 <vTaskStartScheduler+0x9e>
}
 8010f88:	bf00      	nop
 8010f8a:	3718      	adds	r7, #24
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	0801487c 	.word	0x0801487c
 8010f94:	08011345 	.word	0x08011345
 8010f98:	20000a6c 	.word	0x20000a6c
 8010f9c:	20000a68 	.word	0x20000a68
 8010fa0:	20000a54 	.word	0x20000a54
 8010fa4:	20000a4c 	.word	0x20000a4c

08010fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010fa8:	b480      	push	{r7}
 8010faa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010fac:	4b04      	ldr	r3, [pc, #16]	; (8010fc0 <vTaskSuspendAll+0x18>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	4a03      	ldr	r2, [pc, #12]	; (8010fc0 <vTaskSuspendAll+0x18>)
 8010fb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010fb6:	bf00      	nop
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbe:	4770      	bx	lr
 8010fc0:	20000a70 	.word	0x20000a70

08010fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b084      	sub	sp, #16
 8010fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010fd2:	4b41      	ldr	r3, [pc, #260]	; (80110d8 <xTaskResumeAll+0x114>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d10a      	bne.n	8010ff0 <xTaskResumeAll+0x2c>
	__asm volatile
 8010fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fde:	f383 8811 	msr	BASEPRI, r3
 8010fe2:	f3bf 8f6f 	isb	sy
 8010fe6:	f3bf 8f4f 	dsb	sy
 8010fea:	603b      	str	r3, [r7, #0]
}
 8010fec:	bf00      	nop
 8010fee:	e7fe      	b.n	8010fee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010ff0:	f000 fd48 	bl	8011a84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010ff4:	4b38      	ldr	r3, [pc, #224]	; (80110d8 <xTaskResumeAll+0x114>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	4a37      	ldr	r2, [pc, #220]	; (80110d8 <xTaskResumeAll+0x114>)
 8010ffc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ffe:	4b36      	ldr	r3, [pc, #216]	; (80110d8 <xTaskResumeAll+0x114>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d161      	bne.n	80110ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011006:	4b35      	ldr	r3, [pc, #212]	; (80110dc <xTaskResumeAll+0x118>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d05d      	beq.n	80110ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801100e:	e02e      	b.n	801106e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011010:	4b33      	ldr	r3, [pc, #204]	; (80110e0 <xTaskResumeAll+0x11c>)
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	68db      	ldr	r3, [r3, #12]
 8011016:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	3318      	adds	r3, #24
 801101c:	4618      	mov	r0, r3
 801101e:	f7ff fd28 	bl	8010a72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3304      	adds	r3, #4
 8011026:	4618      	mov	r0, r3
 8011028:	f7ff fd23 	bl	8010a72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011030:	2201      	movs	r2, #1
 8011032:	409a      	lsls	r2, r3
 8011034:	4b2b      	ldr	r3, [pc, #172]	; (80110e4 <xTaskResumeAll+0x120>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4313      	orrs	r3, r2
 801103a:	4a2a      	ldr	r2, [pc, #168]	; (80110e4 <xTaskResumeAll+0x120>)
 801103c:	6013      	str	r3, [r2, #0]
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011042:	4613      	mov	r3, r2
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4413      	add	r3, r2
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	4a27      	ldr	r2, [pc, #156]	; (80110e8 <xTaskResumeAll+0x124>)
 801104c:	441a      	add	r2, r3
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	3304      	adds	r3, #4
 8011052:	4619      	mov	r1, r3
 8011054:	4610      	mov	r0, r2
 8011056:	f7ff fcaf 	bl	80109b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801105e:	4b23      	ldr	r3, [pc, #140]	; (80110ec <xTaskResumeAll+0x128>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011064:	429a      	cmp	r2, r3
 8011066:	d302      	bcc.n	801106e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011068:	4b21      	ldr	r3, [pc, #132]	; (80110f0 <xTaskResumeAll+0x12c>)
 801106a:	2201      	movs	r2, #1
 801106c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801106e:	4b1c      	ldr	r3, [pc, #112]	; (80110e0 <xTaskResumeAll+0x11c>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1cc      	bne.n	8011010 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d001      	beq.n	8011080 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801107c:	f000 fa18 	bl	80114b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011080:	4b1c      	ldr	r3, [pc, #112]	; (80110f4 <xTaskResumeAll+0x130>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d010      	beq.n	80110ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801108c:	f000 f846 	bl	801111c <xTaskIncrementTick>
 8011090:	4603      	mov	r3, r0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d002      	beq.n	801109c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011096:	4b16      	ldr	r3, [pc, #88]	; (80110f0 <xTaskResumeAll+0x12c>)
 8011098:	2201      	movs	r2, #1
 801109a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	3b01      	subs	r3, #1
 80110a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d1f1      	bne.n	801108c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80110a8:	4b12      	ldr	r3, [pc, #72]	; (80110f4 <xTaskResumeAll+0x130>)
 80110aa:	2200      	movs	r2, #0
 80110ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80110ae:	4b10      	ldr	r3, [pc, #64]	; (80110f0 <xTaskResumeAll+0x12c>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d009      	beq.n	80110ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80110b6:	2301      	movs	r3, #1
 80110b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80110ba:	4b0f      	ldr	r3, [pc, #60]	; (80110f8 <xTaskResumeAll+0x134>)
 80110bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80110ca:	f000 fd0b 	bl	8011ae4 <vPortExitCritical>

	return xAlreadyYielded;
 80110ce:	68bb      	ldr	r3, [r7, #8]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	20000a70 	.word	0x20000a70
 80110dc:	20000a48 	.word	0x20000a48
 80110e0:	20000a08 	.word	0x20000a08
 80110e4:	20000a50 	.word	0x20000a50
 80110e8:	2000094c 	.word	0x2000094c
 80110ec:	20000948 	.word	0x20000948
 80110f0:	20000a5c 	.word	0x20000a5c
 80110f4:	20000a58 	.word	0x20000a58
 80110f8:	e000ed04 	.word	0xe000ed04

080110fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011102:	4b05      	ldr	r3, [pc, #20]	; (8011118 <xTaskGetTickCount+0x1c>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011108:	687b      	ldr	r3, [r7, #4]
}
 801110a:	4618      	mov	r0, r3
 801110c:	370c      	adds	r7, #12
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop
 8011118:	20000a4c 	.word	0x20000a4c

0801111c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b086      	sub	sp, #24
 8011120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011122:	2300      	movs	r3, #0
 8011124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011126:	4b4e      	ldr	r3, [pc, #312]	; (8011260 <xTaskIncrementTick+0x144>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	f040 808e 	bne.w	801124c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011130:	4b4c      	ldr	r3, [pc, #304]	; (8011264 <xTaskIncrementTick+0x148>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	3301      	adds	r3, #1
 8011136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011138:	4a4a      	ldr	r2, [pc, #296]	; (8011264 <xTaskIncrementTick+0x148>)
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d120      	bne.n	8011186 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011144:	4b48      	ldr	r3, [pc, #288]	; (8011268 <xTaskIncrementTick+0x14c>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00a      	beq.n	8011164 <xTaskIncrementTick+0x48>
	__asm volatile
 801114e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011152:	f383 8811 	msr	BASEPRI, r3
 8011156:	f3bf 8f6f 	isb	sy
 801115a:	f3bf 8f4f 	dsb	sy
 801115e:	603b      	str	r3, [r7, #0]
}
 8011160:	bf00      	nop
 8011162:	e7fe      	b.n	8011162 <xTaskIncrementTick+0x46>
 8011164:	4b40      	ldr	r3, [pc, #256]	; (8011268 <xTaskIncrementTick+0x14c>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	60fb      	str	r3, [r7, #12]
 801116a:	4b40      	ldr	r3, [pc, #256]	; (801126c <xTaskIncrementTick+0x150>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	4a3e      	ldr	r2, [pc, #248]	; (8011268 <xTaskIncrementTick+0x14c>)
 8011170:	6013      	str	r3, [r2, #0]
 8011172:	4a3e      	ldr	r2, [pc, #248]	; (801126c <xTaskIncrementTick+0x150>)
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	6013      	str	r3, [r2, #0]
 8011178:	4b3d      	ldr	r3, [pc, #244]	; (8011270 <xTaskIncrementTick+0x154>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	3301      	adds	r3, #1
 801117e:	4a3c      	ldr	r2, [pc, #240]	; (8011270 <xTaskIncrementTick+0x154>)
 8011180:	6013      	str	r3, [r2, #0]
 8011182:	f000 f995 	bl	80114b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011186:	4b3b      	ldr	r3, [pc, #236]	; (8011274 <xTaskIncrementTick+0x158>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	693a      	ldr	r2, [r7, #16]
 801118c:	429a      	cmp	r2, r3
 801118e:	d348      	bcc.n	8011222 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011190:	4b35      	ldr	r3, [pc, #212]	; (8011268 <xTaskIncrementTick+0x14c>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d104      	bne.n	80111a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801119a:	4b36      	ldr	r3, [pc, #216]	; (8011274 <xTaskIncrementTick+0x158>)
 801119c:	f04f 32ff 	mov.w	r2, #4294967295
 80111a0:	601a      	str	r2, [r3, #0]
					break;
 80111a2:	e03e      	b.n	8011222 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111a4:	4b30      	ldr	r3, [pc, #192]	; (8011268 <xTaskIncrementTick+0x14c>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80111b4:	693a      	ldr	r2, [r7, #16]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d203      	bcs.n	80111c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80111bc:	4a2d      	ldr	r2, [pc, #180]	; (8011274 <xTaskIncrementTick+0x158>)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80111c2:	e02e      	b.n	8011222 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	3304      	adds	r3, #4
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7ff fc52 	bl	8010a72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d004      	beq.n	80111e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	3318      	adds	r3, #24
 80111da:	4618      	mov	r0, r3
 80111dc:	f7ff fc49 	bl	8010a72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111e4:	2201      	movs	r2, #1
 80111e6:	409a      	lsls	r2, r3
 80111e8:	4b23      	ldr	r3, [pc, #140]	; (8011278 <xTaskIncrementTick+0x15c>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4313      	orrs	r3, r2
 80111ee:	4a22      	ldr	r2, [pc, #136]	; (8011278 <xTaskIncrementTick+0x15c>)
 80111f0:	6013      	str	r3, [r2, #0]
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111f6:	4613      	mov	r3, r2
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	4413      	add	r3, r2
 80111fc:	009b      	lsls	r3, r3, #2
 80111fe:	4a1f      	ldr	r2, [pc, #124]	; (801127c <xTaskIncrementTick+0x160>)
 8011200:	441a      	add	r2, r3
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	3304      	adds	r3, #4
 8011206:	4619      	mov	r1, r3
 8011208:	4610      	mov	r0, r2
 801120a:	f7ff fbd5 	bl	80109b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011212:	4b1b      	ldr	r3, [pc, #108]	; (8011280 <xTaskIncrementTick+0x164>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011218:	429a      	cmp	r2, r3
 801121a:	d3b9      	bcc.n	8011190 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801121c:	2301      	movs	r3, #1
 801121e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011220:	e7b6      	b.n	8011190 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011222:	4b17      	ldr	r3, [pc, #92]	; (8011280 <xTaskIncrementTick+0x164>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011228:	4914      	ldr	r1, [pc, #80]	; (801127c <xTaskIncrementTick+0x160>)
 801122a:	4613      	mov	r3, r2
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	4413      	add	r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	440b      	add	r3, r1
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	2b01      	cmp	r3, #1
 8011238:	d901      	bls.n	801123e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801123a:	2301      	movs	r3, #1
 801123c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801123e:	4b11      	ldr	r3, [pc, #68]	; (8011284 <xTaskIncrementTick+0x168>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d007      	beq.n	8011256 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011246:	2301      	movs	r3, #1
 8011248:	617b      	str	r3, [r7, #20]
 801124a:	e004      	b.n	8011256 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801124c:	4b0e      	ldr	r3, [pc, #56]	; (8011288 <xTaskIncrementTick+0x16c>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	3301      	adds	r3, #1
 8011252:	4a0d      	ldr	r2, [pc, #52]	; (8011288 <xTaskIncrementTick+0x16c>)
 8011254:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011256:	697b      	ldr	r3, [r7, #20]
}
 8011258:	4618      	mov	r0, r3
 801125a:	3718      	adds	r7, #24
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	20000a70 	.word	0x20000a70
 8011264:	20000a4c 	.word	0x20000a4c
 8011268:	20000a00 	.word	0x20000a00
 801126c:	20000a04 	.word	0x20000a04
 8011270:	20000a60 	.word	0x20000a60
 8011274:	20000a68 	.word	0x20000a68
 8011278:	20000a50 	.word	0x20000a50
 801127c:	2000094c 	.word	0x2000094c
 8011280:	20000948 	.word	0x20000948
 8011284:	20000a5c 	.word	0x20000a5c
 8011288:	20000a58 	.word	0x20000a58

0801128c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801128c:	b480      	push	{r7}
 801128e:	b087      	sub	sp, #28
 8011290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011292:	4b27      	ldr	r3, [pc, #156]	; (8011330 <vTaskSwitchContext+0xa4>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d003      	beq.n	80112a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801129a:	4b26      	ldr	r3, [pc, #152]	; (8011334 <vTaskSwitchContext+0xa8>)
 801129c:	2201      	movs	r2, #1
 801129e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80112a0:	e03f      	b.n	8011322 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80112a2:	4b24      	ldr	r3, [pc, #144]	; (8011334 <vTaskSwitchContext+0xa8>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112a8:	4b23      	ldr	r3, [pc, #140]	; (8011338 <vTaskSwitchContext+0xac>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	fab3 f383 	clz	r3, r3
 80112b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80112b6:	7afb      	ldrb	r3, [r7, #11]
 80112b8:	f1c3 031f 	rsb	r3, r3, #31
 80112bc:	617b      	str	r3, [r7, #20]
 80112be:	491f      	ldr	r1, [pc, #124]	; (801133c <vTaskSwitchContext+0xb0>)
 80112c0:	697a      	ldr	r2, [r7, #20]
 80112c2:	4613      	mov	r3, r2
 80112c4:	009b      	lsls	r3, r3, #2
 80112c6:	4413      	add	r3, r2
 80112c8:	009b      	lsls	r3, r3, #2
 80112ca:	440b      	add	r3, r1
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d10a      	bne.n	80112e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80112d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d6:	f383 8811 	msr	BASEPRI, r3
 80112da:	f3bf 8f6f 	isb	sy
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	607b      	str	r3, [r7, #4]
}
 80112e4:	bf00      	nop
 80112e6:	e7fe      	b.n	80112e6 <vTaskSwitchContext+0x5a>
 80112e8:	697a      	ldr	r2, [r7, #20]
 80112ea:	4613      	mov	r3, r2
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	4413      	add	r3, r2
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	4a12      	ldr	r2, [pc, #72]	; (801133c <vTaskSwitchContext+0xb0>)
 80112f4:	4413      	add	r3, r2
 80112f6:	613b      	str	r3, [r7, #16]
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	685a      	ldr	r2, [r3, #4]
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	605a      	str	r2, [r3, #4]
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	685a      	ldr	r2, [r3, #4]
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	3308      	adds	r3, #8
 801130a:	429a      	cmp	r2, r3
 801130c:	d104      	bne.n	8011318 <vTaskSwitchContext+0x8c>
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	685a      	ldr	r2, [r3, #4]
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	605a      	str	r2, [r3, #4]
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	68db      	ldr	r3, [r3, #12]
 801131e:	4a08      	ldr	r2, [pc, #32]	; (8011340 <vTaskSwitchContext+0xb4>)
 8011320:	6013      	str	r3, [r2, #0]
}
 8011322:	bf00      	nop
 8011324:	371c      	adds	r7, #28
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	20000a70 	.word	0x20000a70
 8011334:	20000a5c 	.word	0x20000a5c
 8011338:	20000a50 	.word	0x20000a50
 801133c:	2000094c 	.word	0x2000094c
 8011340:	20000948 	.word	0x20000948

08011344 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801134c:	f000 f852 	bl	80113f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011350:	4b06      	ldr	r3, [pc, #24]	; (801136c <prvIdleTask+0x28>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2b01      	cmp	r3, #1
 8011356:	d9f9      	bls.n	801134c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011358:	4b05      	ldr	r3, [pc, #20]	; (8011370 <prvIdleTask+0x2c>)
 801135a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801135e:	601a      	str	r2, [r3, #0]
 8011360:	f3bf 8f4f 	dsb	sy
 8011364:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011368:	e7f0      	b.n	801134c <prvIdleTask+0x8>
 801136a:	bf00      	nop
 801136c:	2000094c 	.word	0x2000094c
 8011370:	e000ed04 	.word	0xe000ed04

08011374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801137a:	2300      	movs	r3, #0
 801137c:	607b      	str	r3, [r7, #4]
 801137e:	e00c      	b.n	801139a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	4613      	mov	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	4a12      	ldr	r2, [pc, #72]	; (80113d4 <prvInitialiseTaskLists+0x60>)
 801138c:	4413      	add	r3, r2
 801138e:	4618      	mov	r0, r3
 8011390:	f7ff fae5 	bl	801095e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	3301      	adds	r3, #1
 8011398:	607b      	str	r3, [r7, #4]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2b06      	cmp	r3, #6
 801139e:	d9ef      	bls.n	8011380 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80113a0:	480d      	ldr	r0, [pc, #52]	; (80113d8 <prvInitialiseTaskLists+0x64>)
 80113a2:	f7ff fadc 	bl	801095e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80113a6:	480d      	ldr	r0, [pc, #52]	; (80113dc <prvInitialiseTaskLists+0x68>)
 80113a8:	f7ff fad9 	bl	801095e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80113ac:	480c      	ldr	r0, [pc, #48]	; (80113e0 <prvInitialiseTaskLists+0x6c>)
 80113ae:	f7ff fad6 	bl	801095e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80113b2:	480c      	ldr	r0, [pc, #48]	; (80113e4 <prvInitialiseTaskLists+0x70>)
 80113b4:	f7ff fad3 	bl	801095e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80113b8:	480b      	ldr	r0, [pc, #44]	; (80113e8 <prvInitialiseTaskLists+0x74>)
 80113ba:	f7ff fad0 	bl	801095e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80113be:	4b0b      	ldr	r3, [pc, #44]	; (80113ec <prvInitialiseTaskLists+0x78>)
 80113c0:	4a05      	ldr	r2, [pc, #20]	; (80113d8 <prvInitialiseTaskLists+0x64>)
 80113c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80113c4:	4b0a      	ldr	r3, [pc, #40]	; (80113f0 <prvInitialiseTaskLists+0x7c>)
 80113c6:	4a05      	ldr	r2, [pc, #20]	; (80113dc <prvInitialiseTaskLists+0x68>)
 80113c8:	601a      	str	r2, [r3, #0]
}
 80113ca:	bf00      	nop
 80113cc:	3708      	adds	r7, #8
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	2000094c 	.word	0x2000094c
 80113d8:	200009d8 	.word	0x200009d8
 80113dc:	200009ec 	.word	0x200009ec
 80113e0:	20000a08 	.word	0x20000a08
 80113e4:	20000a1c 	.word	0x20000a1c
 80113e8:	20000a34 	.word	0x20000a34
 80113ec:	20000a00 	.word	0x20000a00
 80113f0:	20000a04 	.word	0x20000a04

080113f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113fa:	e019      	b.n	8011430 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80113fc:	f000 fb42 	bl	8011a84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011400:	4b10      	ldr	r3, [pc, #64]	; (8011444 <prvCheckTasksWaitingTermination+0x50>)
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	3304      	adds	r3, #4
 801140c:	4618      	mov	r0, r3
 801140e:	f7ff fb30 	bl	8010a72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011412:	4b0d      	ldr	r3, [pc, #52]	; (8011448 <prvCheckTasksWaitingTermination+0x54>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3b01      	subs	r3, #1
 8011418:	4a0b      	ldr	r2, [pc, #44]	; (8011448 <prvCheckTasksWaitingTermination+0x54>)
 801141a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801141c:	4b0b      	ldr	r3, [pc, #44]	; (801144c <prvCheckTasksWaitingTermination+0x58>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	3b01      	subs	r3, #1
 8011422:	4a0a      	ldr	r2, [pc, #40]	; (801144c <prvCheckTasksWaitingTermination+0x58>)
 8011424:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011426:	f000 fb5d 	bl	8011ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 f810 	bl	8011450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011430:	4b06      	ldr	r3, [pc, #24]	; (801144c <prvCheckTasksWaitingTermination+0x58>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d1e1      	bne.n	80113fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011438:	bf00      	nop
 801143a:	bf00      	nop
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	20000a1c 	.word	0x20000a1c
 8011448:	20000a48 	.word	0x20000a48
 801144c:	20000a30 	.word	0x20000a30

08011450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801145e:	2b00      	cmp	r3, #0
 8011460:	d108      	bne.n	8011474 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011466:	4618      	mov	r0, r3
 8011468:	f000 fcfa 	bl	8011e60 <vPortFree>
				vPortFree( pxTCB );
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 fcf7 	bl	8011e60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011472:	e018      	b.n	80114a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801147a:	2b01      	cmp	r3, #1
 801147c:	d103      	bne.n	8011486 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f000 fcee 	bl	8011e60 <vPortFree>
	}
 8011484:	e00f      	b.n	80114a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801148c:	2b02      	cmp	r3, #2
 801148e:	d00a      	beq.n	80114a6 <prvDeleteTCB+0x56>
	__asm volatile
 8011490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011494:	f383 8811 	msr	BASEPRI, r3
 8011498:	f3bf 8f6f 	isb	sy
 801149c:	f3bf 8f4f 	dsb	sy
 80114a0:	60fb      	str	r3, [r7, #12]
}
 80114a2:	bf00      	nop
 80114a4:	e7fe      	b.n	80114a4 <prvDeleteTCB+0x54>
	}
 80114a6:	bf00      	nop
 80114a8:	3710      	adds	r7, #16
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
	...

080114b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114b6:	4b0c      	ldr	r3, [pc, #48]	; (80114e8 <prvResetNextTaskUnblockTime+0x38>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d104      	bne.n	80114ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80114c0:	4b0a      	ldr	r3, [pc, #40]	; (80114ec <prvResetNextTaskUnblockTime+0x3c>)
 80114c2:	f04f 32ff 	mov.w	r2, #4294967295
 80114c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80114c8:	e008      	b.n	80114dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114ca:	4b07      	ldr	r3, [pc, #28]	; (80114e8 <prvResetNextTaskUnblockTime+0x38>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	4a04      	ldr	r2, [pc, #16]	; (80114ec <prvResetNextTaskUnblockTime+0x3c>)
 80114da:	6013      	str	r3, [r2, #0]
}
 80114dc:	bf00      	nop
 80114de:	370c      	adds	r7, #12
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	20000a00 	.word	0x20000a00
 80114ec:	20000a68 	.word	0x20000a68

080114f0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b086      	sub	sp, #24
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	607a      	str	r2, [r7, #4]
 80114fc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80114fe:	f000 fac1 	bl	8011a84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011502:	4b26      	ldr	r3, [pc, #152]	; (801159c <xTaskNotifyWait+0xac>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801150a:	b2db      	uxtb	r3, r3
 801150c:	2b02      	cmp	r3, #2
 801150e:	d01a      	beq.n	8011546 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011510:	4b22      	ldr	r3, [pc, #136]	; (801159c <xTaskNotifyWait+0xac>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011516:	68fa      	ldr	r2, [r7, #12]
 8011518:	43d2      	mvns	r2, r2
 801151a:	400a      	ands	r2, r1
 801151c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801151e:	4b1f      	ldr	r3, [pc, #124]	; (801159c <xTaskNotifyWait+0xac>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2201      	movs	r2, #1
 8011524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d00b      	beq.n	8011546 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801152e:	2101      	movs	r1, #1
 8011530:	6838      	ldr	r0, [r7, #0]
 8011532:	f000 f911 	bl	8011758 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011536:	4b1a      	ldr	r3, [pc, #104]	; (80115a0 <xTaskNotifyWait+0xb0>)
 8011538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801153c:	601a      	str	r2, [r3, #0]
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011546:	f000 facd 	bl	8011ae4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801154a:	f000 fa9b 	bl	8011a84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d004      	beq.n	801155e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011554:	4b11      	ldr	r3, [pc, #68]	; (801159c <xTaskNotifyWait+0xac>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801155e:	4b0f      	ldr	r3, [pc, #60]	; (801159c <xTaskNotifyWait+0xac>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011566:	b2db      	uxtb	r3, r3
 8011568:	2b02      	cmp	r3, #2
 801156a:	d002      	beq.n	8011572 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801156c:	2300      	movs	r3, #0
 801156e:	617b      	str	r3, [r7, #20]
 8011570:	e008      	b.n	8011584 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011572:	4b0a      	ldr	r3, [pc, #40]	; (801159c <xTaskNotifyWait+0xac>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011578:	68ba      	ldr	r2, [r7, #8]
 801157a:	43d2      	mvns	r2, r2
 801157c:	400a      	ands	r2, r1
 801157e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8011580:	2301      	movs	r3, #1
 8011582:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011584:	4b05      	ldr	r3, [pc, #20]	; (801159c <xTaskNotifyWait+0xac>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2200      	movs	r2, #0
 801158a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801158e:	f000 faa9 	bl	8011ae4 <vPortExitCritical>

		return xReturn;
 8011592:	697b      	ldr	r3, [r7, #20]
	}
 8011594:	4618      	mov	r0, r3
 8011596:	3718      	adds	r7, #24
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}
 801159c:	20000948 	.word	0x20000948
 80115a0:	e000ed04 	.word	0xe000ed04

080115a4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b08e      	sub	sp, #56	; 0x38
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	60f8      	str	r0, [r7, #12]
 80115ac:	60b9      	str	r1, [r7, #8]
 80115ae:	603b      	str	r3, [r7, #0]
 80115b0:	4613      	mov	r3, r2
 80115b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80115b4:	2301      	movs	r3, #1
 80115b6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d10a      	bne.n	80115d4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80115be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c2:	f383 8811 	msr	BASEPRI, r3
 80115c6:	f3bf 8f6f 	isb	sy
 80115ca:	f3bf 8f4f 	dsb	sy
 80115ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80115d0:	bf00      	nop
 80115d2:	e7fe      	b.n	80115d2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80115d4:	f000 fb38 	bl	8011c48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80115dc:	f3ef 8211 	mrs	r2, BASEPRI
 80115e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e4:	f383 8811 	msr	BASEPRI, r3
 80115e8:	f3bf 8f6f 	isb	sy
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	623a      	str	r2, [r7, #32]
 80115f2:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80115f4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80115f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d003      	beq.n	8011606 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80115fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011608:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801160c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011612:	2202      	movs	r2, #2
 8011614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8011618:	79fb      	ldrb	r3, [r7, #7]
 801161a:	2b04      	cmp	r3, #4
 801161c:	d828      	bhi.n	8011670 <xTaskGenericNotifyFromISR+0xcc>
 801161e:	a201      	add	r2, pc, #4	; (adr r2, 8011624 <xTaskGenericNotifyFromISR+0x80>)
 8011620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011624:	08011691 	.word	0x08011691
 8011628:	08011639 	.word	0x08011639
 801162c:	08011647 	.word	0x08011647
 8011630:	08011653 	.word	0x08011653
 8011634:	0801165b 	.word	0x0801165b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801163a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	431a      	orrs	r2, r3
 8011640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011642:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011644:	e027      	b.n	8011696 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801164a:	1c5a      	adds	r2, r3, #1
 801164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011650:	e021      	b.n	8011696 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011654:	68ba      	ldr	r2, [r7, #8]
 8011656:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011658:	e01d      	b.n	8011696 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801165a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801165e:	2b02      	cmp	r3, #2
 8011660:	d003      	beq.n	801166a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011664:	68ba      	ldr	r2, [r7, #8]
 8011666:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011668:	e015      	b.n	8011696 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 801166a:	2300      	movs	r3, #0
 801166c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801166e:	e012      	b.n	8011696 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011678:	d00c      	beq.n	8011694 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 801167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801167e:	f383 8811 	msr	BASEPRI, r3
 8011682:	f3bf 8f6f 	isb	sy
 8011686:	f3bf 8f4f 	dsb	sy
 801168a:	61bb      	str	r3, [r7, #24]
}
 801168c:	bf00      	nop
 801168e:	e7fe      	b.n	801168e <xTaskGenericNotifyFromISR+0xea>
					break;
 8011690:	bf00      	nop
 8011692:	e000      	b.n	8011696 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8011694:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801169a:	2b01      	cmp	r3, #1
 801169c:	d145      	bne.n	801172a <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00a      	beq.n	80116bc <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80116a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116aa:	f383 8811 	msr	BASEPRI, r3
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	f3bf 8f4f 	dsb	sy
 80116b6:	617b      	str	r3, [r7, #20]
}
 80116b8:	bf00      	nop
 80116ba:	e7fe      	b.n	80116ba <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116bc:	4b20      	ldr	r3, [pc, #128]	; (8011740 <xTaskGenericNotifyFromISR+0x19c>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d11c      	bne.n	80116fe <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c6:	3304      	adds	r3, #4
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7ff f9d2 	bl	8010a72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80116ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d2:	2201      	movs	r2, #1
 80116d4:	409a      	lsls	r2, r3
 80116d6:	4b1b      	ldr	r3, [pc, #108]	; (8011744 <xTaskGenericNotifyFromISR+0x1a0>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	4313      	orrs	r3, r2
 80116dc:	4a19      	ldr	r2, [pc, #100]	; (8011744 <xTaskGenericNotifyFromISR+0x1a0>)
 80116de:	6013      	str	r3, [r2, #0]
 80116e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e4:	4613      	mov	r3, r2
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	4413      	add	r3, r2
 80116ea:	009b      	lsls	r3, r3, #2
 80116ec:	4a16      	ldr	r2, [pc, #88]	; (8011748 <xTaskGenericNotifyFromISR+0x1a4>)
 80116ee:	441a      	add	r2, r3
 80116f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f2:	3304      	adds	r3, #4
 80116f4:	4619      	mov	r1, r3
 80116f6:	4610      	mov	r0, r2
 80116f8:	f7ff f95e 	bl	80109b8 <vListInsertEnd>
 80116fc:	e005      	b.n	801170a <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80116fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011700:	3318      	adds	r3, #24
 8011702:	4619      	mov	r1, r3
 8011704:	4811      	ldr	r0, [pc, #68]	; (801174c <xTaskGenericNotifyFromISR+0x1a8>)
 8011706:	f7ff f957 	bl	80109b8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801170e:	4b10      	ldr	r3, [pc, #64]	; (8011750 <xTaskGenericNotifyFromISR+0x1ac>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011714:	429a      	cmp	r2, r3
 8011716:	d908      	bls.n	801172a <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801171a:	2b00      	cmp	r3, #0
 801171c:	d002      	beq.n	8011724 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801171e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011720:	2201      	movs	r2, #1
 8011722:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011724:	4b0b      	ldr	r3, [pc, #44]	; (8011754 <xTaskGenericNotifyFromISR+0x1b0>)
 8011726:	2201      	movs	r2, #1
 8011728:	601a      	str	r2, [r3, #0]
 801172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011734:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011738:	4618      	mov	r0, r3
 801173a:	3738      	adds	r7, #56	; 0x38
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	20000a70 	.word	0x20000a70
 8011744:	20000a50 	.word	0x20000a50
 8011748:	2000094c 	.word	0x2000094c
 801174c:	20000a08 	.word	0x20000a08
 8011750:	20000948 	.word	0x20000948
 8011754:	20000a5c 	.word	0x20000a5c

08011758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011762:	4b29      	ldr	r3, [pc, #164]	; (8011808 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011768:	4b28      	ldr	r3, [pc, #160]	; (801180c <prvAddCurrentTaskToDelayedList+0xb4>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3304      	adds	r3, #4
 801176e:	4618      	mov	r0, r3
 8011770:	f7ff f97f 	bl	8010a72 <uxListRemove>
 8011774:	4603      	mov	r3, r0
 8011776:	2b00      	cmp	r3, #0
 8011778:	d10b      	bne.n	8011792 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801177a:	4b24      	ldr	r3, [pc, #144]	; (801180c <prvAddCurrentTaskToDelayedList+0xb4>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011780:	2201      	movs	r2, #1
 8011782:	fa02 f303 	lsl.w	r3, r2, r3
 8011786:	43da      	mvns	r2, r3
 8011788:	4b21      	ldr	r3, [pc, #132]	; (8011810 <prvAddCurrentTaskToDelayedList+0xb8>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4013      	ands	r3, r2
 801178e:	4a20      	ldr	r2, [pc, #128]	; (8011810 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011790:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011798:	d10a      	bne.n	80117b0 <prvAddCurrentTaskToDelayedList+0x58>
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d007      	beq.n	80117b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117a0:	4b1a      	ldr	r3, [pc, #104]	; (801180c <prvAddCurrentTaskToDelayedList+0xb4>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	3304      	adds	r3, #4
 80117a6:	4619      	mov	r1, r3
 80117a8:	481a      	ldr	r0, [pc, #104]	; (8011814 <prvAddCurrentTaskToDelayedList+0xbc>)
 80117aa:	f7ff f905 	bl	80109b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80117ae:	e026      	b.n	80117fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4413      	add	r3, r2
 80117b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80117b8:	4b14      	ldr	r3, [pc, #80]	; (801180c <prvAddCurrentTaskToDelayedList+0xb4>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	68ba      	ldr	r2, [r7, #8]
 80117be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80117c0:	68ba      	ldr	r2, [r7, #8]
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d209      	bcs.n	80117dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117c8:	4b13      	ldr	r3, [pc, #76]	; (8011818 <prvAddCurrentTaskToDelayedList+0xc0>)
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	4b0f      	ldr	r3, [pc, #60]	; (801180c <prvAddCurrentTaskToDelayedList+0xb4>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	3304      	adds	r3, #4
 80117d2:	4619      	mov	r1, r3
 80117d4:	4610      	mov	r0, r2
 80117d6:	f7ff f913 	bl	8010a00 <vListInsert>
}
 80117da:	e010      	b.n	80117fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117dc:	4b0f      	ldr	r3, [pc, #60]	; (801181c <prvAddCurrentTaskToDelayedList+0xc4>)
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	4b0a      	ldr	r3, [pc, #40]	; (801180c <prvAddCurrentTaskToDelayedList+0xb4>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3304      	adds	r3, #4
 80117e6:	4619      	mov	r1, r3
 80117e8:	4610      	mov	r0, r2
 80117ea:	f7ff f909 	bl	8010a00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80117ee:	4b0c      	ldr	r3, [pc, #48]	; (8011820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	68ba      	ldr	r2, [r7, #8]
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d202      	bcs.n	80117fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80117f8:	4a09      	ldr	r2, [pc, #36]	; (8011820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	6013      	str	r3, [r2, #0]
}
 80117fe:	bf00      	nop
 8011800:	3710      	adds	r7, #16
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	20000a4c 	.word	0x20000a4c
 801180c:	20000948 	.word	0x20000948
 8011810:	20000a50 	.word	0x20000a50
 8011814:	20000a34 	.word	0x20000a34
 8011818:	20000a04 	.word	0x20000a04
 801181c:	20000a00 	.word	0x20000a00
 8011820:	20000a68 	.word	0x20000a68

08011824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011824:	b480      	push	{r7}
 8011826:	b085      	sub	sp, #20
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	3b04      	subs	r3, #4
 8011834:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801183c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	3b04      	subs	r3, #4
 8011842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	f023 0201 	bic.w	r2, r3, #1
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	3b04      	subs	r3, #4
 8011852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011854:	4a0c      	ldr	r2, [pc, #48]	; (8011888 <pxPortInitialiseStack+0x64>)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	3b14      	subs	r3, #20
 801185e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011860:	687a      	ldr	r2, [r7, #4]
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	3b04      	subs	r3, #4
 801186a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f06f 0202 	mvn.w	r2, #2
 8011872:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	3b20      	subs	r3, #32
 8011878:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801187a:	68fb      	ldr	r3, [r7, #12]
}
 801187c:	4618      	mov	r0, r3
 801187e:	3714      	adds	r7, #20
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	0801188d 	.word	0x0801188d

0801188c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801188c:	b480      	push	{r7}
 801188e:	b085      	sub	sp, #20
 8011890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011892:	2300      	movs	r3, #0
 8011894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011896:	4b12      	ldr	r3, [pc, #72]	; (80118e0 <prvTaskExitError+0x54>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801189e:	d00a      	beq.n	80118b6 <prvTaskExitError+0x2a>
	__asm volatile
 80118a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a4:	f383 8811 	msr	BASEPRI, r3
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	f3bf 8f4f 	dsb	sy
 80118b0:	60fb      	str	r3, [r7, #12]
}
 80118b2:	bf00      	nop
 80118b4:	e7fe      	b.n	80118b4 <prvTaskExitError+0x28>
	__asm volatile
 80118b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ba:	f383 8811 	msr	BASEPRI, r3
 80118be:	f3bf 8f6f 	isb	sy
 80118c2:	f3bf 8f4f 	dsb	sy
 80118c6:	60bb      	str	r3, [r7, #8]
}
 80118c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80118ca:	bf00      	nop
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d0fc      	beq.n	80118cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80118d2:	bf00      	nop
 80118d4:	bf00      	nop
 80118d6:	3714      	adds	r7, #20
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr
 80118e0:	2000000c 	.word	0x2000000c
	...

080118f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80118f0:	4b07      	ldr	r3, [pc, #28]	; (8011910 <pxCurrentTCBConst2>)
 80118f2:	6819      	ldr	r1, [r3, #0]
 80118f4:	6808      	ldr	r0, [r1, #0]
 80118f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fa:	f380 8809 	msr	PSP, r0
 80118fe:	f3bf 8f6f 	isb	sy
 8011902:	f04f 0000 	mov.w	r0, #0
 8011906:	f380 8811 	msr	BASEPRI, r0
 801190a:	4770      	bx	lr
 801190c:	f3af 8000 	nop.w

08011910 <pxCurrentTCBConst2>:
 8011910:	20000948 	.word	0x20000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011914:	bf00      	nop
 8011916:	bf00      	nop

08011918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011918:	4808      	ldr	r0, [pc, #32]	; (801193c <prvPortStartFirstTask+0x24>)
 801191a:	6800      	ldr	r0, [r0, #0]
 801191c:	6800      	ldr	r0, [r0, #0]
 801191e:	f380 8808 	msr	MSP, r0
 8011922:	f04f 0000 	mov.w	r0, #0
 8011926:	f380 8814 	msr	CONTROL, r0
 801192a:	b662      	cpsie	i
 801192c:	b661      	cpsie	f
 801192e:	f3bf 8f4f 	dsb	sy
 8011932:	f3bf 8f6f 	isb	sy
 8011936:	df00      	svc	0
 8011938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801193a:	bf00      	nop
 801193c:	e000ed08 	.word	0xe000ed08

08011940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b086      	sub	sp, #24
 8011944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011946:	4b46      	ldr	r3, [pc, #280]	; (8011a60 <xPortStartScheduler+0x120>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	4a46      	ldr	r2, [pc, #280]	; (8011a64 <xPortStartScheduler+0x124>)
 801194c:	4293      	cmp	r3, r2
 801194e:	d10a      	bne.n	8011966 <xPortStartScheduler+0x26>
	__asm volatile
 8011950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011954:	f383 8811 	msr	BASEPRI, r3
 8011958:	f3bf 8f6f 	isb	sy
 801195c:	f3bf 8f4f 	dsb	sy
 8011960:	613b      	str	r3, [r7, #16]
}
 8011962:	bf00      	nop
 8011964:	e7fe      	b.n	8011964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011966:	4b3e      	ldr	r3, [pc, #248]	; (8011a60 <xPortStartScheduler+0x120>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4a3f      	ldr	r2, [pc, #252]	; (8011a68 <xPortStartScheduler+0x128>)
 801196c:	4293      	cmp	r3, r2
 801196e:	d10a      	bne.n	8011986 <xPortStartScheduler+0x46>
	__asm volatile
 8011970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011974:	f383 8811 	msr	BASEPRI, r3
 8011978:	f3bf 8f6f 	isb	sy
 801197c:	f3bf 8f4f 	dsb	sy
 8011980:	60fb      	str	r3, [r7, #12]
}
 8011982:	bf00      	nop
 8011984:	e7fe      	b.n	8011984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011986:	4b39      	ldr	r3, [pc, #228]	; (8011a6c <xPortStartScheduler+0x12c>)
 8011988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	b2db      	uxtb	r3, r3
 8011990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	22ff      	movs	r2, #255	; 0xff
 8011996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	781b      	ldrb	r3, [r3, #0]
 801199c:	b2db      	uxtb	r3, r3
 801199e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80119a0:	78fb      	ldrb	r3, [r7, #3]
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80119a8:	b2da      	uxtb	r2, r3
 80119aa:	4b31      	ldr	r3, [pc, #196]	; (8011a70 <xPortStartScheduler+0x130>)
 80119ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80119ae:	4b31      	ldr	r3, [pc, #196]	; (8011a74 <xPortStartScheduler+0x134>)
 80119b0:	2207      	movs	r2, #7
 80119b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80119b4:	e009      	b.n	80119ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80119b6:	4b2f      	ldr	r3, [pc, #188]	; (8011a74 <xPortStartScheduler+0x134>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	3b01      	subs	r3, #1
 80119bc:	4a2d      	ldr	r2, [pc, #180]	; (8011a74 <xPortStartScheduler+0x134>)
 80119be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80119c0:	78fb      	ldrb	r3, [r7, #3]
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	005b      	lsls	r3, r3, #1
 80119c6:	b2db      	uxtb	r3, r3
 80119c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80119ca:	78fb      	ldrb	r3, [r7, #3]
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119d2:	2b80      	cmp	r3, #128	; 0x80
 80119d4:	d0ef      	beq.n	80119b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80119d6:	4b27      	ldr	r3, [pc, #156]	; (8011a74 <xPortStartScheduler+0x134>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f1c3 0307 	rsb	r3, r3, #7
 80119de:	2b04      	cmp	r3, #4
 80119e0:	d00a      	beq.n	80119f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80119e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e6:	f383 8811 	msr	BASEPRI, r3
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	60bb      	str	r3, [r7, #8]
}
 80119f4:	bf00      	nop
 80119f6:	e7fe      	b.n	80119f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80119f8:	4b1e      	ldr	r3, [pc, #120]	; (8011a74 <xPortStartScheduler+0x134>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	021b      	lsls	r3, r3, #8
 80119fe:	4a1d      	ldr	r2, [pc, #116]	; (8011a74 <xPortStartScheduler+0x134>)
 8011a00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011a02:	4b1c      	ldr	r3, [pc, #112]	; (8011a74 <xPortStartScheduler+0x134>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011a0a:	4a1a      	ldr	r2, [pc, #104]	; (8011a74 <xPortStartScheduler+0x134>)
 8011a0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011a16:	4b18      	ldr	r3, [pc, #96]	; (8011a78 <xPortStartScheduler+0x138>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	4a17      	ldr	r2, [pc, #92]	; (8011a78 <xPortStartScheduler+0x138>)
 8011a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011a22:	4b15      	ldr	r3, [pc, #84]	; (8011a78 <xPortStartScheduler+0x138>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	4a14      	ldr	r2, [pc, #80]	; (8011a78 <xPortStartScheduler+0x138>)
 8011a28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011a2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011a2e:	f000 f8dd 	bl	8011bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011a32:	4b12      	ldr	r3, [pc, #72]	; (8011a7c <xPortStartScheduler+0x13c>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011a38:	f000 f8fc 	bl	8011c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011a3c:	4b10      	ldr	r3, [pc, #64]	; (8011a80 <xPortStartScheduler+0x140>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	4a0f      	ldr	r2, [pc, #60]	; (8011a80 <xPortStartScheduler+0x140>)
 8011a42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011a46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011a48:	f7ff ff66 	bl	8011918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011a4c:	f7ff fc1e 	bl	801128c <vTaskSwitchContext>
	prvTaskExitError();
 8011a50:	f7ff ff1c 	bl	801188c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011a54:	2300      	movs	r3, #0
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3718      	adds	r7, #24
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop
 8011a60:	e000ed00 	.word	0xe000ed00
 8011a64:	410fc271 	.word	0x410fc271
 8011a68:	410fc270 	.word	0x410fc270
 8011a6c:	e000e400 	.word	0xe000e400
 8011a70:	20000a74 	.word	0x20000a74
 8011a74:	20000a78 	.word	0x20000a78
 8011a78:	e000ed20 	.word	0xe000ed20
 8011a7c:	2000000c 	.word	0x2000000c
 8011a80:	e000ef34 	.word	0xe000ef34

08011a84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
	__asm volatile
 8011a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8e:	f383 8811 	msr	BASEPRI, r3
 8011a92:	f3bf 8f6f 	isb	sy
 8011a96:	f3bf 8f4f 	dsb	sy
 8011a9a:	607b      	str	r3, [r7, #4]
}
 8011a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011a9e:	4b0f      	ldr	r3, [pc, #60]	; (8011adc <vPortEnterCritical+0x58>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	4a0d      	ldr	r2, [pc, #52]	; (8011adc <vPortEnterCritical+0x58>)
 8011aa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011aa8:	4b0c      	ldr	r3, [pc, #48]	; (8011adc <vPortEnterCritical+0x58>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d10f      	bne.n	8011ad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011ab0:	4b0b      	ldr	r3, [pc, #44]	; (8011ae0 <vPortEnterCritical+0x5c>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d00a      	beq.n	8011ad0 <vPortEnterCritical+0x4c>
	__asm volatile
 8011aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011abe:	f383 8811 	msr	BASEPRI, r3
 8011ac2:	f3bf 8f6f 	isb	sy
 8011ac6:	f3bf 8f4f 	dsb	sy
 8011aca:	603b      	str	r3, [r7, #0]
}
 8011acc:	bf00      	nop
 8011ace:	e7fe      	b.n	8011ace <vPortEnterCritical+0x4a>
	}
}
 8011ad0:	bf00      	nop
 8011ad2:	370c      	adds	r7, #12
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ada:	4770      	bx	lr
 8011adc:	2000000c 	.word	0x2000000c
 8011ae0:	e000ed04 	.word	0xe000ed04

08011ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b083      	sub	sp, #12
 8011ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011aea:	4b12      	ldr	r3, [pc, #72]	; (8011b34 <vPortExitCritical+0x50>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d10a      	bne.n	8011b08 <vPortExitCritical+0x24>
	__asm volatile
 8011af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af6:	f383 8811 	msr	BASEPRI, r3
 8011afa:	f3bf 8f6f 	isb	sy
 8011afe:	f3bf 8f4f 	dsb	sy
 8011b02:	607b      	str	r3, [r7, #4]
}
 8011b04:	bf00      	nop
 8011b06:	e7fe      	b.n	8011b06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011b08:	4b0a      	ldr	r3, [pc, #40]	; (8011b34 <vPortExitCritical+0x50>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	3b01      	subs	r3, #1
 8011b0e:	4a09      	ldr	r2, [pc, #36]	; (8011b34 <vPortExitCritical+0x50>)
 8011b10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011b12:	4b08      	ldr	r3, [pc, #32]	; (8011b34 <vPortExitCritical+0x50>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d105      	bne.n	8011b26 <vPortExitCritical+0x42>
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	f383 8811 	msr	BASEPRI, r3
}
 8011b24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011b26:	bf00      	nop
 8011b28:	370c      	adds	r7, #12
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop
 8011b34:	2000000c 	.word	0x2000000c
	...

08011b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011b40:	f3ef 8009 	mrs	r0, PSP
 8011b44:	f3bf 8f6f 	isb	sy
 8011b48:	4b15      	ldr	r3, [pc, #84]	; (8011ba0 <pxCurrentTCBConst>)
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	f01e 0f10 	tst.w	lr, #16
 8011b50:	bf08      	it	eq
 8011b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b5a:	6010      	str	r0, [r2, #0]
 8011b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011b64:	f380 8811 	msr	BASEPRI, r0
 8011b68:	f3bf 8f4f 	dsb	sy
 8011b6c:	f3bf 8f6f 	isb	sy
 8011b70:	f7ff fb8c 	bl	801128c <vTaskSwitchContext>
 8011b74:	f04f 0000 	mov.w	r0, #0
 8011b78:	f380 8811 	msr	BASEPRI, r0
 8011b7c:	bc09      	pop	{r0, r3}
 8011b7e:	6819      	ldr	r1, [r3, #0]
 8011b80:	6808      	ldr	r0, [r1, #0]
 8011b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b86:	f01e 0f10 	tst.w	lr, #16
 8011b8a:	bf08      	it	eq
 8011b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b90:	f380 8809 	msr	PSP, r0
 8011b94:	f3bf 8f6f 	isb	sy
 8011b98:	4770      	bx	lr
 8011b9a:	bf00      	nop
 8011b9c:	f3af 8000 	nop.w

08011ba0 <pxCurrentTCBConst>:
 8011ba0:	20000948 	.word	0x20000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011ba4:	bf00      	nop
 8011ba6:	bf00      	nop

08011ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
	__asm volatile
 8011bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb2:	f383 8811 	msr	BASEPRI, r3
 8011bb6:	f3bf 8f6f 	isb	sy
 8011bba:	f3bf 8f4f 	dsb	sy
 8011bbe:	607b      	str	r3, [r7, #4]
}
 8011bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011bc2:	f7ff faab 	bl	801111c <xTaskIncrementTick>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d003      	beq.n	8011bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011bcc:	4b06      	ldr	r3, [pc, #24]	; (8011be8 <SysTick_Handler+0x40>)
 8011bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bd2:	601a      	str	r2, [r3, #0]
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	f383 8811 	msr	BASEPRI, r3
}
 8011bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011be0:	bf00      	nop
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	e000ed04 	.word	0xe000ed04

08011bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011bec:	b480      	push	{r7}
 8011bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011bf0:	4b0b      	ldr	r3, [pc, #44]	; (8011c20 <vPortSetupTimerInterrupt+0x34>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011bf6:	4b0b      	ldr	r3, [pc, #44]	; (8011c24 <vPortSetupTimerInterrupt+0x38>)
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011bfc:	4b0a      	ldr	r3, [pc, #40]	; (8011c28 <vPortSetupTimerInterrupt+0x3c>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	4a0a      	ldr	r2, [pc, #40]	; (8011c2c <vPortSetupTimerInterrupt+0x40>)
 8011c02:	fba2 2303 	umull	r2, r3, r2, r3
 8011c06:	099b      	lsrs	r3, r3, #6
 8011c08:	4a09      	ldr	r2, [pc, #36]	; (8011c30 <vPortSetupTimerInterrupt+0x44>)
 8011c0a:	3b01      	subs	r3, #1
 8011c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011c0e:	4b04      	ldr	r3, [pc, #16]	; (8011c20 <vPortSetupTimerInterrupt+0x34>)
 8011c10:	2207      	movs	r2, #7
 8011c12:	601a      	str	r2, [r3, #0]
}
 8011c14:	bf00      	nop
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop
 8011c20:	e000e010 	.word	0xe000e010
 8011c24:	e000e018 	.word	0xe000e018
 8011c28:	20000000 	.word	0x20000000
 8011c2c:	10624dd3 	.word	0x10624dd3
 8011c30:	e000e014 	.word	0xe000e014

08011c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011c44 <vPortEnableVFP+0x10>
 8011c38:	6801      	ldr	r1, [r0, #0]
 8011c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011c3e:	6001      	str	r1, [r0, #0]
 8011c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011c42:	bf00      	nop
 8011c44:	e000ed88 	.word	0xe000ed88

08011c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011c4e:	f3ef 8305 	mrs	r3, IPSR
 8011c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2b0f      	cmp	r3, #15
 8011c58:	d914      	bls.n	8011c84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011c5a:	4a17      	ldr	r2, [pc, #92]	; (8011cb8 <vPortValidateInterruptPriority+0x70>)
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	4413      	add	r3, r2
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011c64:	4b15      	ldr	r3, [pc, #84]	; (8011cbc <vPortValidateInterruptPriority+0x74>)
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	7afa      	ldrb	r2, [r7, #11]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d20a      	bcs.n	8011c84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c72:	f383 8811 	msr	BASEPRI, r3
 8011c76:	f3bf 8f6f 	isb	sy
 8011c7a:	f3bf 8f4f 	dsb	sy
 8011c7e:	607b      	str	r3, [r7, #4]
}
 8011c80:	bf00      	nop
 8011c82:	e7fe      	b.n	8011c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011c84:	4b0e      	ldr	r3, [pc, #56]	; (8011cc0 <vPortValidateInterruptPriority+0x78>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011c8c:	4b0d      	ldr	r3, [pc, #52]	; (8011cc4 <vPortValidateInterruptPriority+0x7c>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	429a      	cmp	r2, r3
 8011c92:	d90a      	bls.n	8011caa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c98:	f383 8811 	msr	BASEPRI, r3
 8011c9c:	f3bf 8f6f 	isb	sy
 8011ca0:	f3bf 8f4f 	dsb	sy
 8011ca4:	603b      	str	r3, [r7, #0]
}
 8011ca6:	bf00      	nop
 8011ca8:	e7fe      	b.n	8011ca8 <vPortValidateInterruptPriority+0x60>
	}
 8011caa:	bf00      	nop
 8011cac:	3714      	adds	r7, #20
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	e000e3f0 	.word	0xe000e3f0
 8011cbc:	20000a74 	.word	0x20000a74
 8011cc0:	e000ed0c 	.word	0xe000ed0c
 8011cc4:	20000a78 	.word	0x20000a78

08011cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b08a      	sub	sp, #40	; 0x28
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011cd4:	f7ff f968 	bl	8010fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011cd8:	4b5b      	ldr	r3, [pc, #364]	; (8011e48 <pvPortMalloc+0x180>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d101      	bne.n	8011ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011ce0:	f000 f920 	bl	8011f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011ce4:	4b59      	ldr	r3, [pc, #356]	; (8011e4c <pvPortMalloc+0x184>)
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	4013      	ands	r3, r2
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	f040 8093 	bne.w	8011e18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d01d      	beq.n	8011d34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011cf8:	2208      	movs	r2, #8
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f003 0307 	and.w	r3, r3, #7
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d014      	beq.n	8011d34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f023 0307 	bic.w	r3, r3, #7
 8011d10:	3308      	adds	r3, #8
 8011d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f003 0307 	and.w	r3, r3, #7
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d00a      	beq.n	8011d34 <pvPortMalloc+0x6c>
	__asm volatile
 8011d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d22:	f383 8811 	msr	BASEPRI, r3
 8011d26:	f3bf 8f6f 	isb	sy
 8011d2a:	f3bf 8f4f 	dsb	sy
 8011d2e:	617b      	str	r3, [r7, #20]
}
 8011d30:	bf00      	nop
 8011d32:	e7fe      	b.n	8011d32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d06e      	beq.n	8011e18 <pvPortMalloc+0x150>
 8011d3a:	4b45      	ldr	r3, [pc, #276]	; (8011e50 <pvPortMalloc+0x188>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d869      	bhi.n	8011e18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011d44:	4b43      	ldr	r3, [pc, #268]	; (8011e54 <pvPortMalloc+0x18c>)
 8011d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011d48:	4b42      	ldr	r3, [pc, #264]	; (8011e54 <pvPortMalloc+0x18c>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d4e:	e004      	b.n	8011d5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	687a      	ldr	r2, [r7, #4]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d903      	bls.n	8011d6c <pvPortMalloc+0xa4>
 8011d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d1f1      	bne.n	8011d50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011d6c:	4b36      	ldr	r3, [pc, #216]	; (8011e48 <pvPortMalloc+0x180>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d050      	beq.n	8011e18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011d76:	6a3b      	ldr	r3, [r7, #32]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	2208      	movs	r2, #8
 8011d7c:	4413      	add	r3, r2
 8011d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	6a3b      	ldr	r3, [r7, #32]
 8011d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8a:	685a      	ldr	r2, [r3, #4]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	1ad2      	subs	r2, r2, r3
 8011d90:	2308      	movs	r3, #8
 8011d92:	005b      	lsls	r3, r3, #1
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d91f      	bls.n	8011dd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011da0:	69bb      	ldr	r3, [r7, #24]
 8011da2:	f003 0307 	and.w	r3, r3, #7
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d00a      	beq.n	8011dc0 <pvPortMalloc+0xf8>
	__asm volatile
 8011daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dae:	f383 8811 	msr	BASEPRI, r3
 8011db2:	f3bf 8f6f 	isb	sy
 8011db6:	f3bf 8f4f 	dsb	sy
 8011dba:	613b      	str	r3, [r7, #16]
}
 8011dbc:	bf00      	nop
 8011dbe:	e7fe      	b.n	8011dbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc2:	685a      	ldr	r2, [r3, #4]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	1ad2      	subs	r2, r2, r3
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011dd2:	69b8      	ldr	r0, [r7, #24]
 8011dd4:	f000 f908 	bl	8011fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011dd8:	4b1d      	ldr	r3, [pc, #116]	; (8011e50 <pvPortMalloc+0x188>)
 8011dda:	681a      	ldr	r2, [r3, #0]
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	1ad3      	subs	r3, r2, r3
 8011de2:	4a1b      	ldr	r2, [pc, #108]	; (8011e50 <pvPortMalloc+0x188>)
 8011de4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011de6:	4b1a      	ldr	r3, [pc, #104]	; (8011e50 <pvPortMalloc+0x188>)
 8011de8:	681a      	ldr	r2, [r3, #0]
 8011dea:	4b1b      	ldr	r3, [pc, #108]	; (8011e58 <pvPortMalloc+0x190>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d203      	bcs.n	8011dfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011df2:	4b17      	ldr	r3, [pc, #92]	; (8011e50 <pvPortMalloc+0x188>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	4a18      	ldr	r2, [pc, #96]	; (8011e58 <pvPortMalloc+0x190>)
 8011df8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfc:	685a      	ldr	r2, [r3, #4]
 8011dfe:	4b13      	ldr	r3, [pc, #76]	; (8011e4c <pvPortMalloc+0x184>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	431a      	orrs	r2, r3
 8011e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011e0e:	4b13      	ldr	r3, [pc, #76]	; (8011e5c <pvPortMalloc+0x194>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	3301      	adds	r3, #1
 8011e14:	4a11      	ldr	r2, [pc, #68]	; (8011e5c <pvPortMalloc+0x194>)
 8011e16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011e18:	f7ff f8d4 	bl	8010fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	f003 0307 	and.w	r3, r3, #7
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00a      	beq.n	8011e3c <pvPortMalloc+0x174>
	__asm volatile
 8011e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2a:	f383 8811 	msr	BASEPRI, r3
 8011e2e:	f3bf 8f6f 	isb	sy
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	60fb      	str	r3, [r7, #12]
}
 8011e38:	bf00      	nop
 8011e3a:	e7fe      	b.n	8011e3a <pvPortMalloc+0x172>
	return pvReturn;
 8011e3c:	69fb      	ldr	r3, [r7, #28]
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3728      	adds	r7, #40	; 0x28
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	2000d284 	.word	0x2000d284
 8011e4c:	2000d298 	.word	0x2000d298
 8011e50:	2000d288 	.word	0x2000d288
 8011e54:	2000d27c 	.word	0x2000d27c
 8011e58:	2000d28c 	.word	0x2000d28c
 8011e5c:	2000d290 	.word	0x2000d290

08011e60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b086      	sub	sp, #24
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d04d      	beq.n	8011f0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011e72:	2308      	movs	r3, #8
 8011e74:	425b      	negs	r3, r3
 8011e76:	697a      	ldr	r2, [r7, #20]
 8011e78:	4413      	add	r3, r2
 8011e7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	685a      	ldr	r2, [r3, #4]
 8011e84:	4b24      	ldr	r3, [pc, #144]	; (8011f18 <vPortFree+0xb8>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	4013      	ands	r3, r2
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d10a      	bne.n	8011ea4 <vPortFree+0x44>
	__asm volatile
 8011e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e92:	f383 8811 	msr	BASEPRI, r3
 8011e96:	f3bf 8f6f 	isb	sy
 8011e9a:	f3bf 8f4f 	dsb	sy
 8011e9e:	60fb      	str	r3, [r7, #12]
}
 8011ea0:	bf00      	nop
 8011ea2:	e7fe      	b.n	8011ea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d00a      	beq.n	8011ec2 <vPortFree+0x62>
	__asm volatile
 8011eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb0:	f383 8811 	msr	BASEPRI, r3
 8011eb4:	f3bf 8f6f 	isb	sy
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	60bb      	str	r3, [r7, #8]
}
 8011ebe:	bf00      	nop
 8011ec0:	e7fe      	b.n	8011ec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	685a      	ldr	r2, [r3, #4]
 8011ec6:	4b14      	ldr	r3, [pc, #80]	; (8011f18 <vPortFree+0xb8>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4013      	ands	r3, r2
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d01e      	beq.n	8011f0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d11a      	bne.n	8011f0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	685a      	ldr	r2, [r3, #4]
 8011edc:	4b0e      	ldr	r3, [pc, #56]	; (8011f18 <vPortFree+0xb8>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	43db      	mvns	r3, r3
 8011ee2:	401a      	ands	r2, r3
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011ee8:	f7ff f85e 	bl	8010fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	685a      	ldr	r2, [r3, #4]
 8011ef0:	4b0a      	ldr	r3, [pc, #40]	; (8011f1c <vPortFree+0xbc>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	4413      	add	r3, r2
 8011ef6:	4a09      	ldr	r2, [pc, #36]	; (8011f1c <vPortFree+0xbc>)
 8011ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011efa:	6938      	ldr	r0, [r7, #16]
 8011efc:	f000 f874 	bl	8011fe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011f00:	4b07      	ldr	r3, [pc, #28]	; (8011f20 <vPortFree+0xc0>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	3301      	adds	r3, #1
 8011f06:	4a06      	ldr	r2, [pc, #24]	; (8011f20 <vPortFree+0xc0>)
 8011f08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011f0a:	f7ff f85b 	bl	8010fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011f0e:	bf00      	nop
 8011f10:	3718      	adds	r7, #24
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	2000d298 	.word	0x2000d298
 8011f1c:	2000d288 	.word	0x2000d288
 8011f20:	2000d294 	.word	0x2000d294

08011f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011f24:	b480      	push	{r7}
 8011f26:	b085      	sub	sp, #20
 8011f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011f2a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8011f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011f30:	4b27      	ldr	r3, [pc, #156]	; (8011fd0 <prvHeapInit+0xac>)
 8011f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	f003 0307 	and.w	r3, r3, #7
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d00c      	beq.n	8011f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	3307      	adds	r3, #7
 8011f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f023 0307 	bic.w	r3, r3, #7
 8011f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011f4c:	68ba      	ldr	r2, [r7, #8]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	4a1f      	ldr	r2, [pc, #124]	; (8011fd0 <prvHeapInit+0xac>)
 8011f54:	4413      	add	r3, r2
 8011f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011f5c:	4a1d      	ldr	r2, [pc, #116]	; (8011fd4 <prvHeapInit+0xb0>)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011f62:	4b1c      	ldr	r3, [pc, #112]	; (8011fd4 <prvHeapInit+0xb0>)
 8011f64:	2200      	movs	r2, #0
 8011f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	68ba      	ldr	r2, [r7, #8]
 8011f6c:	4413      	add	r3, r2
 8011f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011f70:	2208      	movs	r2, #8
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	1a9b      	subs	r3, r3, r2
 8011f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f023 0307 	bic.w	r3, r3, #7
 8011f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	4a15      	ldr	r2, [pc, #84]	; (8011fd8 <prvHeapInit+0xb4>)
 8011f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011f86:	4b14      	ldr	r3, [pc, #80]	; (8011fd8 <prvHeapInit+0xb4>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011f8e:	4b12      	ldr	r3, [pc, #72]	; (8011fd8 <prvHeapInit+0xb4>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2200      	movs	r2, #0
 8011f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	68fa      	ldr	r2, [r7, #12]
 8011f9e:	1ad2      	subs	r2, r2, r3
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011fa4:	4b0c      	ldr	r3, [pc, #48]	; (8011fd8 <prvHeapInit+0xb4>)
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	4a0a      	ldr	r2, [pc, #40]	; (8011fdc <prvHeapInit+0xb8>)
 8011fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	4a09      	ldr	r2, [pc, #36]	; (8011fe0 <prvHeapInit+0xbc>)
 8011fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011fbc:	4b09      	ldr	r3, [pc, #36]	; (8011fe4 <prvHeapInit+0xc0>)
 8011fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011fc2:	601a      	str	r2, [r3, #0]
}
 8011fc4:	bf00      	nop
 8011fc6:	3714      	adds	r7, #20
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr
 8011fd0:	20000a7c 	.word	0x20000a7c
 8011fd4:	2000d27c 	.word	0x2000d27c
 8011fd8:	2000d284 	.word	0x2000d284
 8011fdc:	2000d28c 	.word	0x2000d28c
 8011fe0:	2000d288 	.word	0x2000d288
 8011fe4:	2000d298 	.word	0x2000d298

08011fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b085      	sub	sp, #20
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ff0:	4b28      	ldr	r3, [pc, #160]	; (8012094 <prvInsertBlockIntoFreeList+0xac>)
 8011ff2:	60fb      	str	r3, [r7, #12]
 8011ff4:	e002      	b.n	8011ffc <prvInsertBlockIntoFreeList+0x14>
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	60fb      	str	r3, [r7, #12]
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	429a      	cmp	r2, r3
 8012004:	d8f7      	bhi.n	8011ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	68ba      	ldr	r2, [r7, #8]
 8012010:	4413      	add	r3, r2
 8012012:	687a      	ldr	r2, [r7, #4]
 8012014:	429a      	cmp	r2, r3
 8012016:	d108      	bne.n	801202a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	685a      	ldr	r2, [r3, #4]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	441a      	add	r2, r3
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	68ba      	ldr	r2, [r7, #8]
 8012034:	441a      	add	r2, r3
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	429a      	cmp	r2, r3
 801203c:	d118      	bne.n	8012070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	4b15      	ldr	r3, [pc, #84]	; (8012098 <prvInsertBlockIntoFreeList+0xb0>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	429a      	cmp	r2, r3
 8012048:	d00d      	beq.n	8012066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685a      	ldr	r2, [r3, #4]
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	441a      	add	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	601a      	str	r2, [r3, #0]
 8012064:	e008      	b.n	8012078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012066:	4b0c      	ldr	r3, [pc, #48]	; (8012098 <prvInsertBlockIntoFreeList+0xb0>)
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	601a      	str	r2, [r3, #0]
 801206e:	e003      	b.n	8012078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012078:	68fa      	ldr	r2, [r7, #12]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	429a      	cmp	r2, r3
 801207e:	d002      	beq.n	8012086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012086:	bf00      	nop
 8012088:	3714      	adds	r7, #20
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop
 8012094:	2000d27c 	.word	0x2000d27c
 8012098:	2000d284 	.word	0x2000d284

0801209c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b082      	sub	sp, #8
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80120b0:	4619      	mov	r1, r3
 80120b2:	4610      	mov	r0, r2
 80120b4:	f7fd fae7 	bl	800f686 <USBD_LL_SetupStage>
}
 80120b8:	bf00      	nop
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}

080120c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	460b      	mov	r3, r1
 80120ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80120d2:	78fa      	ldrb	r2, [r7, #3]
 80120d4:	6879      	ldr	r1, [r7, #4]
 80120d6:	4613      	mov	r3, r2
 80120d8:	00db      	lsls	r3, r3, #3
 80120da:	4413      	add	r3, r2
 80120dc:	009b      	lsls	r3, r3, #2
 80120de:	440b      	add	r3, r1
 80120e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	78fb      	ldrb	r3, [r7, #3]
 80120e8:	4619      	mov	r1, r3
 80120ea:	f7fd fb21 	bl	800f730 <USBD_LL_DataOutStage>
}
 80120ee:	bf00      	nop
 80120f0:	3708      	adds	r7, #8
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}

080120f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120f6:	b580      	push	{r7, lr}
 80120f8:	b082      	sub	sp, #8
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
 80120fe:	460b      	mov	r3, r1
 8012100:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012108:	78fa      	ldrb	r2, [r7, #3]
 801210a:	6879      	ldr	r1, [r7, #4]
 801210c:	4613      	mov	r3, r2
 801210e:	00db      	lsls	r3, r3, #3
 8012110:	4413      	add	r3, r2
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	440b      	add	r3, r1
 8012116:	334c      	adds	r3, #76	; 0x4c
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	78fb      	ldrb	r3, [r7, #3]
 801211c:	4619      	mov	r1, r3
 801211e:	f7fd fbba 	bl	800f896 <USBD_LL_DataInStage>
}
 8012122:	bf00      	nop
 8012124:	3708      	adds	r7, #8
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}

0801212a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801212a:	b580      	push	{r7, lr}
 801212c:	b082      	sub	sp, #8
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012138:	4618      	mov	r0, r3
 801213a:	f7fd fcee 	bl	800fb1a <USBD_LL_SOF>
}
 801213e:	bf00      	nop
 8012140:	3708      	adds	r7, #8
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}

08012146 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012146:	b580      	push	{r7, lr}
 8012148:	b084      	sub	sp, #16
 801214a:	af00      	add	r7, sp, #0
 801214c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801214e:	2301      	movs	r3, #1
 8012150:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d102      	bne.n	8012160 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801215a:	2300      	movs	r3, #0
 801215c:	73fb      	strb	r3, [r7, #15]
 801215e:	e008      	b.n	8012172 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	2b02      	cmp	r3, #2
 8012166:	d102      	bne.n	801216e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012168:	2301      	movs	r3, #1
 801216a:	73fb      	strb	r3, [r7, #15]
 801216c:	e001      	b.n	8012172 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801216e:	f7f0 f839 	bl	80021e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012178:	7bfa      	ldrb	r2, [r7, #15]
 801217a:	4611      	mov	r1, r2
 801217c:	4618      	mov	r0, r3
 801217e:	f7fd fc8e 	bl	800fa9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012188:	4618      	mov	r0, r3
 801218a:	f7fd fc36 	bl	800f9fa <USBD_LL_Reset>
}
 801218e:	bf00      	nop
 8012190:	3710      	adds	r7, #16
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
	...

08012198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fd fc89 	bl	800fabe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	6812      	ldr	r2, [r2, #0]
 80121ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80121be:	f043 0301 	orr.w	r3, r3, #1
 80121c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6a1b      	ldr	r3, [r3, #32]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d005      	beq.n	80121d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80121cc:	4b04      	ldr	r3, [pc, #16]	; (80121e0 <HAL_PCD_SuspendCallback+0x48>)
 80121ce:	691b      	ldr	r3, [r3, #16]
 80121d0:	4a03      	ldr	r2, [pc, #12]	; (80121e0 <HAL_PCD_SuspendCallback+0x48>)
 80121d2:	f043 0306 	orr.w	r3, r3, #6
 80121d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80121d8:	bf00      	nop
 80121da:	3708      	adds	r7, #8
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	e000ed00 	.word	0xe000ed00

080121e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fd fc79 	bl	800faea <USBD_LL_Resume>
}
 80121f8:	bf00      	nop
 80121fa:	3708      	adds	r7, #8
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b082      	sub	sp, #8
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	460b      	mov	r3, r1
 801220a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012212:	78fa      	ldrb	r2, [r7, #3]
 8012214:	4611      	mov	r1, r2
 8012216:	4618      	mov	r0, r3
 8012218:	f7fd fcd1 	bl	800fbbe <USBD_LL_IsoOUTIncomplete>
}
 801221c:	bf00      	nop
 801221e:	3708      	adds	r7, #8
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	460b      	mov	r3, r1
 801222e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012236:	78fa      	ldrb	r2, [r7, #3]
 8012238:	4611      	mov	r1, r2
 801223a:	4618      	mov	r0, r3
 801223c:	f7fd fc8d 	bl	800fb5a <USBD_LL_IsoINIncomplete>
}
 8012240:	bf00      	nop
 8012242:	3708      	adds	r7, #8
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012256:	4618      	mov	r0, r3
 8012258:	f7fd fce3 	bl	800fc22 <USBD_LL_DevConnected>
}
 801225c:	bf00      	nop
 801225e:	3708      	adds	r7, #8
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012272:	4618      	mov	r0, r3
 8012274:	f7fd fce0 	bl	800fc38 <USBD_LL_DevDisconnected>
}
 8012278:	bf00      	nop
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	4608      	mov	r0, r1
 801228a:	4611      	mov	r1, r2
 801228c:	461a      	mov	r2, r3
 801228e:	4603      	mov	r3, r0
 8012290:	70fb      	strb	r3, [r7, #3]
 8012292:	460b      	mov	r3, r1
 8012294:	70bb      	strb	r3, [r7, #2]
 8012296:	4613      	mov	r3, r2
 8012298:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801229a:	2300      	movs	r3, #0
 801229c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801229e:	2300      	movs	r3, #0
 80122a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80122a8:	78bb      	ldrb	r3, [r7, #2]
 80122aa:	883a      	ldrh	r2, [r7, #0]
 80122ac:	78f9      	ldrb	r1, [r7, #3]
 80122ae:	f7f6 fe99 	bl	8008fe4 <HAL_PCD_EP_Open>
 80122b2:	4603      	mov	r3, r0
 80122b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122b6:	7bfb      	ldrb	r3, [r7, #15]
 80122b8:	4618      	mov	r0, r3
 80122ba:	f000 f8d3 	bl	8012464 <USBD_Get_USB_Status>
 80122be:	4603      	mov	r3, r0
 80122c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3710      	adds	r7, #16
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}

080122cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b084      	sub	sp, #16
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	460b      	mov	r3, r1
 80122d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122d8:	2300      	movs	r3, #0
 80122da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122dc:	2300      	movs	r3, #0
 80122de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80122e6:	78fa      	ldrb	r2, [r7, #3]
 80122e8:	4611      	mov	r1, r2
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7f6 ff77 	bl	80091de <HAL_PCD_EP_SetStall>
 80122f0:	4603      	mov	r3, r0
 80122f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122f4:	7bfb      	ldrb	r3, [r7, #15]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f000 f8b4 	bl	8012464 <USBD_Get_USB_Status>
 80122fc:	4603      	mov	r3, r0
 80122fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012300:	7bbb      	ldrb	r3, [r7, #14]
}
 8012302:	4618      	mov	r0, r3
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b084      	sub	sp, #16
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
 8012312:	460b      	mov	r3, r1
 8012314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012316:	2300      	movs	r3, #0
 8012318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801231a:	2300      	movs	r3, #0
 801231c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012324:	78fa      	ldrb	r2, [r7, #3]
 8012326:	4611      	mov	r1, r2
 8012328:	4618      	mov	r0, r3
 801232a:	f7f6 ffbc 	bl	80092a6 <HAL_PCD_EP_ClrStall>
 801232e:	4603      	mov	r3, r0
 8012330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	4618      	mov	r0, r3
 8012336:	f000 f895 	bl	8012464 <USBD_Get_USB_Status>
 801233a:	4603      	mov	r3, r0
 801233c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801233e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012340:	4618      	mov	r0, r3
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012348:	b480      	push	{r7}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	460b      	mov	r3, r1
 8012352:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801235a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801235c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012360:	2b00      	cmp	r3, #0
 8012362:	da0b      	bge.n	801237c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012364:	78fb      	ldrb	r3, [r7, #3]
 8012366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801236a:	68f9      	ldr	r1, [r7, #12]
 801236c:	4613      	mov	r3, r2
 801236e:	00db      	lsls	r3, r3, #3
 8012370:	4413      	add	r3, r2
 8012372:	009b      	lsls	r3, r3, #2
 8012374:	440b      	add	r3, r1
 8012376:	333e      	adds	r3, #62	; 0x3e
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	e00b      	b.n	8012394 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801237c:	78fb      	ldrb	r3, [r7, #3]
 801237e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012382:	68f9      	ldr	r1, [r7, #12]
 8012384:	4613      	mov	r3, r2
 8012386:	00db      	lsls	r3, r3, #3
 8012388:	4413      	add	r3, r2
 801238a:	009b      	lsls	r3, r3, #2
 801238c:	440b      	add	r3, r1
 801238e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012392:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012394:	4618      	mov	r0, r3
 8012396:	3714      	adds	r7, #20
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr

080123a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b084      	sub	sp, #16
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	460b      	mov	r3, r1
 80123aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123ac:	2300      	movs	r3, #0
 80123ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123b0:	2300      	movs	r3, #0
 80123b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80123ba:	78fa      	ldrb	r2, [r7, #3]
 80123bc:	4611      	mov	r1, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f7f6 fdeb 	bl	8008f9a <HAL_PCD_SetAddress>
 80123c4:	4603      	mov	r3, r0
 80123c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123c8:	7bfb      	ldrb	r3, [r7, #15]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f000 f84a 	bl	8012464 <USBD_Get_USB_Status>
 80123d0:	4603      	mov	r3, r0
 80123d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b086      	sub	sp, #24
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	60f8      	str	r0, [r7, #12]
 80123e6:	607a      	str	r2, [r7, #4]
 80123e8:	603b      	str	r3, [r7, #0]
 80123ea:	460b      	mov	r3, r1
 80123ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123ee:	2300      	movs	r3, #0
 80123f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123f2:	2300      	movs	r3, #0
 80123f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80123fc:	7af9      	ldrb	r1, [r7, #11]
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	f7f6 fea2 	bl	800914a <HAL_PCD_EP_Transmit>
 8012406:	4603      	mov	r3, r0
 8012408:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801240a:	7dfb      	ldrb	r3, [r7, #23]
 801240c:	4618      	mov	r0, r3
 801240e:	f000 f829 	bl	8012464 <USBD_Get_USB_Status>
 8012412:	4603      	mov	r3, r0
 8012414:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012416:	7dbb      	ldrb	r3, [r7, #22]
}
 8012418:	4618      	mov	r0, r3
 801241a:	3718      	adds	r7, #24
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}

08012420 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b086      	sub	sp, #24
 8012424:	af00      	add	r7, sp, #0
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	607a      	str	r2, [r7, #4]
 801242a:	603b      	str	r3, [r7, #0]
 801242c:	460b      	mov	r3, r1
 801242e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012430:	2300      	movs	r3, #0
 8012432:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012434:	2300      	movs	r3, #0
 8012436:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801243e:	7af9      	ldrb	r1, [r7, #11]
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	f7f6 fe36 	bl	80090b4 <HAL_PCD_EP_Receive>
 8012448:	4603      	mov	r3, r0
 801244a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801244c:	7dfb      	ldrb	r3, [r7, #23]
 801244e:	4618      	mov	r0, r3
 8012450:	f000 f808 	bl	8012464 <USBD_Get_USB_Status>
 8012454:	4603      	mov	r3, r0
 8012456:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012458:	7dbb      	ldrb	r3, [r7, #22]
}
 801245a:	4618      	mov	r0, r3
 801245c:	3718      	adds	r7, #24
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
	...

08012464 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012464:	b480      	push	{r7}
 8012466:	b085      	sub	sp, #20
 8012468:	af00      	add	r7, sp, #0
 801246a:	4603      	mov	r3, r0
 801246c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801246e:	2300      	movs	r3, #0
 8012470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012472:	79fb      	ldrb	r3, [r7, #7]
 8012474:	2b03      	cmp	r3, #3
 8012476:	d817      	bhi.n	80124a8 <USBD_Get_USB_Status+0x44>
 8012478:	a201      	add	r2, pc, #4	; (adr r2, 8012480 <USBD_Get_USB_Status+0x1c>)
 801247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801247e:	bf00      	nop
 8012480:	08012491 	.word	0x08012491
 8012484:	08012497 	.word	0x08012497
 8012488:	0801249d 	.word	0x0801249d
 801248c:	080124a3 	.word	0x080124a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012490:	2300      	movs	r3, #0
 8012492:	73fb      	strb	r3, [r7, #15]
    break;
 8012494:	e00b      	b.n	80124ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012496:	2303      	movs	r3, #3
 8012498:	73fb      	strb	r3, [r7, #15]
    break;
 801249a:	e008      	b.n	80124ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801249c:	2301      	movs	r3, #1
 801249e:	73fb      	strb	r3, [r7, #15]
    break;
 80124a0:	e005      	b.n	80124ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80124a2:	2303      	movs	r3, #3
 80124a4:	73fb      	strb	r3, [r7, #15]
    break;
 80124a6:	e002      	b.n	80124ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80124a8:	2303      	movs	r3, #3
 80124aa:	73fb      	strb	r3, [r7, #15]
    break;
 80124ac:	bf00      	nop
  }
  return usb_status;
 80124ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3714      	adds	r7, #20
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <_Znwj>:
 80124bc:	2801      	cmp	r0, #1
 80124be:	bf38      	it	cc
 80124c0:	2001      	movcc	r0, #1
 80124c2:	b510      	push	{r4, lr}
 80124c4:	4604      	mov	r4, r0
 80124c6:	4620      	mov	r0, r4
 80124c8:	f001 ff9e 	bl	8014408 <malloc>
 80124cc:	b930      	cbnz	r0, 80124dc <_Znwj+0x20>
 80124ce:	f000 f92d 	bl	801272c <_ZSt15get_new_handlerv>
 80124d2:	b908      	cbnz	r0, 80124d8 <_Znwj+0x1c>
 80124d4:	f001 ff62 	bl	801439c <abort>
 80124d8:	4780      	blx	r0
 80124da:	e7f4      	b.n	80124c6 <_Znwj+0xa>
 80124dc:	bd10      	pop	{r4, pc}

080124de <__cxa_pure_virtual>:
 80124de:	b508      	push	{r3, lr}
 80124e0:	f000 f91e 	bl	8012720 <_ZSt9terminatev>

080124e4 <_ZNSaIcEC1Ev>:
 80124e4:	4770      	bx	lr

080124e6 <_ZNSaIcED1Ev>:
 80124e6:	4770      	bx	lr

080124e8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80124e8:	68c3      	ldr	r3, [r0, #12]
 80124ea:	689a      	ldr	r2, [r3, #8]
 80124ec:	60c2      	str	r2, [r0, #12]
 80124ee:	b510      	push	{r4, lr}
 80124f0:	b102      	cbz	r2, 80124f4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80124f2:	6050      	str	r0, [r2, #4]
 80124f4:	6842      	ldr	r2, [r0, #4]
 80124f6:	605a      	str	r2, [r3, #4]
 80124f8:	680c      	ldr	r4, [r1, #0]
 80124fa:	4284      	cmp	r4, r0
 80124fc:	d103      	bne.n	8012506 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80124fe:	600b      	str	r3, [r1, #0]
 8012500:	6098      	str	r0, [r3, #8]
 8012502:	6043      	str	r3, [r0, #4]
 8012504:	bd10      	pop	{r4, pc}
 8012506:	6891      	ldr	r1, [r2, #8]
 8012508:	4281      	cmp	r1, r0
 801250a:	bf0c      	ite	eq
 801250c:	6093      	streq	r3, [r2, #8]
 801250e:	60d3      	strne	r3, [r2, #12]
 8012510:	e7f6      	b.n	8012500 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08012512 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8012512:	6883      	ldr	r3, [r0, #8]
 8012514:	68da      	ldr	r2, [r3, #12]
 8012516:	6082      	str	r2, [r0, #8]
 8012518:	b510      	push	{r4, lr}
 801251a:	b102      	cbz	r2, 801251e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 801251c:	6050      	str	r0, [r2, #4]
 801251e:	6842      	ldr	r2, [r0, #4]
 8012520:	605a      	str	r2, [r3, #4]
 8012522:	680c      	ldr	r4, [r1, #0]
 8012524:	4284      	cmp	r4, r0
 8012526:	d103      	bne.n	8012530 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8012528:	600b      	str	r3, [r1, #0]
 801252a:	60d8      	str	r0, [r3, #12]
 801252c:	6043      	str	r3, [r0, #4]
 801252e:	bd10      	pop	{r4, pc}
 8012530:	68d1      	ldr	r1, [r2, #12]
 8012532:	4281      	cmp	r1, r0
 8012534:	bf0c      	ite	eq
 8012536:	60d3      	streq	r3, [r2, #12]
 8012538:	6093      	strne	r3, [r2, #8]
 801253a:	e7f6      	b.n	801252a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0801253c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801253c:	7803      	ldrb	r3, [r0, #0]
 801253e:	b933      	cbnz	r3, 801254e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8012540:	6843      	ldr	r3, [r0, #4]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	4283      	cmp	r3, r0
 8012546:	d102      	bne.n	801254e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	4618      	mov	r0, r3
 801254c:	4770      	bx	lr
 801254e:	6882      	ldr	r2, [r0, #8]
 8012550:	b122      	cbz	r2, 801255c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8012552:	4613      	mov	r3, r2
 8012554:	68d2      	ldr	r2, [r2, #12]
 8012556:	2a00      	cmp	r2, #0
 8012558:	d1fb      	bne.n	8012552 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 801255a:	e7f6      	b.n	801254a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801255c:	6843      	ldr	r3, [r0, #4]
 801255e:	689a      	ldr	r2, [r3, #8]
 8012560:	4282      	cmp	r2, r0
 8012562:	d1f2      	bne.n	801254a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8012564:	4618      	mov	r0, r3
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	e7f9      	b.n	801255e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0801256a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801256a:	f7ff bfe7 	b.w	801253c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0801256e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 801256e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012572:	461e      	mov	r6, r3
 8012574:	f103 0804 	add.w	r8, r3, #4
 8012578:	2300      	movs	r3, #0
 801257a:	e9c1 3302 	strd	r3, r3, [r1, #8]
 801257e:	460c      	mov	r4, r1
 8012580:	604a      	str	r2, [r1, #4]
 8012582:	700b      	strb	r3, [r1, #0]
 8012584:	b300      	cbz	r0, 80125c8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8012586:	4296      	cmp	r6, r2
 8012588:	6091      	str	r1, [r2, #8]
 801258a:	d118      	bne.n	80125be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 801258c:	6071      	str	r1, [r6, #4]
 801258e:	60f4      	str	r4, [r6, #12]
 8012590:	2701      	movs	r7, #1
 8012592:	f04f 0900 	mov.w	r9, #0
 8012596:	6873      	ldr	r3, [r6, #4]
 8012598:	42a3      	cmp	r3, r4
 801259a:	d03f      	beq.n	801261c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 801259c:	6860      	ldr	r0, [r4, #4]
 801259e:	7802      	ldrb	r2, [r0, #0]
 80125a0:	2a00      	cmp	r2, #0
 80125a2:	d13b      	bne.n	801261c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80125a4:	6845      	ldr	r5, [r0, #4]
 80125a6:	68ab      	ldr	r3, [r5, #8]
 80125a8:	4298      	cmp	r0, r3
 80125aa:	d123      	bne.n	80125f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80125ac:	68eb      	ldr	r3, [r5, #12]
 80125ae:	b183      	cbz	r3, 80125d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80125b0:	781a      	ldrb	r2, [r3, #0]
 80125b2:	b972      	cbnz	r2, 80125d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80125b4:	7007      	strb	r7, [r0, #0]
 80125b6:	701f      	strb	r7, [r3, #0]
 80125b8:	702a      	strb	r2, [r5, #0]
 80125ba:	462c      	mov	r4, r5
 80125bc:	e7eb      	b.n	8012596 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 80125be:	68b3      	ldr	r3, [r6, #8]
 80125c0:	4293      	cmp	r3, r2
 80125c2:	d1e5      	bne.n	8012590 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80125c4:	60b1      	str	r1, [r6, #8]
 80125c6:	e7e3      	b.n	8012590 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80125c8:	60d1      	str	r1, [r2, #12]
 80125ca:	68f3      	ldr	r3, [r6, #12]
 80125cc:	4293      	cmp	r3, r2
 80125ce:	d1df      	bne.n	8012590 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80125d0:	e7dd      	b.n	801258e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80125d2:	68c3      	ldr	r3, [r0, #12]
 80125d4:	42a3      	cmp	r3, r4
 80125d6:	d103      	bne.n	80125e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 80125d8:	4641      	mov	r1, r8
 80125da:	f7ff ff85 	bl	80124e8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80125de:	4604      	mov	r4, r0
 80125e0:	6863      	ldr	r3, [r4, #4]
 80125e2:	4641      	mov	r1, r8
 80125e4:	701f      	strb	r7, [r3, #0]
 80125e6:	4628      	mov	r0, r5
 80125e8:	f885 9000 	strb.w	r9, [r5]
 80125ec:	f7ff ff91 	bl	8012512 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80125f0:	4625      	mov	r5, r4
 80125f2:	e7e2      	b.n	80125ba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80125f4:	b113      	cbz	r3, 80125fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80125f6:	781a      	ldrb	r2, [r3, #0]
 80125f8:	2a00      	cmp	r2, #0
 80125fa:	d0db      	beq.n	80125b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80125fc:	6883      	ldr	r3, [r0, #8]
 80125fe:	42a3      	cmp	r3, r4
 8012600:	d103      	bne.n	801260a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8012602:	4641      	mov	r1, r8
 8012604:	f7ff ff85 	bl	8012512 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8012608:	4604      	mov	r4, r0
 801260a:	6863      	ldr	r3, [r4, #4]
 801260c:	4641      	mov	r1, r8
 801260e:	701f      	strb	r7, [r3, #0]
 8012610:	4628      	mov	r0, r5
 8012612:	f885 9000 	strb.w	r9, [r5]
 8012616:	f7ff ff67 	bl	80124e8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801261a:	e7e9      	b.n	80125f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 801261c:	2201      	movs	r2, #1
 801261e:	701a      	strb	r2, [r3, #0]
 8012620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012624 <_ZSt17__throw_bad_allocv>:
 8012624:	b508      	push	{r3, lr}
 8012626:	f001 feb9 	bl	801439c <abort>

0801262a <_ZSt20__throw_length_errorPKc>:
 801262a:	b508      	push	{r3, lr}
 801262c:	f001 feb6 	bl	801439c <abort>

08012630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8012630:	b508      	push	{r3, lr}
 8012632:	680b      	ldr	r3, [r1, #0]
 8012634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012638:	d302      	bcc.n	8012640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801263a:	480d      	ldr	r0, [pc, #52]	; (8012670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801263c:	f7ff fff5 	bl	801262a <_ZSt20__throw_length_errorPKc>
 8012640:	4293      	cmp	r3, r2
 8012642:	d90b      	bls.n	801265c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012644:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8012648:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801264c:	d206      	bcs.n	801265c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801264e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012652:	bf2a      	itet	cs
 8012654:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8012658:	6008      	strcc	r0, [r1, #0]
 801265a:	600b      	strcs	r3, [r1, #0]
 801265c:	6808      	ldr	r0, [r1, #0]
 801265e:	3001      	adds	r0, #1
 8012660:	d501      	bpl.n	8012666 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8012662:	f7ff ffdf 	bl	8012624 <_ZSt17__throw_bad_allocv>
 8012666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801266a:	f7ff bf27 	b.w	80124bc <_Znwj>
 801266e:	bf00      	nop
 8012670:	08014a04 	.word	0x08014a04

08012674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8012674:	f850 3b08 	ldr.w	r3, [r0], #8
 8012678:	4283      	cmp	r3, r0
 801267a:	d002      	beq.n	8012682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801267c:	4618      	mov	r0, r3
 801267e:	f000 b840 	b.w	8012702 <_ZdlPv>
 8012682:	4770      	bx	lr

08012684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8012684:	460b      	mov	r3, r1
 8012686:	2b01      	cmp	r3, #1
 8012688:	b410      	push	{r4}
 801268a:	4611      	mov	r1, r2
 801268c:	4604      	mov	r4, r0
 801268e:	d103      	bne.n	8012698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8012690:	7022      	strb	r2, [r4, #0]
 8012692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012696:	4770      	bx	lr
 8012698:	2b00      	cmp	r3, #0
 801269a:	d0fa      	beq.n	8012692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801269c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126a0:	461a      	mov	r2, r3
 80126a2:	f001 bec1 	b.w	8014428 <memset>

080126a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 80126a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126a8:	290f      	cmp	r1, #15
 80126aa:	4604      	mov	r4, r0
 80126ac:	9101      	str	r1, [sp, #4]
 80126ae:	4615      	mov	r5, r2
 80126b0:	d906      	bls.n	80126c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 80126b2:	2200      	movs	r2, #0
 80126b4:	a901      	add	r1, sp, #4
 80126b6:	f7ff ffbb 	bl	8012630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80126ba:	9b01      	ldr	r3, [sp, #4]
 80126bc:	6020      	str	r0, [r4, #0]
 80126be:	60a3      	str	r3, [r4, #8]
 80126c0:	9901      	ldr	r1, [sp, #4]
 80126c2:	b119      	cbz	r1, 80126cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 80126c4:	6820      	ldr	r0, [r4, #0]
 80126c6:	462a      	mov	r2, r5
 80126c8:	f7ff ffdc 	bl	8012684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80126cc:	9b01      	ldr	r3, [sp, #4]
 80126ce:	6822      	ldr	r2, [r4, #0]
 80126d0:	6063      	str	r3, [r4, #4]
 80126d2:	2100      	movs	r1, #0
 80126d4:	54d1      	strb	r1, [r2, r3]
 80126d6:	b003      	add	sp, #12
 80126d8:	bd30      	pop	{r4, r5, pc}

080126da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 80126da:	b510      	push	{r4, lr}
 80126dc:	f100 0308 	add.w	r3, r0, #8
 80126e0:	4604      	mov	r4, r0
 80126e2:	6003      	str	r3, [r0, #0]
 80126e4:	f7ff ffdf 	bl	80126a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 80126e8:	4620      	mov	r0, r4
 80126ea:	bd10      	pop	{r4, pc}

080126ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80126ec:	b510      	push	{r4, lr}
 80126ee:	4604      	mov	r4, r0
 80126f0:	f7ff ffc0 	bl	8012674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80126f4:	4620      	mov	r0, r4
 80126f6:	bd10      	pop	{r4, pc}

080126f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80126f8:	6800      	ldr	r0, [r0, #0]
 80126fa:	4408      	add	r0, r1
 80126fc:	4770      	bx	lr

080126fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80126fe:	6800      	ldr	r0, [r0, #0]
 8012700:	4770      	bx	lr

08012702 <_ZdlPv>:
 8012702:	f001 be89 	b.w	8014418 <free>

08012706 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012706:	b508      	push	{r3, lr}
 8012708:	4780      	blx	r0
 801270a:	f001 fe47 	bl	801439c <abort>
	...

08012710 <_ZSt13get_terminatev>:
 8012710:	4b02      	ldr	r3, [pc, #8]	; (801271c <_ZSt13get_terminatev+0xc>)
 8012712:	6818      	ldr	r0, [r3, #0]
 8012714:	f3bf 8f5b 	dmb	ish
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop
 801271c:	20000010 	.word	0x20000010

08012720 <_ZSt9terminatev>:
 8012720:	b508      	push	{r3, lr}
 8012722:	f7ff fff5 	bl	8012710 <_ZSt13get_terminatev>
 8012726:	f7ff ffee 	bl	8012706 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801272c <_ZSt15get_new_handlerv>:
 801272c:	4b02      	ldr	r3, [pc, #8]	; (8012738 <_ZSt15get_new_handlerv+0xc>)
 801272e:	6818      	ldr	r0, [r3, #0]
 8012730:	f3bf 8f5b 	dmb	ish
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop
 8012738:	2000d7a8 	.word	0x2000d7a8

0801273c <tanf>:
 801273c:	ee10 3a10 	vmov	r3, s0
 8012740:	b507      	push	{r0, r1, r2, lr}
 8012742:	4a12      	ldr	r2, [pc, #72]	; (801278c <tanf+0x50>)
 8012744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012748:	4293      	cmp	r3, r2
 801274a:	dc07      	bgt.n	801275c <tanf+0x20>
 801274c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8012790 <tanf+0x54>
 8012750:	2001      	movs	r0, #1
 8012752:	b003      	add	sp, #12
 8012754:	f85d eb04 	ldr.w	lr, [sp], #4
 8012758:	f001 bae4 	b.w	8013d24 <__kernel_tanf>
 801275c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012760:	db04      	blt.n	801276c <tanf+0x30>
 8012762:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012766:	b003      	add	sp, #12
 8012768:	f85d fb04 	ldr.w	pc, [sp], #4
 801276c:	4668      	mov	r0, sp
 801276e:	f000 ff23 	bl	80135b8 <__ieee754_rem_pio2f>
 8012772:	0040      	lsls	r0, r0, #1
 8012774:	f000 0002 	and.w	r0, r0, #2
 8012778:	eddd 0a01 	vldr	s1, [sp, #4]
 801277c:	ed9d 0a00 	vldr	s0, [sp]
 8012780:	f1c0 0001 	rsb	r0, r0, #1
 8012784:	f001 face 	bl	8013d24 <__kernel_tanf>
 8012788:	e7ed      	b.n	8012766 <tanf+0x2a>
 801278a:	bf00      	nop
 801278c:	3f490fda 	.word	0x3f490fda
 8012790:	00000000 	.word	0x00000000

08012794 <pow>:
 8012794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012796:	ed2d 8b02 	vpush	{d8}
 801279a:	eeb0 8a40 	vmov.f32	s16, s0
 801279e:	eef0 8a60 	vmov.f32	s17, s1
 80127a2:	ec55 4b11 	vmov	r4, r5, d1
 80127a6:	f000 f887 	bl	80128b8 <__ieee754_pow>
 80127aa:	4622      	mov	r2, r4
 80127ac:	462b      	mov	r3, r5
 80127ae:	4620      	mov	r0, r4
 80127b0:	4629      	mov	r1, r5
 80127b2:	ec57 6b10 	vmov	r6, r7, d0
 80127b6:	f7ee f969 	bl	8000a8c <__aeabi_dcmpun>
 80127ba:	2800      	cmp	r0, #0
 80127bc:	d13b      	bne.n	8012836 <pow+0xa2>
 80127be:	ec51 0b18 	vmov	r0, r1, d8
 80127c2:	2200      	movs	r2, #0
 80127c4:	2300      	movs	r3, #0
 80127c6:	f7ee f92f 	bl	8000a28 <__aeabi_dcmpeq>
 80127ca:	b1b8      	cbz	r0, 80127fc <pow+0x68>
 80127cc:	2200      	movs	r2, #0
 80127ce:	2300      	movs	r3, #0
 80127d0:	4620      	mov	r0, r4
 80127d2:	4629      	mov	r1, r5
 80127d4:	f7ee f928 	bl	8000a28 <__aeabi_dcmpeq>
 80127d8:	2800      	cmp	r0, #0
 80127da:	d146      	bne.n	801286a <pow+0xd6>
 80127dc:	ec45 4b10 	vmov	d0, r4, r5
 80127e0:	f001 fbb9 	bl	8013f56 <finite>
 80127e4:	b338      	cbz	r0, 8012836 <pow+0xa2>
 80127e6:	2200      	movs	r2, #0
 80127e8:	2300      	movs	r3, #0
 80127ea:	4620      	mov	r0, r4
 80127ec:	4629      	mov	r1, r5
 80127ee:	f7ee f925 	bl	8000a3c <__aeabi_dcmplt>
 80127f2:	b300      	cbz	r0, 8012836 <pow+0xa2>
 80127f4:	f001 fdde 	bl	80143b4 <__errno>
 80127f8:	2322      	movs	r3, #34	; 0x22
 80127fa:	e01b      	b.n	8012834 <pow+0xa0>
 80127fc:	ec47 6b10 	vmov	d0, r6, r7
 8012800:	f001 fba9 	bl	8013f56 <finite>
 8012804:	b9e0      	cbnz	r0, 8012840 <pow+0xac>
 8012806:	eeb0 0a48 	vmov.f32	s0, s16
 801280a:	eef0 0a68 	vmov.f32	s1, s17
 801280e:	f001 fba2 	bl	8013f56 <finite>
 8012812:	b1a8      	cbz	r0, 8012840 <pow+0xac>
 8012814:	ec45 4b10 	vmov	d0, r4, r5
 8012818:	f001 fb9d 	bl	8013f56 <finite>
 801281c:	b180      	cbz	r0, 8012840 <pow+0xac>
 801281e:	4632      	mov	r2, r6
 8012820:	463b      	mov	r3, r7
 8012822:	4630      	mov	r0, r6
 8012824:	4639      	mov	r1, r7
 8012826:	f7ee f931 	bl	8000a8c <__aeabi_dcmpun>
 801282a:	2800      	cmp	r0, #0
 801282c:	d0e2      	beq.n	80127f4 <pow+0x60>
 801282e:	f001 fdc1 	bl	80143b4 <__errno>
 8012832:	2321      	movs	r3, #33	; 0x21
 8012834:	6003      	str	r3, [r0, #0]
 8012836:	ecbd 8b02 	vpop	{d8}
 801283a:	ec47 6b10 	vmov	d0, r6, r7
 801283e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012840:	2200      	movs	r2, #0
 8012842:	2300      	movs	r3, #0
 8012844:	4630      	mov	r0, r6
 8012846:	4639      	mov	r1, r7
 8012848:	f7ee f8ee 	bl	8000a28 <__aeabi_dcmpeq>
 801284c:	2800      	cmp	r0, #0
 801284e:	d0f2      	beq.n	8012836 <pow+0xa2>
 8012850:	eeb0 0a48 	vmov.f32	s0, s16
 8012854:	eef0 0a68 	vmov.f32	s1, s17
 8012858:	f001 fb7d 	bl	8013f56 <finite>
 801285c:	2800      	cmp	r0, #0
 801285e:	d0ea      	beq.n	8012836 <pow+0xa2>
 8012860:	ec45 4b10 	vmov	d0, r4, r5
 8012864:	f001 fb77 	bl	8013f56 <finite>
 8012868:	e7c3      	b.n	80127f2 <pow+0x5e>
 801286a:	4f01      	ldr	r7, [pc, #4]	; (8012870 <pow+0xdc>)
 801286c:	2600      	movs	r6, #0
 801286e:	e7e2      	b.n	8012836 <pow+0xa2>
 8012870:	3ff00000 	.word	0x3ff00000

08012874 <atan2f>:
 8012874:	f000 be00 	b.w	8013478 <__ieee754_atan2f>

08012878 <sqrtf>:
 8012878:	b508      	push	{r3, lr}
 801287a:	ed2d 8b02 	vpush	{d8}
 801287e:	eeb0 8a40 	vmov.f32	s16, s0
 8012882:	f000 ffd5 	bl	8013830 <__ieee754_sqrtf>
 8012886:	eeb4 8a48 	vcmp.f32	s16, s16
 801288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801288e:	d60c      	bvs.n	80128aa <sqrtf+0x32>
 8012890:	eddf 8a07 	vldr	s17, [pc, #28]	; 80128b0 <sqrtf+0x38>
 8012894:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801289c:	d505      	bpl.n	80128aa <sqrtf+0x32>
 801289e:	f001 fd89 	bl	80143b4 <__errno>
 80128a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80128a6:	2321      	movs	r3, #33	; 0x21
 80128a8:	6003      	str	r3, [r0, #0]
 80128aa:	ecbd 8b02 	vpop	{d8}
 80128ae:	bd08      	pop	{r3, pc}
	...

080128b8 <__ieee754_pow>:
 80128b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128bc:	ed2d 8b06 	vpush	{d8-d10}
 80128c0:	b089      	sub	sp, #36	; 0x24
 80128c2:	ed8d 1b00 	vstr	d1, [sp]
 80128c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80128ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80128ce:	ea58 0102 	orrs.w	r1, r8, r2
 80128d2:	ec57 6b10 	vmov	r6, r7, d0
 80128d6:	d115      	bne.n	8012904 <__ieee754_pow+0x4c>
 80128d8:	19b3      	adds	r3, r6, r6
 80128da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80128de:	4152      	adcs	r2, r2
 80128e0:	4299      	cmp	r1, r3
 80128e2:	4b89      	ldr	r3, [pc, #548]	; (8012b08 <__ieee754_pow+0x250>)
 80128e4:	4193      	sbcs	r3, r2
 80128e6:	f080 84d2 	bcs.w	801328e <__ieee754_pow+0x9d6>
 80128ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128ee:	4630      	mov	r0, r6
 80128f0:	4639      	mov	r1, r7
 80128f2:	f7ed fc7b 	bl	80001ec <__adddf3>
 80128f6:	ec41 0b10 	vmov	d0, r0, r1
 80128fa:	b009      	add	sp, #36	; 0x24
 80128fc:	ecbd 8b06 	vpop	{d8-d10}
 8012900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012904:	4b81      	ldr	r3, [pc, #516]	; (8012b0c <__ieee754_pow+0x254>)
 8012906:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801290a:	429c      	cmp	r4, r3
 801290c:	ee10 aa10 	vmov	sl, s0
 8012910:	463d      	mov	r5, r7
 8012912:	dc06      	bgt.n	8012922 <__ieee754_pow+0x6a>
 8012914:	d101      	bne.n	801291a <__ieee754_pow+0x62>
 8012916:	2e00      	cmp	r6, #0
 8012918:	d1e7      	bne.n	80128ea <__ieee754_pow+0x32>
 801291a:	4598      	cmp	r8, r3
 801291c:	dc01      	bgt.n	8012922 <__ieee754_pow+0x6a>
 801291e:	d10f      	bne.n	8012940 <__ieee754_pow+0x88>
 8012920:	b172      	cbz	r2, 8012940 <__ieee754_pow+0x88>
 8012922:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012926:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801292a:	ea55 050a 	orrs.w	r5, r5, sl
 801292e:	d1dc      	bne.n	80128ea <__ieee754_pow+0x32>
 8012930:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012934:	18db      	adds	r3, r3, r3
 8012936:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801293a:	4152      	adcs	r2, r2
 801293c:	429d      	cmp	r5, r3
 801293e:	e7d0      	b.n	80128e2 <__ieee754_pow+0x2a>
 8012940:	2d00      	cmp	r5, #0
 8012942:	da3b      	bge.n	80129bc <__ieee754_pow+0x104>
 8012944:	4b72      	ldr	r3, [pc, #456]	; (8012b10 <__ieee754_pow+0x258>)
 8012946:	4598      	cmp	r8, r3
 8012948:	dc51      	bgt.n	80129ee <__ieee754_pow+0x136>
 801294a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801294e:	4598      	cmp	r8, r3
 8012950:	f340 84ac 	ble.w	80132ac <__ieee754_pow+0x9f4>
 8012954:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012958:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801295c:	2b14      	cmp	r3, #20
 801295e:	dd0f      	ble.n	8012980 <__ieee754_pow+0xc8>
 8012960:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012964:	fa22 f103 	lsr.w	r1, r2, r3
 8012968:	fa01 f303 	lsl.w	r3, r1, r3
 801296c:	4293      	cmp	r3, r2
 801296e:	f040 849d 	bne.w	80132ac <__ieee754_pow+0x9f4>
 8012972:	f001 0101 	and.w	r1, r1, #1
 8012976:	f1c1 0302 	rsb	r3, r1, #2
 801297a:	9304      	str	r3, [sp, #16]
 801297c:	b182      	cbz	r2, 80129a0 <__ieee754_pow+0xe8>
 801297e:	e05f      	b.n	8012a40 <__ieee754_pow+0x188>
 8012980:	2a00      	cmp	r2, #0
 8012982:	d15b      	bne.n	8012a3c <__ieee754_pow+0x184>
 8012984:	f1c3 0314 	rsb	r3, r3, #20
 8012988:	fa48 f103 	asr.w	r1, r8, r3
 801298c:	fa01 f303 	lsl.w	r3, r1, r3
 8012990:	4543      	cmp	r3, r8
 8012992:	f040 8488 	bne.w	80132a6 <__ieee754_pow+0x9ee>
 8012996:	f001 0101 	and.w	r1, r1, #1
 801299a:	f1c1 0302 	rsb	r3, r1, #2
 801299e:	9304      	str	r3, [sp, #16]
 80129a0:	4b5c      	ldr	r3, [pc, #368]	; (8012b14 <__ieee754_pow+0x25c>)
 80129a2:	4598      	cmp	r8, r3
 80129a4:	d132      	bne.n	8012a0c <__ieee754_pow+0x154>
 80129a6:	f1b9 0f00 	cmp.w	r9, #0
 80129aa:	f280 8478 	bge.w	801329e <__ieee754_pow+0x9e6>
 80129ae:	4959      	ldr	r1, [pc, #356]	; (8012b14 <__ieee754_pow+0x25c>)
 80129b0:	4632      	mov	r2, r6
 80129b2:	463b      	mov	r3, r7
 80129b4:	2000      	movs	r0, #0
 80129b6:	f7ed fef9 	bl	80007ac <__aeabi_ddiv>
 80129ba:	e79c      	b.n	80128f6 <__ieee754_pow+0x3e>
 80129bc:	2300      	movs	r3, #0
 80129be:	9304      	str	r3, [sp, #16]
 80129c0:	2a00      	cmp	r2, #0
 80129c2:	d13d      	bne.n	8012a40 <__ieee754_pow+0x188>
 80129c4:	4b51      	ldr	r3, [pc, #324]	; (8012b0c <__ieee754_pow+0x254>)
 80129c6:	4598      	cmp	r8, r3
 80129c8:	d1ea      	bne.n	80129a0 <__ieee754_pow+0xe8>
 80129ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80129ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80129d2:	ea53 030a 	orrs.w	r3, r3, sl
 80129d6:	f000 845a 	beq.w	801328e <__ieee754_pow+0x9d6>
 80129da:	4b4f      	ldr	r3, [pc, #316]	; (8012b18 <__ieee754_pow+0x260>)
 80129dc:	429c      	cmp	r4, r3
 80129de:	dd08      	ble.n	80129f2 <__ieee754_pow+0x13a>
 80129e0:	f1b9 0f00 	cmp.w	r9, #0
 80129e4:	f2c0 8457 	blt.w	8013296 <__ieee754_pow+0x9de>
 80129e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129ec:	e783      	b.n	80128f6 <__ieee754_pow+0x3e>
 80129ee:	2302      	movs	r3, #2
 80129f0:	e7e5      	b.n	80129be <__ieee754_pow+0x106>
 80129f2:	f1b9 0f00 	cmp.w	r9, #0
 80129f6:	f04f 0000 	mov.w	r0, #0
 80129fa:	f04f 0100 	mov.w	r1, #0
 80129fe:	f6bf af7a 	bge.w	80128f6 <__ieee754_pow+0x3e>
 8012a02:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012a06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012a0a:	e774      	b.n	80128f6 <__ieee754_pow+0x3e>
 8012a0c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012a10:	d106      	bne.n	8012a20 <__ieee754_pow+0x168>
 8012a12:	4632      	mov	r2, r6
 8012a14:	463b      	mov	r3, r7
 8012a16:	4630      	mov	r0, r6
 8012a18:	4639      	mov	r1, r7
 8012a1a:	f7ed fd9d 	bl	8000558 <__aeabi_dmul>
 8012a1e:	e76a      	b.n	80128f6 <__ieee754_pow+0x3e>
 8012a20:	4b3e      	ldr	r3, [pc, #248]	; (8012b1c <__ieee754_pow+0x264>)
 8012a22:	4599      	cmp	r9, r3
 8012a24:	d10c      	bne.n	8012a40 <__ieee754_pow+0x188>
 8012a26:	2d00      	cmp	r5, #0
 8012a28:	db0a      	blt.n	8012a40 <__ieee754_pow+0x188>
 8012a2a:	ec47 6b10 	vmov	d0, r6, r7
 8012a2e:	b009      	add	sp, #36	; 0x24
 8012a30:	ecbd 8b06 	vpop	{d8-d10}
 8012a34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a38:	f000 bc6c 	b.w	8013314 <__ieee754_sqrt>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	9304      	str	r3, [sp, #16]
 8012a40:	ec47 6b10 	vmov	d0, r6, r7
 8012a44:	f001 fa7e 	bl	8013f44 <fabs>
 8012a48:	ec51 0b10 	vmov	r0, r1, d0
 8012a4c:	f1ba 0f00 	cmp.w	sl, #0
 8012a50:	d129      	bne.n	8012aa6 <__ieee754_pow+0x1ee>
 8012a52:	b124      	cbz	r4, 8012a5e <__ieee754_pow+0x1a6>
 8012a54:	4b2f      	ldr	r3, [pc, #188]	; (8012b14 <__ieee754_pow+0x25c>)
 8012a56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d123      	bne.n	8012aa6 <__ieee754_pow+0x1ee>
 8012a5e:	f1b9 0f00 	cmp.w	r9, #0
 8012a62:	da05      	bge.n	8012a70 <__ieee754_pow+0x1b8>
 8012a64:	4602      	mov	r2, r0
 8012a66:	460b      	mov	r3, r1
 8012a68:	2000      	movs	r0, #0
 8012a6a:	492a      	ldr	r1, [pc, #168]	; (8012b14 <__ieee754_pow+0x25c>)
 8012a6c:	f7ed fe9e 	bl	80007ac <__aeabi_ddiv>
 8012a70:	2d00      	cmp	r5, #0
 8012a72:	f6bf af40 	bge.w	80128f6 <__ieee754_pow+0x3e>
 8012a76:	9b04      	ldr	r3, [sp, #16]
 8012a78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012a7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012a80:	4323      	orrs	r3, r4
 8012a82:	d108      	bne.n	8012a96 <__ieee754_pow+0x1de>
 8012a84:	4602      	mov	r2, r0
 8012a86:	460b      	mov	r3, r1
 8012a88:	4610      	mov	r0, r2
 8012a8a:	4619      	mov	r1, r3
 8012a8c:	f7ed fbac 	bl	80001e8 <__aeabi_dsub>
 8012a90:	4602      	mov	r2, r0
 8012a92:	460b      	mov	r3, r1
 8012a94:	e78f      	b.n	80129b6 <__ieee754_pow+0xfe>
 8012a96:	9b04      	ldr	r3, [sp, #16]
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	f47f af2c 	bne.w	80128f6 <__ieee754_pow+0x3e>
 8012a9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	e727      	b.n	80128f6 <__ieee754_pow+0x3e>
 8012aa6:	0feb      	lsrs	r3, r5, #31
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	9306      	str	r3, [sp, #24]
 8012aac:	9a06      	ldr	r2, [sp, #24]
 8012aae:	9b04      	ldr	r3, [sp, #16]
 8012ab0:	4313      	orrs	r3, r2
 8012ab2:	d102      	bne.n	8012aba <__ieee754_pow+0x202>
 8012ab4:	4632      	mov	r2, r6
 8012ab6:	463b      	mov	r3, r7
 8012ab8:	e7e6      	b.n	8012a88 <__ieee754_pow+0x1d0>
 8012aba:	4b19      	ldr	r3, [pc, #100]	; (8012b20 <__ieee754_pow+0x268>)
 8012abc:	4598      	cmp	r8, r3
 8012abe:	f340 80fb 	ble.w	8012cb8 <__ieee754_pow+0x400>
 8012ac2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012ac6:	4598      	cmp	r8, r3
 8012ac8:	4b13      	ldr	r3, [pc, #76]	; (8012b18 <__ieee754_pow+0x260>)
 8012aca:	dd0c      	ble.n	8012ae6 <__ieee754_pow+0x22e>
 8012acc:	429c      	cmp	r4, r3
 8012ace:	dc0f      	bgt.n	8012af0 <__ieee754_pow+0x238>
 8012ad0:	f1b9 0f00 	cmp.w	r9, #0
 8012ad4:	da0f      	bge.n	8012af6 <__ieee754_pow+0x23e>
 8012ad6:	2000      	movs	r0, #0
 8012ad8:	b009      	add	sp, #36	; 0x24
 8012ada:	ecbd 8b06 	vpop	{d8-d10}
 8012ade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae2:	f001 ba26 	b.w	8013f32 <__math_oflow>
 8012ae6:	429c      	cmp	r4, r3
 8012ae8:	dbf2      	blt.n	8012ad0 <__ieee754_pow+0x218>
 8012aea:	4b0a      	ldr	r3, [pc, #40]	; (8012b14 <__ieee754_pow+0x25c>)
 8012aec:	429c      	cmp	r4, r3
 8012aee:	dd19      	ble.n	8012b24 <__ieee754_pow+0x26c>
 8012af0:	f1b9 0f00 	cmp.w	r9, #0
 8012af4:	dcef      	bgt.n	8012ad6 <__ieee754_pow+0x21e>
 8012af6:	2000      	movs	r0, #0
 8012af8:	b009      	add	sp, #36	; 0x24
 8012afa:	ecbd 8b06 	vpop	{d8-d10}
 8012afe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b02:	f001 ba0d 	b.w	8013f20 <__math_uflow>
 8012b06:	bf00      	nop
 8012b08:	fff00000 	.word	0xfff00000
 8012b0c:	7ff00000 	.word	0x7ff00000
 8012b10:	433fffff 	.word	0x433fffff
 8012b14:	3ff00000 	.word	0x3ff00000
 8012b18:	3fefffff 	.word	0x3fefffff
 8012b1c:	3fe00000 	.word	0x3fe00000
 8012b20:	41e00000 	.word	0x41e00000
 8012b24:	4b60      	ldr	r3, [pc, #384]	; (8012ca8 <__ieee754_pow+0x3f0>)
 8012b26:	2200      	movs	r2, #0
 8012b28:	f7ed fb5e 	bl	80001e8 <__aeabi_dsub>
 8012b2c:	a354      	add	r3, pc, #336	; (adr r3, 8012c80 <__ieee754_pow+0x3c8>)
 8012b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b32:	4604      	mov	r4, r0
 8012b34:	460d      	mov	r5, r1
 8012b36:	f7ed fd0f 	bl	8000558 <__aeabi_dmul>
 8012b3a:	a353      	add	r3, pc, #332	; (adr r3, 8012c88 <__ieee754_pow+0x3d0>)
 8012b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b40:	4606      	mov	r6, r0
 8012b42:	460f      	mov	r7, r1
 8012b44:	4620      	mov	r0, r4
 8012b46:	4629      	mov	r1, r5
 8012b48:	f7ed fd06 	bl	8000558 <__aeabi_dmul>
 8012b4c:	4b57      	ldr	r3, [pc, #348]	; (8012cac <__ieee754_pow+0x3f4>)
 8012b4e:	4682      	mov	sl, r0
 8012b50:	468b      	mov	fp, r1
 8012b52:	2200      	movs	r2, #0
 8012b54:	4620      	mov	r0, r4
 8012b56:	4629      	mov	r1, r5
 8012b58:	f7ed fcfe 	bl	8000558 <__aeabi_dmul>
 8012b5c:	4602      	mov	r2, r0
 8012b5e:	460b      	mov	r3, r1
 8012b60:	a14b      	add	r1, pc, #300	; (adr r1, 8012c90 <__ieee754_pow+0x3d8>)
 8012b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b66:	f7ed fb3f 	bl	80001e8 <__aeabi_dsub>
 8012b6a:	4622      	mov	r2, r4
 8012b6c:	462b      	mov	r3, r5
 8012b6e:	f7ed fcf3 	bl	8000558 <__aeabi_dmul>
 8012b72:	4602      	mov	r2, r0
 8012b74:	460b      	mov	r3, r1
 8012b76:	2000      	movs	r0, #0
 8012b78:	494d      	ldr	r1, [pc, #308]	; (8012cb0 <__ieee754_pow+0x3f8>)
 8012b7a:	f7ed fb35 	bl	80001e8 <__aeabi_dsub>
 8012b7e:	4622      	mov	r2, r4
 8012b80:	4680      	mov	r8, r0
 8012b82:	4689      	mov	r9, r1
 8012b84:	462b      	mov	r3, r5
 8012b86:	4620      	mov	r0, r4
 8012b88:	4629      	mov	r1, r5
 8012b8a:	f7ed fce5 	bl	8000558 <__aeabi_dmul>
 8012b8e:	4602      	mov	r2, r0
 8012b90:	460b      	mov	r3, r1
 8012b92:	4640      	mov	r0, r8
 8012b94:	4649      	mov	r1, r9
 8012b96:	f7ed fcdf 	bl	8000558 <__aeabi_dmul>
 8012b9a:	a33f      	add	r3, pc, #252	; (adr r3, 8012c98 <__ieee754_pow+0x3e0>)
 8012b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba0:	f7ed fcda 	bl	8000558 <__aeabi_dmul>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	460b      	mov	r3, r1
 8012ba8:	4650      	mov	r0, sl
 8012baa:	4659      	mov	r1, fp
 8012bac:	f7ed fb1c 	bl	80001e8 <__aeabi_dsub>
 8012bb0:	4602      	mov	r2, r0
 8012bb2:	460b      	mov	r3, r1
 8012bb4:	4680      	mov	r8, r0
 8012bb6:	4689      	mov	r9, r1
 8012bb8:	4630      	mov	r0, r6
 8012bba:	4639      	mov	r1, r7
 8012bbc:	f7ed fb16 	bl	80001ec <__adddf3>
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	4632      	mov	r2, r6
 8012bc4:	463b      	mov	r3, r7
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	460d      	mov	r5, r1
 8012bca:	f7ed fb0d 	bl	80001e8 <__aeabi_dsub>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	4640      	mov	r0, r8
 8012bd4:	4649      	mov	r1, r9
 8012bd6:	f7ed fb07 	bl	80001e8 <__aeabi_dsub>
 8012bda:	9b04      	ldr	r3, [sp, #16]
 8012bdc:	9a06      	ldr	r2, [sp, #24]
 8012bde:	3b01      	subs	r3, #1
 8012be0:	4313      	orrs	r3, r2
 8012be2:	4682      	mov	sl, r0
 8012be4:	468b      	mov	fp, r1
 8012be6:	f040 81e7 	bne.w	8012fb8 <__ieee754_pow+0x700>
 8012bea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012ca0 <__ieee754_pow+0x3e8>
 8012bee:	eeb0 8a47 	vmov.f32	s16, s14
 8012bf2:	eef0 8a67 	vmov.f32	s17, s15
 8012bf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012bfa:	2600      	movs	r6, #0
 8012bfc:	4632      	mov	r2, r6
 8012bfe:	463b      	mov	r3, r7
 8012c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c04:	f7ed faf0 	bl	80001e8 <__aeabi_dsub>
 8012c08:	4622      	mov	r2, r4
 8012c0a:	462b      	mov	r3, r5
 8012c0c:	f7ed fca4 	bl	8000558 <__aeabi_dmul>
 8012c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c14:	4680      	mov	r8, r0
 8012c16:	4689      	mov	r9, r1
 8012c18:	4650      	mov	r0, sl
 8012c1a:	4659      	mov	r1, fp
 8012c1c:	f7ed fc9c 	bl	8000558 <__aeabi_dmul>
 8012c20:	4602      	mov	r2, r0
 8012c22:	460b      	mov	r3, r1
 8012c24:	4640      	mov	r0, r8
 8012c26:	4649      	mov	r1, r9
 8012c28:	f7ed fae0 	bl	80001ec <__adddf3>
 8012c2c:	4632      	mov	r2, r6
 8012c2e:	463b      	mov	r3, r7
 8012c30:	4680      	mov	r8, r0
 8012c32:	4689      	mov	r9, r1
 8012c34:	4620      	mov	r0, r4
 8012c36:	4629      	mov	r1, r5
 8012c38:	f7ed fc8e 	bl	8000558 <__aeabi_dmul>
 8012c3c:	460b      	mov	r3, r1
 8012c3e:	4604      	mov	r4, r0
 8012c40:	460d      	mov	r5, r1
 8012c42:	4602      	mov	r2, r0
 8012c44:	4649      	mov	r1, r9
 8012c46:	4640      	mov	r0, r8
 8012c48:	f7ed fad0 	bl	80001ec <__adddf3>
 8012c4c:	4b19      	ldr	r3, [pc, #100]	; (8012cb4 <__ieee754_pow+0x3fc>)
 8012c4e:	4299      	cmp	r1, r3
 8012c50:	ec45 4b19 	vmov	d9, r4, r5
 8012c54:	4606      	mov	r6, r0
 8012c56:	460f      	mov	r7, r1
 8012c58:	468b      	mov	fp, r1
 8012c5a:	f340 82f1 	ble.w	8013240 <__ieee754_pow+0x988>
 8012c5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012c62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012c66:	4303      	orrs	r3, r0
 8012c68:	f000 81e4 	beq.w	8013034 <__ieee754_pow+0x77c>
 8012c6c:	ec51 0b18 	vmov	r0, r1, d8
 8012c70:	2200      	movs	r2, #0
 8012c72:	2300      	movs	r3, #0
 8012c74:	f7ed fee2 	bl	8000a3c <__aeabi_dcmplt>
 8012c78:	3800      	subs	r0, #0
 8012c7a:	bf18      	it	ne
 8012c7c:	2001      	movne	r0, #1
 8012c7e:	e72b      	b.n	8012ad8 <__ieee754_pow+0x220>
 8012c80:	60000000 	.word	0x60000000
 8012c84:	3ff71547 	.word	0x3ff71547
 8012c88:	f85ddf44 	.word	0xf85ddf44
 8012c8c:	3e54ae0b 	.word	0x3e54ae0b
 8012c90:	55555555 	.word	0x55555555
 8012c94:	3fd55555 	.word	0x3fd55555
 8012c98:	652b82fe 	.word	0x652b82fe
 8012c9c:	3ff71547 	.word	0x3ff71547
 8012ca0:	00000000 	.word	0x00000000
 8012ca4:	bff00000 	.word	0xbff00000
 8012ca8:	3ff00000 	.word	0x3ff00000
 8012cac:	3fd00000 	.word	0x3fd00000
 8012cb0:	3fe00000 	.word	0x3fe00000
 8012cb4:	408fffff 	.word	0x408fffff
 8012cb8:	4bd5      	ldr	r3, [pc, #852]	; (8013010 <__ieee754_pow+0x758>)
 8012cba:	402b      	ands	r3, r5
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	b92b      	cbnz	r3, 8012ccc <__ieee754_pow+0x414>
 8012cc0:	4bd4      	ldr	r3, [pc, #848]	; (8013014 <__ieee754_pow+0x75c>)
 8012cc2:	f7ed fc49 	bl	8000558 <__aeabi_dmul>
 8012cc6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012cca:	460c      	mov	r4, r1
 8012ccc:	1523      	asrs	r3, r4, #20
 8012cce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012cd2:	4413      	add	r3, r2
 8012cd4:	9305      	str	r3, [sp, #20]
 8012cd6:	4bd0      	ldr	r3, [pc, #832]	; (8013018 <__ieee754_pow+0x760>)
 8012cd8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012cdc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012ce0:	429c      	cmp	r4, r3
 8012ce2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012ce6:	dd08      	ble.n	8012cfa <__ieee754_pow+0x442>
 8012ce8:	4bcc      	ldr	r3, [pc, #816]	; (801301c <__ieee754_pow+0x764>)
 8012cea:	429c      	cmp	r4, r3
 8012cec:	f340 8162 	ble.w	8012fb4 <__ieee754_pow+0x6fc>
 8012cf0:	9b05      	ldr	r3, [sp, #20]
 8012cf2:	3301      	adds	r3, #1
 8012cf4:	9305      	str	r3, [sp, #20]
 8012cf6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012cfa:	2400      	movs	r4, #0
 8012cfc:	00e3      	lsls	r3, r4, #3
 8012cfe:	9307      	str	r3, [sp, #28]
 8012d00:	4bc7      	ldr	r3, [pc, #796]	; (8013020 <__ieee754_pow+0x768>)
 8012d02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012d06:	ed93 7b00 	vldr	d7, [r3]
 8012d0a:	4629      	mov	r1, r5
 8012d0c:	ec53 2b17 	vmov	r2, r3, d7
 8012d10:	eeb0 9a47 	vmov.f32	s18, s14
 8012d14:	eef0 9a67 	vmov.f32	s19, s15
 8012d18:	4682      	mov	sl, r0
 8012d1a:	f7ed fa65 	bl	80001e8 <__aeabi_dsub>
 8012d1e:	4652      	mov	r2, sl
 8012d20:	4606      	mov	r6, r0
 8012d22:	460f      	mov	r7, r1
 8012d24:	462b      	mov	r3, r5
 8012d26:	ec51 0b19 	vmov	r0, r1, d9
 8012d2a:	f7ed fa5f 	bl	80001ec <__adddf3>
 8012d2e:	4602      	mov	r2, r0
 8012d30:	460b      	mov	r3, r1
 8012d32:	2000      	movs	r0, #0
 8012d34:	49bb      	ldr	r1, [pc, #748]	; (8013024 <__ieee754_pow+0x76c>)
 8012d36:	f7ed fd39 	bl	80007ac <__aeabi_ddiv>
 8012d3a:	ec41 0b1a 	vmov	d10, r0, r1
 8012d3e:	4602      	mov	r2, r0
 8012d40:	460b      	mov	r3, r1
 8012d42:	4630      	mov	r0, r6
 8012d44:	4639      	mov	r1, r7
 8012d46:	f7ed fc07 	bl	8000558 <__aeabi_dmul>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d50:	9302      	str	r3, [sp, #8]
 8012d52:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012d56:	46ab      	mov	fp, r5
 8012d58:	106d      	asrs	r5, r5, #1
 8012d5a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012d5e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012d62:	ec41 0b18 	vmov	d8, r0, r1
 8012d66:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	4640      	mov	r0, r8
 8012d6e:	4649      	mov	r1, r9
 8012d70:	4614      	mov	r4, r2
 8012d72:	461d      	mov	r5, r3
 8012d74:	f7ed fbf0 	bl	8000558 <__aeabi_dmul>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	4639      	mov	r1, r7
 8012d80:	f7ed fa32 	bl	80001e8 <__aeabi_dsub>
 8012d84:	ec53 2b19 	vmov	r2, r3, d9
 8012d88:	4606      	mov	r6, r0
 8012d8a:	460f      	mov	r7, r1
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	4629      	mov	r1, r5
 8012d90:	f7ed fa2a 	bl	80001e8 <__aeabi_dsub>
 8012d94:	4602      	mov	r2, r0
 8012d96:	460b      	mov	r3, r1
 8012d98:	4650      	mov	r0, sl
 8012d9a:	4659      	mov	r1, fp
 8012d9c:	f7ed fa24 	bl	80001e8 <__aeabi_dsub>
 8012da0:	4642      	mov	r2, r8
 8012da2:	464b      	mov	r3, r9
 8012da4:	f7ed fbd8 	bl	8000558 <__aeabi_dmul>
 8012da8:	4602      	mov	r2, r0
 8012daa:	460b      	mov	r3, r1
 8012dac:	4630      	mov	r0, r6
 8012dae:	4639      	mov	r1, r7
 8012db0:	f7ed fa1a 	bl	80001e8 <__aeabi_dsub>
 8012db4:	ec53 2b1a 	vmov	r2, r3, d10
 8012db8:	f7ed fbce 	bl	8000558 <__aeabi_dmul>
 8012dbc:	ec53 2b18 	vmov	r2, r3, d8
 8012dc0:	ec41 0b19 	vmov	d9, r0, r1
 8012dc4:	ec51 0b18 	vmov	r0, r1, d8
 8012dc8:	f7ed fbc6 	bl	8000558 <__aeabi_dmul>
 8012dcc:	a37c      	add	r3, pc, #496	; (adr r3, 8012fc0 <__ieee754_pow+0x708>)
 8012dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	460d      	mov	r5, r1
 8012dd6:	f7ed fbbf 	bl	8000558 <__aeabi_dmul>
 8012dda:	a37b      	add	r3, pc, #492	; (adr r3, 8012fc8 <__ieee754_pow+0x710>)
 8012ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de0:	f7ed fa04 	bl	80001ec <__adddf3>
 8012de4:	4622      	mov	r2, r4
 8012de6:	462b      	mov	r3, r5
 8012de8:	f7ed fbb6 	bl	8000558 <__aeabi_dmul>
 8012dec:	a378      	add	r3, pc, #480	; (adr r3, 8012fd0 <__ieee754_pow+0x718>)
 8012dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df2:	f7ed f9fb 	bl	80001ec <__adddf3>
 8012df6:	4622      	mov	r2, r4
 8012df8:	462b      	mov	r3, r5
 8012dfa:	f7ed fbad 	bl	8000558 <__aeabi_dmul>
 8012dfe:	a376      	add	r3, pc, #472	; (adr r3, 8012fd8 <__ieee754_pow+0x720>)
 8012e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e04:	f7ed f9f2 	bl	80001ec <__adddf3>
 8012e08:	4622      	mov	r2, r4
 8012e0a:	462b      	mov	r3, r5
 8012e0c:	f7ed fba4 	bl	8000558 <__aeabi_dmul>
 8012e10:	a373      	add	r3, pc, #460	; (adr r3, 8012fe0 <__ieee754_pow+0x728>)
 8012e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e16:	f7ed f9e9 	bl	80001ec <__adddf3>
 8012e1a:	4622      	mov	r2, r4
 8012e1c:	462b      	mov	r3, r5
 8012e1e:	f7ed fb9b 	bl	8000558 <__aeabi_dmul>
 8012e22:	a371      	add	r3, pc, #452	; (adr r3, 8012fe8 <__ieee754_pow+0x730>)
 8012e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e28:	f7ed f9e0 	bl	80001ec <__adddf3>
 8012e2c:	4622      	mov	r2, r4
 8012e2e:	4606      	mov	r6, r0
 8012e30:	460f      	mov	r7, r1
 8012e32:	462b      	mov	r3, r5
 8012e34:	4620      	mov	r0, r4
 8012e36:	4629      	mov	r1, r5
 8012e38:	f7ed fb8e 	bl	8000558 <__aeabi_dmul>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	460b      	mov	r3, r1
 8012e40:	4630      	mov	r0, r6
 8012e42:	4639      	mov	r1, r7
 8012e44:	f7ed fb88 	bl	8000558 <__aeabi_dmul>
 8012e48:	4642      	mov	r2, r8
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	460d      	mov	r5, r1
 8012e4e:	464b      	mov	r3, r9
 8012e50:	ec51 0b18 	vmov	r0, r1, d8
 8012e54:	f7ed f9ca 	bl	80001ec <__adddf3>
 8012e58:	ec53 2b19 	vmov	r2, r3, d9
 8012e5c:	f7ed fb7c 	bl	8000558 <__aeabi_dmul>
 8012e60:	4622      	mov	r2, r4
 8012e62:	462b      	mov	r3, r5
 8012e64:	f7ed f9c2 	bl	80001ec <__adddf3>
 8012e68:	4642      	mov	r2, r8
 8012e6a:	4682      	mov	sl, r0
 8012e6c:	468b      	mov	fp, r1
 8012e6e:	464b      	mov	r3, r9
 8012e70:	4640      	mov	r0, r8
 8012e72:	4649      	mov	r1, r9
 8012e74:	f7ed fb70 	bl	8000558 <__aeabi_dmul>
 8012e78:	4b6b      	ldr	r3, [pc, #428]	; (8013028 <__ieee754_pow+0x770>)
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	4606      	mov	r6, r0
 8012e7e:	460f      	mov	r7, r1
 8012e80:	f7ed f9b4 	bl	80001ec <__adddf3>
 8012e84:	4652      	mov	r2, sl
 8012e86:	465b      	mov	r3, fp
 8012e88:	f7ed f9b0 	bl	80001ec <__adddf3>
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	4604      	mov	r4, r0
 8012e90:	460d      	mov	r5, r1
 8012e92:	4602      	mov	r2, r0
 8012e94:	460b      	mov	r3, r1
 8012e96:	4640      	mov	r0, r8
 8012e98:	4649      	mov	r1, r9
 8012e9a:	f7ed fb5d 	bl	8000558 <__aeabi_dmul>
 8012e9e:	4b62      	ldr	r3, [pc, #392]	; (8013028 <__ieee754_pow+0x770>)
 8012ea0:	4680      	mov	r8, r0
 8012ea2:	4689      	mov	r9, r1
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	4629      	mov	r1, r5
 8012eaa:	f7ed f99d 	bl	80001e8 <__aeabi_dsub>
 8012eae:	4632      	mov	r2, r6
 8012eb0:	463b      	mov	r3, r7
 8012eb2:	f7ed f999 	bl	80001e8 <__aeabi_dsub>
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	460b      	mov	r3, r1
 8012eba:	4650      	mov	r0, sl
 8012ebc:	4659      	mov	r1, fp
 8012ebe:	f7ed f993 	bl	80001e8 <__aeabi_dsub>
 8012ec2:	ec53 2b18 	vmov	r2, r3, d8
 8012ec6:	f7ed fb47 	bl	8000558 <__aeabi_dmul>
 8012eca:	4622      	mov	r2, r4
 8012ecc:	4606      	mov	r6, r0
 8012ece:	460f      	mov	r7, r1
 8012ed0:	462b      	mov	r3, r5
 8012ed2:	ec51 0b19 	vmov	r0, r1, d9
 8012ed6:	f7ed fb3f 	bl	8000558 <__aeabi_dmul>
 8012eda:	4602      	mov	r2, r0
 8012edc:	460b      	mov	r3, r1
 8012ede:	4630      	mov	r0, r6
 8012ee0:	4639      	mov	r1, r7
 8012ee2:	f7ed f983 	bl	80001ec <__adddf3>
 8012ee6:	4606      	mov	r6, r0
 8012ee8:	460f      	mov	r7, r1
 8012eea:	4602      	mov	r2, r0
 8012eec:	460b      	mov	r3, r1
 8012eee:	4640      	mov	r0, r8
 8012ef0:	4649      	mov	r1, r9
 8012ef2:	f7ed f97b 	bl	80001ec <__adddf3>
 8012ef6:	a33e      	add	r3, pc, #248	; (adr r3, 8012ff0 <__ieee754_pow+0x738>)
 8012ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efc:	2000      	movs	r0, #0
 8012efe:	4604      	mov	r4, r0
 8012f00:	460d      	mov	r5, r1
 8012f02:	f7ed fb29 	bl	8000558 <__aeabi_dmul>
 8012f06:	4642      	mov	r2, r8
 8012f08:	ec41 0b18 	vmov	d8, r0, r1
 8012f0c:	464b      	mov	r3, r9
 8012f0e:	4620      	mov	r0, r4
 8012f10:	4629      	mov	r1, r5
 8012f12:	f7ed f969 	bl	80001e8 <__aeabi_dsub>
 8012f16:	4602      	mov	r2, r0
 8012f18:	460b      	mov	r3, r1
 8012f1a:	4630      	mov	r0, r6
 8012f1c:	4639      	mov	r1, r7
 8012f1e:	f7ed f963 	bl	80001e8 <__aeabi_dsub>
 8012f22:	a335      	add	r3, pc, #212	; (adr r3, 8012ff8 <__ieee754_pow+0x740>)
 8012f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f28:	f7ed fb16 	bl	8000558 <__aeabi_dmul>
 8012f2c:	a334      	add	r3, pc, #208	; (adr r3, 8013000 <__ieee754_pow+0x748>)
 8012f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f32:	4606      	mov	r6, r0
 8012f34:	460f      	mov	r7, r1
 8012f36:	4620      	mov	r0, r4
 8012f38:	4629      	mov	r1, r5
 8012f3a:	f7ed fb0d 	bl	8000558 <__aeabi_dmul>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	460b      	mov	r3, r1
 8012f42:	4630      	mov	r0, r6
 8012f44:	4639      	mov	r1, r7
 8012f46:	f7ed f951 	bl	80001ec <__adddf3>
 8012f4a:	9a07      	ldr	r2, [sp, #28]
 8012f4c:	4b37      	ldr	r3, [pc, #220]	; (801302c <__ieee754_pow+0x774>)
 8012f4e:	4413      	add	r3, r2
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f54:	f7ed f94a 	bl	80001ec <__adddf3>
 8012f58:	4682      	mov	sl, r0
 8012f5a:	9805      	ldr	r0, [sp, #20]
 8012f5c:	468b      	mov	fp, r1
 8012f5e:	f7ed fa91 	bl	8000484 <__aeabi_i2d>
 8012f62:	9a07      	ldr	r2, [sp, #28]
 8012f64:	4b32      	ldr	r3, [pc, #200]	; (8013030 <__ieee754_pow+0x778>)
 8012f66:	4413      	add	r3, r2
 8012f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012f6c:	4606      	mov	r6, r0
 8012f6e:	460f      	mov	r7, r1
 8012f70:	4652      	mov	r2, sl
 8012f72:	465b      	mov	r3, fp
 8012f74:	ec51 0b18 	vmov	r0, r1, d8
 8012f78:	f7ed f938 	bl	80001ec <__adddf3>
 8012f7c:	4642      	mov	r2, r8
 8012f7e:	464b      	mov	r3, r9
 8012f80:	f7ed f934 	bl	80001ec <__adddf3>
 8012f84:	4632      	mov	r2, r6
 8012f86:	463b      	mov	r3, r7
 8012f88:	f7ed f930 	bl	80001ec <__adddf3>
 8012f8c:	2000      	movs	r0, #0
 8012f8e:	4632      	mov	r2, r6
 8012f90:	463b      	mov	r3, r7
 8012f92:	4604      	mov	r4, r0
 8012f94:	460d      	mov	r5, r1
 8012f96:	f7ed f927 	bl	80001e8 <__aeabi_dsub>
 8012f9a:	4642      	mov	r2, r8
 8012f9c:	464b      	mov	r3, r9
 8012f9e:	f7ed f923 	bl	80001e8 <__aeabi_dsub>
 8012fa2:	ec53 2b18 	vmov	r2, r3, d8
 8012fa6:	f7ed f91f 	bl	80001e8 <__aeabi_dsub>
 8012faa:	4602      	mov	r2, r0
 8012fac:	460b      	mov	r3, r1
 8012fae:	4650      	mov	r0, sl
 8012fb0:	4659      	mov	r1, fp
 8012fb2:	e610      	b.n	8012bd6 <__ieee754_pow+0x31e>
 8012fb4:	2401      	movs	r4, #1
 8012fb6:	e6a1      	b.n	8012cfc <__ieee754_pow+0x444>
 8012fb8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013008 <__ieee754_pow+0x750>
 8012fbc:	e617      	b.n	8012bee <__ieee754_pow+0x336>
 8012fbe:	bf00      	nop
 8012fc0:	4a454eef 	.word	0x4a454eef
 8012fc4:	3fca7e28 	.word	0x3fca7e28
 8012fc8:	93c9db65 	.word	0x93c9db65
 8012fcc:	3fcd864a 	.word	0x3fcd864a
 8012fd0:	a91d4101 	.word	0xa91d4101
 8012fd4:	3fd17460 	.word	0x3fd17460
 8012fd8:	518f264d 	.word	0x518f264d
 8012fdc:	3fd55555 	.word	0x3fd55555
 8012fe0:	db6fabff 	.word	0xdb6fabff
 8012fe4:	3fdb6db6 	.word	0x3fdb6db6
 8012fe8:	33333303 	.word	0x33333303
 8012fec:	3fe33333 	.word	0x3fe33333
 8012ff0:	e0000000 	.word	0xe0000000
 8012ff4:	3feec709 	.word	0x3feec709
 8012ff8:	dc3a03fd 	.word	0xdc3a03fd
 8012ffc:	3feec709 	.word	0x3feec709
 8013000:	145b01f5 	.word	0x145b01f5
 8013004:	be3e2fe0 	.word	0xbe3e2fe0
 8013008:	00000000 	.word	0x00000000
 801300c:	3ff00000 	.word	0x3ff00000
 8013010:	7ff00000 	.word	0x7ff00000
 8013014:	43400000 	.word	0x43400000
 8013018:	0003988e 	.word	0x0003988e
 801301c:	000bb679 	.word	0x000bb679
 8013020:	08014a20 	.word	0x08014a20
 8013024:	3ff00000 	.word	0x3ff00000
 8013028:	40080000 	.word	0x40080000
 801302c:	08014a40 	.word	0x08014a40
 8013030:	08014a30 	.word	0x08014a30
 8013034:	a3b5      	add	r3, pc, #724	; (adr r3, 801330c <__ieee754_pow+0xa54>)
 8013036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303a:	4640      	mov	r0, r8
 801303c:	4649      	mov	r1, r9
 801303e:	f7ed f8d5 	bl	80001ec <__adddf3>
 8013042:	4622      	mov	r2, r4
 8013044:	ec41 0b1a 	vmov	d10, r0, r1
 8013048:	462b      	mov	r3, r5
 801304a:	4630      	mov	r0, r6
 801304c:	4639      	mov	r1, r7
 801304e:	f7ed f8cb 	bl	80001e8 <__aeabi_dsub>
 8013052:	4602      	mov	r2, r0
 8013054:	460b      	mov	r3, r1
 8013056:	ec51 0b1a 	vmov	r0, r1, d10
 801305a:	f7ed fd0d 	bl	8000a78 <__aeabi_dcmpgt>
 801305e:	2800      	cmp	r0, #0
 8013060:	f47f ae04 	bne.w	8012c6c <__ieee754_pow+0x3b4>
 8013064:	4aa4      	ldr	r2, [pc, #656]	; (80132f8 <__ieee754_pow+0xa40>)
 8013066:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801306a:	4293      	cmp	r3, r2
 801306c:	f340 8108 	ble.w	8013280 <__ieee754_pow+0x9c8>
 8013070:	151b      	asrs	r3, r3, #20
 8013072:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013076:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801307a:	fa4a f303 	asr.w	r3, sl, r3
 801307e:	445b      	add	r3, fp
 8013080:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013084:	4e9d      	ldr	r6, [pc, #628]	; (80132fc <__ieee754_pow+0xa44>)
 8013086:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801308a:	4116      	asrs	r6, r2
 801308c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013090:	2000      	movs	r0, #0
 8013092:	ea23 0106 	bic.w	r1, r3, r6
 8013096:	f1c2 0214 	rsb	r2, r2, #20
 801309a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801309e:	fa4a fa02 	asr.w	sl, sl, r2
 80130a2:	f1bb 0f00 	cmp.w	fp, #0
 80130a6:	4602      	mov	r2, r0
 80130a8:	460b      	mov	r3, r1
 80130aa:	4620      	mov	r0, r4
 80130ac:	4629      	mov	r1, r5
 80130ae:	bfb8      	it	lt
 80130b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80130b4:	f7ed f898 	bl	80001e8 <__aeabi_dsub>
 80130b8:	ec41 0b19 	vmov	d9, r0, r1
 80130bc:	4642      	mov	r2, r8
 80130be:	464b      	mov	r3, r9
 80130c0:	ec51 0b19 	vmov	r0, r1, d9
 80130c4:	f7ed f892 	bl	80001ec <__adddf3>
 80130c8:	a37b      	add	r3, pc, #492	; (adr r3, 80132b8 <__ieee754_pow+0xa00>)
 80130ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ce:	2000      	movs	r0, #0
 80130d0:	4604      	mov	r4, r0
 80130d2:	460d      	mov	r5, r1
 80130d4:	f7ed fa40 	bl	8000558 <__aeabi_dmul>
 80130d8:	ec53 2b19 	vmov	r2, r3, d9
 80130dc:	4606      	mov	r6, r0
 80130de:	460f      	mov	r7, r1
 80130e0:	4620      	mov	r0, r4
 80130e2:	4629      	mov	r1, r5
 80130e4:	f7ed f880 	bl	80001e8 <__aeabi_dsub>
 80130e8:	4602      	mov	r2, r0
 80130ea:	460b      	mov	r3, r1
 80130ec:	4640      	mov	r0, r8
 80130ee:	4649      	mov	r1, r9
 80130f0:	f7ed f87a 	bl	80001e8 <__aeabi_dsub>
 80130f4:	a372      	add	r3, pc, #456	; (adr r3, 80132c0 <__ieee754_pow+0xa08>)
 80130f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fa:	f7ed fa2d 	bl	8000558 <__aeabi_dmul>
 80130fe:	a372      	add	r3, pc, #456	; (adr r3, 80132c8 <__ieee754_pow+0xa10>)
 8013100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013104:	4680      	mov	r8, r0
 8013106:	4689      	mov	r9, r1
 8013108:	4620      	mov	r0, r4
 801310a:	4629      	mov	r1, r5
 801310c:	f7ed fa24 	bl	8000558 <__aeabi_dmul>
 8013110:	4602      	mov	r2, r0
 8013112:	460b      	mov	r3, r1
 8013114:	4640      	mov	r0, r8
 8013116:	4649      	mov	r1, r9
 8013118:	f7ed f868 	bl	80001ec <__adddf3>
 801311c:	4604      	mov	r4, r0
 801311e:	460d      	mov	r5, r1
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	4630      	mov	r0, r6
 8013126:	4639      	mov	r1, r7
 8013128:	f7ed f860 	bl	80001ec <__adddf3>
 801312c:	4632      	mov	r2, r6
 801312e:	463b      	mov	r3, r7
 8013130:	4680      	mov	r8, r0
 8013132:	4689      	mov	r9, r1
 8013134:	f7ed f858 	bl	80001e8 <__aeabi_dsub>
 8013138:	4602      	mov	r2, r0
 801313a:	460b      	mov	r3, r1
 801313c:	4620      	mov	r0, r4
 801313e:	4629      	mov	r1, r5
 8013140:	f7ed f852 	bl	80001e8 <__aeabi_dsub>
 8013144:	4642      	mov	r2, r8
 8013146:	4606      	mov	r6, r0
 8013148:	460f      	mov	r7, r1
 801314a:	464b      	mov	r3, r9
 801314c:	4640      	mov	r0, r8
 801314e:	4649      	mov	r1, r9
 8013150:	f7ed fa02 	bl	8000558 <__aeabi_dmul>
 8013154:	a35e      	add	r3, pc, #376	; (adr r3, 80132d0 <__ieee754_pow+0xa18>)
 8013156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315a:	4604      	mov	r4, r0
 801315c:	460d      	mov	r5, r1
 801315e:	f7ed f9fb 	bl	8000558 <__aeabi_dmul>
 8013162:	a35d      	add	r3, pc, #372	; (adr r3, 80132d8 <__ieee754_pow+0xa20>)
 8013164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013168:	f7ed f83e 	bl	80001e8 <__aeabi_dsub>
 801316c:	4622      	mov	r2, r4
 801316e:	462b      	mov	r3, r5
 8013170:	f7ed f9f2 	bl	8000558 <__aeabi_dmul>
 8013174:	a35a      	add	r3, pc, #360	; (adr r3, 80132e0 <__ieee754_pow+0xa28>)
 8013176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317a:	f7ed f837 	bl	80001ec <__adddf3>
 801317e:	4622      	mov	r2, r4
 8013180:	462b      	mov	r3, r5
 8013182:	f7ed f9e9 	bl	8000558 <__aeabi_dmul>
 8013186:	a358      	add	r3, pc, #352	; (adr r3, 80132e8 <__ieee754_pow+0xa30>)
 8013188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318c:	f7ed f82c 	bl	80001e8 <__aeabi_dsub>
 8013190:	4622      	mov	r2, r4
 8013192:	462b      	mov	r3, r5
 8013194:	f7ed f9e0 	bl	8000558 <__aeabi_dmul>
 8013198:	a355      	add	r3, pc, #340	; (adr r3, 80132f0 <__ieee754_pow+0xa38>)
 801319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319e:	f7ed f825 	bl	80001ec <__adddf3>
 80131a2:	4622      	mov	r2, r4
 80131a4:	462b      	mov	r3, r5
 80131a6:	f7ed f9d7 	bl	8000558 <__aeabi_dmul>
 80131aa:	4602      	mov	r2, r0
 80131ac:	460b      	mov	r3, r1
 80131ae:	4640      	mov	r0, r8
 80131b0:	4649      	mov	r1, r9
 80131b2:	f7ed f819 	bl	80001e8 <__aeabi_dsub>
 80131b6:	4604      	mov	r4, r0
 80131b8:	460d      	mov	r5, r1
 80131ba:	4602      	mov	r2, r0
 80131bc:	460b      	mov	r3, r1
 80131be:	4640      	mov	r0, r8
 80131c0:	4649      	mov	r1, r9
 80131c2:	f7ed f9c9 	bl	8000558 <__aeabi_dmul>
 80131c6:	2200      	movs	r2, #0
 80131c8:	ec41 0b19 	vmov	d9, r0, r1
 80131cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80131d0:	4620      	mov	r0, r4
 80131d2:	4629      	mov	r1, r5
 80131d4:	f7ed f808 	bl	80001e8 <__aeabi_dsub>
 80131d8:	4602      	mov	r2, r0
 80131da:	460b      	mov	r3, r1
 80131dc:	ec51 0b19 	vmov	r0, r1, d9
 80131e0:	f7ed fae4 	bl	80007ac <__aeabi_ddiv>
 80131e4:	4632      	mov	r2, r6
 80131e6:	4604      	mov	r4, r0
 80131e8:	460d      	mov	r5, r1
 80131ea:	463b      	mov	r3, r7
 80131ec:	4640      	mov	r0, r8
 80131ee:	4649      	mov	r1, r9
 80131f0:	f7ed f9b2 	bl	8000558 <__aeabi_dmul>
 80131f4:	4632      	mov	r2, r6
 80131f6:	463b      	mov	r3, r7
 80131f8:	f7ec fff8 	bl	80001ec <__adddf3>
 80131fc:	4602      	mov	r2, r0
 80131fe:	460b      	mov	r3, r1
 8013200:	4620      	mov	r0, r4
 8013202:	4629      	mov	r1, r5
 8013204:	f7ec fff0 	bl	80001e8 <__aeabi_dsub>
 8013208:	4642      	mov	r2, r8
 801320a:	464b      	mov	r3, r9
 801320c:	f7ec ffec 	bl	80001e8 <__aeabi_dsub>
 8013210:	460b      	mov	r3, r1
 8013212:	4602      	mov	r2, r0
 8013214:	493a      	ldr	r1, [pc, #232]	; (8013300 <__ieee754_pow+0xa48>)
 8013216:	2000      	movs	r0, #0
 8013218:	f7ec ffe6 	bl	80001e8 <__aeabi_dsub>
 801321c:	ec41 0b10 	vmov	d0, r0, r1
 8013220:	ee10 3a90 	vmov	r3, s1
 8013224:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801322c:	da2b      	bge.n	8013286 <__ieee754_pow+0x9ce>
 801322e:	4650      	mov	r0, sl
 8013230:	f000 fe9e 	bl	8013f70 <scalbn>
 8013234:	ec51 0b10 	vmov	r0, r1, d0
 8013238:	ec53 2b18 	vmov	r2, r3, d8
 801323c:	f7ff bbed 	b.w	8012a1a <__ieee754_pow+0x162>
 8013240:	4b30      	ldr	r3, [pc, #192]	; (8013304 <__ieee754_pow+0xa4c>)
 8013242:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013246:	429e      	cmp	r6, r3
 8013248:	f77f af0c 	ble.w	8013064 <__ieee754_pow+0x7ac>
 801324c:	4b2e      	ldr	r3, [pc, #184]	; (8013308 <__ieee754_pow+0xa50>)
 801324e:	440b      	add	r3, r1
 8013250:	4303      	orrs	r3, r0
 8013252:	d009      	beq.n	8013268 <__ieee754_pow+0x9b0>
 8013254:	ec51 0b18 	vmov	r0, r1, d8
 8013258:	2200      	movs	r2, #0
 801325a:	2300      	movs	r3, #0
 801325c:	f7ed fbee 	bl	8000a3c <__aeabi_dcmplt>
 8013260:	3800      	subs	r0, #0
 8013262:	bf18      	it	ne
 8013264:	2001      	movne	r0, #1
 8013266:	e447      	b.n	8012af8 <__ieee754_pow+0x240>
 8013268:	4622      	mov	r2, r4
 801326a:	462b      	mov	r3, r5
 801326c:	f7ec ffbc 	bl	80001e8 <__aeabi_dsub>
 8013270:	4642      	mov	r2, r8
 8013272:	464b      	mov	r3, r9
 8013274:	f7ed fbf6 	bl	8000a64 <__aeabi_dcmpge>
 8013278:	2800      	cmp	r0, #0
 801327a:	f43f aef3 	beq.w	8013064 <__ieee754_pow+0x7ac>
 801327e:	e7e9      	b.n	8013254 <__ieee754_pow+0x99c>
 8013280:	f04f 0a00 	mov.w	sl, #0
 8013284:	e71a      	b.n	80130bc <__ieee754_pow+0x804>
 8013286:	ec51 0b10 	vmov	r0, r1, d0
 801328a:	4619      	mov	r1, r3
 801328c:	e7d4      	b.n	8013238 <__ieee754_pow+0x980>
 801328e:	491c      	ldr	r1, [pc, #112]	; (8013300 <__ieee754_pow+0xa48>)
 8013290:	2000      	movs	r0, #0
 8013292:	f7ff bb30 	b.w	80128f6 <__ieee754_pow+0x3e>
 8013296:	2000      	movs	r0, #0
 8013298:	2100      	movs	r1, #0
 801329a:	f7ff bb2c 	b.w	80128f6 <__ieee754_pow+0x3e>
 801329e:	4630      	mov	r0, r6
 80132a0:	4639      	mov	r1, r7
 80132a2:	f7ff bb28 	b.w	80128f6 <__ieee754_pow+0x3e>
 80132a6:	9204      	str	r2, [sp, #16]
 80132a8:	f7ff bb7a 	b.w	80129a0 <__ieee754_pow+0xe8>
 80132ac:	2300      	movs	r3, #0
 80132ae:	f7ff bb64 	b.w	801297a <__ieee754_pow+0xc2>
 80132b2:	bf00      	nop
 80132b4:	f3af 8000 	nop.w
 80132b8:	00000000 	.word	0x00000000
 80132bc:	3fe62e43 	.word	0x3fe62e43
 80132c0:	fefa39ef 	.word	0xfefa39ef
 80132c4:	3fe62e42 	.word	0x3fe62e42
 80132c8:	0ca86c39 	.word	0x0ca86c39
 80132cc:	be205c61 	.word	0xbe205c61
 80132d0:	72bea4d0 	.word	0x72bea4d0
 80132d4:	3e663769 	.word	0x3e663769
 80132d8:	c5d26bf1 	.word	0xc5d26bf1
 80132dc:	3ebbbd41 	.word	0x3ebbbd41
 80132e0:	af25de2c 	.word	0xaf25de2c
 80132e4:	3f11566a 	.word	0x3f11566a
 80132e8:	16bebd93 	.word	0x16bebd93
 80132ec:	3f66c16c 	.word	0x3f66c16c
 80132f0:	5555553e 	.word	0x5555553e
 80132f4:	3fc55555 	.word	0x3fc55555
 80132f8:	3fe00000 	.word	0x3fe00000
 80132fc:	000fffff 	.word	0x000fffff
 8013300:	3ff00000 	.word	0x3ff00000
 8013304:	4090cbff 	.word	0x4090cbff
 8013308:	3f6f3400 	.word	0x3f6f3400
 801330c:	652b82fe 	.word	0x652b82fe
 8013310:	3c971547 	.word	0x3c971547

08013314 <__ieee754_sqrt>:
 8013314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013318:	ec55 4b10 	vmov	r4, r5, d0
 801331c:	4e55      	ldr	r6, [pc, #340]	; (8013474 <__ieee754_sqrt+0x160>)
 801331e:	43ae      	bics	r6, r5
 8013320:	ee10 0a10 	vmov	r0, s0
 8013324:	ee10 3a10 	vmov	r3, s0
 8013328:	462a      	mov	r2, r5
 801332a:	4629      	mov	r1, r5
 801332c:	d110      	bne.n	8013350 <__ieee754_sqrt+0x3c>
 801332e:	ee10 2a10 	vmov	r2, s0
 8013332:	462b      	mov	r3, r5
 8013334:	f7ed f910 	bl	8000558 <__aeabi_dmul>
 8013338:	4602      	mov	r2, r0
 801333a:	460b      	mov	r3, r1
 801333c:	4620      	mov	r0, r4
 801333e:	4629      	mov	r1, r5
 8013340:	f7ec ff54 	bl	80001ec <__adddf3>
 8013344:	4604      	mov	r4, r0
 8013346:	460d      	mov	r5, r1
 8013348:	ec45 4b10 	vmov	d0, r4, r5
 801334c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013350:	2d00      	cmp	r5, #0
 8013352:	dc10      	bgt.n	8013376 <__ieee754_sqrt+0x62>
 8013354:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013358:	4330      	orrs	r0, r6
 801335a:	d0f5      	beq.n	8013348 <__ieee754_sqrt+0x34>
 801335c:	b15d      	cbz	r5, 8013376 <__ieee754_sqrt+0x62>
 801335e:	ee10 2a10 	vmov	r2, s0
 8013362:	462b      	mov	r3, r5
 8013364:	ee10 0a10 	vmov	r0, s0
 8013368:	f7ec ff3e 	bl	80001e8 <__aeabi_dsub>
 801336c:	4602      	mov	r2, r0
 801336e:	460b      	mov	r3, r1
 8013370:	f7ed fa1c 	bl	80007ac <__aeabi_ddiv>
 8013374:	e7e6      	b.n	8013344 <__ieee754_sqrt+0x30>
 8013376:	1512      	asrs	r2, r2, #20
 8013378:	d074      	beq.n	8013464 <__ieee754_sqrt+0x150>
 801337a:	07d4      	lsls	r4, r2, #31
 801337c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013380:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013388:	bf5e      	ittt	pl
 801338a:	0fda      	lsrpl	r2, r3, #31
 801338c:	005b      	lslpl	r3, r3, #1
 801338e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013392:	2400      	movs	r4, #0
 8013394:	0fda      	lsrs	r2, r3, #31
 8013396:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801339a:	107f      	asrs	r7, r7, #1
 801339c:	005b      	lsls	r3, r3, #1
 801339e:	2516      	movs	r5, #22
 80133a0:	4620      	mov	r0, r4
 80133a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80133a6:	1886      	adds	r6, r0, r2
 80133a8:	428e      	cmp	r6, r1
 80133aa:	bfde      	ittt	le
 80133ac:	1b89      	suble	r1, r1, r6
 80133ae:	18b0      	addle	r0, r6, r2
 80133b0:	18a4      	addle	r4, r4, r2
 80133b2:	0049      	lsls	r1, r1, #1
 80133b4:	3d01      	subs	r5, #1
 80133b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80133ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80133be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80133c2:	d1f0      	bne.n	80133a6 <__ieee754_sqrt+0x92>
 80133c4:	462a      	mov	r2, r5
 80133c6:	f04f 0e20 	mov.w	lr, #32
 80133ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80133ce:	4281      	cmp	r1, r0
 80133d0:	eb06 0c05 	add.w	ip, r6, r5
 80133d4:	dc02      	bgt.n	80133dc <__ieee754_sqrt+0xc8>
 80133d6:	d113      	bne.n	8013400 <__ieee754_sqrt+0xec>
 80133d8:	459c      	cmp	ip, r3
 80133da:	d811      	bhi.n	8013400 <__ieee754_sqrt+0xec>
 80133dc:	f1bc 0f00 	cmp.w	ip, #0
 80133e0:	eb0c 0506 	add.w	r5, ip, r6
 80133e4:	da43      	bge.n	801346e <__ieee754_sqrt+0x15a>
 80133e6:	2d00      	cmp	r5, #0
 80133e8:	db41      	blt.n	801346e <__ieee754_sqrt+0x15a>
 80133ea:	f100 0801 	add.w	r8, r0, #1
 80133ee:	1a09      	subs	r1, r1, r0
 80133f0:	459c      	cmp	ip, r3
 80133f2:	bf88      	it	hi
 80133f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80133f8:	eba3 030c 	sub.w	r3, r3, ip
 80133fc:	4432      	add	r2, r6
 80133fe:	4640      	mov	r0, r8
 8013400:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013404:	f1be 0e01 	subs.w	lr, lr, #1
 8013408:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801340c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013410:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013414:	d1db      	bne.n	80133ce <__ieee754_sqrt+0xba>
 8013416:	430b      	orrs	r3, r1
 8013418:	d006      	beq.n	8013428 <__ieee754_sqrt+0x114>
 801341a:	1c50      	adds	r0, r2, #1
 801341c:	bf13      	iteet	ne
 801341e:	3201      	addne	r2, #1
 8013420:	3401      	addeq	r4, #1
 8013422:	4672      	moveq	r2, lr
 8013424:	f022 0201 	bicne.w	r2, r2, #1
 8013428:	1063      	asrs	r3, r4, #1
 801342a:	0852      	lsrs	r2, r2, #1
 801342c:	07e1      	lsls	r1, r4, #31
 801342e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013432:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013436:	bf48      	it	mi
 8013438:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801343c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013440:	4614      	mov	r4, r2
 8013442:	e781      	b.n	8013348 <__ieee754_sqrt+0x34>
 8013444:	0ad9      	lsrs	r1, r3, #11
 8013446:	3815      	subs	r0, #21
 8013448:	055b      	lsls	r3, r3, #21
 801344a:	2900      	cmp	r1, #0
 801344c:	d0fa      	beq.n	8013444 <__ieee754_sqrt+0x130>
 801344e:	02cd      	lsls	r5, r1, #11
 8013450:	d50a      	bpl.n	8013468 <__ieee754_sqrt+0x154>
 8013452:	f1c2 0420 	rsb	r4, r2, #32
 8013456:	fa23 f404 	lsr.w	r4, r3, r4
 801345a:	1e55      	subs	r5, r2, #1
 801345c:	4093      	lsls	r3, r2
 801345e:	4321      	orrs	r1, r4
 8013460:	1b42      	subs	r2, r0, r5
 8013462:	e78a      	b.n	801337a <__ieee754_sqrt+0x66>
 8013464:	4610      	mov	r0, r2
 8013466:	e7f0      	b.n	801344a <__ieee754_sqrt+0x136>
 8013468:	0049      	lsls	r1, r1, #1
 801346a:	3201      	adds	r2, #1
 801346c:	e7ef      	b.n	801344e <__ieee754_sqrt+0x13a>
 801346e:	4680      	mov	r8, r0
 8013470:	e7bd      	b.n	80133ee <__ieee754_sqrt+0xda>
 8013472:	bf00      	nop
 8013474:	7ff00000 	.word	0x7ff00000

08013478 <__ieee754_atan2f>:
 8013478:	ee10 2a90 	vmov	r2, s1
 801347c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013480:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013484:	b510      	push	{r4, lr}
 8013486:	eef0 7a40 	vmov.f32	s15, s0
 801348a:	dc06      	bgt.n	801349a <__ieee754_atan2f+0x22>
 801348c:	ee10 0a10 	vmov	r0, s0
 8013490:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013494:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013498:	dd04      	ble.n	80134a4 <__ieee754_atan2f+0x2c>
 801349a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801349e:	eeb0 0a67 	vmov.f32	s0, s15
 80134a2:	bd10      	pop	{r4, pc}
 80134a4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80134a8:	d103      	bne.n	80134b2 <__ieee754_atan2f+0x3a>
 80134aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134ae:	f000 bde5 	b.w	801407c <atanf>
 80134b2:	1794      	asrs	r4, r2, #30
 80134b4:	f004 0402 	and.w	r4, r4, #2
 80134b8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80134bc:	b943      	cbnz	r3, 80134d0 <__ieee754_atan2f+0x58>
 80134be:	2c02      	cmp	r4, #2
 80134c0:	d05e      	beq.n	8013580 <__ieee754_atan2f+0x108>
 80134c2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013594 <__ieee754_atan2f+0x11c>
 80134c6:	2c03      	cmp	r4, #3
 80134c8:	bf08      	it	eq
 80134ca:	eef0 7a47 	vmoveq.f32	s15, s14
 80134ce:	e7e6      	b.n	801349e <__ieee754_atan2f+0x26>
 80134d0:	b941      	cbnz	r1, 80134e4 <__ieee754_atan2f+0x6c>
 80134d2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013598 <__ieee754_atan2f+0x120>
 80134d6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801359c <__ieee754_atan2f+0x124>
 80134da:	2800      	cmp	r0, #0
 80134dc:	bfb8      	it	lt
 80134de:	eef0 7a40 	vmovlt.f32	s15, s0
 80134e2:	e7dc      	b.n	801349e <__ieee754_atan2f+0x26>
 80134e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80134e8:	d110      	bne.n	801350c <__ieee754_atan2f+0x94>
 80134ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80134ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80134f2:	d107      	bne.n	8013504 <__ieee754_atan2f+0x8c>
 80134f4:	2c02      	cmp	r4, #2
 80134f6:	d846      	bhi.n	8013586 <__ieee754_atan2f+0x10e>
 80134f8:	4b29      	ldr	r3, [pc, #164]	; (80135a0 <__ieee754_atan2f+0x128>)
 80134fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80134fe:	edd4 7a00 	vldr	s15, [r4]
 8013502:	e7cc      	b.n	801349e <__ieee754_atan2f+0x26>
 8013504:	2c02      	cmp	r4, #2
 8013506:	d841      	bhi.n	801358c <__ieee754_atan2f+0x114>
 8013508:	4b26      	ldr	r3, [pc, #152]	; (80135a4 <__ieee754_atan2f+0x12c>)
 801350a:	e7f6      	b.n	80134fa <__ieee754_atan2f+0x82>
 801350c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013510:	d0df      	beq.n	80134d2 <__ieee754_atan2f+0x5a>
 8013512:	1a5b      	subs	r3, r3, r1
 8013514:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013518:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801351c:	da1a      	bge.n	8013554 <__ieee754_atan2f+0xdc>
 801351e:	2a00      	cmp	r2, #0
 8013520:	da01      	bge.n	8013526 <__ieee754_atan2f+0xae>
 8013522:	313c      	adds	r1, #60	; 0x3c
 8013524:	db19      	blt.n	801355a <__ieee754_atan2f+0xe2>
 8013526:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801352a:	f000 fe7b 	bl	8014224 <fabsf>
 801352e:	f000 fda5 	bl	801407c <atanf>
 8013532:	eef0 7a40 	vmov.f32	s15, s0
 8013536:	2c01      	cmp	r4, #1
 8013538:	d012      	beq.n	8013560 <__ieee754_atan2f+0xe8>
 801353a:	2c02      	cmp	r4, #2
 801353c:	d017      	beq.n	801356e <__ieee754_atan2f+0xf6>
 801353e:	2c00      	cmp	r4, #0
 8013540:	d0ad      	beq.n	801349e <__ieee754_atan2f+0x26>
 8013542:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80135a8 <__ieee754_atan2f+0x130>
 8013546:	ee77 7a80 	vadd.f32	s15, s15, s0
 801354a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80135ac <__ieee754_atan2f+0x134>
 801354e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013552:	e7a4      	b.n	801349e <__ieee754_atan2f+0x26>
 8013554:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013598 <__ieee754_atan2f+0x120>
 8013558:	e7ed      	b.n	8013536 <__ieee754_atan2f+0xbe>
 801355a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80135b0 <__ieee754_atan2f+0x138>
 801355e:	e7ea      	b.n	8013536 <__ieee754_atan2f+0xbe>
 8013560:	ee17 3a90 	vmov	r3, s15
 8013564:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013568:	ee07 3a90 	vmov	s15, r3
 801356c:	e797      	b.n	801349e <__ieee754_atan2f+0x26>
 801356e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80135a8 <__ieee754_atan2f+0x130>
 8013572:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013576:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80135ac <__ieee754_atan2f+0x134>
 801357a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801357e:	e78e      	b.n	801349e <__ieee754_atan2f+0x26>
 8013580:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80135ac <__ieee754_atan2f+0x134>
 8013584:	e78b      	b.n	801349e <__ieee754_atan2f+0x26>
 8013586:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80135b4 <__ieee754_atan2f+0x13c>
 801358a:	e788      	b.n	801349e <__ieee754_atan2f+0x26>
 801358c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80135b0 <__ieee754_atan2f+0x138>
 8013590:	e785      	b.n	801349e <__ieee754_atan2f+0x26>
 8013592:	bf00      	nop
 8013594:	c0490fdb 	.word	0xc0490fdb
 8013598:	3fc90fdb 	.word	0x3fc90fdb
 801359c:	bfc90fdb 	.word	0xbfc90fdb
 80135a0:	08014a50 	.word	0x08014a50
 80135a4:	08014a5c 	.word	0x08014a5c
 80135a8:	33bbbd2e 	.word	0x33bbbd2e
 80135ac:	40490fdb 	.word	0x40490fdb
 80135b0:	00000000 	.word	0x00000000
 80135b4:	3f490fdb 	.word	0x3f490fdb

080135b8 <__ieee754_rem_pio2f>:
 80135b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ba:	ee10 6a10 	vmov	r6, s0
 80135be:	4b8e      	ldr	r3, [pc, #568]	; (80137f8 <__ieee754_rem_pio2f+0x240>)
 80135c0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80135c4:	429d      	cmp	r5, r3
 80135c6:	b087      	sub	sp, #28
 80135c8:	eef0 7a40 	vmov.f32	s15, s0
 80135cc:	4604      	mov	r4, r0
 80135ce:	dc05      	bgt.n	80135dc <__ieee754_rem_pio2f+0x24>
 80135d0:	2300      	movs	r3, #0
 80135d2:	ed80 0a00 	vstr	s0, [r0]
 80135d6:	6043      	str	r3, [r0, #4]
 80135d8:	2000      	movs	r0, #0
 80135da:	e01a      	b.n	8013612 <__ieee754_rem_pio2f+0x5a>
 80135dc:	4b87      	ldr	r3, [pc, #540]	; (80137fc <__ieee754_rem_pio2f+0x244>)
 80135de:	429d      	cmp	r5, r3
 80135e0:	dc46      	bgt.n	8013670 <__ieee754_rem_pio2f+0xb8>
 80135e2:	2e00      	cmp	r6, #0
 80135e4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013800 <__ieee754_rem_pio2f+0x248>
 80135e8:	4b86      	ldr	r3, [pc, #536]	; (8013804 <__ieee754_rem_pio2f+0x24c>)
 80135ea:	f025 050f 	bic.w	r5, r5, #15
 80135ee:	dd1f      	ble.n	8013630 <__ieee754_rem_pio2f+0x78>
 80135f0:	429d      	cmp	r5, r3
 80135f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80135f6:	d00e      	beq.n	8013616 <__ieee754_rem_pio2f+0x5e>
 80135f8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013808 <__ieee754_rem_pio2f+0x250>
 80135fc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013600:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013604:	ed80 0a00 	vstr	s0, [r0]
 8013608:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801360c:	2001      	movs	r0, #1
 801360e:	edc4 7a01 	vstr	s15, [r4, #4]
 8013612:	b007      	add	sp, #28
 8013614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013616:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801380c <__ieee754_rem_pio2f+0x254>
 801361a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013810 <__ieee754_rem_pio2f+0x258>
 801361e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013622:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013626:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801362a:	edc0 6a00 	vstr	s13, [r0]
 801362e:	e7eb      	b.n	8013608 <__ieee754_rem_pio2f+0x50>
 8013630:	429d      	cmp	r5, r3
 8013632:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013636:	d00e      	beq.n	8013656 <__ieee754_rem_pio2f+0x9e>
 8013638:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013808 <__ieee754_rem_pio2f+0x250>
 801363c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013640:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013644:	ed80 0a00 	vstr	s0, [r0]
 8013648:	ee77 7a87 	vadd.f32	s15, s15, s14
 801364c:	f04f 30ff 	mov.w	r0, #4294967295
 8013650:	edc4 7a01 	vstr	s15, [r4, #4]
 8013654:	e7dd      	b.n	8013612 <__ieee754_rem_pio2f+0x5a>
 8013656:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801380c <__ieee754_rem_pio2f+0x254>
 801365a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013810 <__ieee754_rem_pio2f+0x258>
 801365e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013662:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013666:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801366a:	edc0 6a00 	vstr	s13, [r0]
 801366e:	e7eb      	b.n	8013648 <__ieee754_rem_pio2f+0x90>
 8013670:	4b68      	ldr	r3, [pc, #416]	; (8013814 <__ieee754_rem_pio2f+0x25c>)
 8013672:	429d      	cmp	r5, r3
 8013674:	dc72      	bgt.n	801375c <__ieee754_rem_pio2f+0x1a4>
 8013676:	f000 fdd5 	bl	8014224 <fabsf>
 801367a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013818 <__ieee754_rem_pio2f+0x260>
 801367e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013682:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801368a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801368e:	ee17 0a90 	vmov	r0, s15
 8013692:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013800 <__ieee754_rem_pio2f+0x248>
 8013696:	eea7 0a67 	vfms.f32	s0, s14, s15
 801369a:	281f      	cmp	r0, #31
 801369c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013808 <__ieee754_rem_pio2f+0x250>
 80136a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136a4:	eeb1 6a47 	vneg.f32	s12, s14
 80136a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80136ac:	ee16 2a90 	vmov	r2, s13
 80136b0:	dc1c      	bgt.n	80136ec <__ieee754_rem_pio2f+0x134>
 80136b2:	495a      	ldr	r1, [pc, #360]	; (801381c <__ieee754_rem_pio2f+0x264>)
 80136b4:	1e47      	subs	r7, r0, #1
 80136b6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80136ba:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80136be:	428b      	cmp	r3, r1
 80136c0:	d014      	beq.n	80136ec <__ieee754_rem_pio2f+0x134>
 80136c2:	6022      	str	r2, [r4, #0]
 80136c4:	ed94 7a00 	vldr	s14, [r4]
 80136c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80136cc:	2e00      	cmp	r6, #0
 80136ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80136d2:	ed84 0a01 	vstr	s0, [r4, #4]
 80136d6:	da9c      	bge.n	8013612 <__ieee754_rem_pio2f+0x5a>
 80136d8:	eeb1 7a47 	vneg.f32	s14, s14
 80136dc:	eeb1 0a40 	vneg.f32	s0, s0
 80136e0:	ed84 7a00 	vstr	s14, [r4]
 80136e4:	ed84 0a01 	vstr	s0, [r4, #4]
 80136e8:	4240      	negs	r0, r0
 80136ea:	e792      	b.n	8013612 <__ieee754_rem_pio2f+0x5a>
 80136ec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80136f0:	15eb      	asrs	r3, r5, #23
 80136f2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80136f6:	2d08      	cmp	r5, #8
 80136f8:	dde3      	ble.n	80136c2 <__ieee754_rem_pio2f+0x10a>
 80136fa:	eddf 7a44 	vldr	s15, [pc, #272]	; 801380c <__ieee754_rem_pio2f+0x254>
 80136fe:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013810 <__ieee754_rem_pio2f+0x258>
 8013702:	eef0 6a40 	vmov.f32	s13, s0
 8013706:	eee6 6a27 	vfma.f32	s13, s12, s15
 801370a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801370e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8013712:	eef0 7a40 	vmov.f32	s15, s0
 8013716:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801371a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801371e:	ee15 2a90 	vmov	r2, s11
 8013722:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013726:	1a5b      	subs	r3, r3, r1
 8013728:	2b19      	cmp	r3, #25
 801372a:	dc04      	bgt.n	8013736 <__ieee754_rem_pio2f+0x17e>
 801372c:	edc4 5a00 	vstr	s11, [r4]
 8013730:	eeb0 0a66 	vmov.f32	s0, s13
 8013734:	e7c6      	b.n	80136c4 <__ieee754_rem_pio2f+0x10c>
 8013736:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013820 <__ieee754_rem_pio2f+0x268>
 801373a:	eeb0 0a66 	vmov.f32	s0, s13
 801373e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013742:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013746:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013824 <__ieee754_rem_pio2f+0x26c>
 801374a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801374e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013752:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013756:	ed84 7a00 	vstr	s14, [r4]
 801375a:	e7b3      	b.n	80136c4 <__ieee754_rem_pio2f+0x10c>
 801375c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013760:	db06      	blt.n	8013770 <__ieee754_rem_pio2f+0x1b8>
 8013762:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013766:	edc0 7a01 	vstr	s15, [r0, #4]
 801376a:	edc0 7a00 	vstr	s15, [r0]
 801376e:	e733      	b.n	80135d8 <__ieee754_rem_pio2f+0x20>
 8013770:	15ea      	asrs	r2, r5, #23
 8013772:	3a86      	subs	r2, #134	; 0x86
 8013774:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013778:	ee07 3a90 	vmov	s15, r3
 801377c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013780:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013828 <__ieee754_rem_pio2f+0x270>
 8013784:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801378c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013790:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013794:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013798:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801379c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137a0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80137a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80137a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80137ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b0:	edcd 7a05 	vstr	s15, [sp, #20]
 80137b4:	d11e      	bne.n	80137f4 <__ieee754_rem_pio2f+0x23c>
 80137b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80137ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137be:	bf14      	ite	ne
 80137c0:	2302      	movne	r3, #2
 80137c2:	2301      	moveq	r3, #1
 80137c4:	4919      	ldr	r1, [pc, #100]	; (801382c <__ieee754_rem_pio2f+0x274>)
 80137c6:	9101      	str	r1, [sp, #4]
 80137c8:	2102      	movs	r1, #2
 80137ca:	9100      	str	r1, [sp, #0]
 80137cc:	a803      	add	r0, sp, #12
 80137ce:	4621      	mov	r1, r4
 80137d0:	f000 f832 	bl	8013838 <__kernel_rem_pio2f>
 80137d4:	2e00      	cmp	r6, #0
 80137d6:	f6bf af1c 	bge.w	8013612 <__ieee754_rem_pio2f+0x5a>
 80137da:	edd4 7a00 	vldr	s15, [r4]
 80137de:	eef1 7a67 	vneg.f32	s15, s15
 80137e2:	edc4 7a00 	vstr	s15, [r4]
 80137e6:	edd4 7a01 	vldr	s15, [r4, #4]
 80137ea:	eef1 7a67 	vneg.f32	s15, s15
 80137ee:	edc4 7a01 	vstr	s15, [r4, #4]
 80137f2:	e779      	b.n	80136e8 <__ieee754_rem_pio2f+0x130>
 80137f4:	2303      	movs	r3, #3
 80137f6:	e7e5      	b.n	80137c4 <__ieee754_rem_pio2f+0x20c>
 80137f8:	3f490fd8 	.word	0x3f490fd8
 80137fc:	4016cbe3 	.word	0x4016cbe3
 8013800:	3fc90f80 	.word	0x3fc90f80
 8013804:	3fc90fd0 	.word	0x3fc90fd0
 8013808:	37354443 	.word	0x37354443
 801380c:	37354400 	.word	0x37354400
 8013810:	2e85a308 	.word	0x2e85a308
 8013814:	43490f80 	.word	0x43490f80
 8013818:	3f22f984 	.word	0x3f22f984
 801381c:	08014a68 	.word	0x08014a68
 8013820:	2e85a300 	.word	0x2e85a300
 8013824:	248d3132 	.word	0x248d3132
 8013828:	43800000 	.word	0x43800000
 801382c:	08014ae8 	.word	0x08014ae8

08013830 <__ieee754_sqrtf>:
 8013830:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013834:	4770      	bx	lr
	...

08013838 <__kernel_rem_pio2f>:
 8013838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801383c:	ed2d 8b04 	vpush	{d8-d9}
 8013840:	b0d9      	sub	sp, #356	; 0x164
 8013842:	4688      	mov	r8, r1
 8013844:	9002      	str	r0, [sp, #8]
 8013846:	49bb      	ldr	r1, [pc, #748]	; (8013b34 <__kernel_rem_pio2f+0x2fc>)
 8013848:	9866      	ldr	r0, [sp, #408]	; 0x198
 801384a:	9301      	str	r3, [sp, #4]
 801384c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013850:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8013854:	1e59      	subs	r1, r3, #1
 8013856:	1d13      	adds	r3, r2, #4
 8013858:	db27      	blt.n	80138aa <__kernel_rem_pio2f+0x72>
 801385a:	f1b2 0b03 	subs.w	fp, r2, #3
 801385e:	bf48      	it	mi
 8013860:	f102 0b04 	addmi.w	fp, r2, #4
 8013864:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8013868:	1c45      	adds	r5, r0, #1
 801386a:	00ec      	lsls	r4, r5, #3
 801386c:	1a47      	subs	r7, r0, r1
 801386e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8013b44 <__kernel_rem_pio2f+0x30c>
 8013872:	9403      	str	r4, [sp, #12]
 8013874:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013878:	eb0a 0c01 	add.w	ip, sl, r1
 801387c:	ae1c      	add	r6, sp, #112	; 0x70
 801387e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8013882:	2400      	movs	r4, #0
 8013884:	4564      	cmp	r4, ip
 8013886:	dd12      	ble.n	80138ae <__kernel_rem_pio2f+0x76>
 8013888:	9b01      	ldr	r3, [sp, #4]
 801388a:	ac1c      	add	r4, sp, #112	; 0x70
 801388c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8013890:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8013894:	f04f 0c00 	mov.w	ip, #0
 8013898:	45d4      	cmp	ip, sl
 801389a:	dc27      	bgt.n	80138ec <__kernel_rem_pio2f+0xb4>
 801389c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80138a0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8013b44 <__kernel_rem_pio2f+0x30c>
 80138a4:	4627      	mov	r7, r4
 80138a6:	2600      	movs	r6, #0
 80138a8:	e016      	b.n	80138d8 <__kernel_rem_pio2f+0xa0>
 80138aa:	2000      	movs	r0, #0
 80138ac:	e7dc      	b.n	8013868 <__kernel_rem_pio2f+0x30>
 80138ae:	42e7      	cmn	r7, r4
 80138b0:	bf5d      	ittte	pl
 80138b2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80138b6:	ee07 3a90 	vmovpl	s15, r3
 80138ba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80138be:	eef0 7a47 	vmovmi.f32	s15, s14
 80138c2:	ece6 7a01 	vstmia	r6!, {s15}
 80138c6:	3401      	adds	r4, #1
 80138c8:	e7dc      	b.n	8013884 <__kernel_rem_pio2f+0x4c>
 80138ca:	ecf9 6a01 	vldmia	r9!, {s13}
 80138ce:	ed97 7a00 	vldr	s14, [r7]
 80138d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80138d6:	3601      	adds	r6, #1
 80138d8:	428e      	cmp	r6, r1
 80138da:	f1a7 0704 	sub.w	r7, r7, #4
 80138de:	ddf4      	ble.n	80138ca <__kernel_rem_pio2f+0x92>
 80138e0:	eceb 7a01 	vstmia	fp!, {s15}
 80138e4:	f10c 0c01 	add.w	ip, ip, #1
 80138e8:	3404      	adds	r4, #4
 80138ea:	e7d5      	b.n	8013898 <__kernel_rem_pio2f+0x60>
 80138ec:	ab08      	add	r3, sp, #32
 80138ee:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80138f2:	eddf 8a93 	vldr	s17, [pc, #588]	; 8013b40 <__kernel_rem_pio2f+0x308>
 80138f6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8013b3c <__kernel_rem_pio2f+0x304>
 80138fa:	9304      	str	r3, [sp, #16]
 80138fc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8013900:	4656      	mov	r6, sl
 8013902:	00b3      	lsls	r3, r6, #2
 8013904:	9305      	str	r3, [sp, #20]
 8013906:	ab58      	add	r3, sp, #352	; 0x160
 8013908:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801390c:	ac08      	add	r4, sp, #32
 801390e:	ab44      	add	r3, sp, #272	; 0x110
 8013910:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8013914:	46a4      	mov	ip, r4
 8013916:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801391a:	4637      	mov	r7, r6
 801391c:	2f00      	cmp	r7, #0
 801391e:	f1a0 0004 	sub.w	r0, r0, #4
 8013922:	dc4f      	bgt.n	80139c4 <__kernel_rem_pio2f+0x18c>
 8013924:	4628      	mov	r0, r5
 8013926:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801392a:	f000 fcc5 	bl	80142b8 <scalbnf>
 801392e:	eeb0 8a40 	vmov.f32	s16, s0
 8013932:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8013936:	ee28 0a00 	vmul.f32	s0, s16, s0
 801393a:	f000 fc7b 	bl	8014234 <floorf>
 801393e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8013942:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013946:	2d00      	cmp	r5, #0
 8013948:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801394c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013950:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013954:	ee17 9a90 	vmov	r9, s15
 8013958:	ee38 8a40 	vsub.f32	s16, s16, s0
 801395c:	dd44      	ble.n	80139e8 <__kernel_rem_pio2f+0x1b0>
 801395e:	f106 3cff 	add.w	ip, r6, #4294967295
 8013962:	ab08      	add	r3, sp, #32
 8013964:	f1c5 0e08 	rsb	lr, r5, #8
 8013968:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801396c:	fa47 f00e 	asr.w	r0, r7, lr
 8013970:	4481      	add	r9, r0
 8013972:	fa00 f00e 	lsl.w	r0, r0, lr
 8013976:	1a3f      	subs	r7, r7, r0
 8013978:	f1c5 0007 	rsb	r0, r5, #7
 801397c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8013980:	4107      	asrs	r7, r0
 8013982:	2f00      	cmp	r7, #0
 8013984:	dd3f      	ble.n	8013a06 <__kernel_rem_pio2f+0x1ce>
 8013986:	f04f 0e00 	mov.w	lr, #0
 801398a:	f109 0901 	add.w	r9, r9, #1
 801398e:	4673      	mov	r3, lr
 8013990:	4576      	cmp	r6, lr
 8013992:	dc6b      	bgt.n	8013a6c <__kernel_rem_pio2f+0x234>
 8013994:	2d00      	cmp	r5, #0
 8013996:	dd04      	ble.n	80139a2 <__kernel_rem_pio2f+0x16a>
 8013998:	2d01      	cmp	r5, #1
 801399a:	d078      	beq.n	8013a8e <__kernel_rem_pio2f+0x256>
 801399c:	2d02      	cmp	r5, #2
 801399e:	f000 8081 	beq.w	8013aa4 <__kernel_rem_pio2f+0x26c>
 80139a2:	2f02      	cmp	r7, #2
 80139a4:	d12f      	bne.n	8013a06 <__kernel_rem_pio2f+0x1ce>
 80139a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80139aa:	ee30 8a48 	vsub.f32	s16, s0, s16
 80139ae:	b353      	cbz	r3, 8013a06 <__kernel_rem_pio2f+0x1ce>
 80139b0:	4628      	mov	r0, r5
 80139b2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80139b6:	f000 fc7f 	bl	80142b8 <scalbnf>
 80139ba:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80139be:	ee38 8a40 	vsub.f32	s16, s16, s0
 80139c2:	e020      	b.n	8013a06 <__kernel_rem_pio2f+0x1ce>
 80139c4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80139c8:	3f01      	subs	r7, #1
 80139ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139d2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80139d6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80139da:	ecac 0a01 	vstmia	ip!, {s0}
 80139de:	ed90 0a00 	vldr	s0, [r0]
 80139e2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80139e6:	e799      	b.n	801391c <__kernel_rem_pio2f+0xe4>
 80139e8:	d105      	bne.n	80139f6 <__kernel_rem_pio2f+0x1be>
 80139ea:	1e70      	subs	r0, r6, #1
 80139ec:	ab08      	add	r3, sp, #32
 80139ee:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80139f2:	11ff      	asrs	r7, r7, #7
 80139f4:	e7c5      	b.n	8013982 <__kernel_rem_pio2f+0x14a>
 80139f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80139fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80139fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a02:	da31      	bge.n	8013a68 <__kernel_rem_pio2f+0x230>
 8013a04:	2700      	movs	r7, #0
 8013a06:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0e:	f040 809b 	bne.w	8013b48 <__kernel_rem_pio2f+0x310>
 8013a12:	1e74      	subs	r4, r6, #1
 8013a14:	46a4      	mov	ip, r4
 8013a16:	2000      	movs	r0, #0
 8013a18:	45d4      	cmp	ip, sl
 8013a1a:	da4a      	bge.n	8013ab2 <__kernel_rem_pio2f+0x27a>
 8013a1c:	2800      	cmp	r0, #0
 8013a1e:	d07a      	beq.n	8013b16 <__kernel_rem_pio2f+0x2de>
 8013a20:	ab08      	add	r3, sp, #32
 8013a22:	3d08      	subs	r5, #8
 8013a24:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f000 8081 	beq.w	8013b30 <__kernel_rem_pio2f+0x2f8>
 8013a2e:	4628      	mov	r0, r5
 8013a30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013a34:	00a5      	lsls	r5, r4, #2
 8013a36:	f000 fc3f 	bl	80142b8 <scalbnf>
 8013a3a:	aa44      	add	r2, sp, #272	; 0x110
 8013a3c:	1d2b      	adds	r3, r5, #4
 8013a3e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013b40 <__kernel_rem_pio2f+0x308>
 8013a42:	18d1      	adds	r1, r2, r3
 8013a44:	4622      	mov	r2, r4
 8013a46:	2a00      	cmp	r2, #0
 8013a48:	f280 80ae 	bge.w	8013ba8 <__kernel_rem_pio2f+0x370>
 8013a4c:	4622      	mov	r2, r4
 8013a4e:	2a00      	cmp	r2, #0
 8013a50:	f2c0 80cc 	blt.w	8013bec <__kernel_rem_pio2f+0x3b4>
 8013a54:	a944      	add	r1, sp, #272	; 0x110
 8013a56:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8013a5a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8013b38 <__kernel_rem_pio2f+0x300>
 8013a5e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013b44 <__kernel_rem_pio2f+0x30c>
 8013a62:	2000      	movs	r0, #0
 8013a64:	1aa1      	subs	r1, r4, r2
 8013a66:	e0b6      	b.n	8013bd6 <__kernel_rem_pio2f+0x39e>
 8013a68:	2702      	movs	r7, #2
 8013a6a:	e78c      	b.n	8013986 <__kernel_rem_pio2f+0x14e>
 8013a6c:	6820      	ldr	r0, [r4, #0]
 8013a6e:	b94b      	cbnz	r3, 8013a84 <__kernel_rem_pio2f+0x24c>
 8013a70:	b118      	cbz	r0, 8013a7a <__kernel_rem_pio2f+0x242>
 8013a72:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013a76:	6020      	str	r0, [r4, #0]
 8013a78:	2001      	movs	r0, #1
 8013a7a:	f10e 0e01 	add.w	lr, lr, #1
 8013a7e:	3404      	adds	r4, #4
 8013a80:	4603      	mov	r3, r0
 8013a82:	e785      	b.n	8013990 <__kernel_rem_pio2f+0x158>
 8013a84:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013a88:	6020      	str	r0, [r4, #0]
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	e7f5      	b.n	8013a7a <__kernel_rem_pio2f+0x242>
 8013a8e:	1e74      	subs	r4, r6, #1
 8013a90:	a808      	add	r0, sp, #32
 8013a92:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013a96:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013a9a:	f10d 0c20 	add.w	ip, sp, #32
 8013a9e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8013aa2:	e77e      	b.n	80139a2 <__kernel_rem_pio2f+0x16a>
 8013aa4:	1e74      	subs	r4, r6, #1
 8013aa6:	a808      	add	r0, sp, #32
 8013aa8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013aac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8013ab0:	e7f3      	b.n	8013a9a <__kernel_rem_pio2f+0x262>
 8013ab2:	ab08      	add	r3, sp, #32
 8013ab4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013ab8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013abc:	4318      	orrs	r0, r3
 8013abe:	e7ab      	b.n	8013a18 <__kernel_rem_pio2f+0x1e0>
 8013ac0:	f10c 0c01 	add.w	ip, ip, #1
 8013ac4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013ac8:	2c00      	cmp	r4, #0
 8013aca:	d0f9      	beq.n	8013ac0 <__kernel_rem_pio2f+0x288>
 8013acc:	9b05      	ldr	r3, [sp, #20]
 8013ace:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013ad2:	eb0d 0003 	add.w	r0, sp, r3
 8013ad6:	9b01      	ldr	r3, [sp, #4]
 8013ad8:	18f4      	adds	r4, r6, r3
 8013ada:	ab1c      	add	r3, sp, #112	; 0x70
 8013adc:	1c77      	adds	r7, r6, #1
 8013ade:	384c      	subs	r0, #76	; 0x4c
 8013ae0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013ae4:	4466      	add	r6, ip
 8013ae6:	42be      	cmp	r6, r7
 8013ae8:	f6ff af0b 	blt.w	8013902 <__kernel_rem_pio2f+0xca>
 8013aec:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8013af0:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013af4:	ee07 3a90 	vmov	s15, r3
 8013af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013afc:	f04f 0c00 	mov.w	ip, #0
 8013b00:	ece4 7a01 	vstmia	r4!, {s15}
 8013b04:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013b44 <__kernel_rem_pio2f+0x30c>
 8013b08:	46a1      	mov	r9, r4
 8013b0a:	458c      	cmp	ip, r1
 8013b0c:	dd07      	ble.n	8013b1e <__kernel_rem_pio2f+0x2e6>
 8013b0e:	ece0 7a01 	vstmia	r0!, {s15}
 8013b12:	3701      	adds	r7, #1
 8013b14:	e7e7      	b.n	8013ae6 <__kernel_rem_pio2f+0x2ae>
 8013b16:	9804      	ldr	r0, [sp, #16]
 8013b18:	f04f 0c01 	mov.w	ip, #1
 8013b1c:	e7d2      	b.n	8013ac4 <__kernel_rem_pio2f+0x28c>
 8013b1e:	ecfe 6a01 	vldmia	lr!, {s13}
 8013b22:	ed39 7a01 	vldmdb	r9!, {s14}
 8013b26:	f10c 0c01 	add.w	ip, ip, #1
 8013b2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b2e:	e7ec      	b.n	8013b0a <__kernel_rem_pio2f+0x2d2>
 8013b30:	3c01      	subs	r4, #1
 8013b32:	e775      	b.n	8013a20 <__kernel_rem_pio2f+0x1e8>
 8013b34:	08014e2c 	.word	0x08014e2c
 8013b38:	08014e00 	.word	0x08014e00
 8013b3c:	43800000 	.word	0x43800000
 8013b40:	3b800000 	.word	0x3b800000
 8013b44:	00000000 	.word	0x00000000
 8013b48:	9b03      	ldr	r3, [sp, #12]
 8013b4a:	eeb0 0a48 	vmov.f32	s0, s16
 8013b4e:	1a98      	subs	r0, r3, r2
 8013b50:	f000 fbb2 	bl	80142b8 <scalbnf>
 8013b54:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013b3c <__kernel_rem_pio2f+0x304>
 8013b58:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b60:	db19      	blt.n	8013b96 <__kernel_rem_pio2f+0x35e>
 8013b62:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013b40 <__kernel_rem_pio2f+0x308>
 8013b66:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013b6a:	aa08      	add	r2, sp, #32
 8013b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b70:	1c74      	adds	r4, r6, #1
 8013b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b76:	3508      	adds	r5, #8
 8013b78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013b84:	ee10 3a10 	vmov	r3, s0
 8013b88:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013b8c:	ee17 3a90 	vmov	r3, s15
 8013b90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013b94:	e74b      	b.n	8013a2e <__kernel_rem_pio2f+0x1f6>
 8013b96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013b9a:	aa08      	add	r2, sp, #32
 8013b9c:	ee10 3a10 	vmov	r3, s0
 8013ba0:	4634      	mov	r4, r6
 8013ba2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013ba6:	e742      	b.n	8013a2e <__kernel_rem_pio2f+0x1f6>
 8013ba8:	a808      	add	r0, sp, #32
 8013baa:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013bae:	9001      	str	r0, [sp, #4]
 8013bb0:	ee07 0a90 	vmov	s15, r0
 8013bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bb8:	3a01      	subs	r2, #1
 8013bba:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013bbe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013bc2:	ed61 7a01 	vstmdb	r1!, {s15}
 8013bc6:	e73e      	b.n	8013a46 <__kernel_rem_pio2f+0x20e>
 8013bc8:	ecfc 6a01 	vldmia	ip!, {s13}
 8013bcc:	ecb6 7a01 	vldmia	r6!, {s14}
 8013bd0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013bd4:	3001      	adds	r0, #1
 8013bd6:	4550      	cmp	r0, sl
 8013bd8:	dc01      	bgt.n	8013bde <__kernel_rem_pio2f+0x3a6>
 8013bda:	4288      	cmp	r0, r1
 8013bdc:	ddf4      	ble.n	8013bc8 <__kernel_rem_pio2f+0x390>
 8013bde:	a858      	add	r0, sp, #352	; 0x160
 8013be0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013be4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013be8:	3a01      	subs	r2, #1
 8013bea:	e730      	b.n	8013a4e <__kernel_rem_pio2f+0x216>
 8013bec:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8013bee:	2a02      	cmp	r2, #2
 8013bf0:	dc09      	bgt.n	8013c06 <__kernel_rem_pio2f+0x3ce>
 8013bf2:	2a00      	cmp	r2, #0
 8013bf4:	dc2a      	bgt.n	8013c4c <__kernel_rem_pio2f+0x414>
 8013bf6:	d043      	beq.n	8013c80 <__kernel_rem_pio2f+0x448>
 8013bf8:	f009 0007 	and.w	r0, r9, #7
 8013bfc:	b059      	add	sp, #356	; 0x164
 8013bfe:	ecbd 8b04 	vpop	{d8-d9}
 8013c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c06:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013c08:	2b03      	cmp	r3, #3
 8013c0a:	d1f5      	bne.n	8013bf8 <__kernel_rem_pio2f+0x3c0>
 8013c0c:	ab30      	add	r3, sp, #192	; 0xc0
 8013c0e:	442b      	add	r3, r5
 8013c10:	461a      	mov	r2, r3
 8013c12:	4619      	mov	r1, r3
 8013c14:	4620      	mov	r0, r4
 8013c16:	2800      	cmp	r0, #0
 8013c18:	f1a1 0104 	sub.w	r1, r1, #4
 8013c1c:	dc51      	bgt.n	8013cc2 <__kernel_rem_pio2f+0x48a>
 8013c1e:	4621      	mov	r1, r4
 8013c20:	2901      	cmp	r1, #1
 8013c22:	f1a2 0204 	sub.w	r2, r2, #4
 8013c26:	dc5c      	bgt.n	8013ce2 <__kernel_rem_pio2f+0x4aa>
 8013c28:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013b44 <__kernel_rem_pio2f+0x30c>
 8013c2c:	3304      	adds	r3, #4
 8013c2e:	2c01      	cmp	r4, #1
 8013c30:	dc67      	bgt.n	8013d02 <__kernel_rem_pio2f+0x4ca>
 8013c32:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013c36:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013c3a:	2f00      	cmp	r7, #0
 8013c3c:	d167      	bne.n	8013d0e <__kernel_rem_pio2f+0x4d6>
 8013c3e:	edc8 6a00 	vstr	s13, [r8]
 8013c42:	ed88 7a01 	vstr	s14, [r8, #4]
 8013c46:	edc8 7a02 	vstr	s15, [r8, #8]
 8013c4a:	e7d5      	b.n	8013bf8 <__kernel_rem_pio2f+0x3c0>
 8013c4c:	aa30      	add	r2, sp, #192	; 0xc0
 8013c4e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8013b44 <__kernel_rem_pio2f+0x30c>
 8013c52:	4413      	add	r3, r2
 8013c54:	4622      	mov	r2, r4
 8013c56:	2a00      	cmp	r2, #0
 8013c58:	da24      	bge.n	8013ca4 <__kernel_rem_pio2f+0x46c>
 8013c5a:	b34f      	cbz	r7, 8013cb0 <__kernel_rem_pio2f+0x478>
 8013c5c:	eef1 7a47 	vneg.f32	s15, s14
 8013c60:	edc8 7a00 	vstr	s15, [r8]
 8013c64:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013c68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c6c:	aa31      	add	r2, sp, #196	; 0xc4
 8013c6e:	2301      	movs	r3, #1
 8013c70:	429c      	cmp	r4, r3
 8013c72:	da20      	bge.n	8013cb6 <__kernel_rem_pio2f+0x47e>
 8013c74:	b10f      	cbz	r7, 8013c7a <__kernel_rem_pio2f+0x442>
 8013c76:	eef1 7a67 	vneg.f32	s15, s15
 8013c7a:	edc8 7a01 	vstr	s15, [r8, #4]
 8013c7e:	e7bb      	b.n	8013bf8 <__kernel_rem_pio2f+0x3c0>
 8013c80:	aa30      	add	r2, sp, #192	; 0xc0
 8013c82:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8013b44 <__kernel_rem_pio2f+0x30c>
 8013c86:	4413      	add	r3, r2
 8013c88:	2c00      	cmp	r4, #0
 8013c8a:	da05      	bge.n	8013c98 <__kernel_rem_pio2f+0x460>
 8013c8c:	b10f      	cbz	r7, 8013c92 <__kernel_rem_pio2f+0x45a>
 8013c8e:	eef1 7a67 	vneg.f32	s15, s15
 8013c92:	edc8 7a00 	vstr	s15, [r8]
 8013c96:	e7af      	b.n	8013bf8 <__kernel_rem_pio2f+0x3c0>
 8013c98:	ed33 7a01 	vldmdb	r3!, {s14}
 8013c9c:	3c01      	subs	r4, #1
 8013c9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ca2:	e7f1      	b.n	8013c88 <__kernel_rem_pio2f+0x450>
 8013ca4:	ed73 7a01 	vldmdb	r3!, {s15}
 8013ca8:	3a01      	subs	r2, #1
 8013caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cae:	e7d2      	b.n	8013c56 <__kernel_rem_pio2f+0x41e>
 8013cb0:	eef0 7a47 	vmov.f32	s15, s14
 8013cb4:	e7d4      	b.n	8013c60 <__kernel_rem_pio2f+0x428>
 8013cb6:	ecb2 7a01 	vldmia	r2!, {s14}
 8013cba:	3301      	adds	r3, #1
 8013cbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cc0:	e7d6      	b.n	8013c70 <__kernel_rem_pio2f+0x438>
 8013cc2:	edd1 7a00 	vldr	s15, [r1]
 8013cc6:	edd1 6a01 	vldr	s13, [r1, #4]
 8013cca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013cce:	3801      	subs	r0, #1
 8013cd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cd4:	ed81 7a00 	vstr	s14, [r1]
 8013cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cdc:	edc1 7a01 	vstr	s15, [r1, #4]
 8013ce0:	e799      	b.n	8013c16 <__kernel_rem_pio2f+0x3de>
 8013ce2:	edd2 7a00 	vldr	s15, [r2]
 8013ce6:	edd2 6a01 	vldr	s13, [r2, #4]
 8013cea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013cee:	3901      	subs	r1, #1
 8013cf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cf4:	ed82 7a00 	vstr	s14, [r2]
 8013cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cfc:	edc2 7a01 	vstr	s15, [r2, #4]
 8013d00:	e78e      	b.n	8013c20 <__kernel_rem_pio2f+0x3e8>
 8013d02:	ed33 7a01 	vldmdb	r3!, {s14}
 8013d06:	3c01      	subs	r4, #1
 8013d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d0c:	e78f      	b.n	8013c2e <__kernel_rem_pio2f+0x3f6>
 8013d0e:	eef1 6a66 	vneg.f32	s13, s13
 8013d12:	eeb1 7a47 	vneg.f32	s14, s14
 8013d16:	edc8 6a00 	vstr	s13, [r8]
 8013d1a:	ed88 7a01 	vstr	s14, [r8, #4]
 8013d1e:	eef1 7a67 	vneg.f32	s15, s15
 8013d22:	e790      	b.n	8013c46 <__kernel_rem_pio2f+0x40e>

08013d24 <__kernel_tanf>:
 8013d24:	b508      	push	{r3, lr}
 8013d26:	ee10 3a10 	vmov	r3, s0
 8013d2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013d2e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8013d32:	eef0 7a40 	vmov.f32	s15, s0
 8013d36:	da17      	bge.n	8013d68 <__kernel_tanf+0x44>
 8013d38:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8013d3c:	ee17 1a10 	vmov	r1, s14
 8013d40:	bb41      	cbnz	r1, 8013d94 <__kernel_tanf+0x70>
 8013d42:	1c43      	adds	r3, r0, #1
 8013d44:	4313      	orrs	r3, r2
 8013d46:	d108      	bne.n	8013d5a <__kernel_tanf+0x36>
 8013d48:	f000 fa6c 	bl	8014224 <fabsf>
 8013d4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d50:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013d54:	eeb0 0a67 	vmov.f32	s0, s15
 8013d58:	bd08      	pop	{r3, pc}
 8013d5a:	2801      	cmp	r0, #1
 8013d5c:	d0fa      	beq.n	8013d54 <__kernel_tanf+0x30>
 8013d5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013d62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013d66:	e7f5      	b.n	8013d54 <__kernel_tanf+0x30>
 8013d68:	494c      	ldr	r1, [pc, #304]	; (8013e9c <__kernel_tanf+0x178>)
 8013d6a:	428a      	cmp	r2, r1
 8013d6c:	db12      	blt.n	8013d94 <__kernel_tanf+0x70>
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	bfb8      	it	lt
 8013d72:	eef1 7a40 	vneglt.f32	s15, s0
 8013d76:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8013ea0 <__kernel_tanf+0x17c>
 8013d7a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013d7e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8013ea4 <__kernel_tanf+0x180>
 8013d82:	bfb8      	it	lt
 8013d84:	eef1 0a60 	vneglt.f32	s1, s1
 8013d88:	ee70 0a60 	vsub.f32	s1, s0, s1
 8013d8c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8013d90:	eddf 0a45 	vldr	s1, [pc, #276]	; 8013ea8 <__kernel_tanf+0x184>
 8013d94:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013eac <__kernel_tanf+0x188>
 8013d98:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8013eb0 <__kernel_tanf+0x18c>
 8013d9c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8013eb4 <__kernel_tanf+0x190>
 8013da0:	493e      	ldr	r1, [pc, #248]	; (8013e9c <__kernel_tanf+0x178>)
 8013da2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013da6:	428a      	cmp	r2, r1
 8013da8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013dac:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013db0:	eddf 5a41 	vldr	s11, [pc, #260]	; 8013eb8 <__kernel_tanf+0x194>
 8013db4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013db8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8013ebc <__kernel_tanf+0x198>
 8013dbc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013dc0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8013ec0 <__kernel_tanf+0x19c>
 8013dc4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013dc8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8013ec4 <__kernel_tanf+0x1a0>
 8013dcc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013dd0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8013ec8 <__kernel_tanf+0x1a4>
 8013dd4:	eee7 5a05 	vfma.f32	s11, s14, s10
 8013dd8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8013ecc <__kernel_tanf+0x1a8>
 8013ddc:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013de0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8013ed0 <__kernel_tanf+0x1ac>
 8013de4:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013de8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8013ed4 <__kernel_tanf+0x1b0>
 8013dec:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013df0:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013ed8 <__kernel_tanf+0x1b4>
 8013df4:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013df8:	eeb0 7a46 	vmov.f32	s14, s12
 8013dfc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013e00:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8013e04:	eeb0 6a60 	vmov.f32	s12, s1
 8013e08:	eea7 6a05 	vfma.f32	s12, s14, s10
 8013e0c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013edc <__kernel_tanf+0x1b8>
 8013e10:	eee6 0a26 	vfma.f32	s1, s12, s13
 8013e14:	eee5 0a07 	vfma.f32	s1, s10, s14
 8013e18:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013e1c:	db1d      	blt.n	8013e5a <__kernel_tanf+0x136>
 8013e1e:	ee06 0a90 	vmov	s13, r0
 8013e22:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8013e26:	ee27 6a07 	vmul.f32	s12, s14, s14
 8013e2a:	ee37 7a00 	vadd.f32	s14, s14, s0
 8013e2e:	179b      	asrs	r3, r3, #30
 8013e30:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8013e34:	f003 0302 	and.w	r3, r3, #2
 8013e38:	f1c3 0301 	rsb	r3, r3, #1
 8013e3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013e40:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8013e44:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013e48:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013e4c:	ee07 3a90 	vmov	s15, r3
 8013e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e54:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013e58:	e77c      	b.n	8013d54 <__kernel_tanf+0x30>
 8013e5a:	2801      	cmp	r0, #1
 8013e5c:	d01b      	beq.n	8013e96 <__kernel_tanf+0x172>
 8013e5e:	4b20      	ldr	r3, [pc, #128]	; (8013ee0 <__kernel_tanf+0x1bc>)
 8013e60:	ee17 2a10 	vmov	r2, s14
 8013e64:	401a      	ands	r2, r3
 8013e66:	ee06 2a10 	vmov	s12, r2
 8013e6a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8013e6e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013e72:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013e76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e7e:	ee16 2a90 	vmov	r2, s13
 8013e82:	4013      	ands	r3, r2
 8013e84:	ee07 3a90 	vmov	s15, r3
 8013e88:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013e8c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8013e90:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013e94:	e75e      	b.n	8013d54 <__kernel_tanf+0x30>
 8013e96:	eef0 7a47 	vmov.f32	s15, s14
 8013e9a:	e75b      	b.n	8013d54 <__kernel_tanf+0x30>
 8013e9c:	3f2ca140 	.word	0x3f2ca140
 8013ea0:	3f490fda 	.word	0x3f490fda
 8013ea4:	33222168 	.word	0x33222168
 8013ea8:	00000000 	.word	0x00000000
 8013eac:	b79bae5f 	.word	0xb79bae5f
 8013eb0:	38a3f445 	.word	0x38a3f445
 8013eb4:	37d95384 	.word	0x37d95384
 8013eb8:	3a1a26c8 	.word	0x3a1a26c8
 8013ebc:	3b6b6916 	.word	0x3b6b6916
 8013ec0:	3cb327a4 	.word	0x3cb327a4
 8013ec4:	3e088889 	.word	0x3e088889
 8013ec8:	3895c07a 	.word	0x3895c07a
 8013ecc:	398137b9 	.word	0x398137b9
 8013ed0:	3abede48 	.word	0x3abede48
 8013ed4:	3c11371f 	.word	0x3c11371f
 8013ed8:	3d5d0dd1 	.word	0x3d5d0dd1
 8013edc:	3eaaaaab 	.word	0x3eaaaaab
 8013ee0:	fffff000 	.word	0xfffff000

08013ee4 <with_errno>:
 8013ee4:	b570      	push	{r4, r5, r6, lr}
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	460d      	mov	r5, r1
 8013eea:	4616      	mov	r6, r2
 8013eec:	f000 fa62 	bl	80143b4 <__errno>
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	6006      	str	r6, [r0, #0]
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	bd70      	pop	{r4, r5, r6, pc}

08013ef8 <xflow>:
 8013ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013efa:	4614      	mov	r4, r2
 8013efc:	461d      	mov	r5, r3
 8013efe:	b108      	cbz	r0, 8013f04 <xflow+0xc>
 8013f00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f04:	e9cd 2300 	strd	r2, r3, [sp]
 8013f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	4629      	mov	r1, r5
 8013f10:	f7ec fb22 	bl	8000558 <__aeabi_dmul>
 8013f14:	2222      	movs	r2, #34	; 0x22
 8013f16:	b003      	add	sp, #12
 8013f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f1c:	f7ff bfe2 	b.w	8013ee4 <with_errno>

08013f20 <__math_uflow>:
 8013f20:	b508      	push	{r3, lr}
 8013f22:	2200      	movs	r2, #0
 8013f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013f28:	f7ff ffe6 	bl	8013ef8 <xflow>
 8013f2c:	ec41 0b10 	vmov	d0, r0, r1
 8013f30:	bd08      	pop	{r3, pc}

08013f32 <__math_oflow>:
 8013f32:	b508      	push	{r3, lr}
 8013f34:	2200      	movs	r2, #0
 8013f36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013f3a:	f7ff ffdd 	bl	8013ef8 <xflow>
 8013f3e:	ec41 0b10 	vmov	d0, r0, r1
 8013f42:	bd08      	pop	{r3, pc}

08013f44 <fabs>:
 8013f44:	ec51 0b10 	vmov	r0, r1, d0
 8013f48:	ee10 2a10 	vmov	r2, s0
 8013f4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013f50:	ec43 2b10 	vmov	d0, r2, r3
 8013f54:	4770      	bx	lr

08013f56 <finite>:
 8013f56:	b082      	sub	sp, #8
 8013f58:	ed8d 0b00 	vstr	d0, [sp]
 8013f5c:	9801      	ldr	r0, [sp, #4]
 8013f5e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013f62:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013f66:	0fc0      	lsrs	r0, r0, #31
 8013f68:	b002      	add	sp, #8
 8013f6a:	4770      	bx	lr
 8013f6c:	0000      	movs	r0, r0
	...

08013f70 <scalbn>:
 8013f70:	b570      	push	{r4, r5, r6, lr}
 8013f72:	ec55 4b10 	vmov	r4, r5, d0
 8013f76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013f7a:	4606      	mov	r6, r0
 8013f7c:	462b      	mov	r3, r5
 8013f7e:	b99a      	cbnz	r2, 8013fa8 <scalbn+0x38>
 8013f80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013f84:	4323      	orrs	r3, r4
 8013f86:	d036      	beq.n	8013ff6 <scalbn+0x86>
 8013f88:	4b39      	ldr	r3, [pc, #228]	; (8014070 <scalbn+0x100>)
 8013f8a:	4629      	mov	r1, r5
 8013f8c:	ee10 0a10 	vmov	r0, s0
 8013f90:	2200      	movs	r2, #0
 8013f92:	f7ec fae1 	bl	8000558 <__aeabi_dmul>
 8013f96:	4b37      	ldr	r3, [pc, #220]	; (8014074 <scalbn+0x104>)
 8013f98:	429e      	cmp	r6, r3
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	460d      	mov	r5, r1
 8013f9e:	da10      	bge.n	8013fc2 <scalbn+0x52>
 8013fa0:	a32b      	add	r3, pc, #172	; (adr r3, 8014050 <scalbn+0xe0>)
 8013fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa6:	e03a      	b.n	801401e <scalbn+0xae>
 8013fa8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013fac:	428a      	cmp	r2, r1
 8013fae:	d10c      	bne.n	8013fca <scalbn+0x5a>
 8013fb0:	ee10 2a10 	vmov	r2, s0
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	f7ec f918 	bl	80001ec <__adddf3>
 8013fbc:	4604      	mov	r4, r0
 8013fbe:	460d      	mov	r5, r1
 8013fc0:	e019      	b.n	8013ff6 <scalbn+0x86>
 8013fc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013fc6:	460b      	mov	r3, r1
 8013fc8:	3a36      	subs	r2, #54	; 0x36
 8013fca:	4432      	add	r2, r6
 8013fcc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013fd0:	428a      	cmp	r2, r1
 8013fd2:	dd08      	ble.n	8013fe6 <scalbn+0x76>
 8013fd4:	2d00      	cmp	r5, #0
 8013fd6:	a120      	add	r1, pc, #128	; (adr r1, 8014058 <scalbn+0xe8>)
 8013fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fdc:	da1c      	bge.n	8014018 <scalbn+0xa8>
 8013fde:	a120      	add	r1, pc, #128	; (adr r1, 8014060 <scalbn+0xf0>)
 8013fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fe4:	e018      	b.n	8014018 <scalbn+0xa8>
 8013fe6:	2a00      	cmp	r2, #0
 8013fe8:	dd08      	ble.n	8013ffc <scalbn+0x8c>
 8013fea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013fee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013ff2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013ff6:	ec45 4b10 	vmov	d0, r4, r5
 8013ffa:	bd70      	pop	{r4, r5, r6, pc}
 8013ffc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014000:	da19      	bge.n	8014036 <scalbn+0xc6>
 8014002:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014006:	429e      	cmp	r6, r3
 8014008:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801400c:	dd0a      	ble.n	8014024 <scalbn+0xb4>
 801400e:	a112      	add	r1, pc, #72	; (adr r1, 8014058 <scalbn+0xe8>)
 8014010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d1e2      	bne.n	8013fde <scalbn+0x6e>
 8014018:	a30f      	add	r3, pc, #60	; (adr r3, 8014058 <scalbn+0xe8>)
 801401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801401e:	f7ec fa9b 	bl	8000558 <__aeabi_dmul>
 8014022:	e7cb      	b.n	8013fbc <scalbn+0x4c>
 8014024:	a10a      	add	r1, pc, #40	; (adr r1, 8014050 <scalbn+0xe0>)
 8014026:	e9d1 0100 	ldrd	r0, r1, [r1]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d0b8      	beq.n	8013fa0 <scalbn+0x30>
 801402e:	a10e      	add	r1, pc, #56	; (adr r1, 8014068 <scalbn+0xf8>)
 8014030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014034:	e7b4      	b.n	8013fa0 <scalbn+0x30>
 8014036:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801403a:	3236      	adds	r2, #54	; 0x36
 801403c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014040:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014044:	4620      	mov	r0, r4
 8014046:	4b0c      	ldr	r3, [pc, #48]	; (8014078 <scalbn+0x108>)
 8014048:	2200      	movs	r2, #0
 801404a:	e7e8      	b.n	801401e <scalbn+0xae>
 801404c:	f3af 8000 	nop.w
 8014050:	c2f8f359 	.word	0xc2f8f359
 8014054:	01a56e1f 	.word	0x01a56e1f
 8014058:	8800759c 	.word	0x8800759c
 801405c:	7e37e43c 	.word	0x7e37e43c
 8014060:	8800759c 	.word	0x8800759c
 8014064:	fe37e43c 	.word	0xfe37e43c
 8014068:	c2f8f359 	.word	0xc2f8f359
 801406c:	81a56e1f 	.word	0x81a56e1f
 8014070:	43500000 	.word	0x43500000
 8014074:	ffff3cb0 	.word	0xffff3cb0
 8014078:	3c900000 	.word	0x3c900000

0801407c <atanf>:
 801407c:	b538      	push	{r3, r4, r5, lr}
 801407e:	ee10 5a10 	vmov	r5, s0
 8014082:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014086:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801408a:	eef0 7a40 	vmov.f32	s15, s0
 801408e:	db10      	blt.n	80140b2 <atanf+0x36>
 8014090:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014094:	dd04      	ble.n	80140a0 <atanf+0x24>
 8014096:	ee70 7a00 	vadd.f32	s15, s0, s0
 801409a:	eeb0 0a67 	vmov.f32	s0, s15
 801409e:	bd38      	pop	{r3, r4, r5, pc}
 80140a0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80141d8 <atanf+0x15c>
 80140a4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80141dc <atanf+0x160>
 80140a8:	2d00      	cmp	r5, #0
 80140aa:	bfd8      	it	le
 80140ac:	eef0 7a40 	vmovle.f32	s15, s0
 80140b0:	e7f3      	b.n	801409a <atanf+0x1e>
 80140b2:	4b4b      	ldr	r3, [pc, #300]	; (80141e0 <atanf+0x164>)
 80140b4:	429c      	cmp	r4, r3
 80140b6:	dc10      	bgt.n	80140da <atanf+0x5e>
 80140b8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80140bc:	da0a      	bge.n	80140d4 <atanf+0x58>
 80140be:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80141e4 <atanf+0x168>
 80140c2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80140c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80140ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80140ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d2:	dce2      	bgt.n	801409a <atanf+0x1e>
 80140d4:	f04f 33ff 	mov.w	r3, #4294967295
 80140d8:	e013      	b.n	8014102 <atanf+0x86>
 80140da:	f000 f8a3 	bl	8014224 <fabsf>
 80140de:	4b42      	ldr	r3, [pc, #264]	; (80141e8 <atanf+0x16c>)
 80140e0:	429c      	cmp	r4, r3
 80140e2:	dc4f      	bgt.n	8014184 <atanf+0x108>
 80140e4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80140e8:	429c      	cmp	r4, r3
 80140ea:	dc41      	bgt.n	8014170 <atanf+0xf4>
 80140ec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80140f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80140f4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80140f8:	2300      	movs	r3, #0
 80140fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80140fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014102:	1c5a      	adds	r2, r3, #1
 8014104:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014108:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80141ec <atanf+0x170>
 801410c:	eddf 5a38 	vldr	s11, [pc, #224]	; 80141f0 <atanf+0x174>
 8014110:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80141f4 <atanf+0x178>
 8014114:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014118:	eee6 5a87 	vfma.f32	s11, s13, s14
 801411c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80141f8 <atanf+0x17c>
 8014120:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014124:	eddf 5a35 	vldr	s11, [pc, #212]	; 80141fc <atanf+0x180>
 8014128:	eee7 5a26 	vfma.f32	s11, s14, s13
 801412c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014200 <atanf+0x184>
 8014130:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014134:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014204 <atanf+0x188>
 8014138:	eee7 5a26 	vfma.f32	s11, s14, s13
 801413c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014208 <atanf+0x18c>
 8014140:	eea6 5a87 	vfma.f32	s10, s13, s14
 8014144:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801420c <atanf+0x190>
 8014148:	eea5 7a26 	vfma.f32	s14, s10, s13
 801414c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014210 <atanf+0x194>
 8014150:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014154:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8014214 <atanf+0x198>
 8014158:	eea5 7a26 	vfma.f32	s14, s10, s13
 801415c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014160:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014164:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014168:	d121      	bne.n	80141ae <atanf+0x132>
 801416a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801416e:	e794      	b.n	801409a <atanf+0x1e>
 8014170:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014174:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014178:	ee30 0a27 	vadd.f32	s0, s0, s15
 801417c:	2301      	movs	r3, #1
 801417e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014182:	e7be      	b.n	8014102 <atanf+0x86>
 8014184:	4b24      	ldr	r3, [pc, #144]	; (8014218 <atanf+0x19c>)
 8014186:	429c      	cmp	r4, r3
 8014188:	dc0b      	bgt.n	80141a2 <atanf+0x126>
 801418a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801418e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014192:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014196:	2302      	movs	r3, #2
 8014198:	ee70 6a67 	vsub.f32	s13, s0, s15
 801419c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141a0:	e7af      	b.n	8014102 <atanf+0x86>
 80141a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80141a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80141aa:	2303      	movs	r3, #3
 80141ac:	e7a9      	b.n	8014102 <atanf+0x86>
 80141ae:	4a1b      	ldr	r2, [pc, #108]	; (801421c <atanf+0x1a0>)
 80141b0:	491b      	ldr	r1, [pc, #108]	; (8014220 <atanf+0x1a4>)
 80141b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80141b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80141ba:	ed93 0a00 	vldr	s0, [r3]
 80141be:	ee37 7a40 	vsub.f32	s14, s14, s0
 80141c2:	ed92 0a00 	vldr	s0, [r2]
 80141c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141ca:	2d00      	cmp	r5, #0
 80141cc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80141d0:	bfb8      	it	lt
 80141d2:	eef1 7a67 	vneglt.f32	s15, s15
 80141d6:	e760      	b.n	801409a <atanf+0x1e>
 80141d8:	3fc90fdb 	.word	0x3fc90fdb
 80141dc:	bfc90fdb 	.word	0xbfc90fdb
 80141e0:	3edfffff 	.word	0x3edfffff
 80141e4:	7149f2ca 	.word	0x7149f2ca
 80141e8:	3f97ffff 	.word	0x3f97ffff
 80141ec:	3c8569d7 	.word	0x3c8569d7
 80141f0:	3d4bda59 	.word	0x3d4bda59
 80141f4:	bd6ef16b 	.word	0xbd6ef16b
 80141f8:	3d886b35 	.word	0x3d886b35
 80141fc:	3dba2e6e 	.word	0x3dba2e6e
 8014200:	3e124925 	.word	0x3e124925
 8014204:	3eaaaaab 	.word	0x3eaaaaab
 8014208:	bd15a221 	.word	0xbd15a221
 801420c:	bd9d8795 	.word	0xbd9d8795
 8014210:	bde38e38 	.word	0xbde38e38
 8014214:	be4ccccd 	.word	0xbe4ccccd
 8014218:	401bffff 	.word	0x401bffff
 801421c:	08014e38 	.word	0x08014e38
 8014220:	08014e48 	.word	0x08014e48

08014224 <fabsf>:
 8014224:	ee10 3a10 	vmov	r3, s0
 8014228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801422c:	ee00 3a10 	vmov	s0, r3
 8014230:	4770      	bx	lr
	...

08014234 <floorf>:
 8014234:	ee10 3a10 	vmov	r3, s0
 8014238:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801423c:	3a7f      	subs	r2, #127	; 0x7f
 801423e:	2a16      	cmp	r2, #22
 8014240:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014244:	dc2a      	bgt.n	801429c <floorf+0x68>
 8014246:	2a00      	cmp	r2, #0
 8014248:	da11      	bge.n	801426e <floorf+0x3a>
 801424a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80142ac <floorf+0x78>
 801424e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014252:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801425a:	dd05      	ble.n	8014268 <floorf+0x34>
 801425c:	2b00      	cmp	r3, #0
 801425e:	da23      	bge.n	80142a8 <floorf+0x74>
 8014260:	4a13      	ldr	r2, [pc, #76]	; (80142b0 <floorf+0x7c>)
 8014262:	2900      	cmp	r1, #0
 8014264:	bf18      	it	ne
 8014266:	4613      	movne	r3, r2
 8014268:	ee00 3a10 	vmov	s0, r3
 801426c:	4770      	bx	lr
 801426e:	4911      	ldr	r1, [pc, #68]	; (80142b4 <floorf+0x80>)
 8014270:	4111      	asrs	r1, r2
 8014272:	420b      	tst	r3, r1
 8014274:	d0fa      	beq.n	801426c <floorf+0x38>
 8014276:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80142ac <floorf+0x78>
 801427a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801427e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014286:	ddef      	ble.n	8014268 <floorf+0x34>
 8014288:	2b00      	cmp	r3, #0
 801428a:	bfbe      	ittt	lt
 801428c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014290:	fa40 f202 	asrlt.w	r2, r0, r2
 8014294:	189b      	addlt	r3, r3, r2
 8014296:	ea23 0301 	bic.w	r3, r3, r1
 801429a:	e7e5      	b.n	8014268 <floorf+0x34>
 801429c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80142a0:	d3e4      	bcc.n	801426c <floorf+0x38>
 80142a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80142a6:	4770      	bx	lr
 80142a8:	2300      	movs	r3, #0
 80142aa:	e7dd      	b.n	8014268 <floorf+0x34>
 80142ac:	7149f2ca 	.word	0x7149f2ca
 80142b0:	bf800000 	.word	0xbf800000
 80142b4:	007fffff 	.word	0x007fffff

080142b8 <scalbnf>:
 80142b8:	ee10 3a10 	vmov	r3, s0
 80142bc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80142c0:	d025      	beq.n	801430e <scalbnf+0x56>
 80142c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80142c6:	d302      	bcc.n	80142ce <scalbnf+0x16>
 80142c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80142cc:	4770      	bx	lr
 80142ce:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80142d2:	d122      	bne.n	801431a <scalbnf+0x62>
 80142d4:	4b2a      	ldr	r3, [pc, #168]	; (8014380 <scalbnf+0xc8>)
 80142d6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014384 <scalbnf+0xcc>
 80142da:	4298      	cmp	r0, r3
 80142dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80142e0:	db16      	blt.n	8014310 <scalbnf+0x58>
 80142e2:	ee10 3a10 	vmov	r3, s0
 80142e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80142ea:	3a19      	subs	r2, #25
 80142ec:	4402      	add	r2, r0
 80142ee:	2afe      	cmp	r2, #254	; 0xfe
 80142f0:	dd15      	ble.n	801431e <scalbnf+0x66>
 80142f2:	ee10 3a10 	vmov	r3, s0
 80142f6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014388 <scalbnf+0xd0>
 80142fa:	eddf 6a24 	vldr	s13, [pc, #144]	; 801438c <scalbnf+0xd4>
 80142fe:	2b00      	cmp	r3, #0
 8014300:	eeb0 7a67 	vmov.f32	s14, s15
 8014304:	bfb8      	it	lt
 8014306:	eef0 7a66 	vmovlt.f32	s15, s13
 801430a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801430e:	4770      	bx	lr
 8014310:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014390 <scalbnf+0xd8>
 8014314:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014318:	4770      	bx	lr
 801431a:	0dd2      	lsrs	r2, r2, #23
 801431c:	e7e6      	b.n	80142ec <scalbnf+0x34>
 801431e:	2a00      	cmp	r2, #0
 8014320:	dd06      	ble.n	8014330 <scalbnf+0x78>
 8014322:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014326:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801432a:	ee00 3a10 	vmov	s0, r3
 801432e:	4770      	bx	lr
 8014330:	f112 0f16 	cmn.w	r2, #22
 8014334:	da1a      	bge.n	801436c <scalbnf+0xb4>
 8014336:	f24c 3350 	movw	r3, #50000	; 0xc350
 801433a:	4298      	cmp	r0, r3
 801433c:	ee10 3a10 	vmov	r3, s0
 8014340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014344:	dd0a      	ble.n	801435c <scalbnf+0xa4>
 8014346:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014388 <scalbnf+0xd0>
 801434a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801438c <scalbnf+0xd4>
 801434e:	eef0 7a40 	vmov.f32	s15, s0
 8014352:	2b00      	cmp	r3, #0
 8014354:	bf18      	it	ne
 8014356:	eeb0 0a47 	vmovne.f32	s0, s14
 801435a:	e7db      	b.n	8014314 <scalbnf+0x5c>
 801435c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014390 <scalbnf+0xd8>
 8014360:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014394 <scalbnf+0xdc>
 8014364:	eef0 7a40 	vmov.f32	s15, s0
 8014368:	2b00      	cmp	r3, #0
 801436a:	e7f3      	b.n	8014354 <scalbnf+0x9c>
 801436c:	3219      	adds	r2, #25
 801436e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014372:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014376:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014398 <scalbnf+0xe0>
 801437a:	ee07 3a10 	vmov	s14, r3
 801437e:	e7c4      	b.n	801430a <scalbnf+0x52>
 8014380:	ffff3cb0 	.word	0xffff3cb0
 8014384:	4c000000 	.word	0x4c000000
 8014388:	7149f2ca 	.word	0x7149f2ca
 801438c:	f149f2ca 	.word	0xf149f2ca
 8014390:	0da24260 	.word	0x0da24260
 8014394:	8da24260 	.word	0x8da24260
 8014398:	33000000 	.word	0x33000000

0801439c <abort>:
 801439c:	b508      	push	{r3, lr}
 801439e:	2006      	movs	r0, #6
 80143a0:	f000 f962 	bl	8014668 <raise>
 80143a4:	2001      	movs	r0, #1
 80143a6:	f7ee fcc3 	bl	8002d30 <_exit>

080143aa <atoi>:
 80143aa:	220a      	movs	r2, #10
 80143ac:	2100      	movs	r1, #0
 80143ae:	f000 ba09 	b.w	80147c4 <strtol>
	...

080143b4 <__errno>:
 80143b4:	4b01      	ldr	r3, [pc, #4]	; (80143bc <__errno+0x8>)
 80143b6:	6818      	ldr	r0, [r3, #0]
 80143b8:	4770      	bx	lr
 80143ba:	bf00      	nop
 80143bc:	20000014 	.word	0x20000014

080143c0 <__libc_init_array>:
 80143c0:	b570      	push	{r4, r5, r6, lr}
 80143c2:	4d0d      	ldr	r5, [pc, #52]	; (80143f8 <__libc_init_array+0x38>)
 80143c4:	4c0d      	ldr	r4, [pc, #52]	; (80143fc <__libc_init_array+0x3c>)
 80143c6:	1b64      	subs	r4, r4, r5
 80143c8:	10a4      	asrs	r4, r4, #2
 80143ca:	2600      	movs	r6, #0
 80143cc:	42a6      	cmp	r6, r4
 80143ce:	d109      	bne.n	80143e4 <__libc_init_array+0x24>
 80143d0:	4d0b      	ldr	r5, [pc, #44]	; (8014400 <__libc_init_array+0x40>)
 80143d2:	4c0c      	ldr	r4, [pc, #48]	; (8014404 <__libc_init_array+0x44>)
 80143d4:	f000 fa0e 	bl	80147f4 <_init>
 80143d8:	1b64      	subs	r4, r4, r5
 80143da:	10a4      	asrs	r4, r4, #2
 80143dc:	2600      	movs	r6, #0
 80143de:	42a6      	cmp	r6, r4
 80143e0:	d105      	bne.n	80143ee <__libc_init_array+0x2e>
 80143e2:	bd70      	pop	{r4, r5, r6, pc}
 80143e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80143e8:	4798      	blx	r3
 80143ea:	3601      	adds	r6, #1
 80143ec:	e7ee      	b.n	80143cc <__libc_init_array+0xc>
 80143ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80143f2:	4798      	blx	r3
 80143f4:	3601      	adds	r6, #1
 80143f6:	e7f2      	b.n	80143de <__libc_init_array+0x1e>
 80143f8:	08014f64 	.word	0x08014f64
 80143fc:	08014f64 	.word	0x08014f64
 8014400:	08014f64 	.word	0x08014f64
 8014404:	08014f6c 	.word	0x08014f6c

08014408 <malloc>:
 8014408:	4b02      	ldr	r3, [pc, #8]	; (8014414 <malloc+0xc>)
 801440a:	4601      	mov	r1, r0
 801440c:	6818      	ldr	r0, [r3, #0]
 801440e:	f000 b87f 	b.w	8014510 <_malloc_r>
 8014412:	bf00      	nop
 8014414:	20000014 	.word	0x20000014

08014418 <free>:
 8014418:	4b02      	ldr	r3, [pc, #8]	; (8014424 <free+0xc>)
 801441a:	4601      	mov	r1, r0
 801441c:	6818      	ldr	r0, [r3, #0]
 801441e:	f000 b80b 	b.w	8014438 <_free_r>
 8014422:	bf00      	nop
 8014424:	20000014 	.word	0x20000014

08014428 <memset>:
 8014428:	4402      	add	r2, r0
 801442a:	4603      	mov	r3, r0
 801442c:	4293      	cmp	r3, r2
 801442e:	d100      	bne.n	8014432 <memset+0xa>
 8014430:	4770      	bx	lr
 8014432:	f803 1b01 	strb.w	r1, [r3], #1
 8014436:	e7f9      	b.n	801442c <memset+0x4>

08014438 <_free_r>:
 8014438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801443a:	2900      	cmp	r1, #0
 801443c:	d044      	beq.n	80144c8 <_free_r+0x90>
 801443e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014442:	9001      	str	r0, [sp, #4]
 8014444:	2b00      	cmp	r3, #0
 8014446:	f1a1 0404 	sub.w	r4, r1, #4
 801444a:	bfb8      	it	lt
 801444c:	18e4      	addlt	r4, r4, r3
 801444e:	f000 f9c3 	bl	80147d8 <__malloc_lock>
 8014452:	4a1e      	ldr	r2, [pc, #120]	; (80144cc <_free_r+0x94>)
 8014454:	9801      	ldr	r0, [sp, #4]
 8014456:	6813      	ldr	r3, [r2, #0]
 8014458:	b933      	cbnz	r3, 8014468 <_free_r+0x30>
 801445a:	6063      	str	r3, [r4, #4]
 801445c:	6014      	str	r4, [r2, #0]
 801445e:	b003      	add	sp, #12
 8014460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014464:	f000 b9be 	b.w	80147e4 <__malloc_unlock>
 8014468:	42a3      	cmp	r3, r4
 801446a:	d908      	bls.n	801447e <_free_r+0x46>
 801446c:	6825      	ldr	r5, [r4, #0]
 801446e:	1961      	adds	r1, r4, r5
 8014470:	428b      	cmp	r3, r1
 8014472:	bf01      	itttt	eq
 8014474:	6819      	ldreq	r1, [r3, #0]
 8014476:	685b      	ldreq	r3, [r3, #4]
 8014478:	1949      	addeq	r1, r1, r5
 801447a:	6021      	streq	r1, [r4, #0]
 801447c:	e7ed      	b.n	801445a <_free_r+0x22>
 801447e:	461a      	mov	r2, r3
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	b10b      	cbz	r3, 8014488 <_free_r+0x50>
 8014484:	42a3      	cmp	r3, r4
 8014486:	d9fa      	bls.n	801447e <_free_r+0x46>
 8014488:	6811      	ldr	r1, [r2, #0]
 801448a:	1855      	adds	r5, r2, r1
 801448c:	42a5      	cmp	r5, r4
 801448e:	d10b      	bne.n	80144a8 <_free_r+0x70>
 8014490:	6824      	ldr	r4, [r4, #0]
 8014492:	4421      	add	r1, r4
 8014494:	1854      	adds	r4, r2, r1
 8014496:	42a3      	cmp	r3, r4
 8014498:	6011      	str	r1, [r2, #0]
 801449a:	d1e0      	bne.n	801445e <_free_r+0x26>
 801449c:	681c      	ldr	r4, [r3, #0]
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	6053      	str	r3, [r2, #4]
 80144a2:	4421      	add	r1, r4
 80144a4:	6011      	str	r1, [r2, #0]
 80144a6:	e7da      	b.n	801445e <_free_r+0x26>
 80144a8:	d902      	bls.n	80144b0 <_free_r+0x78>
 80144aa:	230c      	movs	r3, #12
 80144ac:	6003      	str	r3, [r0, #0]
 80144ae:	e7d6      	b.n	801445e <_free_r+0x26>
 80144b0:	6825      	ldr	r5, [r4, #0]
 80144b2:	1961      	adds	r1, r4, r5
 80144b4:	428b      	cmp	r3, r1
 80144b6:	bf04      	itt	eq
 80144b8:	6819      	ldreq	r1, [r3, #0]
 80144ba:	685b      	ldreq	r3, [r3, #4]
 80144bc:	6063      	str	r3, [r4, #4]
 80144be:	bf04      	itt	eq
 80144c0:	1949      	addeq	r1, r1, r5
 80144c2:	6021      	streq	r1, [r4, #0]
 80144c4:	6054      	str	r4, [r2, #4]
 80144c6:	e7ca      	b.n	801445e <_free_r+0x26>
 80144c8:	b003      	add	sp, #12
 80144ca:	bd30      	pop	{r4, r5, pc}
 80144cc:	2000d7ac 	.word	0x2000d7ac

080144d0 <sbrk_aligned>:
 80144d0:	b570      	push	{r4, r5, r6, lr}
 80144d2:	4e0e      	ldr	r6, [pc, #56]	; (801450c <sbrk_aligned+0x3c>)
 80144d4:	460c      	mov	r4, r1
 80144d6:	6831      	ldr	r1, [r6, #0]
 80144d8:	4605      	mov	r5, r0
 80144da:	b911      	cbnz	r1, 80144e2 <sbrk_aligned+0x12>
 80144dc:	f000 f88c 	bl	80145f8 <_sbrk_r>
 80144e0:	6030      	str	r0, [r6, #0]
 80144e2:	4621      	mov	r1, r4
 80144e4:	4628      	mov	r0, r5
 80144e6:	f000 f887 	bl	80145f8 <_sbrk_r>
 80144ea:	1c43      	adds	r3, r0, #1
 80144ec:	d00a      	beq.n	8014504 <sbrk_aligned+0x34>
 80144ee:	1cc4      	adds	r4, r0, #3
 80144f0:	f024 0403 	bic.w	r4, r4, #3
 80144f4:	42a0      	cmp	r0, r4
 80144f6:	d007      	beq.n	8014508 <sbrk_aligned+0x38>
 80144f8:	1a21      	subs	r1, r4, r0
 80144fa:	4628      	mov	r0, r5
 80144fc:	f000 f87c 	bl	80145f8 <_sbrk_r>
 8014500:	3001      	adds	r0, #1
 8014502:	d101      	bne.n	8014508 <sbrk_aligned+0x38>
 8014504:	f04f 34ff 	mov.w	r4, #4294967295
 8014508:	4620      	mov	r0, r4
 801450a:	bd70      	pop	{r4, r5, r6, pc}
 801450c:	2000d7b0 	.word	0x2000d7b0

08014510 <_malloc_r>:
 8014510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014514:	1ccd      	adds	r5, r1, #3
 8014516:	f025 0503 	bic.w	r5, r5, #3
 801451a:	3508      	adds	r5, #8
 801451c:	2d0c      	cmp	r5, #12
 801451e:	bf38      	it	cc
 8014520:	250c      	movcc	r5, #12
 8014522:	2d00      	cmp	r5, #0
 8014524:	4607      	mov	r7, r0
 8014526:	db01      	blt.n	801452c <_malloc_r+0x1c>
 8014528:	42a9      	cmp	r1, r5
 801452a:	d905      	bls.n	8014538 <_malloc_r+0x28>
 801452c:	230c      	movs	r3, #12
 801452e:	603b      	str	r3, [r7, #0]
 8014530:	2600      	movs	r6, #0
 8014532:	4630      	mov	r0, r6
 8014534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014538:	4e2e      	ldr	r6, [pc, #184]	; (80145f4 <_malloc_r+0xe4>)
 801453a:	f000 f94d 	bl	80147d8 <__malloc_lock>
 801453e:	6833      	ldr	r3, [r6, #0]
 8014540:	461c      	mov	r4, r3
 8014542:	bb34      	cbnz	r4, 8014592 <_malloc_r+0x82>
 8014544:	4629      	mov	r1, r5
 8014546:	4638      	mov	r0, r7
 8014548:	f7ff ffc2 	bl	80144d0 <sbrk_aligned>
 801454c:	1c43      	adds	r3, r0, #1
 801454e:	4604      	mov	r4, r0
 8014550:	d14d      	bne.n	80145ee <_malloc_r+0xde>
 8014552:	6834      	ldr	r4, [r6, #0]
 8014554:	4626      	mov	r6, r4
 8014556:	2e00      	cmp	r6, #0
 8014558:	d140      	bne.n	80145dc <_malloc_r+0xcc>
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	4631      	mov	r1, r6
 801455e:	4638      	mov	r0, r7
 8014560:	eb04 0803 	add.w	r8, r4, r3
 8014564:	f000 f848 	bl	80145f8 <_sbrk_r>
 8014568:	4580      	cmp	r8, r0
 801456a:	d13a      	bne.n	80145e2 <_malloc_r+0xd2>
 801456c:	6821      	ldr	r1, [r4, #0]
 801456e:	3503      	adds	r5, #3
 8014570:	1a6d      	subs	r5, r5, r1
 8014572:	f025 0503 	bic.w	r5, r5, #3
 8014576:	3508      	adds	r5, #8
 8014578:	2d0c      	cmp	r5, #12
 801457a:	bf38      	it	cc
 801457c:	250c      	movcc	r5, #12
 801457e:	4629      	mov	r1, r5
 8014580:	4638      	mov	r0, r7
 8014582:	f7ff ffa5 	bl	80144d0 <sbrk_aligned>
 8014586:	3001      	adds	r0, #1
 8014588:	d02b      	beq.n	80145e2 <_malloc_r+0xd2>
 801458a:	6823      	ldr	r3, [r4, #0]
 801458c:	442b      	add	r3, r5
 801458e:	6023      	str	r3, [r4, #0]
 8014590:	e00e      	b.n	80145b0 <_malloc_r+0xa0>
 8014592:	6822      	ldr	r2, [r4, #0]
 8014594:	1b52      	subs	r2, r2, r5
 8014596:	d41e      	bmi.n	80145d6 <_malloc_r+0xc6>
 8014598:	2a0b      	cmp	r2, #11
 801459a:	d916      	bls.n	80145ca <_malloc_r+0xba>
 801459c:	1961      	adds	r1, r4, r5
 801459e:	42a3      	cmp	r3, r4
 80145a0:	6025      	str	r5, [r4, #0]
 80145a2:	bf18      	it	ne
 80145a4:	6059      	strne	r1, [r3, #4]
 80145a6:	6863      	ldr	r3, [r4, #4]
 80145a8:	bf08      	it	eq
 80145aa:	6031      	streq	r1, [r6, #0]
 80145ac:	5162      	str	r2, [r4, r5]
 80145ae:	604b      	str	r3, [r1, #4]
 80145b0:	4638      	mov	r0, r7
 80145b2:	f104 060b 	add.w	r6, r4, #11
 80145b6:	f000 f915 	bl	80147e4 <__malloc_unlock>
 80145ba:	f026 0607 	bic.w	r6, r6, #7
 80145be:	1d23      	adds	r3, r4, #4
 80145c0:	1af2      	subs	r2, r6, r3
 80145c2:	d0b6      	beq.n	8014532 <_malloc_r+0x22>
 80145c4:	1b9b      	subs	r3, r3, r6
 80145c6:	50a3      	str	r3, [r4, r2]
 80145c8:	e7b3      	b.n	8014532 <_malloc_r+0x22>
 80145ca:	6862      	ldr	r2, [r4, #4]
 80145cc:	42a3      	cmp	r3, r4
 80145ce:	bf0c      	ite	eq
 80145d0:	6032      	streq	r2, [r6, #0]
 80145d2:	605a      	strne	r2, [r3, #4]
 80145d4:	e7ec      	b.n	80145b0 <_malloc_r+0xa0>
 80145d6:	4623      	mov	r3, r4
 80145d8:	6864      	ldr	r4, [r4, #4]
 80145da:	e7b2      	b.n	8014542 <_malloc_r+0x32>
 80145dc:	4634      	mov	r4, r6
 80145de:	6876      	ldr	r6, [r6, #4]
 80145e0:	e7b9      	b.n	8014556 <_malloc_r+0x46>
 80145e2:	230c      	movs	r3, #12
 80145e4:	603b      	str	r3, [r7, #0]
 80145e6:	4638      	mov	r0, r7
 80145e8:	f000 f8fc 	bl	80147e4 <__malloc_unlock>
 80145ec:	e7a1      	b.n	8014532 <_malloc_r+0x22>
 80145ee:	6025      	str	r5, [r4, #0]
 80145f0:	e7de      	b.n	80145b0 <_malloc_r+0xa0>
 80145f2:	bf00      	nop
 80145f4:	2000d7ac 	.word	0x2000d7ac

080145f8 <_sbrk_r>:
 80145f8:	b538      	push	{r3, r4, r5, lr}
 80145fa:	4d06      	ldr	r5, [pc, #24]	; (8014614 <_sbrk_r+0x1c>)
 80145fc:	2300      	movs	r3, #0
 80145fe:	4604      	mov	r4, r0
 8014600:	4608      	mov	r0, r1
 8014602:	602b      	str	r3, [r5, #0]
 8014604:	f7ee fb9e 	bl	8002d44 <_sbrk>
 8014608:	1c43      	adds	r3, r0, #1
 801460a:	d102      	bne.n	8014612 <_sbrk_r+0x1a>
 801460c:	682b      	ldr	r3, [r5, #0]
 801460e:	b103      	cbz	r3, 8014612 <_sbrk_r+0x1a>
 8014610:	6023      	str	r3, [r4, #0]
 8014612:	bd38      	pop	{r3, r4, r5, pc}
 8014614:	2000d7b4 	.word	0x2000d7b4

08014618 <_raise_r>:
 8014618:	291f      	cmp	r1, #31
 801461a:	b538      	push	{r3, r4, r5, lr}
 801461c:	4604      	mov	r4, r0
 801461e:	460d      	mov	r5, r1
 8014620:	d904      	bls.n	801462c <_raise_r+0x14>
 8014622:	2316      	movs	r3, #22
 8014624:	6003      	str	r3, [r0, #0]
 8014626:	f04f 30ff 	mov.w	r0, #4294967295
 801462a:	bd38      	pop	{r3, r4, r5, pc}
 801462c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801462e:	b112      	cbz	r2, 8014636 <_raise_r+0x1e>
 8014630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014634:	b94b      	cbnz	r3, 801464a <_raise_r+0x32>
 8014636:	4620      	mov	r0, r4
 8014638:	f000 f830 	bl	801469c <_getpid_r>
 801463c:	462a      	mov	r2, r5
 801463e:	4601      	mov	r1, r0
 8014640:	4620      	mov	r0, r4
 8014642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014646:	f000 b817 	b.w	8014678 <_kill_r>
 801464a:	2b01      	cmp	r3, #1
 801464c:	d00a      	beq.n	8014664 <_raise_r+0x4c>
 801464e:	1c59      	adds	r1, r3, #1
 8014650:	d103      	bne.n	801465a <_raise_r+0x42>
 8014652:	2316      	movs	r3, #22
 8014654:	6003      	str	r3, [r0, #0]
 8014656:	2001      	movs	r0, #1
 8014658:	e7e7      	b.n	801462a <_raise_r+0x12>
 801465a:	2400      	movs	r4, #0
 801465c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014660:	4628      	mov	r0, r5
 8014662:	4798      	blx	r3
 8014664:	2000      	movs	r0, #0
 8014666:	e7e0      	b.n	801462a <_raise_r+0x12>

08014668 <raise>:
 8014668:	4b02      	ldr	r3, [pc, #8]	; (8014674 <raise+0xc>)
 801466a:	4601      	mov	r1, r0
 801466c:	6818      	ldr	r0, [r3, #0]
 801466e:	f7ff bfd3 	b.w	8014618 <_raise_r>
 8014672:	bf00      	nop
 8014674:	20000014 	.word	0x20000014

08014678 <_kill_r>:
 8014678:	b538      	push	{r3, r4, r5, lr}
 801467a:	4d07      	ldr	r5, [pc, #28]	; (8014698 <_kill_r+0x20>)
 801467c:	2300      	movs	r3, #0
 801467e:	4604      	mov	r4, r0
 8014680:	4608      	mov	r0, r1
 8014682:	4611      	mov	r1, r2
 8014684:	602b      	str	r3, [r5, #0]
 8014686:	f7ee fb43 	bl	8002d10 <_kill>
 801468a:	1c43      	adds	r3, r0, #1
 801468c:	d102      	bne.n	8014694 <_kill_r+0x1c>
 801468e:	682b      	ldr	r3, [r5, #0]
 8014690:	b103      	cbz	r3, 8014694 <_kill_r+0x1c>
 8014692:	6023      	str	r3, [r4, #0]
 8014694:	bd38      	pop	{r3, r4, r5, pc}
 8014696:	bf00      	nop
 8014698:	2000d7b4 	.word	0x2000d7b4

0801469c <_getpid_r>:
 801469c:	f7ee bb30 	b.w	8002d00 <_getpid>

080146a0 <strcat>:
 80146a0:	b510      	push	{r4, lr}
 80146a2:	4602      	mov	r2, r0
 80146a4:	7814      	ldrb	r4, [r2, #0]
 80146a6:	4613      	mov	r3, r2
 80146a8:	3201      	adds	r2, #1
 80146aa:	2c00      	cmp	r4, #0
 80146ac:	d1fa      	bne.n	80146a4 <strcat+0x4>
 80146ae:	3b01      	subs	r3, #1
 80146b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80146b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80146b8:	2a00      	cmp	r2, #0
 80146ba:	d1f9      	bne.n	80146b0 <strcat+0x10>
 80146bc:	bd10      	pop	{r4, pc}
	...

080146c0 <_strtol_l.constprop.0>:
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146c6:	d001      	beq.n	80146cc <_strtol_l.constprop.0+0xc>
 80146c8:	2b24      	cmp	r3, #36	; 0x24
 80146ca:	d906      	bls.n	80146da <_strtol_l.constprop.0+0x1a>
 80146cc:	f7ff fe72 	bl	80143b4 <__errno>
 80146d0:	2316      	movs	r3, #22
 80146d2:	6003      	str	r3, [r0, #0]
 80146d4:	2000      	movs	r0, #0
 80146d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80147c0 <_strtol_l.constprop.0+0x100>
 80146de:	460d      	mov	r5, r1
 80146e0:	462e      	mov	r6, r5
 80146e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80146e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80146ea:	f017 0708 	ands.w	r7, r7, #8
 80146ee:	d1f7      	bne.n	80146e0 <_strtol_l.constprop.0+0x20>
 80146f0:	2c2d      	cmp	r4, #45	; 0x2d
 80146f2:	d132      	bne.n	801475a <_strtol_l.constprop.0+0x9a>
 80146f4:	782c      	ldrb	r4, [r5, #0]
 80146f6:	2701      	movs	r7, #1
 80146f8:	1cb5      	adds	r5, r6, #2
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d05b      	beq.n	80147b6 <_strtol_l.constprop.0+0xf6>
 80146fe:	2b10      	cmp	r3, #16
 8014700:	d109      	bne.n	8014716 <_strtol_l.constprop.0+0x56>
 8014702:	2c30      	cmp	r4, #48	; 0x30
 8014704:	d107      	bne.n	8014716 <_strtol_l.constprop.0+0x56>
 8014706:	782c      	ldrb	r4, [r5, #0]
 8014708:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801470c:	2c58      	cmp	r4, #88	; 0x58
 801470e:	d14d      	bne.n	80147ac <_strtol_l.constprop.0+0xec>
 8014710:	786c      	ldrb	r4, [r5, #1]
 8014712:	2310      	movs	r3, #16
 8014714:	3502      	adds	r5, #2
 8014716:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801471a:	f108 38ff 	add.w	r8, r8, #4294967295
 801471e:	f04f 0c00 	mov.w	ip, #0
 8014722:	fbb8 f9f3 	udiv	r9, r8, r3
 8014726:	4666      	mov	r6, ip
 8014728:	fb03 8a19 	mls	sl, r3, r9, r8
 801472c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014730:	f1be 0f09 	cmp.w	lr, #9
 8014734:	d816      	bhi.n	8014764 <_strtol_l.constprop.0+0xa4>
 8014736:	4674      	mov	r4, lr
 8014738:	42a3      	cmp	r3, r4
 801473a:	dd24      	ble.n	8014786 <_strtol_l.constprop.0+0xc6>
 801473c:	f1bc 0f00 	cmp.w	ip, #0
 8014740:	db1e      	blt.n	8014780 <_strtol_l.constprop.0+0xc0>
 8014742:	45b1      	cmp	r9, r6
 8014744:	d31c      	bcc.n	8014780 <_strtol_l.constprop.0+0xc0>
 8014746:	d101      	bne.n	801474c <_strtol_l.constprop.0+0x8c>
 8014748:	45a2      	cmp	sl, r4
 801474a:	db19      	blt.n	8014780 <_strtol_l.constprop.0+0xc0>
 801474c:	fb06 4603 	mla	r6, r6, r3, r4
 8014750:	f04f 0c01 	mov.w	ip, #1
 8014754:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014758:	e7e8      	b.n	801472c <_strtol_l.constprop.0+0x6c>
 801475a:	2c2b      	cmp	r4, #43	; 0x2b
 801475c:	bf04      	itt	eq
 801475e:	782c      	ldrbeq	r4, [r5, #0]
 8014760:	1cb5      	addeq	r5, r6, #2
 8014762:	e7ca      	b.n	80146fa <_strtol_l.constprop.0+0x3a>
 8014764:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014768:	f1be 0f19 	cmp.w	lr, #25
 801476c:	d801      	bhi.n	8014772 <_strtol_l.constprop.0+0xb2>
 801476e:	3c37      	subs	r4, #55	; 0x37
 8014770:	e7e2      	b.n	8014738 <_strtol_l.constprop.0+0x78>
 8014772:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014776:	f1be 0f19 	cmp.w	lr, #25
 801477a:	d804      	bhi.n	8014786 <_strtol_l.constprop.0+0xc6>
 801477c:	3c57      	subs	r4, #87	; 0x57
 801477e:	e7db      	b.n	8014738 <_strtol_l.constprop.0+0x78>
 8014780:	f04f 3cff 	mov.w	ip, #4294967295
 8014784:	e7e6      	b.n	8014754 <_strtol_l.constprop.0+0x94>
 8014786:	f1bc 0f00 	cmp.w	ip, #0
 801478a:	da05      	bge.n	8014798 <_strtol_l.constprop.0+0xd8>
 801478c:	2322      	movs	r3, #34	; 0x22
 801478e:	6003      	str	r3, [r0, #0]
 8014790:	4646      	mov	r6, r8
 8014792:	b942      	cbnz	r2, 80147a6 <_strtol_l.constprop.0+0xe6>
 8014794:	4630      	mov	r0, r6
 8014796:	e79e      	b.n	80146d6 <_strtol_l.constprop.0+0x16>
 8014798:	b107      	cbz	r7, 801479c <_strtol_l.constprop.0+0xdc>
 801479a:	4276      	negs	r6, r6
 801479c:	2a00      	cmp	r2, #0
 801479e:	d0f9      	beq.n	8014794 <_strtol_l.constprop.0+0xd4>
 80147a0:	f1bc 0f00 	cmp.w	ip, #0
 80147a4:	d000      	beq.n	80147a8 <_strtol_l.constprop.0+0xe8>
 80147a6:	1e69      	subs	r1, r5, #1
 80147a8:	6011      	str	r1, [r2, #0]
 80147aa:	e7f3      	b.n	8014794 <_strtol_l.constprop.0+0xd4>
 80147ac:	2430      	movs	r4, #48	; 0x30
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d1b1      	bne.n	8014716 <_strtol_l.constprop.0+0x56>
 80147b2:	2308      	movs	r3, #8
 80147b4:	e7af      	b.n	8014716 <_strtol_l.constprop.0+0x56>
 80147b6:	2c30      	cmp	r4, #48	; 0x30
 80147b8:	d0a5      	beq.n	8014706 <_strtol_l.constprop.0+0x46>
 80147ba:	230a      	movs	r3, #10
 80147bc:	e7ab      	b.n	8014716 <_strtol_l.constprop.0+0x56>
 80147be:	bf00      	nop
 80147c0:	08014e59 	.word	0x08014e59

080147c4 <strtol>:
 80147c4:	4613      	mov	r3, r2
 80147c6:	460a      	mov	r2, r1
 80147c8:	4601      	mov	r1, r0
 80147ca:	4802      	ldr	r0, [pc, #8]	; (80147d4 <strtol+0x10>)
 80147cc:	6800      	ldr	r0, [r0, #0]
 80147ce:	f7ff bf77 	b.w	80146c0 <_strtol_l.constprop.0>
 80147d2:	bf00      	nop
 80147d4:	20000014 	.word	0x20000014

080147d8 <__malloc_lock>:
 80147d8:	4801      	ldr	r0, [pc, #4]	; (80147e0 <__malloc_lock+0x8>)
 80147da:	f000 b809 	b.w	80147f0 <__retarget_lock_acquire_recursive>
 80147de:	bf00      	nop
 80147e0:	2000d7b8 	.word	0x2000d7b8

080147e4 <__malloc_unlock>:
 80147e4:	4801      	ldr	r0, [pc, #4]	; (80147ec <__malloc_unlock+0x8>)
 80147e6:	f000 b804 	b.w	80147f2 <__retarget_lock_release_recursive>
 80147ea:	bf00      	nop
 80147ec:	2000d7b8 	.word	0x2000d7b8

080147f0 <__retarget_lock_acquire_recursive>:
 80147f0:	4770      	bx	lr

080147f2 <__retarget_lock_release_recursive>:
 80147f2:	4770      	bx	lr

080147f4 <_init>:
 80147f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f6:	bf00      	nop
 80147f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147fa:	bc08      	pop	{r3}
 80147fc:	469e      	mov	lr, r3
 80147fe:	4770      	bx	lr

08014800 <_fini>:
 8014800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014802:	bf00      	nop
 8014804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014806:	bc08      	pop	{r3}
 8014808:	469e      	mov	lr, r3
 801480a:	4770      	bx	lr
