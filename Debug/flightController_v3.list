
flightController_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013968  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08013af8  08013af8  00023af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d7c  08013d7c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08013d7c  08013d7c  00023d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d84  08013d84  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013d84  08013d84  00023d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013d8c  08013d8c  00023d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08013d94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00004f28  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004fa0  20004fa0  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00057c75  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009078  00000000  00000000  00087d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002970  00000000  00000000  00090d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002710  00000000  00000000  00093708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae5c  00000000  00000000  00095e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fa0d  00000000  00000000  000c0c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000faf0b  00000000  00000000  000f0681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001eb58c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bfe8  00000000  00000000  001eb5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ae0 	.word	0x08013ae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08013ae0 	.word	0x08013ae0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <vApplicationGetIdleTaskMemory+0x30>)
 8000e72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000094 	.word	0x20000094
 8000e8c:	200000e8 	.word	0x200000e8

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <_ZN11PID_ControlC1ERffff>:
	float reference = 0;
	float error = 0;
	float &signal;
	float last_signal = 0;
public:
	PID_Control(float &signal,float Kp,float Ki,float Kd):
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6178      	str	r0, [r7, #20]
 8000ee0:	6139      	str	r1, [r7, #16]
 8000ee2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ee6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000eea:	ed87 1a01 	vstr	s2, [r7, #4]
		signal(signal),Kp(Kp),Ki(Ki),Kd(Kd)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	621a      	str	r2, [r3, #32]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
	{
		last_signal = signal;
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
	};
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4618      	mov	r0, r3
 8000f42:	371c      	adds	r7, #28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>:
	ADC_HandleTypeDef *adc_port;

	uint16_t msToTick(uint16_t ms);
	void toPercentage();
public:
	BatteryManagement(ADC_HandleTypeDef *adc_port,Buzzer *buzz,uint16_t frequency_ms):
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	807b      	strh	r3, [r7, #2]
		adc_port(adc_port),buzz(buzz)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f640 3222 	movw	r2, #2850	; 0xb22
 8000f60:	801a      	strh	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000f68:	805a      	strh	r2, [r3, #2]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	811a      	strh	r2, [r3, #8]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	61da      	str	r2, [r3, #28]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	621a      	str	r2, [r3, #32]
	{
		frequency_tick = msToTick(frequency_ms);
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f002 fcbb 	bl	8003920 <_ZN17BatteryManagement8msToTickEt>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	811a      	strh	r2, [r3, #8]
	}
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN6BuzzerC1Ev>:
#ifndef LIBS_BUZZER_LIB_BUZZER_HPP_
#define LIBS_BUZZER_LIB_BUZZER_HPP_

#include "stm32f4xx_hal.h"

class Buzzer
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <_ZN6BuzzerC1Ev+0x50>)
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	819a      	strh	r2, [r3, #12]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	81da      	strh	r2, [r3, #14]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	821a      	strh	r2, [r3, #16]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	825a      	strh	r2, [r3, #18]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	829a      	strh	r2, [r3, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	759a      	strb	r2, [r3, #22]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000

08001010 <HAL_UART_TxCpltCallback>:
PID_Control yaw_pid(euler_z,1,0,0);

int tick1=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // change USART instance
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_UART_TxCpltCallback+0x2c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d107      	bne.n	8001032 <HAL_UART_TxCpltCallback+0x22>
    {
    	tick1++;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_UART_TxCpltCallback+0x30>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_UART_TxCpltCallback+0x30>)
 800102a:	6013      	str	r3, [r2, #0]

    	bt.printfSensorsValues();
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <HAL_UART_TxCpltCallback+0x34>)
 800102e:	f003 f87f 	bl	8004130 <_ZN4HC0519printfSensorsValuesEv>
    }
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40011000 	.word	0x40011000
 8001040:	20000cc4 	.word	0x20000cc4
 8001044:	20000908 	.word	0x20000908

08001048 <HAL_TIM_PeriodElapsedCallback>:

float test1=roll_pid.out();
int duplicates = 0;
int duplicatesCounter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800105a:	f005 fbd1 	bl	8006800 <HAL_IncTick>
  }

  if (htim->Instance == TIM4)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001064:	4293      	cmp	r3, r2
 8001066:	f040 808b 	bne.w	8001180 <HAL_TIM_PeriodElapsedCallback+0x138>
  {
	  buzz.run();
 800106a:	4849      	ldr	r0, [pc, #292]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800106c:	f002 fcd1 	bl	8003a12 <_ZN6Buzzer3runEv>
	  BattMgmt.run();
 8001070:	4848      	ldr	r0, [pc, #288]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001072:	f002 fb6f 	bl	8003754 <_ZN17BatteryManagement3runEv>

	  euler_x = icm.getEulerX();
 8001076:	4848      	ldr	r0, [pc, #288]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001078:	f004 fdee 	bl	8005c58 <_ZN9ICM42688P9getEulerXEv>
 800107c:	eef0 7a40 	vmov.f32	s15, s0
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001082:	edc3 7a00 	vstr	s15, [r3]
	  euler_y = icm.getEulerY();
 8001086:	4844      	ldr	r0, [pc, #272]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001088:	f004 fdf6 	bl	8005c78 <_ZN9ICM42688P9getEulerYEv>
 800108c:	eef0 7a40 	vmov.f32	s15, s0
 8001090:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001092:	edc3 7a00 	vstr	s15, [r3]
	  euler_z = icm.getEulerZ();
 8001096:	4840      	ldr	r0, [pc, #256]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001098:	f004 fdfe 	bl	8005c98 <_ZN9ICM42688P9getEulerZEv>
 800109c:	eef0 7a40 	vmov.f32	s15, s0
 80010a0:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]

	  test1=roll_pid.out();
 80010a6:	4840      	ldr	r0, [pc, #256]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80010a8:	f005 fb24 	bl	80066f4 <_ZN11PID_Control3outEv>
 80010ac:	eef0 7a40 	vmov.f32	s15, s0
 80010b0:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 80010b2:	edc3 7a00 	vstr	s15, [r3]

	  timCounter++;
 80010b6:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a3c      	ldr	r2, [pc, #240]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80010be:	6013      	str	r3, [r2, #0]
	   	   		\/
	   	   		/\
	   	   	   /  \
	   		CR2    CR4
		*/
			float CCR1_value = 3000;// + remote_rx.throttle + roll_pid.out() + pitch_pid.out();
 80010c0:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80010c2:	617b      	str	r3, [r7, #20]
			float CCR2_value = 3000;// + remote_rx.throttle + roll_pid.out() - pitch_pid.out();
 80010c4:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80010c6:	613b      	str	r3, [r7, #16]
			float CCR3_value = 3000;// + remote_rx.throttle - roll_pid.out() + pitch_pid.out();
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80010ca:	60fb      	str	r3, [r7, #12]
			float CCR4_value = 3000;// + remote_rx.throttle - roll_pid.out() - pitch_pid.out();
 80010cc:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80010ce:	60bb      	str	r3, [r7, #8]

			if (CCR1_value<3300)
 80010d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80011b8 <HAL_TIM_PeriodElapsedCallback+0x170>
 80010d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d504      	bpl.n	80010ec <HAL_TIM_PeriodElapsedCallback+0xa4>
				TIM3 -> CCR1 = 3300;
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 80010e4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
 80010ea:	e007      	b.n	80010fc <HAL_TIM_PeriodElapsedCallback+0xb4>
			else
				TIM3 -> CCR1 = CCR1_value;
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 80010ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f6:	ee17 2a90 	vmov	r2, s15
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34

			if (CCR2_value<3300)
 80010fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001100:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80011b8 <HAL_TIM_PeriodElapsedCallback+0x170>
 8001104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110c:	d504      	bpl.n	8001118 <HAL_TIM_PeriodElapsedCallback+0xd0>
				TIM3 -> CCR2 = 3300;
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001110:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001114:	639a      	str	r2, [r3, #56]	; 0x38
 8001116:	e007      	b.n	8001128 <HAL_TIM_PeriodElapsedCallback+0xe0>
			else
				TIM3 -> CCR2 = CCR2_value;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800111a:	edd7 7a04 	vldr	s15, [r7, #16]
 800111e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001122:	ee17 2a90 	vmov	r2, s15
 8001126:	639a      	str	r2, [r3, #56]	; 0x38

			if (CCR3_value<3300)
 8001128:	edd7 7a03 	vldr	s15, [r7, #12]
 800112c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80011b8 <HAL_TIM_PeriodElapsedCallback+0x170>
 8001130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d504      	bpl.n	8001144 <HAL_TIM_PeriodElapsedCallback+0xfc>
				TIM3 -> CCR3 = 3300;
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800113c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001140:	63da      	str	r2, [r3, #60]	; 0x3c
 8001142:	e007      	b.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x10c>
			else
				TIM3 -> CCR3 = CCR3_value;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001146:	edd7 7a03 	vldr	s15, [r7, #12]
 800114a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114e:	ee17 2a90 	vmov	r2, s15
 8001152:	63da      	str	r2, [r3, #60]	; 0x3c

			if (CCR4_value<3300)
 8001154:	edd7 7a02 	vldr	s15, [r7, #8]
 8001158:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80011b8 <HAL_TIM_PeriodElapsedCallback+0x170>
 800115c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	d504      	bpl.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x128>
				TIM3 -> CCR4 = 3300;
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001168:	f640 42e4 	movw	r2, #3300	; 0xce4
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
				TIM3 -> CCR4 = CCR4_value;

		// ... = base_throttle + alt_compensation + roll/pitch/yaw_pid;
	  }
  }
}
 800116e:	e007      	b.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x138>
				TIM3 -> CCR4 = CCR4_value;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001172:	edd7 7a02 	vldr	s15, [r7, #8]
 8001176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117a:	ee17 2a90 	vmov	r2, s15
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40010000 	.word	0x40010000
 800118c:	40000800 	.word	0x40000800
 8001190:	200008f0 	.word	0x200008f0
 8001194:	20000bf4 	.word	0x20000bf4
 8001198:	20000b30 	.word	0x20000b30
 800119c:	20000c40 	.word	0x20000c40
 80011a0:	20000c44 	.word	0x20000c44
 80011a4:	20000c48 	.word	0x20000c48
 80011a8:	20000c4c 	.word	0x20000c4c
 80011ac:	20000cc8 	.word	0x20000cc8
 80011b0:	20000c3c 	.word	0x20000c3c
 80011b4:	453b8000 	.word	0x453b8000
 80011b8:	454e4000 	.word	0x454e4000
 80011bc:	40000400 	.word	0x40000400

080011c0 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4)
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	2b10      	cmp	r3, #16
 80011ce:	d111      	bne.n	80011f4 <HAL_GPIO_EXTI_Callback+0x34>
	{
		senIndex=0;
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_GPIO_EXTI_Callback+0x94>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
		portBASE_TYPE xHigherPriorityYaskWoken = pdFALSE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
		xQueueSendToBackFromISR(SPI2_Gatekeeper,&senIndex,&xHigherPriorityYaskWoken);
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_GPIO_EXTI_Callback+0x98>)
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	f107 0214 	add.w	r2, r7, #20
 80011e2:	2300      	movs	r3, #0
 80011e4:	491b      	ldr	r1, [pc, #108]	; (8001254 <HAL_GPIO_EXTI_Callback+0x94>)
 80011e6:	f00f f93e 	bl	8010466 <xQueueGenericSendFromISR>
		icmCounter++;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_GPIO_EXTI_Callback+0x9c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a1a      	ldr	r2, [pc, #104]	; (800125c <HAL_GPIO_EXTI_Callback+0x9c>)
 80011f2:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == GPIO_PIN_8)
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fa:	d111      	bne.n	8001220 <HAL_GPIO_EXTI_Callback+0x60>
	{
		senIndex=1;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_GPIO_EXTI_Callback+0x94>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
		portBASE_TYPE xHigherPriorityYaskWoken = pdFALSE;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
		xQueueSendToBackFromISR(SPI2_Gatekeeper,&senIndex,&xHigherPriorityYaskWoken);
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_GPIO_EXTI_Callback+0x98>)
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	f107 0210 	add.w	r2, r7, #16
 800120e:	2300      	movs	r3, #0
 8001210:	4910      	ldr	r1, [pc, #64]	; (8001254 <HAL_GPIO_EXTI_Callback+0x94>)
 8001212:	f00f f928 	bl	8010466 <xQueueGenericSendFromISR>
		bmpCounter++;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_GPIO_EXTI_Callback+0xa0>)
 800121e:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == GPIO_PIN_2)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	2b04      	cmp	r3, #4
 8001224:	d111      	bne.n	800124a <HAL_GPIO_EXTI_Callback+0x8a>
	{
		senIndex=2;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_GPIO_EXTI_Callback+0x94>)
 8001228:	2202      	movs	r2, #2
 800122a:	601a      	str	r2, [r3, #0]
		portBASE_TYPE xHigherPriorityYaskWoken = pdFALSE;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
		xQueueSendToBackFromISR(SPI2_Gatekeeper,&senIndex,&xHigherPriorityYaskWoken);
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_GPIO_EXTI_Callback+0x98>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	f107 020c 	add.w	r2, r7, #12
 8001238:	2300      	movs	r3, #0
 800123a:	4906      	ldr	r1, [pc, #24]	; (8001254 <HAL_GPIO_EXTI_Callback+0x94>)
 800123c:	f00f f913 	bl	8010466 <xQueueGenericSendFromISR>
		lisCounter++;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001248:	6013      	str	r3, [r2, #0]
	}
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000c1c 	.word	0x20000c1c
 8001258:	20000c18 	.word	0x20000c18
 800125c:	20000c20 	.word	0x20000c20
 8001260:	20000c24 	.word	0x20000c24
 8001264:	20000c28 	.word	0x20000c28

08001268 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a18      	ldr	r2, [pc, #96]	; (80012dc <HAL_UARTEx_RxEventCallback+0x74>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d10a      	bne.n	8001294 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		__HAL_UART_FLUSH_DRREGISTER(&huart2);
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_UARTEx_RxEventCallback+0x78>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
		pmw.update();
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001286:	f005 f8d5 	bl	8006434 <_ZN9PMW3901UY6updateEv>
		pmwCounter++;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_UARTEx_RxEventCallback+0x80>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <HAL_UARTEx_RxEventCallback+0x80>)
 8001292:	6013      	str	r3, [r2, #0]
	}

	if (huart->Instance == USART3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_UARTEx_RxEventCallback+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10a      	bne.n	80012b4 <HAL_UARTEx_RxEventCallback+0x4c>
	{
		__HAL_UART_FLUSH_DRREGISTER(&huart3);
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_UARTEx_RxEventCallback+0x88>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
		remote_rx.update();
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <HAL_UARTEx_RxEventCallback+0x8c>)
 80012a6:	f002 fc9c 	bl	8003be2 <_ZN7FrSkyRX6updateEv>
		remoteCounter++;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HAL_UARTEx_RxEventCallback+0x90>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_UARTEx_RxEventCallback+0x90>)
 80012b2:	6013      	str	r3, [r2, #0]
	}

	if (huart->Instance == UART4)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_UARTEx_RxEventCallback+0x94>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10a      	bne.n	80012d4 <HAL_UARTEx_RxEventCallback+0x6c>
	{
	   __HAL_UART_FLUSH_DRREGISTER(&huart4);
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_UARTEx_RxEventCallback+0x98>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
	   sonar.update();
 80012c4:	480f      	ldr	r0, [pc, #60]	; (8001304 <HAL_UARTEx_RxEventCallback+0x9c>)
 80012c6:	f004 ffc5 	bl	8006254 <_ZN6MB10436updateEv>
	   sonarCounter++;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_UARTEx_RxEventCallback+0xa0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_UARTEx_RxEventCallback+0xa0>)
 80012d2:	6013      	str	r3, [r2, #0]
	}
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40004400 	.word	0x40004400
 80012e0:	20000644 	.word	0x20000644
 80012e4:	20000994 	.word	0x20000994
 80012e8:	20000c30 	.word	0x20000c30
 80012ec:	40004800 	.word	0x40004800
 80012f0:	20000688 	.word	0x20000688
 80012f4:	200009ec 	.word	0x200009ec
 80012f8:	20000c2c 	.word	0x20000c2c
 80012fc:	40004c00 	.word	0x40004c00
 8001300:	200005bc 	.word	0x200005bc
 8001304:	20000a44 	.word	0x20000a44
 8001308:	20000c34 	.word	0x20000c34

0800130c <main>:

int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b090      	sub	sp, #64	; 0x40
 8001310:	af02      	add	r7, sp, #8
  HAL_Init();
 8001312:	f005 fa53 	bl	80067bc <HAL_Init>
  SystemClock_Config();
 8001316:	f000 f947 	bl	80015a8 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 800131a:	f000 fcf7 	bl	8001d0c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800131e:	f000 fc8f 	bl	8001c40 <_ZL11MX_DMA_Initv>
  MX_SPI2_Init();
 8001322:	f000 fa4b 	bl	80017bc <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 8001326:	f000 fbcf 	bl	8001ac8 <_ZL19MX_USART1_UART_Initv>
  MX_SDIO_SD_Init();
 800132a:	f000 fa0d 	bl	8001748 <_ZL15MX_SDIO_SD_Initv>
  MX_USART3_UART_Init();
 800132e:	f000 fc27 	bl	8001b80 <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 8001332:	f000 f9ad 	bl	8001690 <_ZL12MX_ADC1_Initv>
  MX_UART4_Init();
 8001336:	f000 fb99 	bl	8001a6c <_ZL13MX_UART4_Initv>
  MX_USART2_UART_Init();
 800133a:	f000 fbf3 	bl	8001b24 <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 800133e:	f000 fc51 	bl	8001be4 <_ZL19MX_USART6_UART_Initv>
  MX_TIM4_Init();
 8001342:	f000 fb37 	bl	80019b4 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8001346:	f000 fa75 	bl	8001834 <_ZL12MX_TIM3_Initv>

  bt.addSensor(&bmp);
 800134a:	493f      	ldr	r1, [pc, #252]	; (8001448 <main+0x13c>)
 800134c:	483f      	ldr	r0, [pc, #252]	; (800144c <main+0x140>)
 800134e:	f002 fedf 	bl	8004110 <_ZN4HC059addSensorEP15PrintableSensor>
  bt.addSensor(&lis);
 8001352:	493f      	ldr	r1, [pc, #252]	; (8001450 <main+0x144>)
 8001354:	483d      	ldr	r0, [pc, #244]	; (800144c <main+0x140>)
 8001356:	f002 fedb 	bl	8004110 <_ZN4HC059addSensorEP15PrintableSensor>
  bt.addSensor(&sonar);
 800135a:	493e      	ldr	r1, [pc, #248]	; (8001454 <main+0x148>)
 800135c:	483b      	ldr	r0, [pc, #236]	; (800144c <main+0x140>)
 800135e:	f002 fed7 	bl	8004110 <_ZN4HC059addSensorEP15PrintableSensor>
  bt.addSensor(&pmw);
 8001362:	493d      	ldr	r1, [pc, #244]	; (8001458 <main+0x14c>)
 8001364:	4839      	ldr	r0, [pc, #228]	; (800144c <main+0x140>)
 8001366:	f002 fed3 	bl	8004110 <_ZN4HC059addSensorEP15PrintableSensor>
  bt.addSensor(&icm);
 800136a:	493c      	ldr	r1, [pc, #240]	; (800145c <main+0x150>)
 800136c:	4837      	ldr	r0, [pc, #220]	; (800144c <main+0x140>)
 800136e:	f002 fecf 	bl	8004110 <_ZN4HC059addSensorEP15PrintableSensor>
  bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_GX);
 8001372:	2103      	movs	r1, #3
 8001374:	4835      	ldr	r0, [pc, #212]	; (800144c <main+0x140>)
 8001376:	f002 ff25 	bl	80041c4 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_GY);
 800137a:	2104      	movs	r1, #4
 800137c:	4833      	ldr	r0, [pc, #204]	; (800144c <main+0x140>)
 800137e:	f002 ff21 	bl	80041c4 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_GZ);
 8001382:	2105      	movs	r1, #5
 8001384:	4831      	ldr	r0, [pc, #196]	; (800144c <main+0x140>)
 8001386:	f002 ff1d 	bl	80041c4 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_AX);
 800138a:	2109      	movs	r1, #9
 800138c:	482f      	ldr	r0, [pc, #188]	; (800144c <main+0x140>)
 800138e:	f002 ff19 	bl	80041c4 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_AY);
 8001392:	210a      	movs	r1, #10
 8001394:	482d      	ldr	r0, [pc, #180]	; (800144c <main+0x140>)
 8001396:	f002 ff15 	bl	80041c4 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>
  bt.addSensorParameter(HC05::SENSOR_DATA_PARAMETER::ICM_AZ);
 800139a:	210b      	movs	r1, #11
 800139c:	482b      	ldr	r0, [pc, #172]	; (800144c <main+0x140>)
 800139e:	f002 ff11 	bl	80041c4 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>

  remote_rx.begin();
 80013a2:	482f      	ldr	r0, [pc, #188]	; (8001460 <main+0x154>)
 80013a4:	f002 fc0a 	bl	8003bbc <_ZN7FrSkyRX5beginEv>
  sonar.begin();
 80013a8:	482a      	ldr	r0, [pc, #168]	; (8001454 <main+0x148>)
 80013aa:	f004 ff3f 	bl	800622c <_ZN6MB10435beginEv>
  pmw.begin();
 80013ae:	482a      	ldr	r0, [pc, #168]	; (8001458 <main+0x14c>)
 80013b0:	f005 f82c 	bl	800640c <_ZN9PMW3901UY5beginEv>

  TIM3 -> CCR1 = 3000;
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <main+0x158>)
 80013b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3 -> CCR2 = 3000;
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <main+0x158>)
 80013be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013c2:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3 -> CCR3 = 3000;
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <main+0x158>)
 80013c6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3 -> CCR4 = 3000;
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <main+0x158>)
 80013ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80013d4:	2100      	movs	r1, #0
 80013d6:	4824      	ldr	r0, [pc, #144]	; (8001468 <main+0x15c>)
 80013d8:	f009 fedc 	bl	800b194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80013dc:	2104      	movs	r1, #4
 80013de:	4822      	ldr	r0, [pc, #136]	; (8001468 <main+0x15c>)
 80013e0:	f009 fed8 	bl	800b194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80013e4:	2108      	movs	r1, #8
 80013e6:	4820      	ldr	r0, [pc, #128]	; (8001468 <main+0x15c>)
 80013e8:	f009 fed4 	bl	800b194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80013ec:	210c      	movs	r1, #12
 80013ee:	481e      	ldr	r0, [pc, #120]	; (8001468 <main+0x15c>)
 80013f0:	f009 fed0 	bl	800b194 <HAL_TIM_PWM_Start>


	char c[50];
	strcpy(c,"pula mea\n\r");
 80013f4:	463b      	mov	r3, r7
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <main+0x160>)
 80013f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80013fa:	c303      	stmia	r3!, {r0, r1}
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	3302      	adds	r3, #2
 8001400:	0c12      	lsrs	r2, r2, #16
 8001402:	701a      	strb	r2, [r3, #0]
	int len = strlen(c);
 8001404:	463b      	mov	r3, r7
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe fee2 	bl	80001d0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
	bt.send(c, len);
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	b2da      	uxtb	r2, r3
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <main+0x140>)
 800141a:	f002 fe66 	bl	80040ea <_ZN4HC054sendEPKch>

  xTaskCreate(testTask,"test",100,NULL,tskIDLE_PRIORITY+3,NULL);
 800141e:	2300      	movs	r3, #0
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	2303      	movs	r3, #3
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	2264      	movs	r2, #100	; 0x64
 800142a:	4911      	ldr	r1, [pc, #68]	; (8001470 <main+0x164>)
 800142c:	4811      	ldr	r0, [pc, #68]	; (8001474 <main+0x168>)
 800142e:	f00f faea 	bl	8010a06 <xTaskCreate>
  SPI2_Gatekeeper = xQueueCreate(3,sizeof(int32_t));
 8001432:	2200      	movs	r2, #0
 8001434:	2104      	movs	r1, #4
 8001436:	2003      	movs	r0, #3
 8001438:	f00e ffbc 	bl	80103b4 <xQueueGenericCreate>
 800143c:	4603      	mov	r3, r0
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <main+0x16c>)
 8001440:	6013      	str	r3, [r2, #0]
  vTaskStartScheduler();
 8001442:	f00f fc17 	bl	8010c74 <vTaskStartScheduler>

  while (1)
 8001446:	e7fe      	b.n	8001446 <main+0x13a>
 8001448:	20000ae8 	.word	0x20000ae8
 800144c:	20000908 	.word	0x20000908
 8001450:	20000a9c 	.word	0x20000a9c
 8001454:	20000a44 	.word	0x20000a44
 8001458:	20000994 	.word	0x20000994
 800145c:	20000b34 	.word	0x20000b34
 8001460:	200009ec 	.word	0x200009ec
 8001464:	40000400 	.word	0x40000400
 8001468:	2000052c 	.word	0x2000052c
 800146c:	08013af8 	.word	0x08013af8
 8001470:	08013b04 	.word	0x08013b04
 8001474:	0800147d 	.word	0x0800147d
 8001478:	20000c18 	.word	0x20000c18

0800147c <_Z8testTaskPv>:
}

float roll, pitch, heading;
int test;
void testTask(void *pvParameters)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	//HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
	//HAL_NVIC_EnableIRQ(TIM4_IRQn);
	HAL_TIM_Base_Start_IT(&htim4);
 8001484:	483f      	ldr	r0, [pc, #252]	; (8001584 <_Z8testTaskPv+0x108>)
 8001486:	f009 fdbb 	bl	800b000 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2105      	movs	r1, #5
 800148e:	2008      	movs	r0, #8
 8001490:	f005 fec4 	bl	800721c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001494:	2008      	movs	r0, #8
 8001496:	f005 fedd 	bl	8007254 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	200a      	movs	r0, #10
 80014a0:	f005 febc 	bl	800721c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014a4:	200a      	movs	r0, #10
 80014a6:	f005 fed5 	bl	8007254 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2105      	movs	r1, #5
 80014ae:	2017      	movs	r0, #23
 80014b0:	f005 feb4 	bl	800721c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014b4:	2017      	movs	r0, #23
 80014b6:	f005 fecd 	bl	8007254 <HAL_NVIC_EnableIRQ>
	NVIC_SetPriorityGrouping(0);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff fce8 	bl	8000e90 <__NVIC_SetPriorityGrouping>

	bool startup=true;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]

	if(!lis.defaultInit())
 80014c4:	4830      	ldr	r0, [pc, #192]	; (8001588 <_Z8testTaskPv+0x10c>)
 80014c6:	f004 fdc7 	bl	8006058 <_ZN9LIS3MDLTR11defaultInitEv>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f083 0301 	eor.w	r3, r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <_Z8testTaskPv+0x5e>
	  startup = false;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
	lis.update();
 80014da:	482b      	ldr	r0, [pc, #172]	; (8001588 <_Z8testTaskPv+0x10c>)
 80014dc:	f004 fc86 	bl	8005dec <_ZN9LIS3MDLTR6updateEv>

	if (!icm.defaultInit())
 80014e0:	482a      	ldr	r0, [pc, #168]	; (800158c <_Z8testTaskPv+0x110>)
 80014e2:	f003 fee3 	bl	80052ac <_ZN9ICM42688P11defaultInitEv>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <_Z8testTaskPv+0x7a>
	  startup = false;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]
	icm.update();
 80014f6:	4825      	ldr	r0, [pc, #148]	; (800158c <_Z8testTaskPv+0x110>)
 80014f8:	f004 f896 	bl	8005628 <_ZN9ICM42688P6updateEv>

	if (!bmp.defaultInit())
 80014fc:	4824      	ldr	r0, [pc, #144]	; (8001590 <_Z8testTaskPv+0x114>)
 80014fe:	f001 fdf5 	bl	80030ec <_ZN6BMP39011defaultInitEv>
 8001502:	4603      	mov	r3, r0
 8001504:	f083 0301 	eor.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <_Z8testTaskPv+0x96>
	  startup = false;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
	bmp.update();
 8001512:	481f      	ldr	r0, [pc, #124]	; (8001590 <_Z8testTaskPv+0x114>)
 8001514:	f001 fea5 	bl	8003262 <_ZN6BMP3906updateEv>

	while (1)
	{
		xQueueReceive(SPI2_Gatekeeper, &test, portMAX_DELAY);
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <_Z8testTaskPv+0x118>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	491d      	ldr	r1, [pc, #116]	; (8001598 <_Z8testTaskPv+0x11c>)
 8001522:	4618      	mov	r0, r3
 8001524:	f00f f83a 	bl	801059c <xQueueReceive>

		if (test == 0){
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <_Z8testTaskPv+0x11c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d114      	bne.n	800155a <_Z8testTaskPv+0xde>
			icm.update();
 8001530:	4816      	ldr	r0, [pc, #88]	; (800158c <_Z8testTaskPv+0x110>)
 8001532:	f004 f879 	bl	8005628 <_ZN9ICM42688P6updateEv>

			int testt = icm.getAccX();
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <_Z8testTaskPv+0x110>)
 8001538:	f004 fbbe 	bl	8005cb8 <_ZN9ICM42688P7getAccXEv>
 800153c:	4603      	mov	r3, r0
 800153e:	60bb      	str	r3, [r7, #8]
			if (testt==duplicates)
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <_Z8testTaskPv+0x120>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	429a      	cmp	r2, r3
 8001548:	d104      	bne.n	8001554 <_Z8testTaskPv+0xd8>
				duplicatesCounter++;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <_Z8testTaskPv+0x124>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <_Z8testTaskPv+0x124>)
 8001552:	6013      	str	r3, [r2, #0]
			duplicates = testt;
 8001554:	4a11      	ldr	r2, [pc, #68]	; (800159c <_Z8testTaskPv+0x120>)
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	6013      	str	r3, [r2, #0]
		}

		if (test == 1)
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <_Z8testTaskPv+0x11c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d102      	bne.n	8001568 <_Z8testTaskPv+0xec>
			bmp.update();
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <_Z8testTaskPv+0x114>)
 8001564:	f001 fe7d 	bl	8003262 <_ZN6BMP3906updateEv>
		if (test == 2)
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <_Z8testTaskPv+0x11c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d102      	bne.n	8001576 <_Z8testTaskPv+0xfa>
			lis.update();
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <_Z8testTaskPv+0x10c>)
 8001572:	f004 fc3b 	bl	8005dec <_ZN9LIS3MDLTR6updateEv>

		taskCounter++;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <_Z8testTaskPv+0x128>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <_Z8testTaskPv+0x128>)
 800157e:	6013      	str	r3, [r2, #0]
	}
 8001580:	e7ca      	b.n	8001518 <_Z8testTaskPv+0x9c>
 8001582:	bf00      	nop
 8001584:	20000574 	.word	0x20000574
 8001588:	20000a98 	.word	0x20000a98
 800158c:	20000b30 	.word	0x20000b30
 8001590:	20000ae4 	.word	0x20000ae4
 8001594:	20000c18 	.word	0x20000c18
 8001598:	20000cd4 	.word	0x20000cd4
 800159c:	20000ccc 	.word	0x20000ccc
 80015a0:	20000cd0 	.word	0x20000cd0
 80015a4:	20000c38 	.word	0x20000c38

080015a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	; 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f012 f8ac 	bl	8013714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <_Z18SystemClock_Configv+0xe0>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <_Z18SystemClock_Configv+0xe0>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <_Z18SystemClock_Configv+0xe0>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <_Z18SystemClock_Configv+0xe4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a26      	ldr	r2, [pc, #152]	; (800168c <_Z18SystemClock_Configv+0xe4>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <_Z18SystemClock_Configv+0xe4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001604:	2301      	movs	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160e:	2302      	movs	r3, #2
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001618:	2308      	movs	r3, #8
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800161c:	2390      	movs	r3, #144	; 0x90
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001620:	2302      	movs	r3, #2
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001624:	2306      	movs	r3, #6
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	4618      	mov	r0, r3
 800162e:	f007 fc63 	bl	8008ef8 <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001642:	f000 fc23 	bl	8001e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001646:	230f      	movs	r3, #15
 8001648:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164a:	2302      	movs	r3, #2
 800164c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001652:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2104      	movs	r1, #4
 8001664:	4618      	mov	r0, r3
 8001666:	f007 febf 	bl	80093e8 <HAL_RCC_ClockConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800167a:	f000 fc07 	bl	8001e8c <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3750      	adds	r7, #80	; 0x50
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40007000 	.word	0x40007000

08001690 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001696:	463b      	mov	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016a4:	4a26      	ldr	r2, [pc, #152]	; (8001740 <_ZL12MX_ADC1_Initv+0xb0>)
 80016a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016bc:	2200      	movs	r2, #0
 80016be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016d0:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <_ZL12MX_ADC1_Initv+0xb4>)
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016dc:	2201      	movs	r2, #1
 80016de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016ee:	4813      	ldr	r0, [pc, #76]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 80016f0:	f005 f8ca 	bl	8006888 <HAL_ADC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001704:	f000 fbc2 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001708:	230a      	movs	r3, #10
 800170a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800170c:	2301      	movs	r3, #1
 800170e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	4619      	mov	r1, r3
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <_ZL12MX_ADC1_Initv+0xac>)
 800171a:	f005 fa27 	bl	8006b6c <HAL_ADC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf14      	ite	ne
 8001724:	2301      	movne	r3, #1
 8001726:	2300      	moveq	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800172e:	f000 fbad 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200002e8 	.word	0x200002e8
 8001740:	40012000 	.word	0x40012000
 8001744:	0f000001 	.word	0x0f000001

08001748 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800174e:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <_ZL15MX_SDIO_SD_Initv+0x70>)
 8001750:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001772:	2208      	movs	r2, #8
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001776:	480f      	ldr	r0, [pc, #60]	; (80017b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001778:	f008 f886 	bl	8009888 <HAL_SD_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 800178c:	f000 fb7e 	bl	8001e8c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001796:	f008 facb 	bl	8009d30 <HAL_SD_ConfigWideBusOperation>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf14      	ite	ne
 80017a0:	2301      	movne	r3, #1
 80017a2:	2300      	moveq	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 80017aa:	f000 fb6f 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000390 	.word	0x20000390
 80017b8:	40012c00 	.word	0x40012c00

080017bc <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017c2:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <_ZL12MX_SPI2_Initv+0x74>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 8001802:	2200      	movs	r2, #0
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 8001808:	220a      	movs	r2, #10
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800180c:	4807      	ldr	r0, [pc, #28]	; (800182c <_ZL12MX_SPI2_Initv+0x70>)
 800180e:	f008 fdee 	bl	800a3ee <HAL_SPI_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8001822:	f000 fb33 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000414 	.word	0x20000414
 8001830:	40003800 	.word	0x40003800

08001834 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08e      	sub	sp, #56	; 0x38
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	615a      	str	r2, [r3, #20]
 8001862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001864:	4b51      	ldr	r3, [pc, #324]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 8001866:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <_ZL12MX_TIM3_Initv+0x17c>)
 8001868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 800186a:	4b50      	ldr	r3, [pc, #320]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 800186c:	2202      	movs	r2, #2
 800186e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 8001876:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 8001878:	f241 726f 	movw	r2, #5999	; 0x176f
 800187c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b49      	ldr	r3, [pc, #292]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800188a:	4848      	ldr	r0, [pc, #288]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 800188c:	f009 fb68 	bl	800af60 <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf14      	ite	ne
 8001896:	2301      	movne	r3, #1
 8001898:	2300      	moveq	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80018a0:	f000 faf4 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ae:	4619      	mov	r1, r3
 80018b0:	483e      	ldr	r0, [pc, #248]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 80018b2:	f009 ff01 	bl	800b6b8 <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80018c6:	f000 fae1 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018ca:	4838      	ldr	r0, [pc, #224]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 80018cc:	f009 fc08 	bl	800b0e0 <HAL_TIM_PWM_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 80018e0:	f000 fad4 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ec:	f107 0320 	add.w	r3, r7, #32
 80018f0:	4619      	mov	r1, r3
 80018f2:	482e      	ldr	r0, [pc, #184]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 80018f4:	f00a fae0 	bl	800beb8 <HAL_TIMEx_MasterConfigSynchronization>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001908:	f000 fac0 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190c:	2360      	movs	r3, #96	; 0x60
 800190e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	4822      	ldr	r0, [pc, #136]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 8001924:	f009 fe06 	bl	800b534 <HAL_TIM_PWM_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001938:	f000 faa8 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2204      	movs	r2, #4
 8001940:	4619      	mov	r1, r3
 8001942:	481a      	ldr	r0, [pc, #104]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 8001944:	f009 fdf6 	bl	800b534 <HAL_TIM_PWM_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf14      	ite	ne
 800194e:	2301      	movne	r3, #1
 8001950:	2300      	moveq	r3, #0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8001958:	f000 fa98 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2208      	movs	r2, #8
 8001960:	4619      	mov	r1, r3
 8001962:	4812      	ldr	r0, [pc, #72]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 8001964:	f009 fde6 	bl	800b534 <HAL_TIM_PWM_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 8001978:	f000 fa88 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	220c      	movs	r2, #12
 8001980:	4619      	mov	r1, r3
 8001982:	480a      	ldr	r0, [pc, #40]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 8001984:	f009 fdd6 	bl	800b534 <HAL_TIM_PWM_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 8001998:	f000 fa78 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <_ZL12MX_TIM3_Initv+0x178>)
 800199e:	f000 ff19 	bl	80027d4 <HAL_TIM_MspPostInit>

}
 80019a2:	bf00      	nop
 80019a4:	3738      	adds	r7, #56	; 0x38
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000052c 	.word	0x2000052c
 80019b0:	40000400 	.word	0x40000400

080019b4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	463b      	mov	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <_ZL12MX_TIM4_Initv+0xb0>)
 80019d2:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <_ZL12MX_TIM4_Initv+0xb4>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <_ZL12MX_TIM4_Initv+0xb0>)
 80019d8:	228f      	movs	r2, #143	; 0x8f
 80019da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <_ZL12MX_TIM4_Initv+0xb0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <_ZL12MX_TIM4_Initv+0xb0>)
 80019e4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80019e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <_ZL12MX_TIM4_Initv+0xb0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <_ZL12MX_TIM4_Initv+0xb0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019f6:	481b      	ldr	r0, [pc, #108]	; (8001a64 <_ZL12MX_TIM4_Initv+0xb0>)
 80019f8:	f009 fab2 	bl	800af60 <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001a0c:	f000 fa3e 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4811      	ldr	r0, [pc, #68]	; (8001a64 <_ZL12MX_TIM4_Initv+0xb0>)
 8001a1e:	f009 fe4b 	bl	800b6b8 <HAL_TIM_ConfigClockSource>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001a32:	f000 fa2b 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4619      	mov	r1, r3
 8001a42:	4808      	ldr	r0, [pc, #32]	; (8001a64 <_ZL12MX_TIM4_Initv+0xb0>)
 8001a44:	f00a fa38 	bl	800beb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf14      	ite	ne
 8001a4e:	2301      	movne	r3, #1
 8001a50:	2300      	moveq	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001a58:	f000 fa18 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000574 	.word	0x20000574
 8001a68:	40000800 	.word	0x40000800

08001a6c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_ZL13MX_UART4_Initv+0x54>)
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <_ZL13MX_UART4_Initv+0x58>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <_ZL13MX_UART4_Initv+0x54>)
 8001a78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <_ZL13MX_UART4_Initv+0x54>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <_ZL13MX_UART4_Initv+0x54>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <_ZL13MX_UART4_Initv+0x54>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <_ZL13MX_UART4_Initv+0x54>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <_ZL13MX_UART4_Initv+0x54>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_ZL13MX_UART4_Initv+0x54>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <_ZL13MX_UART4_Initv+0x54>)
 8001aa4:	f00a fa98 	bl	800bfd8 <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8001ab8:	f000 f9e8 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200005bc 	.word	0x200005bc
 8001ac4:	40004c00 	.word	0x40004c00

08001ac8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ad4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001afe:	4807      	ldr	r0, [pc, #28]	; (8001b1c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b00:	f00a fa6a 	bl	800bfd8 <HAL_UART_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001b14:	f000 f9ba 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000600 	.word	0x20000600
 8001b20:	40011000 	.word	0x40011000

08001b24 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_ZL19MX_USART2_UART_Initv+0x58>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b30:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b5a:	4807      	ldr	r0, [pc, #28]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b5c:	f00a fa3c 	bl	800bfd8 <HAL_UART_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf14      	ite	ne
 8001b66:	2301      	movne	r3, #1
 8001b68:	2300      	moveq	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001b70:	f000 f98c 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000644 	.word	0x20000644
 8001b7c:	40004400 	.word	0x40004400

08001b80 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <_ZL19MX_USART3_UART_Initv+0x5c>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001b8e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001ba8:	220c      	movs	r2, #12
 8001baa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bb8:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001bba:	f00a fa0d 	bl	800bfd8 <HAL_UART_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <_ZL19MX_USART3_UART_Initv+0x52>
  {
    Error_Handler();
 8001bce:	f000 f95d 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000688 	.word	0x20000688
 8001bdc:	40004800 	.word	0x40004800
 8001be0:	000186a0 	.word	0x000186a0

08001be4 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bea:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_ZL19MX_USART6_UART_Initv+0x58>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c1a:	4807      	ldr	r0, [pc, #28]	; (8001c38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c1c:	f00a f9dc 	bl	800bfd8 <HAL_UART_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf14      	ite	ne
 8001c26:	2301      	movne	r3, #1
 8001c28:	2300      	moveq	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001c30:	f000 f92c 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200006cc 	.word	0x200006cc
 8001c3c:	40011400 	.word	0x40011400

08001c40 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <_ZL11MX_DMA_Initv+0xc8>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <_ZL11MX_DMA_Initv+0xc8>)
 8001c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <_ZL11MX_DMA_Initv+0xc8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <_ZL11MX_DMA_Initv+0xc8>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <_ZL11MX_DMA_Initv+0xc8>)
 8001c6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <_ZL11MX_DMA_Initv+0xc8>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2105      	movs	r1, #5
 8001c82:	200c      	movs	r0, #12
 8001c84:	f005 faca 	bl	800721c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c88:	200c      	movs	r0, #12
 8001c8a:	f005 fae3 	bl	8007254 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2105      	movs	r1, #5
 8001c92:	200d      	movs	r0, #13
 8001c94:	f005 fac2 	bl	800721c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c98:	200d      	movs	r0, #13
 8001c9a:	f005 fadb 	bl	8007254 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	200e      	movs	r0, #14
 8001ca4:	f005 faba 	bl	800721c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ca8:	200e      	movs	r0, #14
 8001caa:	f005 fad3 	bl	8007254 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	200f      	movs	r0, #15
 8001cb4:	f005 fab2 	bl	800721c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001cb8:	200f      	movs	r0, #15
 8001cba:	f005 facb 	bl	8007254 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	2010      	movs	r0, #16
 8001cc4:	f005 faaa 	bl	800721c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cc8:	2010      	movs	r0, #16
 8001cca:	f005 fac3 	bl	8007254 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2105      	movs	r1, #5
 8001cd2:	2038      	movs	r0, #56	; 0x38
 8001cd4:	f005 faa2 	bl	800721c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cd8:	2038      	movs	r0, #56	; 0x38
 8001cda:	f005 fabb 	bl	8007254 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	2039      	movs	r0, #57	; 0x39
 8001ce4:	f005 fa9a 	bl	800721c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ce8:	2039      	movs	r0, #57	; 0x39
 8001cea:	f005 fab3 	bl	8007254 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	2046      	movs	r0, #70	; 0x46
 8001cf4:	f005 fa92 	bl	800721c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001cf8:	2046      	movs	r0, #70	; 0x46
 8001cfa:	f005 faab 	bl	8007254 <HAL_NVIC_EnableIRQ>

}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a54      	ldr	r2, [pc, #336]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b52      	ldr	r3, [pc, #328]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b4e      	ldr	r3, [pc, #312]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a4d      	ldr	r2, [pc, #308]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a46      	ldr	r2, [pc, #280]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a38      	ldr	r2, [pc, #224]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <_ZL12MX_GPIO_Initv+0x170>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2130      	movs	r1, #48	; 0x30
 8001db2:	4833      	ldr	r0, [pc, #204]	; (8001e80 <_ZL12MX_GPIO_Initv+0x174>)
 8001db4:	f005 fffa 	bl	8007dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2120      	movs	r1, #32
 8001dbc:	4831      	ldr	r0, [pc, #196]	; (8001e84 <_ZL12MX_GPIO_Initv+0x178>)
 8001dbe:	f005 fff5 	bl	8007dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	482f      	ldr	r0, [pc, #188]	; (8001e88 <_ZL12MX_GPIO_Initv+0x17c>)
 8001dca:	f005 ffef 	bl	8007dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dce:	2330      	movs	r3, #48	; 0x30
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4826      	ldr	r0, [pc, #152]	; (8001e80 <_ZL12MX_GPIO_Initv+0x174>)
 8001de6:	f005 fe45 	bl	8007a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dea:	2310      	movs	r3, #16
 8001dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4821      	ldr	r0, [pc, #132]	; (8001e84 <_ZL12MX_GPIO_Initv+0x178>)
 8001e00:	f005 fe38 	bl	8007a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e04:	2320      	movs	r3, #32
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	481a      	ldr	r0, [pc, #104]	; (8001e84 <_ZL12MX_GPIO_Initv+0x178>)
 8001e1c:	f005 fe2a 	bl	8007a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e20:	2304      	movs	r3, #4
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4814      	ldr	r0, [pc, #80]	; (8001e88 <_ZL12MX_GPIO_Initv+0x17c>)
 8001e36:	f005 fe1d 	bl	8007a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	480d      	ldr	r0, [pc, #52]	; (8001e88 <_ZL12MX_GPIO_Initv+0x17c>)
 8001e54:	f005 fe0e 	bl	8007a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4804      	ldr	r0, [pc, #16]	; (8001e80 <_ZL12MX_GPIO_Initv+0x174>)
 8001e70:	f005 fe00 	bl	8007a74 <HAL_GPIO_Init>
}
 8001e74:	bf00      	nop
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020400 	.word	0x40020400

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <Error_Handler+0x8>

08001e96 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way. Managing the pointer is the user's responsibility.
       */
      ~set() = default;
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f8c7 	bl	8002034 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EED1Ev>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_ZN4HC05D1Ev>:
#include <set>
#include <string.h>

class PrintableSensor;

class HC05//: UART_Conn
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	331c      	adds	r3, #28
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f8ce 	bl	800205e <_ZNSt6vectorIP15PrintableSensorSaIS1_EED1Ev>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ffe6 	bl	8001e96 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EED1Ev>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d158      	bne.n	8001f96 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d153      	bne.n	8001f96 <_Z41__static_initialization_and_destruction_0ii+0xc2>
Buzzer buzz;
 8001eee:	4831      	ldr	r0, [pc, #196]	; (8001fb4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001ef0:	f7ff f864 	bl	8000fbc <_ZN6BuzzerC1Ev>
HC05 bt(&huart1);
 8001ef4:	4930      	ldr	r1, [pc, #192]	; (8001fb8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8001ef6:	4831      	ldr	r0, [pc, #196]	; (8001fbc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001ef8:	f002 f8c1 	bl	800407e <_ZN4HC05C1EP20__UART_HandleTypeDef>
PMW3901UY pmw(&huart2,&hdma_usart2_rx,100);
 8001efc:	2364      	movs	r3, #100	; 0x64
 8001efe:	4a30      	ldr	r2, [pc, #192]	; (8001fc0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001f00:	4930      	ldr	r1, [pc, #192]	; (8001fc4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001f02:	4831      	ldr	r0, [pc, #196]	; (8001fc8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8001f04:	f004 fa42 	bl	800638c <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
FrSkyRX remote_rx(&huart3,&hdma_usart3_rx,&buzz,100);
 8001f08:	2364      	movs	r3, #100	; 0x64
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001f10:	492f      	ldr	r1, [pc, #188]	; (8001fd0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8001f12:	4830      	ldr	r0, [pc, #192]	; (8001fd4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001f14:	f001 fe2c 	bl	8003b70 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>
MB1043 sonar(&huart4,&hdma_uart4_rx,100);
 8001f18:	2364      	movs	r3, #100	; 0x64
 8001f1a:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001f1c:	492f      	ldr	r1, [pc, #188]	; (8001fdc <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8001f1e:	4830      	ldr	r0, [pc, #192]	; (8001fe0 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001f20:	f004 f950 	bl	80061c4 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>
LIS3MDLTR lis(&hspi2);
 8001f24:	492f      	ldr	r1, [pc, #188]	; (8001fe4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001f26:	4830      	ldr	r0, [pc, #192]	; (8001fe8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001f28:	f003 ff30 	bl	8005d8c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>
BMP390 bmp(&hspi2);
 8001f2c:	492d      	ldr	r1, [pc, #180]	; (8001fe4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001f2e:	482f      	ldr	r0, [pc, #188]	; (8001fec <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8001f30:	f001 f8ac 	bl	800308c <_ZN6BMP390C1EP19__SPI_HandleTypeDef>
ICM42688P icm(&hspi2);
 8001f34:	492b      	ldr	r1, [pc, #172]	; (8001fe4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001f36:	482e      	ldr	r0, [pc, #184]	; (8001ff0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8001f38:	f003 f8fe 	bl	8005138 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef>
BatteryManagement BattMgmt(&hadc1,&buzz,1000);
 8001f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001f42:	492c      	ldr	r1, [pc, #176]	; (8001ff4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001f44:	482c      	ldr	r0, [pc, #176]	; (8001ff8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001f46:	f7ff f801 	bl	8000f4c <_ZN17BatteryManagementC1EP17ADC_HandleTypeDefP6Buzzert>
PID_Control roll_pid(euler_y,0,0,3);
 8001f4a:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8001f4e:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001ffc <_Z41__static_initialization_and_destruction_0ii+0x128>
 8001f52:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8001ffc <_Z41__static_initialization_and_destruction_0ii+0x128>
 8001f56:	492a      	ldr	r1, [pc, #168]	; (8002000 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001f58:	482a      	ldr	r0, [pc, #168]	; (8002004 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001f5a:	f7fe ffbd 	bl	8000ed8 <_ZN11PID_ControlC1ERffff>
PID_Control pitch_pid(euler_x,0,0,0);
 8001f5e:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8001ffc <_Z41__static_initialization_and_destruction_0ii+0x128>
 8001f62:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001ffc <_Z41__static_initialization_and_destruction_0ii+0x128>
 8001f66:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001ffc <_Z41__static_initialization_and_destruction_0ii+0x128>
 8001f6a:	4927      	ldr	r1, [pc, #156]	; (8002008 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001f6c:	4827      	ldr	r0, [pc, #156]	; (800200c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001f6e:	f7fe ffb3 	bl	8000ed8 <_ZN11PID_ControlC1ERffff>
PID_Control yaw_pid(euler_z,1,0,0);
 8001f72:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8001ffc <_Z41__static_initialization_and_destruction_0ii+0x128>
 8001f76:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001ffc <_Z41__static_initialization_and_destruction_0ii+0x128>
 8001f7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f7e:	4924      	ldr	r1, [pc, #144]	; (8002010 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8001f80:	4824      	ldr	r0, [pc, #144]	; (8002014 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001f82:	f7fe ffa9 	bl	8000ed8 <_ZN11PID_ControlC1ERffff>
float test1=roll_pid.out();
 8001f86:	481f      	ldr	r0, [pc, #124]	; (8002004 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001f88:	f004 fbb4 	bl	80066f4 <_ZN11PID_Control3outEv>
 8001f8c:	eef0 7a40 	vmov.f32	s15, s0
 8001f90:	4b21      	ldr	r3, [pc, #132]	; (8002018 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8001f92:	edc3 7a00 	vstr	s15, [r3]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d102      	bne.n	8001fac <_Z41__static_initialization_and_destruction_0ii+0xd8>
HC05 bt(&huart1);
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001fa8:	f7ff ff82 	bl	8001eb0 <_ZN4HC05D1Ev>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200008f0 	.word	0x200008f0
 8001fb8:	20000600 	.word	0x20000600
 8001fbc:	20000908 	.word	0x20000908
 8001fc0:	200007d0 	.word	0x200007d0
 8001fc4:	20000644 	.word	0x20000644
 8001fc8:	20000994 	.word	0x20000994
 8001fcc:	20000830 	.word	0x20000830
 8001fd0:	20000688 	.word	0x20000688
 8001fd4:	200009ec 	.word	0x200009ec
 8001fd8:	20000710 	.word	0x20000710
 8001fdc:	200005bc 	.word	0x200005bc
 8001fe0:	20000a44 	.word	0x20000a44
 8001fe4:	20000414 	.word	0x20000414
 8001fe8:	20000a98 	.word	0x20000a98
 8001fec:	20000ae4 	.word	0x20000ae4
 8001ff0:	20000b30 	.word	0x20000b30
 8001ff4:	200002e8 	.word	0x200002e8
 8001ff8:	20000bf4 	.word	0x20000bf4
 8001ffc:	00000000 	.word	0x00000000
 8002000:	20000c44 	.word	0x20000c44
 8002004:	20000c4c 	.word	0x20000c4c
 8002008:	20000c40 	.word	0x20000c40
 800200c:	20000c74 	.word	0x20000c74
 8002010:	20000c48 	.word	0x20000c48
 8002014:	20000c9c 	.word	0x20000c9c
 8002018:	20000cc8 	.word	0x20000cc8

0800201c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f835 	bl	8002094 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEED1Ev>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f854 	bl	80020ea <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8002042:	4603      	mov	r3, r0
 8002044:	4619      	mov	r1, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f830 	bl	80020ac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ffe4 	bl	800201c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EED1Ev>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <_ZNSt6vectorIP15PrintableSensorSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800205e:	b5b0      	push	{r4, r5, r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681c      	ldr	r4, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f86b 	bl	800214c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8002076:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002078:	461a      	mov	r2, r3
 800207a:	4629      	mov	r1, r5
 800207c:	4620      	mov	r0, r4
 800207e:	f000 f870 	bl	8002162 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f848 	bl	800211a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EED1Ev>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bdb0      	pop	{r4, r5, r7, pc}

08002094 <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f86e 	bl	800217e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEED1Ev>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d012      	beq.n	80020e2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E+0x36>
	{
	  _M_erase(_S_right(__x));
 80020bc:	6838      	ldr	r0, [r7, #0]
 80020be:	f000 f869 	bl	8002194 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4619      	mov	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fff0 	bl	80020ac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E>
	  _Link_type __y = _S_left(__x);
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f000 f86d 	bl	80021ac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 80020d2:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f874 	bl	80021c4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS1_E>
	  __x = __y;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80020e0:	e7e9      	b.n	80020b6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E+0xa>
	}
    }
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f86b 	bl	80021e6 <_ZNSaIP15PrintableSensorED1Ev>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002132:	461a      	mov	r2, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f862 	bl	80021fe <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>
      }
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ffe0 	bl	8002102 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implD1Ev>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f857 	bl	8002224 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>
    }
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS1_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80021ce:	6839      	ldr	r1, [r7, #0]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f834 	bl	800223e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS1_E>
	_M_put_node(__p);
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f845 	bl	8002268 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E>
      }
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZNSaIP15PrintableSensorED1Ev>:
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f84c 	bl	800228c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorED1Ev>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
	if (__p)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f843 	bl	80022a2 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>
      }
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZSt8_DestroyIPP15PrintableSensorEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f845 	bl	80022c0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>
    }
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS1_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800223e:	b590      	push	{r4, r7, lr}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f844 	bl	80022d6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 800224e:	4604      	mov	r4, r0
 8002250:	6838      	ldr	r0, [r7, #0]
 8002252:	f000 f84b 	bl	80022ec <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8002256:	4603      	mov	r3, r0
 8002258:	4619      	mov	r1, r3
 800225a:	4620      	mov	r0, r4
 800225c:	f000 f854 	bl	8002308 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE7destroyIS2_EEvRS4_PT_>
      }
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bd90      	pop	{r4, r7, pc}

08002268 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f82f 	bl	80022d6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8002278:	4603      	mov	r3, r0
 800227a:	2201      	movs	r2, #1
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f84f 	bl	8002322 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE10deallocateERS4_PS3_j>
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorED1Ev>:
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f844 	bl	8002340 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15PrintableSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr()
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3310      	adds	r3, #16
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f831 	bl	8002360 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 80022fe:	4603      	mov	r3, r0
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE7destroyIS2_EEvRS4_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002312:	6839      	ldr	r1, [r7, #0]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f82f 	bl	8002378 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE7destroyIS3_EEvPT_>
	}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f82b 	bl	800238e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE10deallocateEPS4_j>
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4619      	mov	r1, r3
 8002352:	68b8      	ldr	r0, [r7, #8]
 8002354:	f00f ffe2 	bl	801231c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f823 	bl	80023b4 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 800236e:	4603      	mov	r3, r0
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4619      	mov	r1, r3
 80023a6:	68b8      	ldr	r0, [r7, #8]
 80023a8:	f00f ffb8 	bl	801231c <_ZdlPvj>
      }
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_ZN9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() noexcept
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_GLOBAL__sub_I_hadc1>:
 80023ca:	b580      	push	{r7, lr}
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7ff fd7e 	bl	8001ed4 <_Z41__static_initialization_and_destruction_0ii>
 80023d8:	bd80      	pop	{r7, pc}

080023da <_GLOBAL__sub_D_hadc1>:
 80023da:	b580      	push	{r7, lr}
 80023dc:	af00      	add	r7, sp, #0
 80023de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff fd76 	bl	8001ed4 <_Z41__static_initialization_and_destruction_0ii>
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_MspInit+0x54>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_MspInit+0x54>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_MspInit+0x54>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_MspInit+0x54>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_MspInit+0x54>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_MspInit+0x54>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	210f      	movs	r1, #15
 800242e:	f06f 0001 	mvn.w	r0, #1
 8002432:	f004 fef3 	bl	800721c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2e      	ldr	r2, [pc, #184]	; (800251c <HAL_ADC_MspInit+0xd8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d156      	bne.n	8002514 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_ADC_MspInit+0xdc>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <HAL_ADC_MspInit+0xdc>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_ADC_MspInit+0xdc>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_ADC_MspInit+0xdc>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a25      	ldr	r2, [pc, #148]	; (8002520 <HAL_ADC_MspInit+0xdc>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_ADC_MspInit+0xdc>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a2:	2303      	movs	r3, #3
 80024a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	481c      	ldr	r0, [pc, #112]	; (8002524 <HAL_ADC_MspInit+0xe0>)
 80024b2:	f005 fadf 	bl	8007a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_ADC_MspInit+0xe8>)
 80024ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80024bc:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024ce:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024f8:	480b      	ldr	r0, [pc, #44]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 80024fa:	f004 feb9 	bl	8007270 <HAL_DMA_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002504:	f7ff fcc2 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a07      	ldr	r2, [pc, #28]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
 800250e:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_ADC_MspInit+0xe4>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002514:	bf00      	nop
 8002516:	3728      	adds	r7, #40	; 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40012000 	.word	0x40012000
 8002520:	40023800 	.word	0x40023800
 8002524:	40020800 	.word	0x40020800
 8002528:	20000330 	.word	0x20000330
 800252c:	40026410 	.word	0x40026410

08002530 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <HAL_SD_MspInit+0xc0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d14a      	bne.n	80025e8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_SD_MspInit+0xc4>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <HAL_SD_MspInit+0xc4>)
 800255c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_SD_MspInit+0xc4>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_SD_MspInit+0xc4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_SD_MspInit+0xc4>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_SD_MspInit+0xc4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_SD_MspInit+0xc4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_SD_MspInit+0xc4>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_SD_MspInit+0xc4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80025a6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80025aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80025b8:	230c      	movs	r3, #12
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4619      	mov	r1, r3
 80025c2:	480d      	ldr	r0, [pc, #52]	; (80025f8 <HAL_SD_MspInit+0xc8>)
 80025c4:	f005 fa56 	bl	8007a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025c8:	2304      	movs	r3, #4
 80025ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80025d8:	230c      	movs	r3, #12
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4619      	mov	r1, r3
 80025e2:	4806      	ldr	r0, [pc, #24]	; (80025fc <HAL_SD_MspInit+0xcc>)
 80025e4:	f005 fa46 	bl	8007a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80025e8:	bf00      	nop
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020c00 	.word	0x40020c00

08002600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a47      	ldr	r2, [pc, #284]	; (800273c <HAL_SPI_MspInit+0x13c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	f040 8087 	bne.w	8002732 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <HAL_SPI_MspInit+0x140>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	4a44      	ldr	r2, [pc, #272]	; (8002740 <HAL_SPI_MspInit+0x140>)
 800262e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002632:	6413      	str	r3, [r2, #64]	; 0x40
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_SPI_MspInit+0x140>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_SPI_MspInit+0x140>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	4a3d      	ldr	r2, [pc, #244]	; (8002740 <HAL_SPI_MspInit+0x140>)
 800264a:	f043 0302 	orr.w	r3, r3, #2
 800264e:	6313      	str	r3, [r2, #48]	; 0x30
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_SPI_MspInit+0x140>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800265c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800266e:	2305      	movs	r3, #5
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	4832      	ldr	r0, [pc, #200]	; (8002744 <HAL_SPI_MspInit+0x144>)
 800267a:	f005 f9fb 	bl	8007a74 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800267e:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_SPI_MspInit+0x148>)
 8002680:	4a32      	ldr	r2, [pc, #200]	; (800274c <HAL_SPI_MspInit+0x14c>)
 8002682:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <HAL_SPI_MspInit+0x148>)
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_SPI_MspInit+0x148>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_SPI_MspInit+0x148>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002696:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <HAL_SPI_MspInit+0x148>)
 8002698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800269c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800269e:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_SPI_MspInit+0x148>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026a4:	4b28      	ldr	r3, [pc, #160]	; (8002748 <HAL_SPI_MspInit+0x148>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80026aa:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_SPI_MspInit+0x148>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_SPI_MspInit+0x148>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_SPI_MspInit+0x148>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80026bc:	4822      	ldr	r0, [pc, #136]	; (8002748 <HAL_SPI_MspInit+0x148>)
 80026be:	f004 fdd7 	bl	8007270 <HAL_DMA_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80026c8:	f7ff fbe0 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <HAL_SPI_MspInit+0x148>)
 80026d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80026d2:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <HAL_SPI_MspInit+0x148>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_SPI_MspInit+0x150>)
 80026da:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_SPI_MspInit+0x154>)
 80026dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_SPI_MspInit+0x150>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_SPI_MspInit+0x150>)
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_SPI_MspInit+0x150>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_SPI_MspInit+0x150>)
 80026f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026f8:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_SPI_MspInit+0x150>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_SPI_MspInit+0x150>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_SPI_MspInit+0x150>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_SPI_MspInit+0x150>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <HAL_SPI_MspInit+0x150>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002716:	480e      	ldr	r0, [pc, #56]	; (8002750 <HAL_SPI_MspInit+0x150>)
 8002718:	f004 fdaa 	bl	8007270 <HAL_DMA_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8002722:	f7ff fbb3 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_SPI_MspInit+0x150>)
 800272a:	649a      	str	r2, [r3, #72]	; 0x48
 800272c:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_SPI_MspInit+0x150>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40003800 	.word	0x40003800
 8002740:	40023800 	.word	0x40023800
 8002744:	40020400 	.word	0x40020400
 8002748:	2000046c 	.word	0x2000046c
 800274c:	40026058 	.word	0x40026058
 8002750:	200004cc 	.word	0x200004cc
 8002754:	40026070 	.word	0x40026070

08002758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_TIM_Base_MspInit+0x70>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_TIM_Base_MspInit+0x74>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a16      	ldr	r2, [pc, #88]	; (80027cc <HAL_TIM_Base_MspInit+0x74>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_TIM_Base_MspInit+0x74>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002786:	e01a      	b.n	80027be <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_TIM_Base_MspInit+0x78>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d115      	bne.n	80027be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_TIM_Base_MspInit+0x74>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <HAL_TIM_Base_MspInit+0x74>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_TIM_Base_MspInit+0x74>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2105      	movs	r1, #5
 80027b2:	201e      	movs	r0, #30
 80027b4:	f004 fd32 	bl	800721c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027b8:	201e      	movs	r0, #30
 80027ba:	f004 fd4b 	bl	8007254 <HAL_NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40000400 	.word	0x40000400
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40000800 	.word	0x40000800

080027d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a21      	ldr	r2, [pc, #132]	; (8002878 <HAL_TIM_MspPostInit+0xa4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d13b      	bne.n	800286e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_TIM_MspPostInit+0xa8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_TIM_MspPostInit+0xa8>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_TIM_MspPostInit+0xa8>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_TIM_MspPostInit+0xa8>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a18      	ldr	r2, [pc, #96]	; (800287c <HAL_TIM_MspPostInit+0xa8>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_TIM_MspPostInit+0xa8>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800283e:	2302      	movs	r3, #2
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	480d      	ldr	r0, [pc, #52]	; (8002880 <HAL_TIM_MspPostInit+0xac>)
 800284a:	f005 f913 	bl	8007a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800284e:	2303      	movs	r3, #3
 8002850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800285e:	2302      	movs	r3, #2
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	4619      	mov	r1, r3
 8002868:	4806      	ldr	r0, [pc, #24]	; (8002884 <HAL_TIM_MspPostInit+0xb0>)
 800286a:	f005 f903 	bl	8007a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40000400 	.word	0x40000400
 800287c:	40023800 	.word	0x40023800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400

08002888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b092      	sub	sp, #72	; 0x48
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a93      	ldr	r2, [pc, #588]	; (8002af4 <HAL_UART_MspInit+0x26c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d15a      	bne.n	8002960 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
 80028ae:	4b92      	ldr	r3, [pc, #584]	; (8002af8 <HAL_UART_MspInit+0x270>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a91      	ldr	r2, [pc, #580]	; (8002af8 <HAL_UART_MspInit+0x270>)
 80028b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b8f      	ldr	r3, [pc, #572]	; (8002af8 <HAL_UART_MspInit+0x270>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ca:	4b8b      	ldr	r3, [pc, #556]	; (8002af8 <HAL_UART_MspInit+0x270>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a8a      	ldr	r2, [pc, #552]	; (8002af8 <HAL_UART_MspInit+0x270>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_UART_MspInit+0x270>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028e2:	2303      	movs	r3, #3
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028f2:	2308      	movs	r3, #8
 80028f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028fa:	4619      	mov	r1, r3
 80028fc:	487f      	ldr	r0, [pc, #508]	; (8002afc <HAL_UART_MspInit+0x274>)
 80028fe:	f005 f8b9 	bl	8007a74 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002902:	4b7f      	ldr	r3, [pc, #508]	; (8002b00 <HAL_UART_MspInit+0x278>)
 8002904:	4a7f      	ldr	r2, [pc, #508]	; (8002b04 <HAL_UART_MspInit+0x27c>)
 8002906:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002908:	4b7d      	ldr	r3, [pc, #500]	; (8002b00 <HAL_UART_MspInit+0x278>)
 800290a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800290e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002910:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <HAL_UART_MspInit+0x278>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002916:	4b7a      	ldr	r3, [pc, #488]	; (8002b00 <HAL_UART_MspInit+0x278>)
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800291c:	4b78      	ldr	r3, [pc, #480]	; (8002b00 <HAL_UART_MspInit+0x278>)
 800291e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002922:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002924:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_UART_MspInit+0x278>)
 8002926:	2200      	movs	r2, #0
 8002928:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292a:	4b75      	ldr	r3, [pc, #468]	; (8002b00 <HAL_UART_MspInit+0x278>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002930:	4b73      	ldr	r3, [pc, #460]	; (8002b00 <HAL_UART_MspInit+0x278>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_UART_MspInit+0x278>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800293c:	4b70      	ldr	r3, [pc, #448]	; (8002b00 <HAL_UART_MspInit+0x278>)
 800293e:	2200      	movs	r2, #0
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002942:	486f      	ldr	r0, [pc, #444]	; (8002b00 <HAL_UART_MspInit+0x278>)
 8002944:	f004 fc94 	bl	8007270 <HAL_DMA_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800294e:	f7ff fa9d 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_UART_MspInit+0x278>)
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
 8002958:	4a69      	ldr	r2, [pc, #420]	; (8002b00 <HAL_UART_MspInit+0x278>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800295e:	e19f      	b.n	8002ca0 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a68      	ldr	r2, [pc, #416]	; (8002b08 <HAL_UART_MspInit+0x280>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d163      	bne.n	8002a32 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART1_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
 800296e:	4b62      	ldr	r3, [pc, #392]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a61      	ldr	r2, [pc, #388]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002974:	f043 0310 	orr.w	r3, r3, #16
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <HAL_UART_MspInit+0x270>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <HAL_UART_MspInit+0x270>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a5a      	ldr	r2, [pc, #360]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b58      	ldr	r3, [pc, #352]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029b4:	2307      	movs	r3, #7
 80029b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029bc:	4619      	mov	r1, r3
 80029be:	484f      	ldr	r0, [pc, #316]	; (8002afc <HAL_UART_MspInit+0x274>)
 80029c0:	f005 f858 	bl	8007a74 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80029c4:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <HAL_UART_MspInit+0x284>)
 80029c6:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_UART_MspInit+0x288>)
 80029c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80029ca:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <HAL_UART_MspInit+0x284>)
 80029cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d2:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <HAL_UART_MspInit+0x284>)
 80029d4:	2240      	movs	r2, #64	; 0x40
 80029d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d8:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_UART_MspInit+0x284>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029de:	4b4b      	ldr	r3, [pc, #300]	; (8002b0c <HAL_UART_MspInit+0x284>)
 80029e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e6:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <HAL_UART_MspInit+0x284>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ec:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_UART_MspInit+0x284>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029f2:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <HAL_UART_MspInit+0x284>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029f8:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <HAL_UART_MspInit+0x284>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <HAL_UART_MspInit+0x284>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a04:	4841      	ldr	r0, [pc, #260]	; (8002b0c <HAL_UART_MspInit+0x284>)
 8002a06:	f004 fc33 	bl	8007270 <HAL_DMA_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002a10:	f7ff fa3c 	bl	8001e8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <HAL_UART_MspInit+0x284>)
 8002a18:	635a      	str	r2, [r3, #52]	; 0x34
 8002a1a:	4a3c      	ldr	r2, [pc, #240]	; (8002b0c <HAL_UART_MspInit+0x284>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2105      	movs	r1, #5
 8002a24:	2025      	movs	r0, #37	; 0x25
 8002a26:	f004 fbf9 	bl	800721c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a2a:	2025      	movs	r0, #37	; 0x25
 8002a2c:	f004 fc12 	bl	8007254 <HAL_NVIC_EnableIRQ>
}
 8002a30:	e136      	b.n	8002ca0 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a37      	ldr	r2, [pc, #220]	; (8002b14 <HAL_UART_MspInit+0x28c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d171      	bne.n	8002b20 <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a2c      	ldr	r2, [pc, #176]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_UART_MspInit+0x270>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a74:	230c      	movs	r3, #12
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	2303      	movs	r3, #3
 8002a82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a84:	2307      	movs	r3, #7
 8002a86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	481b      	ldr	r0, [pc, #108]	; (8002afc <HAL_UART_MspInit+0x274>)
 8002a90:	f004 fff0 	bl	8007a74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002a96:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <HAL_UART_MspInit+0x294>)
 8002a98:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002a9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aa0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ad4:	4810      	ldr	r0, [pc, #64]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002ad6:	f004 fbcb 	bl	8007270 <HAL_DMA_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002ae0:	f7ff f9d4 	bl	8001e8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8002aea:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <HAL_UART_MspInit+0x290>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002af0:	e0d6      	b.n	8002ca0 <HAL_UART_MspInit+0x418>
 8002af2:	bf00      	nop
 8002af4:	40004c00 	.word	0x40004c00
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	20000710 	.word	0x20000710
 8002b04:	40026040 	.word	0x40026040
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	20000770 	.word	0x20000770
 8002b10:	400264b8 	.word	0x400264b8
 8002b14:	40004400 	.word	0x40004400
 8002b18:	200007d0 	.word	0x200007d0
 8002b1c:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a60      	ldr	r2, [pc, #384]	; (8002ca8 <HAL_UART_MspInit+0x420>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d15b      	bne.n	8002be2 <HAL_UART_MspInit+0x35a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a5e      	ldr	r2, [pc, #376]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b5c      	ldr	r3, [pc, #368]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	4b58      	ldr	r3, [pc, #352]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a57      	ldr	r2, [pc, #348]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b55      	ldr	r3, [pc, #340]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b70:	2303      	movs	r3, #3
 8002b72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b74:	2307      	movs	r3, #7
 8002b76:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	484c      	ldr	r0, [pc, #304]	; (8002cb0 <HAL_UART_MspInit+0x428>)
 8002b80:	f004 ff78 	bl	8007a74 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002b84:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002b86:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <HAL_UART_MspInit+0x430>)
 8002b88:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002b8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b90:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b92:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b98:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9e:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba6:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bac:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002bb2:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bb8:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002bc4:	483b      	ldr	r0, [pc, #236]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002bc6:	f004 fb53 	bl	8007270 <HAL_DMA_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8002bd0:	f7ff f95c 	bl	8001e8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a37      	ldr	r2, [pc, #220]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8002bda:	4a36      	ldr	r2, [pc, #216]	; (8002cb4 <HAL_UART_MspInit+0x42c>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002be0:	e05e      	b.n	8002ca0 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART6)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a35      	ldr	r2, [pc, #212]	; (8002cbc <HAL_UART_MspInit+0x434>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d159      	bne.n	8002ca0 <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	4a2d      	ldr	r2, [pc, #180]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002bf6:	f043 0320 	orr.w	r3, r3, #32
 8002bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6313      	str	r3, [r2, #48]	; 0x30
 8002c18:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_UART_MspInit+0x424>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c24:	23c0      	movs	r3, #192	; 0xc0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c34:	2308      	movs	r3, #8
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4820      	ldr	r0, [pc, #128]	; (8002cc0 <HAL_UART_MspInit+0x438>)
 8002c40:	f004 ff18 	bl	8007a74 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c46:	4a20      	ldr	r2, [pc, #128]	; (8002cc8 <HAL_UART_MspInit+0x440>)
 8002c48:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c4c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002c50:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c5e:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c64:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002c72:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002c84:	480f      	ldr	r0, [pc, #60]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c86:	f004 faf3 	bl	8007270 <HAL_DMA_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8002c90:	f7ff f8fc 	bl	8001e8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_UART_MspInit+0x43c>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ca0:	bf00      	nop
 8002ca2:	3748      	adds	r7, #72	; 0x48
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40004800 	.word	0x40004800
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	20000830 	.word	0x20000830
 8002cb8:	40026028 	.word	0x40026028
 8002cbc:	40011400 	.word	0x40011400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	20000890 	.word	0x20000890
 8002cc8:	40026428 	.word	0x40026428

08002ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	; 0x30
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <HAL_InitTick+0xd4>)
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	4a2e      	ldr	r2, [pc, #184]	; (8002da0 <HAL_InitTick+0xd4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6453      	str	r3, [r2, #68]	; 0x44
 8002cec:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <HAL_InitTick+0xd4>)
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cf8:	f107 020c 	add.w	r2, r7, #12
 8002cfc:	f107 0310 	add.w	r3, r7, #16
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f006 fd8e 	bl	8009824 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002d08:	f006 fd78 	bl	80097fc <HAL_RCC_GetPCLK2Freq>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	4a23      	ldr	r2, [pc, #140]	; (8002da4 <HAL_InitTick+0xd8>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0c9b      	lsrs	r3, r3, #18
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <HAL_InitTick+0xdc>)
 8002d22:	4a22      	ldr	r2, [pc, #136]	; (8002dac <HAL_InitTick+0xe0>)
 8002d24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_InitTick+0xdc>)
 8002d28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d2e:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <HAL_InitTick+0xdc>)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d34:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <HAL_InitTick+0xdc>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_InitTick+0xdc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_InitTick+0xdc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d46:	4818      	ldr	r0, [pc, #96]	; (8002da8 <HAL_InitTick+0xdc>)
 8002d48:	f008 f90a 	bl	800af60 <HAL_TIM_Base_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11b      	bne.n	8002d92 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002d5a:	4813      	ldr	r0, [pc, #76]	; (8002da8 <HAL_InitTick+0xdc>)
 8002d5c:	f008 f950 	bl	800b000 <HAL_TIM_Base_Start_IT>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d111      	bne.n	8002d92 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d6e:	2019      	movs	r0, #25
 8002d70:	f004 fa70 	bl	8007254 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b0f      	cmp	r3, #15
 8002d78:	d808      	bhi.n	8002d8c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	2019      	movs	r0, #25
 8002d80:	f004 fa4c 	bl	800721c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <HAL_InitTick+0xe4>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e002      	b.n	8002d92 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3730      	adds	r7, #48	; 0x30
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	431bde83 	.word	0x431bde83
 8002da8:	20000cd8 	.word	0x20000cd8
 8002dac:	40010000 	.word	0x40010000
 8002db0:	20000004 	.word	0x20000004

08002db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <NMI_Handler+0x4>

08002dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <HardFault_Handler+0x4>

08002dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <MemManage_Handler+0x4>

08002dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dca:	e7fe      	b.n	8002dca <BusFault_Handler+0x4>

08002dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <UsageFault_Handler+0x4>

08002dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002de4:	2004      	movs	r0, #4
 8002de6:	f004 fffb 	bl	8007de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}

08002dee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002df2:	2010      	movs	r0, #16
 8002df4:	f004 fff4 	bl	8007de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <DMA1_Stream1_IRQHandler+0x10>)
 8002e02:	f004 fbcd 	bl	80075a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000830 	.word	0x20000830

08002e10 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <DMA1_Stream2_IRQHandler+0x10>)
 8002e16:	f004 fbc3 	bl	80075a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000710 	.word	0x20000710

08002e24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <DMA1_Stream3_IRQHandler+0x10>)
 8002e2a:	f004 fbb9 	bl	80075a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000046c 	.word	0x2000046c

08002e38 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <DMA1_Stream4_IRQHandler+0x10>)
 8002e3e:	f004 fbaf 	bl	80075a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200004cc 	.word	0x200004cc

08002e4c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <DMA1_Stream5_IRQHandler+0x10>)
 8002e52:	f004 fba5 	bl	80075a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200007d0 	.word	0x200007d0

08002e60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002e64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e68:	f004 ffba 	bl	8007de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e76:	f008 fa55 	bl	800b324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000cd8 	.word	0x20000cd8

08002e84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <TIM4_IRQHandler+0x10>)
 8002e8a:	f008 fa4b 	bl	800b324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000574 	.word	0x20000574

08002e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <USART1_IRQHandler+0x10>)
 8002e9e:	f009 f9cd 	bl	800c23c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000600 	.word	0x20000600

08002eac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <DMA2_Stream0_IRQHandler+0x10>)
 8002eb2:	f004 fb75 	bl	80075a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000330 	.word	0x20000330

08002ec0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <DMA2_Stream1_IRQHandler+0x10>)
 8002ec6:	f004 fb6b 	bl	80075a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000890 	.word	0x20000890

08002ed4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <OTG_FS_IRQHandler+0x10>)
 8002eda:	f004 ff99 	bl	8007e10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20004a80 	.word	0x20004a80

08002ee8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <DMA2_Stream7_IRQHandler+0x10>)
 8002eee:	f004 fb57 	bl	80075a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000770 	.word	0x20000770

08002efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
	return 1;
 8002f00:	2301      	movs	r3, #1
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <_kill>:

int _kill(int pid, int sig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f16:	f010 fb9b 	bl	8013650 <__errno>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2216      	movs	r2, #22
 8002f1e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_exit>:

void _exit (int status)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f34:	f04f 31ff 	mov.w	r1, #4294967295
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ffe7 	bl	8002f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f3e:	e7fe      	b.n	8002f3e <_exit+0x12>

08002f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <_sbrk+0x5c>)
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <_sbrk+0x60>)
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <_sbrk+0x64>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <_sbrk+0x64>)
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <_sbrk+0x68>)
 8002f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <_sbrk+0x64>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d207      	bcs.n	8002f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f70:	f010 fb6e 	bl	8013650 <__errno>
 8002f74:	4603      	mov	r3, r0
 8002f76:	220c      	movs	r2, #12
 8002f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	e009      	b.n	8002f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f86:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <_sbrk+0x64>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <_sbrk+0x64>)
 8002f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20020000 	.word	0x20020000
 8002fa0:	00000400 	.word	0x00000400
 8002fa4:	20000d20 	.word	0x20000d20
 8002fa8:	20004fa0 	.word	0x20004fa0

08002fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <SystemInit+0x20>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb6:	4a05      	ldr	r2, [pc, #20]	; (8002fcc <SystemInit+0x20>)
 8002fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fd4:	480d      	ldr	r0, [pc, #52]	; (800300c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fd6:	490e      	ldr	r1, [pc, #56]	; (8003010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fd8:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fdc:	e002      	b.n	8002fe4 <LoopCopyDataInit>

08002fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fe2:	3304      	adds	r3, #4

08002fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe8:	d3f9      	bcc.n	8002fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fec:	4c0b      	ldr	r4, [pc, #44]	; (800301c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff0:	e001      	b.n	8002ff6 <LoopFillZerobss>

08002ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff4:	3204      	adds	r2, #4

08002ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff8:	d3fb      	bcc.n	8002ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ffa:	f7ff ffd7 	bl	8002fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffe:	f010 fb2d 	bl	801365c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003002:	f7fe f983 	bl	800130c <main>
  bx  lr    
 8003006:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800300c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003010:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003014:	08013d94 	.word	0x08013d94
  ldr r2, =_sbss
 8003018:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800301c:	20004fa0 	.word	0x20004fa0

08003020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003020:	e7fe      	b.n	8003020 <ADC_IRQHandler>
	...

08003024 <_ZN15PrintableSensor11toCharArrayEi>:
	char packet[50]={};

public:
	virtual const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList) = 0;

	const char* toCharArray(int value)
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
	{
		return "";//std::to_string(value).c_str();
 800302e:	4b03      	ldr	r3, [pc, #12]	; (800303c <_ZN15PrintableSensor11toCharArrayEi+0x18>)
	}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	08013b0c 	.word	0x08013b0c

08003040 <_ZN8SPI_ConnC1Ev>:
#define INTERFACES_INTERFACES_H_

#include <stdint.h>
#include <string.h>

class SPI_Conn
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	4a04      	ldr	r2, [pc, #16]	; (800305c <_ZN8SPI_ConnC1Ev+0x1c>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	08013ba8 	.word	0x08013ba8

08003060 <_ZN15PrintableSensorC1Ev>:
class PrintableSensor
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <_ZN15PrintableSensorC1Ev+0x28>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	2232      	movs	r2, #50	; 0x32
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f010 fb4c 	bl	8013714 <memset>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	08013b9c 	.word	0x08013b9c

0800308c <_ZN6BMP390C1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "BMP390.h"

BMP390::BMP390(SPI_HandleTypeDef *spi_port)
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ffd1 	bl	8003040 <_ZN8SPI_ConnC1Ev>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ffdc 	bl	8003060 <_ZN15PrintableSensorC1Ev>
 80030a8:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0x58>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <_ZN6BMP390C1EP19__SPI_HandleTypeDef+0x5c>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
{
	BMP390::spi_port = spi_port;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	08013b7c 	.word	0x08013b7c
 80030e8:	08013b90 	.word	0x08013b90

080030ec <_ZN6BMP39011defaultInitEv>:

bool BMP390::defaultInit()
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	6078      	str	r0, [r7, #4]
	SPI_write(CMD,CMD_SOFTRESET);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	22b6      	movs	r2, #182	; 0xb6
 80030fc:	217e      	movs	r1, #126	; 0x7e
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
	HAL_Delay(20);
 8003102:	2014      	movs	r0, #20
 8003104:	f003 fb9c 	bl	8006840 <HAL_Delay>

	int debug = SPI_read(STATUS);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3304      	adds	r3, #4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2103      	movs	r1, #3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
 8003116:	4603      	mov	r3, r0
 8003118:	60fb      	str	r3, [r7, #12]
	while ((debug= SPI_read(STATUS))==0)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3304      	adds	r3, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2103      	movs	r1, #3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	4603      	mov	r3, r0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <_ZN6BMP39011defaultInitEv+0x58>
		HAL_Delay(50);
 800313c:	2032      	movs	r0, #50	; 0x32
 800313e:	f003 fb7f 	bl	8006840 <HAL_Delay>
	while ((debug= SPI_read(STATUS))==0)
 8003142:	e7ea      	b.n	800311a <_ZN6BMP39011defaultInitEv+0x2e>

	if (!initAndCheck(OSR,OSR_OSR_P_X16|OSR_OSR_T_X2,10))
 8003144:	2300      	movs	r3, #0
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	230a      	movs	r3, #10
 800314a:	220c      	movs	r2, #12
 800314c:	211c      	movs	r1, #28
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f84d 	bl	80031ee <_ZN6BMP39012initAndCheckEhhhb>
 8003154:	4603      	mov	r3, r0
 8003156:	f083 0301 	eor.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <_ZN6BMP39011defaultInitEv+0x78>
		return false;
 8003160:	2300      	movs	r3, #0
 8003162:	e040      	b.n	80031e6 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!initAndCheck(CONFIG,CONFIG_COEF_3,10))
 8003164:	2300      	movs	r3, #0
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	230a      	movs	r3, #10
 800316a:	2202      	movs	r2, #2
 800316c:	211f      	movs	r1, #31
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f83d 	bl	80031ee <_ZN6BMP39012initAndCheckEhhhb>
 8003174:	4603      	mov	r3, r0
 8003176:	f083 0301 	eor.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <_ZN6BMP39011defaultInitEv+0x98>
		return false;
 8003180:	2300      	movs	r3, #0
 8003182:	e030      	b.n	80031e6 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!initAndCheck(ODR,ODR_ODR_25,10))
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	230a      	movs	r3, #10
 800318a:	2203      	movs	r2, #3
 800318c:	211d      	movs	r1, #29
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f82d 	bl	80031ee <_ZN6BMP39012initAndCheckEhhhb>
 8003194:	4603      	mov	r3, r0
 8003196:	f083 0301 	eor.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <_ZN6BMP39011defaultInitEv+0xb8>
		return false;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e020      	b.n	80031e6 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!initAndCheck(INT_CTRL,INT_CTRL_DRDY_EN|INT_CTRL_INT_LEVEL,10))
 80031a4:	2300      	movs	r3, #0
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	230a      	movs	r3, #10
 80031aa:	2242      	movs	r2, #66	; 0x42
 80031ac:	2119      	movs	r1, #25
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f81d 	bl	80031ee <_ZN6BMP39012initAndCheckEhhhb>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f083 0301 	eor.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <_ZN6BMP39011defaultInitEv+0xd8>
		return false;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e010      	b.n	80031e6 <_ZN6BMP39011defaultInitEv+0xfa>

	if (!initAndCheck(PWR_CTRL,PWR_CTRL_PRESS_EN|PWR_CTRL_TEMP_EN|PWR_CTRL_MODE_NORMAL,10))
 80031c4:	2300      	movs	r3, #0
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	230a      	movs	r3, #10
 80031ca:	2233      	movs	r2, #51	; 0x33
 80031cc:	211b      	movs	r1, #27
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f80d 	bl	80031ee <_ZN6BMP39012initAndCheckEhhhb>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <_ZN6BMP39011defaultInitEv+0xf8>
		return false;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <_ZN6BMP39011defaultInitEv+0xfa>

	return true;
 80031e4:	2301      	movs	r3, #1
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <_ZN6BMP39012initAndCheckEhhhb>:

bool BMP390::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	4608      	mov	r0, r1
 80031f8:	4611      	mov	r1, r2
 80031fa:	461a      	mov	r2, r3
 80031fc:	4603      	mov	r3, r0
 80031fe:	70fb      	strb	r3, [r7, #3]
 8003200:	460b      	mov	r3, r1
 8003202:	70bb      	strb	r3, [r7, #2]
 8003204:	4613      	mov	r3, r2
 8003206:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	429a      	cmp	r2, r3
 8003212:	da21      	bge.n	8003258 <_ZN6BMP39012initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 8003214:	7e3b      	ldrb	r3, [r7, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <_ZN6BMP39012initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	78ba      	ldrb	r2, [r7, #2]
 8003222:	78f9      	ldrb	r1, [r7, #3]
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3

		if (SPI_read(addr)==val)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3304      	adds	r3, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	4611      	mov	r1, r2
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	78bb      	ldrb	r3, [r7, #2]
 800323e:	4293      	cmp	r3, r2
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <_ZN6BMP39012initAndCheckEhhhb+0x62>
			return true;
 800324c:	2301      	movs	r3, #1
 800324e:	e004      	b.n	800325a <_ZN6BMP39012initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3301      	adds	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e7d9      	b.n	800320c <_ZN6BMP39012initAndCheckEhhhb+0x1e>
	}
	return false;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_ZN6BMP3906updateEv>:

void BMP390::update()
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
	uint8_t DATA0=SPI_read(DATA_0);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3304      	adds	r3, #4
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2104      	movs	r1, #4
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
 8003278:	4603      	mov	r3, r0
 800327a:	73fb      	strb	r3, [r7, #15]
	uint8_t DATA1=SPI_read(DATA_1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3304      	adds	r3, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2105      	movs	r1, #5
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
 800328a:	4603      	mov	r3, r0
 800328c:	73bb      	strb	r3, [r7, #14]
	uint8_t DATA2=SPI_read(DATA_2);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3304      	adds	r3, #4
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2106      	movs	r1, #6
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
 800329c:	4603      	mov	r3, r0
 800329e:	737b      	strb	r3, [r7, #13]

	uint8_t TEMP0=SPI_read(DATA_3);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3304      	adds	r3, #4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2107      	movs	r1, #7
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	733b      	strb	r3, [r7, #12]
	uint8_t TEMP1=SPI_read(DATA_4);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3304      	adds	r3, #4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2108      	movs	r1, #8
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	4603      	mov	r3, r0
 80032c2:	72fb      	strb	r3, [r7, #11]
	uint8_t TEMP2=SPI_read(DATA_5);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3304      	adds	r3, #4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2109      	movs	r1, #9
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	72bb      	strb	r3, [r7, #10]

	pressure = ((int32_t)DATA2<<16)|((int16_t)DATA1<<8)|DATA0;
 80032d6:	7b7b      	ldrb	r3, [r7, #13]
 80032d8:	041a      	lsls	r2, r3, #16
 80032da:	7bbb      	ldrb	r3, [r7, #14]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	431a      	orrs	r2, r3
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
	temp = ((int32_t)TEMP2<<16)|((int16_t)TEMP1<<8)|TEMP0;
 80032e8:	7abb      	ldrb	r3, [r7, #10]
 80032ea:	041a      	lsls	r2, r3, #16
 80032ec:	7afb      	ldrb	r3, [r7, #11]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	431a      	orrs	r2, r3
 80032f2:	7b3b      	ldrb	r3, [r7, #12]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	649a      	str	r2, [r3, #72]	; 0x48
}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* BMP390::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3308      	adds	r3, #8
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::BMP_RAW_PRESS)!=senorsList.end())
 8003316:	230f      	movs	r3, #15
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	f107 0310 	add.w	r3, r7, #16
 800331e:	4619      	mov	r1, r3
 8003320:	6838      	ldr	r0, [r7, #0]
 8003322:	f000 f89b 	bl	800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8003326:	4603      	mov	r3, r0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f000 f8af 	bl	800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8003330:	4603      	mov	r3, r0
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	f107 0214 	add.w	r2, r7, #20
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8b2 	bl	80034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01c      	beq.n	8003384 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x80>
	{
		strcat(packet,toCharArray(pressure));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f103 0408 	add.w	r4, r3, #8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1d1a      	adds	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f7ff fe62 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 8003360:	4603      	mov	r3, r0
 8003362:	4619      	mov	r1, r3
 8003364:	4620      	mov	r0, r4
 8003366:	f010 fb11 	bl	801398c <strcat>
		strcat(packet,",");
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f103 0408 	add.w	r4, r3, #8
 8003370:	4620      	mov	r0, r4
 8003372:	f7fc ff2d 	bl	80001d0 <strlen>
 8003376:	4603      	mov	r3, r0
 8003378:	4423      	add	r3, r4
 800337a:	4905      	ldr	r1, [pc, #20]	; (8003390 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x8c>)
 800337c:	461a      	mov	r2, r3
 800337e:	460b      	mov	r3, r1
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3308      	adds	r3, #8
}
 8003388:	4618      	mov	r0, r3
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd90      	pop	{r4, r7, pc}
 8003390:	08013b10 	.word	0x08013b10

08003394 <_ZThn4_N6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	bool defaultInit();
	void update();
	int32_t getPressure();
	int32_t getTemp();
	uint8_t getChipID();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8003394:	f1a0 0004 	sub.w	r0, r0, #4
 8003398:	f7ff bfb4 	b.w	8003304 <_ZN6BMP39019getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

0800339c <_ZN6BMP3909SPI_writeEhh>:
{
	return SPI_read(CHIP_ID);
}

void BMP390::SPI_write(uint8_t reg,uint8_t data)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
 80033a8:	4613      	mov	r3, r2
 80033aa:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_RESET);
 80033ac:	2200      	movs	r2, #0
 80033ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033b2:	480e      	ldr	r0, [pc, #56]	; (80033ec <_ZN6BMP3909SPI_writeEhh+0x50>)
 80033b4:	f004 fcfa 	bl	8007dac <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	spiTxBuff[1] = data;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	78ba      	ldrb	r2, [r7, #2]
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3340      	adds	r3, #64	; 0x40
 80033d0:	2202      	movs	r2, #2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f007 f894 	bl	800a500 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT,BMP_CS_PIN,GPIO_PIN_SET);
 80033d8:	2201      	movs	r2, #1
 80033da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033de:	4803      	ldr	r0, [pc, #12]	; (80033ec <_ZN6BMP3909SPI_writeEhh+0x50>)
 80033e0:	f004 fce4 	bl	8007dac <HAL_GPIO_WritePin>
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40020400 	.word	0x40020400

080033f0 <_ZN6BMP3908SPI_readEh>:

uint8_t BMP390::SPI_read(uint8_t reg)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_RESET);
 80033fc:	2200      	movs	r2, #0
 80033fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003402:	4815      	ldr	r0, [pc, #84]	; (8003458 <_ZN6BMP3908SPI_readEh+0x68>)
 8003404:	f004 fcd2 	bl	8007dac <HAL_GPIO_WritePin>
	spiTxBuff[0]=reg|0x80;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800340e:	b2da      	uxtb	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	spiTxBuff[1]=0x00;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 2);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3340      	adds	r3, #64	; 0x40
 8003426:	2202      	movs	r2, #2
 8003428:	4619      	mov	r1, r3
 800342a:	f007 f869 	bl	800a500 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3342      	adds	r3, #66	; 0x42
 8003436:	2201      	movs	r2, #1
 8003438:	4619      	mov	r1, r3
 800343a:	f007 f917 	bl	800a66c <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(BMP_CS_PORT, BMP_CS_PIN, GPIO_PIN_SET);
 800343e:	2201      	movs	r2, #1
 8003440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003444:	4804      	ldr	r0, [pc, #16]	; (8003458 <_ZN6BMP3908SPI_readEh+0x68>)
 8003446:	f004 fcb1 	bl	8007dac <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40020400 	.word	0x40020400

0800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6839      	ldr	r1, [r7, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f830 	bl	80034d0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>
 8003470:	4603      	mov	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	f107 020c 	add.w	r2, r7, #12
 8003478:	f107 0308 	add.w	r3, r7, #8
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f862 	bl	8003548 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f865 	bl	8003568 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 800349e:	4603      	mov	r3, r0
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe fe05 	bl	80020ea <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 80034e0:	4604      	mov	r4, r0
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f851 	bl	800358a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 80034e8:	4602      	mov	r2, r0
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	4621      	mov	r1, r4
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f857 	bl	80035a2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f883 	bl	8003604 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 80034fe:	4603      	mov	r3, r0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	f107 020c 	add.w	r2, r7, #12
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f88a 	bl	8003626 <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8003512:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8003518:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 800351a:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f896 	bl	800364e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003522:	4603      	mov	r3, r0
 8003524:	461a      	mov	r2, r3
 8003526:	6839      	ldr	r1, [r7, #0]
 8003528:	4620      	mov	r0, r4
 800352a:	f000 f89c 	bl	8003666 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f865 	bl	8003604 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 800353a:	4603      	mov	r3, r0
 800353c:	e000      	b.n	8003540 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x70>
 800353e:	68bb      	ldr	r3, [r7, #8]
    }
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}

08003548 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	1d1a      	adds	r2, r3, #4
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f888 	bl	8003690 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80035a2:	b590      	push	{r4, r7, lr}
 80035a4:	b087      	sub	sp, #28
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01b      	beq.n	80035ee <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80035b6:	68fc      	ldr	r4, [r7, #12]
 80035b8:	68b8      	ldr	r0, [r7, #8]
 80035ba:	f000 f878 	bl	80036ae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 80035be:	4603      	mov	r3, r0
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	4619      	mov	r1, r3
 80035c4:	4620      	mov	r0, r4
 80035c6:	f000 f84e 	bl	8003666 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f083 0301 	eor.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	607b      	str	r3, [r7, #4]
 80035da:	68b8      	ldr	r0, [r7, #8]
 80035dc:	f7fe fde6 	bl	80021ac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 80035e0:	60b8      	str	r0, [r7, #8]
 80035e2:	e7e5      	b.n	80035b0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
	  __x = _S_right(__x);
 80035e4:	68b8      	ldr	r0, [r7, #8]
 80035e6:	f7fe fdd5 	bl	8002194 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 80035ea:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80035ec:	e7e0      	b.n	80035b0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS1_EPSt18_Rb_tree_node_baseRKS1_+0xe>
      return iterator(__y);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f86d 	bl	80036d4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 80035fa:	697b      	ldr	r3, [r7, #20]
    }
 80035fc:	4618      	mov	r0, r3
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd90      	pop	{r4, r7, pc}

08003604 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	1d1a      	adds	r2, r3, #4
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f85c 	bl	80036d4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f829 	bl	80036ae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 800365c:	4603      	mov	r3, r0
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	bfb4      	ite	lt
 800367e:	2301      	movlt	r3, #1
 8003680:	2300      	movge	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>:
      _S_key(_Const_Link_type __x)
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f81b 	bl	80036f2 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 80036bc:	4602      	mov	r2, r0
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f822 	bl	800370e <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 80036ca:	4603      	mov	r3, r0
      }
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <_ZNKSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>:
      _M_valptr() const
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3310      	adds	r3, #16
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f811 	bl	8003726 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>
 8003704:	4603      	mov	r3, r0
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>:
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
      { return __x; }
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f805 	bl	800373e <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>
 8003734:	4603      	mov	r3, r0
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <_ZNK9__gnu_cxx16__aligned_membufIN4HC0521SENSOR_DATA_PARAMETEREE7_M_addrEv>:
      _M_addr() const noexcept
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <_ZN17BatteryManagement3runEv>:
//#include "../BatteryManagement_lib/BaterryManagement.hpp"

#include "BatteryManagement.hpp"

void BatteryManagement::run()
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af02      	add	r7, sp, #8
 800375a:	6078      	str	r0, [r7, #4]
	tick_counter++;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60da      	str	r2, [r3, #12]
	toPercentage();
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f826 	bl	80037b8 <_ZN17BatteryManagement12toPercentageEv>

	if (tick_counter>=frequency_tick)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	8912      	ldrh	r2, [r2, #8]
 8003774:	4293      	cmp	r3, r2
 8003776:	d319      	bcc.n	80037ac <_ZN17BatteryManagement3runEv+0x58>
	{
		HAL_ADC_Start_DMA(adc_port, &batteryVal,1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a18      	ldr	r0, [r3, #32]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3310      	adds	r3, #16
 8003780:	2201      	movs	r2, #1
 8003782:	4619      	mov	r1, r3
 8003784:	f003 f8c4 	bl	8006910 <HAL_ADC_Start_DMA>

		if (batteryVal<=BATERRY_MIN_3V2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	8852      	ldrh	r2, [r2, #2]
 8003790:	4293      	cmp	r3, r2
 8003792:	d808      	bhi.n	80037a6 <_ZN17BatteryManagement3runEv+0x52>
		{
			buzz->beep(100,1,1,100);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69d8      	ldr	r0, [r3, #28]
 8003798:	2364      	movs	r3, #100	; 0x64
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2301      	movs	r3, #1
 800379e:	2201      	movs	r2, #1
 80037a0:	2164      	movs	r1, #100	; 0x64
 80037a2:	f000 f8f4 	bl	800398e <_ZN6Buzzer4beepEiiii>
		}

		tick_counter = 0;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]
	}
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	0000      	movs	r0, r0
	...

080037b8 <_ZN17BatteryManagement12toPercentageEv>:

void BatteryManagement::toPercentage()
{
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	if(batteryVal>BATERRY_MAX_4V2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	8812      	ldrh	r2, [r2, #0]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d906      	bls.n	80037da <_ZN17BatteryManagement12toPercentageEv+0x22>
	{
		batteryPercentage = 100;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a50      	ldr	r2, [pc, #320]	; (8003910 <_ZN17BatteryManagement12toPercentageEv+0x158>)
 80037d0:	615a      	str	r2, [r3, #20]
		batteryVoltage = 4.2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a4f      	ldr	r2, [pc, #316]	; (8003914 <_ZN17BatteryManagement12toPercentageEv+0x15c>)
 80037d6:	619a      	str	r2, [r3, #24]
	else
	{
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
	}
}
 80037d8:	e081      	b.n	80038de <_ZN17BatteryManagement12toPercentageEv+0x126>
	else if(batteryVal<BATERRY_MIN_3V2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	8852      	ldrh	r2, [r2, #2]
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d207      	bcs.n	80037f6 <_ZN17BatteryManagement12toPercentageEv+0x3e>
		batteryPercentage = 0;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	615a      	str	r2, [r3, #20]
		batteryVoltage = 3.2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a49      	ldr	r2, [pc, #292]	; (8003918 <_ZN17BatteryManagement12toPercentageEv+0x160>)
 80037f2:	619a      	str	r2, [r3, #24]
}
 80037f4:	e073      	b.n	80038de <_ZN17BatteryManagement12toPercentageEv+0x126>
		batteryVoltage = 3.2+(450.0-(BATERRY_MAX_4V2-batteryVal))/(BATERRY_MAX_4V2-BATERRY_MIN_3V2);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fe2e 	bl	8000464 <__aeabi_ui2d>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	a136      	add	r1, pc, #216	; (adr r1, 80038e8 <_ZN17BatteryManagement12toPercentageEv+0x130>)
 800380e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003812:	f7fc fce9 	bl	80001e8 <__aeabi_dsub>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4614      	mov	r4, r2
 800381c:	461d      	mov	r5, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	885b      	ldrh	r3, [r3, #2]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	4618      	mov	r0, r3
 800382c:	f7fc fe2a 	bl	8000484 <__aeabi_i2d>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4620      	mov	r0, r4
 8003836:	4629      	mov	r1, r5
 8003838:	f7fc ffb8 	bl	80007ac <__aeabi_ddiv>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	a32a      	add	r3, pc, #168	; (adr r3, 80038f0 <_ZN17BatteryManagement12toPercentageEv+0x138>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f7fc fccf 	bl	80001ec <__adddf3>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f7fd f92f 	bl	8000ab8 <__aeabi_d2f>
 800385a:	4602      	mov	r2, r0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	619a      	str	r2, [r3, #24]
		batteryPercentage = 123.0 - 123.0/pow((1.0 + pow(batteryVoltage/3.7,80)),0.165);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fe1f 	bl	80004a8 <__aeabi_f2d>
 800386a:	a323      	add	r3, pc, #140	; (adr r3, 80038f8 <_ZN17BatteryManagement12toPercentageEv+0x140>)
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f7fc ff9c 	bl	80007ac <__aeabi_ddiv>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	ec43 2b17 	vmov	d7, r2, r3
 800387c:	2050      	movs	r0, #80	; 0x50
 800387e:	eeb0 0a47 	vmov.f32	s0, s14
 8003882:	eef0 0a67 	vmov.f32	s1, s15
 8003886:	f000 f866 	bl	8003956 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800388a:	ec51 0b10 	vmov	r0, r1, d0
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	4b22      	ldr	r3, [pc, #136]	; (800391c <_ZN17BatteryManagement12toPercentageEv+0x164>)
 8003894:	f7fc fcaa 	bl	80001ec <__adddf3>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	ec43 2b17 	vmov	d7, r2, r3
 80038a0:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003900 <_ZN17BatteryManagement12toPercentageEv+0x148>
 80038a4:	eeb0 0a47 	vmov.f32	s0, s14
 80038a8:	eef0 0a67 	vmov.f32	s1, s15
 80038ac:	f00e fe0c 	bl	80124c8 <pow>
 80038b0:	ec53 2b10 	vmov	r2, r3, d0
 80038b4:	a114      	add	r1, pc, #80	; (adr r1, 8003908 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 80038b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038ba:	f7fc ff77 	bl	80007ac <__aeabi_ddiv>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	a111      	add	r1, pc, #68	; (adr r1, 8003908 <_ZN17BatteryManagement12toPercentageEv+0x150>)
 80038c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038c8:	f7fc fc8e 	bl	80001e8 <__aeabi_dsub>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7fd f8f0 	bl	8000ab8 <__aeabi_d2f>
 80038d8:	4602      	mov	r2, r0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	615a      	str	r2, [r3, #20]
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bdb0      	pop	{r4, r5, r7, pc}
 80038e6:	bf00      	nop
 80038e8:	00000000 	.word	0x00000000
 80038ec:	407c2000 	.word	0x407c2000
 80038f0:	9999999a 	.word	0x9999999a
 80038f4:	40099999 	.word	0x40099999
 80038f8:	9999999a 	.word	0x9999999a
 80038fc:	400d9999 	.word	0x400d9999
 8003900:	51eb851f 	.word	0x51eb851f
 8003904:	3fc51eb8 	.word	0x3fc51eb8
 8003908:	00000000 	.word	0x00000000
 800390c:	405ec000 	.word	0x405ec000
 8003910:	42c80000 	.word	0x42c80000
 8003914:	40866666 	.word	0x40866666
 8003918:	404ccccd 	.word	0x404ccccd
 800391c:	3ff00000 	.word	0x3ff00000

08003920 <_ZN17BatteryManagement8msToTickEt>:
{
	return batteryPercentage;
}

uint16_t BatteryManagement::msToTick(uint16_t ms)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 800392c:	887b      	ldrh	r3, [r7, #2]
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	ed93 7a01 	vldr	s14, [r3, #4]
 800393c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003944:	ee17 3a90 	vmov	r3, s15
 8003948:	b29b      	uxth	r3, r3
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	ed87 0b02 	vstr	d0, [r7, #8]
 8003960:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fc fd8e 	bl	8000484 <__aeabi_i2d>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	ec43 2b11 	vmov	d1, r2, r3
 8003970:	ed97 0b02 	vldr	d0, [r7, #8]
 8003974:	f00e fda8 	bl	80124c8 <pow>
 8003978:	eeb0 7a40 	vmov.f32	s14, s0
 800397c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8003980:	eeb0 0a47 	vmov.f32	s0, s14
 8003984:	eef0 0a67 	vmov.f32	s1, s15
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <_ZN6Buzzer4beepEiiii>:
 */

#include "Buzzer.hpp"

bool Buzzer::beep(int duration_ms,int freq_ms,int repetition_count,int pause_ms)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
	if (!busy)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	7d9b      	ldrb	r3, [r3, #22]
 80039a0:	f083 0301 	eor.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d02d      	beq.n	8003a06 <_ZN6Buzzer4beepEiiii+0x78>
	{
		busy = true;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	759a      	strb	r2, [r3, #22]

		pause_tick = msToTick(pause_ms);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f874 	bl	8003aa4 <_ZN6Buzzer8msToTickEt>
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	81da      	strh	r2, [r3, #14]
		counter_end = msToTick((duration_ms+pause_ms)*(repetition_count));
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	4413      	add	r3, r2
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	fb12 f303 	smulbb	r3, r2, r3
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f863 	bl	8003aa4 <_ZN6Buzzer8msToTickEt>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	825a      	strh	r2, [r3, #18]
		freq_tick = msToTick(freq_ms);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4619      	mov	r1, r3
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f859 	bl	8003aa4 <_ZN6Buzzer8msToTickEt>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	819a      	strh	r2, [r3, #12]

		Buzz_on();
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f86d 	bl	8003ada <_ZN6Buzzer7Buzz_onEv>

		return busy;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	7d9b      	ldrb	r3, [r3, #22]
 8003a04:	e001      	b.n	8003a0a <_ZN6Buzzer4beepEiiii+0x7c>
	}

	return busy;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	7d9b      	ldrb	r3, [r3, #22]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_ZN6Buzzer3runEv>:

void Buzzer::run()
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	if (busy)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	7d9b      	ldrb	r3, [r3, #22]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03c      	beq.n	8003a9c <_ZN6Buzzer3runEv+0x8a>
	{
		counter_start++;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8a1b      	ldrh	r3, [r3, #16]
 8003a26:	3301      	adds	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	821a      	strh	r2, [r3, #16]

		if (!((counter_start/pause_tick)%2))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8a1a      	ldrh	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	89db      	ldrh	r3, [r3, #14]
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d116      	bne.n	8003a72 <_ZN6Buzzer3runEv+0x60>
		{
			if (freq_tick!=0)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	899b      	ldrh	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <_ZN6Buzzer3runEv+0x66>
			{
				if ((counter_start/freq_tick)%2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8a1a      	ldrh	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	899b      	ldrh	r3, [r3, #12]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <_ZN6Buzzer3runEv+0x58>
					Buzz_on();
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f839 	bl	8003ada <_ZN6Buzzer7Buzz_onEv>
 8003a68:	e006      	b.n	8003a78 <_ZN6Buzzer3runEv+0x66>
				else
					Buzz_off();
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f840 	bl	8003af0 <_ZN6Buzzer8Buzz_offEv>
 8003a70:	e002      	b.n	8003a78 <_ZN6Buzzer3runEv+0x66>
			}
		} else
			Buzz_off();
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f83c 	bl	8003af0 <_ZN6Buzzer8Buzz_offEv>

		if (counter_start>=counter_end)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8a1a      	ldrh	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8a5b      	ldrh	r3, [r3, #18]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d30b      	bcc.n	8003a9c <_ZN6Buzzer3runEv+0x8a>
		{
			busy = false;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	759a      	strb	r2, [r3, #22]
			counter_start=0;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	821a      	strh	r2, [r3, #16]
			freq_tick = 0;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	819a      	strh	r2, [r3, #12]
			Buzz_off();
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f82a 	bl	8003af0 <_ZN6Buzzer8Buzz_offEv>
		}
	}
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <_ZN6Buzzer8msToTickEt>:
{
	return busy;
}

uint16_t Buzzer::msToTick(uint16_t ms)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
	return ms/TIM_FREQ;
 8003ab0:	887b      	ldrh	r3, [r7, #2]
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac8:	ee17 3a90 	vmov	r3, s15
 8003acc:	b29b      	uxth	r3, r3
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <_ZN6Buzzer7Buzz_onEv>:

void Buzzer::Buzz_on()
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
#if DISABLE_ALL_BEEPS == 5
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
#endif
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <_ZN6Buzzer8Buzz_offEv>:

void Buzzer::Buzz_off()
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8003af8:	2200      	movs	r2, #0
 8003afa:	2110      	movs	r1, #16
 8003afc:	4803      	ldr	r0, [pc, #12]	; (8003b0c <_ZN6Buzzer8Buzz_offEv+0x1c>)
 8003afe:	f004 f955 	bl	8007dac <HAL_GPIO_WritePin>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40020000 	.word	0x40020000

08003b10 <_ZN7Timeout19resetTimeoutCounterEv>:
private:
	Status status = Status::OK;
	uint8_t timeout_counter=0;
	uint8_t timeout_value=0;
public:
	void resetTimeoutCounter()
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	{
		timeout_counter=0;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	705a      	strb	r2, [r3, #1]
	}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <_ZN7Timeout15setTimeoutValueEh>:
	uint8_t* getTimeoutCounter()
	{
		return &timeout_counter;
	}

	void setTimeoutValue(uint8_t value)
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	70fb      	strb	r3, [r7, #3]
	{
		timeout_value = value;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	709a      	strb	r2, [r3, #2]
	}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <_ZN7TimeoutC1Ev>:
class Timeout
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	705a      	strb	r2, [r3, #1]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	709a      	strb	r2, [r3, #2]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <_ZN7FrSkyRXC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefP6Buzzerh>:
 *      Author: DragosDarie
 */

#include "FrSkyRX.h"

FrSkyRX::FrSkyRX(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,Buzzer *buzz,uint8_t timeout)
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ffe1 	bl	8003b48 <_ZN7TimeoutC1Ev>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2219      	movs	r2, #25
 8003b8a:	741a      	strb	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
{
	FrSkyRX::uart_port = uart_port;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	605a      	str	r2, [r3, #4]
	FrSkyRX::uart_port_dma=uart_port_dma;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
	FrSkyRX::buzz=buzz;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	60da      	str	r2, [r3, #12]

	setTimeoutValue(timeout);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	7e3a      	ldrb	r2, [r7, #24]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ffbc 	bl	8003b2a <_ZN7Timeout15setTimeoutValueEh>
}
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_ZN7FrSkyRX5beginEv>:

void FrSkyRX::begin()
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_port, rx_frame, frame_length);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6858      	ldr	r0, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f103 0111 	add.w	r1, r3, #17
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7c1b      	ldrb	r3, [r3, #16]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f008 facb 	bl	800c170 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_ZN7FrSkyRX6updateEv>:

void FrSkyRX::update()
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	6078      	str	r0, [r7, #4]
    channels[0]  = static_cast<int16_t>(rx_frame[1] | rx_frame[2] << 8 & 0x07FF);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	7c9b      	ldrb	r3, [r3, #18]
 8003bee:	b21a      	sxth	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	7cdb      	ldrb	r3, [r3, #19]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	b21b      	sxth	r3, r3
 8003bf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    channels[1]  = static_cast<int16_t>(rx_frame[2] >> 3 | rx_frame[3] << 5 & 0x07FF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	7cdb      	ldrb	r3, [r3, #19]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	b21a      	sxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	7d1b      	ldrb	r3, [r3, #20]
 8003c16:	015b      	lsls	r3, r3, #5
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c1e:	b21b      	sxth	r3, r3
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b21b      	sxth	r3, r3
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	859a      	strh	r2, [r3, #44]	; 0x2c
    channels[2]  = static_cast<int16_t>(rx_frame[3] >> 6 | rx_frame[4] << 2 | rx_frame[5] << 10 & 0x07FF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7d1b      	ldrb	r3, [r3, #20]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	b21a      	sxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	7d5b      	ldrb	r3, [r3, #21]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	b21b      	sxth	r3, r3
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	7d9b      	ldrb	r3, [r3, #22]
 8003c44:	029b      	lsls	r3, r3, #10
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	b21b      	sxth	r3, r3
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	85da      	strh	r2, [r3, #46]	; 0x2e
    channels[3]  = static_cast<int16_t>(rx_frame[5] >> 1 | rx_frame[6] << 7 & 0x07FF);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	7d9b      	ldrb	r3, [r3, #22]
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	b21a      	sxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	7ddb      	ldrb	r3, [r3, #23]
 8003c66:	01db      	lsls	r3, r3, #7
 8003c68:	b21b      	sxth	r3, r3
 8003c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c6e:	b21b      	sxth	r3, r3
 8003c70:	4313      	orrs	r3, r2
 8003c72:	b21b      	sxth	r3, r3
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	861a      	strh	r2, [r3, #48]	; 0x30
    channels[4]  = static_cast<int16_t>(rx_frame[6] >> 4 | rx_frame[7] << 4 & 0x07FF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	7ddb      	ldrb	r3, [r3, #23]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	b21a      	sxth	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7e1b      	ldrb	r3, [r3, #24]
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	b21b      	sxth	r3, r3
 8003c8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c90:	b21b      	sxth	r3, r3
 8003c92:	4313      	orrs	r3, r2
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	865a      	strh	r2, [r3, #50]	; 0x32
    channels[5]  = static_cast<int16_t>(rx_frame[7] >> 7 | rx_frame[8] << 1 | rx_frame[9] << 9 & 0x07FF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7e1b      	ldrb	r3, [r3, #24]
 8003ca0:	09db      	lsrs	r3, r3, #7
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	b21a      	sxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7e5b      	ldrb	r3, [r3, #25]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	b21a      	sxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	7e9b      	ldrb	r3, [r3, #26]
 8003cb6:	025b      	lsls	r3, r3, #9
 8003cb8:	b21b      	sxth	r3, r3
 8003cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cbe:	b21b      	sxth	r3, r3
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b21b      	sxth	r3, r3
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	869a      	strh	r2, [r3, #52]	; 0x34
    channels[6]  = static_cast<int16_t>(rx_frame[9] >> 2 | rx_frame[10] << 6 & 0x07FF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7e9b      	ldrb	r3, [r3, #26]
 8003cce:	089b      	lsrs	r3, r3, #2
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	b21a      	sxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7edb      	ldrb	r3, [r3, #27]
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	b21b      	sxth	r3, r3
 8003cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ce0:	b21b      	sxth	r3, r3
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b21b      	sxth	r3, r3
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	86da      	strh	r2, [r3, #54]	; 0x36
    channels[7]  = static_cast<int16_t>(rx_frame[10] >> 5 | rx_frame[11] << 3 & 0x07FF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7edb      	ldrb	r3, [r3, #27]
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	b21a      	sxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7f1b      	ldrb	r3, [r3, #28]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	b21b      	sxth	r3, r3
 8003cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	4313      	orrs	r3, r2
 8003d06:	b21b      	sxth	r3, r3
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	871a      	strh	r2, [r3, #56]	; 0x38

    channels[8]  = static_cast<int16_t>(rx_frame[12] | rx_frame[13] << 8 & 0x07FF);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7f5b      	ldrb	r3, [r3, #29]
 8003d12:	b21a      	sxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7f9b      	ldrb	r3, [r3, #30]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d20:	b21b      	sxth	r3, r3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	b21b      	sxth	r3, r3
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	875a      	strh	r2, [r3, #58]	; 0x3a
    channels[9]  = static_cast<int16_t>(rx_frame[13] >> 3 | rx_frame[14] << 5 & 0x07FF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7f9b      	ldrb	r3, [r3, #30]
 8003d30:	08db      	lsrs	r3, r3, #3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	b21a      	sxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7fdb      	ldrb	r3, [r3, #31]
 8003d3a:	015b      	lsls	r3, r3, #5
 8003d3c:	b21b      	sxth	r3, r3
 8003d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	879a      	strh	r2, [r3, #60]	; 0x3c
    channels[10] = static_cast<int16_t>(rx_frame[14] >> 6 | rx_frame[15] << 2 | rx_frame[16] << 10 & 0x07FF);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7fdb      	ldrb	r3, [r3, #31]
 8003d52:	099b      	lsrs	r3, r3, #6
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	b21a      	sxth	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	b21b      	sxth	r3, r3
 8003d62:	4313      	orrs	r3, r2
 8003d64:	b21a      	sxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d6c:	029b      	lsls	r3, r3, #10
 8003d6e:	b21b      	sxth	r3, r3
 8003d70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    channels[11] = static_cast<int16_t>(rx_frame[16] >> 1 | rx_frame[17] << 7 & 0x07FF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	b21a      	sxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003d92:	01db      	lsls	r3, r3, #7
 8003d94:	b21b      	sxth	r3, r3
 8003d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d9a:	b21b      	sxth	r3, r3
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	b21b      	sxth	r3, r3
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    channels[12] = static_cast<int16_t>(rx_frame[17] >> 4 | rx_frame[18] << 4 & 0x07FF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	b21a      	sxth	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	b21b      	sxth	r3, r3
 8003dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dc2:	b21b      	sxth	r3, r3
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b21b      	sxth	r3, r3
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    channels[13] = static_cast<int16_t>(rx_frame[18] >> 7 | rx_frame[19] << 1 | rx_frame[20] << 9 & 0x07FF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003dd6:	09db      	lsrs	r3, r3, #7
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	b21a      	sxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	b21b      	sxth	r3, r3
 8003de6:	4313      	orrs	r3, r2
 8003de8:	b21a      	sxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003df0:	025b      	lsls	r3, r3, #9
 8003df2:	b21b      	sxth	r3, r3
 8003df4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df8:	b21b      	sxth	r3, r3
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	b21b      	sxth	r3, r3
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    channels[14] = static_cast<int16_t>(rx_frame[20] >> 2 | rx_frame[21] << 6 & 0x07FF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	b21a      	sxth	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b21b      	sxth	r3, r3
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    channels[15] = static_cast<int16_t>(rx_frame[21] >> 5 | rx_frame[22] << 3 & 0x07FF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	b21a      	sxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	throttle = channels[2];
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	roll = channels[0];
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	pitch = channels[1];
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	yaw = channels[3];
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	if (channels[4]<1000)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e86:	d204      	bcs.n	8003e92 <_ZN7FrSkyRX6updateEv+0x2b0>
		lb=0;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003e90:	e003      	b.n	8003e9a <_ZN7FrSkyRX6updateEv+0x2b8>
	else
		lb=1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	if (channels[7]<1000)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ea2:	d204      	bcs.n	8003eae <_ZN7FrSkyRX6updateEv+0x2cc>
		rb=0;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8003eac:	e003      	b.n	8003eb6 <_ZN7FrSkyRX6updateEv+0x2d4>
	else
		rb=1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	if (channels[5]<500)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003eba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ebe:	d204      	bcs.n	8003eca <_ZN7FrSkyRX6updateEv+0x2e8>
		lu = 0;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8003ec8:	e00e      	b.n	8003ee8 <_ZN7FrSkyRX6updateEv+0x306>
	else if(channels[5]<1500)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003ece:	f240 52db 	movw	r2, #1499	; 0x5db
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d804      	bhi.n	8003ee0 <_ZN7FrSkyRX6updateEv+0x2fe>
		lu = 1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8003ede:	e003      	b.n	8003ee8 <_ZN7FrSkyRX6updateEv+0x306>
	else
		lu = 2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	if (channels[6]<500)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ef0:	d204      	bcs.n	8003efc <_ZN7FrSkyRX6updateEv+0x31a>
		ru = 0;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8003efa:	e00e      	b.n	8003f1a <_ZN7FrSkyRX6updateEv+0x338>
	else if(channels[6]<1500)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f00:	f240 52db 	movw	r2, #1499	; 0x5db
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d804      	bhi.n	8003f12 <_ZN7FrSkyRX6updateEv+0x330>
		ru = 1;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8003f10:	e003      	b.n	8003f1a <_ZN7FrSkyRX6updateEv+0x338>
	else
		ru = 2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	if (rx_ok == 0 && throttle > 1500)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d113      	bne.n	8003f4c <_ZN7FrSkyRX6updateEv+0x36a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8003f2a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d90c      	bls.n	8003f4c <_ZN7FrSkyRX6updateEv+0x36a>
	{
		rx_ok = 1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		buzz->beep(100,1,1,100);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68d8      	ldr	r0, [r3, #12]
 8003f3e:	2364      	movs	r3, #100	; 0x64
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2301      	movs	r3, #1
 8003f44:	2201      	movs	r2, #1
 8003f46:	2164      	movs	r1, #100	; 0x64
 8003f48:	f7ff fd21 	bl	800398e <_ZN6Buzzer4beepEiiii>
	}

	if (rx_ok == 1 && throttle < 200)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d111      	bne.n	8003f7a <_ZN7FrSkyRX6updateEv+0x398>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8003f5c:	2bc7      	cmp	r3, #199	; 0xc7
 8003f5e:	d80c      	bhi.n	8003f7a <_ZN7FrSkyRX6updateEv+0x398>
	{
		rx_ok = 2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		buzz->beep(100,1,3,100);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68d8      	ldr	r0, [r3, #12]
 8003f6c:	2364      	movs	r3, #100	; 0x64
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2303      	movs	r3, #3
 8003f72:	2201      	movs	r2, #1
 8003f74:	2164      	movs	r1, #100	; 0x64
 8003f76:	f7ff fd0a 	bl	800398e <_ZN6Buzzer4beepEiiii>
	}
	resetTimeoutCounter();
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fdc7 	bl	8003b10 <_ZN7Timeout19resetTimeoutCounterEv>

	HAL_UARTEx_ReceiveToIdle_DMA(uart_port, rx_frame, frame_length);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6858      	ldr	r0, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f103 0111 	add.w	r1, r3, #17
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	7c1b      	ldrb	r3, [r3, #16]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	f008 f8ec 	bl	800c170 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(uart_port_dma, DMA_IT_HT);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0208 	bic.w	r2, r2, #8
 8003faa:	601a      	str	r2, [r3, #0]
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f805 	bl	8003fea <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <_ZNSt15_Rb_tree_header8_M_resetEv>:
    _M_reset()
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
      _M_header._M_parent = 0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	611a      	str	r2, [r3, #16]
    }
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>:
      _Rb_tree() = default;
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f8df 	bl	80041e4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>:
      set() = default;
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ffeb 	bl	8004016 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f8da 	bl	800420e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>:
      vector() = default;
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ffeb 	bl	800404a <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EEC1Ev>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <_ZN4HC05C1EP20__UART_HandleTypeDef>:
 *      Author: DragosDarie
 */

#include "HC05.h"

HC05::HC05(UART_HandleTypeDef *uart_port)
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ffd0 	bl	8004030 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EEC1Ev>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	331c      	adds	r3, #28
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ffe5 	bl	8004064 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEC1Ev>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3328      	adds	r3, #40	; 0x28
 800409e:	2264      	movs	r2, #100	; 0x64
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f00f fb36 	bl	8013714 <memset>
{
	HC05::uart_port = uart_port;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	619a      	str	r2, [r3, #24]
}
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <_ZN4HC054sendEv>:

void HC05::send()
{
 80040b8:	b5b0      	push	{r4, r5, r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)USART1_TxBuffer, strlen(USART1_TxBuffer));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699c      	ldr	r4, [r3, #24]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3328      	adds	r3, #40	; 0x28
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc f87e 	bl	80001d0 <strlen>
 80040d4:	4603      	mov	r3, r0
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	4629      	mov	r1, r5
 80040dc:	4620      	mov	r0, r4
 80040de:	f007 ffc9 	bl	800c074 <HAL_UART_Transmit_DMA>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bdb0      	pop	{r4, r5, r7, pc}

080040ea <_ZN4HC054sendEPKch>:

void HC05::send(const char *data,uint8_t len)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit_DMA(uart_port, (uint8_t*)data, len);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	79fa      	ldrb	r2, [r7, #7]
 80040fe:	b292      	uxth	r2, r2
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f007 ffb6 	bl	800c074 <HAL_UART_Transmit_DMA>
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <_ZN4HC059addSensorEP15PrintableSensor>:

void HC05::addSensor(PrintableSensor* sen)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
	senList.push_back(sen);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	331c      	adds	r3, #28
 800411e:	463a      	mov	r2, r7
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f883 	bl	800422e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <_ZN4HC0519printfSensorsValuesEv>:

void HC05::printfSensorsValues()
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	strcpy(USART1_TxBuffer,"");
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3328      	adds	r3, #40	; 0x28
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]

	for (int i=0;i<(int)senList.size();i++)
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	331c      	adds	r3, #28
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f895 	bl	8004278 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 800414e:	4603      	mov	r3, r0
 8004150:	461a      	mov	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4293      	cmp	r3, r2
 8004156:	bfb4      	ite	lt
 8004158:	2301      	movlt	r3, #1
 800415a:	2300      	movge	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d019      	beq.n	8004196 <_ZN4HC0519printfSensorsValuesEv+0x66>
	{
		strcat(USART1_TxBuffer,senList[i]->getSensorValues_str(senorsList));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	331c      	adds	r3, #28
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f891 	bl	8004298 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>
 8004176:	4603      	mov	r3, r0
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	4790      	blx	r2
 8004184:	4603      	mov	r3, r0
 8004186:	4619      	mov	r1, r3
 8004188:	4620      	mov	r0, r4
 800418a:	f00f fbff 	bl	801398c <strcat>
	for (int i=0;i<(int)senList.size();i++)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3301      	adds	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e7d6      	b.n	8004144 <_ZN4HC0519printfSensorsValuesEv+0x14>
	}

	strcat(USART1_TxBuffer,"\n\r");
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800419c:	4620      	mov	r0, r4
 800419e:	f7fc f817 	bl	80001d0 <strlen>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4423      	add	r3, r4
 80041a6:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <_ZN4HC0519printfSensorsValuesEv+0x90>)
 80041a8:	8811      	ldrh	r1, [r2, #0]
 80041aa:	7892      	ldrb	r2, [r2, #2]
 80041ac:	8019      	strh	r1, [r3, #0]
 80041ae:	709a      	strb	r2, [r3, #2]

	send();
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff81 	bl	80040b8 <_ZN4HC054sendEv>
}
 80041b6:	bf00      	nop
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd90      	pop	{r4, r7, pc}
 80041be:	bf00      	nop
 80041c0:	08013b14 	.word	0x08013b14

080041c4 <_ZN4HC0518addSensorParameterENS_21SENSOR_DATA_PARAMETERE>:

void HC05::addSensorParameter(HC05::SENSOR_DATA_PARAMETER sen)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	this->senorsList.insert(sen);
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	463a      	mov	r2, r7
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f86e 	bl	80042b8 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f87d 	bl	80042ec <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f885 	bl	8004304 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fee4 	bl	8003fcc <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f87f 	bl	800431a <_ZNSaIP15PrintableSensorEC1Ev>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f887 	bl	8004332 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	d00c      	beq.n	800425e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	f000 f884 	bl	800435a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800425c:	e008      	b.n	8004270 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f88e 	bl	8004380 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>
 8004264:	4603      	mov	r3, r0
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8b0 	bl	80043d0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	109b      	asrs	r3, r3, #2
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <_ZNSt6vectorIP15PrintableSensorSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
      }
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE6insertERKS1_>:
      insert(const value_type& __x)
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
	  _M_t._M_insert_unique(__x);
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	f107 0310 	add.w	r3, r7, #16
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f93b 	bl	8004548 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>
	return std::pair<iterator, bool>(__p.first, __p.second);
 80042d2:	f107 0310 	add.w	r3, r7, #16
 80042d6:	1d1a      	adds	r2, r3, #4
 80042d8:	f107 0310 	add.w	r3, r7, #16
 80042dc:	4619      	mov	r1, r3
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f981 	bl	80045e6 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>
      }
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_ZNSaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f991 	bl	800461c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <_ZNSt20_Rb_tree_key_compareISt4lessIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      _Rb_tree_key_compare()
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
      { }
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <_ZNSaIP15PrintableSensorEC1Ev>:
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f985 	bl	8004632 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]
	{ }
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f96e 	bl	8004648 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f973 	bl	800465e <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	f107 030c 	add.w	r3, r7, #12
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f979 	bl	800468a <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f805 	bl	80043b8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80043ae:	4603      	mov	r3, r0
      }
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80043c0:	2301      	movs	r3, #1
      }
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80043d0:	b5b0      	push	{r4, r5, r7, lr}
 80043d2:	b08c      	sub	sp, #48	; 0x30
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80043dc:	4a59      	ldr	r2, [pc, #356]	; (8004544 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 80043de:	2101      	movs	r1, #1
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f962 	bl	80046aa <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>
 80043e6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f99f 	bl	8004738 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>
 80043fa:	4603      	mov	r3, r0
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	f107 0214 	add.w	r2, r7, #20
 8004402:	f107 0308 	add.w	r3, r7, #8
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f000 f9a5 	bl	8004758 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800440e:	4603      	mov	r3, r0
 8004410:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f9b3 	bl	8004782 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>
 800441c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8004422:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	18d5      	adds	r5, r2, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f90b 	bl	8004648 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 8004432:	4603      	mov	r3, r0
 8004434:	461a      	mov	r2, r3
 8004436:	4629      	mov	r1, r5
 8004438:	4620      	mov	r0, r4
 800443a:	f7ff ff8e 	bl	800435a <_ZNSt16allocator_traitsISaIP15PrintableSensorEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800443e:	2300      	movs	r3, #0
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8004442:	f7ff ffae 	bl	80043a2 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d027      	beq.n	800449c <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800444c:	f107 0308 	add.w	r3, r7, #8
 8004450:	4618      	mov	r0, r3
 8004452:	f000 f9be 	bl	80047d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8004456:	4603      	mov	r3, r0
 8004458:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fd fe75 	bl	800214c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8004462:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4621      	mov	r1, r4
 8004468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800446a:	f000 f99e 	bl	80047aa <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800446e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	3304      	adds	r3, #4
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8004476:	f107 0308 	add.w	r3, r7, #8
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f9a9 	bl	80047d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8004480:	4603      	mov	r3, r0
 8004482:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd fe60 	bl	800214c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800448c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800448e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004490:	6a39      	ldr	r1, [r7, #32]
 8004492:	4620      	mov	r0, r4
 8004494:	f000 f989 	bl	80047aa <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8004498:	62f8      	str	r0, [r7, #44]	; 0x2c
 800449a:	e026      	b.n	80044ea <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f996 	bl	80047d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80044a6:	4603      	mov	r3, r0
 80044a8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fd fe4d 	bl	800214c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80044b2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4621      	mov	r1, r4
 80044b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044ba:	f000 f995 	bl	80047e8 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 80044be:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	3304      	adds	r3, #4
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80044c6:	f107 0308 	add.w	r3, r7, #8
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f981 	bl	80047d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80044d0:	4603      	mov	r3, r0
 80044d2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd fe38 	bl	800214c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80044dc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80044de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e0:	6a39      	ldr	r1, [r7, #32]
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 f980 	bl	80047e8 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 80044e8:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80044ea:	f7ff ff5a 	bl	80043a2 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE15_S_use_relocateEv>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f083 0301 	eor.w	r3, r3, #1
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <_ZNSt6vectorIP15PrintableSensorSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fd fe25 	bl	800214c <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8004502:	4603      	mov	r3, r0
 8004504:	461a      	mov	r2, r3
 8004506:	6a39      	ldr	r1, [r7, #32]
 8004508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800450a:	f7fd fe2a 	bl	8002162 <_ZSt8_DestroyIPP15PrintableSensorS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800450e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800451a:	461a      	mov	r2, r3
 800451c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800451e:	f7fd fe6e 	bl	80021fe <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800452c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	441a      	add	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	609a      	str	r2, [r3, #8]
    }
 800453a:	bf00      	nop
 800453c:	3730      	adds	r7, #48	; 0x30
 800453e:	46bd      	mov	sp, r7
 8004540:	bdb0      	pop	{r4, r5, r7, pc}
 8004542:	bf00      	nop
 8004544:	08013b18 	.word	0x08013b18

08004548 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004548:	b5b0      	push	{r4, r5, r7, lr}
 800454a:	b08e      	sub	sp, #56	; 0x38
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 8004554:	f107 031c 	add.w	r3, r7, #28
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff f8d7 	bl	800370e <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8004560:	4602      	mov	r2, r0
 8004562:	f107 0314 	add.w	r3, r7, #20
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 f956 	bl	800481a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>
      if (__res.second)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d022      	beq.n	80045ba <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 8004574:	f107 0310 	add.w	r3, r7, #16
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f9d2 	bl	8004924 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>
	  return _Res(_M_insert_(__res.first, __res.second,
 8004580:	697c      	ldr	r4, [r7, #20]
 8004582:	69bd      	ldr	r5, [r7, #24]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9dc 	bl	8004942 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 800458a:	4602      	mov	r2, r0
 800458c:	f107 0310 	add.w	r3, r7, #16
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	4613      	mov	r3, r2
 8004594:	462a      	mov	r2, r5
 8004596:	4621      	mov	r1, r4
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f000 f9dd 	bl	8004958 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>
 800459e:	4603      	mov	r3, r0
 80045a0:	623b      	str	r3, [r7, #32]
		      true);
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80045a8:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80045ac:	f107 0320 	add.w	r3, r7, #32
 80045b0:	4619      	mov	r1, r3
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fa19 	bl	80049ea <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 80045b8:	e011      	b.n	80045de <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIRKS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff f886 	bl	80036d4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045ce:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 80045d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045d6:	4619      	mov	r1, r3
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fa06 	bl	80049ea <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>
    }
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	3730      	adds	r7, #48	; 0x30
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bdb0      	pop	{r4, r5, r7, pc}

080045e6 <_ZNSt4pairISt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80045e6:	b590      	push	{r4, r7, lr}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80045f2:	68fc      	ldr	r4, [r7, #12]
 80045f4:	68b8      	ldr	r0, [r7, #8]
 80045f6:	f000 fa11 	bl	8004a1c <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4619      	mov	r1, r3
 80045fe:	4620      	mov	r0, r4
 8004600:	f7fe ffa2 	bl	8003548 <_ZNSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1ERKSt17_Rb_tree_iteratorIS1_E>
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fa14 	bl	8004a32 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800460a:	4603      	mov	r3, r0
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	711a      	strb	r2, [r3, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bd90      	pop	{r4, r7, pc}

0800461c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorEC1Ev>:
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800465e:	b590      	push	{r4, r7, lr}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff ffec 	bl	8004648 <_ZSt7forwardIRKP15PrintableSensorEOT_RNSt16remove_referenceIS4_E4typeE>
 8004670:	4603      	mov	r3, r0
 8004672:	681c      	ldr	r4, [r3, #0]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4619      	mov	r1, r3
 8004678:	2004      	movs	r0, #4
 800467a:	f7ff fc9b 	bl	8003fb4 <_ZnwjPv>
 800467e:	4603      	mov	r3, r0
 8004680:	601c      	str	r4, [r3, #0]
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bd90      	pop	{r4, r7, pc}

0800468a <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80046aa:	b590      	push	{r4, r7, lr}
 80046ac:	b087      	sub	sp, #28
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f9c6 	bl	8004a48 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 80046bc:	4604      	mov	r4, r0
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff fdda 	bl	8004278 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 80046c4:	4603      	mov	r3, r0
 80046c6:	1ae2      	subs	r2, r4, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	bf34      	ite	cc
 80046ce:	2301      	movcc	r3, #1
 80046d0:	2300      	movcs	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f00d fed6 	bl	801248a <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff fdca 	bl	8004278 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 80046e4:	4604      	mov	r4, r0
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff fdc6 	bl	8004278 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 80046ec:	4603      	mov	r3, r0
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	f107 0208 	add.w	r2, r7, #8
 80046f4:	f107 0310 	add.w	r3, r7, #16
 80046f8:	4611      	mov	r1, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f9b5 	bl	8004a6a <_ZSt3maxIjERKT_S2_S2_>
 8004700:	4603      	mov	r3, r0
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4423      	add	r3, r4
 8004706:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff fdb5 	bl	8004278 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE4sizeEv>
 800470e:	4602      	mov	r2, r0
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4293      	cmp	r3, r2
 8004714:	d306      	bcc.n	8004724 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f996 	bl	8004a48 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	4293      	cmp	r3, r2
 8004722:	d904      	bls.n	800472e <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f98f 	bl	8004a48 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>
 800472a:	4603      	mov	r3, r0
 800472c:	e000      	b.n	8004730 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 800472e:	697b      	ldr	r3, [r7, #20]
      }
 8004730:	4618      	mov	r0, r3
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	bd90      	pop	{r4, r7, pc}

08004738 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	f107 030c 	add.w	r3, r7, #12
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff9e 	bl	800468a <_ZN9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <_ZN9__gnu_cxxmiIPP15PrintableSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f835 	bl	80047d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8004768:	4603      	mov	r3, r0
 800476a:	681c      	ldr	r4, [r3, #0]
 800476c:	6838      	ldr	r0, [r7, #0]
 800476e:	f000 f830 	bl	80047d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8004772:	4603      	mov	r3, r0
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	1ae3      	subs	r3, r4, r3
 8004778:	109b      	asrs	r3, r3, #2
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bd90      	pop	{r4, r7, pc}

08004782 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d006      	beq.n	80047a0 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x1e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f97b 	bl	8004a92 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>
 800479c:	4603      	mov	r3, r0
 800479e:	e000      	b.n	80047a2 <_ZNSt12_Vector_baseIP15PrintableSensorSaIS1_EE11_M_allocateEj+0x20>
 80047a0:	2300      	movs	r3, #0
      }
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80047aa:	b590      	push	{r4, r7, lr}
 80047ac:	b087      	sub	sp, #28
 80047ae:	af02      	add	r7, sp, #8
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80047b8:	f88d 4000 	strb.w	r4, [sp]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f974 	bl	8004ab0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80047c8:	4603      	mov	r3, r0
      }
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd90      	pop	{r4, r7, pc}

080047d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP15PrintableSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_ZSt34__uninitialized_move_if_noexcept_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f96c 	bl	8004ad4 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 80047fc:	4604      	mov	r4, r0
 80047fe:	68b8      	ldr	r0, [r7, #8]
 8004800:	f000 f968 	bl	8004ad4 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>
 8004804:	4601      	mov	r1, r0
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f971 	bl	8004af2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8004810:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bd90      	pop	{r4, r7, pc}

0800481a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800481a:	b590      	push	{r4, r7, lr}
 800481c:	b08b      	sub	sp, #44	; 0x2c
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004826:	68b8      	ldr	r0, [r7, #8]
 8004828:	f7fd fc5f 	bl	80020ea <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 800482c:	4603      	mov	r3, r0
 800482e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004830:	68b8      	ldr	r0, [r7, #8]
 8004832:	f7fe feaa 	bl	800358a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8004836:	4603      	mov	r3, r0
 8004838:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d020      	beq.n	8004888 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6e>
	  __y = __x;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800484a:	68bc      	ldr	r4, [r7, #8]
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe ff2d 	bl	80036ae <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4620      	mov	r0, r4
 800485c:	f7fe ff03 	bl	8003666 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x60>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	4618      	mov	r0, r3
 8004872:	f7fd fc9b 	bl	80021ac <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004876:	4603      	mov	r3, r0
 8004878:	e004      	b.n	8004884 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x6a>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd fc89 	bl	8002194 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004882:	4603      	mov	r3, r0
 8004884:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004886:	e7db      	b.n	8004840 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x26>
      iterator __j = iterator(__y);
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	f107 0310 	add.w	r3, r7, #16
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe ff1f 	bl	80036d4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01d      	beq.n	80048da <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xc0>
	  if (__j == begin())
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	f000 f938 	bl	8004b14 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>
 80048a4:	4603      	mov	r3, r0
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	f107 021c 	add.w	r2, r7, #28
 80048ac:	f107 0310 	add.w	r3, r7, #16
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe feb7 	bl	8003626 <_ZSteqRKSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xb6>
	    return _Res(__x, __y);
 80048be:	f107 0214 	add.w	r2, r7, #20
 80048c2:	f107 0318 	add.w	r3, r7, #24
 80048c6:	4619      	mov	r1, r3
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f934 	bl	8004b36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 80048ce:	e025      	b.n	800491c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
	    --__j;
 80048d0:	f107 0310 	add.w	r3, r7, #16
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 f947 	bl	8004b68 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80048da:	68bc      	ldr	r4, [r7, #8]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe feb5 	bl	800364e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80048e4:	4603      	mov	r3, r0
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4619      	mov	r1, r3
 80048ea:	4620      	mov	r0, r4
 80048ec:	f7fe febb 	bl	8003666 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xee>
	return _Res(__x, __y);
 80048f6:	f107 0214 	add.w	r2, r7, #20
 80048fa:	f107 0318 	add.w	r3, r7, #24
 80048fe:	4619      	mov	r1, r3
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f918 	bl	8004b36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>
 8004906:	e009      	b.n	800491c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x102>
      return _Res(__j._M_node, 0);
 8004908:	2300      	movs	r3, #0
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	f107 0220 	add.w	r2, r7, #32
 8004910:	f107 0310 	add.w	r3, r7, #16
 8004914:	4619      	mov	r1, r3
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f937 	bl	8004b8a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	372c      	adds	r7, #44	; 0x2c
 8004920:	46bd      	mov	sp, r7
 8004922:	bd90      	pop	{r4, r7, pc}

08004924 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>:
	_Alloc_node(_Rb_tree& __t)
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004958:	b5b0      	push	{r4, r5, r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d11a      	bne.n	80049a2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7fe fe0c 	bl	800358a <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8004972:	4602      	mov	r2, r0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800497a:	68fc      	ldr	r4, [r7, #12]
 800497c:	f107 0310 	add.w	r3, r7, #16
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe fec3 	bl	800370e <_ZNKSt9_IdentityIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_>
 8004988:	4605      	mov	r5, r0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fe fe5f 	bl	800364e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004990:	4603      	mov	r3, r0
 8004992:	461a      	mov	r2, r3
 8004994:	4629      	mov	r1, r5
 8004996:	4620      	mov	r0, r4
 8004998:	f7fe fe65 	bl	8003666 <_ZNKSt4lessIN4HC0521SENSOR_DATA_PARAMETEREEclERKS1_S4_>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x4e>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IRKS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSF_OT_RT0_+0x50>
 80049a6:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80049a8:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80049aa:	6838      	ldr	r0, [r7, #0]
 80049ac:	f7ff ffc9 	bl	8004942 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4619      	mov	r1, r3
 80049b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b6:	f000 f8fe 	bl	8004bb6 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>
 80049ba:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80049c0:	7ff8      	ldrb	r0, [r7, #31]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	69b9      	ldr	r1, [r7, #24]
 80049c6:	f00d fd02 	bl	80123ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80049d4:	f107 0314 	add.w	r3, r7, #20
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fe7a 	bl	80036d4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 80049e0:	697b      	ldr	r3, [r7, #20]
      }
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bdb0      	pop	{r4, r5, r7, pc}

080049ea <_ZNSt4pairISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEbEC1IS3_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f000 f8f1 	bl	8004bde <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f8f5 	bl	8004bf4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	711a      	strb	r2, [r3, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <_ZSt7forwardIRSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <_ZNKSt6vectorIP15PrintableSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f8f3 	bl	8004c3e <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f8d5 	bl	8004c0a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>
 8004a60:	4603      	mov	r3, r0
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d201      	bcs.n	8004a84 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	e000      	b.n	8004a86 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8004a84:	687b      	ldr	r3, [r7, #4]
    }
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	6839      	ldr	r1, [r7, #0]
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f8d7 	bl	8004c54 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_ZNSt6vectorIP15PrintableSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f8e3 	bl	8004c90 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8004aca:	4603      	mov	r3, r0
      }
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <_ZSt32__make_move_if_noexcept_iteratorIP15PrintableSensorSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004adc:	f107 030c 	add.w	r3, r7, #12
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f8f1 	bl	8004cca <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP15PrintableSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f8f2 	bl	8004cee <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe fdd4 	bl	80036d4 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEC1EPSt18_Rb_tree_node_base>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004b42:	68b8      	ldr	r0, [r7, #8]
 8004b44:	f000 f8e5 	bl	8004d12 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8e9 	bl	8004d28 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b56:	4603      	mov	r3, r0
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_ZNSt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f00d fc28 	bl	80123ca <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]
	return *this;
 8004b80:	687b      	ldr	r3, [r7, #4]
      }
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8004b96:	68b8      	ldr	r0, [r7, #8]
 8004b98:	f000 f8c6 	bl	8004d28 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <_ZNKSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIRKS1_EEPSt13_Rb_tree_nodeIS1_EOT_>:
	  operator()(_Arg&& __arg) const
 8004bb6:	b590      	push	{r4, r7, lr}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681c      	ldr	r4, [r3, #0]
 8004bc4:	6838      	ldr	r0, [r7, #0]
 8004bc6:	f7ff febc 	bl	8004942 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f000 f8b5 	bl	8004d3e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd90      	pop	{r4, r7, pc}

08004bde <_ZSt7forwardISt17_Rb_tree_iteratorIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <_ZNSt6vectorIP15PrintableSensorSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8004c12:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8004c16:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8a7 	bl	8004d6c <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004c22:	f107 0208 	add.w	r2, r7, #8
 8004c26:	f107 030c 	add.w	r3, r7, #12
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 f8a9 	bl	8004d84 <_ZSt3minIjERKT_S2_S2_>
 8004c32:	4603      	mov	r3, r0
 8004c34:	681b      	ldr	r3, [r3, #0]
      }
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <_ZNKSt12_Vector_baseIP15PrintableSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f8a3 	bl	8004dac <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	bf8c      	ite	hi
 8004c6e:	2301      	movhi	r3, #1
 8004c70:	2300      	movls	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <_ZN9__gnu_cxx13new_allocatorIP15PrintableSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004c78:	f00d fc04 	bl	8012484 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f00d fb4d 	bl	8012320 <_Znwj>
 8004c86:	4603      	mov	r3, r0
      }
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <_ZSt12__relocate_aIPP15PrintableSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8004c90:	b5b0      	push	{r4, r5, r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f890 	bl	8004dc4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	68b8      	ldr	r0, [r7, #8]
 8004ca8:	f000 f88c 	bl	8004dc4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8004cac:	4605      	mov	r5, r0
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f888 	bl	8004dc4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f000 f88d 	bl	8004dda <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8004cc0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bdb0      	pop	{r4, r5, r7, pc}

08004cca <_ZNSt13move_iteratorIPP15PrintableSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f89d 	bl	8004e16 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_ZSt18uninitialized_copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b086      	sub	sp, #24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f892 	bl	8004e2c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>
 8004d08:	4603      	mov	r3, r0
    }
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <_ZSt7forwardIRPSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJRKS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f87f 	bl	8004e4c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>
 8004d4e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8004d50:	6838      	ldr	r0, [r7, #0]
 8004d52:	f7ff fdf6 	bl	8004942 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8004d56:	4603      	mov	r3, r0
 8004d58:	461a      	mov	r2, r3
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f886 	bl	8004e6e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>
	  return __tmp;
 8004d62:	68fb      	ldr	r3, [r7, #12]
	}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <_ZNSt16allocator_traitsISaIP15PrintableSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f89a 	bl	8004eae <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>
 8004d7a:	4603      	mov	r3, r0
      }
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d201      	bcs.n	8004d9e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	e000      	b.n	8004da0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8004d9e:	687b      	ldr	r3, [r7, #4]
    }
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004db4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	109b      	asrs	r3, r3, #2
 8004df0:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	dd06      	ble.n	8004e06 <_ZSt14__relocate_a_1IP15PrintableSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f00e fc6d 	bl	80136e0 <memmove>
      return __result + __count;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4413      	add	r3, r2
    }
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <_ZSt4moveIRPP15PrintableSensorEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP15PrintableSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f842 	bl	8004ec6 <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>
 8004e42:	4603      	mov	r3, r0
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fd fa3e 	bl	80022d6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f849 	bl	8004ef6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJRKS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004e6e:	b5b0      	push	{r4, r5, r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	2014      	movs	r0, #20
 8004e80:	f7ff f898 	bl	8003fb4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7fd fa26 	bl	80022d6 <_ZNSt8_Rb_treeIN4HC0521SENSOR_DATA_PARAMETERES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	68b8      	ldr	r0, [r7, #8]
 8004e8e:	f7fd fa2d 	bl	80022ec <_ZNSt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREE9_M_valptrEv>
 8004e92:	4605      	mov	r5, r0
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fd54 	bl	8004942 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f000 f837 	bl	8004f14 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bdb0      	pop	{r4, r5, r7, pc}

08004eae <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ff78 	bl	8004dac <_ZNK9__gnu_cxx13new_allocatorIP15PrintableSensorE11_M_max_sizeEv>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <_ZSt4copyISt13move_iteratorIPP15PrintableSensorES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004ec6:	b590      	push	{r4, r7, lr}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f831 	bl	8004f3a <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004ed8:	4604      	mov	r4, r0
 8004eda:	68b8      	ldr	r0, [r7, #8]
 8004edc:	f000 f82d 	bl	8004f3a <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f838 	bl	8004f5c <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8004eec:	4603      	mov	r3, r0
    }
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd90      	pop	{r4, r7, pc}

08004ef6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004f00:	2200      	movs	r2, #0
 8004f02:	6839      	ldr	r1, [r7, #0]
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f84c 	bl	8004fa2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fd0e 	bl	8004942 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8004f26:	4603      	mov	r3, r0
 8004f28:	461a      	mov	r2, r3
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f859 	bl	8004fe4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <_ZSt12__miter_baseIPP15PrintableSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f863 	bl	8005010 <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 f86b 	bl	8005028 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>
 8004f52:	4603      	mov	r3, r0
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <_ZSt13__copy_move_aILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004f5c:	b5b0      	push	{r4, r5, r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7ff ff2b 	bl	8004dc4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8004f6e:	4604      	mov	r4, r0
 8004f70:	68b8      	ldr	r0, [r7, #8]
 8004f72:	f7ff ff27 	bl	8004dc4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8004f76:	4605      	mov	r5, r0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff ff22 	bl	8004dc4 <_ZSt12__niter_baseIPP15PrintableSensorET_S3_>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	4629      	mov	r1, r5
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 f859 	bl	800503e <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	4611      	mov	r1, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f863 	bl	800505e <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>
 8004f98:	4603      	mov	r3, r0
    }
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bdb0      	pop	{r4, r5, r7, pc}

08004fa2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f862 	bl	8005078 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	bf8c      	ite	hi
 8004fbc:	2301      	movhi	r3, #1
 8004fbe:	2300      	movls	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004fc6:	f00d fa5d 	bl	8012484 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f00d f9a3 	bl	8012320 <_Znwj>
 8004fda:	4603      	mov	r3, r0
      }
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff fca6 	bl	8004942 <_ZSt7forwardIRKN4HC0521SENSOR_DATA_PARAMETEREEOT_RNSt16remove_referenceIS4_E4typeE>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	681c      	ldr	r4, [r3, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	2004      	movs	r0, #4
 8005000:	f7fe ffd8 	bl	8003fb4 <_ZnwjPv>
 8005004:	4603      	mov	r3, r0
 8005006:	601c      	str	r4, [r3, #0]
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bd90      	pop	{r4, r7, pc}

08005010 <_ZNKSt13move_iteratorIPP15PrintableSensorE4baseEv>:
      base() const
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <_ZSt12__miter_baseIPP15PrintableSensorET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <_ZSt14__copy_move_a1ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f820 	bl	8005094 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>
 8005054:	4603      	mov	r3, r0
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <_ZSt12__niter_wrapIPP15PrintableSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN4HC0521SENSOR_DATA_PARAMETEREEE11_M_max_sizeEv+0x18>)
      }
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	06666666 	.word	0x06666666

08005094 <_ZSt14__copy_move_a2ILb1EPP15PrintableSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f805 	bl	80050b4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>
 80050aa:	4603      	mov	r3, r0
    }
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	109b      	asrs	r3, r3, #2
 80050c8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP15PrintableSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	461a      	mov	r2, r3
 80050d6:	68f9      	ldr	r1, [r7, #12]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f00e fb01 	bl	80136e0 <memmove>
	  return __result + _Num;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4413      	add	r3, r2
	}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	ed87 0a01 	vstr	s0, [r7, #4]
 80050f8:	edc7 0a00 	vstr	s1, [r7]
 80050fc:	edd7 0a00 	vldr	s1, [r7]
 8005100:	ed97 0a01 	vldr	s0, [r7, #4]
 8005104:	f00d fa50 	bl	80125a8 <atan2f>
 8005108:	eef0 7a40 	vmov.f32	s15, s0
 800510c:	eeb0 0a67 	vmov.f32	s0, s15
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	ed87 0a01 	vstr	s0, [r7, #4]
 8005120:	ed97 0a01 	vldr	s0, [r7, #4]
 8005124:	f00d fa42 	bl	80125ac <sqrtf>
 8005128:	eef0 7a40 	vmov.f32	s15, s0
 800512c:	eeb0 0a67 	vmov.f32	s0, s15
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "ICM42688P.h"

ICM42688P::ICM42688P(SPI_HandleTypeDef *spi_port)
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4618      	mov	r0, r3
 8005146:	f7fd ff7b 	bl	8003040 <_ZN8SPI_ConnC1Ev>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3304      	adds	r3, #4
 800514e:	4618      	mov	r0, r3
 8005150:	f7fd ff86 	bl	8003060 <_ZN15PrintableSensorC1Ev>
 8005154:	4a4a      	ldr	r2, [pc, #296]	; (8005280 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x148>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	4a4a      	ldr	r2, [pc, #296]	; (8005284 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x14c>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a41      	ldr	r2, [pc, #260]	; (8005288 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x150>)
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a40      	ldr	r2, [pc, #256]	; (800528c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x154>)
 800518a:	649a      	str	r2, [r3, #72]	; 0x48
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a40      	ldr	r2, [pc, #256]	; (8005290 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x158>)
 8005190:	64da      	str	r2, [r3, #76]	; 0x4c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a3f      	ldr	r2, [pc, #252]	; (8005294 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x15c>)
 8005196:	661a      	str	r2, [r3, #96]	; 0x60
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a3f      	ldr	r2, [pc, #252]	; (8005298 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x160>)
 800519c:	665a      	str	r2, [r3, #100]	; 0x64
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a3e      	ldr	r2, [pc, #248]	; (800529c <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x164>)
 80051a2:	669a      	str	r2, [r3, #104]	; 0x68
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3e      	ldr	r2, [pc, #248]	; (80052a0 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x168>)
 80051a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a3d      	ldr	r2, [pc, #244]	; (80052a4 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x16c>)
 80051ae:	671a      	str	r2, [r3, #112]	; 0x70
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3d      	ldr	r2, [pc, #244]	; (80052a8 <_ZN9ICM42688PC1EP19__SPI_HandleTypeDef+0x170>)
 80051b4:	675a      	str	r2, [r3, #116]	; 0x74
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051bc:	679a      	str	r2, [r3, #120]	; 0x78
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	ICM42688P::spi_port = spi_port;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	08013bb8 	.word	0x08013bb8
 8005284:	08013bcc 	.word	0x08013bcc
 8005288:	42652ee1 	.word	0x42652ee1
 800528c:	4183126f 	.word	0x4183126f
 8005290:	3a83126f 	.word	0x3a83126f
 8005294:	c0b00000 	.word	0xc0b00000
 8005298:	c1300000 	.word	0xc1300000
 800529c:	41700000 	.word	0x41700000
 80052a0:	44fa0000 	.word	0x44fa0000
 80052a4:	c4548000 	.word	0xc4548000
 80052a8:	451f4000 	.word	0x451f4000

080052ac <_ZN9ICM42688P11defaultInitEv>:

bool ICM42688P::defaultInit()
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	6078      	str	r0, [r7, #4]
	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 80052b4:	2300      	movs	r3, #0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	230a      	movs	r3, #10
 80052ba:	2200      	movs	r2, #0
 80052bc:	214d      	movs	r1, #77	; 0x4d
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f89a 	bl	80053f8 <_ZN9ICM42688P12initAndCheckEhhhb>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f083 0301 	eor.w	r3, r3, #1
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <_ZN9ICM42688P11defaultInitEv+0x28>
		return false;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e08d      	b.n	80053f0 <_ZN9ICM42688P11defaultInitEv+0x144>

	SPI_write(DEVICE_CONFIG,DEVICE_CONFIG_SOFT_RESET_CONFIG);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	2111      	movs	r1, #17
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	4798      	blx	r3
	HAL_Delay(20);
 80052e2:	2014      	movs	r0, #20
 80052e4:	f001 faac 	bl	8006840 <HAL_Delay>

	if (!initAndCheck(INTF_CONFIG1,0x00,10))
 80052e8:	2300      	movs	r3, #0
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	230a      	movs	r3, #10
 80052ee:	2200      	movs	r2, #0
 80052f0:	214d      	movs	r1, #77	; 0x4d
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f880 	bl	80053f8 <_ZN9ICM42688P12initAndCheckEhhhb>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f083 0301 	eor.w	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <_ZN9ICM42688P11defaultInitEv+0x5c>
		return false;
 8005304:	2300      	movs	r3, #0
 8005306:	e073      	b.n	80053f0 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_CONFIG0,INT_CONFIG0_UI_DRDY_INT_CLEAR_ONSENSORREGREAD,10))
 8005308:	2300      	movs	r3, #0
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	230a      	movs	r3, #10
 800530e:	2220      	movs	r2, #32
 8005310:	2163      	movs	r1, #99	; 0x63
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f870 	bl	80053f8 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005318:	4603      	mov	r3, r0
 800531a:	f083 0301 	eor.w	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <_ZN9ICM42688P11defaultInitEv+0x7c>
		return false;
 8005324:	2300      	movs	r3, #0
 8005326:	e063      	b.n	80053f0 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_CONFIG,INT_CONFIG_INT1_POLARITY_ACTIVE_HIGH|INT_CONFIG_INT1_DRIVE_CIRCUIT_PUSH_PULL,10))
 8005328:	2300      	movs	r3, #0
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	230a      	movs	r3, #10
 800532e:	2203      	movs	r2, #3
 8005330:	2114      	movs	r1, #20
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f860 	bl	80053f8 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005338:	4603      	mov	r3, r0
 800533a:	f083 0301 	eor.w	r3, r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <_ZN9ICM42688P11defaultInitEv+0x9c>
		return false;
 8005344:	2300      	movs	r3, #0
 8005346:	e053      	b.n	80053f0 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(INT_SOURCE0,INT_SOURCE0_UI_DRDY_INT1_EN,10))
 8005348:	2300      	movs	r3, #0
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	230a      	movs	r3, #10
 800534e:	2208      	movs	r2, #8
 8005350:	2165      	movs	r1, #101	; 0x65
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f850 	bl	80053f8 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005358:	4603      	mov	r3, r0
 800535a:	f083 0301 	eor.w	r3, r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <_ZN9ICM42688P11defaultInitEv+0xbc>
		return false;
 8005364:	2300      	movs	r3, #0
 8005366:	e043      	b.n	80053f0 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(GYRO_CONFIG_STATIC2,0b11,10))
 8005368:	2300      	movs	r3, #0
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	230a      	movs	r3, #10
 800536e:	2203      	movs	r2, #3
 8005370:	210b      	movs	r1, #11
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f840 	bl	80053f8 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005378:	4603      	mov	r3, r0
 800537a:	f083 0301 	eor.w	r3, r3, #1
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <_ZN9ICM42688P11defaultInitEv+0xdc>
		return false;
 8005384:	2300      	movs	r3, #0
 8005386:	e033      	b.n	80053f0 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(GYRO_CONFIG0,GYRO_CONFIG0_GYRO_ODR_1KHZ|GYRO_CONFIG0_GYRO_FS_SEL_2000DPS,10))
 8005388:	2300      	movs	r3, #0
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	230a      	movs	r3, #10
 800538e:	2206      	movs	r2, #6
 8005390:	214f      	movs	r1, #79	; 0x4f
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f830 	bl	80053f8 <_ZN9ICM42688P12initAndCheckEhhhb>
 8005398:	4603      	mov	r3, r0
 800539a:	f083 0301 	eor.w	r3, r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <_ZN9ICM42688P11defaultInitEv+0xfc>
		return false;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e023      	b.n	80053f0 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(ACCEL_CONFIG0,ACCEL_CONFIG0_ACCEL_ODR_1KHZ|ACCEL_CONFIG0_ACCEL_FS_SEL_2G,10))
 80053a8:	2300      	movs	r3, #0
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	230a      	movs	r3, #10
 80053ae:	2266      	movs	r2, #102	; 0x66
 80053b0:	2150      	movs	r1, #80	; 0x50
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f820 	bl	80053f8 <_ZN9ICM42688P12initAndCheckEhhhb>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f083 0301 	eor.w	r3, r3, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <_ZN9ICM42688P11defaultInitEv+0x11c>
		return false;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e013      	b.n	80053f0 <_ZN9ICM42688P11defaultInitEv+0x144>

	if (!initAndCheck(PWR_MGMT0,0x0F,10))
 80053c8:	2300      	movs	r3, #0
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	230a      	movs	r3, #10
 80053ce:	220f      	movs	r2, #15
 80053d0:	214e      	movs	r1, #78	; 0x4e
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f810 	bl	80053f8 <_ZN9ICM42688P12initAndCheckEhhhb>
 80053d8:	4603      	mov	r3, r0
 80053da:	f083 0301 	eor.w	r3, r3, #1
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <_ZN9ICM42688P11defaultInitEv+0x13c>
		return false;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e003      	b.n	80053f0 <_ZN9ICM42688P11defaultInitEv+0x144>

	HAL_Delay(50);
 80053e8:	2032      	movs	r0, #50	; 0x32
 80053ea:	f001 fa29 	bl	8006840 <HAL_Delay>

	//computeGyroDrift(1000);

	return true;
 80053ee:	2301      	movs	r3, #1
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <_ZN9ICM42688P12initAndCheckEhhhb>:

bool ICM42688P::initAndCheck(uint8_t addr,uint8_t val,uint8_t numberOfTries,bool read_only)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	4608      	mov	r0, r1
 8005402:	4611      	mov	r1, r2
 8005404:	461a      	mov	r2, r3
 8005406:	4603      	mov	r3, r0
 8005408:	70fb      	strb	r3, [r7, #3]
 800540a:	460b      	mov	r3, r1
 800540c:	70bb      	strb	r3, [r7, #2]
 800540e:	4613      	mov	r3, r2
 8005410:	707b      	strb	r3, [r7, #1]
	for (int i=0;i<numberOfTries;i++)
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	787b      	ldrb	r3, [r7, #1]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	429a      	cmp	r2, r3
 800541c:	da21      	bge.n	8005462 <_ZN9ICM42688P12initAndCheckEhhhb+0x6a>
	{
		if (read_only==false)
 800541e:	7e3b      	ldrb	r3, [r7, #24]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <_ZN9ICM42688P12initAndCheckEhhhb+0x3a>
			SPI_write(addr,val);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	78ba      	ldrb	r2, [r7, #2]
 800542c:	78f9      	ldrb	r1, [r7, #3]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
		if (SPI_read(addr)==val)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3304      	adds	r3, #4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	4611      	mov	r1, r2
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
 8005442:	4603      	mov	r3, r0
 8005444:	461a      	mov	r2, r3
 8005446:	78bb      	ldrb	r3, [r7, #2]
 8005448:	4293      	cmp	r3, r2
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <_ZN9ICM42688P12initAndCheckEhhhb+0x62>
			return true;
 8005456:	2301      	movs	r3, #1
 8005458:	e004      	b.n	8005464 <_ZN9ICM42688P12initAndCheckEhhhb+0x6c>
	for (int i=0;i<numberOfTries;i++)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	e7d9      	b.n	8005416 <_ZN9ICM42688P12initAndCheckEhhhb+0x1e>
	}
	return false;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* ICM42688P::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3308      	adds	r3, #8
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]

	//if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GX)!=senorsList.end())
	{
		strcat(packet,toCharArray(euler_x));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f103 0408 	add.w	r4, r3, #8
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1d1a      	adds	r2, r3, #4
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800548e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005492:	ee17 1a90 	vmov	r1, s15
 8005496:	4610      	mov	r0, r2
 8005498:	f7fd fdc4 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 800549c:	4603      	mov	r3, r0
 800549e:	4619      	mov	r1, r3
 80054a0:	4620      	mov	r0, r4
 80054a2:	f00e fa73 	bl	801398c <strcat>
		strcat(packet,",");
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f103 0408 	add.w	r4, r3, #8
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7fa fe8f 	bl	80001d0 <strlen>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4423      	add	r3, r4
 80054b6:	4959      	ldr	r1, [pc, #356]	; (800561c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1b0>)
 80054b8:	461a      	mov	r2, r3
 80054ba:	460b      	mov	r3, r1
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	8013      	strh	r3, [r2, #0]
	}

	//if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GY)!=senorsList.end())
	{
		strcat(packet,toCharArray(euler_y));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f103 0408 	add.w	r4, r3, #8
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	1d1a      	adds	r2, r3, #4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80054d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054d4:	ee17 1a90 	vmov	r1, s15
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fd fda3 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 80054de:	4603      	mov	r3, r0
 80054e0:	4619      	mov	r1, r3
 80054e2:	4620      	mov	r0, r4
 80054e4:	f00e fa52 	bl	801398c <strcat>
		strcat(packet,",");
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f103 0408 	add.w	r4, r3, #8
 80054ee:	4620      	mov	r0, r4
 80054f0:	f7fa fe6e 	bl	80001d0 <strlen>
 80054f4:	4603      	mov	r3, r0
 80054f6:	4423      	add	r3, r4
 80054f8:	4948      	ldr	r1, [pc, #288]	; (800561c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1b0>)
 80054fa:	461a      	mov	r2, r3
 80054fc:	460b      	mov	r3, r1
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	8013      	strh	r3, [r2, #0]
	}

	//if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_GZ)!=senorsList.end())
	{
		strcat(packet,toCharArray(euler_z));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f103 0408 	add.w	r4, r3, #8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005516:	ee17 1a90 	vmov	r1, s15
 800551a:	4610      	mov	r0, r2
 800551c:	f7fd fd82 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 8005520:	4603      	mov	r3, r0
 8005522:	4619      	mov	r1, r3
 8005524:	4620      	mov	r0, r4
 8005526:	f00e fa31 	bl	801398c <strcat>
		strcat(packet,",");
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f103 0408 	add.w	r4, r3, #8
 8005530:	4620      	mov	r0, r4
 8005532:	f7fa fe4d 	bl	80001d0 <strlen>
 8005536:	4603      	mov	r3, r0
 8005538:	4423      	add	r3, r4
 800553a:	4938      	ldr	r1, [pc, #224]	; (800561c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1b0>)
 800553c:	461a      	mov	r2, r3
 800553e:	460b      	mov	r3, r1
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	8013      	strh	r3, [r2, #0]
	}

	//if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AX)!=senorsList.end())
	{
		strcat(packet,toCharArray(-ax));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f103 0408 	add.w	r4, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	1d1a      	adds	r2, r3, #4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005554:	eef1 7a67 	vneg.f32	s15, s15
 8005558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800555c:	ee17 1a90 	vmov	r1, s15
 8005560:	4610      	mov	r0, r2
 8005562:	f7fd fd5f 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 8005566:	4603      	mov	r3, r0
 8005568:	4619      	mov	r1, r3
 800556a:	4620      	mov	r0, r4
 800556c:	f00e fa0e 	bl	801398c <strcat>
		strcat(packet,",");
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f103 0408 	add.w	r4, r3, #8
 8005576:	4620      	mov	r0, r4
 8005578:	f7fa fe2a 	bl	80001d0 <strlen>
 800557c:	4603      	mov	r3, r0
 800557e:	4423      	add	r3, r4
 8005580:	4926      	ldr	r1, [pc, #152]	; (800561c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1b0>)
 8005582:	461a      	mov	r2, r3
 8005584:	460b      	mov	r3, r1
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	8013      	strh	r3, [r2, #0]
	}

	//if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AY)!=senorsList.end())
	{
		strcat(packet,toCharArray(ay));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f103 0408 	add.w	r4, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	1d1a      	adds	r2, r3, #4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800559a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800559e:	ee17 1a90 	vmov	r1, s15
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7fd fd3e 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4619      	mov	r1, r3
 80055ac:	4620      	mov	r0, r4
 80055ae:	f00e f9ed 	bl	801398c <strcat>
		strcat(packet,",");
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f103 0408 	add.w	r4, r3, #8
 80055b8:	4620      	mov	r0, r4
 80055ba:	f7fa fe09 	bl	80001d0 <strlen>
 80055be:	4603      	mov	r3, r0
 80055c0:	4423      	add	r3, r4
 80055c2:	4916      	ldr	r1, [pc, #88]	; (800561c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1b0>)
 80055c4:	461a      	mov	r2, r3
 80055c6:	460b      	mov	r3, r1
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	8013      	strh	r3, [r2, #0]
	}

	//if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::ICM_RAW_AZ)!=senorsList.end())
	{
		strcat(packet,toCharArray(az));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f103 0408 	add.w	r4, r3, #8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	1d1a      	adds	r2, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80055dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055e0:	ee17 1a90 	vmov	r1, s15
 80055e4:	4610      	mov	r0, r2
 80055e6:	f7fd fd1d 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 80055ea:	4603      	mov	r3, r0
 80055ec:	4619      	mov	r1, r3
 80055ee:	4620      	mov	r0, r4
 80055f0:	f00e f9cc 	bl	801398c <strcat>
		strcat(packet,",");
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f103 0408 	add.w	r4, r3, #8
 80055fa:	4620      	mov	r0, r4
 80055fc:	f7fa fde8 	bl	80001d0 <strlen>
 8005600:	4603      	mov	r3, r0
 8005602:	4423      	add	r3, r4
 8005604:	4905      	ldr	r1, [pc, #20]	; (800561c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1b0>)
 8005606:	461a      	mov	r2, r3
 8005608:	460b      	mov	r3, r1
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3308      	adds	r3, #8
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bd90      	pop	{r4, r7, pc}
 800561a:	bf00      	nop
 800561c:	08013b38 	.word	0x08013b38

08005620 <_ZThn4_N9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	float raw_az=0;
	float temp=0;
public:

	void SPI_write(uint8_t reg,uint8_t data);
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8005620:	f1a0 0004 	sub.w	r0, r0, #4
 8005624:	f7ff bf22 	b.w	800546c <_ZN9ICM42688P19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08005628 <_ZN9ICM42688P6updateEv>:

void ICM42688P::update()
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	axL = SPI_read(ACCEL_DATA_X0);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3304      	adds	r3, #4
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2120      	movs	r1, #32
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
 800563e:	4603      	mov	r3, r0
 8005640:	461a      	mov	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	axH = SPI_read(ACCEL_DATA_X1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3304      	adds	r3, #4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	211f      	movs	r1, #31
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
 8005656:	4603      	mov	r3, r0
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	ayL = SPI_read(ACCEL_DATA_Y0);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3304      	adds	r3, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2122      	movs	r1, #34	; 0x22
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
 800566e:	4603      	mov	r3, r0
 8005670:	461a      	mov	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	ayH = SPI_read(ACCEL_DATA_Y1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3304      	adds	r3, #4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2121      	movs	r1, #33	; 0x21
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4798      	blx	r3
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	azL = SPI_read(ACCEL_DATA_Z0);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3304      	adds	r3, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2124      	movs	r1, #36	; 0x24
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
 800569e:	4603      	mov	r3, r0
 80056a0:	461a      	mov	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	azH = SPI_read(ACCEL_DATA_Z1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3304      	adds	r3, #4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2123      	movs	r1, #35	; 0x23
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	gxL = SPI_read(GYRO_DATA_X0);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3304      	adds	r3, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2126      	movs	r1, #38	; 0x26
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	461a      	mov	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	gxH = SPI_read(GYRO_DATA_X1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3304      	adds	r3, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2125      	movs	r1, #37	; 0x25
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	461a      	mov	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	gyL = SPI_read(GYRO_DATA_Y0);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3304      	adds	r3, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2128      	movs	r1, #40	; 0x28
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	4798      	blx	r3
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	gyH = SPI_read(GYRO_DATA_Y1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3304      	adds	r3, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2127      	movs	r1, #39	; 0x27
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	gzL = SPI_read(GYRO_DATA_Z0);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3304      	adds	r3, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	212a      	movs	r1, #42	; 0x2a
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	gzH = SPI_read(GYRO_DATA_Z1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3304      	adds	r3, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2129      	movs	r1, #41	; 0x29
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	tempL = SPI_read(TEMP_DATA0);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3304      	adds	r3, #4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	211e      	movs	r1, #30
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4798      	blx	r3
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	tempH = SPI_read(TEMP_DATA1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3304      	adds	r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	211d      	movs	r1, #29
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4798      	blx	r3
 8005776:	4603      	mov	r3, r0
 8005778:	461a      	mov	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	raw_ax = ((int16_t)(((int16_t)axH<<8) | axL) - axOffset)*axScale;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	b21a      	sxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005790:	b21b      	sxth	r3, r3
 8005792:	4313      	orrs	r3, r2
 8005794:	b21b      	sxth	r3, r3
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80057a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
	raw_ay = ((int16_t)(((int16_t)ayH<<8) | ayL) - ayOffset)*ayScale;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	b21a      	sxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b21b      	sxth	r3, r3
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80057dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	raw_az = ((int16_t)(((int16_t)azH<<8) | azL) - azOffset)*azScale;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	b21a      	sxth	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005800:	b21b      	sxth	r3, r3
 8005802:	4313      	orrs	r3, r2
 8005804:	b21b      	sxth	r3, r3
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8005814:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	raw_gx = (int16_t)(((int16_t)gxH<<8) | gxL) - gxDrift;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	b21a      	sxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8005838:	b21b      	sxth	r3, r3
 800583a:	4313      	orrs	r3, r2
 800583c:	b21b      	sxth	r3, r3
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800584c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	raw_gy = (int16_t)(((int16_t)gyH<<8) | gyL) - gyDrift;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	b21a      	sxth	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005866:	b21b      	sxth	r3, r3
 8005868:	4313      	orrs	r3, r2
 800586a:	b21b      	sxth	r3, r3
 800586c:	ee07 3a90 	vmov	s15, r3
 8005870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800587a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	raw_gz = (int16_t)(((int16_t)gzH<<8) | gzL) - gzDrift;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	b21a      	sxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8005894:	b21b      	sxth	r3, r3
 8005896:	4313      	orrs	r3, r2
 8005898:	b21b      	sxth	r3, r3
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80058a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	temp = (int16_t)(((int16_t)tempH<<8) | tempL)/132.48+25;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	b21a      	sxth	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058c2:	b21b      	sxth	r3, r3
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fa fddb 	bl	8000484 <__aeabi_i2d>
 80058ce:	a315      	add	r3, pc, #84	; (adr r3, 8005924 <_ZN9ICM42688P6updateEv+0x2fc>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7fa ff6a 	bl	80007ac <__aeabi_ddiv>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4610      	mov	r0, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <_ZN9ICM42688P6updateEv+0x2f8>)
 80058e6:	f7fa fc81 	bl	80001ec <__adddf3>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4610      	mov	r0, r2
 80058f0:	4619      	mov	r1, r3
 80058f2:	f7fb f8e1 	bl	8000ab8 <__aeabi_d2f>
 80058f6:	4602      	mov	r2, r0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	toEuler();
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f816 	bl	8005930 <_ZN9ICM42688P7toEulerEv>

	SPI_read(INT_STATUS);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3304      	adds	r3, #4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	212d      	movs	r1, #45	; 0x2d
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w
 8005920:	40390000 	.word	0x40390000
 8005924:	28f5c28f 	.word	0x28f5c28f
 8005928:	40608f5c 	.word	0x40608f5c
 800592c:	00000000 	.word	0x00000000

08005930 <_ZN9ICM42688P7toEulerEv>:

void ICM42688P::toEuler()
{
 8005930:	b5b0      	push	{r4, r5, r7, lr}
 8005932:	ed2d 8b02 	vpush	{d8}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	gx = gx + raw_gx*(DT/GYRO_FULLSCALE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	edd3 6a2a 	vldr	s13, [r3, #168]	; 0xa8
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8005954:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800595c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	gy = gy + raw_gy*(DT/GYRO_FULLSCALE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 800597e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	gz = gz + raw_gz*(DT/GYRO_FULLSCALE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 80059a8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80059ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

	euler_x = euler_x + raw_gx*(DT/GYRO_FULLSCALE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	edd3 6a2a 	vldr	s13, [r3, #168]	; 0xa8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 80059d2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80059d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	euler_y = euler_y + raw_gy*(DT/GYRO_FULLSCALE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 80059fc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	euler_z = euler_z + raw_gz*(DT/GYRO_FULLSCALE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	edd3 5a13 	vldr	s11, [r3, #76]	; 0x4c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8005a26:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	ax = atan2(raw_ax,sqrt(raw_ay*raw_ay + raw_az*raw_az))*RADIANS_TO_DEGREES;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	ed93 8a2d 	vldr	s16, [r3, #180]	; 0xb4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8005a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a62:	eeb0 0a67 	vmov.f32	s0, s15
 8005a66:	f7ff fb56 	bl	8005116 <_ZSt4sqrtf>
 8005a6a:	eef0 7a40 	vmov.f32	s15, s0
 8005a6e:	eef0 0a67 	vmov.f32	s1, s15
 8005a72:	eeb0 0a48 	vmov.f32	s0, s16
 8005a76:	f7ff fb3a 	bl	80050ee <_ZSt5atan2ff>
 8005a7a:	eeb0 7a40 	vmov.f32	s14, s0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	ay = atan2(raw_ay,sqrt(raw_ax*raw_ax + raw_az*raw_az))*RADIANS_TO_DEGREES;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	ed93 8a2e 	vldr	s16, [r3, #184]	; 0xb8
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8005ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8005abc:	f7ff fb2b 	bl	8005116 <_ZSt4sqrtf>
 8005ac0:	eef0 7a40 	vmov.f32	s15, s0
 8005ac4:	eef0 0a67 	vmov.f32	s1, s15
 8005ac8:	eeb0 0a48 	vmov.f32	s0, s16
 8005acc:	f7ff fb0f 	bl	80050ee <_ZSt5atan2ff>
 8005ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	az = atan2(raw_az,sqrt(raw_ax*raw_ax + raw_ay*raw_ay))* RADIANS_TO_DEGREES;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	ed93 8a2f 	vldr	s16, [r3, #188]	; 0xbc
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	edd3 6a2e 	vldr	s13, [r3, #184]	; 0xb8
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b12:	f7ff fb00 	bl	8005116 <_ZSt4sqrtf>
 8005b16:	eef0 7a40 	vmov.f32	s15, s0
 8005b1a:	eef0 0a67 	vmov.f32	s1, s15
 8005b1e:	eeb0 0a48 	vmov.f32	s0, s16
 8005b22:	f7ff fae4 	bl	80050ee <_ZSt5atan2ff>
 8005b26:	eeb0 7a40 	vmov.f32	s14, s0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

	euler_x = euler_x*0.9999+ay*0.0001;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fa fcb1 	bl	80004a8 <__aeabi_f2d>
 8005b46:	a340      	add	r3, pc, #256	; (adr r3, 8005c48 <_ZN9ICM42688P7toEulerEv+0x318>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f7fa fd04 	bl	8000558 <__aeabi_dmul>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4614      	mov	r4, r2
 8005b56:	461d      	mov	r5, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fa fca2 	bl	80004a8 <__aeabi_f2d>
 8005b64:	a33a      	add	r3, pc, #232	; (adr r3, 8005c50 <_ZN9ICM42688P7toEulerEv+0x320>)
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	f7fa fcf5 	bl	8000558 <__aeabi_dmul>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4620      	mov	r0, r4
 8005b74:	4629      	mov	r1, r5
 8005b76:	f7fa fb39 	bl	80001ec <__adddf3>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4619      	mov	r1, r3
 8005b82:	f7fa ff99 	bl	8000ab8 <__aeabi_d2f>
 8005b86:	4602      	mov	r2, r0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	euler_y = euler_y*0.9999-ax*0.0001;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fa fc87 	bl	80004a8 <__aeabi_f2d>
 8005b9a:	a32b      	add	r3, pc, #172	; (adr r3, 8005c48 <_ZN9ICM42688P7toEulerEv+0x318>)
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f7fa fcda 	bl	8000558 <__aeabi_dmul>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4614      	mov	r4, r2
 8005baa:	461d      	mov	r5, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fa fc78 	bl	80004a8 <__aeabi_f2d>
 8005bb8:	a325      	add	r3, pc, #148	; (adr r3, 8005c50 <_ZN9ICM42688P7toEulerEv+0x320>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f7fa fccb 	bl	8000558 <__aeabi_dmul>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f7fa fb0d 	bl	80001e8 <__aeabi_dsub>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	f7fa ff6f 	bl	8000ab8 <__aeabi_d2f>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	euler_z = euler_z*0.9999+az*0.0001;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fa fc5d 	bl	80004a8 <__aeabi_f2d>
 8005bee:	a316      	add	r3, pc, #88	; (adr r3, 8005c48 <_ZN9ICM42688P7toEulerEv+0x318>)
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	f7fa fcb0 	bl	8000558 <__aeabi_dmul>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4614      	mov	r4, r2
 8005bfe:	461d      	mov	r5, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fa fc4e 	bl	80004a8 <__aeabi_f2d>
 8005c0c:	a310      	add	r3, pc, #64	; (adr r3, 8005c50 <_ZN9ICM42688P7toEulerEv+0x320>)
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f7fa fca1 	bl	8000558 <__aeabi_dmul>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	f7fa fae5 	bl	80001ec <__adddf3>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f7fa ff45 	bl	8000ab8 <__aeabi_d2f>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	ecbd 8b02 	vpop	{d8}
 8005c40:	bdb0      	pop	{r4, r5, r7, pc}
 8005c42:	bf00      	nop
 8005c44:	f3af 8000 	nop.w
 8005c48:	48e8a71e 	.word	0x48e8a71e
 8005c4c:	3fefff2e 	.word	0x3fefff2e
 8005c50:	eb1c432d 	.word	0xeb1c432d
 8005c54:	3f1a36e2 	.word	0x3f1a36e2

08005c58 <_ZN9ICM42688P9getEulerXEv>:

	return true;
}

float ICM42688P::getEulerX()
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	return euler_x;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c66:	ee07 3a90 	vmov	s15, r3
}
 8005c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <_ZN9ICM42688P9getEulerYEv>:

float ICM42688P::getEulerY()
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	return euler_y;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c86:	ee07 3a90 	vmov	s15, r3
}
 8005c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <_ZN9ICM42688P9getEulerZEv>:

float ICM42688P::getEulerZ()
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	return euler_z;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca6:	ee07 3a90 	vmov	s15, r3
}
 8005caa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <_ZN9ICM42688P7getAccXEv>:
{
	return gz;
}

int16_t ICM42688P::getAccX()
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	return raw_ax;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cca:	ee17 3a90 	vmov	r3, s15
 8005cce:	b21b      	sxth	r3, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <_ZN9ICM42688P9SPI_writeEhh>:
{
	return SPI_read(INT_STATUS);
}

void ICM42688P::SPI_write(uint8_t reg,uint8_t data)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_RESET);
 8005cec:	2200      	movs	r2, #0
 8005cee:	2120      	movs	r1, #32
 8005cf0:	480d      	ldr	r0, [pc, #52]	; (8005d28 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 8005cf2:	f002 f85b 	bl	8007dac <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	spiTxBuff[1] = data;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	78ba      	ldrb	r2, [r7, #2]
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3340      	adds	r3, #64	; 0x40
 8005d0e:	2202      	movs	r2, #2
 8005d10:	4619      	mov	r1, r3
 8005d12:	f004 fbf5 	bl	800a500 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT,ICM_CS_PIN,GPIO_PIN_SET);
 8005d16:	2201      	movs	r2, #1
 8005d18:	2120      	movs	r1, #32
 8005d1a:	4803      	ldr	r0, [pc, #12]	; (8005d28 <_ZN9ICM42688P9SPI_writeEhh+0x4c>)
 8005d1c:	f002 f846 	bl	8007dac <HAL_GPIO_WritePin>
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40020800 	.word	0x40020800

08005d2c <_ZN9ICM42688P8SPI_readEh>:

uint8_t ICM42688P::SPI_read(uint8_t reg)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_RESET);
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2120      	movs	r1, #32
 8005d3c:	4812      	ldr	r0, [pc, #72]	; (8005d88 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 8005d3e:	f002 f835 	bl	8007dac <HAL_GPIO_WritePin>
	spiTxBuff[0]=reg|0x80;
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3340      	adds	r3, #64	; 0x40
 8005d58:	2201      	movs	r2, #1
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	f004 fbd0 	bl	800a500 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3342      	adds	r3, #66	; 0x42
 8005d68:	2201      	movs	r2, #1
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	f004 fc7e 	bl	800a66c <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_PORT, ICM_CS_PIN, GPIO_PIN_SET);
 8005d70:	2201      	movs	r2, #1
 8005d72:	2120      	movs	r1, #32
 8005d74:	4804      	ldr	r0, [pc, #16]	; (8005d88 <_ZN9ICM42688P8SPI_readEh+0x5c>)
 8005d76:	f002 f819 	bl	8007dac <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40020800 	.word	0x40020800

08005d8c <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef>:
 *      Author: Asus
 */

#include "LIS3MDLTR.h"

LIS3MDLTR::LIS3MDLTR(SPI_HandleTypeDef *spi_port)
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fd f951 	bl	8003040 <_ZN8SPI_ConnC1Ev>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fd f95c 	bl	8003060 <_ZN15PrintableSensorC1Ev>
 8005da8:	4a0e      	ldr	r2, [pc, #56]	; (8005de4 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0x58>)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	4a0e      	ldr	r2, [pc, #56]	; (8005de8 <_ZN9LIS3MDLTRC1EP19__SPI_HandleTypeDef+0x5c>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
{
	LIS3MDLTR::spi_port = spi_port;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	08013bd8 	.word	0x08013bd8
 8005de8:	08013bec 	.word	0x08013bec

08005dec <_ZN9LIS3MDLTR6updateEv>:
{
	return SPI_read(LIS_WHO_AM_I);
}

void LIS3MDLTR::update()
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	uint8_t x_high=SPI_read(OUT_X_H);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2129      	movs	r1, #41	; 0x29
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	73fb      	strb	r3, [r7, #15]
	uint8_t x_low=SPI_read(OUT_X_L);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2128      	movs	r1, #40	; 0x28
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
 8005e14:	4603      	mov	r3, r0
 8005e16:	73bb      	strb	r3, [r7, #14]
	uint8_t y_high=SPI_read(OUT_Y_H);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	212b      	movs	r1, #43	; 0x2b
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
 8005e26:	4603      	mov	r3, r0
 8005e28:	737b      	strb	r3, [r7, #13]
	uint8_t y_low=SPI_read(OUT_Y_L);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	212a      	movs	r1, #42	; 0x2a
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
 8005e38:	4603      	mov	r3, r0
 8005e3a:	733b      	strb	r3, [r7, #12]
	uint8_t z_high=SPI_read(OUT_Z_H);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3304      	adds	r3, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	212d      	movs	r1, #45	; 0x2d
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	72fb      	strb	r3, [r7, #11]
	uint8_t z_low=SPI_read(OUT_Z_L);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3304      	adds	r3, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	212c      	movs	r1, #44	; 0x2c
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_high=SPI_read(TEMP_OUT_H);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3304      	adds	r3, #4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	212f      	movs	r1, #47	; 0x2f
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	727b      	strb	r3, [r7, #9]
	uint8_t temp_low=SPI_read(TEMP_OUT_L);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3304      	adds	r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	212e      	movs	r1, #46	; 0x2e
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	4798      	blx	r3
 8005e80:	4603      	mov	r3, r0
 8005e82:	723b      	strb	r3, [r7, #8]

	X_val = ((int16_t)x_high)<<8 | x_low;
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	b21a      	sxth	r2, r3
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	b21b      	sxth	r3, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	b21a      	sxth	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Y_val = ((int16_t)y_high)<<8 | y_low;
 8005e98:	7b7b      	ldrb	r3, [r7, #13]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	b21a      	sxth	r2, r3
 8005e9e:	7b3b      	ldrb	r3, [r7, #12]
 8005ea0:	b21b      	sxth	r3, r3
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b21a      	sxth	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Z_val = ((int16_t)z_high)<<8 | z_low;
 8005eac:	7afb      	ldrb	r3, [r7, #11]
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	b21a      	sxth	r2, r3
 8005eb2:	7abb      	ldrb	r3, [r7, #10]
 8005eb4:	b21b      	sxth	r3, r3
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	b21a      	sxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	TEMP_val = ((int16_t)temp_high)<<8 | temp_low;
 8005ec0:	7a7b      	ldrb	r3, [r7, #9]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	b21a      	sxth	r2, r3
 8005ec6:	7a3b      	ldrb	r3, [r7, #8]
 8005ec8:	b21b      	sxth	r3, r3
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	b21a      	sxth	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* LIS3MDLTR::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b08d      	sub	sp, #52	; 0x34
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3308      	adds	r3, #8
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_X)!=senorsList.end())
 8005eee:	2310      	movs	r3, #16
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	f107 0310 	add.w	r3, r7, #16
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6838      	ldr	r0, [r7, #0]
 8005efa:	f7fd faaf 	bl	800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005efe:	4603      	mov	r3, r0
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	6838      	ldr	r0, [r7, #0]
 8005f04:	f7fd fac3 	bl	800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	f107 0214 	add.w	r2, r7, #20
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fd fac6 	bl	80034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01d      	beq.n	8005f5e <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x82>
	{
		strcat(packet,toCharArray(X_val));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f103 0408 	add.w	r4, r3, #8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	1d1a      	adds	r2, r3, #4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7fd f875 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f00d fd24 	bl	801398c <strcat>
		strcat(packet,",");
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f103 0408 	add.w	r4, r3, #8
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f7fa f940 	bl	80001d0 <strlen>
 8005f50:	4603      	mov	r3, r0
 8005f52:	4423      	add	r3, r4
 8005f54:	493d      	ldr	r1, [pc, #244]	; (800604c <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 8005f56:	461a      	mov	r2, r3
 8005f58:	460b      	mov	r3, r1
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Y)!=senorsList.end())
 8005f5e:	2311      	movs	r3, #17
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	f107 031c 	add.w	r3, r7, #28
 8005f66:	4619      	mov	r1, r3
 8005f68:	6838      	ldr	r0, [r7, #0]
 8005f6a:	f7fd fa77 	bl	800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	6838      	ldr	r0, [r7, #0]
 8005f74:	f7fd fa8b 	bl	800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	f107 0220 	add.w	r2, r7, #32
 8005f80:	f107 0318 	add.w	r3, r7, #24
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fd fa8e 	bl	80034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01d      	beq.n	8005fce <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xf2>
	{
		strcat(packet,toCharArray(Y_val));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f103 0408 	add.w	r4, r3, #8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1d1a      	adds	r2, r3, #4
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7fd f83d 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 8005faa:	4603      	mov	r3, r0
 8005fac:	4619      	mov	r1, r3
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f00d fcec 	bl	801398c <strcat>
		strcat(packet,",");
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f103 0408 	add.w	r4, r3, #8
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f7fa f908 	bl	80001d0 <strlen>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	4423      	add	r3, r4
 8005fc4:	4921      	ldr	r1, [pc, #132]	; (800604c <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	460b      	mov	r3, r1
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::LIS_RAW_MAG_Z)!=senorsList.end())
 8005fce:	2312      	movs	r3, #18
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6838      	ldr	r0, [r7, #0]
 8005fda:	f7fd fa3f 	bl	800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe2:	6838      	ldr	r0, [r7, #0]
 8005fe4:	f7fd fa53 	bl	800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fd fa56 	bl	80034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01d      	beq.n	800603e <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x162>
	{
		strcat(packet,toCharArray(Z_val));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f103 0408 	add.w	r4, r3, #8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f7fd f805 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 800601a:	4603      	mov	r3, r0
 800601c:	4619      	mov	r1, r3
 800601e:	4620      	mov	r0, r4
 8006020:	f00d fcb4 	bl	801398c <strcat>
		strcat(packet,",");
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 0408 	add.w	r4, r3, #8
 800602a:	4620      	mov	r0, r4
 800602c:	f7fa f8d0 	bl	80001d0 <strlen>
 8006030:	4603      	mov	r3, r0
 8006032:	4423      	add	r3, r4
 8006034:	4905      	ldr	r1, [pc, #20]	; (800604c <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x170>)
 8006036:	461a      	mov	r2, r3
 8006038:	460b      	mov	r3, r1
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	8013      	strh	r3, [r2, #0]
	}


	return packet;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3308      	adds	r3, #8
}
 8006042:	4618      	mov	r0, r3
 8006044:	3734      	adds	r7, #52	; 0x34
 8006046:	46bd      	mov	sp, r7
 8006048:	bd90      	pop	{r4, r7, pc}
 800604a:	bf00      	nop
 800604c:	08013b40 	.word	0x08013b40

08006050 <_ZThn4_N9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:
	void update();
	int16_t getX();
	int16_t getY();
	int16_t getZ();
	int16_t getTEMP();
	const char* getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList);
 8006050:	f1a0 0004 	sub.w	r0, r0, #4
 8006054:	f7ff bf42 	b.w	8005edc <_ZN9LIS3MDLTR19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>

08006058 <_ZN9LIS3MDLTR11defaultInitEv>:

bool LIS3MDLTR::defaultInit()
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
	  this->SPI_write(CTRL_REG1,0b11111100);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	22fc      	movs	r2, #252	; 0xfc
 8006068:	2120      	movs	r1, #32
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
	  uint8_t ctrl1 = this->SPI_read(CTRL_REG1);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3304      	adds	r3, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2120      	movs	r1, #32
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]

	  SPI_write(CTRL_REG2,0b01100000);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2260      	movs	r2, #96	; 0x60
 8006088:	2121      	movs	r1, #33	; 0x21
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
	  uint8_t ctrl2 = SPI_read(CTRL_REG2);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3304      	adds	r3, #4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2121      	movs	r1, #33	; 0x21
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4798      	blx	r3
 800609c:	4603      	mov	r3, r0
 800609e:	73bb      	strb	r3, [r7, #14]

	  SPI_write(CTRL_REG3,0b00000000);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2122      	movs	r1, #34	; 0x22
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
	  uint8_t ctrl3 = SPI_read(CTRL_REG3);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3304      	adds	r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2122      	movs	r1, #34	; 0x22
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	4798      	blx	r3
 80060bc:	4603      	mov	r3, r0
 80060be:	737b      	strb	r3, [r7, #13]

	  SPI_write(CTRL_REG4,0b00001100);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	220c      	movs	r2, #12
 80060c8:	2123      	movs	r1, #35	; 0x23
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	4798      	blx	r3
	  uint8_t ctrl4 = SPI_read(CTRL_REG4);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3304      	adds	r3, #4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2123      	movs	r1, #35	; 0x23
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
 80060dc:	4603      	mov	r3, r0
 80060de:	733b      	strb	r3, [r7, #12]

	  SPI_write(CTRL_REG5,0b00000000);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2200      	movs	r2, #0
 80060e8:	2124      	movs	r1, #36	; 0x24
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
	  uint8_t ctrl5 = SPI_read(CTRL_REG5);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3304      	adds	r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2124      	movs	r1, #36	; 0x24
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
 80060fc:	4603      	mov	r3, r0
 80060fe:	72fb      	strb	r3, [r7, #11]
		return false;

	if (!initAndCheck(CTRL_REG5,0b00000000,10))
		return false;*/

	return true;
 8006100:	2301      	movs	r3, #1
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <_ZN9LIS3MDLTR9SPI_writeEhh>:
	}
	return false;
}

void LIS3MDLTR::SPI_write(uint8_t reg,uint8_t data)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	70fb      	strb	r3, [r7, #3]
 8006118:	4613      	mov	r3, r2
 800611a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_RESET);
 800611c:	2200      	movs	r2, #0
 800611e:	2120      	movs	r1, #32
 8006120:	480f      	ldr	r0, [pc, #60]	; (8006160 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 8006122:	f001 fe43 	bl	8007dac <HAL_GPIO_WritePin>
	spiTxBuff[0] = reg & 0x7f;
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	spiTxBuff[1] = data;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	78ba      	ldrb	r2, [r7, #2]
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff,2);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3340      	adds	r3, #64	; 0x40
 8006144:	2202      	movs	r2, #2
 8006146:	4619      	mov	r1, r3
 8006148:	f004 f9da 	bl	800a500 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT,LIS_CS_PIN,GPIO_PIN_SET);
 800614c:	2201      	movs	r2, #1
 800614e:	2120      	movs	r1, #32
 8006150:	4803      	ldr	r0, [pc, #12]	; (8006160 <_ZN9LIS3MDLTR9SPI_writeEhh+0x54>)
 8006152:	f001 fe2b 	bl	8007dac <HAL_GPIO_WritePin>
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40020000 	.word	0x40020000

08006164 <_ZN9LIS3MDLTR8SPI_readEh>:

uint8_t LIS3MDLTR::SPI_read(uint8_t reg)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_RESET);
 8006170:	2200      	movs	r2, #0
 8006172:	2120      	movs	r1, #32
 8006174:	4812      	ldr	r0, [pc, #72]	; (80061c0 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 8006176:	f001 fe19 	bl	8007dac <HAL_GPIO_WritePin>
	spiTxBuff[0]=(reg & 0x3f)|0x80|0x40;
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006180:	b2da      	uxtb	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	HAL_SPI_Transmit_DMA(spi_port, (uint8_t*)spiTxBuff, 1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3340      	adds	r3, #64	; 0x40
 8006190:	2201      	movs	r2, #1
 8006192:	4619      	mov	r1, r3
 8006194:	f004 f9b4 	bl	800a500 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(spi_port, (uint8_t*)spiRxBuff, 1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3342      	adds	r3, #66	; 0x42
 80061a0:	2201      	movs	r2, #1
 80061a2:	4619      	mov	r1, r3
 80061a4:	f004 fa62 	bl	800a66c <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(LIS_CS_PORT, LIS_CS_PIN, GPIO_PIN_SET);
 80061a8:	2201      	movs	r2, #1
 80061aa:	2120      	movs	r1, #32
 80061ac:	4804      	ldr	r0, [pc, #16]	; (80061c0 <_ZN9LIS3MDLTR8SPI_readEh+0x5c>)
 80061ae:	f001 fdfd 	bl	8007dac <HAL_GPIO_WritePin>

	return spiRxBuff[0];
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40020000 	.word	0x40020000

080061c4 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 */

#include "MB1043.h"
#include <stdlib.h>

MB1043::MB1043(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,uint8_t timeout)
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	70fb      	strb	r3, [r7, #3]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3336      	adds	r3, #54	; 0x36
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fd fcb6 	bl	8003b48 <_ZN7TimeoutC1Ev>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fc ff3e 	bl	8003060 <_ZN15PrintableSensorC1Ev>
 80061e4:	4a10      	ldr	r2, [pc, #64]	; (8006228 <_ZN6MB1043C1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x64>)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2252      	movs	r2, #82	; 0x52
 80061ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	220d      	movs	r2, #13
 80061f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2206      	movs	r2, #6
 80061fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
	MB1043::uart_port = uart_port;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	63da      	str	r2, [r3, #60]	; 0x3c
	MB1043::uart_port_dma=uart_port_dma;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	641a      	str	r2, [r3, #64]	; 0x40

	setTimeoutValue(timeout);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3336      	adds	r3, #54	; 0x36
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	4611      	mov	r1, r2
 8006216:	4618      	mov	r0, r3
 8006218:	f7fd fc87 	bl	8003b2a <_ZN7Timeout15setTimeoutValueEh>
}
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	08013bf8 	.word	0x08013bf8

0800622c <_ZN6MB10435beginEv>:

void MB1043::begin()
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_port, rx_buff, buff_len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f103 0145 	add.w	r1, r3, #69	; 0x45
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006244:	b29b      	uxth	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	f005 ff92 	bl	800c170 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <_ZN6MB10436updateEv>:

void MB1043::update()
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	if (rx_buff[0]==BEGIN_BIT && rx_buff[5]==END_BIT)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006268:	429a      	cmp	r2, r3
 800626a:	d144      	bne.n	80062f6 <_ZN6MB10436updateEv+0xa2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006278:	429a      	cmp	r2, r3
 800627a:	d13c      	bne.n	80062f6 <_ZN6MB10436updateEv+0xa2>
	{
		distance_str[0]=rx_buff[1];
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		distance_str[1]=rx_buff[2],
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		distance_str[2]=rx_buff[3],
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		distance_str[3]=rx_buff[4];
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

		distance = atoi(distance_str);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	334b      	adds	r3, #75	; 0x4b
 80062b0:	4618      	mov	r0, r3
 80062b2:	f00d f9c9 	bl	8013648 <atoi>
 80062b6:	4603      	mov	r3, r0
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

		resetTimeoutCounter();
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3336      	adds	r3, #54	; 0x36
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fd fc23 	bl	8003b10 <_ZN7Timeout19resetTimeoutCounterEv>

		HAL_UARTEx_ReceiveToIdle_DMA(uart_port, rx_buff, buff_len);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f103 0145 	add.w	r1, r3, #69	; 0x45
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062da:	b29b      	uxth	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	f005 ff47 	bl	800c170 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(uart_port_dma, DMA_IT_HT);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0208 	bic.w	r2, r2, #8
 80062f4:	601a      	str	r2, [r3, #0]
	}
}
 80062f6:	bf00      	nop
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* MB1043::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8006300:	b590      	push	{r4, r7, lr}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3304      	adds	r3, #4
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::SONAR_DISTANCE)!=senorsList.end())
 8006312:	2313      	movs	r3, #19
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	f107 0310 	add.w	r3, r7, #16
 800631a:	4619      	mov	r1, r3
 800631c:	6838      	ldr	r0, [r7, #0]
 800631e:	f7fd f89d 	bl	800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8006322:	4603      	mov	r3, r0
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	6838      	ldr	r0, [r7, #0]
 8006328:	f7fd f8b1 	bl	800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 800632c:	4603      	mov	r3, r0
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	f107 0214 	add.w	r2, r7, #20
 8006334:	f107 030c 	add.w	r3, r7, #12
 8006338:	4611      	mov	r1, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f7fd f8b4 	bl	80034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d01a      	beq.n	800637c <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(distance));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	1d1c      	adds	r4, r3, #4
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f7fc fe65 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 800635a:	4603      	mov	r3, r0
 800635c:	4619      	mov	r1, r3
 800635e:	4620      	mov	r0, r4
 8006360:	f00d fb14 	bl	801398c <strcat>
		strcat(packet,",");
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	1d1c      	adds	r4, r3, #4
 8006368:	4620      	mov	r0, r4
 800636a:	f7f9 ff31 	bl	80001d0 <strlen>
 800636e:	4603      	mov	r3, r0
 8006370:	4423      	add	r3, r4
 8006372:	4905      	ldr	r1, [pc, #20]	; (8006388 <_ZN6MB104319getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x88>)
 8006374:	461a      	mov	r2, r3
 8006376:	460b      	mov	r3, r1
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
}
 8006380:	4618      	mov	r0, r3
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	bd90      	pop	{r4, r7, pc}
 8006388:	08013b48 	.word	0x08013b48

0800638c <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh>:
 *      Author: Asus
 */

#include "PMW3901UY.h"

PMW3901UY::PMW3901UY(UART_HandleTypeDef *uart_port,DMA_HandleTypeDef *uart_port_dma,uint8_t timeout)
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	70fb      	strb	r3, [r7, #3]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3336      	adds	r3, #54	; 0x36
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fd fbd2 	bl	8003b48 <_ZN7TimeoutC1Ev>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fc fe5a 	bl	8003060 <_ZN15PrintableSensorC1Ev>
 80063ac:	4a16      	ldr	r2, [pc, #88]	; (8006408 <_ZN9PMW3901UYC1EP20__UART_HandleTypeDefP19__DMA_HandleTypeDefh+0x7c>)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	22fe      	movs	r2, #254	; 0xfe
 80063b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2204      	movs	r2, #4
 80063be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	22aa      	movs	r2, #170	; 0xaa
 80063c6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2209      	movs	r2, #9
 80063ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
{
	PMW3901UY::uart_port = uart_port;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	63da      	str	r2, [r3, #60]	; 0x3c
	PMW3901UY::uart_port_dma=uart_port_dma;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40

	setTimeoutValue(timeout);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3336      	adds	r3, #54	; 0x36
 80063f2:	78fa      	ldrb	r2, [r7, #3]
 80063f4:	4611      	mov	r1, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fd fb97 	bl	8003b2a <_ZN7Timeout15setTimeoutValueEh>
}
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	08013c04 	.word	0x08013c04

0800640c <_ZN9PMW3901UY5beginEv>:

void PMW3901UY::begin()
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_port, rx_buff, buff_len);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f103 0145 	add.w	r1, r3, #69	; 0x45
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006424:	b29b      	uxth	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	f005 fea2 	bl	800c170 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <_ZN9PMW3901UY6updateEv>:

void PMW3901UY::update()
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	if (rx_buff[0]==BEGIN_BIT && rx_buff[1]==DATA_LEN_BIT && rx_buff[8]==END_BIT)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006448:	429a      	cmp	r2, r3
 800644a:	d168      	bne.n	800651e <_ZN9PMW3901UY6updateEv+0xea>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006458:	429a      	cmp	r2, r3
 800645a:	d160      	bne.n	800651e <_ZN9PMW3901UY6updateEv+0xea>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8006468:	429a      	cmp	r2, r3
 800646a:	d158      	bne.n	800651e <_ZN9PMW3901UY6updateEv+0xea>
	{
		flow_x = (int16_t)(rx_buff[3]<<8 | rx_buff[2]);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	b21a      	sxth	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800647c:	b21b      	sxth	r3, r3
 800647e:	4313      	orrs	r3, r2
 8006480:	b21a      	sxth	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		flow_y = (int16_t)(rx_buff[5]<<8 | rx_buff[4]);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	b21a      	sxth	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006498:	b21b      	sxth	r3, r3
 800649a:	4313      	orrs	r3, r2
 800649c:	b21a      	sxth	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		quality = rx_buff[7];
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		x_pos += flow_x;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	4413      	add	r3, r2
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	b21a      	sxth	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		y_pos += flow_y;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	4413      	add	r3, r2
 80064de:	b29b      	uxth	r3, r3
 80064e0:	b21a      	sxth	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

		resetTimeoutCounter();
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3336      	adds	r3, #54	; 0x36
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fd fb0f 	bl	8003b10 <_ZN7Timeout19resetTimeoutCounterEv>

		HAL_UARTEx_ReceiveToIdle_DMA(uart_port, rx_buff, buff_len);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f103 0145 	add.w	r1, r3, #69	; 0x45
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006502:	b29b      	uxth	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	f005 fe33 	bl	800c170 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(uart_port_dma, DMA_IT_HT);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0208 	bic.w	r2, r2, #8
 800651c:	601a      	str	r2, [r3, #0]
		//std::string s1 = std::to_string(flow_x);
		//std::string s2 = std::to_string(flow_y);
		//s1 = s1 + "," + s2 + "\n\r";
		//int len = s1.length();
	}
}
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE>:

const char* PMW3901UY::getSensorValues_str(std::set<HC05::SENSOR_DATA_PARAMETER> &senorsList)
{
 8006528:	b590      	push	{r4, r7, lr}
 800652a:	b08f      	sub	sp, #60	; 0x3c
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
	strcpy(packet,"");
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3304      	adds	r3, #4
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_X)!=senorsList.end())
 800653a:	2314      	movs	r3, #20
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	4619      	mov	r1, r3
 8006544:	6838      	ldr	r0, [r7, #0]
 8006546:	f7fc ff89 	bl	800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800654a:	4603      	mov	r3, r0
 800654c:	60bb      	str	r3, [r7, #8]
 800654e:	6838      	ldr	r0, [r7, #0]
 8006550:	f7fc ff9d 	bl	800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006554:	4603      	mov	r3, r0
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	f107 0210 	add.w	r2, r7, #16
 800655c:	f107 0308 	add.w	r3, r7, #8
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f7fc ffa0 	bl	80034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01a      	beq.n	80065a4 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x7c>
	{
		strcat(packet,toCharArray(x_pos));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	1d1c      	adds	r4, r3, #4
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f7fc fd51 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 8006582:	4603      	mov	r3, r0
 8006584:	4619      	mov	r1, r3
 8006586:	4620      	mov	r0, r4
 8006588:	f00d fa00 	bl	801398c <strcat>
		strcat(packet,",");
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	1d1c      	adds	r4, r3, #4
 8006590:	4620      	mov	r0, r4
 8006592:	f7f9 fe1d 	bl	80001d0 <strlen>
 8006596:	4603      	mov	r3, r0
 8006598:	4423      	add	r3, r4
 800659a:	4955      	ldr	r1, [pc, #340]	; (80066f0 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 800659c:	461a      	mov	r2, r3
 800659e:	460b      	mov	r3, r1
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_POS_Y)!=senorsList.end())
 80065a4:	2315      	movs	r3, #21
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	f107 0318 	add.w	r3, r7, #24
 80065ac:	4619      	mov	r1, r3
 80065ae:	6838      	ldr	r0, [r7, #0]
 80065b0:	f7fc ff54 	bl	800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 80065b4:	4603      	mov	r3, r0
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	6838      	ldr	r0, [r7, #0]
 80065ba:	f7fc ff68 	bl	800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 80065be:	4603      	mov	r3, r0
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	f107 021c 	add.w	r2, r7, #28
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fc ff6b 	bl	80034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01a      	beq.n	800660e <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0xe6>
	{
		strcat(packet,toCharArray(y_pos));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	1d1c      	adds	r4, r3, #4
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f7fc fd1c 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 80065ec:	4603      	mov	r3, r0
 80065ee:	4619      	mov	r1, r3
 80065f0:	4620      	mov	r0, r4
 80065f2:	f00d f9cb 	bl	801398c <strcat>
		strcat(packet,",");
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	1d1c      	adds	r4, r3, #4
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7f9 fde8 	bl	80001d0 <strlen>
 8006600:	4603      	mov	r3, r0
 8006602:	4423      	add	r3, r4
 8006604:	493a      	ldr	r1, [pc, #232]	; (80066f0 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8006606:	461a      	mov	r2, r3
 8006608:	460b      	mov	r3, r1
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_X)!=senorsList.end())
 800660e:	2316      	movs	r3, #22
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
 8006612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006616:	4619      	mov	r1, r3
 8006618:	6838      	ldr	r0, [r7, #0]
 800661a:	f7fc ff1f 	bl	800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 800661e:	4603      	mov	r3, r0
 8006620:	623b      	str	r3, [r7, #32]
 8006622:	6838      	ldr	r0, [r7, #0]
 8006624:	f7fc ff33 	bl	800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006628:	4603      	mov	r3, r0
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
 800662c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006630:	f107 0320 	add.w	r3, r7, #32
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7fc ff36 	bl	80034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01a      	beq.n	8006678 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x150>
	{
		strcat(packet,toCharArray(flow_x));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	1d1c      	adds	r4, r3, #4
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7fc fce7 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 8006656:	4603      	mov	r3, r0
 8006658:	4619      	mov	r1, r3
 800665a:	4620      	mov	r0, r4
 800665c:	f00d f996 	bl	801398c <strcat>
		strcat(packet,",");
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	1d1c      	adds	r4, r3, #4
 8006664:	4620      	mov	r0, r4
 8006666:	f7f9 fdb3 	bl	80001d0 <strlen>
 800666a:	4603      	mov	r3, r0
 800666c:	4423      	add	r3, r4
 800666e:	4920      	ldr	r1, [pc, #128]	; (80066f0 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 8006670:	461a      	mov	r2, r3
 8006672:	460b      	mov	r3, r1
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	8013      	strh	r3, [r2, #0]
	}

	if (senorsList.find(HC05::SENSOR_DATA_PARAMETER::PMW_FLOW_Y)!=senorsList.end())
 8006678:	2317      	movs	r3, #23
 800667a:	633b      	str	r3, [r7, #48]	; 0x30
 800667c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006680:	4619      	mov	r1, r3
 8006682:	6838      	ldr	r0, [r7, #0]
 8006684:	f7fc feea 	bl	800345c <_ZNSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE4findERKS1_>
 8006688:	4603      	mov	r3, r0
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800668c:	6838      	ldr	r0, [r7, #0]
 800668e:	f7fc fefe 	bl	800348e <_ZNKSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS1_ESaIS1_EE3endEv>
 8006692:	4603      	mov	r3, r0
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
 8006696:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800669a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fc ff01 	bl	80034a8 <_ZStneRKSt23_Rb_tree_const_iteratorIN4HC0521SENSOR_DATA_PARAMETEREES4_>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01a      	beq.n	80066e2 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1ba>
	{
		strcat(packet,toCharArray(flow_y));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	1d1c      	adds	r4, r3, #4
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f7fc fcb2 	bl	8003024 <_ZN15PrintableSensor11toCharArrayEi>
 80066c0:	4603      	mov	r3, r0
 80066c2:	4619      	mov	r1, r3
 80066c4:	4620      	mov	r0, r4
 80066c6:	f00d f961 	bl	801398c <strcat>
		strcat(packet,",");
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	1d1c      	adds	r4, r3, #4
 80066ce:	4620      	mov	r0, r4
 80066d0:	f7f9 fd7e 	bl	80001d0 <strlen>
 80066d4:	4603      	mov	r3, r0
 80066d6:	4423      	add	r3, r4
 80066d8:	4905      	ldr	r1, [pc, #20]	; (80066f0 <_ZN9PMW3901UY19getSensorValues_strERSt3setIN4HC0521SENSOR_DATA_PARAMETERESt4lessIS2_ESaIS2_EE+0x1c8>)
 80066da:	461a      	mov	r2, r3
 80066dc:	460b      	mov	r3, r1
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	8013      	strh	r3, [r2, #0]
	}

	return packet;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3304      	adds	r3, #4
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	373c      	adds	r7, #60	; 0x3c
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd90      	pop	{r4, r7, pc}
 80066ee:	bf00      	nop
 80066f0:	08013b50 	.word	0x08013b50

080066f4 <_ZN11PID_Control3outEv>:
 */

#include "PID_Control.hpp"

float PID_Control::out()
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	error = reference - signal;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	edd3 7a00 	vldr	s15, [r3]
 800670a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	edc3 7a07 	vstr	s15, [r3, #28]

	pid_p = error;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]
	pid_i = pid_i + error;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	ed93 7a04 	vldr	s14, [r3, #16]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	edd3 7a07 	vldr	s15, [r3, #28]
 8006728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid_d = -(signal-last_signal);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	ed93 7a00 	vldr	s14, [r3]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006744:	eef1 7a67 	vneg.f32	s15, s15
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	edc3 7a05 	vstr	s15, [r3, #20]

	if (last_signal!=signal)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	edd3 7a00 	vldr	s15, [r3]
 800675c:	eeb4 7a67 	vcmp.f32	s14, s15
 8006760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006764:	d001      	beq.n	800676a <_ZN11PID_Control3outEv+0x76>
		int test=0;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]

	last_signal = signal;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	625a      	str	r2, [r3, #36]	; 0x24

	return Kp*pid_p + Ki*pid_i + Kd*pid_d;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	ed93 7a00 	vldr	s14, [r3]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	edd3 6a01 	vldr	s13, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	edd3 6a02 	vldr	s13, [r3, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80067a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067a8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80067ac:	eeb0 0a67 	vmov.f32	s0, s15
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80067c0:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <HAL_Init+0x40>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a0d      	ldr	r2, [pc, #52]	; (80067fc <HAL_Init+0x40>)
 80067c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80067cc:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <HAL_Init+0x40>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <HAL_Init+0x40>)
 80067d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067d8:	4b08      	ldr	r3, [pc, #32]	; (80067fc <HAL_Init+0x40>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a07      	ldr	r2, [pc, #28]	; (80067fc <HAL_Init+0x40>)
 80067de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067e4:	2003      	movs	r0, #3
 80067e6:	f000 fd0e 	bl	8007206 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067ea:	200f      	movs	r0, #15
 80067ec:	f7fc fa6e 	bl	8002ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067f0:	f7fb fdfc 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40023c00 	.word	0x40023c00

08006800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006804:	4b06      	ldr	r3, [pc, #24]	; (8006820 <HAL_IncTick+0x20>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_IncTick+0x24>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4413      	add	r3, r2
 8006810:	4a04      	ldr	r2, [pc, #16]	; (8006824 <HAL_IncTick+0x24>)
 8006812:	6013      	str	r3, [r2, #0]
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20000008 	.word	0x20000008
 8006824:	20000d24 	.word	0x20000d24

08006828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  return uwTick;
 800682c:	4b03      	ldr	r3, [pc, #12]	; (800683c <HAL_GetTick+0x14>)
 800682e:	681b      	ldr	r3, [r3, #0]
}
 8006830:	4618      	mov	r0, r3
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20000d24 	.word	0x20000d24

08006840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006848:	f7ff ffee 	bl	8006828 <HAL_GetTick>
 800684c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d005      	beq.n	8006866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800685a:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <HAL_Delay+0x44>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006866:	bf00      	nop
 8006868:	f7ff ffde 	bl	8006828 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	429a      	cmp	r2, r3
 8006876:	d8f7      	bhi.n	8006868 <HAL_Delay+0x28>
  {
  }
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000008 	.word	0x20000008

08006888 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e033      	b.n	8006906 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fb fdcc 	bl	8002444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	f003 0310 	and.w	r3, r3, #16
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d118      	bne.n	80068f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068ce:	f023 0302 	bic.w	r3, r3, #2
 80068d2:	f043 0202 	orr.w	r2, r3, #2
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa68 	bl	8006db0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f023 0303 	bic.w	r3, r3, #3
 80068ee:	f043 0201 	orr.w	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
 80068f6:	e001      	b.n	80068fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_ADC_Start_DMA+0x1e>
 800692a:	2302      	movs	r3, #2
 800692c:	e0e9      	b.n	8006b02 <HAL_ADC_Start_DMA+0x1f2>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d018      	beq.n	8006976 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006954:	4b6d      	ldr	r3, [pc, #436]	; (8006b0c <HAL_ADC_Start_DMA+0x1fc>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a6d      	ldr	r2, [pc, #436]	; (8006b10 <HAL_ADC_Start_DMA+0x200>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	0c9a      	lsrs	r2, r3, #18
 8006960:	4613      	mov	r3, r2
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	4413      	add	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006968:	e002      	b.n	8006970 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	3b01      	subs	r3, #1
 800696e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1f9      	bne.n	800696a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006984:	d107      	bne.n	8006996 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006994:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f040 80a1 	bne.w	8006ae8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80069ae:	f023 0301 	bic.w	r3, r3, #1
 80069b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e4:	d106      	bne.n	80069f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ea:	f023 0206 	bic.w	r2, r3, #6
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	645a      	str	r2, [r3, #68]	; 0x44
 80069f2:	e002      	b.n	80069fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a02:	4b44      	ldr	r3, [pc, #272]	; (8006b14 <HAL_ADC_Start_DMA+0x204>)
 8006a04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	4a43      	ldr	r2, [pc, #268]	; (8006b18 <HAL_ADC_Start_DMA+0x208>)
 8006a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	4a42      	ldr	r2, [pc, #264]	; (8006b1c <HAL_ADC_Start_DMA+0x20c>)
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	4a41      	ldr	r2, [pc, #260]	; (8006b20 <HAL_ADC_Start_DMA+0x210>)
 8006a1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006a26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a36:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a46:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	334c      	adds	r3, #76	; 0x4c
 8006a52:	4619      	mov	r1, r3
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f000 fcb8 	bl	80073cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d12a      	bne.n	8006abe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a2d      	ldr	r2, [pc, #180]	; (8006b24 <HAL_ADC_Start_DMA+0x214>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d015      	beq.n	8006a9e <HAL_ADC_Start_DMA+0x18e>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a2c      	ldr	r2, [pc, #176]	; (8006b28 <HAL_ADC_Start_DMA+0x218>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d105      	bne.n	8006a88 <HAL_ADC_Start_DMA+0x178>
 8006a7c:	4b25      	ldr	r3, [pc, #148]	; (8006b14 <HAL_ADC_Start_DMA+0x204>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00a      	beq.n	8006a9e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a27      	ldr	r2, [pc, #156]	; (8006b2c <HAL_ADC_Start_DMA+0x21c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d136      	bne.n	8006b00 <HAL_ADC_Start_DMA+0x1f0>
 8006a92:	4b20      	ldr	r3, [pc, #128]	; (8006b14 <HAL_ADC_Start_DMA+0x204>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d130      	bne.n	8006b00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d129      	bne.n	8006b00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006aba:	609a      	str	r2, [r3, #8]
 8006abc:	e020      	b.n	8006b00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a18      	ldr	r2, [pc, #96]	; (8006b24 <HAL_ADC_Start_DMA+0x214>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d11b      	bne.n	8006b00 <HAL_ADC_Start_DMA+0x1f0>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d114      	bne.n	8006b00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ae4:	609a      	str	r2, [r3, #8]
 8006ae6:	e00b      	b.n	8006b00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	f043 0210 	orr.w	r2, r3, #16
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af8:	f043 0201 	orr.w	r2, r3, #1
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000000 	.word	0x20000000
 8006b10:	431bde83 	.word	0x431bde83
 8006b14:	40012300 	.word	0x40012300
 8006b18:	08006fa9 	.word	0x08006fa9
 8006b1c:	08007063 	.word	0x08007063
 8006b20:	0800707f 	.word	0x0800707f
 8006b24:	40012000 	.word	0x40012000
 8006b28:	40012100 	.word	0x40012100
 8006b2c:	40012200 	.word	0x40012200

08006b30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_ADC_ConfigChannel+0x1c>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e105      	b.n	8006d94 <HAL_ADC_ConfigChannel+0x228>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b09      	cmp	r3, #9
 8006b96:	d925      	bls.n	8006be4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68d9      	ldr	r1, [r3, #12]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	4413      	add	r3, r2
 8006bac:	3b1e      	subs	r3, #30
 8006bae:	2207      	movs	r2, #7
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	43da      	mvns	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	400a      	ands	r2, r1
 8006bbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68d9      	ldr	r1, [r3, #12]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	4618      	mov	r0, r3
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4403      	add	r3, r0
 8006bd6:	3b1e      	subs	r3, #30
 8006bd8:	409a      	lsls	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	60da      	str	r2, [r3, #12]
 8006be2:	e022      	b.n	8006c2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6919      	ldr	r1, [r3, #16]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	4413      	add	r3, r2
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	43da      	mvns	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	400a      	ands	r2, r1
 8006c06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6919      	ldr	r1, [r3, #16]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	4618      	mov	r0, r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	4403      	add	r3, r0
 8006c20:	409a      	lsls	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b06      	cmp	r3, #6
 8006c30:	d824      	bhi.n	8006c7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	3b05      	subs	r3, #5
 8006c44:	221f      	movs	r2, #31
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	43da      	mvns	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	400a      	ands	r2, r1
 8006c52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	4618      	mov	r0, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3b05      	subs	r3, #5
 8006c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	635a      	str	r2, [r3, #52]	; 0x34
 8006c7a:	e04c      	b.n	8006d16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b0c      	cmp	r3, #12
 8006c82:	d824      	bhi.n	8006cce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	3b23      	subs	r3, #35	; 0x23
 8006c96:	221f      	movs	r2, #31
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	43da      	mvns	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	400a      	ands	r2, r1
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3b23      	subs	r3, #35	; 0x23
 8006cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
 8006ccc:	e023      	b.n	8006d16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	3b41      	subs	r3, #65	; 0x41
 8006ce0:	221f      	movs	r2, #31
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	43da      	mvns	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	400a      	ands	r2, r1
 8006cee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	3b41      	subs	r3, #65	; 0x41
 8006d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d16:	4b22      	ldr	r3, [pc, #136]	; (8006da0 <HAL_ADC_ConfigChannel+0x234>)
 8006d18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a21      	ldr	r2, [pc, #132]	; (8006da4 <HAL_ADC_ConfigChannel+0x238>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d109      	bne.n	8006d38 <HAL_ADC_ConfigChannel+0x1cc>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b12      	cmp	r3, #18
 8006d2a:	d105      	bne.n	8006d38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a19      	ldr	r2, [pc, #100]	; (8006da4 <HAL_ADC_ConfigChannel+0x238>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d123      	bne.n	8006d8a <HAL_ADC_ConfigChannel+0x21e>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b10      	cmp	r3, #16
 8006d48:	d003      	beq.n	8006d52 <HAL_ADC_ConfigChannel+0x1e6>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b11      	cmp	r3, #17
 8006d50:	d11b      	bne.n	8006d8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b10      	cmp	r3, #16
 8006d64:	d111      	bne.n	8006d8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d66:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <HAL_ADC_ConfigChannel+0x23c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a10      	ldr	r2, [pc, #64]	; (8006dac <HAL_ADC_ConfigChannel+0x240>)
 8006d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d70:	0c9a      	lsrs	r2, r3, #18
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d7c:	e002      	b.n	8006d84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f9      	bne.n	8006d7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40012300 	.word	0x40012300
 8006da4:	40012000 	.word	0x40012000
 8006da8:	20000000 	.word	0x20000000
 8006dac:	431bde83 	.word	0x431bde83

08006db0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006db8:	4b79      	ldr	r3, [pc, #484]	; (8006fa0 <ADC_Init+0x1f0>)
 8006dba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6859      	ldr	r1, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	021a      	lsls	r2, r3, #8
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6859      	ldr	r1, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6899      	ldr	r1, [r3, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	4a58      	ldr	r2, [pc, #352]	; (8006fa4 <ADC_Init+0x1f4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d022      	beq.n	8006e8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6899      	ldr	r1, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6899      	ldr	r1, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	609a      	str	r2, [r3, #8]
 8006e8c:	e00f      	b.n	8006eae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006eac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0202 	bic.w	r2, r2, #2
 8006ebc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6899      	ldr	r1, [r3, #8]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7e1b      	ldrb	r3, [r3, #24]
 8006ec8:	005a      	lsls	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01b      	beq.n	8006f14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006efa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6859      	ldr	r1, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	3b01      	subs	r3, #1
 8006f08:	035a      	lsls	r2, r3, #13
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	e007      	b.n	8006f24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	051a      	lsls	r2, r3, #20
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6899      	ldr	r1, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f66:	025a      	lsls	r2, r3, #9
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6899      	ldr	r1, [r3, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	029a      	lsls	r2, r3, #10
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	609a      	str	r2, [r3, #8]
}
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	40012300 	.word	0x40012300
 8006fa4:	0f000001 	.word	0x0f000001

08006fa8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d13c      	bne.n	800703c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d12b      	bne.n	8007034 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d127      	bne.n	8007034 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d006      	beq.n	8007000 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d119      	bne.n	8007034 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0220 	bic.w	r2, r2, #32
 800700e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d105      	bne.n	8007034 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	f043 0201 	orr.w	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff fd7b 	bl	8006b30 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800703a:	e00e      	b.n	800705a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff fd85 	bl	8006b58 <HAL_ADC_ErrorCallback>
}
 800704e:	e004      	b.n	800705a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fd67 	bl	8006b44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2240      	movs	r2, #64	; 0x40
 8007090:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007096:	f043 0204 	orr.w	r2, r3, #4
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fd5a 	bl	8006b58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <__NVIC_SetPriorityGrouping>:
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <__NVIC_SetPriorityGrouping+0x44>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070c8:	4013      	ands	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070de:	4a04      	ldr	r2, [pc, #16]	; (80070f0 <__NVIC_SetPriorityGrouping+0x44>)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	60d3      	str	r3, [r2, #12]
}
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	e000ed00 	.word	0xe000ed00

080070f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <__NVIC_GetPriorityGrouping+0x18>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	0a1b      	lsrs	r3, r3, #8
 80070fe:	f003 0307 	and.w	r3, r3, #7
}
 8007102:	4618      	mov	r0, r3
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	e000ed00 	.word	0xe000ed00

08007110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800711a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711e:	2b00      	cmp	r3, #0
 8007120:	db0b      	blt.n	800713a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	f003 021f 	and.w	r2, r3, #31
 8007128:	4907      	ldr	r1, [pc, #28]	; (8007148 <__NVIC_EnableIRQ+0x38>)
 800712a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	2001      	movs	r0, #1
 8007132:	fa00 f202 	lsl.w	r2, r0, r2
 8007136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	e000e100 	.word	0xe000e100

0800714c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	6039      	str	r1, [r7, #0]
 8007156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715c:	2b00      	cmp	r3, #0
 800715e:	db0a      	blt.n	8007176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	b2da      	uxtb	r2, r3
 8007164:	490c      	ldr	r1, [pc, #48]	; (8007198 <__NVIC_SetPriority+0x4c>)
 8007166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800716a:	0112      	lsls	r2, r2, #4
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	440b      	add	r3, r1
 8007170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007174:	e00a      	b.n	800718c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	b2da      	uxtb	r2, r3
 800717a:	4908      	ldr	r1, [pc, #32]	; (800719c <__NVIC_SetPriority+0x50>)
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	3b04      	subs	r3, #4
 8007184:	0112      	lsls	r2, r2, #4
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	440b      	add	r3, r1
 800718a:	761a      	strb	r2, [r3, #24]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	e000e100 	.word	0xe000e100
 800719c:	e000ed00 	.word	0xe000ed00

080071a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b089      	sub	sp, #36	; 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	f1c3 0307 	rsb	r3, r3, #7
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	bf28      	it	cs
 80071be:	2304      	movcs	r3, #4
 80071c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3304      	adds	r3, #4
 80071c6:	2b06      	cmp	r3, #6
 80071c8:	d902      	bls.n	80071d0 <NVIC_EncodePriority+0x30>
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3b03      	subs	r3, #3
 80071ce:	e000      	b.n	80071d2 <NVIC_EncodePriority+0x32>
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	fa02 f303 	lsl.w	r3, r2, r3
 80071de:	43da      	mvns	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	401a      	ands	r2, r3
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071e8:	f04f 31ff 	mov.w	r1, #4294967295
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	fa01 f303 	lsl.w	r3, r1, r3
 80071f2:	43d9      	mvns	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071f8:	4313      	orrs	r3, r2
         );
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3724      	adds	r7, #36	; 0x24
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff ff4c 	bl	80070ac <__NVIC_SetPriorityGrouping>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800722e:	f7ff ff61 	bl	80070f4 <__NVIC_GetPriorityGrouping>
 8007232:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	6978      	ldr	r0, [r7, #20]
 800723a:	f7ff ffb1 	bl	80071a0 <NVIC_EncodePriority>
 800723e:	4602      	mov	r2, r0
 8007240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff ff80 	bl	800714c <__NVIC_SetPriority>
}
 800724c:	bf00      	nop
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800725e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ff54 	bl	8007110 <__NVIC_EnableIRQ>
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800727c:	f7ff fad4 	bl	8006828 <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e099      	b.n	80073c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072ac:	e00f      	b.n	80072ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072ae:	f7ff fabb 	bl	8006828 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b05      	cmp	r3, #5
 80072ba:	d908      	bls.n	80072ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2203      	movs	r2, #3
 80072c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e078      	b.n	80073c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e8      	bne.n	80072ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4b38      	ldr	r3, [pc, #224]	; (80073c8 <HAL_DMA_Init+0x158>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	4313      	orrs	r3, r2
 800731e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	2b04      	cmp	r3, #4
 8007326:	d107      	bne.n	8007338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	4313      	orrs	r3, r2
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f023 0307 	bic.w	r3, r3, #7
 800734e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	2b04      	cmp	r3, #4
 8007360:	d117      	bne.n	8007392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00e      	beq.n	8007392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fb01 	bl	800797c <DMA_CheckFifoParam>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d008      	beq.n	8007392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2240      	movs	r2, #64	; 0x40
 8007384:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800738e:	2301      	movs	r3, #1
 8007390:	e016      	b.n	80073c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fab8 	bl	8007910 <DMA_CalcBaseAndBitshift>
 80073a0:	4603      	mov	r3, r0
 80073a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a8:	223f      	movs	r2, #63	; 0x3f
 80073aa:	409a      	lsls	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	f010803f 	.word	0xf010803f

080073cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <HAL_DMA_Start_IT+0x26>
 80073ee:	2302      	movs	r3, #2
 80073f0:	e040      	b.n	8007474 <HAL_DMA_Start_IT+0xa8>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	d12f      	bne.n	8007466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2202      	movs	r2, #2
 800740a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fa4a 	bl	80078b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007424:	223f      	movs	r2, #63	; 0x3f
 8007426:	409a      	lsls	r2, r3
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0216 	orr.w	r2, r2, #22
 800743a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d007      	beq.n	8007454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0208 	orr.w	r2, r2, #8
 8007452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e005      	b.n	8007472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800746e:	2302      	movs	r3, #2
 8007470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800748a:	f7ff f9cd 	bl	8006828 <HAL_GetTick>
 800748e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d008      	beq.n	80074ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2280      	movs	r2, #128	; 0x80
 80074a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e052      	b.n	8007554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0216 	bic.w	r2, r2, #22
 80074bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695a      	ldr	r2, [r3, #20]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d103      	bne.n	80074de <HAL_DMA_Abort+0x62>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0208 	bic.w	r2, r2, #8
 80074ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0201 	bic.w	r2, r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074fe:	e013      	b.n	8007528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007500:	f7ff f992 	bl	8006828 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b05      	cmp	r3, #5
 800750c:	d90c      	bls.n	8007528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2203      	movs	r2, #3
 8007518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e015      	b.n	8007554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e4      	bne.n	8007500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753a:	223f      	movs	r2, #63	; 0x3f
 800753c:	409a      	lsls	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d004      	beq.n	800757a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2280      	movs	r2, #128	; 0x80
 8007574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e00c      	b.n	8007594 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2205      	movs	r2, #5
 800757e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80075ac:	4b8e      	ldr	r3, [pc, #568]	; (80077e8 <HAL_DMA_IRQHandler+0x248>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a8e      	ldr	r2, [pc, #568]	; (80077ec <HAL_DMA_IRQHandler+0x24c>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	0a9b      	lsrs	r3, r3, #10
 80075b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ca:	2208      	movs	r2, #8
 80075cc:	409a      	lsls	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01a      	beq.n	800760c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d013      	beq.n	800760c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f8:	2208      	movs	r2, #8
 80075fa:	409a      	lsls	r2, r3
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	f043 0201 	orr.w	r2, r3, #1
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007610:	2201      	movs	r2, #1
 8007612:	409a      	lsls	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4013      	ands	r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d012      	beq.n	8007642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800762e:	2201      	movs	r2, #1
 8007630:	409a      	lsls	r2, r3
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	f043 0202 	orr.w	r2, r3, #2
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007646:	2204      	movs	r2, #4
 8007648:	409a      	lsls	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4013      	ands	r3, r2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d012      	beq.n	8007678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007664:	2204      	movs	r2, #4
 8007666:	409a      	lsls	r2, r3
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007670:	f043 0204 	orr.w	r2, r3, #4
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767c:	2210      	movs	r2, #16
 800767e:	409a      	lsls	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4013      	ands	r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d043      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	2b00      	cmp	r3, #0
 8007694:	d03c      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769a:	2210      	movs	r2, #16
 800769c:	409a      	lsls	r2, r3
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d018      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d108      	bne.n	80076d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d024      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
 80076ce:	e01f      	b.n	8007710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01b      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
 80076e0:	e016      	b.n	8007710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d107      	bne.n	8007700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0208 	bic.w	r2, r2, #8
 80076fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007714:	2220      	movs	r2, #32
 8007716:	409a      	lsls	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4013      	ands	r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 808f 	beq.w	8007840 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 8087 	beq.w	8007840 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007736:	2220      	movs	r2, #32
 8007738:	409a      	lsls	r2, r3
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b05      	cmp	r3, #5
 8007748:	d136      	bne.n	80077b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0216 	bic.w	r2, r2, #22
 8007758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695a      	ldr	r2, [r3, #20]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <HAL_DMA_IRQHandler+0x1da>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0208 	bic.w	r2, r2, #8
 8007788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778e:	223f      	movs	r2, #63	; 0x3f
 8007790:	409a      	lsls	r2, r3
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d07e      	beq.n	80078ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
        }
        return;
 80077b6:	e079      	b.n	80078ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d01d      	beq.n	8007802 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10d      	bne.n	80077f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d031      	beq.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
 80077e4:	e02c      	b.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
 80077e6:	bf00      	nop
 80077e8:	20000000 	.word	0x20000000
 80077ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d023      	beq.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
 8007800:	e01e      	b.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10f      	bne.n	8007830 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0210 	bic.w	r2, r2, #16
 800781e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007844:	2b00      	cmp	r3, #0
 8007846:	d032      	beq.n	80078ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d022      	beq.n	800789a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2205      	movs	r2, #5
 8007858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0201 	bic.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	3301      	adds	r3, #1
 8007870:	60bb      	str	r3, [r7, #8]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	429a      	cmp	r2, r3
 8007876:	d307      	bcc.n	8007888 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f2      	bne.n	800786c <HAL_DMA_IRQHandler+0x2cc>
 8007886:	e000      	b.n	800788a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007888:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
 80078aa:	e000      	b.n	80078ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80078ac:	bf00      	nop
    }
  }
}
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	d108      	bne.n	80078f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80078f2:	e007      	b.n	8007904 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	60da      	str	r2, [r3, #12]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	3b10      	subs	r3, #16
 8007920:	4a14      	ldr	r2, [pc, #80]	; (8007974 <DMA_CalcBaseAndBitshift+0x64>)
 8007922:	fba2 2303 	umull	r2, r3, r2, r3
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800792a:	4a13      	ldr	r2, [pc, #76]	; (8007978 <DMA_CalcBaseAndBitshift+0x68>)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b03      	cmp	r3, #3
 800793c:	d909      	bls.n	8007952 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	1d1a      	adds	r2, r3, #4
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	659a      	str	r2, [r3, #88]	; 0x58
 8007950:	e007      	b.n	8007962 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800795a:	f023 0303 	bic.w	r3, r3, #3
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	aaaaaaab 	.word	0xaaaaaaab
 8007978:	08013c08 	.word	0x08013c08

0800797c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d11f      	bne.n	80079d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b03      	cmp	r3, #3
 800799a:	d856      	bhi.n	8007a4a <DMA_CheckFifoParam+0xce>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <DMA_CheckFifoParam+0x28>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	080079b5 	.word	0x080079b5
 80079a8:	080079c7 	.word	0x080079c7
 80079ac:	080079b5 	.word	0x080079b5
 80079b0:	08007a4b 	.word	0x08007a4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d046      	beq.n	8007a4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079c4:	e043      	b.n	8007a4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079ce:	d140      	bne.n	8007a52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079d4:	e03d      	b.n	8007a52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079de:	d121      	bne.n	8007a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d837      	bhi.n	8007a56 <DMA_CheckFifoParam+0xda>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <DMA_CheckFifoParam+0x70>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	08007a03 	.word	0x08007a03
 80079f4:	080079fd 	.word	0x080079fd
 80079f8:	08007a15 	.word	0x08007a15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007a00:	e030      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d025      	beq.n	8007a5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a12:	e022      	b.n	8007a5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a1c:	d11f      	bne.n	8007a5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007a22:	e01c      	b.n	8007a5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d903      	bls.n	8007a32 <DMA_CheckFifoParam+0xb6>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d003      	beq.n	8007a38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007a30:	e018      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	73fb      	strb	r3, [r7, #15]
      break;
 8007a36:	e015      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00e      	beq.n	8007a62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
      break;
 8007a48:	e00b      	b.n	8007a62 <DMA_CheckFifoParam+0xe6>
      break;
 8007a4a:	bf00      	nop
 8007a4c:	e00a      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a4e:	bf00      	nop
 8007a50:	e008      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a52:	bf00      	nop
 8007a54:	e006      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a56:	bf00      	nop
 8007a58:	e004      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a5a:	bf00      	nop
 8007a5c:	e002      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;   
 8007a5e:	bf00      	nop
 8007a60:	e000      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a62:	bf00      	nop
    }
  } 
  
  return status; 
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b089      	sub	sp, #36	; 0x24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	e16b      	b.n	8007d68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a90:	2201      	movs	r2, #1
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	fa02 f303 	lsl.w	r3, r2, r3
 8007a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	f040 815a 	bne.w	8007d62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d005      	beq.n	8007ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d130      	bne.n	8007b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	4013      	ands	r3, r2
 8007adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007afc:	2201      	movs	r2, #1
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	43db      	mvns	r3, r3
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4013      	ands	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	091b      	lsrs	r3, r3, #4
 8007b12:	f003 0201 	and.w	r2, r3, #1
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f003 0303 	and.w	r3, r3, #3
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d017      	beq.n	8007b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	2203      	movs	r2, #3
 8007b40:	fa02 f303 	lsl.w	r3, r2, r3
 8007b44:	43db      	mvns	r3, r3
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	fa02 f303 	lsl.w	r3, r2, r3
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d123      	bne.n	8007bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	08da      	lsrs	r2, r3, #3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3208      	adds	r2, #8
 8007b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	220f      	movs	r2, #15
 8007b88:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	4013      	ands	r3, r2
 8007b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	08da      	lsrs	r2, r3, #3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3208      	adds	r2, #8
 8007bb2:	69b9      	ldr	r1, [r7, #24]
 8007bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	2203      	movs	r2, #3
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f003 0203 	and.w	r2, r3, #3
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 80b4 	beq.w	8007d62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	4b60      	ldr	r3, [pc, #384]	; (8007d80 <HAL_GPIO_Init+0x30c>)
 8007c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c02:	4a5f      	ldr	r2, [pc, #380]	; (8007d80 <HAL_GPIO_Init+0x30c>)
 8007c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c08:	6453      	str	r3, [r2, #68]	; 0x44
 8007c0a:	4b5d      	ldr	r3, [pc, #372]	; (8007d80 <HAL_GPIO_Init+0x30c>)
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c16:	4a5b      	ldr	r2, [pc, #364]	; (8007d84 <HAL_GPIO_Init+0x310>)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	089b      	lsrs	r3, r3, #2
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	220f      	movs	r2, #15
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	43db      	mvns	r3, r3
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	4013      	ands	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a52      	ldr	r2, [pc, #328]	; (8007d88 <HAL_GPIO_Init+0x314>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d02b      	beq.n	8007c9a <HAL_GPIO_Init+0x226>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a51      	ldr	r2, [pc, #324]	; (8007d8c <HAL_GPIO_Init+0x318>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d025      	beq.n	8007c96 <HAL_GPIO_Init+0x222>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a50      	ldr	r2, [pc, #320]	; (8007d90 <HAL_GPIO_Init+0x31c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d01f      	beq.n	8007c92 <HAL_GPIO_Init+0x21e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a4f      	ldr	r2, [pc, #316]	; (8007d94 <HAL_GPIO_Init+0x320>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d019      	beq.n	8007c8e <HAL_GPIO_Init+0x21a>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a4e      	ldr	r2, [pc, #312]	; (8007d98 <HAL_GPIO_Init+0x324>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_GPIO_Init+0x216>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a4d      	ldr	r2, [pc, #308]	; (8007d9c <HAL_GPIO_Init+0x328>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00d      	beq.n	8007c86 <HAL_GPIO_Init+0x212>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a4c      	ldr	r2, [pc, #304]	; (8007da0 <HAL_GPIO_Init+0x32c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <HAL_GPIO_Init+0x20e>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a4b      	ldr	r2, [pc, #300]	; (8007da4 <HAL_GPIO_Init+0x330>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d101      	bne.n	8007c7e <HAL_GPIO_Init+0x20a>
 8007c7a:	2307      	movs	r3, #7
 8007c7c:	e00e      	b.n	8007c9c <HAL_GPIO_Init+0x228>
 8007c7e:	2308      	movs	r3, #8
 8007c80:	e00c      	b.n	8007c9c <HAL_GPIO_Init+0x228>
 8007c82:	2306      	movs	r3, #6
 8007c84:	e00a      	b.n	8007c9c <HAL_GPIO_Init+0x228>
 8007c86:	2305      	movs	r3, #5
 8007c88:	e008      	b.n	8007c9c <HAL_GPIO_Init+0x228>
 8007c8a:	2304      	movs	r3, #4
 8007c8c:	e006      	b.n	8007c9c <HAL_GPIO_Init+0x228>
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e004      	b.n	8007c9c <HAL_GPIO_Init+0x228>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e002      	b.n	8007c9c <HAL_GPIO_Init+0x228>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <HAL_GPIO_Init+0x228>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	69fa      	ldr	r2, [r7, #28]
 8007c9e:	f002 0203 	and.w	r2, r2, #3
 8007ca2:	0092      	lsls	r2, r2, #2
 8007ca4:	4093      	lsls	r3, r2
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007cac:	4935      	ldr	r1, [pc, #212]	; (8007d84 <HAL_GPIO_Init+0x310>)
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	089b      	lsrs	r3, r3, #2
 8007cb2:	3302      	adds	r3, #2
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cba:	4b3b      	ldr	r3, [pc, #236]	; (8007da8 <HAL_GPIO_Init+0x334>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	43db      	mvns	r3, r3
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007cde:	4a32      	ldr	r2, [pc, #200]	; (8007da8 <HAL_GPIO_Init+0x334>)
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ce4:	4b30      	ldr	r3, [pc, #192]	; (8007da8 <HAL_GPIO_Init+0x334>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	43db      	mvns	r3, r3
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d08:	4a27      	ldr	r2, [pc, #156]	; (8007da8 <HAL_GPIO_Init+0x334>)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <HAL_GPIO_Init+0x334>)
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	43db      	mvns	r3, r3
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007d32:	4a1d      	ldr	r2, [pc, #116]	; (8007da8 <HAL_GPIO_Init+0x334>)
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007d38:	4b1b      	ldr	r3, [pc, #108]	; (8007da8 <HAL_GPIO_Init+0x334>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4013      	ands	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007d5c:	4a12      	ldr	r2, [pc, #72]	; (8007da8 <HAL_GPIO_Init+0x334>)
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	3301      	adds	r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	f67f ae90 	bls.w	8007a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	3724      	adds	r7, #36	; 0x24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40023800 	.word	0x40023800
 8007d84:	40013800 	.word	0x40013800
 8007d88:	40020000 	.word	0x40020000
 8007d8c:	40020400 	.word	0x40020400
 8007d90:	40020800 	.word	0x40020800
 8007d94:	40020c00 	.word	0x40020c00
 8007d98:	40021000 	.word	0x40021000
 8007d9c:	40021400 	.word	0x40021400
 8007da0:	40021800 	.word	0x40021800
 8007da4:	40021c00 	.word	0x40021c00
 8007da8:	40013c00 	.word	0x40013c00

08007dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	807b      	strh	r3, [r7, #2]
 8007db8:	4613      	mov	r3, r2
 8007dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007dbc:	787b      	ldrb	r3, [r7, #1]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007dc2:	887a      	ldrh	r2, [r7, #2]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007dc8:	e003      	b.n	8007dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007dca:	887b      	ldrh	r3, [r7, #2]
 8007dcc:	041a      	lsls	r2, r3, #16
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	619a      	str	r2, [r3, #24]
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007dea:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dec:	695a      	ldr	r2, [r3, #20]
 8007dee:	88fb      	ldrh	r3, [r7, #6]
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d006      	beq.n	8007e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007df6:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007df8:	88fb      	ldrh	r3, [r7, #6]
 8007dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007dfc:	88fb      	ldrh	r3, [r7, #6]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7f9 f9de 	bl	80011c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	40013c00 	.word	0x40013c00

08007e10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b08d      	sub	sp, #52	; 0x34
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f006 ff6b 	bl	800ed02 <USB_GetMode>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f040 848a 	bne.w	8008748 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f006 fecf 	bl	800ebdc <USB_ReadInterrupts>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 8480 	beq.w	8008746 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f006 febc 	bl	800ebdc <USB_ReadInterrupts>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d107      	bne.n	8007e7e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695a      	ldr	r2, [r3, #20]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f002 0202 	and.w	r2, r2, #2
 8007e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f006 feaa 	bl	800ebdc <USB_ReadInterrupts>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f003 0310 	and.w	r3, r3, #16
 8007e8e:	2b10      	cmp	r3, #16
 8007e90:	d161      	bne.n	8007f56 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699a      	ldr	r2, [r3, #24]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0210 	bic.w	r2, r2, #16
 8007ea0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f003 020f 	and.w	r2, r3, #15
 8007eae:	4613      	mov	r3, r2
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	0c5b      	lsrs	r3, r3, #17
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d124      	bne.n	8007f18 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d035      	beq.n	8007f46 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	461a      	mov	r2, r3
 8007eec:	6a38      	ldr	r0, [r7, #32]
 8007eee:	f006 fd23 	bl	800e938 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	691a      	ldr	r2, [r3, #16]
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	091b      	lsrs	r3, r3, #4
 8007efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007efe:	441a      	add	r2, r3
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	6a1a      	ldr	r2, [r3, #32]
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	091b      	lsrs	r3, r3, #4
 8007f0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f10:	441a      	add	r2, r3
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	621a      	str	r2, [r3, #32]
 8007f16:	e016      	b.n	8007f46 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	0c5b      	lsrs	r3, r3, #17
 8007f1c:	f003 030f 	and.w	r3, r3, #15
 8007f20:	2b06      	cmp	r3, #6
 8007f22:	d110      	bne.n	8007f46 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6a38      	ldr	r0, [r7, #32]
 8007f30:	f006 fd02 	bl	800e938 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	6a1a      	ldr	r2, [r3, #32]
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	091b      	lsrs	r3, r3, #4
 8007f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f40:	441a      	add	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699a      	ldr	r2, [r3, #24]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0210 	orr.w	r2, r2, #16
 8007f54:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f006 fe3e 	bl	800ebdc <USB_ReadInterrupts>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f6a:	f040 80a7 	bne.w	80080bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f006 fe43 	bl	800ec02 <USB_ReadDevAllOutEpInterrupt>
 8007f7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007f7e:	e099      	b.n	80080b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 808e 	beq.w	80080a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	4611      	mov	r1, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f006 fe67 	bl	800ec6a <USB_ReadDevOutEPInterrupt>
 8007f9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00c      	beq.n	8007fc2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fe61 	bl	8008c84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00c      	beq.n	8007fe6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd8:	461a      	mov	r2, r3
 8007fda:	2308      	movs	r3, #8
 8007fdc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 ff37 	bl	8008e54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	2310      	movs	r3, #16
 8008000:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d030      	beq.n	800806e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008014:	2b80      	cmp	r3, #128	; 0x80
 8008016:	d109      	bne.n	800802c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800802a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800802c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802e:	4613      	mov	r3, r2
 8008030:	00db      	lsls	r3, r3, #3
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4413      	add	r3, r2
 800803e:	3304      	adds	r3, #4
 8008040:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	78db      	ldrb	r3, [r3, #3]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d108      	bne.n	800805c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2200      	movs	r2, #0
 800804e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	b2db      	uxtb	r3, r3
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f00a f802 	bl	8012060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008068:	461a      	mov	r2, r3
 800806a:	2302      	movs	r3, #2
 800806c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f003 0320 	and.w	r3, r3, #32
 8008074:	2b00      	cmp	r3, #0
 8008076:	d008      	beq.n	800808a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008084:	461a      	mov	r2, r3
 8008086:	2320      	movs	r3, #32
 8008088:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d009      	beq.n	80080a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a0:	461a      	mov	r2, r3
 80080a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	3301      	adds	r3, #1
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	085b      	lsrs	r3, r3, #1
 80080b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f47f af62 	bne.w	8007f80 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f006 fd8b 	bl	800ebdc <USB_ReadInterrupts>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080d0:	f040 80db 	bne.w	800828a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4618      	mov	r0, r3
 80080da:	f006 fdac 	bl	800ec36 <USB_ReadDevAllInEpInterrupt>
 80080de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80080e4:	e0cd      	b.n	8008282 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80c2 	beq.w	8008276 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f8:	b2d2      	uxtb	r2, r2
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f006 fdd2 	bl	800eca6 <USB_ReadDevInEPInterrupt>
 8008102:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d057      	beq.n	80081be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	f003 030f 	and.w	r3, r3, #15
 8008114:	2201      	movs	r2, #1
 8008116:	fa02 f303 	lsl.w	r3, r2, r3
 800811a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	43db      	mvns	r3, r3
 8008128:	69f9      	ldr	r1, [r7, #28]
 800812a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800812e:	4013      	ands	r3, r2
 8008130:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813e:	461a      	mov	r2, r3
 8008140:	2301      	movs	r3, #1
 8008142:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d132      	bne.n	80081b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008150:	4613      	mov	r3, r2
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	440b      	add	r3, r1
 800815a:	334c      	adds	r3, #76	; 0x4c
 800815c:	6819      	ldr	r1, [r3, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	4613      	mov	r3, r2
 8008164:	00db      	lsls	r3, r3, #3
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4403      	add	r3, r0
 800816c:	3348      	adds	r3, #72	; 0x48
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4419      	add	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008176:	4613      	mov	r3, r2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4403      	add	r3, r0
 8008180:	334c      	adds	r3, #76	; 0x4c
 8008182:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	2b00      	cmp	r3, #0
 8008188:	d113      	bne.n	80081b2 <HAL_PCD_IRQHandler+0x3a2>
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	3354      	adds	r3, #84	; 0x54
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d108      	bne.n	80081b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80081aa:	461a      	mov	r2, r3
 80081ac:	2101      	movs	r1, #1
 80081ae:	f006 fdd9 	bl	800ed64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f009 fecc 	bl	8011f56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f003 0308 	and.w	r3, r3, #8
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d008      	beq.n	80081da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d4:	461a      	mov	r2, r3
 80081d6:	2308      	movs	r3, #8
 80081d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d008      	beq.n	80081f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f0:	461a      	mov	r2, r3
 80081f2:	2310      	movs	r3, #16
 80081f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d008      	beq.n	8008212 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820c:	461a      	mov	r2, r3
 800820e:	2340      	movs	r3, #64	; 0x40
 8008210:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d023      	beq.n	8008264 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800821c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800821e:	6a38      	ldr	r0, [r7, #32]
 8008220:	f005 fe22 	bl	800de68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008226:	4613      	mov	r3, r2
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	3338      	adds	r3, #56	; 0x38
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	3304      	adds	r3, #4
 8008236:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	78db      	ldrb	r3, [r3, #3]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d108      	bne.n	8008252 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2200      	movs	r2, #0
 8008244:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	b2db      	uxtb	r3, r3
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f009 ff19 	bl	8012084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825e:	461a      	mov	r2, r3
 8008260:	2302      	movs	r3, #2
 8008262:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800826e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fc79 	bl	8008b68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	3301      	adds	r3, #1
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	2b00      	cmp	r3, #0
 8008286:	f47f af2e 	bne.w	80080e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f006 fca4 	bl	800ebdc <USB_ReadInterrupts>
 8008294:	4603      	mov	r3, r0
 8008296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800829a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800829e:	d122      	bne.n	80082e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082ae:	f023 0301 	bic.w	r3, r3, #1
 80082b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d108      	bne.n	80082d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80082c6:	2100      	movs	r1, #0
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fe09 	bl	8008ee0 <HAL_PCDEx_LPM_Callback>
 80082ce:	e002      	b.n	80082d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f009 feb7 	bl	8012044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	695a      	ldr	r2, [r3, #20]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80082e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f006 fc76 	bl	800ebdc <USB_ReadInterrupts>
 80082f0:	4603      	mov	r3, r0
 80082f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082fa:	d112      	bne.n	8008322 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b01      	cmp	r3, #1
 800830a:	d102      	bne.n	8008312 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f009 fe73 	bl	8011ff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	695a      	ldr	r2, [r3, #20]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008320:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4618      	mov	r0, r3
 8008328:	f006 fc58 	bl	800ebdc <USB_ReadInterrupts>
 800832c:	4603      	mov	r3, r0
 800832e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008336:	f040 80b7 	bne.w	80084a8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2110      	movs	r1, #16
 8008354:	4618      	mov	r0, r3
 8008356:	f005 fd87 	bl	800de68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800835a:	2300      	movs	r3, #0
 800835c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800835e:	e046      	b.n	80083ee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836c:	461a      	mov	r2, r3
 800836e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008372:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008384:	0151      	lsls	r1, r2, #5
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	440a      	add	r2, r1
 800838a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008392:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	461a      	mov	r2, r3
 80083a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b8:	0151      	lsls	r1, r2, #5
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	440a      	add	r2, r1
 80083be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	3301      	adds	r3, #1
 80083ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d3b3      	bcc.n	8008360 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008406:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800840a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008410:	2b00      	cmp	r3, #0
 8008412:	d016      	beq.n	8008442 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008424:	f043 030b 	orr.w	r3, r3, #11
 8008428:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800843a:	f043 030b 	orr.w	r3, r3, #11
 800843e:	6453      	str	r3, [r2, #68]	; 0x44
 8008440:	e015      	b.n	800846e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008450:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008454:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008458:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008468:	f043 030b 	orr.w	r3, r3, #11
 800846c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800847c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008480:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008492:	461a      	mov	r2, r3
 8008494:	f006 fc66 	bl	800ed64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695a      	ldr	r2, [r3, #20]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80084a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f006 fb95 	bl	800ebdc <USB_ReadInterrupts>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084bc:	d124      	bne.n	8008508 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f006 fc2b 	bl	800ed1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f005 fcff 	bl	800ded0 <USB_GetDevSpeed>
 80084d2:	4603      	mov	r3, r0
 80084d4:	461a      	mov	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681c      	ldr	r4, [r3, #0]
 80084de:	f001 f96d 	bl	80097bc <HAL_RCC_GetHCLKFreq>
 80084e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	4620      	mov	r0, r4
 80084ee:	f005 fc19 	bl	800dd24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f009 fd57 	bl	8011fa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	695a      	ldr	r2, [r3, #20]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008506:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f006 fb65 	bl	800ebdc <USB_ReadInterrupts>
 8008512:	4603      	mov	r3, r0
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b08      	cmp	r3, #8
 800851a:	d10a      	bne.n	8008532 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f009 fd34 	bl	8011f8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	695a      	ldr	r2, [r3, #20]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f002 0208 	and.w	r2, r2, #8
 8008530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	f006 fb50 	bl	800ebdc <USB_ReadInterrupts>
 800853c:	4603      	mov	r3, r0
 800853e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008542:	2b80      	cmp	r3, #128	; 0x80
 8008544:	d122      	bne.n	800858c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008552:	2301      	movs	r3, #1
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
 8008556:	e014      	b.n	8008582 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855c:	4613      	mov	r3, r2
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d105      	bne.n	800857c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	b2db      	uxtb	r3, r3
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fac5 	bl	8008b06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	3301      	adds	r3, #1
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008588:	429a      	cmp	r2, r3
 800858a:	d3e5      	bcc.n	8008558 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f006 fb23 	bl	800ebdc <USB_ReadInterrupts>
 8008596:	4603      	mov	r3, r0
 8008598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800859c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085a0:	d13b      	bne.n	800861a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085a2:	2301      	movs	r3, #1
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
 80085a6:	e02b      	b.n	8008600 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085bc:	4613      	mov	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	3340      	adds	r3, #64	; 0x40
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d115      	bne.n	80085fa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80085ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	da12      	bge.n	80085fa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d8:	4613      	mov	r3, r2
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	333f      	adds	r3, #63	; 0x3f
 80085e4:	2201      	movs	r2, #1
 80085e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fa86 	bl	8008b06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	3301      	adds	r3, #1
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008606:	429a      	cmp	r2, r3
 8008608:	d3ce      	bcc.n	80085a8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	695a      	ldr	r2, [r3, #20]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f006 fadc 	bl	800ebdc <USB_ReadInterrupts>
 8008624:	4603      	mov	r3, r0
 8008626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800862a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800862e:	d155      	bne.n	80086dc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008630:	2301      	movs	r3, #1
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
 8008634:	e045      	b.n	80086c2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864a:	4613      	mov	r3, r2
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d12e      	bne.n	80086bc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800865e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008660:	2b00      	cmp	r3, #0
 8008662:	da2b      	bge.n	80086bc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008670:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008674:	429a      	cmp	r2, r3
 8008676:	d121      	bne.n	80086bc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867c:	4613      	mov	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800868a:	2201      	movs	r2, #1
 800868c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10a      	bne.n	80086bc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086b8:	6053      	str	r3, [r2, #4]
            break;
 80086ba:	e007      	b.n	80086cc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	3301      	adds	r3, #1
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d3b4      	bcc.n	8008636 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	695a      	ldr	r2, [r3, #20]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80086da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f006 fa7b 	bl	800ebdc <USB_ReadInterrupts>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f0:	d10a      	bne.n	8008708 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f009 fcd8 	bl	80120a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	695a      	ldr	r2, [r3, #20]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4618      	mov	r0, r3
 800870e:	f006 fa65 	bl	800ebdc <USB_ReadInterrupts>
 8008712:	4603      	mov	r3, r0
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b04      	cmp	r3, #4
 800871a:	d115      	bne.n	8008748 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f009 fcc8 	bl	80120c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6859      	ldr	r1, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	430a      	orrs	r2, r1
 8008742:	605a      	str	r2, [r3, #4]
 8008744:	e000      	b.n	8008748 <HAL_PCD_IRQHandler+0x938>
      return;
 8008746:	bf00      	nop
    }
  }
}
 8008748:	3734      	adds	r7, #52	; 0x34
 800874a:	46bd      	mov	sp, r7
 800874c:	bd90      	pop	{r4, r7, pc}

0800874e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	460b      	mov	r3, r1
 8008758:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_PCD_SetAddress+0x1a>
 8008764:	2302      	movs	r3, #2
 8008766:	e013      	b.n	8008790 <HAL_PCD_SetAddress+0x42>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	78fa      	ldrb	r2, [r7, #3]
 8008774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	78fa      	ldrb	r2, [r7, #3]
 800877e:	4611      	mov	r1, r2
 8008780:	4618      	mov	r0, r3
 8008782:	f006 fa05 	bl	800eb90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	4608      	mov	r0, r1
 80087a2:	4611      	mov	r1, r2
 80087a4:	461a      	mov	r2, r3
 80087a6:	4603      	mov	r3, r0
 80087a8:	70fb      	strb	r3, [r7, #3]
 80087aa:	460b      	mov	r3, r1
 80087ac:	803b      	strh	r3, [r7, #0]
 80087ae:	4613      	mov	r3, r2
 80087b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80087b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da0f      	bge.n	80087de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	f003 020f 	and.w	r2, r3, #15
 80087c4:	4613      	mov	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	3338      	adds	r3, #56	; 0x38
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	4413      	add	r3, r2
 80087d2:	3304      	adds	r3, #4
 80087d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	705a      	strb	r2, [r3, #1]
 80087dc:	e00f      	b.n	80087fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	f003 020f 	and.w	r2, r3, #15
 80087e4:	4613      	mov	r3, r2
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	4413      	add	r3, r2
 80087f4:	3304      	adds	r3, #4
 80087f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80087fe:	78fb      	ldrb	r3, [r7, #3]
 8008800:	f003 030f 	and.w	r3, r3, #15
 8008804:	b2da      	uxtb	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800880a:	883a      	ldrh	r2, [r7, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	78ba      	ldrb	r2, [r7, #2]
 8008814:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d004      	beq.n	8008828 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008828:	78bb      	ldrb	r3, [r7, #2]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d102      	bne.n	8008834 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <HAL_PCD_EP_Open+0xaa>
 800883e:	2302      	movs	r3, #2
 8008840:	e00e      	b.n	8008860 <HAL_PCD_EP_Open+0xc8>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	4618      	mov	r0, r3
 8008852:	f005 fb62 	bl	800df1a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800885e:	7afb      	ldrb	r3, [r7, #11]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	607a      	str	r2, [r7, #4]
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	460b      	mov	r3, r1
 8008876:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008878:	7afb      	ldrb	r3, [r7, #11]
 800887a:	f003 020f 	and.w	r2, r3, #15
 800887e:	4613      	mov	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4413      	add	r3, r2
 800888e:	3304      	adds	r3, #4
 8008890:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2200      	movs	r2, #0
 80088a2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2200      	movs	r2, #0
 80088a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088aa:	7afb      	ldrb	r3, [r7, #11]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d102      	bne.n	80088c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	f003 030f 	and.w	r3, r3, #15
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d109      	bne.n	80088e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	461a      	mov	r2, r3
 80088da:	6979      	ldr	r1, [r7, #20]
 80088dc:	f005 fdec 	bl	800e4b8 <USB_EP0StartXfer>
 80088e0:	e008      	b.n	80088f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	461a      	mov	r2, r3
 80088ee:	6979      	ldr	r1, [r7, #20]
 80088f0:	f005 fb9a 	bl	800e028 <USB_EPStartXfer>
  }

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b086      	sub	sp, #24
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	603b      	str	r3, [r7, #0]
 800890a:	460b      	mov	r3, r1
 800890c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800890e:	7afb      	ldrb	r3, [r7, #11]
 8008910:	f003 020f 	and.w	r2, r3, #15
 8008914:	4613      	mov	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	3338      	adds	r3, #56	; 0x38
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	3304      	adds	r3, #4
 8008924:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2200      	movs	r2, #0
 8008936:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2201      	movs	r2, #1
 800893c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	f003 030f 	and.w	r3, r3, #15
 8008944:	b2da      	uxtb	r2, r3
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d102      	bne.n	8008958 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008958:	7afb      	ldrb	r3, [r7, #11]
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	2b00      	cmp	r3, #0
 8008960:	d109      	bne.n	8008976 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	461a      	mov	r2, r3
 800896e:	6979      	ldr	r1, [r7, #20]
 8008970:	f005 fda2 	bl	800e4b8 <USB_EP0StartXfer>
 8008974:	e008      	b.n	8008988 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	461a      	mov	r2, r3
 8008982:	6979      	ldr	r1, [r7, #20]
 8008984:	f005 fb50 	bl	800e028 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	460b      	mov	r3, r1
 800899c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	f003 020f 	and.w	r2, r3, #15
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d901      	bls.n	80089b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e050      	b.n	8008a52 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80089b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da0f      	bge.n	80089d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	f003 020f 	and.w	r2, r3, #15
 80089be:	4613      	mov	r3, r2
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	3338      	adds	r3, #56	; 0x38
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	4413      	add	r3, r2
 80089cc:	3304      	adds	r3, #4
 80089ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	705a      	strb	r2, [r3, #1]
 80089d6:	e00d      	b.n	80089f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	4613      	mov	r3, r2
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	4413      	add	r3, r2
 80089ea:	3304      	adds	r3, #4
 80089ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	f003 030f 	and.w	r3, r3, #15
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_PCD_EP_SetStall+0x82>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e01e      	b.n	8008a52 <HAL_PCD_EP_SetStall+0xc0>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68f9      	ldr	r1, [r7, #12]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f005 ffe0 	bl	800e9e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a28:	78fb      	ldrb	r3, [r7, #3]
 8008a2a:	f003 030f 	and.w	r3, r3, #15
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	b2d9      	uxtb	r1, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a42:	461a      	mov	r2, r3
 8008a44:	f006 f98e 	bl	800ed64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	f003 020f 	and.w	r2, r3, #15
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d901      	bls.n	8008a78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e042      	b.n	8008afe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da0f      	bge.n	8008aa0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	f003 020f 	and.w	r2, r3, #15
 8008a86:	4613      	mov	r3, r2
 8008a88:	00db      	lsls	r3, r3, #3
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	3338      	adds	r3, #56	; 0x38
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	3304      	adds	r3, #4
 8008a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	705a      	strb	r2, [r3, #1]
 8008a9e:	e00f      	b.n	8008ac0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	f003 020f 	and.w	r2, r3, #15
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	00db      	lsls	r3, r3, #3
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_PCD_EP_ClrStall+0x86>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e00e      	b.n	8008afe <HAL_PCD_EP_ClrStall+0xa4>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68f9      	ldr	r1, [r7, #12]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f005 ffe8 	bl	800eac4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	da0c      	bge.n	8008b34 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	f003 020f 	and.w	r2, r3, #15
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	3338      	adds	r3, #56	; 0x38
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	3304      	adds	r3, #4
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	e00c      	b.n	8008b4e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	f003 020f 	and.w	r2, r3, #15
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68f9      	ldr	r1, [r7, #12]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f005 fe07 	bl	800e768 <USB_EPStopXfer>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08a      	sub	sp, #40	; 0x28
 8008b6c:	af02      	add	r7, sp, #8
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	3338      	adds	r3, #56	; 0x38
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a1a      	ldr	r2, [r3, #32]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d901      	bls.n	8008ba0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e06c      	b.n	8008c7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	699a      	ldr	r2, [r3, #24]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d902      	bls.n	8008bbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	3303      	adds	r3, #3
 8008bc0:	089b      	lsrs	r3, r3, #2
 8008bc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008bc4:	e02b      	b.n	8008c1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d902      	bls.n	8008be2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	3303      	adds	r3, #3
 8008be6:	089b      	lsrs	r3, r3, #2
 8008be8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6919      	ldr	r1, [r3, #16]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	4603      	mov	r3, r0
 8008c00:	6978      	ldr	r0, [r7, #20]
 8008c02:	f005 fe5b 	bl	800e8bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	691a      	ldr	r2, [r3, #16]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	441a      	add	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a1a      	ldr	r2, [r3, #32]
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	441a      	add	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d809      	bhi.n	8008c48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a1a      	ldr	r2, [r3, #32]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d203      	bcs.n	8008c48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1be      	bne.n	8008bc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d811      	bhi.n	8008c78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	6939      	ldr	r1, [r7, #16]
 8008c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c74:	4013      	ands	r3, r2
 8008c76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3720      	adds	r7, #32
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	333c      	adds	r3, #60	; 0x3c
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d17b      	bne.n	8008db2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d015      	beq.n	8008cf0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	4a61      	ldr	r2, [pc, #388]	; (8008e4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	f240 80b9 	bls.w	8008e40 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 80b3 	beq.w	8008e40 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cec:	6093      	str	r3, [r2, #8]
 8008cee:	e0a7      	b.n	8008e40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d06:	461a      	mov	r2, r3
 8008d08:	2320      	movs	r3, #32
 8008d0a:	6093      	str	r3, [r2, #8]
 8008d0c:	e098      	b.n	8008e40 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 8093 	bne.w	8008e40 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	4a4b      	ldr	r2, [pc, #300]	; (8008e4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d90f      	bls.n	8008d42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00a      	beq.n	8008d42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d3e:	6093      	str	r3, [r2, #8]
 8008d40:	e07e      	b.n	8008e40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	4613      	mov	r3, r2
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	4413      	add	r3, r2
 8008d54:	3304      	adds	r3, #4
 8008d56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	69da      	ldr	r2, [r3, #28]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	0159      	lsls	r1, r3, #5
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	440b      	add	r3, r1
 8008d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d6e:	1ad2      	subs	r2, r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d114      	bne.n	8008da4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d109      	bne.n	8008d96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2101      	movs	r1, #1
 8008d90:	f005 ffe8 	bl	800ed64 <USB_EP0_OutStart>
 8008d94:	e006      	b.n	8008da4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	691a      	ldr	r2, [r3, #16]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	441a      	add	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f009 f8b8 	bl	8011f20 <HAL_PCD_DataOutStageCallback>
 8008db0:	e046      	b.n	8008e40 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	4a26      	ldr	r2, [pc, #152]	; (8008e50 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d124      	bne.n	8008e04 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd6:	6093      	str	r3, [r2, #8]
 8008dd8:	e032      	b.n	8008e40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d008      	beq.n	8008df6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df0:	461a      	mov	r2, r3
 8008df2:	2320      	movs	r3, #32
 8008df4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f009 f88f 	bl	8011f20 <HAL_PCD_DataOutStageCallback>
 8008e02:	e01d      	b.n	8008e40 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d114      	bne.n	8008e34 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d108      	bne.n	8008e34 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6818      	ldr	r0, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	2100      	movs	r1, #0
 8008e30:	f005 ff98 	bl	800ed64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f009 f870 	bl	8011f20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	4f54300a 	.word	0x4f54300a
 8008e50:	4f54310a 	.word	0x4f54310a

08008e54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	333c      	adds	r3, #60	; 0x3c
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4a15      	ldr	r2, [pc, #84]	; (8008edc <PCD_EP_OutSetupPacket_int+0x88>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d90e      	bls.n	8008ea8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d009      	beq.n	8008ea8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ea6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f009 f827 	bl	8011efc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4a0a      	ldr	r2, [pc, #40]	; (8008edc <PCD_EP_OutSetupPacket_int+0x88>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d90c      	bls.n	8008ed0 <PCD_EP_OutSetupPacket_int+0x7c>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d108      	bne.n	8008ed0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ec8:	461a      	mov	r2, r3
 8008eca:	2101      	movs	r1, #1
 8008ecc:	f005 ff4a 	bl	800ed64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	4f54300a 	.word	0x4f54300a

08008ee0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e267      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d075      	beq.n	8009002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f16:	4b88      	ldr	r3, [pc, #544]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f003 030c 	and.w	r3, r3, #12
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d00c      	beq.n	8008f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f22:	4b85      	ldr	r3, [pc, #532]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f2a:	2b08      	cmp	r3, #8
 8008f2c:	d112      	bne.n	8008f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f2e:	4b82      	ldr	r3, [pc, #520]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f3a:	d10b      	bne.n	8008f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f3c:	4b7e      	ldr	r3, [pc, #504]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d05b      	beq.n	8009000 <HAL_RCC_OscConfig+0x108>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d157      	bne.n	8009000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e242      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f5c:	d106      	bne.n	8008f6c <HAL_RCC_OscConfig+0x74>
 8008f5e:	4b76      	ldr	r3, [pc, #472]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a75      	ldr	r2, [pc, #468]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	e01d      	b.n	8008fa8 <HAL_RCC_OscConfig+0xb0>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f74:	d10c      	bne.n	8008f90 <HAL_RCC_OscConfig+0x98>
 8008f76:	4b70      	ldr	r3, [pc, #448]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a6f      	ldr	r2, [pc, #444]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	4b6d      	ldr	r3, [pc, #436]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a6c      	ldr	r2, [pc, #432]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	e00b      	b.n	8008fa8 <HAL_RCC_OscConfig+0xb0>
 8008f90:	4b69      	ldr	r3, [pc, #420]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a68      	ldr	r2, [pc, #416]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	4b66      	ldr	r3, [pc, #408]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a65      	ldr	r2, [pc, #404]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d013      	beq.n	8008fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fb0:	f7fd fc3a 	bl	8006828 <HAL_GetTick>
 8008fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fb8:	f7fd fc36 	bl	8006828 <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b64      	cmp	r3, #100	; 0x64
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e207      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fca:	4b5b      	ldr	r3, [pc, #364]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0f0      	beq.n	8008fb8 <HAL_RCC_OscConfig+0xc0>
 8008fd6:	e014      	b.n	8009002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fd8:	f7fd fc26 	bl	8006828 <HAL_GetTick>
 8008fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fde:	e008      	b.n	8008ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fe0:	f7fd fc22 	bl	8006828 <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	2b64      	cmp	r3, #100	; 0x64
 8008fec:	d901      	bls.n	8008ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	e1f3      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ff2:	4b51      	ldr	r3, [pc, #324]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1f0      	bne.n	8008fe0 <HAL_RCC_OscConfig+0xe8>
 8008ffe:	e000      	b.n	8009002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b00      	cmp	r3, #0
 800900c:	d063      	beq.n	80090d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800900e:	4b4a      	ldr	r3, [pc, #296]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f003 030c 	and.w	r3, r3, #12
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800901a:	4b47      	ldr	r3, [pc, #284]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009022:	2b08      	cmp	r3, #8
 8009024:	d11c      	bne.n	8009060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009026:	4b44      	ldr	r3, [pc, #272]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d116      	bne.n	8009060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009032:	4b41      	ldr	r3, [pc, #260]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d005      	beq.n	800904a <HAL_RCC_OscConfig+0x152>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d001      	beq.n	800904a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e1c7      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800904a:	4b3b      	ldr	r3, [pc, #236]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	4937      	ldr	r1, [pc, #220]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 800905a:	4313      	orrs	r3, r2
 800905c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800905e:	e03a      	b.n	80090d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d020      	beq.n	80090aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009068:	4b34      	ldr	r3, [pc, #208]	; (800913c <HAL_RCC_OscConfig+0x244>)
 800906a:	2201      	movs	r2, #1
 800906c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800906e:	f7fd fbdb 	bl	8006828 <HAL_GetTick>
 8009072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009074:	e008      	b.n	8009088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009076:	f7fd fbd7 	bl	8006828 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	2b02      	cmp	r3, #2
 8009082:	d901      	bls.n	8009088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e1a8      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009088:	4b2b      	ldr	r3, [pc, #172]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0302 	and.w	r3, r3, #2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0f0      	beq.n	8009076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009094:	4b28      	ldr	r3, [pc, #160]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	4925      	ldr	r1, [pc, #148]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 80090a4:	4313      	orrs	r3, r2
 80090a6:	600b      	str	r3, [r1, #0]
 80090a8:	e015      	b.n	80090d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090aa:	4b24      	ldr	r3, [pc, #144]	; (800913c <HAL_RCC_OscConfig+0x244>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090b0:	f7fd fbba 	bl	8006828 <HAL_GetTick>
 80090b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090b6:	e008      	b.n	80090ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090b8:	f7fd fbb6 	bl	8006828 <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d901      	bls.n	80090ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e187      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090ca:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1f0      	bne.n	80090b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0308 	and.w	r3, r3, #8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d036      	beq.n	8009150 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d016      	beq.n	8009118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090ea:	4b15      	ldr	r3, [pc, #84]	; (8009140 <HAL_RCC_OscConfig+0x248>)
 80090ec:	2201      	movs	r2, #1
 80090ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f0:	f7fd fb9a 	bl	8006828 <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090f8:	f7fd fb96 	bl	8006828 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e167      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800910a:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <HAL_RCC_OscConfig+0x240>)
 800910c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0f0      	beq.n	80090f8 <HAL_RCC_OscConfig+0x200>
 8009116:	e01b      	b.n	8009150 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009118:	4b09      	ldr	r3, [pc, #36]	; (8009140 <HAL_RCC_OscConfig+0x248>)
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800911e:	f7fd fb83 	bl	8006828 <HAL_GetTick>
 8009122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009124:	e00e      	b.n	8009144 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009126:	f7fd fb7f 	bl	8006828 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d907      	bls.n	8009144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e150      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
 8009138:	40023800 	.word	0x40023800
 800913c:	42470000 	.word	0x42470000
 8009140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009144:	4b88      	ldr	r3, [pc, #544]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1ea      	bne.n	8009126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8097 	beq.w	800928c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800915e:	2300      	movs	r3, #0
 8009160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009162:	4b81      	ldr	r3, [pc, #516]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10f      	bne.n	800918e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800916e:	2300      	movs	r3, #0
 8009170:	60bb      	str	r3, [r7, #8]
 8009172:	4b7d      	ldr	r3, [pc, #500]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	4a7c      	ldr	r2, [pc, #496]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800917c:	6413      	str	r3, [r2, #64]	; 0x40
 800917e:	4b7a      	ldr	r3, [pc, #488]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009186:	60bb      	str	r3, [r7, #8]
 8009188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800918a:	2301      	movs	r3, #1
 800918c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800918e:	4b77      	ldr	r3, [pc, #476]	; (800936c <HAL_RCC_OscConfig+0x474>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009196:	2b00      	cmp	r3, #0
 8009198:	d118      	bne.n	80091cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800919a:	4b74      	ldr	r3, [pc, #464]	; (800936c <HAL_RCC_OscConfig+0x474>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a73      	ldr	r2, [pc, #460]	; (800936c <HAL_RCC_OscConfig+0x474>)
 80091a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091a6:	f7fd fb3f 	bl	8006828 <HAL_GetTick>
 80091aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091ac:	e008      	b.n	80091c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091ae:	f7fd fb3b 	bl	8006828 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d901      	bls.n	80091c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e10c      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091c0:	4b6a      	ldr	r3, [pc, #424]	; (800936c <HAL_RCC_OscConfig+0x474>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0f0      	beq.n	80091ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d106      	bne.n	80091e2 <HAL_RCC_OscConfig+0x2ea>
 80091d4:	4b64      	ldr	r3, [pc, #400]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 80091d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d8:	4a63      	ldr	r2, [pc, #396]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 80091da:	f043 0301 	orr.w	r3, r3, #1
 80091de:	6713      	str	r3, [r2, #112]	; 0x70
 80091e0:	e01c      	b.n	800921c <HAL_RCC_OscConfig+0x324>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	d10c      	bne.n	8009204 <HAL_RCC_OscConfig+0x30c>
 80091ea:	4b5f      	ldr	r3, [pc, #380]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 80091ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ee:	4a5e      	ldr	r2, [pc, #376]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 80091f0:	f043 0304 	orr.w	r3, r3, #4
 80091f4:	6713      	str	r3, [r2, #112]	; 0x70
 80091f6:	4b5c      	ldr	r3, [pc, #368]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 80091f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fa:	4a5b      	ldr	r2, [pc, #364]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 80091fc:	f043 0301 	orr.w	r3, r3, #1
 8009200:	6713      	str	r3, [r2, #112]	; 0x70
 8009202:	e00b      	b.n	800921c <HAL_RCC_OscConfig+0x324>
 8009204:	4b58      	ldr	r3, [pc, #352]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009208:	4a57      	ldr	r2, [pc, #348]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 800920a:	f023 0301 	bic.w	r3, r3, #1
 800920e:	6713      	str	r3, [r2, #112]	; 0x70
 8009210:	4b55      	ldr	r3, [pc, #340]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009214:	4a54      	ldr	r2, [pc, #336]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009216:	f023 0304 	bic.w	r3, r3, #4
 800921a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d015      	beq.n	8009250 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009224:	f7fd fb00 	bl	8006828 <HAL_GetTick>
 8009228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800922a:	e00a      	b.n	8009242 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800922c:	f7fd fafc 	bl	8006828 <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	f241 3288 	movw	r2, #5000	; 0x1388
 800923a:	4293      	cmp	r3, r2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e0cb      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009242:	4b49      	ldr	r3, [pc, #292]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0ee      	beq.n	800922c <HAL_RCC_OscConfig+0x334>
 800924e:	e014      	b.n	800927a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009250:	f7fd faea 	bl	8006828 <HAL_GetTick>
 8009254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009256:	e00a      	b.n	800926e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009258:	f7fd fae6 	bl	8006828 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	f241 3288 	movw	r2, #5000	; 0x1388
 8009266:	4293      	cmp	r3, r2
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e0b5      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800926e:	4b3e      	ldr	r3, [pc, #248]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1ee      	bne.n	8009258 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800927a:	7dfb      	ldrb	r3, [r7, #23]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d105      	bne.n	800928c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009280:	4b39      	ldr	r3, [pc, #228]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009284:	4a38      	ldr	r2, [pc, #224]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800928a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 80a1 	beq.w	80093d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009296:	4b34      	ldr	r3, [pc, #208]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f003 030c 	and.w	r3, r3, #12
 800929e:	2b08      	cmp	r3, #8
 80092a0:	d05c      	beq.n	800935c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d141      	bne.n	800932e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092aa:	4b31      	ldr	r3, [pc, #196]	; (8009370 <HAL_RCC_OscConfig+0x478>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092b0:	f7fd faba 	bl	8006828 <HAL_GetTick>
 80092b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092b8:	f7fd fab6 	bl	8006828 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e087      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092ca:	4b27      	ldr	r3, [pc, #156]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f0      	bne.n	80092b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	69da      	ldr	r2, [r3, #28]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	019b      	lsls	r3, r3, #6
 80092e6:	431a      	orrs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	085b      	lsrs	r3, r3, #1
 80092ee:	3b01      	subs	r3, #1
 80092f0:	041b      	lsls	r3, r3, #16
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	061b      	lsls	r3, r3, #24
 80092fa:	491b      	ldr	r1, [pc, #108]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 80092fc:	4313      	orrs	r3, r2
 80092fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009300:	4b1b      	ldr	r3, [pc, #108]	; (8009370 <HAL_RCC_OscConfig+0x478>)
 8009302:	2201      	movs	r2, #1
 8009304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009306:	f7fd fa8f 	bl	8006828 <HAL_GetTick>
 800930a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800930c:	e008      	b.n	8009320 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800930e:	f7fd fa8b 	bl	8006828 <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d901      	bls.n	8009320 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e05c      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009320:	4b11      	ldr	r3, [pc, #68]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0f0      	beq.n	800930e <HAL_RCC_OscConfig+0x416>
 800932c:	e054      	b.n	80093d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800932e:	4b10      	ldr	r3, [pc, #64]	; (8009370 <HAL_RCC_OscConfig+0x478>)
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009334:	f7fd fa78 	bl	8006828 <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800933a:	e008      	b.n	800934e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800933c:	f7fd fa74 	bl	8006828 <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	2b02      	cmp	r3, #2
 8009348:	d901      	bls.n	800934e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e045      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800934e:	4b06      	ldr	r3, [pc, #24]	; (8009368 <HAL_RCC_OscConfig+0x470>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1f0      	bne.n	800933c <HAL_RCC_OscConfig+0x444>
 800935a:	e03d      	b.n	80093d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d107      	bne.n	8009374 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e038      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
 8009368:	40023800 	.word	0x40023800
 800936c:	40007000 	.word	0x40007000
 8009370:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009374:	4b1b      	ldr	r3, [pc, #108]	; (80093e4 <HAL_RCC_OscConfig+0x4ec>)
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d028      	beq.n	80093d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800938c:	429a      	cmp	r2, r3
 800938e:	d121      	bne.n	80093d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800939a:	429a      	cmp	r2, r3
 800939c:	d11a      	bne.n	80093d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80093a4:	4013      	ands	r3, r2
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80093aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d111      	bne.n	80093d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ba:	085b      	lsrs	r3, r3, #1
 80093bc:	3b01      	subs	r3, #1
 80093be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d107      	bne.n	80093d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d001      	beq.n	80093d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e000      	b.n	80093da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	40023800 	.word	0x40023800

080093e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e0cc      	b.n	8009596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093fc:	4b68      	ldr	r3, [pc, #416]	; (80095a0 <HAL_RCC_ClockConfig+0x1b8>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0307 	and.w	r3, r3, #7
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d90c      	bls.n	8009424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800940a:	4b65      	ldr	r3, [pc, #404]	; (80095a0 <HAL_RCC_ClockConfig+0x1b8>)
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009412:	4b63      	ldr	r3, [pc, #396]	; (80095a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d001      	beq.n	8009424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e0b8      	b.n	8009596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d020      	beq.n	8009472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800943c:	4b59      	ldr	r3, [pc, #356]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	4a58      	ldr	r2, [pc, #352]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009454:	4b53      	ldr	r3, [pc, #332]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	4a52      	ldr	r2, [pc, #328]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 800945a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800945e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009460:	4b50      	ldr	r3, [pc, #320]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	494d      	ldr	r1, [pc, #308]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 800946e:	4313      	orrs	r3, r2
 8009470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	d044      	beq.n	8009508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d107      	bne.n	8009496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009486:	4b47      	ldr	r3, [pc, #284]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d119      	bne.n	80094c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e07f      	b.n	8009596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2b02      	cmp	r3, #2
 800949c:	d003      	beq.n	80094a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d107      	bne.n	80094b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094a6:	4b3f      	ldr	r3, [pc, #252]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d109      	bne.n	80094c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e06f      	b.n	8009596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094b6:	4b3b      	ldr	r3, [pc, #236]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e067      	b.n	8009596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094c6:	4b37      	ldr	r3, [pc, #220]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f023 0203 	bic.w	r2, r3, #3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	4934      	ldr	r1, [pc, #208]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094d8:	f7fd f9a6 	bl	8006828 <HAL_GetTick>
 80094dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094de:	e00a      	b.n	80094f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094e0:	f7fd f9a2 	bl	8006828 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d901      	bls.n	80094f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e04f      	b.n	8009596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094f6:	4b2b      	ldr	r3, [pc, #172]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 020c 	and.w	r2, r3, #12
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	429a      	cmp	r2, r3
 8009506:	d1eb      	bne.n	80094e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009508:	4b25      	ldr	r3, [pc, #148]	; (80095a0 <HAL_RCC_ClockConfig+0x1b8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0307 	and.w	r3, r3, #7
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d20c      	bcs.n	8009530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009516:	4b22      	ldr	r3, [pc, #136]	; (80095a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	b2d2      	uxtb	r2, r2
 800951c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800951e:	4b20      	ldr	r3, [pc, #128]	; (80095a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	429a      	cmp	r2, r3
 800952a:	d001      	beq.n	8009530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e032      	b.n	8009596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d008      	beq.n	800954e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800953c:	4b19      	ldr	r3, [pc, #100]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	4916      	ldr	r1, [pc, #88]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 800954a:	4313      	orrs	r3, r2
 800954c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0308 	and.w	r3, r3, #8
 8009556:	2b00      	cmp	r3, #0
 8009558:	d009      	beq.n	800956e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800955a:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	490e      	ldr	r1, [pc, #56]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 800956a:	4313      	orrs	r3, r2
 800956c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800956e:	f000 f821 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 8009572:	4602      	mov	r2, r0
 8009574:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	091b      	lsrs	r3, r3, #4
 800957a:	f003 030f 	and.w	r3, r3, #15
 800957e:	490a      	ldr	r1, [pc, #40]	; (80095a8 <HAL_RCC_ClockConfig+0x1c0>)
 8009580:	5ccb      	ldrb	r3, [r1, r3]
 8009582:	fa22 f303 	lsr.w	r3, r2, r3
 8009586:	4a09      	ldr	r2, [pc, #36]	; (80095ac <HAL_RCC_ClockConfig+0x1c4>)
 8009588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <HAL_RCC_ClockConfig+0x1c8>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f7f9 fb9c 	bl	8002ccc <HAL_InitTick>

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	40023c00 	.word	0x40023c00
 80095a4:	40023800 	.word	0x40023800
 80095a8:	08013b5c 	.word	0x08013b5c
 80095ac:	20000000 	.word	0x20000000
 80095b0:	20000004 	.word	0x20000004

080095b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b8:	b094      	sub	sp, #80	; 0x50
 80095ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	647b      	str	r3, [r7, #68]	; 0x44
 80095c0:	2300      	movs	r3, #0
 80095c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095c4:	2300      	movs	r3, #0
 80095c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095cc:	4b79      	ldr	r3, [pc, #484]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 030c 	and.w	r3, r3, #12
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d00d      	beq.n	80095f4 <HAL_RCC_GetSysClockFreq+0x40>
 80095d8:	2b08      	cmp	r3, #8
 80095da:	f200 80e1 	bhi.w	80097a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <HAL_RCC_GetSysClockFreq+0x34>
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d003      	beq.n	80095ee <HAL_RCC_GetSysClockFreq+0x3a>
 80095e6:	e0db      	b.n	80097a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80095e8:	4b73      	ldr	r3, [pc, #460]	; (80097b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80095ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80095ec:	e0db      	b.n	80097a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80095ee:	4b72      	ldr	r3, [pc, #456]	; (80097b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80095f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80095f2:	e0d8      	b.n	80097a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80095f4:	4b6f      	ldr	r3, [pc, #444]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80095fe:	4b6d      	ldr	r3, [pc, #436]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d063      	beq.n	80096d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800960a:	4b6a      	ldr	r3, [pc, #424]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	099b      	lsrs	r3, r3, #6
 8009610:	2200      	movs	r2, #0
 8009612:	63bb      	str	r3, [r7, #56]	; 0x38
 8009614:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961c:	633b      	str	r3, [r7, #48]	; 0x30
 800961e:	2300      	movs	r3, #0
 8009620:	637b      	str	r3, [r7, #52]	; 0x34
 8009622:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009626:	4622      	mov	r2, r4
 8009628:	462b      	mov	r3, r5
 800962a:	f04f 0000 	mov.w	r0, #0
 800962e:	f04f 0100 	mov.w	r1, #0
 8009632:	0159      	lsls	r1, r3, #5
 8009634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009638:	0150      	lsls	r0, r2, #5
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4621      	mov	r1, r4
 8009640:	1a51      	subs	r1, r2, r1
 8009642:	6139      	str	r1, [r7, #16]
 8009644:	4629      	mov	r1, r5
 8009646:	eb63 0301 	sbc.w	r3, r3, r1
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	f04f 0200 	mov.w	r2, #0
 8009650:	f04f 0300 	mov.w	r3, #0
 8009654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009658:	4659      	mov	r1, fp
 800965a:	018b      	lsls	r3, r1, #6
 800965c:	4651      	mov	r1, sl
 800965e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009662:	4651      	mov	r1, sl
 8009664:	018a      	lsls	r2, r1, #6
 8009666:	4651      	mov	r1, sl
 8009668:	ebb2 0801 	subs.w	r8, r2, r1
 800966c:	4659      	mov	r1, fp
 800966e:	eb63 0901 	sbc.w	r9, r3, r1
 8009672:	f04f 0200 	mov.w	r2, #0
 8009676:	f04f 0300 	mov.w	r3, #0
 800967a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800967e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009686:	4690      	mov	r8, r2
 8009688:	4699      	mov	r9, r3
 800968a:	4623      	mov	r3, r4
 800968c:	eb18 0303 	adds.w	r3, r8, r3
 8009690:	60bb      	str	r3, [r7, #8]
 8009692:	462b      	mov	r3, r5
 8009694:	eb49 0303 	adc.w	r3, r9, r3
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	f04f 0200 	mov.w	r2, #0
 800969e:	f04f 0300 	mov.w	r3, #0
 80096a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80096a6:	4629      	mov	r1, r5
 80096a8:	028b      	lsls	r3, r1, #10
 80096aa:	4621      	mov	r1, r4
 80096ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80096b0:	4621      	mov	r1, r4
 80096b2:	028a      	lsls	r2, r1, #10
 80096b4:	4610      	mov	r0, r2
 80096b6:	4619      	mov	r1, r3
 80096b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ba:	2200      	movs	r2, #0
 80096bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80096be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096c4:	f7f7 fa48 	bl	8000b58 <__aeabi_uldivmod>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4613      	mov	r3, r2
 80096ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096d0:	e058      	b.n	8009784 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096d2:	4b38      	ldr	r3, [pc, #224]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	2200      	movs	r2, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	4611      	mov	r1, r2
 80096de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80096e2:	623b      	str	r3, [r7, #32]
 80096e4:	2300      	movs	r3, #0
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
 80096e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80096ec:	4642      	mov	r2, r8
 80096ee:	464b      	mov	r3, r9
 80096f0:	f04f 0000 	mov.w	r0, #0
 80096f4:	f04f 0100 	mov.w	r1, #0
 80096f8:	0159      	lsls	r1, r3, #5
 80096fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096fe:	0150      	lsls	r0, r2, #5
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	4641      	mov	r1, r8
 8009706:	ebb2 0a01 	subs.w	sl, r2, r1
 800970a:	4649      	mov	r1, r9
 800970c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009710:	f04f 0200 	mov.w	r2, #0
 8009714:	f04f 0300 	mov.w	r3, #0
 8009718:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800971c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009720:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009724:	ebb2 040a 	subs.w	r4, r2, sl
 8009728:	eb63 050b 	sbc.w	r5, r3, fp
 800972c:	f04f 0200 	mov.w	r2, #0
 8009730:	f04f 0300 	mov.w	r3, #0
 8009734:	00eb      	lsls	r3, r5, #3
 8009736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800973a:	00e2      	lsls	r2, r4, #3
 800973c:	4614      	mov	r4, r2
 800973e:	461d      	mov	r5, r3
 8009740:	4643      	mov	r3, r8
 8009742:	18e3      	adds	r3, r4, r3
 8009744:	603b      	str	r3, [r7, #0]
 8009746:	464b      	mov	r3, r9
 8009748:	eb45 0303 	adc.w	r3, r5, r3
 800974c:	607b      	str	r3, [r7, #4]
 800974e:	f04f 0200 	mov.w	r2, #0
 8009752:	f04f 0300 	mov.w	r3, #0
 8009756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800975a:	4629      	mov	r1, r5
 800975c:	028b      	lsls	r3, r1, #10
 800975e:	4621      	mov	r1, r4
 8009760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009764:	4621      	mov	r1, r4
 8009766:	028a      	lsls	r2, r1, #10
 8009768:	4610      	mov	r0, r2
 800976a:	4619      	mov	r1, r3
 800976c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800976e:	2200      	movs	r2, #0
 8009770:	61bb      	str	r3, [r7, #24]
 8009772:	61fa      	str	r2, [r7, #28]
 8009774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009778:	f7f7 f9ee 	bl	8000b58 <__aeabi_uldivmod>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4613      	mov	r3, r2
 8009782:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009784:	4b0b      	ldr	r3, [pc, #44]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	0c1b      	lsrs	r3, r3, #16
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	3301      	adds	r3, #1
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009794:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009798:	fbb2 f3f3 	udiv	r3, r2, r3
 800979c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800979e:	e002      	b.n	80097a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80097a0:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80097a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80097a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80097a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3750      	adds	r7, #80	; 0x50
 80097ac:	46bd      	mov	sp, r7
 80097ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097b2:	bf00      	nop
 80097b4:	40023800 	.word	0x40023800
 80097b8:	00f42400 	.word	0x00f42400

080097bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097c0:	4b03      	ldr	r3, [pc, #12]	; (80097d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80097c2:	681b      	ldr	r3, [r3, #0]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20000000 	.word	0x20000000

080097d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80097d8:	f7ff fff0 	bl	80097bc <HAL_RCC_GetHCLKFreq>
 80097dc:	4602      	mov	r2, r0
 80097de:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	0a9b      	lsrs	r3, r3, #10
 80097e4:	f003 0307 	and.w	r3, r3, #7
 80097e8:	4903      	ldr	r1, [pc, #12]	; (80097f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097ea:	5ccb      	ldrb	r3, [r1, r3]
 80097ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	40023800 	.word	0x40023800
 80097f8:	08013b6c 	.word	0x08013b6c

080097fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009800:	f7ff ffdc 	bl	80097bc <HAL_RCC_GetHCLKFreq>
 8009804:	4602      	mov	r2, r0
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	0b5b      	lsrs	r3, r3, #13
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	4903      	ldr	r1, [pc, #12]	; (8009820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009812:	5ccb      	ldrb	r3, [r1, r3]
 8009814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009818:	4618      	mov	r0, r3
 800981a:	bd80      	pop	{r7, pc}
 800981c:	40023800 	.word	0x40023800
 8009820:	08013b6c 	.word	0x08013b6c

08009824 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	220f      	movs	r2, #15
 8009832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009834:	4b12      	ldr	r3, [pc, #72]	; (8009880 <HAL_RCC_GetClockConfig+0x5c>)
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f003 0203 	and.w	r2, r3, #3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009840:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <HAL_RCC_GetClockConfig+0x5c>)
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800984c:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <HAL_RCC_GetClockConfig+0x5c>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009858:	4b09      	ldr	r3, [pc, #36]	; (8009880 <HAL_RCC_GetClockConfig+0x5c>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	08db      	lsrs	r3, r3, #3
 800985e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009866:	4b07      	ldr	r3, [pc, #28]	; (8009884 <HAL_RCC_GetClockConfig+0x60>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0207 	and.w	r2, r3, #7
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	601a      	str	r2, [r3, #0]
}
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	40023800 	.word	0x40023800
 8009884:	40023c00 	.word	0x40023c00

08009888 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e022      	b.n	80098e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d105      	bne.n	80098b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7f8 fe3f 	bl	8002530 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2203      	movs	r2, #3
 80098b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f814 	bl	80098e8 <HAL_SD_InitCard>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e00a      	b.n	80098e0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098e8:	b5b0      	push	{r4, r5, r7, lr}
 80098ea:	b08e      	sub	sp, #56	; 0x38
 80098ec:	af04      	add	r7, sp, #16
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80098f0:	2300      	movs	r3, #0
 80098f2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80098f4:	2300      	movs	r3, #0
 80098f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80098f8:	2300      	movs	r3, #0
 80098fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009900:	2300      	movs	r3, #0
 8009902:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009904:	2376      	movs	r3, #118	; 0x76
 8009906:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681d      	ldr	r5, [r3, #0]
 800990c:	466c      	mov	r4, sp
 800990e:	f107 0314 	add.w	r3, r7, #20
 8009912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800991a:	f107 0308 	add.w	r3, r7, #8
 800991e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009920:	4628      	mov	r0, r5
 8009922:	f003 fd69 	bl	800d3f8 <SDIO_Init>
 8009926:	4603      	mov	r3, r0
 8009928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800992c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e04f      	b.n	80099d8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009938:	4b29      	ldr	r3, [pc, #164]	; (80099e0 <HAL_SD_InitCard+0xf8>)
 800993a:	2200      	movs	r2, #0
 800993c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4618      	mov	r0, r3
 8009944:	f003 fd90 	bl	800d468 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009948:	4b25      	ldr	r3, [pc, #148]	; (80099e0 <HAL_SD_InitCard+0xf8>)
 800994a:	2201      	movs	r2, #1
 800994c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800994e:	2002      	movs	r0, #2
 8009950:	f7fc ff76 	bl	8006840 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fb53 	bl	800a000 <SD_PowerON>
 800995a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	431a      	orrs	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e02e      	b.n	80099d8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa72 	bl	8009e64 <SD_InitCard>
 8009980:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00b      	beq.n	80099a0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e01b      	b.n	80099d8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099a8:	4618      	mov	r0, r3
 80099aa:	f003 fdef 	bl	800d58c <SDMMC_CmdBlockLength>
 80099ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00f      	beq.n	80099d6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a0a      	ldr	r2, [pc, #40]	; (80099e4 <HAL_SD_InitCard+0xfc>)
 80099bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	431a      	orrs	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e000      	b.n	80099d8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3728      	adds	r7, #40	; 0x28
 80099dc:	46bd      	mov	sp, r7
 80099de:	bdb0      	pop	{r4, r5, r7, pc}
 80099e0:	422580a0 	.word	0x422580a0
 80099e4:	004005ff 	.word	0x004005ff

080099e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099f6:	0f9b      	lsrs	r3, r3, #30
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a02:	0e9b      	lsrs	r3, r3, #26
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 030f 	and.w	r3, r3, #15
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a14:	0e1b      	lsrs	r3, r3, #24
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 0303 	and.w	r3, r3, #3
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a26:	0c1b      	lsrs	r3, r3, #16
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a32:	0a1b      	lsrs	r3, r3, #8
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a48:	0d1b      	lsrs	r3, r3, #20
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a54:	0c1b      	lsrs	r3, r3, #16
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f003 030f 	and.w	r3, r3, #15
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a66:	0bdb      	lsrs	r3, r3, #15
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a78:	0b9b      	lsrs	r3, r3, #14
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a8a:	0b5b      	lsrs	r3, r3, #13
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a9c:	0b1b      	lsrs	r3, r3, #12
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2200      	movs	r2, #0
 8009aae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d163      	bne.n	8009b80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009abc:	009a      	lsls	r2, r3, #2
 8009abe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009ac8:	0f92      	lsrs	r2, r2, #30
 8009aca:	431a      	orrs	r2, r3
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad4:	0edb      	lsrs	r3, r3, #27
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	f003 0307 	and.w	r3, r3, #7
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae6:	0e1b      	lsrs	r3, r3, #24
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009af8:	0d5b      	lsrs	r3, r3, #21
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b0a:	0c9b      	lsrs	r3, r3, #18
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b1c:	0bdb      	lsrs	r3, r3, #15
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	f003 0307 	and.w	r3, r3, #7
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	7e1b      	ldrb	r3, [r3, #24]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	3302      	adds	r3, #2
 8009b40:	2201      	movs	r2, #1
 8009b42:	fa02 f303 	lsl.w	r3, r2, r3
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009b4a:	fb03 f202 	mul.w	r2, r3, r2
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	7a1b      	ldrb	r3, [r3, #8]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	409a      	lsls	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009b6c:	0a52      	lsrs	r2, r2, #9
 8009b6e:	fb03 f202 	mul.w	r2, r3, r2
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b7c:	661a      	str	r2, [r3, #96]	; 0x60
 8009b7e:	e031      	b.n	8009be4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d11d      	bne.n	8009bc4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b8c:	041b      	lsls	r3, r3, #16
 8009b8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	029a      	lsls	r2, r3, #10
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	661a      	str	r2, [r3, #96]	; 0x60
 8009bc2:	e00f      	b.n	8009be4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a58      	ldr	r2, [pc, #352]	; (8009d2c <HAL_SD_GetCardCSD+0x344>)
 8009bca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	e09d      	b.n	8009d20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009be8:	0b9b      	lsrs	r3, r3, #14
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bfa:	09db      	lsrs	r3, r3, #7
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1c:	0fdb      	lsrs	r3, r3, #31
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c28:	0f5b      	lsrs	r3, r3, #29
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	f003 0303 	and.w	r3, r3, #3
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c3a:	0e9b      	lsrs	r3, r3, #26
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f003 0307 	and.w	r3, r3, #7
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4c:	0d9b      	lsrs	r3, r3, #22
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	f003 030f 	and.w	r3, r3, #15
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5e:	0d5b      	lsrs	r3, r3, #21
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	0c1b      	lsrs	r3, r3, #16
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8e:	0bdb      	lsrs	r3, r3, #15
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca2:	0b9b      	lsrs	r3, r3, #14
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb6:	0b5b      	lsrs	r3, r3, #13
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cca:	0b1b      	lsrs	r3, r3, #12
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cde:	0a9b      	lsrs	r3, r3, #10
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf2:	0a1b      	lsrs	r3, r3, #8
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	f003 0303 	and.w	r3, r3, #3
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d06:	085b      	lsrs	r3, r3, #1
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	004005ff 	.word	0x004005ff

08009d30 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009d30:	b5b0      	push	{r4, r5, r7, lr}
 8009d32:	b08e      	sub	sp, #56	; 0x38
 8009d34:	af04      	add	r7, sp, #16
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2203      	movs	r2, #3
 8009d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4c:	2b03      	cmp	r3, #3
 8009d4e:	d02e      	beq.n	8009dae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d56:	d106      	bne.n	8009d66 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	639a      	str	r2, [r3, #56]	; 0x38
 8009d64:	e029      	b.n	8009dba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d6c:	d10a      	bne.n	8009d84 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f9d4 	bl	800a11c <SD_WideBus_Enable>
 8009d74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	639a      	str	r2, [r3, #56]	; 0x38
 8009d82:	e01a      	b.n	8009dba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fa11 	bl	800a1b2 <SD_WideBus_Disable>
 8009d90:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8009d9e:	e00c      	b.n	8009dba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	639a      	str	r2, [r3, #56]	; 0x38
 8009dac:	e005      	b.n	8009dba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00b      	beq.n	8009dda <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a26      	ldr	r2, [pc, #152]	; (8009e60 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009dc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dd8:	e01f      	b.n	8009e1a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681d      	ldr	r5, [r3, #0]
 8009e00:	466c      	mov	r4, sp
 8009e02:	f107 0314 	add.w	r3, r7, #20
 8009e06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e0e:	f107 0308 	add.w	r3, r7, #8
 8009e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e14:	4628      	mov	r0, r5
 8009e16:	f003 faef 	bl	800d3f8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e22:	4618      	mov	r0, r3
 8009e24:	f003 fbb2 	bl	800d58c <SDMMC_CmdBlockLength>
 8009e28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00c      	beq.n	8009e4a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a0a      	ldr	r2, [pc, #40]	; (8009e60 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009e36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3728      	adds	r7, #40	; 0x28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	004005ff 	.word	0x004005ff

08009e64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e64:	b5b0      	push	{r4, r5, r7, lr}
 8009e66:	b094      	sub	sp, #80	; 0x50
 8009e68:	af04      	add	r7, sp, #16
 8009e6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f003 fb05 	bl	800d484 <SDIO_GetPowerState>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009e84:	e0b8      	b.n	8009ff8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d02f      	beq.n	8009eee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f003 fc84 	bl	800d7a0 <SDMMC_CmdSendCID>
 8009e98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <SD_InitCard+0x40>
    {
      return errorstate;
 8009ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea2:	e0a9      	b.n	8009ff8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f003 fb2f 	bl	800d50e <SDIO_GetResponse>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2104      	movs	r1, #4
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f003 fb26 	bl	800d50e <SDIO_GetResponse>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2108      	movs	r1, #8
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f003 fb1d 	bl	800d50e <SDIO_GetResponse>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	210c      	movs	r1, #12
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f003 fb14 	bl	800d50e <SDIO_GetResponse>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d00d      	beq.n	8009f12 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f107 020e 	add.w	r2, r7, #14
 8009efe:	4611      	mov	r1, r2
 8009f00:	4618      	mov	r0, r3
 8009f02:	f003 fc8a 	bl	800d81a <SDMMC_CmdSetRelAdd>
 8009f06:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <SD_InitCard+0xae>
    {
      return errorstate;
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f10:	e072      	b.n	8009ff8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d036      	beq.n	8009f88 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009f1a:	89fb      	ldrh	r3, [r7, #14]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2a:	041b      	lsls	r3, r3, #16
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f003 fc54 	bl	800d7dc <SDMMC_CmdSendCSD>
 8009f34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f3e:	e05b      	b.n	8009ff8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2100      	movs	r1, #0
 8009f46:	4618      	mov	r0, r3
 8009f48:	f003 fae1 	bl	800d50e <SDIO_GetResponse>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2104      	movs	r1, #4
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f003 fad8 	bl	800d50e <SDIO_GetResponse>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2108      	movs	r1, #8
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f003 facf 	bl	800d50e <SDIO_GetResponse>
 8009f70:	4602      	mov	r2, r0
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	210c      	movs	r1, #12
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f003 fac6 	bl	800d50e <SDIO_GetResponse>
 8009f82:	4602      	mov	r2, r0
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2104      	movs	r1, #4
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f003 fabd 	bl	800d50e <SDIO_GetResponse>
 8009f94:	4603      	mov	r3, r0
 8009f96:	0d1a      	lsrs	r2, r3, #20
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009f9c:	f107 0310 	add.w	r3, r7, #16
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff fd20 	bl	80099e8 <HAL_SD_GetCardCSD>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d002      	beq.n	8009fb4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fb2:	e021      	b.n	8009ff8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6819      	ldr	r1, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fbc:	041b      	lsls	r3, r3, #16
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	461c      	mov	r4, r3
 8009fc2:	4615      	mov	r5, r2
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	462b      	mov	r3, r5
 8009fc8:	4608      	mov	r0, r1
 8009fca:	f003 fb01 	bl	800d5d0 <SDMMC_CmdSelDesel>
 8009fce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <SD_InitCard+0x176>
  {
    return errorstate;
 8009fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd8:	e00e      	b.n	8009ff8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681d      	ldr	r5, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	466c      	mov	r4, sp
 8009fe2:	f103 0210 	add.w	r2, r3, #16
 8009fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8009fe8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009fec:	3304      	adds	r3, #4
 8009fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f003 fa01 	bl	800d3f8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3740      	adds	r7, #64	; 0x40
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bdb0      	pop	{r4, r5, r7, pc}

0800a000 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	2300      	movs	r3, #0
 800a012:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4618      	mov	r0, r3
 800a01a:	f003 fafc 	bl	800d616 <SDMMC_CmdGoIdleState>
 800a01e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	e072      	b.n	800a110 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4618      	mov	r0, r3
 800a030:	f003 fb0f 	bl	800d652 <SDMMC_CmdOperCond>
 800a034:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00d      	beq.n	800a058 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4618      	mov	r0, r3
 800a048:	f003 fae5 	bl	800d616 <SDMMC_CmdGoIdleState>
 800a04c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <SD_PowerON+0x5e>
    {
      return errorstate;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	e05b      	b.n	800a110 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a062:	2b01      	cmp	r3, #1
 800a064:	d137      	bne.n	800a0d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2100      	movs	r1, #0
 800a06c:	4618      	mov	r0, r3
 800a06e:	f003 fb0f 	bl	800d690 <SDMMC_CmdAppCommand>
 800a072:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d02d      	beq.n	800a0d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a07a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a07e:	e047      	b.n	800a110 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f003 fb02 	bl	800d690 <SDMMC_CmdAppCommand>
 800a08c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <SD_PowerON+0x98>
    {
      return errorstate;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	e03b      	b.n	800a110 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	491e      	ldr	r1, [pc, #120]	; (800a118 <SD_PowerON+0x118>)
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f003 fb18 	bl	800d6d4 <SDMMC_CmdAppOperCommand>
 800a0a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a0b0:	e02e      	b.n	800a110 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f003 fa28 	bl	800d50e <SDIO_GetResponse>
 800a0be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	0fdb      	lsrs	r3, r3, #31
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d101      	bne.n	800a0cc <SD_PowerON+0xcc>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e000      	b.n	800a0ce <SD_PowerON+0xce>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	613b      	str	r3, [r7, #16]

    count++;
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d802      	bhi.n	800a0e6 <SD_PowerON+0xe6>
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0cc      	beq.n	800a080 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d902      	bls.n	800a0f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a0f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0f4:	e00c      	b.n	800a110 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d003      	beq.n	800a108 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	645a      	str	r2, [r3, #68]	; 0x44
 800a106:	e002      	b.n	800a10e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	c1100000 	.word	0xc1100000

0800a11c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	2300      	movs	r3, #0
 800a12a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2100      	movs	r1, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f003 f9eb 	bl	800d50e <SDIO_GetResponse>
 800a138:	4603      	mov	r3, r0
 800a13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a13e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a142:	d102      	bne.n	800a14a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a148:	e02f      	b.n	800a1aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f879 	bl	800a248 <SD_FindSCR>
 800a156:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	e023      	b.n	800a1aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d01c      	beq.n	800a1a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a174:	041b      	lsls	r3, r3, #16
 800a176:	4619      	mov	r1, r3
 800a178:	4610      	mov	r0, r2
 800a17a:	f003 fa89 	bl	800d690 <SDMMC_CmdAppCommand>
 800a17e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	e00f      	b.n	800a1aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2102      	movs	r1, #2
 800a190:	4618      	mov	r0, r3
 800a192:	f003 fac2 	bl	800d71a <SDMMC_CmdBusWidth>
 800a196:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	e003      	b.n	800a1aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	e001      	b.n	800a1aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b086      	sub	sp, #24
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f003 f9a0 	bl	800d50e <SDIO_GetResponse>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1d8:	d102      	bne.n	800a1e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a1da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1de:	e02f      	b.n	800a240 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a1e0:	f107 030c 	add.w	r3, r7, #12
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f82e 	bl	800a248 <SD_FindSCR>
 800a1ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	e023      	b.n	800a240 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d01c      	beq.n	800a23c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a20a:	041b      	lsls	r3, r3, #16
 800a20c:	4619      	mov	r1, r3
 800a20e:	4610      	mov	r0, r2
 800a210:	f003 fa3e 	bl	800d690 <SDMMC_CmdAppCommand>
 800a214:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	e00f      	b.n	800a240 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2100      	movs	r1, #0
 800a226:	4618      	mov	r0, r3
 800a228:	f003 fa77 	bl	800d71a <SDMMC_CmdBusWidth>
 800a22c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	e003      	b.n	800a240 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a238:	2300      	movs	r3, #0
 800a23a:	e001      	b.n	800a240 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a23c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a248:	b590      	push	{r4, r7, lr}
 800a24a:	b08f      	sub	sp, #60	; 0x3c
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a252:	f7fc fae9 	bl	8006828 <HAL_GetTick>
 800a256:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a258:	2300      	movs	r3, #0
 800a25a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a25c:	2300      	movs	r3, #0
 800a25e:	60bb      	str	r3, [r7, #8]
 800a260:	2300      	movs	r3, #0
 800a262:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2108      	movs	r1, #8
 800a26e:	4618      	mov	r0, r3
 800a270:	f003 f98c 	bl	800d58c <SDMMC_CmdBlockLength>
 800a274:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	e0b2      	b.n	800a3e6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a288:	041b      	lsls	r3, r3, #16
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	f003 f9ff 	bl	800d690 <SDMMC_CmdAppCommand>
 800a292:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	e0a3      	b.n	800a3e6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a29e:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a2a4:	2308      	movs	r3, #8
 800a2a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a2a8:	2330      	movs	r3, #48	; 0x30
 800a2aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f107 0210 	add.w	r2, r7, #16
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f003 f936 	bl	800d534 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f003 fa46 	bl	800d75e <SDMMC_CmdSendSCR>
 800a2d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d02a      	beq.n	800a330 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2dc:	e083      	b.n	800a3e6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00f      	beq.n	800a30c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6819      	ldr	r1, [r3, #0]
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	f107 0208 	add.w	r2, r7, #8
 800a2f8:	18d4      	adds	r4, r2, r3
 800a2fa:	4608      	mov	r0, r1
 800a2fc:	f003 f8a7 	bl	800d44e <SDIO_ReadFIFO>
 800a300:	4603      	mov	r3, r0
 800a302:	6023      	str	r3, [r4, #0]
      index++;
 800a304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a306:	3301      	adds	r3, #1
 800a308:	637b      	str	r3, [r7, #52]	; 0x34
 800a30a:	e006      	b.n	800a31a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d012      	beq.n	800a340 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a31a:	f7fc fa85 	bl	8006828 <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a328:	d102      	bne.n	800a330 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a32a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a32e:	e05a      	b.n	800a3e6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a336:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0cf      	beq.n	800a2de <SD_FindSCR+0x96>
 800a33e:	e000      	b.n	800a342 <SD_FindSCR+0xfa>
      break;
 800a340:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a348:	f003 0308 	and.w	r3, r3, #8
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d005      	beq.n	800a35c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2208      	movs	r2, #8
 800a356:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a358:	2308      	movs	r3, #8
 800a35a:	e044      	b.n	800a3e6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a362:	f003 0302 	and.w	r3, r3, #2
 800a366:	2b00      	cmp	r3, #0
 800a368:	d005      	beq.n	800a376 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2202      	movs	r2, #2
 800a370:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a372:	2302      	movs	r3, #2
 800a374:	e037      	b.n	800a3e6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37c:	f003 0320 	and.w	r3, r3, #32
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2220      	movs	r2, #32
 800a38a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a38c:	2320      	movs	r3, #32
 800a38e:	e02a      	b.n	800a3e6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f240 523a 	movw	r2, #1338	; 0x53a
 800a398:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	061a      	lsls	r2, r3, #24
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	0a1b      	lsrs	r3, r3, #8
 800a3ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a3b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	0e1b      	lsrs	r3, r3, #24
 800a3b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ba:	601a      	str	r2, [r3, #0]
    scr++;
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	3304      	adds	r3, #4
 800a3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	061a      	lsls	r2, r3, #24
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	021b      	lsls	r3, r3, #8
 800a3ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	0a1b      	lsrs	r3, r3, #8
 800a3d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a3d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	0e1b      	lsrs	r3, r3, #24
 800a3de:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	373c      	adds	r7, #60	; 0x3c
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd90      	pop	{r4, r7, pc}

0800a3ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e07b      	b.n	800a4f8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d108      	bne.n	800a41a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a410:	d009      	beq.n	800a426 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	61da      	str	r2, [r3, #28]
 800a418:	e005      	b.n	800a426 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d106      	bne.n	800a446 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7f8 f8dd 	bl	8002600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2202      	movs	r2, #2
 800a44a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a45c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a478:	431a      	orrs	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	431a      	orrs	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	431a      	orrs	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4aa:	ea42 0103 	orr.w	r1, r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	f003 0104 	and.w	r1, r3, #4
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4cc:	f003 0210 	and.w	r2, r3, #16
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	69da      	ldr	r2, [r3, #28]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	4613      	mov	r3, r2
 800a50c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d101      	bne.n	800a520 <HAL_SPI_Transmit_DMA+0x20>
 800a51c:	2302      	movs	r3, #2
 800a51e:	e09b      	b.n	800a658 <HAL_SPI_Transmit_DMA+0x158>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b01      	cmp	r3, #1
 800a532:	d002      	beq.n	800a53a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a534:	2302      	movs	r3, #2
 800a536:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a538:	e089      	b.n	800a64e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <HAL_SPI_Transmit_DMA+0x46>
 800a540:	88fb      	ldrh	r3, [r7, #6]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d102      	bne.n	800a54c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a54a:	e080      	b.n	800a64e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2203      	movs	r2, #3
 800a550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	88fa      	ldrh	r2, [r7, #6]
 800a564:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	88fa      	ldrh	r2, [r7, #6]
 800a56a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a592:	d10f      	bne.n	800a5b4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5b8:	4a29      	ldr	r2, [pc, #164]	; (800a660 <HAL_SPI_Transmit_DMA+0x160>)
 800a5ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5c0:	4a28      	ldr	r2, [pc, #160]	; (800a664 <HAL_SPI_Transmit_DMA+0x164>)
 800a5c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5c8:	4a27      	ldr	r2, [pc, #156]	; (800a668 <HAL_SPI_Transmit_DMA+0x168>)
 800a5ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5dc:	4619      	mov	r1, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	330c      	adds	r3, #12
 800a5e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a5ec:	f7fc feee 	bl	80073cc <HAL_DMA_Start_IT>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00c      	beq.n	800a610 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fa:	f043 0210 	orr.w	r2, r3, #16
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2201      	movs	r2, #1
 800a60a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a60e:	e01e      	b.n	800a64e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a61a:	2b40      	cmp	r3, #64	; 0x40
 800a61c:	d007      	beq.n	800a62e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a62c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f042 0220 	orr.w	r2, r2, #32
 800a63c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f042 0202 	orr.w	r2, r2, #2
 800a64c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a656:	7dfb      	ldrb	r3, [r7, #23]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	0800ac6d 	.word	0x0800ac6d
 800a664:	0800aa8d 	.word	0x0800aa8d
 800a668:	0800acc1 	.word	0x0800acc1

0800a66c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	4613      	mov	r3, r2
 800a678:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d110      	bne.n	800a6a8 <HAL_SPI_Receive_DMA+0x3c>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a68e:	d10b      	bne.n	800a6a8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2204      	movs	r2, #4
 800a694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a698:	88fb      	ldrh	r3, [r7, #6]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	68b9      	ldr	r1, [r7, #8]
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 f8ac 	bl	800a7fc <HAL_SPI_TransmitReceive_DMA>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	e09f      	b.n	800a7e8 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d101      	bne.n	800a6b6 <HAL_SPI_Receive_DMA+0x4a>
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	e098      	b.n	800a7e8 <HAL_SPI_Receive_DMA+0x17c>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d002      	beq.n	800a6d0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a6ce:	e086      	b.n	800a7de <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <HAL_SPI_Receive_DMA+0x70>
 800a6d6:	88fb      	ldrh	r3, [r7, #6]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d102      	bne.n	800a6e2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a6e0:	e07d      	b.n	800a7de <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2204      	movs	r2, #4
 800a6e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	88fa      	ldrh	r2, [r7, #6]
 800a6fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	88fa      	ldrh	r2, [r7, #6]
 800a700:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a722:	d10f      	bne.n	800a744 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a732:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a742:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a748:	4a29      	ldr	r2, [pc, #164]	; (800a7f0 <HAL_SPI_Receive_DMA+0x184>)
 800a74a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a750:	4a28      	ldr	r2, [pc, #160]	; (800a7f4 <HAL_SPI_Receive_DMA+0x188>)
 800a752:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a758:	4a27      	ldr	r2, [pc, #156]	; (800a7f8 <HAL_SPI_Receive_DMA+0x18c>)
 800a75a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a760:	2200      	movs	r2, #0
 800a762:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	330c      	adds	r3, #12
 800a76e:	4619      	mov	r1, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a774:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a77a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a77c:	f7fc fe26 	bl	80073cc <HAL_DMA_Start_IT>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00c      	beq.n	800a7a0 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78a:	f043 0210 	orr.w	r2, r3, #16
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a79e:	e01e      	b.n	800a7de <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7aa:	2b40      	cmp	r3, #64	; 0x40
 800a7ac:	d007      	beq.n	800a7be <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f042 0220 	orr.w	r2, r2, #32
 800a7cc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f042 0201 	orr.w	r2, r2, #1
 800a7dc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	0800ac89 	.word	0x0800ac89
 800a7f4:	0800ab35 	.word	0x0800ab35
 800a7f8:	0800acc1 	.word	0x0800acc1

0800a7fc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
 800a808:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a814:	2b01      	cmp	r3, #1
 800a816:	d101      	bne.n	800a81c <HAL_SPI_TransmitReceive_DMA+0x20>
 800a818:	2302      	movs	r3, #2
 800a81a:	e0e3      	b.n	800a9e4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a82a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a832:	7dbb      	ldrb	r3, [r7, #22]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d00d      	beq.n	800a854 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a83e:	d106      	bne.n	800a84e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <HAL_SPI_TransmitReceive_DMA+0x52>
 800a848:	7dbb      	ldrb	r3, [r7, #22]
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	d002      	beq.n	800a854 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a84e:	2302      	movs	r3, #2
 800a850:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a852:	e0c2      	b.n	800a9da <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d005      	beq.n	800a866 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d002      	beq.n	800a866 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a860:	887b      	ldrh	r3, [r7, #2]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d102      	bne.n	800a86c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a86a:	e0b6      	b.n	800a9da <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b04      	cmp	r3, #4
 800a876:	d003      	beq.n	800a880 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2205      	movs	r2, #5
 800a87c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	887a      	ldrh	r2, [r7, #2]
 800a890:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	887a      	ldrh	r2, [r7, #2]
 800a896:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	887a      	ldrh	r2, [r7, #2]
 800a8a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	887a      	ldrh	r2, [r7, #2]
 800a8a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	d108      	bne.n	800a8d4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c6:	4a49      	ldr	r2, [pc, #292]	; (800a9ec <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800a8c8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ce:	4a48      	ldr	r2, [pc, #288]	; (800a9f0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800a8d0:	63da      	str	r2, [r3, #60]	; 0x3c
 800a8d2:	e007      	b.n	800a8e4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d8:	4a46      	ldr	r2, [pc, #280]	; (800a9f4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800a8da:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e0:	4a45      	ldr	r2, [pc, #276]	; (800a9f8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800a8e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e8:	4a44      	ldr	r2, [pc, #272]	; (800a9fc <HAL_SPI_TransmitReceive_DMA+0x200>)
 800a8ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	330c      	adds	r3, #12
 800a8fe:	4619      	mov	r1, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a904:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a90a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a90c:	f7fc fd5e 	bl	80073cc <HAL_DMA_Start_IT>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00c      	beq.n	800a930 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91a:	f043 0210 	orr.w	r2, r3, #16
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a92e:	e054      	b.n	800a9da <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f042 0201 	orr.w	r2, r2, #1
 800a93e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a944:	2200      	movs	r2, #0
 800a946:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a94c:	2200      	movs	r2, #0
 800a94e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a954:	2200      	movs	r2, #0
 800a956:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a95c:	2200      	movs	r2, #0
 800a95e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a968:	4619      	mov	r1, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	330c      	adds	r3, #12
 800a970:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a976:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a978:	f7fc fd28 	bl	80073cc <HAL_DMA_Start_IT>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00c      	beq.n	800a99c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a986:	f043 0210 	orr.w	r2, r3, #16
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a99a:	e01e      	b.n	800a9da <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a6:	2b40      	cmp	r3, #64	; 0x40
 800a9a8:	d007      	beq.n	800a9ba <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9b8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	685a      	ldr	r2, [r3, #4]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f042 0220 	orr.w	r2, r2, #32
 800a9c8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f042 0202 	orr.w	r2, r2, #2
 800a9d8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	0800ac89 	.word	0x0800ac89
 800a9f0:	0800ab35 	.word	0x0800ab35
 800a9f4:	0800aca5 	.word	0x0800aca5
 800a9f8:	0800abdd 	.word	0x0800abdd
 800a9fc:	0800acc1 	.word	0x0800acc1

0800aa00 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa9a:	f7fb fec5 	bl	8006828 <HAL_GetTick>
 800aa9e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaae:	d03b      	beq.n	800ab28 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 0220 	bic.w	r2, r2, #32
 800aabe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 0202 	bic.w	r2, r2, #2
 800aace:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	2164      	movs	r1, #100	; 0x64
 800aad4:	6978      	ldr	r0, [r7, #20]
 800aad6:	f000 fa01 	bl	800aedc <SPI_EndRxTxTransaction>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d005      	beq.n	800aaec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae4:	f043 0220 	orr.w	r2, r3, #32
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ab20:	6978      	ldr	r0, [r7, #20]
 800ab22:	f7ff ffa9 	bl	800aa78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ab26:	e002      	b.n	800ab2e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ab28:	6978      	ldr	r0, [r7, #20]
 800ab2a:	f7ff ff69 	bl	800aa00 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab40:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab42:	f7fb fe71 	bl	8006828 <HAL_GetTick>
 800ab46:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab56:	d03b      	beq.n	800abd0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f022 0220 	bic.w	r2, r2, #32
 800ab66:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10d      	bne.n	800ab8c <SPI_DMAReceiveCplt+0x58>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab78:	d108      	bne.n	800ab8c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f022 0203 	bic.w	r2, r2, #3
 800ab88:	605a      	str	r2, [r3, #4]
 800ab8a:	e007      	b.n	800ab9c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f022 0201 	bic.w	r2, r2, #1
 800ab9a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	2164      	movs	r1, #100	; 0x64
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 f935 	bl	800ae10 <SPI_EndRxTransaction>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2220      	movs	r2, #32
 800abb0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d003      	beq.n	800abd0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f7ff ff55 	bl	800aa78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800abce:	e002      	b.n	800abd6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7ff ff1f 	bl	800aa14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abea:	f7fb fe1d 	bl	8006828 <HAL_GetTick>
 800abee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfe:	d02f      	beq.n	800ac60 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f022 0220 	bic.w	r2, r2, #32
 800ac0e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	2164      	movs	r1, #100	; 0x64
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 f961 	bl	800aedc <SPI_EndRxTxTransaction>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac24:	f043 0220 	orr.w	r2, r3, #32
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f022 0203 	bic.w	r2, r2, #3
 800ac3a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d003      	beq.n	800ac60 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f7ff ff0d 	bl	800aa78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac5e:	e002      	b.n	800ac66 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f7ff fee1 	bl	800aa28 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac78:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f7ff fede 	bl	800aa3c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7ff feda 	bl	800aa50 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac9c:	bf00      	nop
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f7ff fed6 	bl	800aa64 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800acb8:	bf00      	nop
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f022 0203 	bic.w	r2, r2, #3
 800acdc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace2:	f043 0210 	orr.w	r2, r3, #16
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f7ff fec0 	bl	800aa78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800acf8:	bf00      	nop
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b088      	sub	sp, #32
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad10:	f7fb fd8a 	bl	8006828 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	1a9b      	subs	r3, r3, r2
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad20:	f7fb fd82 	bl	8006828 <HAL_GetTick>
 800ad24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad26:	4b39      	ldr	r3, [pc, #228]	; (800ae0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	015b      	lsls	r3, r3, #5
 800ad2c:	0d1b      	lsrs	r3, r3, #20
 800ad2e:	69fa      	ldr	r2, [r7, #28]
 800ad30:	fb02 f303 	mul.w	r3, r2, r3
 800ad34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad36:	e054      	b.n	800ade2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3e:	d050      	beq.n	800ade2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad40:	f7fb fd72 	bl	8006828 <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	69fa      	ldr	r2, [r7, #28]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d902      	bls.n	800ad56 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d13d      	bne.n	800add2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad6e:	d111      	bne.n	800ad94 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad78:	d004      	beq.n	800ad84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad82:	d107      	bne.n	800ad94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad9c:	d10f      	bne.n	800adbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e017      	b.n	800ae02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800add8:	2300      	movs	r3, #0
 800adda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	3b01      	subs	r3, #1
 800ade0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689a      	ldr	r2, [r3, #8]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4013      	ands	r3, r2
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	429a      	cmp	r2, r3
 800adf0:	bf0c      	ite	eq
 800adf2:	2301      	moveq	r3, #1
 800adf4:	2300      	movne	r3, #0
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	461a      	mov	r2, r3
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d19b      	bne.n	800ad38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3720      	adds	r7, #32
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20000000 	.word	0x20000000

0800ae10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af02      	add	r7, sp, #8
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae24:	d111      	bne.n	800ae4a <SPI_EndRxTransaction+0x3a>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae2e:	d004      	beq.n	800ae3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae38:	d107      	bne.n	800ae4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae48:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae52:	d12a      	bne.n	800aeaa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae5c:	d012      	beq.n	800ae84 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	2180      	movs	r1, #128	; 0x80
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7ff ff49 	bl	800ad00 <SPI_WaitFlagStateUntilTimeout>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d02d      	beq.n	800aed0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae78:	f043 0220 	orr.w	r2, r3, #32
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ae80:	2303      	movs	r3, #3
 800ae82:	e026      	b.n	800aed2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7ff ff36 	bl	800ad00 <SPI_WaitFlagStateUntilTimeout>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d01a      	beq.n	800aed0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9e:	f043 0220 	orr.w	r2, r3, #32
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800aea6:	2303      	movs	r3, #3
 800aea8:	e013      	b.n	800aed2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f7ff ff23 	bl	800ad00 <SPI_WaitFlagStateUntilTimeout>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d007      	beq.n	800aed0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aec4:	f043 0220 	orr.w	r2, r3, #32
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e000      	b.n	800aed2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
	...

0800aedc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b088      	sub	sp, #32
 800aee0:	af02      	add	r7, sp, #8
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aee8:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <SPI_EndRxTxTransaction+0x7c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a1b      	ldr	r2, [pc, #108]	; (800af5c <SPI_EndRxTxTransaction+0x80>)
 800aeee:	fba2 2303 	umull	r2, r3, r2, r3
 800aef2:	0d5b      	lsrs	r3, r3, #21
 800aef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aef8:	fb02 f303 	mul.w	r3, r2, r3
 800aefc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af06:	d112      	bne.n	800af2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2200      	movs	r2, #0
 800af10:	2180      	movs	r1, #128	; 0x80
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff fef4 	bl	800ad00 <SPI_WaitFlagStateUntilTimeout>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d016      	beq.n	800af4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af22:	f043 0220 	orr.w	r2, r3, #32
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e00f      	b.n	800af4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00a      	beq.n	800af4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	3b01      	subs	r3, #1
 800af38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af44:	2b80      	cmp	r3, #128	; 0x80
 800af46:	d0f2      	beq.n	800af2e <SPI_EndRxTxTransaction+0x52>
 800af48:	e000      	b.n	800af4c <SPI_EndRxTxTransaction+0x70>
        break;
 800af4a:	bf00      	nop
  }

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000000 	.word	0x20000000
 800af5c:	165e9f81 	.word	0x165e9f81

0800af60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e041      	b.n	800aff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d106      	bne.n	800af8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7f7 fbe6 	bl	8002758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2202      	movs	r2, #2
 800af90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3304      	adds	r3, #4
 800af9c:	4619      	mov	r1, r3
 800af9e:	4610      	mov	r0, r2
 800afa0:	f000 fc7a 	bl	800b898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b01      	cmp	r3, #1
 800b012:	d001      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e04e      	b.n	800b0b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f042 0201 	orr.w	r2, r2, #1
 800b02e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a23      	ldr	r2, [pc, #140]	; (800b0c4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d022      	beq.n	800b080 <HAL_TIM_Base_Start_IT+0x80>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b042:	d01d      	beq.n	800b080 <HAL_TIM_Base_Start_IT+0x80>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a1f      	ldr	r2, [pc, #124]	; (800b0c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d018      	beq.n	800b080 <HAL_TIM_Base_Start_IT+0x80>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a1e      	ldr	r2, [pc, #120]	; (800b0cc <HAL_TIM_Base_Start_IT+0xcc>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d013      	beq.n	800b080 <HAL_TIM_Base_Start_IT+0x80>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a1c      	ldr	r2, [pc, #112]	; (800b0d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d00e      	beq.n	800b080 <HAL_TIM_Base_Start_IT+0x80>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a1b      	ldr	r2, [pc, #108]	; (800b0d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d009      	beq.n	800b080 <HAL_TIM_Base_Start_IT+0x80>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a19      	ldr	r2, [pc, #100]	; (800b0d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d004      	beq.n	800b080 <HAL_TIM_Base_Start_IT+0x80>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a18      	ldr	r2, [pc, #96]	; (800b0dc <HAL_TIM_Base_Start_IT+0xdc>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d111      	bne.n	800b0a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b06      	cmp	r3, #6
 800b090:	d010      	beq.n	800b0b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f042 0201 	orr.w	r2, r2, #1
 800b0a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0a2:	e007      	b.n	800b0b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f042 0201 	orr.w	r2, r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	40010000 	.word	0x40010000
 800b0c8:	40000400 	.word	0x40000400
 800b0cc:	40000800 	.word	0x40000800
 800b0d0:	40000c00 	.word	0x40000c00
 800b0d4:	40010400 	.word	0x40010400
 800b0d8:	40014000 	.word	0x40014000
 800b0dc:	40001800 	.word	0x40001800

0800b0e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e041      	b.n	800b176 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f839 	bl	800b17e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3304      	adds	r3, #4
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f000 fbba 	bl	800b898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
	...

0800b194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d109      	bne.n	800b1b8 <HAL_TIM_PWM_Start+0x24>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	bf14      	ite	ne
 800b1b0:	2301      	movne	r3, #1
 800b1b2:	2300      	moveq	r3, #0
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	e022      	b.n	800b1fe <HAL_TIM_PWM_Start+0x6a>
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2b04      	cmp	r3, #4
 800b1bc:	d109      	bne.n	800b1d2 <HAL_TIM_PWM_Start+0x3e>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	bf14      	ite	ne
 800b1ca:	2301      	movne	r3, #1
 800b1cc:	2300      	moveq	r3, #0
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	e015      	b.n	800b1fe <HAL_TIM_PWM_Start+0x6a>
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b08      	cmp	r3, #8
 800b1d6:	d109      	bne.n	800b1ec <HAL_TIM_PWM_Start+0x58>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	bf14      	ite	ne
 800b1e4:	2301      	movne	r3, #1
 800b1e6:	2300      	moveq	r3, #0
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	e008      	b.n	800b1fe <HAL_TIM_PWM_Start+0x6a>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	bf14      	ite	ne
 800b1f8:	2301      	movne	r3, #1
 800b1fa:	2300      	moveq	r3, #0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e07c      	b.n	800b300 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d104      	bne.n	800b216 <HAL_TIM_PWM_Start+0x82>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2202      	movs	r2, #2
 800b210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b214:	e013      	b.n	800b23e <HAL_TIM_PWM_Start+0xaa>
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b04      	cmp	r3, #4
 800b21a:	d104      	bne.n	800b226 <HAL_TIM_PWM_Start+0x92>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2202      	movs	r2, #2
 800b220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b224:	e00b      	b.n	800b23e <HAL_TIM_PWM_Start+0xaa>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b08      	cmp	r3, #8
 800b22a:	d104      	bne.n	800b236 <HAL_TIM_PWM_Start+0xa2>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2202      	movs	r2, #2
 800b230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b234:	e003      	b.n	800b23e <HAL_TIM_PWM_Start+0xaa>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2202      	movs	r2, #2
 800b23a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2201      	movs	r2, #1
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	4618      	mov	r0, r3
 800b248:	f000 fe10 	bl	800be6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a2d      	ldr	r2, [pc, #180]	; (800b308 <HAL_TIM_PWM_Start+0x174>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d004      	beq.n	800b260 <HAL_TIM_PWM_Start+0xcc>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a2c      	ldr	r2, [pc, #176]	; (800b30c <HAL_TIM_PWM_Start+0x178>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d101      	bne.n	800b264 <HAL_TIM_PWM_Start+0xd0>
 800b260:	2301      	movs	r3, #1
 800b262:	e000      	b.n	800b266 <HAL_TIM_PWM_Start+0xd2>
 800b264:	2300      	movs	r3, #0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d007      	beq.n	800b27a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b278:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a22      	ldr	r2, [pc, #136]	; (800b308 <HAL_TIM_PWM_Start+0x174>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d022      	beq.n	800b2ca <HAL_TIM_PWM_Start+0x136>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28c:	d01d      	beq.n	800b2ca <HAL_TIM_PWM_Start+0x136>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a1f      	ldr	r2, [pc, #124]	; (800b310 <HAL_TIM_PWM_Start+0x17c>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d018      	beq.n	800b2ca <HAL_TIM_PWM_Start+0x136>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a1d      	ldr	r2, [pc, #116]	; (800b314 <HAL_TIM_PWM_Start+0x180>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d013      	beq.n	800b2ca <HAL_TIM_PWM_Start+0x136>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a1c      	ldr	r2, [pc, #112]	; (800b318 <HAL_TIM_PWM_Start+0x184>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d00e      	beq.n	800b2ca <HAL_TIM_PWM_Start+0x136>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a16      	ldr	r2, [pc, #88]	; (800b30c <HAL_TIM_PWM_Start+0x178>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d009      	beq.n	800b2ca <HAL_TIM_PWM_Start+0x136>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a18      	ldr	r2, [pc, #96]	; (800b31c <HAL_TIM_PWM_Start+0x188>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d004      	beq.n	800b2ca <HAL_TIM_PWM_Start+0x136>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a16      	ldr	r2, [pc, #88]	; (800b320 <HAL_TIM_PWM_Start+0x18c>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d111      	bne.n	800b2ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f003 0307 	and.w	r3, r3, #7
 800b2d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b06      	cmp	r3, #6
 800b2da:	d010      	beq.n	800b2fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f042 0201 	orr.w	r2, r2, #1
 800b2ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ec:	e007      	b.n	800b2fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f042 0201 	orr.w	r2, r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	40010000 	.word	0x40010000
 800b30c:	40010400 	.word	0x40010400
 800b310:	40000400 	.word	0x40000400
 800b314:	40000800 	.word	0x40000800
 800b318:	40000c00 	.word	0x40000c00
 800b31c:	40014000 	.word	0x40014000
 800b320:	40001800 	.word	0x40001800

0800b324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b02      	cmp	r3, #2
 800b338:	d122      	bne.n	800b380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	f003 0302 	and.w	r3, r3, #2
 800b344:	2b02      	cmp	r3, #2
 800b346:	d11b      	bne.n	800b380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f06f 0202 	mvn.w	r2, #2
 800b350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	699b      	ldr	r3, [r3, #24]
 800b35e:	f003 0303 	and.w	r3, r3, #3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fa77 	bl	800b85a <HAL_TIM_IC_CaptureCallback>
 800b36c:	e005      	b.n	800b37a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fa69 	bl	800b846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fa7a 	bl	800b86e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	f003 0304 	and.w	r3, r3, #4
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d122      	bne.n	800b3d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d11b      	bne.n	800b3d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f06f 0204 	mvn.w	r2, #4
 800b3a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fa4d 	bl	800b85a <HAL_TIM_IC_CaptureCallback>
 800b3c0:	e005      	b.n	800b3ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fa3f 	bl	800b846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fa50 	bl	800b86e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f003 0308 	and.w	r3, r3, #8
 800b3de:	2b08      	cmp	r3, #8
 800b3e0:	d122      	bne.n	800b428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	f003 0308 	and.w	r3, r3, #8
 800b3ec:	2b08      	cmp	r3, #8
 800b3ee:	d11b      	bne.n	800b428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f06f 0208 	mvn.w	r2, #8
 800b3f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2204      	movs	r2, #4
 800b3fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	f003 0303 	and.w	r3, r3, #3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d003      	beq.n	800b416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fa23 	bl	800b85a <HAL_TIM_IC_CaptureCallback>
 800b414:	e005      	b.n	800b422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fa15 	bl	800b846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fa26 	bl	800b86e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	f003 0310 	and.w	r3, r3, #16
 800b432:	2b10      	cmp	r3, #16
 800b434:	d122      	bne.n	800b47c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	f003 0310 	and.w	r3, r3, #16
 800b440:	2b10      	cmp	r3, #16
 800b442:	d11b      	bne.n	800b47c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f06f 0210 	mvn.w	r2, #16
 800b44c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2208      	movs	r2, #8
 800b452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f9f9 	bl	800b85a <HAL_TIM_IC_CaptureCallback>
 800b468:	e005      	b.n	800b476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f9eb 	bl	800b846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f9fc 	bl	800b86e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	f003 0301 	and.w	r3, r3, #1
 800b486:	2b01      	cmp	r3, #1
 800b488:	d10e      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	f003 0301 	and.w	r3, r3, #1
 800b494:	2b01      	cmp	r3, #1
 800b496:	d107      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f06f 0201 	mvn.w	r2, #1
 800b4a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7f5 fdd0 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4b2:	2b80      	cmp	r3, #128	; 0x80
 800b4b4:	d10e      	bne.n	800b4d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c0:	2b80      	cmp	r3, #128	; 0x80
 800b4c2:	d107      	bne.n	800b4d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b4cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fd78 	bl	800bfc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4de:	2b40      	cmp	r3, #64	; 0x40
 800b4e0:	d10e      	bne.n	800b500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ec:	2b40      	cmp	r3, #64	; 0x40
 800b4ee:	d107      	bne.n	800b500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f9c1 	bl	800b882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	f003 0320 	and.w	r3, r3, #32
 800b50a:	2b20      	cmp	r3, #32
 800b50c:	d10e      	bne.n	800b52c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	f003 0320 	and.w	r3, r3, #32
 800b518:	2b20      	cmp	r3, #32
 800b51a:	d107      	bne.n	800b52c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f06f 0220 	mvn.w	r2, #32
 800b524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fd42 	bl	800bfb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b52c:	bf00      	nop
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d101      	bne.n	800b552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b54e:	2302      	movs	r3, #2
 800b550:	e0ae      	b.n	800b6b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2201      	movs	r2, #1
 800b556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b0c      	cmp	r3, #12
 800b55e:	f200 809f 	bhi.w	800b6a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b562:	a201      	add	r2, pc, #4	; (adr r2, 800b568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b568:	0800b59d 	.word	0x0800b59d
 800b56c:	0800b6a1 	.word	0x0800b6a1
 800b570:	0800b6a1 	.word	0x0800b6a1
 800b574:	0800b6a1 	.word	0x0800b6a1
 800b578:	0800b5dd 	.word	0x0800b5dd
 800b57c:	0800b6a1 	.word	0x0800b6a1
 800b580:	0800b6a1 	.word	0x0800b6a1
 800b584:	0800b6a1 	.word	0x0800b6a1
 800b588:	0800b61f 	.word	0x0800b61f
 800b58c:	0800b6a1 	.word	0x0800b6a1
 800b590:	0800b6a1 	.word	0x0800b6a1
 800b594:	0800b6a1 	.word	0x0800b6a1
 800b598:	0800b65f 	.word	0x0800b65f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fa18 	bl	800b9d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	699a      	ldr	r2, [r3, #24]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f042 0208 	orr.w	r2, r2, #8
 800b5b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	699a      	ldr	r2, [r3, #24]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f022 0204 	bic.w	r2, r2, #4
 800b5c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6999      	ldr	r1, [r3, #24]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	691a      	ldr	r2, [r3, #16]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	619a      	str	r2, [r3, #24]
      break;
 800b5da:	e064      	b.n	800b6a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68b9      	ldr	r1, [r7, #8]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 fa68 	bl	800bab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	699a      	ldr	r2, [r3, #24]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	699a      	ldr	r2, [r3, #24]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6999      	ldr	r1, [r3, #24]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	021a      	lsls	r2, r3, #8
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	619a      	str	r2, [r3, #24]
      break;
 800b61c:	e043      	b.n	800b6a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68b9      	ldr	r1, [r7, #8]
 800b624:	4618      	mov	r0, r3
 800b626:	f000 fabd 	bl	800bba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	69da      	ldr	r2, [r3, #28]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f042 0208 	orr.w	r2, r2, #8
 800b638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	69da      	ldr	r2, [r3, #28]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 0204 	bic.w	r2, r2, #4
 800b648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	69d9      	ldr	r1, [r3, #28]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	691a      	ldr	r2, [r3, #16]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	430a      	orrs	r2, r1
 800b65a:	61da      	str	r2, [r3, #28]
      break;
 800b65c:	e023      	b.n	800b6a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	4618      	mov	r0, r3
 800b666:	f000 fb11 	bl	800bc8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	69da      	ldr	r2, [r3, #28]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	69da      	ldr	r2, [r3, #28]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	69d9      	ldr	r1, [r3, #28]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	021a      	lsls	r2, r3, #8
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	430a      	orrs	r2, r1
 800b69c:	61da      	str	r2, [r3, #28]
      break;
 800b69e:	e002      	b.n	800b6a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	75fb      	strb	r3, [r7, #23]
      break;
 800b6a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3718      	adds	r7, #24
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d101      	bne.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1c>
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	e0b4      	b.n	800b83e <HAL_TIM_ConfigClockSource+0x186>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2202      	movs	r2, #2
 800b6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b6f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b70c:	d03e      	beq.n	800b78c <HAL_TIM_ConfigClockSource+0xd4>
 800b70e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b712:	f200 8087 	bhi.w	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b71a:	f000 8086 	beq.w	800b82a <HAL_TIM_ConfigClockSource+0x172>
 800b71e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b722:	d87f      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b724:	2b70      	cmp	r3, #112	; 0x70
 800b726:	d01a      	beq.n	800b75e <HAL_TIM_ConfigClockSource+0xa6>
 800b728:	2b70      	cmp	r3, #112	; 0x70
 800b72a:	d87b      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b72c:	2b60      	cmp	r3, #96	; 0x60
 800b72e:	d050      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x11a>
 800b730:	2b60      	cmp	r3, #96	; 0x60
 800b732:	d877      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b734:	2b50      	cmp	r3, #80	; 0x50
 800b736:	d03c      	beq.n	800b7b2 <HAL_TIM_ConfigClockSource+0xfa>
 800b738:	2b50      	cmp	r3, #80	; 0x50
 800b73a:	d873      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b73c:	2b40      	cmp	r3, #64	; 0x40
 800b73e:	d058      	beq.n	800b7f2 <HAL_TIM_ConfigClockSource+0x13a>
 800b740:	2b40      	cmp	r3, #64	; 0x40
 800b742:	d86f      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b744:	2b30      	cmp	r3, #48	; 0x30
 800b746:	d064      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x15a>
 800b748:	2b30      	cmp	r3, #48	; 0x30
 800b74a:	d86b      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	d060      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x15a>
 800b750:	2b20      	cmp	r3, #32
 800b752:	d867      	bhi.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
 800b754:	2b00      	cmp	r3, #0
 800b756:	d05c      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x15a>
 800b758:	2b10      	cmp	r3, #16
 800b75a:	d05a      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x15a>
 800b75c:	e062      	b.n	800b824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6818      	ldr	r0, [r3, #0]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	6899      	ldr	r1, [r3, #8]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	f000 fb5d 	bl	800be2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	609a      	str	r2, [r3, #8]
      break;
 800b78a:	e04f      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6818      	ldr	r0, [r3, #0]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	6899      	ldr	r1, [r3, #8]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	f000 fb46 	bl	800be2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689a      	ldr	r2, [r3, #8]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7ae:	609a      	str	r2, [r3, #8]
      break;
 800b7b0:	e03c      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6818      	ldr	r0, [r3, #0]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	6859      	ldr	r1, [r3, #4]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f000 faba 	bl	800bd38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2150      	movs	r1, #80	; 0x50
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 fb13 	bl	800bdf6 <TIM_ITRx_SetConfig>
      break;
 800b7d0:	e02c      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	6859      	ldr	r1, [r3, #4]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f000 fad9 	bl	800bd96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2160      	movs	r1, #96	; 0x60
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 fb03 	bl	800bdf6 <TIM_ITRx_SetConfig>
      break;
 800b7f0:	e01c      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6818      	ldr	r0, [r3, #0]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	6859      	ldr	r1, [r3, #4]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f000 fa9a 	bl	800bd38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2140      	movs	r1, #64	; 0x40
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 faf3 	bl	800bdf6 <TIM_ITRx_SetConfig>
      break;
 800b810:	e00c      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4619      	mov	r1, r3
 800b81c:	4610      	mov	r0, r2
 800b81e:	f000 faea 	bl	800bdf6 <TIM_ITRx_SetConfig>
      break;
 800b822:	e003      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	73fb      	strb	r3, [r7, #15]
      break;
 800b828:	e000      	b.n	800b82c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b82a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b84e:	bf00      	nop
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b862:	bf00      	nop
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
	...

0800b898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a40      	ldr	r2, [pc, #256]	; (800b9ac <TIM_Base_SetConfig+0x114>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d013      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8b6:	d00f      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a3d      	ldr	r2, [pc, #244]	; (800b9b0 <TIM_Base_SetConfig+0x118>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d00b      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a3c      	ldr	r2, [pc, #240]	; (800b9b4 <TIM_Base_SetConfig+0x11c>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d007      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a3b      	ldr	r2, [pc, #236]	; (800b9b8 <TIM_Base_SetConfig+0x120>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d003      	beq.n	800b8d8 <TIM_Base_SetConfig+0x40>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a3a      	ldr	r2, [pc, #232]	; (800b9bc <TIM_Base_SetConfig+0x124>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d108      	bne.n	800b8ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4a2f      	ldr	r2, [pc, #188]	; (800b9ac <TIM_Base_SetConfig+0x114>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d02b      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f8:	d027      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a2c      	ldr	r2, [pc, #176]	; (800b9b0 <TIM_Base_SetConfig+0x118>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d023      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a2b      	ldr	r2, [pc, #172]	; (800b9b4 <TIM_Base_SetConfig+0x11c>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d01f      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a2a      	ldr	r2, [pc, #168]	; (800b9b8 <TIM_Base_SetConfig+0x120>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d01b      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a29      	ldr	r2, [pc, #164]	; (800b9bc <TIM_Base_SetConfig+0x124>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d017      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a28      	ldr	r2, [pc, #160]	; (800b9c0 <TIM_Base_SetConfig+0x128>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d013      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a27      	ldr	r2, [pc, #156]	; (800b9c4 <TIM_Base_SetConfig+0x12c>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d00f      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a26      	ldr	r2, [pc, #152]	; (800b9c8 <TIM_Base_SetConfig+0x130>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d00b      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a25      	ldr	r2, [pc, #148]	; (800b9cc <TIM_Base_SetConfig+0x134>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d007      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a24      	ldr	r2, [pc, #144]	; (800b9d0 <TIM_Base_SetConfig+0x138>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d003      	beq.n	800b94a <TIM_Base_SetConfig+0xb2>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a23      	ldr	r2, [pc, #140]	; (800b9d4 <TIM_Base_SetConfig+0x13c>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d108      	bne.n	800b95c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	4313      	orrs	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	4313      	orrs	r3, r2
 800b968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	689a      	ldr	r2, [r3, #8]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a0a      	ldr	r2, [pc, #40]	; (800b9ac <TIM_Base_SetConfig+0x114>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d003      	beq.n	800b990 <TIM_Base_SetConfig+0xf8>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a0c      	ldr	r2, [pc, #48]	; (800b9bc <TIM_Base_SetConfig+0x124>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d103      	bne.n	800b998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	691a      	ldr	r2, [r3, #16]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	615a      	str	r2, [r3, #20]
}
 800b99e:	bf00      	nop
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	40010000 	.word	0x40010000
 800b9b0:	40000400 	.word	0x40000400
 800b9b4:	40000800 	.word	0x40000800
 800b9b8:	40000c00 	.word	0x40000c00
 800b9bc:	40010400 	.word	0x40010400
 800b9c0:	40014000 	.word	0x40014000
 800b9c4:	40014400 	.word	0x40014400
 800b9c8:	40014800 	.word	0x40014800
 800b9cc:	40001800 	.word	0x40001800
 800b9d0:	40001c00 	.word	0x40001c00
 800b9d4:	40002000 	.word	0x40002000

0800b9d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	f023 0201 	bic.w	r2, r3, #1
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 0303 	bic.w	r3, r3, #3
 800ba0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f023 0302 	bic.w	r3, r3, #2
 800ba20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a20      	ldr	r2, [pc, #128]	; (800bab0 <TIM_OC1_SetConfig+0xd8>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d003      	beq.n	800ba3c <TIM_OC1_SetConfig+0x64>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a1f      	ldr	r2, [pc, #124]	; (800bab4 <TIM_OC1_SetConfig+0xdc>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d10c      	bne.n	800ba56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	f023 0308 	bic.w	r3, r3, #8
 800ba42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	697a      	ldr	r2, [r7, #20]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f023 0304 	bic.w	r3, r3, #4
 800ba54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a15      	ldr	r2, [pc, #84]	; (800bab0 <TIM_OC1_SetConfig+0xd8>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d003      	beq.n	800ba66 <TIM_OC1_SetConfig+0x8e>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a14      	ldr	r2, [pc, #80]	; (800bab4 <TIM_OC1_SetConfig+0xdc>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d111      	bne.n	800ba8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	621a      	str	r2, [r3, #32]
}
 800baa4:	bf00      	nop
 800baa6:	371c      	adds	r7, #28
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	40010000 	.word	0x40010000
 800bab4:	40010400 	.word	0x40010400

0800bab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	f023 0210 	bic.w	r2, r3, #16
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	021b      	lsls	r3, r3, #8
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	f023 0320 	bic.w	r3, r3, #32
 800bb02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	011b      	lsls	r3, r3, #4
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a22      	ldr	r2, [pc, #136]	; (800bb9c <TIM_OC2_SetConfig+0xe4>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d003      	beq.n	800bb20 <TIM_OC2_SetConfig+0x68>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a21      	ldr	r2, [pc, #132]	; (800bba0 <TIM_OC2_SetConfig+0xe8>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d10d      	bne.n	800bb3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a17      	ldr	r2, [pc, #92]	; (800bb9c <TIM_OC2_SetConfig+0xe4>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d003      	beq.n	800bb4c <TIM_OC2_SetConfig+0x94>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a16      	ldr	r2, [pc, #88]	; (800bba0 <TIM_OC2_SetConfig+0xe8>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d113      	bne.n	800bb74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	685a      	ldr	r2, [r3, #4]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	621a      	str	r2, [r3, #32]
}
 800bb8e:	bf00      	nop
 800bb90:	371c      	adds	r7, #28
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	40010000 	.word	0x40010000
 800bba0:	40010400 	.word	0x40010400

0800bba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f023 0303 	bic.w	r3, r3, #3
 800bbda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	021b      	lsls	r3, r3, #8
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a21      	ldr	r2, [pc, #132]	; (800bc84 <TIM_OC3_SetConfig+0xe0>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d003      	beq.n	800bc0a <TIM_OC3_SetConfig+0x66>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a20      	ldr	r2, [pc, #128]	; (800bc88 <TIM_OC3_SetConfig+0xe4>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d10d      	bne.n	800bc26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	021b      	lsls	r3, r3, #8
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a16      	ldr	r2, [pc, #88]	; (800bc84 <TIM_OC3_SetConfig+0xe0>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d003      	beq.n	800bc36 <TIM_OC3_SetConfig+0x92>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a15      	ldr	r2, [pc, #84]	; (800bc88 <TIM_OC3_SetConfig+0xe4>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d113      	bne.n	800bc5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	011b      	lsls	r3, r3, #4
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	011b      	lsls	r3, r3, #4
 800bc58:	693a      	ldr	r2, [r7, #16]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	685a      	ldr	r2, [r3, #4]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	621a      	str	r2, [r3, #32]
}
 800bc78:	bf00      	nop
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	40010000 	.word	0x40010000
 800bc88:	40010400 	.word	0x40010400

0800bc8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b087      	sub	sp, #28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a1b      	ldr	r3, [r3, #32]
 800bc9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	021b      	lsls	r3, r3, #8
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bcd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	031b      	lsls	r3, r3, #12
 800bcde:	693a      	ldr	r2, [r7, #16]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a12      	ldr	r2, [pc, #72]	; (800bd30 <TIM_OC4_SetConfig+0xa4>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d003      	beq.n	800bcf4 <TIM_OC4_SetConfig+0x68>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a11      	ldr	r2, [pc, #68]	; (800bd34 <TIM_OC4_SetConfig+0xa8>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d109      	bne.n	800bd08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	019b      	lsls	r3, r3, #6
 800bd02:	697a      	ldr	r2, [r7, #20]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	621a      	str	r2, [r3, #32]
}
 800bd22:	bf00      	nop
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	40010000 	.word	0x40010000
 800bd34:	40010400 	.word	0x40010400

0800bd38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b087      	sub	sp, #28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6a1b      	ldr	r3, [r3, #32]
 800bd48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	f023 0201 	bic.w	r2, r3, #1
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f023 030a 	bic.w	r3, r3, #10
 800bd74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd76:	697a      	ldr	r2, [r7, #20]
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	693a      	ldr	r2, [r7, #16]
 800bd82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	621a      	str	r2, [r3, #32]
}
 800bd8a:	bf00      	nop
 800bd8c:	371c      	adds	r7, #28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b087      	sub	sp, #28
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	60f8      	str	r0, [r7, #12]
 800bd9e:	60b9      	str	r1, [r7, #8]
 800bda0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	f023 0210 	bic.w	r2, r3, #16
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	031b      	lsls	r3, r3, #12
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	011b      	lsls	r3, r3, #4
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	621a      	str	r2, [r3, #32]
}
 800bdea:	bf00      	nop
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b085      	sub	sp, #20
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	4313      	orrs	r3, r2
 800be14:	f043 0307 	orr.w	r3, r3, #7
 800be18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	609a      	str	r2, [r3, #8]
}
 800be20:	bf00      	nop
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b087      	sub	sp, #28
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	021a      	lsls	r2, r3, #8
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	431a      	orrs	r2, r3
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	4313      	orrs	r3, r2
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	4313      	orrs	r3, r2
 800be58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	609a      	str	r2, [r3, #8]
}
 800be60:	bf00      	nop
 800be62:	371c      	adds	r7, #28
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b087      	sub	sp, #28
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f003 031f 	and.w	r3, r3, #31
 800be7e:	2201      	movs	r2, #1
 800be80:	fa02 f303 	lsl.w	r3, r2, r3
 800be84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6a1a      	ldr	r2, [r3, #32]
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	43db      	mvns	r3, r3
 800be8e:	401a      	ands	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6a1a      	ldr	r2, [r3, #32]
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	f003 031f 	and.w	r3, r3, #31
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	fa01 f303 	lsl.w	r3, r1, r3
 800bea4:	431a      	orrs	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	621a      	str	r2, [r3, #32]
}
 800beaa:	bf00      	nop
 800beac:	371c      	adds	r7, #28
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
	...

0800beb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d101      	bne.n	800bed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800becc:	2302      	movs	r3, #2
 800bece:	e05a      	b.n	800bf86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	4313      	orrs	r3, r2
 800bf00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a21      	ldr	r2, [pc, #132]	; (800bf94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d022      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf1c:	d01d      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a1d      	ldr	r2, [pc, #116]	; (800bf98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d018      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a1b      	ldr	r2, [pc, #108]	; (800bf9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d013      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a1a      	ldr	r2, [pc, #104]	; (800bfa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d00e      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a18      	ldr	r2, [pc, #96]	; (800bfa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d009      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a17      	ldr	r2, [pc, #92]	; (800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d004      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a15      	ldr	r2, [pc, #84]	; (800bfac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d10c      	bne.n	800bf74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	40010000 	.word	0x40010000
 800bf98:	40000400 	.word	0x40000400
 800bf9c:	40000800 	.word	0x40000800
 800bfa0:	40000c00 	.word	0x40000c00
 800bfa4:	40010400 	.word	0x40010400
 800bfa8:	40014000 	.word	0x40014000
 800bfac:	40001800 	.word	0x40001800

0800bfb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d101      	bne.n	800bfea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e03f      	b.n	800c06a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f7f6 fc42 	bl	8002888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2224      	movs	r2, #36	; 0x24
 800c008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68da      	ldr	r2, [r3, #12]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c01a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 ff77 	bl	800cf10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	691a      	ldr	r2, [r3, #16]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	695a      	ldr	r2, [r3, #20]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68da      	ldr	r2, [r3, #12]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2220      	movs	r2, #32
 800c05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2220      	movs	r2, #32
 800c064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
	...

0800c074 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b08c      	sub	sp, #48	; 0x30
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	4613      	mov	r3, r2
 800c080:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b20      	cmp	r3, #32
 800c08c:	d165      	bne.n	800c15a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <HAL_UART_Transmit_DMA+0x26>
 800c094:	88fb      	ldrh	r3, [r7, #6]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e05e      	b.n	800c15c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d101      	bne.n	800c0ac <HAL_UART_Transmit_DMA+0x38>
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	e057      	b.n	800c15c <HAL_UART_Transmit_DMA+0xe8>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	88fa      	ldrh	r2, [r7, #6]
 800c0be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	88fa      	ldrh	r2, [r7, #6]
 800c0c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2221      	movs	r2, #33	; 0x21
 800c0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d8:	4a22      	ldr	r2, [pc, #136]	; (800c164 <HAL_UART_Transmit_DMA+0xf0>)
 800c0da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e0:	4a21      	ldr	r2, [pc, #132]	; (800c168 <HAL_UART_Transmit_DMA+0xf4>)
 800c0e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e8:	4a20      	ldr	r2, [pc, #128]	; (800c16c <HAL_UART_Transmit_DMA+0xf8>)
 800c0ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c0f4:	f107 0308 	add.w	r3, r7, #8
 800c0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	6819      	ldr	r1, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3304      	adds	r3, #4
 800c108:	461a      	mov	r2, r3
 800c10a:	88fb      	ldrh	r3, [r7, #6]
 800c10c:	f7fb f95e 	bl	80073cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c118:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3314      	adds	r3, #20
 800c128:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	617b      	str	r3, [r7, #20]
   return(result);
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c138:	62bb      	str	r3, [r7, #40]	; 0x28
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	3314      	adds	r3, #20
 800c140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c142:	627a      	str	r2, [r7, #36]	; 0x24
 800c144:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	6a39      	ldr	r1, [r7, #32]
 800c148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e5      	bne.n	800c122 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	e000      	b.n	800c15c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c15a:	2302      	movs	r3, #2
  }
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3730      	adds	r7, #48	; 0x30
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	0800c7a9 	.word	0x0800c7a9
 800c168:	0800c843 	.word	0x0800c843
 800c16c:	0800c9bb 	.word	0x0800c9bb

0800c170 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b08c      	sub	sp, #48	; 0x30
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b20      	cmp	r3, #32
 800c188:	d152      	bne.n	800c230 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800c190:	88fb      	ldrh	r3, [r7, #6]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e04b      	b.n	800c232 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d101      	bne.n	800c1a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e044      	b.n	800c232 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c1b6:	88fb      	ldrh	r3, [r7, #6]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	68b9      	ldr	r1, [r7, #8]
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f000 fc47 	bl	800ca50 <UART_Start_Receive_DMA>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c1c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d12c      	bne.n	800c22a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d125      	bne.n	800c224 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1d8:	2300      	movs	r3, #0
 800c1da:	613b      	str	r3, [r7, #16]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	613b      	str	r3, [r7, #16]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	613b      	str	r3, [r7, #16]
 800c1ec:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	330c      	adds	r3, #12
 800c1f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	e853 3f00 	ldrex	r3, [r3]
 800c1fc:	617b      	str	r3, [r7, #20]
   return(result);
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f043 0310 	orr.w	r3, r3, #16
 800c204:	62bb      	str	r3, [r7, #40]	; 0x28
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	330c      	adds	r3, #12
 800c20c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c20e:	627a      	str	r2, [r7, #36]	; 0x24
 800c210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c212:	6a39      	ldr	r1, [r7, #32]
 800c214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c216:	e841 2300 	strex	r3, r2, [r1]
 800c21a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1e5      	bne.n	800c1ee <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800c222:	e002      	b.n	800c22a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800c22a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c22e:	e000      	b.n	800c232 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800c230:	2302      	movs	r3, #2
  }
}
 800c232:	4618      	mov	r0, r3
 800c234:	3730      	adds	r7, #48	; 0x30
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
	...

0800c23c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b0ba      	sub	sp, #232	; 0xe8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c262:	2300      	movs	r3, #0
 800c264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c268:	2300      	movs	r3, #0
 800c26a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c272:	f003 030f 	and.w	r3, r3, #15
 800c276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c27a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10f      	bne.n	800c2a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c286:	f003 0320 	and.w	r3, r3, #32
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d009      	beq.n	800c2a2 <HAL_UART_IRQHandler+0x66>
 800c28e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c292:	f003 0320 	and.w	r3, r3, #32
 800c296:	2b00      	cmp	r3, #0
 800c298:	d003      	beq.n	800c2a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fd7d 	bl	800cd9a <UART_Receive_IT>
      return;
 800c2a0:	e256      	b.n	800c750 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c2a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f000 80de 	beq.w	800c468 <HAL_UART_IRQHandler+0x22c>
 800c2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d106      	bne.n	800c2c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c2b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 80d1 	beq.w	800c468 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ca:	f003 0301 	and.w	r3, r3, #1
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00b      	beq.n	800c2ea <HAL_UART_IRQHandler+0xae>
 800c2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d005      	beq.n	800c2ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e2:	f043 0201 	orr.w	r2, r3, #1
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c2ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ee:	f003 0304 	and.w	r3, r3, #4
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00b      	beq.n	800c30e <HAL_UART_IRQHandler+0xd2>
 800c2f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d005      	beq.n	800c30e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c306:	f043 0202 	orr.w	r2, r3, #2
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c312:	f003 0302 	and.w	r3, r3, #2
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00b      	beq.n	800c332 <HAL_UART_IRQHandler+0xf6>
 800c31a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	d005      	beq.n	800c332 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32a:	f043 0204 	orr.w	r2, r3, #4
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c336:	f003 0308 	and.w	r3, r3, #8
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d011      	beq.n	800c362 <HAL_UART_IRQHandler+0x126>
 800c33e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c342:	f003 0320 	and.w	r3, r3, #32
 800c346:	2b00      	cmp	r3, #0
 800c348:	d105      	bne.n	800c356 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c34e:	f003 0301 	and.w	r3, r3, #1
 800c352:	2b00      	cmp	r3, #0
 800c354:	d005      	beq.n	800c362 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35a:	f043 0208 	orr.w	r2, r3, #8
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c366:	2b00      	cmp	r3, #0
 800c368:	f000 81ed 	beq.w	800c746 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c370:	f003 0320 	and.w	r3, r3, #32
 800c374:	2b00      	cmp	r3, #0
 800c376:	d008      	beq.n	800c38a <HAL_UART_IRQHandler+0x14e>
 800c378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c37c:	f003 0320 	and.w	r3, r3, #32
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fd08 	bl	800cd9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c394:	2b40      	cmp	r3, #64	; 0x40
 800c396:	bf0c      	ite	eq
 800c398:	2301      	moveq	r3, #1
 800c39a:	2300      	movne	r3, #0
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a6:	f003 0308 	and.w	r3, r3, #8
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d103      	bne.n	800c3b6 <HAL_UART_IRQHandler+0x17a>
 800c3ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d04f      	beq.n	800c456 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fc10 	bl	800cbdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3c6:	2b40      	cmp	r3, #64	; 0x40
 800c3c8:	d141      	bne.n	800c44e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3314      	adds	r3, #20
 800c3d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3d8:	e853 3f00 	ldrex	r3, [r3]
 800c3dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c3e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3314      	adds	r3, #20
 800c3f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c3f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c3fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c406:	e841 2300 	strex	r3, r2, [r1]
 800c40a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c40e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1d9      	bne.n	800c3ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d013      	beq.n	800c446 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c422:	4a7d      	ldr	r2, [pc, #500]	; (800c618 <HAL_UART_IRQHandler+0x3dc>)
 800c424:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fb f896 	bl	800755c <HAL_DMA_Abort_IT>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d016      	beq.n	800c464 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c440:	4610      	mov	r0, r2
 800c442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c444:	e00e      	b.n	800c464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 f9a4 	bl	800c794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c44c:	e00a      	b.n	800c464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f9a0 	bl	800c794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c454:	e006      	b.n	800c464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f99c 	bl	800c794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c462:	e170      	b.n	800c746 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c464:	bf00      	nop
    return;
 800c466:	e16e      	b.n	800c746 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	f040 814a 	bne.w	800c706 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c476:	f003 0310 	and.w	r3, r3, #16
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f000 8143 	beq.w	800c706 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c484:	f003 0310 	and.w	r3, r3, #16
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 813c 	beq.w	800c706 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c48e:	2300      	movs	r3, #0
 800c490:	60bb      	str	r3, [r7, #8]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	60bb      	str	r3, [r7, #8]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	60bb      	str	r3, [r7, #8]
 800c4a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ae:	2b40      	cmp	r3, #64	; 0x40
 800c4b0:	f040 80b4 	bne.w	800c61c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 8140 	beq.w	800c74a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c4ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	f080 8139 	bcs.w	800c74a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e4:	69db      	ldr	r3, [r3, #28]
 800c4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ea:	f000 8088 	beq.w	800c5fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	330c      	adds	r3, #12
 800c4f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4fc:	e853 3f00 	ldrex	r3, [r3]
 800c500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c50c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	330c      	adds	r3, #12
 800c516:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c51a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c51e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c526:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c52a:	e841 2300 	strex	r3, r2, [r1]
 800c52e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1d9      	bne.n	800c4ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3314      	adds	r3, #20
 800c540:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c54a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c54c:	f023 0301 	bic.w	r3, r3, #1
 800c550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	3314      	adds	r3, #20
 800c55a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c55e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c562:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c564:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c566:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c56a:	e841 2300 	strex	r3, r2, [r1]
 800c56e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1e1      	bne.n	800c53a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3314      	adds	r3, #20
 800c57c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c58c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3314      	adds	r3, #20
 800c596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c59a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c59c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c5a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c5a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e3      	bne.n	800c576 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2220      	movs	r2, #32
 800c5b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	330c      	adds	r3, #12
 800c5c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5c6:	e853 3f00 	ldrex	r3, [r3]
 800c5ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c5cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5ce:	f023 0310 	bic.w	r3, r3, #16
 800c5d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	330c      	adds	r3, #12
 800c5dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c5e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800c5e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5e8:	e841 2300 	strex	r3, r2, [r1]
 800c5ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1e3      	bne.n	800c5bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7fa ff3f 	bl	800747c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c606:	b29b      	uxth	r3, r3
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	4619      	mov	r1, r3
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7f4 fe2a 	bl	8001268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c614:	e099      	b.n	800c74a <HAL_UART_IRQHandler+0x50e>
 800c616:	bf00      	nop
 800c618:	0800cca3 	.word	0x0800cca3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c624:	b29b      	uxth	r3, r3
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c630:	b29b      	uxth	r3, r3
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 808b 	beq.w	800c74e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 8086 	beq.w	800c74e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	330c      	adds	r3, #12
 800c648:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c658:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	330c      	adds	r3, #12
 800c662:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c666:	647a      	str	r2, [r7, #68]	; 0x44
 800c668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c66c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c66e:	e841 2300 	strex	r3, r2, [r1]
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1e3      	bne.n	800c642 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	3314      	adds	r3, #20
 800c680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	e853 3f00 	ldrex	r3, [r3]
 800c688:	623b      	str	r3, [r7, #32]
   return(result);
 800c68a:	6a3b      	ldr	r3, [r7, #32]
 800c68c:	f023 0301 	bic.w	r3, r3, #1
 800c690:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	3314      	adds	r3, #20
 800c69a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c69e:	633a      	str	r2, [r7, #48]	; 0x30
 800c6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6a6:	e841 2300 	strex	r3, r2, [r1]
 800c6aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1e3      	bne.n	800c67a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2220      	movs	r2, #32
 800c6b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	330c      	adds	r3, #12
 800c6c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	e853 3f00 	ldrex	r3, [r3]
 800c6ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f023 0310 	bic.w	r3, r3, #16
 800c6d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	330c      	adds	r3, #12
 800c6e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c6e4:	61fa      	str	r2, [r7, #28]
 800c6e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	69b9      	ldr	r1, [r7, #24]
 800c6ea:	69fa      	ldr	r2, [r7, #28]
 800c6ec:	e841 2300 	strex	r3, r2, [r1]
 800c6f0:	617b      	str	r3, [r7, #20]
   return(result);
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e3      	bne.n	800c6c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7f4 fdb2 	bl	8001268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c704:	e023      	b.n	800c74e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d009      	beq.n	800c726 <HAL_UART_IRQHandler+0x4ea>
 800c712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fad3 	bl	800ccca <UART_Transmit_IT>
    return;
 800c724:	e014      	b.n	800c750 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00e      	beq.n	800c750 <HAL_UART_IRQHandler+0x514>
 800c732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d008      	beq.n	800c750 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fb13 	bl	800cd6a <UART_EndTransmit_IT>
    return;
 800c744:	e004      	b.n	800c750 <HAL_UART_IRQHandler+0x514>
    return;
 800c746:	bf00      	nop
 800c748:	e002      	b.n	800c750 <HAL_UART_IRQHandler+0x514>
      return;
 800c74a:	bf00      	nop
 800c74c:	e000      	b.n	800c750 <HAL_UART_IRQHandler+0x514>
      return;
 800c74e:	bf00      	nop
  }
}
 800c750:	37e8      	adds	r7, #232	; 0xe8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop

0800c758 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c774:	bf00      	nop
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c79c:	bf00      	nop
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b090      	sub	sp, #64	; 0x40
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d137      	bne.n	800c834 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	3314      	adds	r3, #20
 800c7d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	e853 3f00 	ldrex	r3, [r3]
 800c7d8:	623b      	str	r3, [r7, #32]
   return(result);
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3314      	adds	r3, #20
 800c7e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ea:	633a      	str	r2, [r7, #48]	; 0x30
 800c7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f2:	e841 2300 	strex	r3, r2, [r1]
 800c7f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1e5      	bne.n	800c7ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	330c      	adds	r3, #12
 800c804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	e853 3f00 	ldrex	r3, [r3]
 800c80c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
 800c816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	330c      	adds	r3, #12
 800c81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c81e:	61fa      	str	r2, [r7, #28]
 800c820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c822:	69b9      	ldr	r1, [r7, #24]
 800c824:	69fa      	ldr	r2, [r7, #28]
 800c826:	e841 2300 	strex	r3, r2, [r1]
 800c82a:	617b      	str	r3, [r7, #20]
   return(result);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1e5      	bne.n	800c7fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c832:	e002      	b.n	800c83a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c834:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c836:	f7f4 fbeb 	bl	8001010 <HAL_UART_TxCpltCallback>
}
 800c83a:	bf00      	nop
 800c83c:	3740      	adds	r7, #64	; 0x40
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f7ff ff81 	bl	800c758 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c856:	bf00      	nop
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b09c      	sub	sp, #112	; 0x70
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c876:	2b00      	cmp	r3, #0
 800c878:	d172      	bne.n	800c960 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c87a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c87c:	2200      	movs	r2, #0
 800c87e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	330c      	adds	r3, #12
 800c886:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c88a:	e853 3f00 	ldrex	r3, [r3]
 800c88e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c896:	66bb      	str	r3, [r7, #104]	; 0x68
 800c898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	330c      	adds	r3, #12
 800c89e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c8a0:	65ba      	str	r2, [r7, #88]	; 0x58
 800c8a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8a8:	e841 2300 	strex	r3, r2, [r1]
 800c8ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1e5      	bne.n	800c880 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3314      	adds	r3, #20
 800c8ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8be:	e853 3f00 	ldrex	r3, [r3]
 800c8c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c6:	f023 0301 	bic.w	r3, r3, #1
 800c8ca:	667b      	str	r3, [r7, #100]	; 0x64
 800c8cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	3314      	adds	r3, #20
 800c8d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c8d4:	647a      	str	r2, [r7, #68]	; 0x44
 800c8d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8dc:	e841 2300 	strex	r3, r2, [r1]
 800c8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1e5      	bne.n	800c8b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3314      	adds	r3, #20
 800c8ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	e853 3f00 	ldrex	r3, [r3]
 800c8f6:	623b      	str	r3, [r7, #32]
   return(result);
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8fe:	663b      	str	r3, [r7, #96]	; 0x60
 800c900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3314      	adds	r3, #20
 800c906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c908:	633a      	str	r2, [r7, #48]	; 0x30
 800c90a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c910:	e841 2300 	strex	r3, r2, [r1]
 800c914:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e5      	bne.n	800c8e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c91e:	2220      	movs	r2, #32
 800c920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d119      	bne.n	800c960 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	330c      	adds	r3, #12
 800c932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	e853 3f00 	ldrex	r3, [r3]
 800c93a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f023 0310 	bic.w	r3, r3, #16
 800c942:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	330c      	adds	r3, #12
 800c94a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c94c:	61fa      	str	r2, [r7, #28]
 800c94e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c950:	69b9      	ldr	r1, [r7, #24]
 800c952:	69fa      	ldr	r2, [r7, #28]
 800c954:	e841 2300 	strex	r3, r2, [r1]
 800c958:	617b      	str	r3, [r7, #20]
   return(result);
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1e5      	bne.n	800c92c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c964:	2b01      	cmp	r3, #1
 800c966:	d106      	bne.n	800c976 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c96a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c96c:	4619      	mov	r1, r3
 800c96e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c970:	f7f4 fc7a 	bl	8001268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c974:	e002      	b.n	800c97c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c976:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c978:	f7ff fef8 	bl	800c76c <HAL_UART_RxCpltCallback>
}
 800c97c:	bf00      	nop
 800c97e:	3770      	adds	r7, #112	; 0x70
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c990:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c996:	2b01      	cmp	r3, #1
 800c998:	d108      	bne.n	800c9ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c99e:	085b      	lsrs	r3, r3, #1
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f7f4 fc5f 	bl	8001268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c9aa:	e002      	b.n	800c9b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f7ff fee7 	bl	800c780 <HAL_UART_RxHalfCpltCallback>
}
 800c9b2:	bf00      	nop
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	695b      	ldr	r3, [r3, #20]
 800c9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9d6:	2b80      	cmp	r3, #128	; 0x80
 800c9d8:	bf0c      	ite	eq
 800c9da:	2301      	moveq	r3, #1
 800c9dc:	2300      	movne	r3, #0
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	2b21      	cmp	r3, #33	; 0x21
 800c9ec:	d108      	bne.n	800ca00 <UART_DMAError+0x46>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d005      	beq.n	800ca00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c9fa:	68b8      	ldr	r0, [r7, #8]
 800c9fc:	f000 f8c6 	bl	800cb8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	695b      	ldr	r3, [r3, #20]
 800ca06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca0a:	2b40      	cmp	r3, #64	; 0x40
 800ca0c:	bf0c      	ite	eq
 800ca0e:	2301      	moveq	r3, #1
 800ca10:	2300      	movne	r3, #0
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b22      	cmp	r3, #34	; 0x22
 800ca20:	d108      	bne.n	800ca34 <UART_DMAError+0x7a>
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d005      	beq.n	800ca34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ca2e:	68b8      	ldr	r0, [r7, #8]
 800ca30:	f000 f8d4 	bl	800cbdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca38:	f043 0210 	orr.w	r2, r3, #16
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca40:	68b8      	ldr	r0, [r7, #8]
 800ca42:	f7ff fea7 	bl	800c794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca46:	bf00      	nop
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b098      	sub	sp, #96	; 0x60
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	88fa      	ldrh	r2, [r7, #6]
 800ca68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2222      	movs	r2, #34	; 0x22
 800ca74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca7c:	4a40      	ldr	r2, [pc, #256]	; (800cb80 <UART_Start_Receive_DMA+0x130>)
 800ca7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca84:	4a3f      	ldr	r2, [pc, #252]	; (800cb84 <UART_Start_Receive_DMA+0x134>)
 800ca86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8c:	4a3e      	ldr	r2, [pc, #248]	; (800cb88 <UART_Start_Receive_DMA+0x138>)
 800ca8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca94:	2200      	movs	r2, #0
 800ca96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ca98:	f107 0308 	add.w	r3, r7, #8
 800ca9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	3304      	adds	r3, #4
 800caa8:	4619      	mov	r1, r3
 800caaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	88fb      	ldrh	r3, [r7, #6]
 800cab0:	f7fa fc8c 	bl	80073cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cab4:	2300      	movs	r3, #0
 800cab6:	613b      	str	r3, [r7, #16]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	613b      	str	r3, [r7, #16]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	613b      	str	r3, [r7, #16]
 800cac8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d019      	beq.n	800cb0e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	330c      	adds	r3, #12
 800cae0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cae4:	e853 3f00 	ldrex	r3, [r3]
 800cae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800caea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800caf0:	65bb      	str	r3, [r7, #88]	; 0x58
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	330c      	adds	r3, #12
 800caf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cafa:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cafc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cb00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb02:	e841 2300 	strex	r3, r2, [r1]
 800cb06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cb08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1e5      	bne.n	800cada <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3314      	adds	r3, #20
 800cb14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb18:	e853 3f00 	ldrex	r3, [r3]
 800cb1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	f043 0301 	orr.w	r3, r3, #1
 800cb24:	657b      	str	r3, [r7, #84]	; 0x54
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3314      	adds	r3, #20
 800cb2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb2e:	63ba      	str	r2, [r7, #56]	; 0x38
 800cb30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb36:	e841 2300 	strex	r3, r2, [r1]
 800cb3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1e5      	bne.n	800cb0e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3314      	adds	r3, #20
 800cb48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	e853 3f00 	ldrex	r3, [r3]
 800cb50:	617b      	str	r3, [r7, #20]
   return(result);
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb58:	653b      	str	r3, [r7, #80]	; 0x50
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3314      	adds	r3, #20
 800cb60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb62:	627a      	str	r2, [r7, #36]	; 0x24
 800cb64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb66:	6a39      	ldr	r1, [r7, #32]
 800cb68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb6a:	e841 2300 	strex	r3, r2, [r1]
 800cb6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1e5      	bne.n	800cb42 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3760      	adds	r7, #96	; 0x60
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	0800c85f 	.word	0x0800c85f
 800cb84:	0800c985 	.word	0x0800c985
 800cb88:	0800c9bb 	.word	0x0800c9bb

0800cb8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b089      	sub	sp, #36	; 0x24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	330c      	adds	r3, #12
 800cb9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	e853 3f00 	ldrex	r3, [r3]
 800cba2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cbaa:	61fb      	str	r3, [r7, #28]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	330c      	adds	r3, #12
 800cbb2:	69fa      	ldr	r2, [r7, #28]
 800cbb4:	61ba      	str	r2, [r7, #24]
 800cbb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb8:	6979      	ldr	r1, [r7, #20]
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	e841 2300 	strex	r3, r2, [r1]
 800cbc0:	613b      	str	r3, [r7, #16]
   return(result);
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e5      	bne.n	800cb94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2220      	movs	r2, #32
 800cbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800cbd0:	bf00      	nop
 800cbd2:	3724      	adds	r7, #36	; 0x24
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b095      	sub	sp, #84	; 0x54
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	330c      	adds	r3, #12
 800cbea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbee:	e853 3f00 	ldrex	r3, [r3]
 800cbf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	330c      	adds	r3, #12
 800cc02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc04:	643a      	str	r2, [r7, #64]	; 0x40
 800cc06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc0c:	e841 2300 	strex	r3, r2, [r1]
 800cc10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1e5      	bne.n	800cbe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	3314      	adds	r3, #20
 800cc1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc20:	6a3b      	ldr	r3, [r7, #32]
 800cc22:	e853 3f00 	ldrex	r3, [r3]
 800cc26:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	f023 0301 	bic.w	r3, r3, #1
 800cc2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	3314      	adds	r3, #20
 800cc36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc38:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc40:	e841 2300 	strex	r3, r2, [r1]
 800cc44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1e5      	bne.n	800cc18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d119      	bne.n	800cc88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	330c      	adds	r3, #12
 800cc5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	e853 3f00 	ldrex	r3, [r3]
 800cc62:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f023 0310 	bic.w	r3, r3, #16
 800cc6a:	647b      	str	r3, [r7, #68]	; 0x44
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	330c      	adds	r3, #12
 800cc72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc74:	61ba      	str	r2, [r7, #24]
 800cc76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc78:	6979      	ldr	r1, [r7, #20]
 800cc7a:	69ba      	ldr	r2, [r7, #24]
 800cc7c:	e841 2300 	strex	r3, r2, [r1]
 800cc80:	613b      	str	r3, [r7, #16]
   return(result);
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e5      	bne.n	800cc54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2220      	movs	r2, #32
 800cc8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cc96:	bf00      	nop
 800cc98:	3754      	adds	r7, #84	; 0x54
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b084      	sub	sp, #16
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f7ff fd69 	bl	800c794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccc2:	bf00      	nop
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b085      	sub	sp, #20
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	2b21      	cmp	r3, #33	; 0x21
 800ccdc:	d13e      	bne.n	800cd5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cce6:	d114      	bne.n	800cd12 <UART_Transmit_IT+0x48>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d110      	bne.n	800cd12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a1b      	ldr	r3, [r3, #32]
 800ccf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	881b      	ldrh	r3, [r3, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	1c9a      	adds	r2, r3, #2
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	621a      	str	r2, [r3, #32]
 800cd10:	e008      	b.n	800cd24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	1c59      	adds	r1, r3, #1
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	6211      	str	r1, [r2, #32]
 800cd1c:	781a      	ldrb	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	4619      	mov	r1, r3
 800cd32:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10f      	bne.n	800cd58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	68da      	ldr	r2, [r3, #12]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68da      	ldr	r2, [r3, #12]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	e000      	b.n	800cd5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd5c:	2302      	movs	r3, #2
  }
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b082      	sub	sp, #8
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68da      	ldr	r2, [r3, #12]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2220      	movs	r2, #32
 800cd86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7f4 f940 	bl	8001010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b08c      	sub	sp, #48	; 0x30
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b22      	cmp	r3, #34	; 0x22
 800cdac:	f040 80ab 	bne.w	800cf06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdb8:	d117      	bne.n	800cdea <UART_Receive_IT+0x50>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d113      	bne.n	800cdea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cddc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde2:	1c9a      	adds	r2, r3, #2
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	629a      	str	r2, [r3, #40]	; 0x28
 800cde8:	e026      	b.n	800ce38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdfc:	d007      	beq.n	800ce0e <UART_Receive_IT+0x74>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d10a      	bne.n	800ce1c <UART_Receive_IT+0x82>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d106      	bne.n	800ce1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	e008      	b.n	800ce2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	4619      	mov	r1, r3
 800ce46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d15a      	bne.n	800cf02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68da      	ldr	r2, [r3, #12]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f022 0220 	bic.w	r2, r2, #32
 800ce5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68da      	ldr	r2, [r3, #12]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	695a      	ldr	r2, [r3, #20]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f022 0201 	bic.w	r2, r2, #1
 800ce7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2220      	movs	r2, #32
 800ce80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d135      	bne.n	800cef8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	330c      	adds	r3, #12
 800ce98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	e853 3f00 	ldrex	r3, [r3]
 800cea0:	613b      	str	r3, [r7, #16]
   return(result);
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	f023 0310 	bic.w	r3, r3, #16
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	330c      	adds	r3, #12
 800ceb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb2:	623a      	str	r2, [r7, #32]
 800ceb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb6:	69f9      	ldr	r1, [r7, #28]
 800ceb8:	6a3a      	ldr	r2, [r7, #32]
 800ceba:	e841 2300 	strex	r3, r2, [r1]
 800cebe:	61bb      	str	r3, [r7, #24]
   return(result);
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1e5      	bne.n	800ce92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f003 0310 	and.w	r3, r3, #16
 800ced0:	2b10      	cmp	r3, #16
 800ced2:	d10a      	bne.n	800ceea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ced4:	2300      	movs	r3, #0
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7f4 f9b9 	bl	8001268 <HAL_UARTEx_RxEventCallback>
 800cef6:	e002      	b.n	800cefe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff fc37 	bl	800c76c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	e002      	b.n	800cf08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cf02:	2300      	movs	r3, #0
 800cf04:	e000      	b.n	800cf08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cf06:	2302      	movs	r3, #2
  }
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3730      	adds	r7, #48	; 0x30
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf14:	b0c0      	sub	sp, #256	; 0x100
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	691b      	ldr	r3, [r3, #16]
 800cf24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cf28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf2c:	68d9      	ldr	r1, [r3, #12]
 800cf2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	ea40 0301 	orr.w	r3, r0, r1
 800cf38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cf3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf3e:	689a      	ldr	r2, [r3, #8]
 800cf40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	431a      	orrs	r2, r3
 800cf48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf4c:	695b      	ldr	r3, [r3, #20]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf54:	69db      	ldr	r3, [r3, #28]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cf5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cf68:	f021 010c 	bic.w	r1, r1, #12
 800cf6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf76:	430b      	orrs	r3, r1
 800cf78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cf86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf8a:	6999      	ldr	r1, [r3, #24]
 800cf8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	ea40 0301 	orr.w	r3, r0, r1
 800cf96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	4b8f      	ldr	r3, [pc, #572]	; (800d1dc <UART_SetConfig+0x2cc>)
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d005      	beq.n	800cfb0 <UART_SetConfig+0xa0>
 800cfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b8d      	ldr	r3, [pc, #564]	; (800d1e0 <UART_SetConfig+0x2d0>)
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d104      	bne.n	800cfba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cfb0:	f7fc fc24 	bl	80097fc <HAL_RCC_GetPCLK2Freq>
 800cfb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cfb8:	e003      	b.n	800cfc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cfba:	f7fc fc0b 	bl	80097d4 <HAL_RCC_GetPCLK1Freq>
 800cfbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfc6:	69db      	ldr	r3, [r3, #28]
 800cfc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfcc:	f040 810c 	bne.w	800d1e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cfd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cfda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cfde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cfe2:	4622      	mov	r2, r4
 800cfe4:	462b      	mov	r3, r5
 800cfe6:	1891      	adds	r1, r2, r2
 800cfe8:	65b9      	str	r1, [r7, #88]	; 0x58
 800cfea:	415b      	adcs	r3, r3
 800cfec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cff2:	4621      	mov	r1, r4
 800cff4:	eb12 0801 	adds.w	r8, r2, r1
 800cff8:	4629      	mov	r1, r5
 800cffa:	eb43 0901 	adc.w	r9, r3, r1
 800cffe:	f04f 0200 	mov.w	r2, #0
 800d002:	f04f 0300 	mov.w	r3, #0
 800d006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d00a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d00e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d012:	4690      	mov	r8, r2
 800d014:	4699      	mov	r9, r3
 800d016:	4623      	mov	r3, r4
 800d018:	eb18 0303 	adds.w	r3, r8, r3
 800d01c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d020:	462b      	mov	r3, r5
 800d022:	eb49 0303 	adc.w	r3, r9, r3
 800d026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d036:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d03a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d03e:	460b      	mov	r3, r1
 800d040:	18db      	adds	r3, r3, r3
 800d042:	653b      	str	r3, [r7, #80]	; 0x50
 800d044:	4613      	mov	r3, r2
 800d046:	eb42 0303 	adc.w	r3, r2, r3
 800d04a:	657b      	str	r3, [r7, #84]	; 0x54
 800d04c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d054:	f7f3 fd80 	bl	8000b58 <__aeabi_uldivmod>
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
 800d05c:	4b61      	ldr	r3, [pc, #388]	; (800d1e4 <UART_SetConfig+0x2d4>)
 800d05e:	fba3 2302 	umull	r2, r3, r3, r2
 800d062:	095b      	lsrs	r3, r3, #5
 800d064:	011c      	lsls	r4, r3, #4
 800d066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d06a:	2200      	movs	r2, #0
 800d06c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d070:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d078:	4642      	mov	r2, r8
 800d07a:	464b      	mov	r3, r9
 800d07c:	1891      	adds	r1, r2, r2
 800d07e:	64b9      	str	r1, [r7, #72]	; 0x48
 800d080:	415b      	adcs	r3, r3
 800d082:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d088:	4641      	mov	r1, r8
 800d08a:	eb12 0a01 	adds.w	sl, r2, r1
 800d08e:	4649      	mov	r1, r9
 800d090:	eb43 0b01 	adc.w	fp, r3, r1
 800d094:	f04f 0200 	mov.w	r2, #0
 800d098:	f04f 0300 	mov.w	r3, #0
 800d09c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d0a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d0a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0a8:	4692      	mov	sl, r2
 800d0aa:	469b      	mov	fp, r3
 800d0ac:	4643      	mov	r3, r8
 800d0ae:	eb1a 0303 	adds.w	r3, sl, r3
 800d0b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d0b6:	464b      	mov	r3, r9
 800d0b8:	eb4b 0303 	adc.w	r3, fp, r3
 800d0bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d0cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d0d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	18db      	adds	r3, r3, r3
 800d0d8:	643b      	str	r3, [r7, #64]	; 0x40
 800d0da:	4613      	mov	r3, r2
 800d0dc:	eb42 0303 	adc.w	r3, r2, r3
 800d0e0:	647b      	str	r3, [r7, #68]	; 0x44
 800d0e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d0e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d0ea:	f7f3 fd35 	bl	8000b58 <__aeabi_uldivmod>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	4b3b      	ldr	r3, [pc, #236]	; (800d1e4 <UART_SetConfig+0x2d4>)
 800d0f6:	fba3 2301 	umull	r2, r3, r3, r1
 800d0fa:	095b      	lsrs	r3, r3, #5
 800d0fc:	2264      	movs	r2, #100	; 0x64
 800d0fe:	fb02 f303 	mul.w	r3, r2, r3
 800d102:	1acb      	subs	r3, r1, r3
 800d104:	00db      	lsls	r3, r3, #3
 800d106:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d10a:	4b36      	ldr	r3, [pc, #216]	; (800d1e4 <UART_SetConfig+0x2d4>)
 800d10c:	fba3 2302 	umull	r2, r3, r3, r2
 800d110:	095b      	lsrs	r3, r3, #5
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d118:	441c      	add	r4, r3
 800d11a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d11e:	2200      	movs	r2, #0
 800d120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d124:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d12c:	4642      	mov	r2, r8
 800d12e:	464b      	mov	r3, r9
 800d130:	1891      	adds	r1, r2, r2
 800d132:	63b9      	str	r1, [r7, #56]	; 0x38
 800d134:	415b      	adcs	r3, r3
 800d136:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d13c:	4641      	mov	r1, r8
 800d13e:	1851      	adds	r1, r2, r1
 800d140:	6339      	str	r1, [r7, #48]	; 0x30
 800d142:	4649      	mov	r1, r9
 800d144:	414b      	adcs	r3, r1
 800d146:	637b      	str	r3, [r7, #52]	; 0x34
 800d148:	f04f 0200 	mov.w	r2, #0
 800d14c:	f04f 0300 	mov.w	r3, #0
 800d150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d154:	4659      	mov	r1, fp
 800d156:	00cb      	lsls	r3, r1, #3
 800d158:	4651      	mov	r1, sl
 800d15a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d15e:	4651      	mov	r1, sl
 800d160:	00ca      	lsls	r2, r1, #3
 800d162:	4610      	mov	r0, r2
 800d164:	4619      	mov	r1, r3
 800d166:	4603      	mov	r3, r0
 800d168:	4642      	mov	r2, r8
 800d16a:	189b      	adds	r3, r3, r2
 800d16c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d170:	464b      	mov	r3, r9
 800d172:	460a      	mov	r2, r1
 800d174:	eb42 0303 	adc.w	r3, r2, r3
 800d178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d188:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d18c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d190:	460b      	mov	r3, r1
 800d192:	18db      	adds	r3, r3, r3
 800d194:	62bb      	str	r3, [r7, #40]	; 0x28
 800d196:	4613      	mov	r3, r2
 800d198:	eb42 0303 	adc.w	r3, r2, r3
 800d19c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d19e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d1a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d1a6:	f7f3 fcd7 	bl	8000b58 <__aeabi_uldivmod>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	4b0d      	ldr	r3, [pc, #52]	; (800d1e4 <UART_SetConfig+0x2d4>)
 800d1b0:	fba3 1302 	umull	r1, r3, r3, r2
 800d1b4:	095b      	lsrs	r3, r3, #5
 800d1b6:	2164      	movs	r1, #100	; 0x64
 800d1b8:	fb01 f303 	mul.w	r3, r1, r3
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	00db      	lsls	r3, r3, #3
 800d1c0:	3332      	adds	r3, #50	; 0x32
 800d1c2:	4a08      	ldr	r2, [pc, #32]	; (800d1e4 <UART_SetConfig+0x2d4>)
 800d1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1c8:	095b      	lsrs	r3, r3, #5
 800d1ca:	f003 0207 	and.w	r2, r3, #7
 800d1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4422      	add	r2, r4
 800d1d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d1d8:	e105      	b.n	800d3e6 <UART_SetConfig+0x4d6>
 800d1da:	bf00      	nop
 800d1dc:	40011000 	.word	0x40011000
 800d1e0:	40011400 	.word	0x40011400
 800d1e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d1e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d1f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d1f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d1fa:	4642      	mov	r2, r8
 800d1fc:	464b      	mov	r3, r9
 800d1fe:	1891      	adds	r1, r2, r2
 800d200:	6239      	str	r1, [r7, #32]
 800d202:	415b      	adcs	r3, r3
 800d204:	627b      	str	r3, [r7, #36]	; 0x24
 800d206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d20a:	4641      	mov	r1, r8
 800d20c:	1854      	adds	r4, r2, r1
 800d20e:	4649      	mov	r1, r9
 800d210:	eb43 0501 	adc.w	r5, r3, r1
 800d214:	f04f 0200 	mov.w	r2, #0
 800d218:	f04f 0300 	mov.w	r3, #0
 800d21c:	00eb      	lsls	r3, r5, #3
 800d21e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d222:	00e2      	lsls	r2, r4, #3
 800d224:	4614      	mov	r4, r2
 800d226:	461d      	mov	r5, r3
 800d228:	4643      	mov	r3, r8
 800d22a:	18e3      	adds	r3, r4, r3
 800d22c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d230:	464b      	mov	r3, r9
 800d232:	eb45 0303 	adc.w	r3, r5, r3
 800d236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d23a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d24a:	f04f 0200 	mov.w	r2, #0
 800d24e:	f04f 0300 	mov.w	r3, #0
 800d252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d256:	4629      	mov	r1, r5
 800d258:	008b      	lsls	r3, r1, #2
 800d25a:	4621      	mov	r1, r4
 800d25c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d260:	4621      	mov	r1, r4
 800d262:	008a      	lsls	r2, r1, #2
 800d264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d268:	f7f3 fc76 	bl	8000b58 <__aeabi_uldivmod>
 800d26c:	4602      	mov	r2, r0
 800d26e:	460b      	mov	r3, r1
 800d270:	4b60      	ldr	r3, [pc, #384]	; (800d3f4 <UART_SetConfig+0x4e4>)
 800d272:	fba3 2302 	umull	r2, r3, r3, r2
 800d276:	095b      	lsrs	r3, r3, #5
 800d278:	011c      	lsls	r4, r3, #4
 800d27a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d27e:	2200      	movs	r2, #0
 800d280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d28c:	4642      	mov	r2, r8
 800d28e:	464b      	mov	r3, r9
 800d290:	1891      	adds	r1, r2, r2
 800d292:	61b9      	str	r1, [r7, #24]
 800d294:	415b      	adcs	r3, r3
 800d296:	61fb      	str	r3, [r7, #28]
 800d298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d29c:	4641      	mov	r1, r8
 800d29e:	1851      	adds	r1, r2, r1
 800d2a0:	6139      	str	r1, [r7, #16]
 800d2a2:	4649      	mov	r1, r9
 800d2a4:	414b      	adcs	r3, r1
 800d2a6:	617b      	str	r3, [r7, #20]
 800d2a8:	f04f 0200 	mov.w	r2, #0
 800d2ac:	f04f 0300 	mov.w	r3, #0
 800d2b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d2b4:	4659      	mov	r1, fp
 800d2b6:	00cb      	lsls	r3, r1, #3
 800d2b8:	4651      	mov	r1, sl
 800d2ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2be:	4651      	mov	r1, sl
 800d2c0:	00ca      	lsls	r2, r1, #3
 800d2c2:	4610      	mov	r0, r2
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	4642      	mov	r2, r8
 800d2ca:	189b      	adds	r3, r3, r2
 800d2cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d2d0:	464b      	mov	r3, r9
 800d2d2:	460a      	mov	r2, r1
 800d2d4:	eb42 0303 	adc.w	r3, r2, r3
 800d2d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d2e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d2e8:	f04f 0200 	mov.w	r2, #0
 800d2ec:	f04f 0300 	mov.w	r3, #0
 800d2f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d2f4:	4649      	mov	r1, r9
 800d2f6:	008b      	lsls	r3, r1, #2
 800d2f8:	4641      	mov	r1, r8
 800d2fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2fe:	4641      	mov	r1, r8
 800d300:	008a      	lsls	r2, r1, #2
 800d302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d306:	f7f3 fc27 	bl	8000b58 <__aeabi_uldivmod>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	4b39      	ldr	r3, [pc, #228]	; (800d3f4 <UART_SetConfig+0x4e4>)
 800d310:	fba3 1302 	umull	r1, r3, r3, r2
 800d314:	095b      	lsrs	r3, r3, #5
 800d316:	2164      	movs	r1, #100	; 0x64
 800d318:	fb01 f303 	mul.w	r3, r1, r3
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	011b      	lsls	r3, r3, #4
 800d320:	3332      	adds	r3, #50	; 0x32
 800d322:	4a34      	ldr	r2, [pc, #208]	; (800d3f4 <UART_SetConfig+0x4e4>)
 800d324:	fba2 2303 	umull	r2, r3, r2, r3
 800d328:	095b      	lsrs	r3, r3, #5
 800d32a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d32e:	441c      	add	r4, r3
 800d330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d334:	2200      	movs	r2, #0
 800d336:	673b      	str	r3, [r7, #112]	; 0x70
 800d338:	677a      	str	r2, [r7, #116]	; 0x74
 800d33a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d33e:	4642      	mov	r2, r8
 800d340:	464b      	mov	r3, r9
 800d342:	1891      	adds	r1, r2, r2
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	415b      	adcs	r3, r3
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d34e:	4641      	mov	r1, r8
 800d350:	1851      	adds	r1, r2, r1
 800d352:	6039      	str	r1, [r7, #0]
 800d354:	4649      	mov	r1, r9
 800d356:	414b      	adcs	r3, r1
 800d358:	607b      	str	r3, [r7, #4]
 800d35a:	f04f 0200 	mov.w	r2, #0
 800d35e:	f04f 0300 	mov.w	r3, #0
 800d362:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d366:	4659      	mov	r1, fp
 800d368:	00cb      	lsls	r3, r1, #3
 800d36a:	4651      	mov	r1, sl
 800d36c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d370:	4651      	mov	r1, sl
 800d372:	00ca      	lsls	r2, r1, #3
 800d374:	4610      	mov	r0, r2
 800d376:	4619      	mov	r1, r3
 800d378:	4603      	mov	r3, r0
 800d37a:	4642      	mov	r2, r8
 800d37c:	189b      	adds	r3, r3, r2
 800d37e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d380:	464b      	mov	r3, r9
 800d382:	460a      	mov	r2, r1
 800d384:	eb42 0303 	adc.w	r3, r2, r3
 800d388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d38a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	2200      	movs	r2, #0
 800d392:	663b      	str	r3, [r7, #96]	; 0x60
 800d394:	667a      	str	r2, [r7, #100]	; 0x64
 800d396:	f04f 0200 	mov.w	r2, #0
 800d39a:	f04f 0300 	mov.w	r3, #0
 800d39e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d3a2:	4649      	mov	r1, r9
 800d3a4:	008b      	lsls	r3, r1, #2
 800d3a6:	4641      	mov	r1, r8
 800d3a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d3ac:	4641      	mov	r1, r8
 800d3ae:	008a      	lsls	r2, r1, #2
 800d3b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d3b4:	f7f3 fbd0 	bl	8000b58 <__aeabi_uldivmod>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	4b0d      	ldr	r3, [pc, #52]	; (800d3f4 <UART_SetConfig+0x4e4>)
 800d3be:	fba3 1302 	umull	r1, r3, r3, r2
 800d3c2:	095b      	lsrs	r3, r3, #5
 800d3c4:	2164      	movs	r1, #100	; 0x64
 800d3c6:	fb01 f303 	mul.w	r3, r1, r3
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	011b      	lsls	r3, r3, #4
 800d3ce:	3332      	adds	r3, #50	; 0x32
 800d3d0:	4a08      	ldr	r2, [pc, #32]	; (800d3f4 <UART_SetConfig+0x4e4>)
 800d3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d6:	095b      	lsrs	r3, r3, #5
 800d3d8:	f003 020f 	and.w	r2, r3, #15
 800d3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4422      	add	r2, r4
 800d3e4:	609a      	str	r2, [r3, #8]
}
 800d3e6:	bf00      	nop
 800d3e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3f2:	bf00      	nop
 800d3f4:	51eb851f 	.word	0x51eb851f

0800d3f8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d3f8:	b084      	sub	sp, #16
 800d3fa:	b480      	push	{r7}
 800d3fc:	b085      	sub	sp, #20
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	f107 001c 	add.w	r0, r7, #28
 800d406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d40a:	2300      	movs	r3, #0
 800d40c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d40e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d410:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d412:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d416:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d418:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d41a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d41e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d422:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d432:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	431a      	orrs	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	b004      	add	sp, #16
 800d44c:	4770      	bx	lr

0800d44e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d44e:	b480      	push	{r7}
 800d450:	b083      	sub	sp, #12
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2203      	movs	r2, #3
 800d474:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f003 0303 	and.w	r3, r3, #3
}
 800d494:	4618      	mov	r0, r3
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d4be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d4c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d4ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d4da:	f023 030f 	bic.w	r3, r3, #15
 800d4de:	68fa      	ldr	r2, [r7, #12]
 800d4e0:	431a      	orrs	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3714      	adds	r7, #20
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	691b      	ldr	r3, [r3, #16]
 800d500:	b2db      	uxtb	r3, r3
}
 800d502:	4618      	mov	r0, r3
 800d504:	370c      	adds	r7, #12
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr

0800d50e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d50e:	b480      	push	{r7}
 800d510:	b085      	sub	sp, #20
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3314      	adds	r3, #20
 800d51c:	461a      	mov	r2, r3
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	4413      	add	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
}  
 800d528:	4618      	mov	r0, r3
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	685a      	ldr	r2, [r3, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d55a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d560:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d566:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	4313      	orrs	r3, r2
 800d56c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d572:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	431a      	orrs	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d57e:	2300      	movs	r3, #0

}
 800d580:	4618      	mov	r0, r3
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b088      	sub	sp, #32
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d59a:	2310      	movs	r3, #16
 800d59c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d59e:	2340      	movs	r3, #64	; 0x40
 800d5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5ac:	f107 0308 	add.w	r3, r7, #8
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7ff ff74 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5bc:	2110      	movs	r1, #16
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 f94c 	bl	800d85c <SDMMC_GetCmdResp1>
 800d5c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5c6:	69fb      	ldr	r3, [r7, #28]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3720      	adds	r7, #32
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b08a      	sub	sp, #40	; 0x28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d5e0:	2307      	movs	r3, #7
 800d5e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5e4:	2340      	movs	r3, #64	; 0x40
 800d5e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5f2:	f107 0310 	add.w	r3, r7, #16
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f7ff ff51 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d5fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800d602:	2107      	movs	r1, #7
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 f929 	bl	800d85c <SDMMC_GetCmdResp1>
 800d60a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3728      	adds	r7, #40	; 0x28
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b088      	sub	sp, #32
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d61e:	2300      	movs	r3, #0
 800d620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d622:	2300      	movs	r3, #0
 800d624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d626:	2300      	movs	r3, #0
 800d628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d62a:	2300      	movs	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d632:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d634:	f107 0308 	add.w	r3, r7, #8
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff ff30 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 fb43 	bl	800dccc <SDMMC_GetCmdError>
 800d646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d648:	69fb      	ldr	r3, [r7, #28]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b088      	sub	sp, #32
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d65a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d65e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d660:	2308      	movs	r3, #8
 800d662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d664:	2340      	movs	r3, #64	; 0x40
 800d666:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d668:	2300      	movs	r3, #0
 800d66a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d66c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d670:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d672:	f107 0308 	add.w	r3, r7, #8
 800d676:	4619      	mov	r1, r3
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff ff11 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fad6 	bl	800dc30 <SDMMC_GetCmdResp7>
 800d684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d686:	69fb      	ldr	r3, [r7, #28]
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3720      	adds	r7, #32
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b088      	sub	sp, #32
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d69e:	2337      	movs	r3, #55	; 0x37
 800d6a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6a2:	2340      	movs	r3, #64	; 0x40
 800d6a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6b0:	f107 0308 	add.w	r3, r7, #8
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7ff fef2 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6c0:	2137      	movs	r1, #55	; 0x37
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 f8ca 	bl	800d85c <SDMMC_GetCmdResp1>
 800d6c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ca:	69fb      	ldr	r3, [r7, #28]
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3720      	adds	r7, #32
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d6e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d6ea:	2329      	movs	r3, #41	; 0x29
 800d6ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6ee:	2340      	movs	r3, #64	; 0x40
 800d6f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6fc:	f107 0308 	add.w	r3, r7, #8
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff fecc 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f9dd 	bl	800dac8 <SDMMC_GetCmdResp3>
 800d70e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d710:	69fb      	ldr	r3, [r7, #28]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3720      	adds	r7, #32
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b088      	sub	sp, #32
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d728:	2306      	movs	r3, #6
 800d72a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d72c:	2340      	movs	r3, #64	; 0x40
 800d72e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d730:	2300      	movs	r3, #0
 800d732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d738:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d73a:	f107 0308 	add.w	r3, r7, #8
 800d73e:	4619      	mov	r1, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff fead 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d746:	f241 3288 	movw	r2, #5000	; 0x1388
 800d74a:	2106      	movs	r1, #6
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 f885 	bl	800d85c <SDMMC_GetCmdResp1>
 800d752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d754:	69fb      	ldr	r3, [r7, #28]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3720      	adds	r7, #32
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b088      	sub	sp, #32
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d766:	2300      	movs	r3, #0
 800d768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d76a:	2333      	movs	r3, #51	; 0x33
 800d76c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d76e:	2340      	movs	r3, #64	; 0x40
 800d770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d772:	2300      	movs	r3, #0
 800d774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d77a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d77c:	f107 0308 	add.w	r3, r7, #8
 800d780:	4619      	mov	r1, r3
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7ff fe8c 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d788:	f241 3288 	movw	r2, #5000	; 0x1388
 800d78c:	2133      	movs	r1, #51	; 0x33
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f864 	bl	800d85c <SDMMC_GetCmdResp1>
 800d794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d796:	69fb      	ldr	r3, [r7, #28]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3720      	adds	r7, #32
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b088      	sub	sp, #32
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d7b0:	23c0      	movs	r3, #192	; 0xc0
 800d7b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7be:	f107 0308 	add.w	r3, r7, #8
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f7ff fe6b 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 f934 	bl	800da38 <SDMMC_GetCmdResp2>
 800d7d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7d2:	69fb      	ldr	r3, [r7, #28]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3720      	adds	r7, #32
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d7ea:	2309      	movs	r3, #9
 800d7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d7ee:	23c0      	movs	r3, #192	; 0xc0
 800d7f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7fc:	f107 0308 	add.w	r3, r7, #8
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7ff fe4c 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 f915 	bl	800da38 <SDMMC_GetCmdResp2>
 800d80e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d810:	69fb      	ldr	r3, [r7, #28]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3720      	adds	r7, #32
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b088      	sub	sp, #32
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d824:	2300      	movs	r3, #0
 800d826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d828:	2303      	movs	r3, #3
 800d82a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d82c:	2340      	movs	r3, #64	; 0x40
 800d82e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d830:	2300      	movs	r3, #0
 800d832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d838:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d83a:	f107 0308 	add.w	r3, r7, #8
 800d83e:	4619      	mov	r1, r3
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff fe2d 	bl	800d4a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	2103      	movs	r1, #3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f97a 	bl	800db44 <SDMMC_GetCmdResp6>
 800d850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d852:	69fb      	ldr	r3, [r7, #28]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3720      	adds	r7, #32
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b088      	sub	sp, #32
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	460b      	mov	r3, r1
 800d866:	607a      	str	r2, [r7, #4]
 800d868:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d86a:	4b70      	ldr	r3, [pc, #448]	; (800da2c <SDMMC_GetCmdResp1+0x1d0>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a70      	ldr	r2, [pc, #448]	; (800da30 <SDMMC_GetCmdResp1+0x1d4>)
 800d870:	fba2 2303 	umull	r2, r3, r2, r3
 800d874:	0a5a      	lsrs	r2, r3, #9
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	fb02 f303 	mul.w	r3, r2, r3
 800d87c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	1e5a      	subs	r2, r3, #1
 800d882:	61fa      	str	r2, [r7, #28]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d102      	bne.n	800d88e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d888:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d88c:	e0c9      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d892:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d0ef      	beq.n	800d87e <SDMMC_GetCmdResp1+0x22>
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1ea      	bne.n	800d87e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ac:	f003 0304 	and.w	r3, r3, #4
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d004      	beq.n	800d8be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2204      	movs	r2, #4
 800d8b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8ba:	2304      	movs	r3, #4
 800d8bc:	e0b1      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d004      	beq.n	800d8d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e0a6      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	22c5      	movs	r2, #197	; 0xc5
 800d8d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f7ff fe0a 	bl	800d4f4 <SDIO_GetCommandResponse>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	7afb      	ldrb	r3, [r7, #11]
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d001      	beq.n	800d8ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e099      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f7ff fe0c 	bl	800d50e <SDIO_GetResponse>
 800d8f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	4b4e      	ldr	r3, [pc, #312]	; (800da34 <SDMMC_GetCmdResp1+0x1d8>)
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d101      	bne.n	800d906 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d902:	2300      	movs	r3, #0
 800d904:	e08d      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	da02      	bge.n	800d912 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d90c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d910:	e087      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d001      	beq.n	800d920 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d91c:	2340      	movs	r3, #64	; 0x40
 800d91e:	e080      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d92a:	2380      	movs	r3, #128	; 0x80
 800d92c:	e079      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d934:	2b00      	cmp	r3, #0
 800d936:	d002      	beq.n	800d93e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d93c:	e071      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d94c:	e069      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d954:	2b00      	cmp	r3, #0
 800d956:	d002      	beq.n	800d95e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d95c:	e061      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d96c:	e059      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d97c:	e051      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d98c:	e049      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d002      	beq.n	800d99e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d998:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d99c:	e041      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d9a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9ac:	e039      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d9b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d9bc:	e031      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d002      	beq.n	800d9ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d9c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d9cc:	e029      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d9d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d9dc:	e021      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d002      	beq.n	800d9ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d9e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d9ec:	e019      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d002      	beq.n	800d9fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d9f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d9fc:	e011      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800da08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800da0c:	e009      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f003 0308 	and.w	r3, r3, #8
 800da14:	2b00      	cmp	r3, #0
 800da16:	d002      	beq.n	800da1e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800da1c:	e001      	b.n	800da22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800da22:	4618      	mov	r0, r3
 800da24:	3720      	adds	r7, #32
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	20000000 	.word	0x20000000
 800da30:	10624dd3 	.word	0x10624dd3
 800da34:	fdffe008 	.word	0xfdffe008

0800da38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da40:	4b1f      	ldr	r3, [pc, #124]	; (800dac0 <SDMMC_GetCmdResp2+0x88>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a1f      	ldr	r2, [pc, #124]	; (800dac4 <SDMMC_GetCmdResp2+0x8c>)
 800da46:	fba2 2303 	umull	r2, r3, r2, r3
 800da4a:	0a5b      	lsrs	r3, r3, #9
 800da4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da50:	fb02 f303 	mul.w	r3, r2, r3
 800da54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	1e5a      	subs	r2, r3, #1
 800da5a:	60fa      	str	r2, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d102      	bne.n	800da66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da64:	e026      	b.n	800dab4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800da72:	2b00      	cmp	r3, #0
 800da74:	d0ef      	beq.n	800da56 <SDMMC_GetCmdResp2+0x1e>
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1ea      	bne.n	800da56 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da84:	f003 0304 	and.w	r3, r3, #4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d004      	beq.n	800da96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2204      	movs	r2, #4
 800da90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da92:	2304      	movs	r3, #4
 800da94:	e00e      	b.n	800dab4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d004      	beq.n	800daac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2201      	movs	r2, #1
 800daa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800daa8:	2301      	movs	r3, #1
 800daaa:	e003      	b.n	800dab4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	22c5      	movs	r2, #197	; 0xc5
 800dab0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3714      	adds	r7, #20
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr
 800dac0:	20000000 	.word	0x20000000
 800dac4:	10624dd3 	.word	0x10624dd3

0800dac8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dad0:	4b1a      	ldr	r3, [pc, #104]	; (800db3c <SDMMC_GetCmdResp3+0x74>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a1a      	ldr	r2, [pc, #104]	; (800db40 <SDMMC_GetCmdResp3+0x78>)
 800dad6:	fba2 2303 	umull	r2, r3, r2, r3
 800dada:	0a5b      	lsrs	r3, r3, #9
 800dadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dae0:	fb02 f303 	mul.w	r3, r2, r3
 800dae4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	1e5a      	subs	r2, r3, #1
 800daea:	60fa      	str	r2, [r7, #12]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d102      	bne.n	800daf6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800daf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800daf4:	e01b      	b.n	800db2e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dafa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db02:	2b00      	cmp	r3, #0
 800db04:	d0ef      	beq.n	800dae6 <SDMMC_GetCmdResp3+0x1e>
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1ea      	bne.n	800dae6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d004      	beq.n	800db26 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2204      	movs	r2, #4
 800db20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db22:	2304      	movs	r3, #4
 800db24:	e003      	b.n	800db2e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	22c5      	movs	r2, #197	; 0xc5
 800db2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3714      	adds	r7, #20
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	20000000 	.word	0x20000000
 800db40:	10624dd3 	.word	0x10624dd3

0800db44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b088      	sub	sp, #32
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	460b      	mov	r3, r1
 800db4e:	607a      	str	r2, [r7, #4]
 800db50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db52:	4b35      	ldr	r3, [pc, #212]	; (800dc28 <SDMMC_GetCmdResp6+0xe4>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a35      	ldr	r2, [pc, #212]	; (800dc2c <SDMMC_GetCmdResp6+0xe8>)
 800db58:	fba2 2303 	umull	r2, r3, r2, r3
 800db5c:	0a5b      	lsrs	r3, r3, #9
 800db5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800db62:	fb02 f303 	mul.w	r3, r2, r3
 800db66:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	1e5a      	subs	r2, r3, #1
 800db6c:	61fa      	str	r2, [r7, #28]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d102      	bne.n	800db78 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db76:	e052      	b.n	800dc1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db84:	2b00      	cmp	r3, #0
 800db86:	d0ef      	beq.n	800db68 <SDMMC_GetCmdResp6+0x24>
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1ea      	bne.n	800db68 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db96:	f003 0304 	and.w	r3, r3, #4
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d004      	beq.n	800dba8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2204      	movs	r2, #4
 800dba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dba4:	2304      	movs	r3, #4
 800dba6:	e03a      	b.n	800dc1e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbac:	f003 0301 	and.w	r3, r3, #1
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d004      	beq.n	800dbbe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e02f      	b.n	800dc1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f7ff fc98 	bl	800d4f4 <SDIO_GetCommandResponse>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	7afb      	ldrb	r3, [r7, #11]
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d001      	beq.n	800dbd2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e025      	b.n	800dc1e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	22c5      	movs	r2, #197	; 0xc5
 800dbd6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dbd8:	2100      	movs	r1, #0
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f7ff fc97 	bl	800d50e <SDIO_GetResponse>
 800dbe0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d106      	bne.n	800dbfa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	0c1b      	lsrs	r3, r3, #16
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	e011      	b.n	800dc1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc08:	e009      	b.n	800dc1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc18:	e001      	b.n	800dc1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3720      	adds	r7, #32
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	20000000 	.word	0x20000000
 800dc2c:	10624dd3 	.word	0x10624dd3

0800dc30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc38:	4b22      	ldr	r3, [pc, #136]	; (800dcc4 <SDMMC_GetCmdResp7+0x94>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a22      	ldr	r2, [pc, #136]	; (800dcc8 <SDMMC_GetCmdResp7+0x98>)
 800dc3e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc42:	0a5b      	lsrs	r3, r3, #9
 800dc44:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc48:	fb02 f303 	mul.w	r3, r2, r3
 800dc4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	1e5a      	subs	r2, r3, #1
 800dc52:	60fa      	str	r2, [r7, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc5c:	e02c      	b.n	800dcb8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d0ef      	beq.n	800dc4e <SDMMC_GetCmdResp7+0x1e>
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1ea      	bne.n	800dc4e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc7c:	f003 0304 	and.w	r3, r3, #4
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d004      	beq.n	800dc8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2204      	movs	r2, #4
 800dc88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc8a:	2304      	movs	r3, #4
 800dc8c:	e014      	b.n	800dcb8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc92:	f003 0301 	and.w	r3, r3, #1
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d004      	beq.n	800dca4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e009      	b.n	800dcb8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d002      	beq.n	800dcb6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2240      	movs	r2, #64	; 0x40
 800dcb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dcb6:	2300      	movs	r3, #0
  
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3714      	adds	r7, #20
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr
 800dcc4:	20000000 	.word	0x20000000
 800dcc8:	10624dd3 	.word	0x10624dd3

0800dccc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcd4:	4b11      	ldr	r3, [pc, #68]	; (800dd1c <SDMMC_GetCmdError+0x50>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a11      	ldr	r2, [pc, #68]	; (800dd20 <SDMMC_GetCmdError+0x54>)
 800dcda:	fba2 2303 	umull	r2, r3, r2, r3
 800dcde:	0a5b      	lsrs	r3, r3, #9
 800dce0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dce4:	fb02 f303 	mul.w	r3, r2, r3
 800dce8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	1e5a      	subs	r2, r3, #1
 800dcee:	60fa      	str	r2, [r7, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d102      	bne.n	800dcfa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcf8:	e009      	b.n	800dd0e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d0f1      	beq.n	800dcea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	22c5      	movs	r2, #197	; 0xc5
 800dd0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	20000000 	.word	0x20000000
 800dd20:	10624dd3 	.word	0x10624dd3

0800dd24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b087      	sub	sp, #28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	4613      	mov	r3, r2
 800dd30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dd32:	79fb      	ldrb	r3, [r7, #7]
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d165      	bne.n	800de04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	4a41      	ldr	r2, [pc, #260]	; (800de40 <USB_SetTurnaroundTime+0x11c>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d906      	bls.n	800dd4e <USB_SetTurnaroundTime+0x2a>
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	4a40      	ldr	r2, [pc, #256]	; (800de44 <USB_SetTurnaroundTime+0x120>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d202      	bcs.n	800dd4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dd48:	230f      	movs	r3, #15
 800dd4a:	617b      	str	r3, [r7, #20]
 800dd4c:	e062      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	4a3c      	ldr	r2, [pc, #240]	; (800de44 <USB_SetTurnaroundTime+0x120>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d306      	bcc.n	800dd64 <USB_SetTurnaroundTime+0x40>
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	4a3b      	ldr	r2, [pc, #236]	; (800de48 <USB_SetTurnaroundTime+0x124>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d202      	bcs.n	800dd64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dd5e:	230e      	movs	r3, #14
 800dd60:	617b      	str	r3, [r7, #20]
 800dd62:	e057      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	4a38      	ldr	r2, [pc, #224]	; (800de48 <USB_SetTurnaroundTime+0x124>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d306      	bcc.n	800dd7a <USB_SetTurnaroundTime+0x56>
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	4a37      	ldr	r2, [pc, #220]	; (800de4c <USB_SetTurnaroundTime+0x128>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d202      	bcs.n	800dd7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dd74:	230d      	movs	r3, #13
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e04c      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	4a33      	ldr	r2, [pc, #204]	; (800de4c <USB_SetTurnaroundTime+0x128>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d306      	bcc.n	800dd90 <USB_SetTurnaroundTime+0x6c>
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	4a32      	ldr	r2, [pc, #200]	; (800de50 <USB_SetTurnaroundTime+0x12c>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d802      	bhi.n	800dd90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dd8a:	230c      	movs	r3, #12
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	e041      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	4a2f      	ldr	r2, [pc, #188]	; (800de50 <USB_SetTurnaroundTime+0x12c>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d906      	bls.n	800dda6 <USB_SetTurnaroundTime+0x82>
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	4a2e      	ldr	r2, [pc, #184]	; (800de54 <USB_SetTurnaroundTime+0x130>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d802      	bhi.n	800dda6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dda0:	230b      	movs	r3, #11
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	e036      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	4a2a      	ldr	r2, [pc, #168]	; (800de54 <USB_SetTurnaroundTime+0x130>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d906      	bls.n	800ddbc <USB_SetTurnaroundTime+0x98>
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	4a29      	ldr	r2, [pc, #164]	; (800de58 <USB_SetTurnaroundTime+0x134>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d802      	bhi.n	800ddbc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ddb6:	230a      	movs	r3, #10
 800ddb8:	617b      	str	r3, [r7, #20]
 800ddba:	e02b      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	4a26      	ldr	r2, [pc, #152]	; (800de58 <USB_SetTurnaroundTime+0x134>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d906      	bls.n	800ddd2 <USB_SetTurnaroundTime+0xae>
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	4a25      	ldr	r2, [pc, #148]	; (800de5c <USB_SetTurnaroundTime+0x138>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d202      	bcs.n	800ddd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ddcc:	2309      	movs	r3, #9
 800ddce:	617b      	str	r3, [r7, #20]
 800ddd0:	e020      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	4a21      	ldr	r2, [pc, #132]	; (800de5c <USB_SetTurnaroundTime+0x138>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d306      	bcc.n	800dde8 <USB_SetTurnaroundTime+0xc4>
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	4a20      	ldr	r2, [pc, #128]	; (800de60 <USB_SetTurnaroundTime+0x13c>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d802      	bhi.n	800dde8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dde2:	2308      	movs	r3, #8
 800dde4:	617b      	str	r3, [r7, #20]
 800dde6:	e015      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	4a1d      	ldr	r2, [pc, #116]	; (800de60 <USB_SetTurnaroundTime+0x13c>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d906      	bls.n	800ddfe <USB_SetTurnaroundTime+0xda>
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	4a1c      	ldr	r2, [pc, #112]	; (800de64 <USB_SetTurnaroundTime+0x140>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d202      	bcs.n	800ddfe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ddf8:	2307      	movs	r3, #7
 800ddfa:	617b      	str	r3, [r7, #20]
 800ddfc:	e00a      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ddfe:	2306      	movs	r3, #6
 800de00:	617b      	str	r3, [r7, #20]
 800de02:	e007      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800de04:	79fb      	ldrb	r3, [r7, #7]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d102      	bne.n	800de10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800de0a:	2309      	movs	r3, #9
 800de0c:	617b      	str	r3, [r7, #20]
 800de0e:	e001      	b.n	800de14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800de10:	2309      	movs	r3, #9
 800de12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	68da      	ldr	r2, [r3, #12]
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	029b      	lsls	r3, r3, #10
 800de28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800de2c:	431a      	orrs	r2, r3
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800de32:	2300      	movs	r3, #0
}
 800de34:	4618      	mov	r0, r3
 800de36:	371c      	adds	r7, #28
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr
 800de40:	00d8acbf 	.word	0x00d8acbf
 800de44:	00e4e1c0 	.word	0x00e4e1c0
 800de48:	00f42400 	.word	0x00f42400
 800de4c:	01067380 	.word	0x01067380
 800de50:	011a499f 	.word	0x011a499f
 800de54:	01312cff 	.word	0x01312cff
 800de58:	014ca43f 	.word	0x014ca43f
 800de5c:	016e3600 	.word	0x016e3600
 800de60:	01a6ab1f 	.word	0x01a6ab1f
 800de64:	01e84800 	.word	0x01e84800

0800de68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de72:	2300      	movs	r3, #0
 800de74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3301      	adds	r3, #1
 800de7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	4a13      	ldr	r2, [pc, #76]	; (800decc <USB_FlushTxFifo+0x64>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d901      	bls.n	800de88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de84:	2303      	movs	r3, #3
 800de86:	e01b      	b.n	800dec0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	daf2      	bge.n	800de76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de90:	2300      	movs	r3, #0
 800de92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	019b      	lsls	r3, r3, #6
 800de98:	f043 0220 	orr.w	r2, r3, #32
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3301      	adds	r3, #1
 800dea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	4a08      	ldr	r2, [pc, #32]	; (800decc <USB_FlushTxFifo+0x64>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d901      	bls.n	800deb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800deae:	2303      	movs	r3, #3
 800deb0:	e006      	b.n	800dec0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	f003 0320 	and.w	r3, r3, #32
 800deba:	2b20      	cmp	r3, #32
 800debc:	d0f0      	beq.n	800dea0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3714      	adds	r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	00030d40 	.word	0x00030d40

0800ded0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b087      	sub	sp, #28
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	f003 0306 	and.w	r3, r3, #6
 800dee8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d102      	bne.n	800def6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800def0:	2300      	movs	r3, #0
 800def2:	75fb      	strb	r3, [r7, #23]
 800def4:	e00a      	b.n	800df0c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2b02      	cmp	r3, #2
 800defa:	d002      	beq.n	800df02 <USB_GetDevSpeed+0x32>
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2b06      	cmp	r3, #6
 800df00:	d102      	bne.n	800df08 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800df02:	2302      	movs	r3, #2
 800df04:	75fb      	strb	r3, [r7, #23]
 800df06:	e001      	b.n	800df0c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800df08:	230f      	movs	r3, #15
 800df0a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800df0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	371c      	adds	r7, #28
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b085      	sub	sp, #20
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	785b      	ldrb	r3, [r3, #1]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d13a      	bne.n	800dfac <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df3c:	69da      	ldr	r2, [r3, #28]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	f003 030f 	and.w	r3, r3, #15
 800df46:	2101      	movs	r1, #1
 800df48:	fa01 f303 	lsl.w	r3, r1, r3
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	68f9      	ldr	r1, [r7, #12]
 800df50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df54:	4313      	orrs	r3, r2
 800df56:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	015a      	lsls	r2, r3, #5
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	4413      	add	r3, r2
 800df60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d155      	bne.n	800e01a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	015a      	lsls	r2, r3, #5
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	4413      	add	r3, r2
 800df76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	791b      	ldrb	r3, [r3, #4]
 800df88:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df8a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	059b      	lsls	r3, r3, #22
 800df90:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df92:	4313      	orrs	r3, r2
 800df94:	68ba      	ldr	r2, [r7, #8]
 800df96:	0151      	lsls	r1, r2, #5
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	440a      	add	r2, r1
 800df9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfa8:	6013      	str	r3, [r2, #0]
 800dfaa:	e036      	b.n	800e01a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfb2:	69da      	ldr	r2, [r3, #28]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	f003 030f 	and.w	r3, r3, #15
 800dfbc:	2101      	movs	r1, #1
 800dfbe:	fa01 f303 	lsl.w	r3, r1, r3
 800dfc2:	041b      	lsls	r3, r3, #16
 800dfc4:	68f9      	ldr	r1, [r7, #12]
 800dfc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	015a      	lsls	r2, r3, #5
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d11a      	bne.n	800e01a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	015a      	lsls	r2, r3, #5
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	4413      	add	r3, r2
 800dfec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	791b      	ldrb	r3, [r3, #4]
 800dffe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e000:	430b      	orrs	r3, r1
 800e002:	4313      	orrs	r3, r2
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	0151      	lsls	r1, r2, #5
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	440a      	add	r2, r1
 800e00c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e018:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b08a      	sub	sp, #40	; 0x28
 800e02c:	af02      	add	r7, sp, #8
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	4613      	mov	r3, r2
 800e034:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	785b      	ldrb	r3, [r3, #1]
 800e044:	2b01      	cmp	r3, #1
 800e046:	f040 815c 	bne.w	800e302 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	699b      	ldr	r3, [r3, #24]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d132      	bne.n	800e0b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	015a      	lsls	r2, r3, #5
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	4413      	add	r3, r2
 800e05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e05e:	691b      	ldr	r3, [r3, #16]
 800e060:	69ba      	ldr	r2, [r7, #24]
 800e062:	0151      	lsls	r1, r2, #5
 800e064:	69fa      	ldr	r2, [r7, #28]
 800e066:	440a      	add	r2, r1
 800e068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e06c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e070:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e074:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	015a      	lsls	r2, r3, #5
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	4413      	add	r3, r2
 800e07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	69ba      	ldr	r2, [r7, #24]
 800e086:	0151      	lsls	r1, r2, #5
 800e088:	69fa      	ldr	r2, [r7, #28]
 800e08a:	440a      	add	r2, r1
 800e08c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	015a      	lsls	r2, r3, #5
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	4413      	add	r3, r2
 800e09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a2:	691b      	ldr	r3, [r3, #16]
 800e0a4:	69ba      	ldr	r2, [r7, #24]
 800e0a6:	0151      	lsls	r1, r2, #5
 800e0a8:	69fa      	ldr	r2, [r7, #28]
 800e0aa:	440a      	add	r2, r1
 800e0ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0b0:	0cdb      	lsrs	r3, r3, #19
 800e0b2:	04db      	lsls	r3, r3, #19
 800e0b4:	6113      	str	r3, [r2, #16]
 800e0b6:	e074      	b.n	800e1a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	015a      	lsls	r2, r3, #5
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	4413      	add	r3, r2
 800e0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0c4:	691b      	ldr	r3, [r3, #16]
 800e0c6:	69ba      	ldr	r2, [r7, #24]
 800e0c8:	0151      	lsls	r1, r2, #5
 800e0ca:	69fa      	ldr	r2, [r7, #28]
 800e0cc:	440a      	add	r2, r1
 800e0ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0d2:	0cdb      	lsrs	r3, r3, #19
 800e0d4:	04db      	lsls	r3, r3, #19
 800e0d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	015a      	lsls	r2, r3, #5
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	4413      	add	r3, r2
 800e0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e4:	691b      	ldr	r3, [r3, #16]
 800e0e6:	69ba      	ldr	r2, [r7, #24]
 800e0e8:	0151      	lsls	r1, r2, #5
 800e0ea:	69fa      	ldr	r2, [r7, #28]
 800e0ec:	440a      	add	r2, r1
 800e0ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e0f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e0fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	015a      	lsls	r2, r3, #5
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	4413      	add	r3, r2
 800e104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e108:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	6999      	ldr	r1, [r3, #24]
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	440b      	add	r3, r1
 800e114:	1e59      	subs	r1, r3, #1
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e11e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e120:	4b9d      	ldr	r3, [pc, #628]	; (800e398 <USB_EPStartXfer+0x370>)
 800e122:	400b      	ands	r3, r1
 800e124:	69b9      	ldr	r1, [r7, #24]
 800e126:	0148      	lsls	r0, r1, #5
 800e128:	69f9      	ldr	r1, [r7, #28]
 800e12a:	4401      	add	r1, r0
 800e12c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e130:	4313      	orrs	r3, r2
 800e132:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	015a      	lsls	r2, r3, #5
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	4413      	add	r3, r2
 800e13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e140:	691a      	ldr	r2, [r3, #16]
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	699b      	ldr	r3, [r3, #24]
 800e146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e14a:	69b9      	ldr	r1, [r7, #24]
 800e14c:	0148      	lsls	r0, r1, #5
 800e14e:	69f9      	ldr	r1, [r7, #28]
 800e150:	4401      	add	r1, r0
 800e152:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e156:	4313      	orrs	r3, r2
 800e158:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	791b      	ldrb	r3, [r3, #4]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d11f      	bne.n	800e1a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	015a      	lsls	r2, r3, #5
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	4413      	add	r3, r2
 800e16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	69ba      	ldr	r2, [r7, #24]
 800e172:	0151      	lsls	r1, r2, #5
 800e174:	69fa      	ldr	r2, [r7, #28]
 800e176:	440a      	add	r2, r1
 800e178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e17c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e180:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	015a      	lsls	r2, r3, #5
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	4413      	add	r3, r2
 800e18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	69ba      	ldr	r2, [r7, #24]
 800e192:	0151      	lsls	r1, r2, #5
 800e194:	69fa      	ldr	r2, [r7, #28]
 800e196:	440a      	add	r2, r1
 800e198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e19c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e1a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d14b      	bne.n	800e240 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	695b      	ldr	r3, [r3, #20]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d009      	beq.n	800e1c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	015a      	lsls	r2, r3, #5
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1bc:	461a      	mov	r2, r3
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	695b      	ldr	r3, [r3, #20]
 800e1c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	791b      	ldrb	r3, [r3, #4]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d128      	bne.n	800e21e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d110      	bne.n	800e1fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	015a      	lsls	r2, r3, #5
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	69ba      	ldr	r2, [r7, #24]
 800e1ec:	0151      	lsls	r1, r2, #5
 800e1ee:	69fa      	ldr	r2, [r7, #28]
 800e1f0:	440a      	add	r2, r1
 800e1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e1fa:	6013      	str	r3, [r2, #0]
 800e1fc:	e00f      	b.n	800e21e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	015a      	lsls	r2, r3, #5
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	4413      	add	r3, r2
 800e206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	69ba      	ldr	r2, [r7, #24]
 800e20e:	0151      	lsls	r1, r2, #5
 800e210:	69fa      	ldr	r2, [r7, #28]
 800e212:	440a      	add	r2, r1
 800e214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e21c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	015a      	lsls	r2, r3, #5
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	4413      	add	r3, r2
 800e226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	69ba      	ldr	r2, [r7, #24]
 800e22e:	0151      	lsls	r1, r2, #5
 800e230:	69fa      	ldr	r2, [r7, #28]
 800e232:	440a      	add	r2, r1
 800e234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e238:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e23c:	6013      	str	r3, [r2, #0]
 800e23e:	e133      	b.n	800e4a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	015a      	lsls	r2, r3, #5
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	4413      	add	r3, r2
 800e248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	69ba      	ldr	r2, [r7, #24]
 800e250:	0151      	lsls	r1, r2, #5
 800e252:	69fa      	ldr	r2, [r7, #28]
 800e254:	440a      	add	r2, r1
 800e256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e25a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e25e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	791b      	ldrb	r3, [r3, #4]
 800e264:	2b01      	cmp	r3, #1
 800e266:	d015      	beq.n	800e294 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	699b      	ldr	r3, [r3, #24]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f000 811b 	beq.w	800e4a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	f003 030f 	and.w	r3, r3, #15
 800e282:	2101      	movs	r1, #1
 800e284:	fa01 f303 	lsl.w	r3, r1, r3
 800e288:	69f9      	ldr	r1, [r7, #28]
 800e28a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e28e:	4313      	orrs	r3, r2
 800e290:	634b      	str	r3, [r1, #52]	; 0x34
 800e292:	e109      	b.n	800e4a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d110      	bne.n	800e2c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	015a      	lsls	r2, r3, #5
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	69ba      	ldr	r2, [r7, #24]
 800e2b4:	0151      	lsls	r1, r2, #5
 800e2b6:	69fa      	ldr	r2, [r7, #28]
 800e2b8:	440a      	add	r2, r1
 800e2ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e2c2:	6013      	str	r3, [r2, #0]
 800e2c4:	e00f      	b.n	800e2e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	015a      	lsls	r2, r3, #5
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	69ba      	ldr	r2, [r7, #24]
 800e2d6:	0151      	lsls	r1, r2, #5
 800e2d8:	69fa      	ldr	r2, [r7, #28]
 800e2da:	440a      	add	r2, r1
 800e2dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	6919      	ldr	r1, [r3, #16]
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	781a      	ldrb	r2, [r3, #0]
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	b298      	uxth	r0, r3
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	9300      	str	r3, [sp, #0]
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f000 fade 	bl	800e8bc <USB_WritePacket>
 800e300:	e0d2      	b.n	800e4a8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	015a      	lsls	r2, r3, #5
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	4413      	add	r3, r2
 800e30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	69ba      	ldr	r2, [r7, #24]
 800e312:	0151      	lsls	r1, r2, #5
 800e314:	69fa      	ldr	r2, [r7, #28]
 800e316:	440a      	add	r2, r1
 800e318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e31c:	0cdb      	lsrs	r3, r3, #19
 800e31e:	04db      	lsls	r3, r3, #19
 800e320:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	015a      	lsls	r2, r3, #5
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	4413      	add	r3, r2
 800e32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e32e:	691b      	ldr	r3, [r3, #16]
 800e330:	69ba      	ldr	r2, [r7, #24]
 800e332:	0151      	lsls	r1, r2, #5
 800e334:	69fa      	ldr	r2, [r7, #28]
 800e336:	440a      	add	r2, r1
 800e338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e33c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e340:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e344:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	699b      	ldr	r3, [r3, #24]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d126      	bne.n	800e39c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	015a      	lsls	r2, r3, #5
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	4413      	add	r3, r2
 800e356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e35a:	691a      	ldr	r2, [r3, #16]
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e364:	69b9      	ldr	r1, [r7, #24]
 800e366:	0148      	lsls	r0, r1, #5
 800e368:	69f9      	ldr	r1, [r7, #28]
 800e36a:	4401      	add	r1, r0
 800e36c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e370:	4313      	orrs	r3, r2
 800e372:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	015a      	lsls	r2, r3, #5
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	4413      	add	r3, r2
 800e37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	69ba      	ldr	r2, [r7, #24]
 800e384:	0151      	lsls	r1, r2, #5
 800e386:	69fa      	ldr	r2, [r7, #28]
 800e388:	440a      	add	r2, r1
 800e38a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e38e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e392:	6113      	str	r3, [r2, #16]
 800e394:	e03a      	b.n	800e40c <USB_EPStartXfer+0x3e4>
 800e396:	bf00      	nop
 800e398:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	699a      	ldr	r2, [r3, #24]
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	1e5a      	subs	r2, r3, #1
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	8afa      	ldrh	r2, [r7, #22]
 800e3b8:	fb03 f202 	mul.w	r2, r3, r2
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	015a      	lsls	r2, r3, #5
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3cc:	691a      	ldr	r2, [r3, #16]
 800e3ce:	8afb      	ldrh	r3, [r7, #22]
 800e3d0:	04d9      	lsls	r1, r3, #19
 800e3d2:	4b38      	ldr	r3, [pc, #224]	; (800e4b4 <USB_EPStartXfer+0x48c>)
 800e3d4:	400b      	ands	r3, r1
 800e3d6:	69b9      	ldr	r1, [r7, #24]
 800e3d8:	0148      	lsls	r0, r1, #5
 800e3da:	69f9      	ldr	r1, [r7, #28]
 800e3dc:	4401      	add	r1, r0
 800e3de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	015a      	lsls	r2, r3, #5
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3f2:	691a      	ldr	r2, [r3, #16]
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	69db      	ldr	r3, [r3, #28]
 800e3f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3fc:	69b9      	ldr	r1, [r7, #24]
 800e3fe:	0148      	lsls	r0, r1, #5
 800e400:	69f9      	ldr	r1, [r7, #28]
 800e402:	4401      	add	r1, r0
 800e404:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e408:	4313      	orrs	r3, r2
 800e40a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e40c:	79fb      	ldrb	r3, [r7, #7]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d10d      	bne.n	800e42e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d009      	beq.n	800e42e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	6919      	ldr	r1, [r3, #16]
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	015a      	lsls	r2, r3, #5
 800e422:	69fb      	ldr	r3, [r7, #28]
 800e424:	4413      	add	r3, r2
 800e426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e42a:	460a      	mov	r2, r1
 800e42c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	791b      	ldrb	r3, [r3, #4]
 800e432:	2b01      	cmp	r3, #1
 800e434:	d128      	bne.n	800e488 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e442:	2b00      	cmp	r3, #0
 800e444:	d110      	bne.n	800e468 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	015a      	lsls	r2, r3, #5
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	4413      	add	r3, r2
 800e44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	69ba      	ldr	r2, [r7, #24]
 800e456:	0151      	lsls	r1, r2, #5
 800e458:	69fa      	ldr	r2, [r7, #28]
 800e45a:	440a      	add	r2, r1
 800e45c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e464:	6013      	str	r3, [r2, #0]
 800e466:	e00f      	b.n	800e488 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	015a      	lsls	r2, r3, #5
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	4413      	add	r3, r2
 800e470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	69ba      	ldr	r2, [r7, #24]
 800e478:	0151      	lsls	r1, r2, #5
 800e47a:	69fa      	ldr	r2, [r7, #28]
 800e47c:	440a      	add	r2, r1
 800e47e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e486:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e488:	69bb      	ldr	r3, [r7, #24]
 800e48a:	015a      	lsls	r2, r3, #5
 800e48c:	69fb      	ldr	r3, [r7, #28]
 800e48e:	4413      	add	r3, r2
 800e490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	69ba      	ldr	r2, [r7, #24]
 800e498:	0151      	lsls	r1, r2, #5
 800e49a:	69fa      	ldr	r2, [r7, #28]
 800e49c:	440a      	add	r2, r1
 800e49e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e4a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3720      	adds	r7, #32
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	1ff80000 	.word	0x1ff80000

0800e4b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b087      	sub	sp, #28
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	60b9      	str	r1, [r7, #8]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	785b      	ldrb	r3, [r3, #1]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	f040 80ce 	bne.w	800e676 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	699b      	ldr	r3, [r3, #24]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d132      	bne.n	800e548 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	015a      	lsls	r2, r3, #5
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	693a      	ldr	r2, [r7, #16]
 800e4f2:	0151      	lsls	r1, r2, #5
 800e4f4:	697a      	ldr	r2, [r7, #20]
 800e4f6:	440a      	add	r2, r1
 800e4f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e500:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e504:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	015a      	lsls	r2, r3, #5
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	4413      	add	r3, r2
 800e50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	693a      	ldr	r2, [r7, #16]
 800e516:	0151      	lsls	r1, r2, #5
 800e518:	697a      	ldr	r2, [r7, #20]
 800e51a:	440a      	add	r2, r1
 800e51c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	015a      	lsls	r2, r3, #5
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	4413      	add	r3, r2
 800e52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e532:	691b      	ldr	r3, [r3, #16]
 800e534:	693a      	ldr	r2, [r7, #16]
 800e536:	0151      	lsls	r1, r2, #5
 800e538:	697a      	ldr	r2, [r7, #20]
 800e53a:	440a      	add	r2, r1
 800e53c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e540:	0cdb      	lsrs	r3, r3, #19
 800e542:	04db      	lsls	r3, r3, #19
 800e544:	6113      	str	r3, [r2, #16]
 800e546:	e04e      	b.n	800e5e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	015a      	lsls	r2, r3, #5
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	4413      	add	r3, r2
 800e550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e554:	691b      	ldr	r3, [r3, #16]
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	0151      	lsls	r1, r2, #5
 800e55a:	697a      	ldr	r2, [r7, #20]
 800e55c:	440a      	add	r2, r1
 800e55e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e562:	0cdb      	lsrs	r3, r3, #19
 800e564:	04db      	lsls	r3, r3, #19
 800e566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	015a      	lsls	r2, r3, #5
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	4413      	add	r3, r2
 800e570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	693a      	ldr	r2, [r7, #16]
 800e578:	0151      	lsls	r1, r2, #5
 800e57a:	697a      	ldr	r2, [r7, #20]
 800e57c:	440a      	add	r2, r1
 800e57e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e582:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e586:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e58a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	699a      	ldr	r2, [r3, #24]
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	429a      	cmp	r2, r3
 800e596:	d903      	bls.n	800e5a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	68da      	ldr	r2, [r3, #12]
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	015a      	lsls	r2, r3, #5
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	0151      	lsls	r1, r2, #5
 800e5b2:	697a      	ldr	r2, [r7, #20]
 800e5b4:	440a      	add	r2, r1
 800e5b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	015a      	lsls	r2, r3, #5
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5cc:	691a      	ldr	r2, [r3, #16]
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	699b      	ldr	r3, [r3, #24]
 800e5d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5d6:	6939      	ldr	r1, [r7, #16]
 800e5d8:	0148      	lsls	r0, r1, #5
 800e5da:	6979      	ldr	r1, [r7, #20]
 800e5dc:	4401      	add	r1, r0
 800e5de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e5e2:	4313      	orrs	r3, r2
 800e5e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e5e6:	79fb      	ldrb	r3, [r7, #7]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d11e      	bne.n	800e62a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	695b      	ldr	r3, [r3, #20]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d009      	beq.n	800e608 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	015a      	lsls	r2, r3, #5
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e600:	461a      	mov	r2, r3
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	695b      	ldr	r3, [r3, #20]
 800e606:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	015a      	lsls	r2, r3, #5
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	4413      	add	r3, r2
 800e610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	693a      	ldr	r2, [r7, #16]
 800e618:	0151      	lsls	r1, r2, #5
 800e61a:	697a      	ldr	r2, [r7, #20]
 800e61c:	440a      	add	r2, r1
 800e61e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e622:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e626:	6013      	str	r3, [r2, #0]
 800e628:	e097      	b.n	800e75a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	015a      	lsls	r2, r3, #5
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	4413      	add	r3, r2
 800e632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	693a      	ldr	r2, [r7, #16]
 800e63a:	0151      	lsls	r1, r2, #5
 800e63c:	697a      	ldr	r2, [r7, #20]
 800e63e:	440a      	add	r2, r1
 800e640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e644:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e648:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	699b      	ldr	r3, [r3, #24]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f000 8083 	beq.w	800e75a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e65a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	f003 030f 	and.w	r3, r3, #15
 800e664:	2101      	movs	r1, #1
 800e666:	fa01 f303 	lsl.w	r3, r1, r3
 800e66a:	6979      	ldr	r1, [r7, #20]
 800e66c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e670:	4313      	orrs	r3, r2
 800e672:	634b      	str	r3, [r1, #52]	; 0x34
 800e674:	e071      	b.n	800e75a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	015a      	lsls	r2, r3, #5
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	4413      	add	r3, r2
 800e67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e682:	691b      	ldr	r3, [r3, #16]
 800e684:	693a      	ldr	r2, [r7, #16]
 800e686:	0151      	lsls	r1, r2, #5
 800e688:	697a      	ldr	r2, [r7, #20]
 800e68a:	440a      	add	r2, r1
 800e68c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e690:	0cdb      	lsrs	r3, r3, #19
 800e692:	04db      	lsls	r3, r3, #19
 800e694:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	015a      	lsls	r2, r3, #5
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	4413      	add	r3, r2
 800e69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6a2:	691b      	ldr	r3, [r3, #16]
 800e6a4:	693a      	ldr	r2, [r7, #16]
 800e6a6:	0151      	lsls	r1, r2, #5
 800e6a8:	697a      	ldr	r2, [r7, #20]
 800e6aa:	440a      	add	r2, r1
 800e6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e6b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e6b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	699b      	ldr	r3, [r3, #24]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d003      	beq.n	800e6ca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	68da      	ldr	r2, [r3, #12]
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	68da      	ldr	r2, [r3, #12]
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	015a      	lsls	r2, r3, #5
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	4413      	add	r3, r2
 800e6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6de:	691b      	ldr	r3, [r3, #16]
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	0151      	lsls	r1, r2, #5
 800e6e4:	697a      	ldr	r2, [r7, #20]
 800e6e6:	440a      	add	r2, r1
 800e6e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e6f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	015a      	lsls	r2, r3, #5
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fe:	691a      	ldr	r2, [r3, #16]
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	69db      	ldr	r3, [r3, #28]
 800e704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e708:	6939      	ldr	r1, [r7, #16]
 800e70a:	0148      	lsls	r0, r1, #5
 800e70c:	6979      	ldr	r1, [r7, #20]
 800e70e:	4401      	add	r1, r0
 800e710:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e714:	4313      	orrs	r3, r2
 800e716:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e718:	79fb      	ldrb	r3, [r7, #7]
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d10d      	bne.n	800e73a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d009      	beq.n	800e73a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	6919      	ldr	r1, [r3, #16]
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	015a      	lsls	r2, r3, #5
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	4413      	add	r3, r2
 800e732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e736:	460a      	mov	r2, r1
 800e738:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	015a      	lsls	r2, r3, #5
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	4413      	add	r3, r2
 800e742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	0151      	lsls	r1, r2, #5
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	440a      	add	r2, r1
 800e750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e758:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	371c      	adds	r7, #28
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e768:	b480      	push	{r7}
 800e76a:	b087      	sub	sp, #28
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e772:	2300      	movs	r3, #0
 800e774:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e776:	2300      	movs	r3, #0
 800e778:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	785b      	ldrb	r3, [r3, #1]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d14a      	bne.n	800e81c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	015a      	lsls	r2, r3, #5
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	4413      	add	r3, r2
 800e790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e79a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e79e:	f040 8086 	bne.w	800e8ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	015a      	lsls	r2, r3, #5
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	683a      	ldr	r2, [r7, #0]
 800e7b4:	7812      	ldrb	r2, [r2, #0]
 800e7b6:	0151      	lsls	r1, r2, #5
 800e7b8:	693a      	ldr	r2, [r7, #16]
 800e7ba:	440a      	add	r2, r1
 800e7bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e7c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	015a      	lsls	r2, r3, #5
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	683a      	ldr	r2, [r7, #0]
 800e7d8:	7812      	ldrb	r2, [r2, #0]
 800e7da:	0151      	lsls	r1, r2, #5
 800e7dc:	693a      	ldr	r2, [r7, #16]
 800e7de:	440a      	add	r2, r1
 800e7e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e7e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f242 7210 	movw	r2, #10000	; 0x2710
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d902      	bls.n	800e800 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	75fb      	strb	r3, [r7, #23]
          break;
 800e7fe:	e056      	b.n	800e8ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	015a      	lsls	r2, r3, #5
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	4413      	add	r3, r2
 800e80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e818:	d0e7      	beq.n	800e7ea <USB_EPStopXfer+0x82>
 800e81a:	e048      	b.n	800e8ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	015a      	lsls	r2, r3, #5
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	4413      	add	r3, r2
 800e826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e834:	d13b      	bne.n	800e8ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	015a      	lsls	r2, r3, #5
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	4413      	add	r3, r2
 800e840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	7812      	ldrb	r2, [r2, #0]
 800e84a:	0151      	lsls	r1, r2, #5
 800e84c:	693a      	ldr	r2, [r7, #16]
 800e84e:	440a      	add	r2, r1
 800e850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e854:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e858:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	015a      	lsls	r2, r3, #5
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	4413      	add	r3, r2
 800e864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	7812      	ldrb	r2, [r2, #0]
 800e86e:	0151      	lsls	r1, r2, #5
 800e870:	693a      	ldr	r2, [r7, #16]
 800e872:	440a      	add	r2, r1
 800e874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e87c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3301      	adds	r3, #1
 800e882:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f242 7210 	movw	r2, #10000	; 0x2710
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d902      	bls.n	800e894 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	75fb      	strb	r3, [r7, #23]
          break;
 800e892:	e00c      	b.n	800e8ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	015a      	lsls	r2, r3, #5
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	4413      	add	r3, r2
 800e89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8ac:	d0e7      	beq.n	800e87e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	371c      	adds	r7, #28
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b089      	sub	sp, #36	; 0x24
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	71fb      	strb	r3, [r7, #7]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e8da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d123      	bne.n	800e92a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e8e2:	88bb      	ldrh	r3, [r7, #4]
 800e8e4:	3303      	adds	r3, #3
 800e8e6:	089b      	lsrs	r3, r3, #2
 800e8e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	61bb      	str	r3, [r7, #24]
 800e8ee:	e018      	b.n	800e922 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e8f0:	79fb      	ldrb	r3, [r7, #7]
 800e8f2:	031a      	lsls	r2, r3, #12
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	3301      	adds	r3, #1
 800e908:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	3301      	adds	r3, #1
 800e90e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	3301      	adds	r3, #1
 800e914:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	3301      	adds	r3, #1
 800e91a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	3301      	adds	r3, #1
 800e920:	61bb      	str	r3, [r7, #24]
 800e922:	69ba      	ldr	r2, [r7, #24]
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	429a      	cmp	r2, r3
 800e928:	d3e2      	bcc.n	800e8f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3724      	adds	r7, #36	; 0x24
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e938:	b480      	push	{r7}
 800e93a:	b08b      	sub	sp, #44	; 0x2c
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	4613      	mov	r3, r2
 800e944:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e94e:	88fb      	ldrh	r3, [r7, #6]
 800e950:	089b      	lsrs	r3, r3, #2
 800e952:	b29b      	uxth	r3, r3
 800e954:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e956:	88fb      	ldrh	r3, [r7, #6]
 800e958:	f003 0303 	and.w	r3, r3, #3
 800e95c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e95e:	2300      	movs	r3, #0
 800e960:	623b      	str	r3, [r7, #32]
 800e962:	e014      	b.n	800e98e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e972:	3301      	adds	r3, #1
 800e974:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	3301      	adds	r3, #1
 800e97a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	3301      	adds	r3, #1
 800e980:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e984:	3301      	adds	r3, #1
 800e986:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e988:	6a3b      	ldr	r3, [r7, #32]
 800e98a:	3301      	adds	r3, #1
 800e98c:	623b      	str	r3, [r7, #32]
 800e98e:	6a3a      	ldr	r2, [r7, #32]
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	429a      	cmp	r2, r3
 800e994:	d3e6      	bcc.n	800e964 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e996:	8bfb      	ldrh	r3, [r7, #30]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d01e      	beq.n	800e9da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e99c:	2300      	movs	r3, #0
 800e99e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	f107 0310 	add.w	r3, r7, #16
 800e9ac:	6812      	ldr	r2, [r2, #0]
 800e9ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e9b0:	693a      	ldr	r2, [r7, #16]
 800e9b2:	6a3b      	ldr	r3, [r7, #32]
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	00db      	lsls	r3, r3, #3
 800e9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c0:	701a      	strb	r2, [r3, #0]
      i++;
 800e9c2:	6a3b      	ldr	r3, [r7, #32]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e9ce:	8bfb      	ldrh	r3, [r7, #30]
 800e9d0:	3b01      	subs	r3, #1
 800e9d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e9d4:	8bfb      	ldrh	r3, [r7, #30]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1ea      	bne.n	800e9b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	372c      	adds	r7, #44	; 0x2c
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	785b      	ldrb	r3, [r3, #1]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d12c      	bne.n	800ea5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	015a      	lsls	r2, r3, #5
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	4413      	add	r3, r2
 800ea0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	db12      	blt.n	800ea3c <USB_EPSetStall+0x54>
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00f      	beq.n	800ea3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	015a      	lsls	r2, r3, #5
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	4413      	add	r3, r2
 800ea24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	0151      	lsls	r1, r2, #5
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	440a      	add	r2, r1
 800ea32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ea3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	015a      	lsls	r2, r3, #5
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	4413      	add	r3, r2
 800ea44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	68ba      	ldr	r2, [r7, #8]
 800ea4c:	0151      	lsls	r1, r2, #5
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	440a      	add	r2, r1
 800ea52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ea5a:	6013      	str	r3, [r2, #0]
 800ea5c:	e02b      	b.n	800eab6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	015a      	lsls	r2, r3, #5
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	4413      	add	r3, r2
 800ea66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	db12      	blt.n	800ea96 <USB_EPSetStall+0xae>
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00f      	beq.n	800ea96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	015a      	lsls	r2, r3, #5
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68ba      	ldr	r2, [r7, #8]
 800ea86:	0151      	lsls	r1, r2, #5
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	440a      	add	r2, r1
 800ea8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ea94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	015a      	lsls	r2, r3, #5
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	0151      	lsls	r1, r2, #5
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	440a      	add	r2, r1
 800eaac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eab4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eab6:	2300      	movs	r3, #0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3714      	adds	r7, #20
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	785b      	ldrb	r3, [r3, #1]
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d128      	bne.n	800eb32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	015a      	lsls	r2, r3, #5
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	4413      	add	r3, r2
 800eae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	68ba      	ldr	r2, [r7, #8]
 800eaf0:	0151      	lsls	r1, r2, #5
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	440a      	add	r2, r1
 800eaf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eafa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eafe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	791b      	ldrb	r3, [r3, #4]
 800eb04:	2b03      	cmp	r3, #3
 800eb06:	d003      	beq.n	800eb10 <USB_EPClearStall+0x4c>
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	791b      	ldrb	r3, [r3, #4]
 800eb0c:	2b02      	cmp	r3, #2
 800eb0e:	d138      	bne.n	800eb82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	015a      	lsls	r2, r3, #5
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	4413      	add	r3, r2
 800eb18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	0151      	lsls	r1, r2, #5
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	440a      	add	r2, r1
 800eb26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb2e:	6013      	str	r3, [r2, #0]
 800eb30:	e027      	b.n	800eb82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	015a      	lsls	r2, r3, #5
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	4413      	add	r3, r2
 800eb3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	0151      	lsls	r1, r2, #5
 800eb44:	68fa      	ldr	r2, [r7, #12]
 800eb46:	440a      	add	r2, r1
 800eb48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	791b      	ldrb	r3, [r3, #4]
 800eb56:	2b03      	cmp	r3, #3
 800eb58:	d003      	beq.n	800eb62 <USB_EPClearStall+0x9e>
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	791b      	ldrb	r3, [r3, #4]
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d10f      	bne.n	800eb82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	015a      	lsls	r2, r3, #5
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4413      	add	r3, r2
 800eb6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	0151      	lsls	r1, r2, #5
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	440a      	add	r2, r1
 800eb78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3714      	adds	r7, #20
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b085      	sub	sp, #20
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ebae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ebb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	78fb      	ldrb	r3, [r7, #3]
 800ebbe:	011b      	lsls	r3, r3, #4
 800ebc0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ebc4:	68f9      	ldr	r1, [r7, #12]
 800ebc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3714      	adds	r7, #20
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	695b      	ldr	r3, [r3, #20]
 800ebe8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	699b      	ldr	r3, [r3, #24]
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	4013      	ands	r3, r2
 800ebf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3714      	adds	r7, #20
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr

0800ec02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec02:	b480      	push	{r7}
 800ec04:	b085      	sub	sp, #20
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec14:	699b      	ldr	r3, [r3, #24]
 800ec16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec1e:	69db      	ldr	r3, [r3, #28]
 800ec20:	68ba      	ldr	r2, [r7, #8]
 800ec22:	4013      	ands	r3, r2
 800ec24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	0c1b      	lsrs	r3, r3, #16
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3714      	adds	r7, #20
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr

0800ec36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec36:	b480      	push	{r7}
 800ec38:	b085      	sub	sp, #20
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec48:	699b      	ldr	r3, [r3, #24]
 800ec4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	4013      	ands	r3, r2
 800ec58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	b29b      	uxth	r3, r3
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3714      	adds	r7, #20
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr

0800ec6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec6a:	b480      	push	{r7}
 800ec6c:	b085      	sub	sp, #20
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
 800ec72:	460b      	mov	r3, r1
 800ec74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ec7a:	78fb      	ldrb	r3, [r7, #3]
 800ec7c:	015a      	lsls	r2, r3, #5
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	4413      	add	r3, r2
 800ec82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	4013      	ands	r3, r2
 800ec96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec98:	68bb      	ldr	r3, [r7, #8]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr

0800eca6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eca6:	b480      	push	{r7}
 800eca8:	b087      	sub	sp, #28
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	460b      	mov	r3, r1
 800ecb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecbc:	691b      	ldr	r3, [r3, #16]
 800ecbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ecca:	78fb      	ldrb	r3, [r7, #3]
 800eccc:	f003 030f 	and.w	r3, r3, #15
 800ecd0:	68fa      	ldr	r2, [r7, #12]
 800ecd2:	fa22 f303 	lsr.w	r3, r2, r3
 800ecd6:	01db      	lsls	r3, r3, #7
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	693a      	ldr	r2, [r7, #16]
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ece0:	78fb      	ldrb	r3, [r7, #3]
 800ece2:	015a      	lsls	r2, r3, #5
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	4413      	add	r3, r2
 800ece8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecec:	689b      	ldr	r3, [r3, #8]
 800ecee:	693a      	ldr	r2, [r7, #16]
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ecf4:	68bb      	ldr	r3, [r7, #8]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	371c      	adds	r7, #28
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ed02:	b480      	push	{r7}
 800ed04:	b083      	sub	sp, #12
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	695b      	ldr	r3, [r3, #20]
 800ed0e:	f003 0301 	and.w	r3, r3, #1
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	370c      	adds	r7, #12
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr

0800ed1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ed1e:	b480      	push	{r7}
 800ed20:	b085      	sub	sp, #20
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ed3c:	f023 0307 	bic.w	r3, r3, #7
 800ed40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3714      	adds	r7, #20
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b087      	sub	sp, #28
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	607a      	str	r2, [r7, #4]
 800ed70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	333c      	adds	r3, #60	; 0x3c
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	4a26      	ldr	r2, [pc, #152]	; (800ee1c <USB_EP0_OutStart+0xb8>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d90a      	bls.n	800ed9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed98:	d101      	bne.n	800ed9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	e037      	b.n	800ee0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda4:	461a      	mov	r2, r3
 800eda6:	2300      	movs	r3, #0
 800eda8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800edbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	697a      	ldr	r2, [r7, #20]
 800edc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edcc:	f043 0318 	orr.w	r3, r3, #24
 800edd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edd8:	691b      	ldr	r3, [r3, #16]
 800edda:	697a      	ldr	r2, [r7, #20]
 800eddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ede0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ede4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ede6:	7afb      	ldrb	r3, [r7, #11]
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d10f      	bne.n	800ee0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edf2:	461a      	mov	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	697a      	ldr	r2, [r7, #20]
 800ee02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ee0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	371c      	adds	r7, #28
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	4f54300a 	.word	0x4f54300a

0800ee20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	370c      	adds	r7, #12
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr

0800ee36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b084      	sub	sp, #16
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
 800ee3e:	460b      	mov	r3, r1
 800ee40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee42:	2300      	movs	r3, #0
 800ee44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d009      	beq.n	800ee64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	78fa      	ldrb	r2, [r7, #3]
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	4798      	blx	r3
 800ee60:	4603      	mov	r3, r0
 800ee62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b084      	sub	sp, #16
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
 800ee76:	460b      	mov	r3, r1
 800ee78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	78fa      	ldrb	r2, [r7, #3]
 800ee88:	4611      	mov	r1, r2
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	4798      	blx	r3
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d001      	beq.n	800ee98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ee94:	2303      	movs	r3, #3
 800ee96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}

0800eea2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eea2:	b580      	push	{r7, lr}
 800eea4:	b084      	sub	sp, #16
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
 800eeaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eeb2:	6839      	ldr	r1, [r7, #0]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f001 f8b2 	bl	801001e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2201      	movs	r2, #1
 800eebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800eec8:	461a      	mov	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eed6:	f003 031f 	and.w	r3, r3, #31
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d01a      	beq.n	800ef14 <USBD_LL_SetupStage+0x72>
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d822      	bhi.n	800ef28 <USBD_LL_SetupStage+0x86>
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d002      	beq.n	800eeec <USBD_LL_SetupStage+0x4a>
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d00a      	beq.n	800ef00 <USBD_LL_SetupStage+0x5e>
 800eeea:	e01d      	b.n	800ef28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eef2:	4619      	mov	r1, r3
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 fb09 	bl	800f50c <USBD_StdDevReq>
 800eefa:	4603      	mov	r3, r0
 800eefc:	73fb      	strb	r3, [r7, #15]
      break;
 800eefe:	e020      	b.n	800ef42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ef06:	4619      	mov	r1, r3
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 fb71 	bl	800f5f0 <USBD_StdItfReq>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	73fb      	strb	r3, [r7, #15]
      break;
 800ef12:	e016      	b.n	800ef42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 fbd3 	bl	800f6c8 <USBD_StdEPReq>
 800ef22:	4603      	mov	r3, r0
 800ef24:	73fb      	strb	r3, [r7, #15]
      break;
 800ef26:	e00c      	b.n	800ef42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ef2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	4619      	mov	r1, r3
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f003 f8f8 	bl	801212c <USBD_LL_StallEP>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ef40:	bf00      	nop
  }

  return ret;
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	460b      	mov	r3, r1
 800ef56:	607a      	str	r2, [r7, #4]
 800ef58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ef5e:	7afb      	ldrb	r3, [r7, #11]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d16e      	bne.n	800f042 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ef6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef72:	2b03      	cmp	r3, #3
 800ef74:	f040 8098 	bne.w	800f0a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	689a      	ldr	r2, [r3, #8]
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d913      	bls.n	800efac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	689a      	ldr	r2, [r3, #8]
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	1ad2      	subs	r2, r2, r3
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	68da      	ldr	r2, [r3, #12]
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	bf28      	it	cs
 800ef9e:	4613      	movcs	r3, r2
 800efa0:	461a      	mov	r2, r3
 800efa2:	6879      	ldr	r1, [r7, #4]
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f001 f8b1 	bl	801010c <USBD_CtlContinueRx>
 800efaa:	e07d      	b.n	800f0a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800efb2:	f003 031f 	and.w	r3, r3, #31
 800efb6:	2b02      	cmp	r3, #2
 800efb8:	d014      	beq.n	800efe4 <USBD_LL_DataOutStage+0x98>
 800efba:	2b02      	cmp	r3, #2
 800efbc:	d81d      	bhi.n	800effa <USBD_LL_DataOutStage+0xae>
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d002      	beq.n	800efc8 <USBD_LL_DataOutStage+0x7c>
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d003      	beq.n	800efce <USBD_LL_DataOutStage+0x82>
 800efc6:	e018      	b.n	800effa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800efc8:	2300      	movs	r3, #0
 800efca:	75bb      	strb	r3, [r7, #22]
            break;
 800efcc:	e018      	b.n	800f000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	4619      	mov	r1, r3
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	f000 fa5e 	bl	800f49a <USBD_CoreFindIF>
 800efde:	4603      	mov	r3, r0
 800efe0:	75bb      	strb	r3, [r7, #22]
            break;
 800efe2:	e00d      	b.n	800f000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800efea:	b2db      	uxtb	r3, r3
 800efec:	4619      	mov	r1, r3
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f000 fa60 	bl	800f4b4 <USBD_CoreFindEP>
 800eff4:	4603      	mov	r3, r0
 800eff6:	75bb      	strb	r3, [r7, #22]
            break;
 800eff8:	e002      	b.n	800f000 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800effa:	2300      	movs	r3, #0
 800effc:	75bb      	strb	r3, [r7, #22]
            break;
 800effe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f000:	7dbb      	ldrb	r3, [r7, #22]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d119      	bne.n	800f03a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	2b03      	cmp	r3, #3
 800f010:	d113      	bne.n	800f03a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f012:	7dba      	ldrb	r2, [r7, #22]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	32ae      	adds	r2, #174	; 0xae
 800f018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00b      	beq.n	800f03a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f022:	7dba      	ldrb	r2, [r7, #22]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f02a:	7dba      	ldrb	r2, [r7, #22]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	32ae      	adds	r2, #174	; 0xae
 800f030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f034:	691b      	ldr	r3, [r3, #16]
 800f036:	68f8      	ldr	r0, [r7, #12]
 800f038:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f001 f877 	bl	801012e <USBD_CtlSendStatus>
 800f040:	e032      	b.n	800f0a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f042:	7afb      	ldrb	r3, [r7, #11]
 800f044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	4619      	mov	r1, r3
 800f04c:	68f8      	ldr	r0, [r7, #12]
 800f04e:	f000 fa31 	bl	800f4b4 <USBD_CoreFindEP>
 800f052:	4603      	mov	r3, r0
 800f054:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f056:	7dbb      	ldrb	r3, [r7, #22]
 800f058:	2bff      	cmp	r3, #255	; 0xff
 800f05a:	d025      	beq.n	800f0a8 <USBD_LL_DataOutStage+0x15c>
 800f05c:	7dbb      	ldrb	r3, [r7, #22]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d122      	bne.n	800f0a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	2b03      	cmp	r3, #3
 800f06c:	d117      	bne.n	800f09e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f06e:	7dba      	ldrb	r2, [r7, #22]
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	32ae      	adds	r2, #174	; 0xae
 800f074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f078:	699b      	ldr	r3, [r3, #24]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00f      	beq.n	800f09e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f07e:	7dba      	ldrb	r2, [r7, #22]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f086:	7dba      	ldrb	r2, [r7, #22]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	32ae      	adds	r2, #174	; 0xae
 800f08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f090:	699b      	ldr	r3, [r3, #24]
 800f092:	7afa      	ldrb	r2, [r7, #11]
 800f094:	4611      	mov	r1, r2
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	4798      	blx	r3
 800f09a:	4603      	mov	r3, r0
 800f09c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f09e:	7dfb      	ldrb	r3, [r7, #23]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d001      	beq.n	800f0a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	e000      	b.n	800f0aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f0a8:	2300      	movs	r3, #0
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3718      	adds	r7, #24
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b086      	sub	sp, #24
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	60f8      	str	r0, [r7, #12]
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	607a      	str	r2, [r7, #4]
 800f0be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f0c0:	7afb      	ldrb	r3, [r7, #11]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d16f      	bne.n	800f1a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	3314      	adds	r3, #20
 800f0ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f0d2:	2b02      	cmp	r3, #2
 800f0d4:	d15a      	bne.n	800f18c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	689a      	ldr	r2, [r3, #8]
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d914      	bls.n	800f10c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	689a      	ldr	r2, [r3, #8]
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	1ad2      	subs	r2, r2, r3
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	6879      	ldr	r1, [r7, #4]
 800f0f8:	68f8      	ldr	r0, [r7, #12]
 800f0fa:	f000 fff6 	bl	80100ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0fe:	2300      	movs	r3, #0
 800f100:	2200      	movs	r2, #0
 800f102:	2100      	movs	r1, #0
 800f104:	68f8      	ldr	r0, [r7, #12]
 800f106:	f003 f8bb 	bl	8012280 <USBD_LL_PrepareReceive>
 800f10a:	e03f      	b.n	800f18c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	68da      	ldr	r2, [r3, #12]
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	429a      	cmp	r2, r3
 800f116:	d11c      	bne.n	800f152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	685a      	ldr	r2, [r3, #4]
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f120:	429a      	cmp	r2, r3
 800f122:	d316      	bcc.n	800f152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	685a      	ldr	r2, [r3, #4]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f12e:	429a      	cmp	r2, r3
 800f130:	d20f      	bcs.n	800f152 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f132:	2200      	movs	r2, #0
 800f134:	2100      	movs	r1, #0
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f000 ffd7 	bl	80100ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2200      	movs	r2, #0
 800f140:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f144:	2300      	movs	r3, #0
 800f146:	2200      	movs	r2, #0
 800f148:	2100      	movs	r1, #0
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f003 f898 	bl	8012280 <USBD_LL_PrepareReceive>
 800f150:	e01c      	b.n	800f18c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	2b03      	cmp	r3, #3
 800f15c:	d10f      	bne.n	800f17e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d009      	beq.n	800f17e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f17e:	2180      	movs	r1, #128	; 0x80
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	f002 ffd3 	bl	801212c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f000 ffe4 	bl	8010154 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d03a      	beq.n	800f20c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f7ff fe42 	bl	800ee20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f1a4:	e032      	b.n	800f20c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f1a6:	7afb      	ldrb	r3, [r7, #11]
 800f1a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f000 f97f 	bl	800f4b4 <USBD_CoreFindEP>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1ba:	7dfb      	ldrb	r3, [r7, #23]
 800f1bc:	2bff      	cmp	r3, #255	; 0xff
 800f1be:	d025      	beq.n	800f20c <USBD_LL_DataInStage+0x15a>
 800f1c0:	7dfb      	ldrb	r3, [r7, #23]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d122      	bne.n	800f20c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	2b03      	cmp	r3, #3
 800f1d0:	d11c      	bne.n	800f20c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f1d2:	7dfa      	ldrb	r2, [r7, #23]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	32ae      	adds	r2, #174	; 0xae
 800f1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1dc:	695b      	ldr	r3, [r3, #20]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d014      	beq.n	800f20c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f1e2:	7dfa      	ldrb	r2, [r7, #23]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f1ea:	7dfa      	ldrb	r2, [r7, #23]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	32ae      	adds	r2, #174	; 0xae
 800f1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	7afa      	ldrb	r2, [r7, #11]
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	4798      	blx	r3
 800f1fe:	4603      	mov	r3, r0
 800f200:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f202:	7dbb      	ldrb	r3, [r7, #22]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d001      	beq.n	800f20c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f208:	7dbb      	ldrb	r3, [r7, #22]
 800f20a:	e000      	b.n	800f20e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3718      	adds	r7, #24
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f21e:	2300      	movs	r3, #0
 800f220:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2201      	movs	r2, #1
 800f226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d014      	beq.n	800f27c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00e      	beq.n	800f27c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	6852      	ldr	r2, [r2, #4]
 800f26a:	b2d2      	uxtb	r2, r2
 800f26c:	4611      	mov	r1, r2
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	4798      	blx	r3
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d001      	beq.n	800f27c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f278:	2303      	movs	r3, #3
 800f27a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f27c:	2340      	movs	r3, #64	; 0x40
 800f27e:	2200      	movs	r2, #0
 800f280:	2100      	movs	r1, #0
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f002 ff2c 	bl	80120e0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2201      	movs	r2, #1
 800f28c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2240      	movs	r2, #64	; 0x40
 800f294:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f298:	2340      	movs	r3, #64	; 0x40
 800f29a:	2200      	movs	r2, #0
 800f29c:	2180      	movs	r1, #128	; 0x80
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f002 ff1e 	bl	80120e0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2240      	movs	r2, #64	; 0x40
 800f2ae:	621a      	str	r2, [r3, #32]

  return ret;
 800f2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f2ba:	b480      	push	{r7}
 800f2bc:	b083      	sub	sp, #12
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	78fa      	ldrb	r2, [r7, #3]
 800f2ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	370c      	adds	r7, #12
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr

0800f2da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f2da:	b480      	push	{r7}
 800f2dc:	b083      	sub	sp, #12
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2e8:	b2da      	uxtb	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2204      	movs	r2, #4
 800f2f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f2f8:	2300      	movs	r3, #0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	370c      	adds	r7, #12
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f306:	b480      	push	{r7}
 800f308:	b083      	sub	sp, #12
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b04      	cmp	r3, #4
 800f318:	d106      	bne.n	800f328 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f320:	b2da      	uxtb	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	370c      	adds	r7, #12
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr

0800f336 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f336:	b580      	push	{r7, lr}
 800f338:	b082      	sub	sp, #8
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f344:	b2db      	uxtb	r3, r3
 800f346:	2b03      	cmp	r3, #3
 800f348:	d110      	bne.n	800f36c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00b      	beq.n	800f36c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f35a:	69db      	ldr	r3, [r3, #28]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d005      	beq.n	800f36c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f366:	69db      	ldr	r3, [r3, #28]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b082      	sub	sp, #8
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	460b      	mov	r3, r1
 800f380:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	32ae      	adds	r2, #174	; 0xae
 800f38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d101      	bne.n	800f398 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f394:	2303      	movs	r3, #3
 800f396:	e01c      	b.n	800f3d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d115      	bne.n	800f3d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	32ae      	adds	r2, #174	; 0xae
 800f3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3b2:	6a1b      	ldr	r3, [r3, #32]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00b      	beq.n	800f3d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	32ae      	adds	r2, #174	; 0xae
 800f3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3c6:	6a1b      	ldr	r3, [r3, #32]
 800f3c8:	78fa      	ldrb	r2, [r7, #3]
 800f3ca:	4611      	mov	r1, r2
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3708      	adds	r7, #8
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}

0800f3da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b082      	sub	sp, #8
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	32ae      	adds	r2, #174	; 0xae
 800f3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d101      	bne.n	800f3fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	e01c      	b.n	800f436 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f402:	b2db      	uxtb	r3, r3
 800f404:	2b03      	cmp	r3, #3
 800f406:	d115      	bne.n	800f434 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	32ae      	adds	r2, #174	; 0xae
 800f412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00b      	beq.n	800f434 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	32ae      	adds	r2, #174	; 0xae
 800f426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42c:	78fa      	ldrb	r2, [r7, #3]
 800f42e:	4611      	mov	r1, r2
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f43e:	b480      	push	{r7}
 800f440:	b083      	sub	sp, #12
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f446:	2300      	movs	r3, #0
}
 800f448:	4618      	mov	r0, r3
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f45c:	2300      	movs	r3, #0
 800f45e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2201      	movs	r2, #1
 800f464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00e      	beq.n	800f490 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	6852      	ldr	r2, [r2, #4]
 800f47e:	b2d2      	uxtb	r2, r2
 800f480:	4611      	mov	r1, r2
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	4798      	blx	r3
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d001      	beq.n	800f490 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f48c:	2303      	movs	r3, #3
 800f48e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f490:	7bfb      	ldrb	r3, [r7, #15]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f49a:	b480      	push	{r7}
 800f49c:	b083      	sub	sp, #12
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f4a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	460b      	mov	r3, r1
 800f4be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f4c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f4ce:	b480      	push	{r7}
 800f4d0:	b087      	sub	sp, #28
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f4ec:	8a3b      	ldrh	r3, [r7, #16]
 800f4ee:	021b      	lsls	r3, r3, #8
 800f4f0:	b21a      	sxth	r2, r3
 800f4f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	b21b      	sxth	r3, r3
 800f4fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f4fc:	89fb      	ldrh	r3, [r7, #14]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	371c      	adds	r7, #28
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
	...

0800f50c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f516:	2300      	movs	r3, #0
 800f518:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f522:	2b40      	cmp	r3, #64	; 0x40
 800f524:	d005      	beq.n	800f532 <USBD_StdDevReq+0x26>
 800f526:	2b40      	cmp	r3, #64	; 0x40
 800f528:	d857      	bhi.n	800f5da <USBD_StdDevReq+0xce>
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d00f      	beq.n	800f54e <USBD_StdDevReq+0x42>
 800f52e:	2b20      	cmp	r3, #32
 800f530:	d153      	bne.n	800f5da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	32ae      	adds	r2, #174	; 0xae
 800f53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	6839      	ldr	r1, [r7, #0]
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	4798      	blx	r3
 800f548:	4603      	mov	r3, r0
 800f54a:	73fb      	strb	r3, [r7, #15]
      break;
 800f54c:	e04a      	b.n	800f5e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	785b      	ldrb	r3, [r3, #1]
 800f552:	2b09      	cmp	r3, #9
 800f554:	d83b      	bhi.n	800f5ce <USBD_StdDevReq+0xc2>
 800f556:	a201      	add	r2, pc, #4	; (adr r2, 800f55c <USBD_StdDevReq+0x50>)
 800f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55c:	0800f5b1 	.word	0x0800f5b1
 800f560:	0800f5c5 	.word	0x0800f5c5
 800f564:	0800f5cf 	.word	0x0800f5cf
 800f568:	0800f5bb 	.word	0x0800f5bb
 800f56c:	0800f5cf 	.word	0x0800f5cf
 800f570:	0800f58f 	.word	0x0800f58f
 800f574:	0800f585 	.word	0x0800f585
 800f578:	0800f5cf 	.word	0x0800f5cf
 800f57c:	0800f5a7 	.word	0x0800f5a7
 800f580:	0800f599 	.word	0x0800f599
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f584:	6839      	ldr	r1, [r7, #0]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 fa3c 	bl	800fa04 <USBD_GetDescriptor>
          break;
 800f58c:	e024      	b.n	800f5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f58e:	6839      	ldr	r1, [r7, #0]
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 fba1 	bl	800fcd8 <USBD_SetAddress>
          break;
 800f596:	e01f      	b.n	800f5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f598:	6839      	ldr	r1, [r7, #0]
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 fbe0 	bl	800fd60 <USBD_SetConfig>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	73fb      	strb	r3, [r7, #15]
          break;
 800f5a4:	e018      	b.n	800f5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f5a6:	6839      	ldr	r1, [r7, #0]
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 fc83 	bl	800feb4 <USBD_GetConfig>
          break;
 800f5ae:	e013      	b.n	800f5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f5b0:	6839      	ldr	r1, [r7, #0]
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fcb4 	bl	800ff20 <USBD_GetStatus>
          break;
 800f5b8:	e00e      	b.n	800f5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f5ba:	6839      	ldr	r1, [r7, #0]
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 fce3 	bl	800ff88 <USBD_SetFeature>
          break;
 800f5c2:	e009      	b.n	800f5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fd07 	bl	800ffda <USBD_ClrFeature>
          break;
 800f5cc:	e004      	b.n	800f5d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f5ce:	6839      	ldr	r1, [r7, #0]
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 fd5e 	bl	8010092 <USBD_CtlError>
          break;
 800f5d6:	bf00      	nop
      }
      break;
 800f5d8:	e004      	b.n	800f5e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f5da:	6839      	ldr	r1, [r7, #0]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 fd58 	bl	8010092 <USBD_CtlError>
      break;
 800f5e2:	bf00      	nop
  }

  return ret;
 800f5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3710      	adds	r7, #16
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop

0800f5f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f606:	2b40      	cmp	r3, #64	; 0x40
 800f608:	d005      	beq.n	800f616 <USBD_StdItfReq+0x26>
 800f60a:	2b40      	cmp	r3, #64	; 0x40
 800f60c:	d852      	bhi.n	800f6b4 <USBD_StdItfReq+0xc4>
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d001      	beq.n	800f616 <USBD_StdItfReq+0x26>
 800f612:	2b20      	cmp	r3, #32
 800f614:	d14e      	bne.n	800f6b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	3b01      	subs	r3, #1
 800f620:	2b02      	cmp	r3, #2
 800f622:	d840      	bhi.n	800f6a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	889b      	ldrh	r3, [r3, #4]
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d836      	bhi.n	800f69c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	889b      	ldrh	r3, [r3, #4]
 800f632:	b2db      	uxtb	r3, r3
 800f634:	4619      	mov	r1, r3
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f7ff ff2f 	bl	800f49a <USBD_CoreFindIF>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f640:	7bbb      	ldrb	r3, [r7, #14]
 800f642:	2bff      	cmp	r3, #255	; 0xff
 800f644:	d01d      	beq.n	800f682 <USBD_StdItfReq+0x92>
 800f646:	7bbb      	ldrb	r3, [r7, #14]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d11a      	bne.n	800f682 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f64c:	7bba      	ldrb	r2, [r7, #14]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	32ae      	adds	r2, #174	; 0xae
 800f652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00f      	beq.n	800f67c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f65c:	7bba      	ldrb	r2, [r7, #14]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f664:	7bba      	ldrb	r2, [r7, #14]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	32ae      	adds	r2, #174	; 0xae
 800f66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	4798      	blx	r3
 800f676:	4603      	mov	r3, r0
 800f678:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f67a:	e004      	b.n	800f686 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f67c:	2303      	movs	r3, #3
 800f67e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f680:	e001      	b.n	800f686 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f682:	2303      	movs	r3, #3
 800f684:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	88db      	ldrh	r3, [r3, #6]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d110      	bne.n	800f6b0 <USBD_StdItfReq+0xc0>
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10d      	bne.n	800f6b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 fd4a 	bl	801012e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f69a:	e009      	b.n	800f6b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fcf7 	bl	8010092 <USBD_CtlError>
          break;
 800f6a4:	e004      	b.n	800f6b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 fcf2 	bl	8010092 <USBD_CtlError>
          break;
 800f6ae:	e000      	b.n	800f6b2 <USBD_StdItfReq+0xc2>
          break;
 800f6b0:	bf00      	nop
      }
      break;
 800f6b2:	e004      	b.n	800f6be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fceb 	bl	8010092 <USBD_CtlError>
      break;
 800f6bc:	bf00      	nop
  }

  return ret;
 800f6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	889b      	ldrh	r3, [r3, #4]
 800f6da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6e4:	2b40      	cmp	r3, #64	; 0x40
 800f6e6:	d007      	beq.n	800f6f8 <USBD_StdEPReq+0x30>
 800f6e8:	2b40      	cmp	r3, #64	; 0x40
 800f6ea:	f200 817f 	bhi.w	800f9ec <USBD_StdEPReq+0x324>
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d02a      	beq.n	800f748 <USBD_StdEPReq+0x80>
 800f6f2:	2b20      	cmp	r3, #32
 800f6f4:	f040 817a 	bne.w	800f9ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f6f8:	7bbb      	ldrb	r3, [r7, #14]
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f7ff fed9 	bl	800f4b4 <USBD_CoreFindEP>
 800f702:	4603      	mov	r3, r0
 800f704:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f706:	7b7b      	ldrb	r3, [r7, #13]
 800f708:	2bff      	cmp	r3, #255	; 0xff
 800f70a:	f000 8174 	beq.w	800f9f6 <USBD_StdEPReq+0x32e>
 800f70e:	7b7b      	ldrb	r3, [r7, #13]
 800f710:	2b00      	cmp	r3, #0
 800f712:	f040 8170 	bne.w	800f9f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f716:	7b7a      	ldrb	r2, [r7, #13]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f71e:	7b7a      	ldrb	r2, [r7, #13]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	32ae      	adds	r2, #174	; 0xae
 800f724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f000 8163 	beq.w	800f9f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f730:	7b7a      	ldrb	r2, [r7, #13]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	32ae      	adds	r2, #174	; 0xae
 800f736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	6839      	ldr	r1, [r7, #0]
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	4798      	blx	r3
 800f742:	4603      	mov	r3, r0
 800f744:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f746:	e156      	b.n	800f9f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	785b      	ldrb	r3, [r3, #1]
 800f74c:	2b03      	cmp	r3, #3
 800f74e:	d008      	beq.n	800f762 <USBD_StdEPReq+0x9a>
 800f750:	2b03      	cmp	r3, #3
 800f752:	f300 8145 	bgt.w	800f9e0 <USBD_StdEPReq+0x318>
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 809b 	beq.w	800f892 <USBD_StdEPReq+0x1ca>
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d03c      	beq.n	800f7da <USBD_StdEPReq+0x112>
 800f760:	e13e      	b.n	800f9e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	2b02      	cmp	r3, #2
 800f76c:	d002      	beq.n	800f774 <USBD_StdEPReq+0xac>
 800f76e:	2b03      	cmp	r3, #3
 800f770:	d016      	beq.n	800f7a0 <USBD_StdEPReq+0xd8>
 800f772:	e02c      	b.n	800f7ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f774:	7bbb      	ldrb	r3, [r7, #14]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d00d      	beq.n	800f796 <USBD_StdEPReq+0xce>
 800f77a:	7bbb      	ldrb	r3, [r7, #14]
 800f77c:	2b80      	cmp	r3, #128	; 0x80
 800f77e:	d00a      	beq.n	800f796 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f780:	7bbb      	ldrb	r3, [r7, #14]
 800f782:	4619      	mov	r1, r3
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f002 fcd1 	bl	801212c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f78a:	2180      	movs	r1, #128	; 0x80
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f002 fccd 	bl	801212c <USBD_LL_StallEP>
 800f792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f794:	e020      	b.n	800f7d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f796:	6839      	ldr	r1, [r7, #0]
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f000 fc7a 	bl	8010092 <USBD_CtlError>
              break;
 800f79e:	e01b      	b.n	800f7d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	885b      	ldrh	r3, [r3, #2]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d10e      	bne.n	800f7c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f7a8:	7bbb      	ldrb	r3, [r7, #14]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00b      	beq.n	800f7c6 <USBD_StdEPReq+0xfe>
 800f7ae:	7bbb      	ldrb	r3, [r7, #14]
 800f7b0:	2b80      	cmp	r3, #128	; 0x80
 800f7b2:	d008      	beq.n	800f7c6 <USBD_StdEPReq+0xfe>
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	88db      	ldrh	r3, [r3, #6]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d104      	bne.n	800f7c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7bc:	7bbb      	ldrb	r3, [r7, #14]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f002 fcb3 	bl	801212c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fcb1 	bl	801012e <USBD_CtlSendStatus>

              break;
 800f7cc:	e004      	b.n	800f7d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f7ce:	6839      	ldr	r1, [r7, #0]
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f000 fc5e 	bl	8010092 <USBD_CtlError>
              break;
 800f7d6:	bf00      	nop
          }
          break;
 800f7d8:	e107      	b.n	800f9ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2b02      	cmp	r3, #2
 800f7e4:	d002      	beq.n	800f7ec <USBD_StdEPReq+0x124>
 800f7e6:	2b03      	cmp	r3, #3
 800f7e8:	d016      	beq.n	800f818 <USBD_StdEPReq+0x150>
 800f7ea:	e04b      	b.n	800f884 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7ec:	7bbb      	ldrb	r3, [r7, #14]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00d      	beq.n	800f80e <USBD_StdEPReq+0x146>
 800f7f2:	7bbb      	ldrb	r3, [r7, #14]
 800f7f4:	2b80      	cmp	r3, #128	; 0x80
 800f7f6:	d00a      	beq.n	800f80e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7f8:	7bbb      	ldrb	r3, [r7, #14]
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f002 fc95 	bl	801212c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f802:	2180      	movs	r1, #128	; 0x80
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f002 fc91 	bl	801212c <USBD_LL_StallEP>
 800f80a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f80c:	e040      	b.n	800f890 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f80e:	6839      	ldr	r1, [r7, #0]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 fc3e 	bl	8010092 <USBD_CtlError>
              break;
 800f816:	e03b      	b.n	800f890 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	885b      	ldrh	r3, [r3, #2]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d136      	bne.n	800f88e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f820:	7bbb      	ldrb	r3, [r7, #14]
 800f822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f826:	2b00      	cmp	r3, #0
 800f828:	d004      	beq.n	800f834 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f82a:	7bbb      	ldrb	r3, [r7, #14]
 800f82c:	4619      	mov	r1, r3
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f002 fc9b 	bl	801216a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f000 fc7a 	bl	801012e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f83a:	7bbb      	ldrb	r3, [r7, #14]
 800f83c:	4619      	mov	r1, r3
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7ff fe38 	bl	800f4b4 <USBD_CoreFindEP>
 800f844:	4603      	mov	r3, r0
 800f846:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f848:	7b7b      	ldrb	r3, [r7, #13]
 800f84a:	2bff      	cmp	r3, #255	; 0xff
 800f84c:	d01f      	beq.n	800f88e <USBD_StdEPReq+0x1c6>
 800f84e:	7b7b      	ldrb	r3, [r7, #13]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d11c      	bne.n	800f88e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f854:	7b7a      	ldrb	r2, [r7, #13]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f85c:	7b7a      	ldrb	r2, [r7, #13]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	32ae      	adds	r2, #174	; 0xae
 800f862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d010      	beq.n	800f88e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f86c:	7b7a      	ldrb	r2, [r7, #13]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	32ae      	adds	r2, #174	; 0xae
 800f872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	6839      	ldr	r1, [r7, #0]
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	4798      	blx	r3
 800f87e:	4603      	mov	r3, r0
 800f880:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f882:	e004      	b.n	800f88e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 fc03 	bl	8010092 <USBD_CtlError>
              break;
 800f88c:	e000      	b.n	800f890 <USBD_StdEPReq+0x1c8>
              break;
 800f88e:	bf00      	nop
          }
          break;
 800f890:	e0ab      	b.n	800f9ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b02      	cmp	r3, #2
 800f89c:	d002      	beq.n	800f8a4 <USBD_StdEPReq+0x1dc>
 800f89e:	2b03      	cmp	r3, #3
 800f8a0:	d032      	beq.n	800f908 <USBD_StdEPReq+0x240>
 800f8a2:	e097      	b.n	800f9d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8a4:	7bbb      	ldrb	r3, [r7, #14]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d007      	beq.n	800f8ba <USBD_StdEPReq+0x1f2>
 800f8aa:	7bbb      	ldrb	r3, [r7, #14]
 800f8ac:	2b80      	cmp	r3, #128	; 0x80
 800f8ae:	d004      	beq.n	800f8ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f8b0:	6839      	ldr	r1, [r7, #0]
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 fbed 	bl	8010092 <USBD_CtlError>
                break;
 800f8b8:	e091      	b.n	800f9de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	da0b      	bge.n	800f8da <USBD_StdEPReq+0x212>
 800f8c2:	7bbb      	ldrb	r3, [r7, #14]
 800f8c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	4413      	add	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	3310      	adds	r3, #16
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	e00b      	b.n	800f8f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f8da:	7bbb      	ldrb	r3, [r7, #14]
 800f8dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	4413      	add	r3, r2
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	3304      	adds	r3, #4
 800f8f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	2202      	movs	r2, #2
 800f8fe:	4619      	mov	r1, r3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f000 fbd7 	bl	80100b4 <USBD_CtlSendData>
              break;
 800f906:	e06a      	b.n	800f9de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	da11      	bge.n	800f934 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f910:	7bbb      	ldrb	r3, [r7, #14]
 800f912:	f003 020f 	and.w	r2, r3, #15
 800f916:	6879      	ldr	r1, [r7, #4]
 800f918:	4613      	mov	r3, r2
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	4413      	add	r3, r2
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	440b      	add	r3, r1
 800f922:	3324      	adds	r3, #36	; 0x24
 800f924:	881b      	ldrh	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d117      	bne.n	800f95a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f92a:	6839      	ldr	r1, [r7, #0]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fbb0 	bl	8010092 <USBD_CtlError>
                  break;
 800f932:	e054      	b.n	800f9de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f934:	7bbb      	ldrb	r3, [r7, #14]
 800f936:	f003 020f 	and.w	r2, r3, #15
 800f93a:	6879      	ldr	r1, [r7, #4]
 800f93c:	4613      	mov	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4413      	add	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	440b      	add	r3, r1
 800f946:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d104      	bne.n	800f95a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f950:	6839      	ldr	r1, [r7, #0]
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 fb9d 	bl	8010092 <USBD_CtlError>
                  break;
 800f958:	e041      	b.n	800f9de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f95a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	da0b      	bge.n	800f97a <USBD_StdEPReq+0x2b2>
 800f962:	7bbb      	ldrb	r3, [r7, #14]
 800f964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f968:	4613      	mov	r3, r2
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	4413      	add	r3, r2
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	3310      	adds	r3, #16
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	4413      	add	r3, r2
 800f976:	3304      	adds	r3, #4
 800f978:	e00b      	b.n	800f992 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f97a:	7bbb      	ldrb	r3, [r7, #14]
 800f97c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f980:	4613      	mov	r3, r2
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	4413      	add	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	4413      	add	r3, r2
 800f990:	3304      	adds	r3, #4
 800f992:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f994:	7bbb      	ldrb	r3, [r7, #14]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d002      	beq.n	800f9a0 <USBD_StdEPReq+0x2d8>
 800f99a:	7bbb      	ldrb	r3, [r7, #14]
 800f99c:	2b80      	cmp	r3, #128	; 0x80
 800f99e:	d103      	bne.n	800f9a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	601a      	str	r2, [r3, #0]
 800f9a6:	e00e      	b.n	800f9c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f9a8:	7bbb      	ldrb	r3, [r7, #14]
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f002 fbfb 	bl	80121a8 <USBD_LL_IsStallEP>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d003      	beq.n	800f9c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	601a      	str	r2, [r3, #0]
 800f9be:	e002      	b.n	800f9c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	2202      	movs	r2, #2
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 fb71 	bl	80100b4 <USBD_CtlSendData>
              break;
 800f9d2:	e004      	b.n	800f9de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f9d4:	6839      	ldr	r1, [r7, #0]
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 fb5b 	bl	8010092 <USBD_CtlError>
              break;
 800f9dc:	bf00      	nop
          }
          break;
 800f9de:	e004      	b.n	800f9ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 fb55 	bl	8010092 <USBD_CtlError>
          break;
 800f9e8:	bf00      	nop
      }
      break;
 800f9ea:	e005      	b.n	800f9f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f9ec:	6839      	ldr	r1, [r7, #0]
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 fb4f 	bl	8010092 <USBD_CtlError>
      break;
 800f9f4:	e000      	b.n	800f9f8 <USBD_StdEPReq+0x330>
      break;
 800f9f6:	bf00      	nop
  }

  return ret;
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3710      	adds	r7, #16
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
	...

0800fa04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fa12:	2300      	movs	r3, #0
 800fa14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fa16:	2300      	movs	r3, #0
 800fa18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	885b      	ldrh	r3, [r3, #2]
 800fa1e:	0a1b      	lsrs	r3, r3, #8
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	3b01      	subs	r3, #1
 800fa24:	2b06      	cmp	r3, #6
 800fa26:	f200 8128 	bhi.w	800fc7a <USBD_GetDescriptor+0x276>
 800fa2a:	a201      	add	r2, pc, #4	; (adr r2, 800fa30 <USBD_GetDescriptor+0x2c>)
 800fa2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa30:	0800fa4d 	.word	0x0800fa4d
 800fa34:	0800fa65 	.word	0x0800fa65
 800fa38:	0800faa5 	.word	0x0800faa5
 800fa3c:	0800fc7b 	.word	0x0800fc7b
 800fa40:	0800fc7b 	.word	0x0800fc7b
 800fa44:	0800fc1b 	.word	0x0800fc1b
 800fa48:	0800fc47 	.word	0x0800fc47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	7c12      	ldrb	r2, [r2, #16]
 800fa58:	f107 0108 	add.w	r1, r7, #8
 800fa5c:	4610      	mov	r0, r2
 800fa5e:	4798      	blx	r3
 800fa60:	60f8      	str	r0, [r7, #12]
      break;
 800fa62:	e112      	b.n	800fc8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	7c1b      	ldrb	r3, [r3, #16]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10d      	bne.n	800fa88 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa74:	f107 0208 	add.w	r2, r7, #8
 800fa78:	4610      	mov	r0, r2
 800fa7a:	4798      	blx	r3
 800fa7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	3301      	adds	r3, #1
 800fa82:	2202      	movs	r2, #2
 800fa84:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fa86:	e100      	b.n	800fc8a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa90:	f107 0208 	add.w	r2, r7, #8
 800fa94:	4610      	mov	r0, r2
 800fa96:	4798      	blx	r3
 800fa98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	2202      	movs	r2, #2
 800faa0:	701a      	strb	r2, [r3, #0]
      break;
 800faa2:	e0f2      	b.n	800fc8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	885b      	ldrh	r3, [r3, #2]
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	2b05      	cmp	r3, #5
 800faac:	f200 80ac 	bhi.w	800fc08 <USBD_GetDescriptor+0x204>
 800fab0:	a201      	add	r2, pc, #4	; (adr r2, 800fab8 <USBD_GetDescriptor+0xb4>)
 800fab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab6:	bf00      	nop
 800fab8:	0800fad1 	.word	0x0800fad1
 800fabc:	0800fb05 	.word	0x0800fb05
 800fac0:	0800fb39 	.word	0x0800fb39
 800fac4:	0800fb6d 	.word	0x0800fb6d
 800fac8:	0800fba1 	.word	0x0800fba1
 800facc:	0800fbd5 	.word	0x0800fbd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00b      	beq.n	800faf4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	7c12      	ldrb	r2, [r2, #16]
 800fae8:	f107 0108 	add.w	r1, r7, #8
 800faec:	4610      	mov	r0, r2
 800faee:	4798      	blx	r3
 800faf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800faf2:	e091      	b.n	800fc18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 facb 	bl	8010092 <USBD_CtlError>
            err++;
 800fafc:	7afb      	ldrb	r3, [r7, #11]
 800fafe:	3301      	adds	r3, #1
 800fb00:	72fb      	strb	r3, [r7, #11]
          break;
 800fb02:	e089      	b.n	800fc18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00b      	beq.n	800fb28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb16:	689b      	ldr	r3, [r3, #8]
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	7c12      	ldrb	r2, [r2, #16]
 800fb1c:	f107 0108 	add.w	r1, r7, #8
 800fb20:	4610      	mov	r0, r2
 800fb22:	4798      	blx	r3
 800fb24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb26:	e077      	b.n	800fc18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb28:	6839      	ldr	r1, [r7, #0]
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f000 fab1 	bl	8010092 <USBD_CtlError>
            err++;
 800fb30:	7afb      	ldrb	r3, [r7, #11]
 800fb32:	3301      	adds	r3, #1
 800fb34:	72fb      	strb	r3, [r7, #11]
          break;
 800fb36:	e06f      	b.n	800fc18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00b      	beq.n	800fb5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	7c12      	ldrb	r2, [r2, #16]
 800fb50:	f107 0108 	add.w	r1, r7, #8
 800fb54:	4610      	mov	r0, r2
 800fb56:	4798      	blx	r3
 800fb58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb5a:	e05d      	b.n	800fc18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 fa97 	bl	8010092 <USBD_CtlError>
            err++;
 800fb64:	7afb      	ldrb	r3, [r7, #11]
 800fb66:	3301      	adds	r3, #1
 800fb68:	72fb      	strb	r3, [r7, #11]
          break;
 800fb6a:	e055      	b.n	800fc18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb72:	691b      	ldr	r3, [r3, #16]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d00b      	beq.n	800fb90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	7c12      	ldrb	r2, [r2, #16]
 800fb84:	f107 0108 	add.w	r1, r7, #8
 800fb88:	4610      	mov	r0, r2
 800fb8a:	4798      	blx	r3
 800fb8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb8e:	e043      	b.n	800fc18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb90:	6839      	ldr	r1, [r7, #0]
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 fa7d 	bl	8010092 <USBD_CtlError>
            err++;
 800fb98:	7afb      	ldrb	r3, [r7, #11]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	72fb      	strb	r3, [r7, #11]
          break;
 800fb9e:	e03b      	b.n	800fc18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fba6:	695b      	ldr	r3, [r3, #20]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d00b      	beq.n	800fbc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbb2:	695b      	ldr	r3, [r3, #20]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	7c12      	ldrb	r2, [r2, #16]
 800fbb8:	f107 0108 	add.w	r1, r7, #8
 800fbbc:	4610      	mov	r0, r2
 800fbbe:	4798      	blx	r3
 800fbc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbc2:	e029      	b.n	800fc18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fbc4:	6839      	ldr	r1, [r7, #0]
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 fa63 	bl	8010092 <USBD_CtlError>
            err++;
 800fbcc:	7afb      	ldrb	r3, [r7, #11]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	72fb      	strb	r3, [r7, #11]
          break;
 800fbd2:	e021      	b.n	800fc18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbda:	699b      	ldr	r3, [r3, #24]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d00b      	beq.n	800fbf8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	7c12      	ldrb	r2, [r2, #16]
 800fbec:	f107 0108 	add.w	r1, r7, #8
 800fbf0:	4610      	mov	r0, r2
 800fbf2:	4798      	blx	r3
 800fbf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbf6:	e00f      	b.n	800fc18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fbf8:	6839      	ldr	r1, [r7, #0]
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 fa49 	bl	8010092 <USBD_CtlError>
            err++;
 800fc00:	7afb      	ldrb	r3, [r7, #11]
 800fc02:	3301      	adds	r3, #1
 800fc04:	72fb      	strb	r3, [r7, #11]
          break;
 800fc06:	e007      	b.n	800fc18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fc08:	6839      	ldr	r1, [r7, #0]
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fa41 	bl	8010092 <USBD_CtlError>
          err++;
 800fc10:	7afb      	ldrb	r3, [r7, #11]
 800fc12:	3301      	adds	r3, #1
 800fc14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fc16:	bf00      	nop
      }
      break;
 800fc18:	e037      	b.n	800fc8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	7c1b      	ldrb	r3, [r3, #16]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d109      	bne.n	800fc36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc2a:	f107 0208 	add.w	r2, r7, #8
 800fc2e:	4610      	mov	r0, r2
 800fc30:	4798      	blx	r3
 800fc32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc34:	e029      	b.n	800fc8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fc36:	6839      	ldr	r1, [r7, #0]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 fa2a 	bl	8010092 <USBD_CtlError>
        err++;
 800fc3e:	7afb      	ldrb	r3, [r7, #11]
 800fc40:	3301      	adds	r3, #1
 800fc42:	72fb      	strb	r3, [r7, #11]
      break;
 800fc44:	e021      	b.n	800fc8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	7c1b      	ldrb	r3, [r3, #16]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d10d      	bne.n	800fc6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc56:	f107 0208 	add.w	r2, r7, #8
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	4798      	blx	r3
 800fc5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	3301      	adds	r3, #1
 800fc64:	2207      	movs	r2, #7
 800fc66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc68:	e00f      	b.n	800fc8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fc6a:	6839      	ldr	r1, [r7, #0]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 fa10 	bl	8010092 <USBD_CtlError>
        err++;
 800fc72:	7afb      	ldrb	r3, [r7, #11]
 800fc74:	3301      	adds	r3, #1
 800fc76:	72fb      	strb	r3, [r7, #11]
      break;
 800fc78:	e007      	b.n	800fc8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fc7a:	6839      	ldr	r1, [r7, #0]
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 fa08 	bl	8010092 <USBD_CtlError>
      err++;
 800fc82:	7afb      	ldrb	r3, [r7, #11]
 800fc84:	3301      	adds	r3, #1
 800fc86:	72fb      	strb	r3, [r7, #11]
      break;
 800fc88:	bf00      	nop
  }

  if (err != 0U)
 800fc8a:	7afb      	ldrb	r3, [r7, #11]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d11e      	bne.n	800fcce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	88db      	ldrh	r3, [r3, #6]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d016      	beq.n	800fcc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fc98:	893b      	ldrh	r3, [r7, #8]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d00e      	beq.n	800fcbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	88da      	ldrh	r2, [r3, #6]
 800fca2:	893b      	ldrh	r3, [r7, #8]
 800fca4:	4293      	cmp	r3, r2
 800fca6:	bf28      	it	cs
 800fca8:	4613      	movcs	r3, r2
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fcae:	893b      	ldrh	r3, [r7, #8]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	68f9      	ldr	r1, [r7, #12]
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 f9fd 	bl	80100b4 <USBD_CtlSendData>
 800fcba:	e009      	b.n	800fcd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fcbc:	6839      	ldr	r1, [r7, #0]
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 f9e7 	bl	8010092 <USBD_CtlError>
 800fcc4:	e004      	b.n	800fcd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 fa31 	bl	801012e <USBD_CtlSendStatus>
 800fccc:	e000      	b.n	800fcd0 <USBD_GetDescriptor+0x2cc>
    return;
 800fcce:	bf00      	nop
  }
}
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop

0800fcd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	889b      	ldrh	r3, [r3, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d131      	bne.n	800fd4e <USBD_SetAddress+0x76>
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	88db      	ldrh	r3, [r3, #6]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d12d      	bne.n	800fd4e <USBD_SetAddress+0x76>
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	885b      	ldrh	r3, [r3, #2]
 800fcf6:	2b7f      	cmp	r3, #127	; 0x7f
 800fcf8:	d829      	bhi.n	800fd4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	885b      	ldrh	r3, [r3, #2]
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2b03      	cmp	r3, #3
 800fd10:	d104      	bne.n	800fd1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fd12:	6839      	ldr	r1, [r7, #0]
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 f9bc 	bl	8010092 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd1a:	e01d      	b.n	800fd58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	7bfa      	ldrb	r2, [r7, #15]
 800fd20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fd24:	7bfb      	ldrb	r3, [r7, #15]
 800fd26:	4619      	mov	r1, r3
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f002 fa69 	bl	8012200 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 f9fd 	bl	801012e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d004      	beq.n	800fd44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2202      	movs	r2, #2
 800fd3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd42:	e009      	b.n	800fd58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2201      	movs	r2, #1
 800fd48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd4c:	e004      	b.n	800fd58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fd4e:	6839      	ldr	r1, [r7, #0]
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 f99e 	bl	8010092 <USBD_CtlError>
  }
}
 800fd56:	bf00      	nop
 800fd58:	bf00      	nop
 800fd5a:	3710      	adds	r7, #16
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b084      	sub	sp, #16
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	885b      	ldrh	r3, [r3, #2]
 800fd72:	b2da      	uxtb	r2, r3
 800fd74:	4b4e      	ldr	r3, [pc, #312]	; (800feb0 <USBD_SetConfig+0x150>)
 800fd76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd78:	4b4d      	ldr	r3, [pc, #308]	; (800feb0 <USBD_SetConfig+0x150>)
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d905      	bls.n	800fd8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fd80:	6839      	ldr	r1, [r7, #0]
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 f985 	bl	8010092 <USBD_CtlError>
    return USBD_FAIL;
 800fd88:	2303      	movs	r3, #3
 800fd8a:	e08c      	b.n	800fea6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	2b02      	cmp	r3, #2
 800fd96:	d002      	beq.n	800fd9e <USBD_SetConfig+0x3e>
 800fd98:	2b03      	cmp	r3, #3
 800fd9a:	d029      	beq.n	800fdf0 <USBD_SetConfig+0x90>
 800fd9c:	e075      	b.n	800fe8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fd9e:	4b44      	ldr	r3, [pc, #272]	; (800feb0 <USBD_SetConfig+0x150>)
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d020      	beq.n	800fde8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fda6:	4b42      	ldr	r3, [pc, #264]	; (800feb0 <USBD_SetConfig+0x150>)
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fdb0:	4b3f      	ldr	r3, [pc, #252]	; (800feb0 <USBD_SetConfig+0x150>)
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7ff f83d 	bl	800ee36 <USBD_SetClassConfig>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fdc0:	7bfb      	ldrb	r3, [r7, #15]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d008      	beq.n	800fdd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fdc6:	6839      	ldr	r1, [r7, #0]
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 f962 	bl	8010092 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2202      	movs	r2, #2
 800fdd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fdd6:	e065      	b.n	800fea4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 f9a8 	bl	801012e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2203      	movs	r2, #3
 800fde2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fde6:	e05d      	b.n	800fea4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 f9a0 	bl	801012e <USBD_CtlSendStatus>
      break;
 800fdee:	e059      	b.n	800fea4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fdf0:	4b2f      	ldr	r3, [pc, #188]	; (800feb0 <USBD_SetConfig+0x150>)
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d112      	bne.n	800fe1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2202      	movs	r2, #2
 800fdfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fe00:	4b2b      	ldr	r3, [pc, #172]	; (800feb0 <USBD_SetConfig+0x150>)
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	461a      	mov	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe0a:	4b29      	ldr	r3, [pc, #164]	; (800feb0 <USBD_SetConfig+0x150>)
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	4619      	mov	r1, r3
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f7ff f82c 	bl	800ee6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 f989 	bl	801012e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fe1c:	e042      	b.n	800fea4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fe1e:	4b24      	ldr	r3, [pc, #144]	; (800feb0 <USBD_SetConfig+0x150>)
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	461a      	mov	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d02a      	beq.n	800fe82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	4619      	mov	r1, r3
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7ff f81a 	bl	800ee6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fe3a:	4b1d      	ldr	r3, [pc, #116]	; (800feb0 <USBD_SetConfig+0x150>)
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	461a      	mov	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe44:	4b1a      	ldr	r3, [pc, #104]	; (800feb0 <USBD_SetConfig+0x150>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	4619      	mov	r1, r3
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7fe fff3 	bl	800ee36 <USBD_SetClassConfig>
 800fe50:	4603      	mov	r3, r0
 800fe52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d00f      	beq.n	800fe7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fe5a:	6839      	ldr	r1, [r7, #0]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f918 	bl	8010092 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	4619      	mov	r1, r3
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7fe ffff 	bl	800ee6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2202      	movs	r2, #2
 800fe74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fe78:	e014      	b.n	800fea4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f000 f957 	bl	801012e <USBD_CtlSendStatus>
      break;
 800fe80:	e010      	b.n	800fea4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 f953 	bl	801012e <USBD_CtlSendStatus>
      break;
 800fe88:	e00c      	b.n	800fea4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fe8a:	6839      	ldr	r1, [r7, #0]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f000 f900 	bl	8010092 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe92:	4b07      	ldr	r3, [pc, #28]	; (800feb0 <USBD_SetConfig+0x150>)
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	4619      	mov	r1, r3
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f7fe ffe8 	bl	800ee6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fe9e:	2303      	movs	r3, #3
 800fea0:	73fb      	strb	r3, [r7, #15]
      break;
 800fea2:	bf00      	nop
  }

  return ret;
 800fea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	20000d28 	.word	0x20000d28

0800feb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	88db      	ldrh	r3, [r3, #6]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d004      	beq.n	800fed0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fec6:	6839      	ldr	r1, [r7, #0]
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 f8e2 	bl	8010092 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fece:	e023      	b.n	800ff18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	2b02      	cmp	r3, #2
 800feda:	dc02      	bgt.n	800fee2 <USBD_GetConfig+0x2e>
 800fedc:	2b00      	cmp	r3, #0
 800fede:	dc03      	bgt.n	800fee8 <USBD_GetConfig+0x34>
 800fee0:	e015      	b.n	800ff0e <USBD_GetConfig+0x5a>
 800fee2:	2b03      	cmp	r3, #3
 800fee4:	d00b      	beq.n	800fefe <USBD_GetConfig+0x4a>
 800fee6:	e012      	b.n	800ff0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	3308      	adds	r3, #8
 800fef2:	2201      	movs	r2, #1
 800fef4:	4619      	mov	r1, r3
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 f8dc 	bl	80100b4 <USBD_CtlSendData>
        break;
 800fefc:	e00c      	b.n	800ff18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	3304      	adds	r3, #4
 800ff02:	2201      	movs	r2, #1
 800ff04:	4619      	mov	r1, r3
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f8d4 	bl	80100b4 <USBD_CtlSendData>
        break;
 800ff0c:	e004      	b.n	800ff18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ff0e:	6839      	ldr	r1, [r7, #0]
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 f8be 	bl	8010092 <USBD_CtlError>
        break;
 800ff16:	bf00      	nop
}
 800ff18:	bf00      	nop
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}

0800ff20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	3b01      	subs	r3, #1
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	d81e      	bhi.n	800ff76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	88db      	ldrh	r3, [r3, #6]
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d004      	beq.n	800ff4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ff40:	6839      	ldr	r1, [r7, #0]
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 f8a5 	bl	8010092 <USBD_CtlError>
        break;
 800ff48:	e01a      	b.n	800ff80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d005      	beq.n	800ff66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	68db      	ldr	r3, [r3, #12]
 800ff5e:	f043 0202 	orr.w	r2, r3, #2
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	330c      	adds	r3, #12
 800ff6a:	2202      	movs	r2, #2
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f000 f8a0 	bl	80100b4 <USBD_CtlSendData>
      break;
 800ff74:	e004      	b.n	800ff80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ff76:	6839      	ldr	r1, [r7, #0]
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 f88a 	bl	8010092 <USBD_CtlError>
      break;
 800ff7e:	bf00      	nop
  }
}
 800ff80:	bf00      	nop
 800ff82:	3708      	adds	r7, #8
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	885b      	ldrh	r3, [r3, #2]
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d107      	bne.n	800ffaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f000 f8c3 	bl	801012e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ffa8:	e013      	b.n	800ffd2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	885b      	ldrh	r3, [r3, #2]
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	d10b      	bne.n	800ffca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	889b      	ldrh	r3, [r3, #4]
 800ffb6:	0a1b      	lsrs	r3, r3, #8
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	b2da      	uxtb	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 f8b3 	bl	801012e <USBD_CtlSendStatus>
}
 800ffc8:	e003      	b.n	800ffd2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ffca:	6839      	ldr	r1, [r7, #0]
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f000 f860 	bl	8010092 <USBD_CtlError>
}
 800ffd2:	bf00      	nop
 800ffd4:	3708      	adds	r7, #8
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}

0800ffda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffda:	b580      	push	{r7, lr}
 800ffdc:	b082      	sub	sp, #8
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
 800ffe2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	3b01      	subs	r3, #1
 800ffee:	2b02      	cmp	r3, #2
 800fff0:	d80b      	bhi.n	801000a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	885b      	ldrh	r3, [r3, #2]
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d10c      	bne.n	8010014 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 f893 	bl	801012e <USBD_CtlSendStatus>
      }
      break;
 8010008:	e004      	b.n	8010014 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801000a:	6839      	ldr	r1, [r7, #0]
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 f840 	bl	8010092 <USBD_CtlError>
      break;
 8010012:	e000      	b.n	8010016 <USBD_ClrFeature+0x3c>
      break;
 8010014:	bf00      	nop
  }
}
 8010016:	bf00      	nop
 8010018:	3708      	adds	r7, #8
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b084      	sub	sp, #16
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
 8010026:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	781a      	ldrb	r2, [r3, #0]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	3301      	adds	r3, #1
 8010038:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	781a      	ldrb	r2, [r3, #0]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3301      	adds	r3, #1
 8010046:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f7ff fa40 	bl	800f4ce <SWAPBYTE>
 801004e:	4603      	mov	r3, r0
 8010050:	461a      	mov	r2, r3
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	3301      	adds	r3, #1
 801005a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	3301      	adds	r3, #1
 8010060:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7ff fa33 	bl	800f4ce <SWAPBYTE>
 8010068:	4603      	mov	r3, r0
 801006a:	461a      	mov	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	3301      	adds	r3, #1
 8010074:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	3301      	adds	r3, #1
 801007a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801007c:	68f8      	ldr	r0, [r7, #12]
 801007e:	f7ff fa26 	bl	800f4ce <SWAPBYTE>
 8010082:	4603      	mov	r3, r0
 8010084:	461a      	mov	r2, r3
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	80da      	strh	r2, [r3, #6]
}
 801008a:	bf00      	nop
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b082      	sub	sp, #8
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801009c:	2180      	movs	r1, #128	; 0x80
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f002 f844 	bl	801212c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80100a4:	2100      	movs	r1, #0
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f002 f840 	bl	801212c <USBD_LL_StallEP>
}
 80100ac:	bf00      	nop
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2202      	movs	r2, #2
 80100c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	68ba      	ldr	r2, [r7, #8]
 80100d8:	2100      	movs	r1, #0
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	f002 f8af 	bl	801223e <USBD_LL_Transmit>

  return USBD_OK;
 80100e0:	2300      	movs	r3, #0
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b084      	sub	sp, #16
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	60f8      	str	r0, [r7, #12]
 80100f2:	60b9      	str	r1, [r7, #8]
 80100f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	2100      	movs	r1, #0
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f002 f89e 	bl	801223e <USBD_LL_Transmit>

  return USBD_OK;
 8010102:	2300      	movs	r3, #0
}
 8010104:	4618      	mov	r0, r3
 8010106:	3710      	adds	r7, #16
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	68ba      	ldr	r2, [r7, #8]
 801011c:	2100      	movs	r1, #0
 801011e:	68f8      	ldr	r0, [r7, #12]
 8010120:	f002 f8ae 	bl	8012280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010124:	2300      	movs	r3, #0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b082      	sub	sp, #8
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2204      	movs	r2, #4
 801013a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801013e:	2300      	movs	r3, #0
 8010140:	2200      	movs	r2, #0
 8010142:	2100      	movs	r1, #0
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f002 f87a 	bl	801223e <USBD_LL_Transmit>

  return USBD_OK;
 801014a:	2300      	movs	r3, #0
}
 801014c:	4618      	mov	r0, r3
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2205      	movs	r2, #5
 8010160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010164:	2300      	movs	r3, #0
 8010166:	2200      	movs	r2, #0
 8010168:	2100      	movs	r1, #0
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f002 f888 	bl	8012280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010170:	2300      	movs	r3, #0
}
 8010172:	4618      	mov	r0, r3
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801017a:	b480      	push	{r7}
 801017c:	b083      	sub	sp, #12
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f103 0208 	add.w	r2, r3, #8
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f04f 32ff 	mov.w	r2, #4294967295
 8010192:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f103 0208 	add.w	r2, r3, #8
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f103 0208 	add.w	r2, r3, #8
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80101ae:	bf00      	nop
 80101b0:	370c      	adds	r7, #12
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80101ba:	b480      	push	{r7}
 80101bc:	b083      	sub	sp, #12
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2200      	movs	r2, #0
 80101c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80101c8:	bf00      	nop
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	68fa      	ldr	r2, [r7, #12]
 80101e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	689a      	ldr	r2, [r3, #8]
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	683a      	ldr	r2, [r7, #0]
 80101f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	683a      	ldr	r2, [r7, #0]
 80101fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	1c5a      	adds	r2, r3, #1
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	601a      	str	r2, [r3, #0]
}
 8010210:	bf00      	nop
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801021c:	b480      	push	{r7}
 801021e:	b085      	sub	sp, #20
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010232:	d103      	bne.n	801023c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	60fb      	str	r3, [r7, #12]
 801023a:	e00c      	b.n	8010256 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3308      	adds	r3, #8
 8010240:	60fb      	str	r3, [r7, #12]
 8010242:	e002      	b.n	801024a <vListInsert+0x2e>
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	60fb      	str	r3, [r7, #12]
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	68ba      	ldr	r2, [r7, #8]
 8010252:	429a      	cmp	r2, r3
 8010254:	d2f6      	bcs.n	8010244 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	685a      	ldr	r2, [r3, #4]
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	683a      	ldr	r2, [r7, #0]
 8010264:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	68fa      	ldr	r2, [r7, #12]
 801026a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	683a      	ldr	r2, [r7, #0]
 8010270:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	1c5a      	adds	r2, r3, #1
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	601a      	str	r2, [r3, #0]
}
 8010282:	bf00      	nop
 8010284:	3714      	adds	r7, #20
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr

0801028e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801028e:	b480      	push	{r7}
 8010290:	b085      	sub	sp, #20
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	691b      	ldr	r3, [r3, #16]
 801029a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	6892      	ldr	r2, [r2, #8]
 80102a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	6852      	ldr	r2, [r2, #4]
 80102ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	687a      	ldr	r2, [r7, #4]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d103      	bne.n	80102c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	689a      	ldr	r2, [r3, #8]
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2200      	movs	r2, #0
 80102c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	1e5a      	subs	r2, r3, #1
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3714      	adds	r7, #20
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr
	...

080102e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10a      	bne.n	801030e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80102f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801030a:	bf00      	nop
 801030c:	e7fe      	b.n	801030c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801030e:	f001 fae9 	bl	80118e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801031a:	68f9      	ldr	r1, [r7, #12]
 801031c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801031e:	fb01 f303 	mul.w	r3, r1, r3
 8010322:	441a      	add	r2, r3
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	2200      	movs	r2, #0
 801032c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801033e:	3b01      	subs	r3, #1
 8010340:	68f9      	ldr	r1, [r7, #12]
 8010342:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010344:	fb01 f303 	mul.w	r3, r1, r3
 8010348:	441a      	add	r2, r3
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	22ff      	movs	r2, #255	; 0xff
 8010352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	22ff      	movs	r2, #255	; 0xff
 801035a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d114      	bne.n	801038e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	691b      	ldr	r3, [r3, #16]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d01a      	beq.n	80103a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	3310      	adds	r3, #16
 8010370:	4618      	mov	r0, r3
 8010372:	f000 fec1 	bl	80110f8 <xTaskRemoveFromEventList>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d012      	beq.n	80103a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801037c:	4b0c      	ldr	r3, [pc, #48]	; (80103b0 <xQueueGenericReset+0xcc>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	e009      	b.n	80103a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	3310      	adds	r3, #16
 8010392:	4618      	mov	r0, r3
 8010394:	f7ff fef1 	bl	801017a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	3324      	adds	r3, #36	; 0x24
 801039c:	4618      	mov	r0, r3
 801039e:	f7ff feec 	bl	801017a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80103a2:	f001 facf 	bl	8011944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80103a6:	2301      	movs	r3, #1
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3710      	adds	r7, #16
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	e000ed04 	.word	0xe000ed04

080103b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b08a      	sub	sp, #40	; 0x28
 80103b8:	af02      	add	r7, sp, #8
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	4613      	mov	r3, r2
 80103c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d10a      	bne.n	80103de <xQueueGenericCreate+0x2a>
	__asm volatile
 80103c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103cc:	f383 8811 	msr	BASEPRI, r3
 80103d0:	f3bf 8f6f 	isb	sy
 80103d4:	f3bf 8f4f 	dsb	sy
 80103d8:	613b      	str	r3, [r7, #16]
}
 80103da:	bf00      	nop
 80103dc:	e7fe      	b.n	80103dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	fb02 f303 	mul.w	r3, r2, r3
 80103e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	3348      	adds	r3, #72	; 0x48
 80103ec:	4618      	mov	r0, r3
 80103ee:	f001 fb9b 	bl	8011b28 <pvPortMalloc>
 80103f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d011      	beq.n	801041e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	3348      	adds	r3, #72	; 0x48
 8010402:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010404:	69bb      	ldr	r3, [r7, #24]
 8010406:	2200      	movs	r2, #0
 8010408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801040c:	79fa      	ldrb	r2, [r7, #7]
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	4613      	mov	r3, r2
 8010414:	697a      	ldr	r2, [r7, #20]
 8010416:	68b9      	ldr	r1, [r7, #8]
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f000 f805 	bl	8010428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801041e:	69bb      	ldr	r3, [r7, #24]
	}
 8010420:	4618      	mov	r0, r3
 8010422:	3720      	adds	r7, #32
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	607a      	str	r2, [r7, #4]
 8010434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d103      	bne.n	8010444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	69ba      	ldr	r2, [r7, #24]
 8010440:	601a      	str	r2, [r3, #0]
 8010442:	e002      	b.n	801044a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010444:	69bb      	ldr	r3, [r7, #24]
 8010446:	687a      	ldr	r2, [r7, #4]
 8010448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	68fa      	ldr	r2, [r7, #12]
 801044e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010456:	2101      	movs	r1, #1
 8010458:	69b8      	ldr	r0, [r7, #24]
 801045a:	f7ff ff43 	bl	80102e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801045e:	bf00      	nop
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b090      	sub	sp, #64	; 0x40
 801046a:	af00      	add	r7, sp, #0
 801046c:	60f8      	str	r0, [r7, #12]
 801046e:	60b9      	str	r1, [r7, #8]
 8010470:	607a      	str	r2, [r7, #4]
 8010472:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047a:	2b00      	cmp	r3, #0
 801047c:	d10a      	bne.n	8010494 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801047e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010482:	f383 8811 	msr	BASEPRI, r3
 8010486:	f3bf 8f6f 	isb	sy
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010490:	bf00      	nop
 8010492:	e7fe      	b.n	8010492 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d103      	bne.n	80104a2 <xQueueGenericSendFromISR+0x3c>
 801049a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d101      	bne.n	80104a6 <xQueueGenericSendFromISR+0x40>
 80104a2:	2301      	movs	r3, #1
 80104a4:	e000      	b.n	80104a8 <xQueueGenericSendFromISR+0x42>
 80104a6:	2300      	movs	r3, #0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10a      	bne.n	80104c2 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80104ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b0:	f383 8811 	msr	BASEPRI, r3
 80104b4:	f3bf 8f6f 	isb	sy
 80104b8:	f3bf 8f4f 	dsb	sy
 80104bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104be:	bf00      	nop
 80104c0:	e7fe      	b.n	80104c0 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d103      	bne.n	80104d0 <xQueueGenericSendFromISR+0x6a>
 80104c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d101      	bne.n	80104d4 <xQueueGenericSendFromISR+0x6e>
 80104d0:	2301      	movs	r3, #1
 80104d2:	e000      	b.n	80104d6 <xQueueGenericSendFromISR+0x70>
 80104d4:	2300      	movs	r3, #0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d10a      	bne.n	80104f0 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80104da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104de:	f383 8811 	msr	BASEPRI, r3
 80104e2:	f3bf 8f6f 	isb	sy
 80104e6:	f3bf 8f4f 	dsb	sy
 80104ea:	623b      	str	r3, [r7, #32]
}
 80104ec:	bf00      	nop
 80104ee:	e7fe      	b.n	80104ee <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104f0:	f001 fada 	bl	8011aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80104f4:	f3ef 8211 	mrs	r2, BASEPRI
 80104f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fc:	f383 8811 	msr	BASEPRI, r3
 8010500:	f3bf 8f6f 	isb	sy
 8010504:	f3bf 8f4f 	dsb	sy
 8010508:	61fa      	str	r2, [r7, #28]
 801050a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801050c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801050e:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010518:	429a      	cmp	r2, r3
 801051a:	d302      	bcc.n	8010522 <xQueueGenericSendFromISR+0xbc>
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	2b02      	cmp	r3, #2
 8010520:	d12f      	bne.n	8010582 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010528:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801052c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010530:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010532:	683a      	ldr	r2, [r7, #0]
 8010534:	68b9      	ldr	r1, [r7, #8]
 8010536:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010538:	f000 f910 	bl	801075c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801053c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010544:	d112      	bne.n	801056c <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801054a:	2b00      	cmp	r3, #0
 801054c:	d016      	beq.n	801057c <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801054e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010550:	3324      	adds	r3, #36	; 0x24
 8010552:	4618      	mov	r0, r3
 8010554:	f000 fdd0 	bl	80110f8 <xTaskRemoveFromEventList>
 8010558:	4603      	mov	r3, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00e      	beq.n	801057c <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00b      	beq.n	801057c <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2201      	movs	r2, #1
 8010568:	601a      	str	r2, [r3, #0]
 801056a:	e007      	b.n	801057c <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801056c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010570:	3301      	adds	r3, #1
 8010572:	b2db      	uxtb	r3, r3
 8010574:	b25a      	sxtb	r2, r3
 8010576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801057c:	2301      	movs	r3, #1
 801057e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010580:	e001      	b.n	8010586 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010582:	2300      	movs	r3, #0
 8010584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010588:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010590:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010594:	4618      	mov	r0, r3
 8010596:	3740      	adds	r7, #64	; 0x40
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b08c      	sub	sp, #48	; 0x30
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80105a8:	2300      	movs	r3, #0
 80105aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80105b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d10a      	bne.n	80105cc <xQueueReceive+0x30>
	__asm volatile
 80105b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ba:	f383 8811 	msr	BASEPRI, r3
 80105be:	f3bf 8f6f 	isb	sy
 80105c2:	f3bf 8f4f 	dsb	sy
 80105c6:	623b      	str	r3, [r7, #32]
}
 80105c8:	bf00      	nop
 80105ca:	e7fe      	b.n	80105ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d103      	bne.n	80105da <xQueueReceive+0x3e>
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d101      	bne.n	80105de <xQueueReceive+0x42>
 80105da:	2301      	movs	r3, #1
 80105dc:	e000      	b.n	80105e0 <xQueueReceive+0x44>
 80105de:	2300      	movs	r3, #0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d10a      	bne.n	80105fa <xQueueReceive+0x5e>
	__asm volatile
 80105e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	61fb      	str	r3, [r7, #28]
}
 80105f6:	bf00      	nop
 80105f8:	e7fe      	b.n	80105f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105fa:	f000 ff39 	bl	8011470 <xTaskGetSchedulerState>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d102      	bne.n	801060a <xQueueReceive+0x6e>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d101      	bne.n	801060e <xQueueReceive+0x72>
 801060a:	2301      	movs	r3, #1
 801060c:	e000      	b.n	8010610 <xQueueReceive+0x74>
 801060e:	2300      	movs	r3, #0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d10a      	bne.n	801062a <xQueueReceive+0x8e>
	__asm volatile
 8010614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010618:	f383 8811 	msr	BASEPRI, r3
 801061c:	f3bf 8f6f 	isb	sy
 8010620:	f3bf 8f4f 	dsb	sy
 8010624:	61bb      	str	r3, [r7, #24]
}
 8010626:	bf00      	nop
 8010628:	e7fe      	b.n	8010628 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801062a:	f001 f95b 	bl	80118e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010632:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	2b00      	cmp	r3, #0
 8010638:	d01f      	beq.n	801067a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801063a:	68b9      	ldr	r1, [r7, #8]
 801063c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801063e:	f000 f8f7 	bl	8010830 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010644:	1e5a      	subs	r2, r3, #1
 8010646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010648:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801064a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064c:	691b      	ldr	r3, [r3, #16]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d00f      	beq.n	8010672 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010654:	3310      	adds	r3, #16
 8010656:	4618      	mov	r0, r3
 8010658:	f000 fd4e 	bl	80110f8 <xTaskRemoveFromEventList>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d007      	beq.n	8010672 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010662:	4b3d      	ldr	r3, [pc, #244]	; (8010758 <xQueueReceive+0x1bc>)
 8010664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	f3bf 8f4f 	dsb	sy
 801066e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010672:	f001 f967 	bl	8011944 <vPortExitCritical>
				return pdPASS;
 8010676:	2301      	movs	r3, #1
 8010678:	e069      	b.n	801074e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d103      	bne.n	8010688 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010680:	f001 f960 	bl	8011944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010684:	2300      	movs	r3, #0
 8010686:	e062      	b.n	801074e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068a:	2b00      	cmp	r3, #0
 801068c:	d106      	bne.n	801069c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801068e:	f107 0310 	add.w	r3, r7, #16
 8010692:	4618      	mov	r0, r3
 8010694:	f000 fd92 	bl	80111bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010698:	2301      	movs	r3, #1
 801069a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801069c:	f001 f952 	bl	8011944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80106a0:	f000 fb48 	bl	8010d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106a4:	f001 f91e 	bl	80118e4 <vPortEnterCritical>
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106ae:	b25b      	sxtb	r3, r3
 80106b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b4:	d103      	bne.n	80106be <xQueueReceive+0x122>
 80106b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106c4:	b25b      	sxtb	r3, r3
 80106c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ca:	d103      	bne.n	80106d4 <xQueueReceive+0x138>
 80106cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ce:	2200      	movs	r2, #0
 80106d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80106d4:	f001 f936 	bl	8011944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106d8:	1d3a      	adds	r2, r7, #4
 80106da:	f107 0310 	add.w	r3, r7, #16
 80106de:	4611      	mov	r1, r2
 80106e0:	4618      	mov	r0, r3
 80106e2:	f000 fd81 	bl	80111e8 <xTaskCheckForTimeOut>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d123      	bne.n	8010734 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106ee:	f000 f917 	bl	8010920 <prvIsQueueEmpty>
 80106f2:	4603      	mov	r3, r0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d017      	beq.n	8010728 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	3324      	adds	r3, #36	; 0x24
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	4611      	mov	r1, r2
 8010700:	4618      	mov	r0, r3
 8010702:	f000 fcd5 	bl	80110b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010708:	f000 f8b8 	bl	801087c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801070c:	f000 fb20 	bl	8010d50 <xTaskResumeAll>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d189      	bne.n	801062a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010716:	4b10      	ldr	r3, [pc, #64]	; (8010758 <xQueueReceive+0x1bc>)
 8010718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	f3bf 8f4f 	dsb	sy
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	e780      	b.n	801062a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801072a:	f000 f8a7 	bl	801087c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801072e:	f000 fb0f 	bl	8010d50 <xTaskResumeAll>
 8010732:	e77a      	b.n	801062a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010736:	f000 f8a1 	bl	801087c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801073a:	f000 fb09 	bl	8010d50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801073e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010740:	f000 f8ee 	bl	8010920 <prvIsQueueEmpty>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	f43f af6f 	beq.w	801062a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801074c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801074e:	4618      	mov	r0, r3
 8010750:	3730      	adds	r7, #48	; 0x30
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
 8010756:	bf00      	nop
 8010758:	e000ed04 	.word	0xe000ed04

0801075c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b086      	sub	sp, #24
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010768:	2300      	movs	r3, #0
 801076a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010770:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010776:	2b00      	cmp	r3, #0
 8010778:	d10d      	bne.n	8010796 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d14d      	bne.n	801081e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	4618      	mov	r0, r3
 8010788:	f000 fe90 	bl	80114ac <xTaskPriorityDisinherit>
 801078c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2200      	movs	r2, #0
 8010792:	609a      	str	r2, [r3, #8]
 8010794:	e043      	b.n	801081e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d119      	bne.n	80107d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6858      	ldr	r0, [r3, #4]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a4:	461a      	mov	r2, r3
 80107a6:	68b9      	ldr	r1, [r7, #8]
 80107a8:	f002 ff8c 	bl	80136c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	685a      	ldr	r2, [r3, #4]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107b4:	441a      	add	r2, r3
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	685a      	ldr	r2, [r3, #4]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	689b      	ldr	r3, [r3, #8]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d32b      	bcc.n	801081e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681a      	ldr	r2, [r3, #0]
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	605a      	str	r2, [r3, #4]
 80107ce:	e026      	b.n	801081e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	68d8      	ldr	r0, [r3, #12]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107d8:	461a      	mov	r2, r3
 80107da:	68b9      	ldr	r1, [r7, #8]
 80107dc:	f002 ff72 	bl	80136c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	68da      	ldr	r2, [r3, #12]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107e8:	425b      	negs	r3, r3
 80107ea:	441a      	add	r2, r3
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68da      	ldr	r2, [r3, #12]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d207      	bcs.n	801080c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	689a      	ldr	r2, [r3, #8]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010804:	425b      	negs	r3, r3
 8010806:	441a      	add	r2, r3
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b02      	cmp	r3, #2
 8010810:	d105      	bne.n	801081e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d002      	beq.n	801081e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	3b01      	subs	r3, #1
 801081c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	1c5a      	adds	r2, r3, #1
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010826:	697b      	ldr	r3, [r7, #20]
}
 8010828:	4618      	mov	r0, r3
 801082a:	3718      	adds	r7, #24
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801083e:	2b00      	cmp	r3, #0
 8010840:	d018      	beq.n	8010874 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	68da      	ldr	r2, [r3, #12]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801084a:	441a      	add	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	68da      	ldr	r2, [r3, #12]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	689b      	ldr	r3, [r3, #8]
 8010858:	429a      	cmp	r2, r3
 801085a:	d303      	bcc.n	8010864 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	68d9      	ldr	r1, [r3, #12]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801086c:	461a      	mov	r2, r3
 801086e:	6838      	ldr	r0, [r7, #0]
 8010870:	f002 ff28 	bl	80136c4 <memcpy>
	}
}
 8010874:	bf00      	nop
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010884:	f001 f82e 	bl	80118e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801088e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010890:	e011      	b.n	80108b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010896:	2b00      	cmp	r3, #0
 8010898:	d012      	beq.n	80108c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	3324      	adds	r3, #36	; 0x24
 801089e:	4618      	mov	r0, r3
 80108a0:	f000 fc2a 	bl	80110f8 <xTaskRemoveFromEventList>
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d001      	beq.n	80108ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80108aa:	f000 fcff 	bl	80112ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80108ae:	7bfb      	ldrb	r3, [r7, #15]
 80108b0:	3b01      	subs	r3, #1
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	dce9      	bgt.n	8010892 <prvUnlockQueue+0x16>
 80108be:	e000      	b.n	80108c2 <prvUnlockQueue+0x46>
					break;
 80108c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	22ff      	movs	r2, #255	; 0xff
 80108c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80108ca:	f001 f83b 	bl	8011944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80108ce:	f001 f809 	bl	80118e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108da:	e011      	b.n	8010900 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	691b      	ldr	r3, [r3, #16]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d012      	beq.n	801090a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	3310      	adds	r3, #16
 80108e8:	4618      	mov	r0, r3
 80108ea:	f000 fc05 	bl	80110f8 <xTaskRemoveFromEventList>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d001      	beq.n	80108f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80108f4:	f000 fcda 	bl	80112ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80108f8:	7bbb      	ldrb	r3, [r7, #14]
 80108fa:	3b01      	subs	r3, #1
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010904:	2b00      	cmp	r3, #0
 8010906:	dce9      	bgt.n	80108dc <prvUnlockQueue+0x60>
 8010908:	e000      	b.n	801090c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801090a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	22ff      	movs	r2, #255	; 0xff
 8010910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010914:	f001 f816 	bl	8011944 <vPortExitCritical>
}
 8010918:	bf00      	nop
 801091a:	3710      	adds	r7, #16
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b084      	sub	sp, #16
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010928:	f000 ffdc 	bl	80118e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010930:	2b00      	cmp	r3, #0
 8010932:	d102      	bne.n	801093a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010934:	2301      	movs	r3, #1
 8010936:	60fb      	str	r3, [r7, #12]
 8010938:	e001      	b.n	801093e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801093a:	2300      	movs	r3, #0
 801093c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801093e:	f001 f801 	bl	8011944 <vPortExitCritical>

	return xReturn;
 8010942:	68fb      	ldr	r3, [r7, #12]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3710      	adds	r7, #16
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801094c:	b580      	push	{r7, lr}
 801094e:	b08e      	sub	sp, #56	; 0x38
 8010950:	af04      	add	r7, sp, #16
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
 8010958:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801095c:	2b00      	cmp	r3, #0
 801095e:	d10a      	bne.n	8010976 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010964:	f383 8811 	msr	BASEPRI, r3
 8010968:	f3bf 8f6f 	isb	sy
 801096c:	f3bf 8f4f 	dsb	sy
 8010970:	623b      	str	r3, [r7, #32]
}
 8010972:	bf00      	nop
 8010974:	e7fe      	b.n	8010974 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010978:	2b00      	cmp	r3, #0
 801097a:	d10a      	bne.n	8010992 <xTaskCreateStatic+0x46>
	__asm volatile
 801097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010980:	f383 8811 	msr	BASEPRI, r3
 8010984:	f3bf 8f6f 	isb	sy
 8010988:	f3bf 8f4f 	dsb	sy
 801098c:	61fb      	str	r3, [r7, #28]
}
 801098e:	bf00      	nop
 8010990:	e7fe      	b.n	8010990 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010992:	2354      	movs	r3, #84	; 0x54
 8010994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	2b54      	cmp	r3, #84	; 0x54
 801099a:	d00a      	beq.n	80109b2 <xTaskCreateStatic+0x66>
	__asm volatile
 801099c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a0:	f383 8811 	msr	BASEPRI, r3
 80109a4:	f3bf 8f6f 	isb	sy
 80109a8:	f3bf 8f4f 	dsb	sy
 80109ac:	61bb      	str	r3, [r7, #24]
}
 80109ae:	bf00      	nop
 80109b0:	e7fe      	b.n	80109b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80109b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80109b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d01e      	beq.n	80109f8 <xTaskCreateStatic+0xac>
 80109ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d01b      	beq.n	80109f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80109c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80109c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	2202      	movs	r2, #2
 80109ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80109d2:	2300      	movs	r3, #0
 80109d4:	9303      	str	r3, [sp, #12]
 80109d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d8:	9302      	str	r3, [sp, #8]
 80109da:	f107 0314 	add.w	r3, r7, #20
 80109de:	9301      	str	r3, [sp, #4]
 80109e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	68b9      	ldr	r1, [r7, #8]
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f000 f850 	bl	8010a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80109f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109f2:	f000 f8d5 	bl	8010ba0 <prvAddNewTaskToReadyList>
 80109f6:	e001      	b.n	80109fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80109f8:	2300      	movs	r3, #0
 80109fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80109fc:	697b      	ldr	r3, [r7, #20]
	}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3728      	adds	r7, #40	; 0x28
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b08c      	sub	sp, #48	; 0x30
 8010a0a:	af04      	add	r7, sp, #16
 8010a0c:	60f8      	str	r0, [r7, #12]
 8010a0e:	60b9      	str	r1, [r7, #8]
 8010a10:	603b      	str	r3, [r7, #0]
 8010a12:	4613      	mov	r3, r2
 8010a14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010a16:	88fb      	ldrh	r3, [r7, #6]
 8010a18:	009b      	lsls	r3, r3, #2
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f001 f884 	bl	8011b28 <pvPortMalloc>
 8010a20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d00e      	beq.n	8010a46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010a28:	2054      	movs	r0, #84	; 0x54
 8010a2a:	f001 f87d 	bl	8011b28 <pvPortMalloc>
 8010a2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d003      	beq.n	8010a3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	697a      	ldr	r2, [r7, #20]
 8010a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8010a3c:	e005      	b.n	8010a4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010a3e:	6978      	ldr	r0, [r7, #20]
 8010a40:	f001 f93e 	bl	8011cc0 <vPortFree>
 8010a44:	e001      	b.n	8010a4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010a46:	2300      	movs	r3, #0
 8010a48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d017      	beq.n	8010a80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	2200      	movs	r2, #0
 8010a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010a58:	88fa      	ldrh	r2, [r7, #6]
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	9303      	str	r3, [sp, #12]
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	9302      	str	r3, [sp, #8]
 8010a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a64:	9301      	str	r3, [sp, #4]
 8010a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a68:	9300      	str	r3, [sp, #0]
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	68b9      	ldr	r1, [r7, #8]
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f000 f80e 	bl	8010a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010a74:	69f8      	ldr	r0, [r7, #28]
 8010a76:	f000 f893 	bl	8010ba0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	61bb      	str	r3, [r7, #24]
 8010a7e:	e002      	b.n	8010a86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010a80:	f04f 33ff 	mov.w	r3, #4294967295
 8010a84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010a86:	69bb      	ldr	r3, [r7, #24]
	}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3720      	adds	r7, #32
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b088      	sub	sp, #32
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	607a      	str	r2, [r7, #4]
 8010a9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	4413      	add	r3, r2
 8010aae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ab0:	69bb      	ldr	r3, [r7, #24]
 8010ab2:	f023 0307 	bic.w	r3, r3, #7
 8010ab6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010ab8:	69bb      	ldr	r3, [r7, #24]
 8010aba:	f003 0307 	and.w	r3, r3, #7
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d00a      	beq.n	8010ad8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8010ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac6:	f383 8811 	msr	BASEPRI, r3
 8010aca:	f3bf 8f6f 	isb	sy
 8010ace:	f3bf 8f4f 	dsb	sy
 8010ad2:	617b      	str	r3, [r7, #20]
}
 8010ad4:	bf00      	nop
 8010ad6:	e7fe      	b.n	8010ad6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d01f      	beq.n	8010b1e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ade:	2300      	movs	r3, #0
 8010ae0:	61fb      	str	r3, [r7, #28]
 8010ae2:	e012      	b.n	8010b0a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010ae4:	68ba      	ldr	r2, [r7, #8]
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	4413      	add	r3, r2
 8010aea:	7819      	ldrb	r1, [r3, #0]
 8010aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	4413      	add	r3, r2
 8010af2:	3334      	adds	r3, #52	; 0x34
 8010af4:	460a      	mov	r2, r1
 8010af6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010af8:	68ba      	ldr	r2, [r7, #8]
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	4413      	add	r3, r2
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d006      	beq.n	8010b12 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	3301      	adds	r3, #1
 8010b08:	61fb      	str	r3, [r7, #28]
 8010b0a:	69fb      	ldr	r3, [r7, #28]
 8010b0c:	2b0f      	cmp	r3, #15
 8010b0e:	d9e9      	bls.n	8010ae4 <prvInitialiseNewTask+0x54>
 8010b10:	e000      	b.n	8010b14 <prvInitialiseNewTask+0x84>
			{
				break;
 8010b12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b16:	2200      	movs	r2, #0
 8010b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010b1c:	e003      	b.n	8010b26 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b20:	2200      	movs	r2, #0
 8010b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b28:	2b06      	cmp	r3, #6
 8010b2a:	d901      	bls.n	8010b30 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010b2c:	2306      	movs	r3, #6
 8010b2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b3e:	2200      	movs	r2, #0
 8010b40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b44:	3304      	adds	r3, #4
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7ff fb37 	bl	80101ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4e:	3318      	adds	r3, #24
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7ff fb32 	bl	80101ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5e:	f1c3 0207 	rsb	r2, r3, #7
 8010b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6e:	2200      	movs	r2, #0
 8010b70:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b74:	2200      	movs	r2, #0
 8010b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010b7a:	683a      	ldr	r2, [r7, #0]
 8010b7c:	68f9      	ldr	r1, [r7, #12]
 8010b7e:	69b8      	ldr	r0, [r7, #24]
 8010b80:	f000 fd80 	bl	8011684 <pxPortInitialiseStack>
 8010b84:	4602      	mov	r2, r0
 8010b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d002      	beq.n	8010b96 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b96:	bf00      	nop
 8010b98:	3720      	adds	r7, #32
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
	...

08010ba0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ba8:	f000 fe9c 	bl	80118e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010bac:	4b2a      	ldr	r3, [pc, #168]	; (8010c58 <prvAddNewTaskToReadyList+0xb8>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	4a29      	ldr	r2, [pc, #164]	; (8010c58 <prvAddNewTaskToReadyList+0xb8>)
 8010bb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010bb6:	4b29      	ldr	r3, [pc, #164]	; (8010c5c <prvAddNewTaskToReadyList+0xbc>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d109      	bne.n	8010bd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010bbe:	4a27      	ldr	r2, [pc, #156]	; (8010c5c <prvAddNewTaskToReadyList+0xbc>)
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010bc4:	4b24      	ldr	r3, [pc, #144]	; (8010c58 <prvAddNewTaskToReadyList+0xb8>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d110      	bne.n	8010bee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010bcc:	f000 fb92 	bl	80112f4 <prvInitialiseTaskLists>
 8010bd0:	e00d      	b.n	8010bee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010bd2:	4b23      	ldr	r3, [pc, #140]	; (8010c60 <prvAddNewTaskToReadyList+0xc0>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d109      	bne.n	8010bee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010bda:	4b20      	ldr	r3, [pc, #128]	; (8010c5c <prvAddNewTaskToReadyList+0xbc>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d802      	bhi.n	8010bee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010be8:	4a1c      	ldr	r2, [pc, #112]	; (8010c5c <prvAddNewTaskToReadyList+0xbc>)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010bee:	4b1d      	ldr	r3, [pc, #116]	; (8010c64 <prvAddNewTaskToReadyList+0xc4>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	4a1b      	ldr	r2, [pc, #108]	; (8010c64 <prvAddNewTaskToReadyList+0xc4>)
 8010bf6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bfc:	2201      	movs	r2, #1
 8010bfe:	409a      	lsls	r2, r3
 8010c00:	4b19      	ldr	r3, [pc, #100]	; (8010c68 <prvAddNewTaskToReadyList+0xc8>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	4313      	orrs	r3, r2
 8010c06:	4a18      	ldr	r2, [pc, #96]	; (8010c68 <prvAddNewTaskToReadyList+0xc8>)
 8010c08:	6013      	str	r3, [r2, #0]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c0e:	4613      	mov	r3, r2
 8010c10:	009b      	lsls	r3, r3, #2
 8010c12:	4413      	add	r3, r2
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	4a15      	ldr	r2, [pc, #84]	; (8010c6c <prvAddNewTaskToReadyList+0xcc>)
 8010c18:	441a      	add	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	3304      	adds	r3, #4
 8010c1e:	4619      	mov	r1, r3
 8010c20:	4610      	mov	r0, r2
 8010c22:	f7ff fad7 	bl	80101d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010c26:	f000 fe8d 	bl	8011944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010c2a:	4b0d      	ldr	r3, [pc, #52]	; (8010c60 <prvAddNewTaskToReadyList+0xc0>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d00e      	beq.n	8010c50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010c32:	4b0a      	ldr	r3, [pc, #40]	; (8010c5c <prvAddNewTaskToReadyList+0xbc>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d207      	bcs.n	8010c50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010c40:	4b0b      	ldr	r3, [pc, #44]	; (8010c70 <prvAddNewTaskToReadyList+0xd0>)
 8010c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c46:	601a      	str	r2, [r3, #0]
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c50:	bf00      	nop
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	20000e2c 	.word	0x20000e2c
 8010c5c:	20000d2c 	.word	0x20000d2c
 8010c60:	20000e38 	.word	0x20000e38
 8010c64:	20000e48 	.word	0x20000e48
 8010c68:	20000e34 	.word	0x20000e34
 8010c6c:	20000d30 	.word	0x20000d30
 8010c70:	e000ed04 	.word	0xe000ed04

08010c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b08a      	sub	sp, #40	; 0x28
 8010c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010c82:	463a      	mov	r2, r7
 8010c84:	1d39      	adds	r1, r7, #4
 8010c86:	f107 0308 	add.w	r3, r7, #8
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7f0 f8e6 	bl	8000e5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010c90:	6839      	ldr	r1, [r7, #0]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	9202      	str	r2, [sp, #8]
 8010c98:	9301      	str	r3, [sp, #4]
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	460a      	mov	r2, r1
 8010ca2:	491e      	ldr	r1, [pc, #120]	; (8010d1c <vTaskStartScheduler+0xa8>)
 8010ca4:	481e      	ldr	r0, [pc, #120]	; (8010d20 <vTaskStartScheduler+0xac>)
 8010ca6:	f7ff fe51 	bl	801094c <xTaskCreateStatic>
 8010caa:	4603      	mov	r3, r0
 8010cac:	4a1d      	ldr	r2, [pc, #116]	; (8010d24 <vTaskStartScheduler+0xb0>)
 8010cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010cb0:	4b1c      	ldr	r3, [pc, #112]	; (8010d24 <vTaskStartScheduler+0xb0>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	617b      	str	r3, [r7, #20]
 8010cbc:	e001      	b.n	8010cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d116      	bne.n	8010cf6 <vTaskStartScheduler+0x82>
	__asm volatile
 8010cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ccc:	f383 8811 	msr	BASEPRI, r3
 8010cd0:	f3bf 8f6f 	isb	sy
 8010cd4:	f3bf 8f4f 	dsb	sy
 8010cd8:	613b      	str	r3, [r7, #16]
}
 8010cda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010cdc:	4b12      	ldr	r3, [pc, #72]	; (8010d28 <vTaskStartScheduler+0xb4>)
 8010cde:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010ce4:	4b11      	ldr	r3, [pc, #68]	; (8010d2c <vTaskStartScheduler+0xb8>)
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010cea:	4b11      	ldr	r3, [pc, #68]	; (8010d30 <vTaskStartScheduler+0xbc>)
 8010cec:	2200      	movs	r2, #0
 8010cee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010cf0:	f000 fd56 	bl	80117a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010cf4:	e00e      	b.n	8010d14 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cfc:	d10a      	bne.n	8010d14 <vTaskStartScheduler+0xa0>
	__asm volatile
 8010cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d02:	f383 8811 	msr	BASEPRI, r3
 8010d06:	f3bf 8f6f 	isb	sy
 8010d0a:	f3bf 8f4f 	dsb	sy
 8010d0e:	60fb      	str	r3, [r7, #12]
}
 8010d10:	bf00      	nop
 8010d12:	e7fe      	b.n	8010d12 <vTaskStartScheduler+0x9e>
}
 8010d14:	bf00      	nop
 8010d16:	3718      	adds	r7, #24
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	08013b54 	.word	0x08013b54
 8010d20:	080112c5 	.word	0x080112c5
 8010d24:	20000e50 	.word	0x20000e50
 8010d28:	20000e4c 	.word	0x20000e4c
 8010d2c:	20000e38 	.word	0x20000e38
 8010d30:	20000e30 	.word	0x20000e30

08010d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010d34:	b480      	push	{r7}
 8010d36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010d38:	4b04      	ldr	r3, [pc, #16]	; (8010d4c <vTaskSuspendAll+0x18>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	4a03      	ldr	r2, [pc, #12]	; (8010d4c <vTaskSuspendAll+0x18>)
 8010d40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010d42:	bf00      	nop
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr
 8010d4c:	20000e54 	.word	0x20000e54

08010d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010d56:	2300      	movs	r3, #0
 8010d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010d5e:	4b41      	ldr	r3, [pc, #260]	; (8010e64 <xTaskResumeAll+0x114>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d10a      	bne.n	8010d7c <xTaskResumeAll+0x2c>
	__asm volatile
 8010d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6a:	f383 8811 	msr	BASEPRI, r3
 8010d6e:	f3bf 8f6f 	isb	sy
 8010d72:	f3bf 8f4f 	dsb	sy
 8010d76:	603b      	str	r3, [r7, #0]
}
 8010d78:	bf00      	nop
 8010d7a:	e7fe      	b.n	8010d7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010d7c:	f000 fdb2 	bl	80118e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010d80:	4b38      	ldr	r3, [pc, #224]	; (8010e64 <xTaskResumeAll+0x114>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	3b01      	subs	r3, #1
 8010d86:	4a37      	ldr	r2, [pc, #220]	; (8010e64 <xTaskResumeAll+0x114>)
 8010d88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d8a:	4b36      	ldr	r3, [pc, #216]	; (8010e64 <xTaskResumeAll+0x114>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d161      	bne.n	8010e56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010d92:	4b35      	ldr	r3, [pc, #212]	; (8010e68 <xTaskResumeAll+0x118>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d05d      	beq.n	8010e56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d9a:	e02e      	b.n	8010dfa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d9c:	4b33      	ldr	r3, [pc, #204]	; (8010e6c <xTaskResumeAll+0x11c>)
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	3318      	adds	r3, #24
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff fa70 	bl	801028e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	3304      	adds	r3, #4
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7ff fa6b 	bl	801028e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	409a      	lsls	r2, r3
 8010dc0:	4b2b      	ldr	r3, [pc, #172]	; (8010e70 <xTaskResumeAll+0x120>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	4a2a      	ldr	r2, [pc, #168]	; (8010e70 <xTaskResumeAll+0x120>)
 8010dc8:	6013      	str	r3, [r2, #0]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dce:	4613      	mov	r3, r2
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	4413      	add	r3, r2
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	4a27      	ldr	r2, [pc, #156]	; (8010e74 <xTaskResumeAll+0x124>)
 8010dd8:	441a      	add	r2, r3
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	3304      	adds	r3, #4
 8010dde:	4619      	mov	r1, r3
 8010de0:	4610      	mov	r0, r2
 8010de2:	f7ff f9f7 	bl	80101d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dea:	4b23      	ldr	r3, [pc, #140]	; (8010e78 <xTaskResumeAll+0x128>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d302      	bcc.n	8010dfa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010df4:	4b21      	ldr	r3, [pc, #132]	; (8010e7c <xTaskResumeAll+0x12c>)
 8010df6:	2201      	movs	r2, #1
 8010df8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010dfa:	4b1c      	ldr	r3, [pc, #112]	; (8010e6c <xTaskResumeAll+0x11c>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1cc      	bne.n	8010d9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d001      	beq.n	8010e0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010e08:	f000 fb12 	bl	8011430 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010e0c:	4b1c      	ldr	r3, [pc, #112]	; (8010e80 <xTaskResumeAll+0x130>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d010      	beq.n	8010e3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010e18:	f000 f836 	bl	8010e88 <xTaskIncrementTick>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d002      	beq.n	8010e28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010e22:	4b16      	ldr	r3, [pc, #88]	; (8010e7c <xTaskResumeAll+0x12c>)
 8010e24:	2201      	movs	r2, #1
 8010e26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d1f1      	bne.n	8010e18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010e34:	4b12      	ldr	r3, [pc, #72]	; (8010e80 <xTaskResumeAll+0x130>)
 8010e36:	2200      	movs	r2, #0
 8010e38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010e3a:	4b10      	ldr	r3, [pc, #64]	; (8010e7c <xTaskResumeAll+0x12c>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d009      	beq.n	8010e56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010e42:	2301      	movs	r3, #1
 8010e44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010e46:	4b0f      	ldr	r3, [pc, #60]	; (8010e84 <xTaskResumeAll+0x134>)
 8010e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e4c:	601a      	str	r2, [r3, #0]
 8010e4e:	f3bf 8f4f 	dsb	sy
 8010e52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e56:	f000 fd75 	bl	8011944 <vPortExitCritical>

	return xAlreadyYielded;
 8010e5a:	68bb      	ldr	r3, [r7, #8]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3710      	adds	r7, #16
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	20000e54 	.word	0x20000e54
 8010e68:	20000e2c 	.word	0x20000e2c
 8010e6c:	20000dec 	.word	0x20000dec
 8010e70:	20000e34 	.word	0x20000e34
 8010e74:	20000d30 	.word	0x20000d30
 8010e78:	20000d2c 	.word	0x20000d2c
 8010e7c:	20000e40 	.word	0x20000e40
 8010e80:	20000e3c 	.word	0x20000e3c
 8010e84:	e000ed04 	.word	0xe000ed04

08010e88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b086      	sub	sp, #24
 8010e8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e92:	4b4e      	ldr	r3, [pc, #312]	; (8010fcc <xTaskIncrementTick+0x144>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	f040 808e 	bne.w	8010fb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010e9c:	4b4c      	ldr	r3, [pc, #304]	; (8010fd0 <xTaskIncrementTick+0x148>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010ea4:	4a4a      	ldr	r2, [pc, #296]	; (8010fd0 <xTaskIncrementTick+0x148>)
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d120      	bne.n	8010ef2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010eb0:	4b48      	ldr	r3, [pc, #288]	; (8010fd4 <xTaskIncrementTick+0x14c>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00a      	beq.n	8010ed0 <xTaskIncrementTick+0x48>
	__asm volatile
 8010eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ebe:	f383 8811 	msr	BASEPRI, r3
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	f3bf 8f4f 	dsb	sy
 8010eca:	603b      	str	r3, [r7, #0]
}
 8010ecc:	bf00      	nop
 8010ece:	e7fe      	b.n	8010ece <xTaskIncrementTick+0x46>
 8010ed0:	4b40      	ldr	r3, [pc, #256]	; (8010fd4 <xTaskIncrementTick+0x14c>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	60fb      	str	r3, [r7, #12]
 8010ed6:	4b40      	ldr	r3, [pc, #256]	; (8010fd8 <xTaskIncrementTick+0x150>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a3e      	ldr	r2, [pc, #248]	; (8010fd4 <xTaskIncrementTick+0x14c>)
 8010edc:	6013      	str	r3, [r2, #0]
 8010ede:	4a3e      	ldr	r2, [pc, #248]	; (8010fd8 <xTaskIncrementTick+0x150>)
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6013      	str	r3, [r2, #0]
 8010ee4:	4b3d      	ldr	r3, [pc, #244]	; (8010fdc <xTaskIncrementTick+0x154>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	4a3c      	ldr	r2, [pc, #240]	; (8010fdc <xTaskIncrementTick+0x154>)
 8010eec:	6013      	str	r3, [r2, #0]
 8010eee:	f000 fa9f 	bl	8011430 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010ef2:	4b3b      	ldr	r3, [pc, #236]	; (8010fe0 <xTaskIncrementTick+0x158>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	693a      	ldr	r2, [r7, #16]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d348      	bcc.n	8010f8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010efc:	4b35      	ldr	r3, [pc, #212]	; (8010fd4 <xTaskIncrementTick+0x14c>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d104      	bne.n	8010f10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f06:	4b36      	ldr	r3, [pc, #216]	; (8010fe0 <xTaskIncrementTick+0x158>)
 8010f08:	f04f 32ff 	mov.w	r2, #4294967295
 8010f0c:	601a      	str	r2, [r3, #0]
					break;
 8010f0e:	e03e      	b.n	8010f8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f10:	4b30      	ldr	r3, [pc, #192]	; (8010fd4 <xTaskIncrementTick+0x14c>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	68db      	ldr	r3, [r3, #12]
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010f20:	693a      	ldr	r2, [r7, #16]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d203      	bcs.n	8010f30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010f28:	4a2d      	ldr	r2, [pc, #180]	; (8010fe0 <xTaskIncrementTick+0x158>)
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f2e:	e02e      	b.n	8010f8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	3304      	adds	r3, #4
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7ff f9aa 	bl	801028e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d004      	beq.n	8010f4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	3318      	adds	r3, #24
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff f9a1 	bl	801028e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f50:	2201      	movs	r2, #1
 8010f52:	409a      	lsls	r2, r3
 8010f54:	4b23      	ldr	r3, [pc, #140]	; (8010fe4 <xTaskIncrementTick+0x15c>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4313      	orrs	r3, r2
 8010f5a:	4a22      	ldr	r2, [pc, #136]	; (8010fe4 <xTaskIncrementTick+0x15c>)
 8010f5c:	6013      	str	r3, [r2, #0]
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f62:	4613      	mov	r3, r2
 8010f64:	009b      	lsls	r3, r3, #2
 8010f66:	4413      	add	r3, r2
 8010f68:	009b      	lsls	r3, r3, #2
 8010f6a:	4a1f      	ldr	r2, [pc, #124]	; (8010fe8 <xTaskIncrementTick+0x160>)
 8010f6c:	441a      	add	r2, r3
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	3304      	adds	r3, #4
 8010f72:	4619      	mov	r1, r3
 8010f74:	4610      	mov	r0, r2
 8010f76:	f7ff f92d 	bl	80101d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f7e:	4b1b      	ldr	r3, [pc, #108]	; (8010fec <xTaskIncrementTick+0x164>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d3b9      	bcc.n	8010efc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f8c:	e7b6      	b.n	8010efc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010f8e:	4b17      	ldr	r3, [pc, #92]	; (8010fec <xTaskIncrementTick+0x164>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f94:	4914      	ldr	r1, [pc, #80]	; (8010fe8 <xTaskIncrementTick+0x160>)
 8010f96:	4613      	mov	r3, r2
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	4413      	add	r3, r2
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	440b      	add	r3, r1
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d901      	bls.n	8010faa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010faa:	4b11      	ldr	r3, [pc, #68]	; (8010ff0 <xTaskIncrementTick+0x168>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d007      	beq.n	8010fc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	617b      	str	r3, [r7, #20]
 8010fb6:	e004      	b.n	8010fc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010fb8:	4b0e      	ldr	r3, [pc, #56]	; (8010ff4 <xTaskIncrementTick+0x16c>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	4a0d      	ldr	r2, [pc, #52]	; (8010ff4 <xTaskIncrementTick+0x16c>)
 8010fc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010fc2:	697b      	ldr	r3, [r7, #20]
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3718      	adds	r7, #24
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	20000e54 	.word	0x20000e54
 8010fd0:	20000e30 	.word	0x20000e30
 8010fd4:	20000de4 	.word	0x20000de4
 8010fd8:	20000de8 	.word	0x20000de8
 8010fdc:	20000e44 	.word	0x20000e44
 8010fe0:	20000e4c 	.word	0x20000e4c
 8010fe4:	20000e34 	.word	0x20000e34
 8010fe8:	20000d30 	.word	0x20000d30
 8010fec:	20000d2c 	.word	0x20000d2c
 8010ff0:	20000e40 	.word	0x20000e40
 8010ff4:	20000e3c 	.word	0x20000e3c

08010ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b087      	sub	sp, #28
 8010ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ffe:	4b27      	ldr	r3, [pc, #156]	; (801109c <vTaskSwitchContext+0xa4>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d003      	beq.n	801100e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011006:	4b26      	ldr	r3, [pc, #152]	; (80110a0 <vTaskSwitchContext+0xa8>)
 8011008:	2201      	movs	r2, #1
 801100a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801100c:	e03f      	b.n	801108e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801100e:	4b24      	ldr	r3, [pc, #144]	; (80110a0 <vTaskSwitchContext+0xa8>)
 8011010:	2200      	movs	r2, #0
 8011012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011014:	4b23      	ldr	r3, [pc, #140]	; (80110a4 <vTaskSwitchContext+0xac>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	fab3 f383 	clz	r3, r3
 8011020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011022:	7afb      	ldrb	r3, [r7, #11]
 8011024:	f1c3 031f 	rsb	r3, r3, #31
 8011028:	617b      	str	r3, [r7, #20]
 801102a:	491f      	ldr	r1, [pc, #124]	; (80110a8 <vTaskSwitchContext+0xb0>)
 801102c:	697a      	ldr	r2, [r7, #20]
 801102e:	4613      	mov	r3, r2
 8011030:	009b      	lsls	r3, r3, #2
 8011032:	4413      	add	r3, r2
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	440b      	add	r3, r1
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d10a      	bne.n	8011054 <vTaskSwitchContext+0x5c>
	__asm volatile
 801103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011042:	f383 8811 	msr	BASEPRI, r3
 8011046:	f3bf 8f6f 	isb	sy
 801104a:	f3bf 8f4f 	dsb	sy
 801104e:	607b      	str	r3, [r7, #4]
}
 8011050:	bf00      	nop
 8011052:	e7fe      	b.n	8011052 <vTaskSwitchContext+0x5a>
 8011054:	697a      	ldr	r2, [r7, #20]
 8011056:	4613      	mov	r3, r2
 8011058:	009b      	lsls	r3, r3, #2
 801105a:	4413      	add	r3, r2
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	4a12      	ldr	r2, [pc, #72]	; (80110a8 <vTaskSwitchContext+0xb0>)
 8011060:	4413      	add	r3, r2
 8011062:	613b      	str	r3, [r7, #16]
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	685a      	ldr	r2, [r3, #4]
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	605a      	str	r2, [r3, #4]
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	685a      	ldr	r2, [r3, #4]
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	3308      	adds	r3, #8
 8011076:	429a      	cmp	r2, r3
 8011078:	d104      	bne.n	8011084 <vTaskSwitchContext+0x8c>
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	685a      	ldr	r2, [r3, #4]
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	605a      	str	r2, [r3, #4]
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	4a08      	ldr	r2, [pc, #32]	; (80110ac <vTaskSwitchContext+0xb4>)
 801108c:	6013      	str	r3, [r2, #0]
}
 801108e:	bf00      	nop
 8011090:	371c      	adds	r7, #28
 8011092:	46bd      	mov	sp, r7
 8011094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop
 801109c:	20000e54 	.word	0x20000e54
 80110a0:	20000e40 	.word	0x20000e40
 80110a4:	20000e34 	.word	0x20000e34
 80110a8:	20000d30 	.word	0x20000d30
 80110ac:	20000d2c 	.word	0x20000d2c

080110b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d10a      	bne.n	80110d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80110c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c4:	f383 8811 	msr	BASEPRI, r3
 80110c8:	f3bf 8f6f 	isb	sy
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	60fb      	str	r3, [r7, #12]
}
 80110d2:	bf00      	nop
 80110d4:	e7fe      	b.n	80110d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110d6:	4b07      	ldr	r3, [pc, #28]	; (80110f4 <vTaskPlaceOnEventList+0x44>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	3318      	adds	r3, #24
 80110dc:	4619      	mov	r1, r3
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff f89c 	bl	801021c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80110e4:	2101      	movs	r1, #1
 80110e6:	6838      	ldr	r0, [r7, #0]
 80110e8:	f000 fa66 	bl	80115b8 <prvAddCurrentTaskToDelayedList>
}
 80110ec:	bf00      	nop
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	20000d2c 	.word	0x20000d2c

080110f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b086      	sub	sp, #24
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d10a      	bne.n	8011124 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801110e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011112:	f383 8811 	msr	BASEPRI, r3
 8011116:	f3bf 8f6f 	isb	sy
 801111a:	f3bf 8f4f 	dsb	sy
 801111e:	60fb      	str	r3, [r7, #12]
}
 8011120:	bf00      	nop
 8011122:	e7fe      	b.n	8011122 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	3318      	adds	r3, #24
 8011128:	4618      	mov	r0, r3
 801112a:	f7ff f8b0 	bl	801028e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801112e:	4b1d      	ldr	r3, [pc, #116]	; (80111a4 <xTaskRemoveFromEventList+0xac>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d11c      	bne.n	8011170 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	3304      	adds	r3, #4
 801113a:	4618      	mov	r0, r3
 801113c:	f7ff f8a7 	bl	801028e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011144:	2201      	movs	r2, #1
 8011146:	409a      	lsls	r2, r3
 8011148:	4b17      	ldr	r3, [pc, #92]	; (80111a8 <xTaskRemoveFromEventList+0xb0>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	4313      	orrs	r3, r2
 801114e:	4a16      	ldr	r2, [pc, #88]	; (80111a8 <xTaskRemoveFromEventList+0xb0>)
 8011150:	6013      	str	r3, [r2, #0]
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011156:	4613      	mov	r3, r2
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	4413      	add	r3, r2
 801115c:	009b      	lsls	r3, r3, #2
 801115e:	4a13      	ldr	r2, [pc, #76]	; (80111ac <xTaskRemoveFromEventList+0xb4>)
 8011160:	441a      	add	r2, r3
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	3304      	adds	r3, #4
 8011166:	4619      	mov	r1, r3
 8011168:	4610      	mov	r0, r2
 801116a:	f7ff f833 	bl	80101d4 <vListInsertEnd>
 801116e:	e005      	b.n	801117c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	3318      	adds	r3, #24
 8011174:	4619      	mov	r1, r3
 8011176:	480e      	ldr	r0, [pc, #56]	; (80111b0 <xTaskRemoveFromEventList+0xb8>)
 8011178:	f7ff f82c 	bl	80101d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011180:	4b0c      	ldr	r3, [pc, #48]	; (80111b4 <xTaskRemoveFromEventList+0xbc>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011186:	429a      	cmp	r2, r3
 8011188:	d905      	bls.n	8011196 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801118a:	2301      	movs	r3, #1
 801118c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801118e:	4b0a      	ldr	r3, [pc, #40]	; (80111b8 <xTaskRemoveFromEventList+0xc0>)
 8011190:	2201      	movs	r2, #1
 8011192:	601a      	str	r2, [r3, #0]
 8011194:	e001      	b.n	801119a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011196:	2300      	movs	r3, #0
 8011198:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801119a:	697b      	ldr	r3, [r7, #20]
}
 801119c:	4618      	mov	r0, r3
 801119e:	3718      	adds	r7, #24
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}
 80111a4:	20000e54 	.word	0x20000e54
 80111a8:	20000e34 	.word	0x20000e34
 80111ac:	20000d30 	.word	0x20000d30
 80111b0:	20000dec 	.word	0x20000dec
 80111b4:	20000d2c 	.word	0x20000d2c
 80111b8:	20000e40 	.word	0x20000e40

080111bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80111c4:	4b06      	ldr	r3, [pc, #24]	; (80111e0 <vTaskInternalSetTimeOutState+0x24>)
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80111cc:	4b05      	ldr	r3, [pc, #20]	; (80111e4 <vTaskInternalSetTimeOutState+0x28>)
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	605a      	str	r2, [r3, #4]
}
 80111d4:	bf00      	nop
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr
 80111e0:	20000e44 	.word	0x20000e44
 80111e4:	20000e30 	.word	0x20000e30

080111e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b088      	sub	sp, #32
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d10a      	bne.n	801120e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80111f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111fc:	f383 8811 	msr	BASEPRI, r3
 8011200:	f3bf 8f6f 	isb	sy
 8011204:	f3bf 8f4f 	dsb	sy
 8011208:	613b      	str	r3, [r7, #16]
}
 801120a:	bf00      	nop
 801120c:	e7fe      	b.n	801120c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d10a      	bne.n	801122a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011218:	f383 8811 	msr	BASEPRI, r3
 801121c:	f3bf 8f6f 	isb	sy
 8011220:	f3bf 8f4f 	dsb	sy
 8011224:	60fb      	str	r3, [r7, #12]
}
 8011226:	bf00      	nop
 8011228:	e7fe      	b.n	8011228 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801122a:	f000 fb5b 	bl	80118e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801122e:	4b1d      	ldr	r3, [pc, #116]	; (80112a4 <xTaskCheckForTimeOut+0xbc>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	1ad3      	subs	r3, r2, r3
 801123c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011246:	d102      	bne.n	801124e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011248:	2300      	movs	r3, #0
 801124a:	61fb      	str	r3, [r7, #28]
 801124c:	e023      	b.n	8011296 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681a      	ldr	r2, [r3, #0]
 8011252:	4b15      	ldr	r3, [pc, #84]	; (80112a8 <xTaskCheckForTimeOut+0xc0>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	429a      	cmp	r2, r3
 8011258:	d007      	beq.n	801126a <xTaskCheckForTimeOut+0x82>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	69ba      	ldr	r2, [r7, #24]
 8011260:	429a      	cmp	r2, r3
 8011262:	d302      	bcc.n	801126a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011264:	2301      	movs	r3, #1
 8011266:	61fb      	str	r3, [r7, #28]
 8011268:	e015      	b.n	8011296 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	697a      	ldr	r2, [r7, #20]
 8011270:	429a      	cmp	r2, r3
 8011272:	d20b      	bcs.n	801128c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	1ad2      	subs	r2, r2, r3
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7ff ff9b 	bl	80111bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011286:	2300      	movs	r3, #0
 8011288:	61fb      	str	r3, [r7, #28]
 801128a:	e004      	b.n	8011296 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	2200      	movs	r2, #0
 8011290:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011292:	2301      	movs	r3, #1
 8011294:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011296:	f000 fb55 	bl	8011944 <vPortExitCritical>

	return xReturn;
 801129a:	69fb      	ldr	r3, [r7, #28]
}
 801129c:	4618      	mov	r0, r3
 801129e:	3720      	adds	r7, #32
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	20000e30 	.word	0x20000e30
 80112a8:	20000e44 	.word	0x20000e44

080112ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80112ac:	b480      	push	{r7}
 80112ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80112b0:	4b03      	ldr	r3, [pc, #12]	; (80112c0 <vTaskMissedYield+0x14>)
 80112b2:	2201      	movs	r2, #1
 80112b4:	601a      	str	r2, [r3, #0]
}
 80112b6:	bf00      	nop
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr
 80112c0:	20000e40 	.word	0x20000e40

080112c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80112cc:	f000 f852 	bl	8011374 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80112d0:	4b06      	ldr	r3, [pc, #24]	; (80112ec <prvIdleTask+0x28>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d9f9      	bls.n	80112cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80112d8:	4b05      	ldr	r3, [pc, #20]	; (80112f0 <prvIdleTask+0x2c>)
 80112da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112de:	601a      	str	r2, [r3, #0]
 80112e0:	f3bf 8f4f 	dsb	sy
 80112e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80112e8:	e7f0      	b.n	80112cc <prvIdleTask+0x8>
 80112ea:	bf00      	nop
 80112ec:	20000d30 	.word	0x20000d30
 80112f0:	e000ed04 	.word	0xe000ed04

080112f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112fa:	2300      	movs	r3, #0
 80112fc:	607b      	str	r3, [r7, #4]
 80112fe:	e00c      	b.n	801131a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	4613      	mov	r3, r2
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	4413      	add	r3, r2
 8011308:	009b      	lsls	r3, r3, #2
 801130a:	4a12      	ldr	r2, [pc, #72]	; (8011354 <prvInitialiseTaskLists+0x60>)
 801130c:	4413      	add	r3, r2
 801130e:	4618      	mov	r0, r3
 8011310:	f7fe ff33 	bl	801017a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	3301      	adds	r3, #1
 8011318:	607b      	str	r3, [r7, #4]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2b06      	cmp	r3, #6
 801131e:	d9ef      	bls.n	8011300 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011320:	480d      	ldr	r0, [pc, #52]	; (8011358 <prvInitialiseTaskLists+0x64>)
 8011322:	f7fe ff2a 	bl	801017a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011326:	480d      	ldr	r0, [pc, #52]	; (801135c <prvInitialiseTaskLists+0x68>)
 8011328:	f7fe ff27 	bl	801017a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801132c:	480c      	ldr	r0, [pc, #48]	; (8011360 <prvInitialiseTaskLists+0x6c>)
 801132e:	f7fe ff24 	bl	801017a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011332:	480c      	ldr	r0, [pc, #48]	; (8011364 <prvInitialiseTaskLists+0x70>)
 8011334:	f7fe ff21 	bl	801017a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011338:	480b      	ldr	r0, [pc, #44]	; (8011368 <prvInitialiseTaskLists+0x74>)
 801133a:	f7fe ff1e 	bl	801017a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801133e:	4b0b      	ldr	r3, [pc, #44]	; (801136c <prvInitialiseTaskLists+0x78>)
 8011340:	4a05      	ldr	r2, [pc, #20]	; (8011358 <prvInitialiseTaskLists+0x64>)
 8011342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011344:	4b0a      	ldr	r3, [pc, #40]	; (8011370 <prvInitialiseTaskLists+0x7c>)
 8011346:	4a05      	ldr	r2, [pc, #20]	; (801135c <prvInitialiseTaskLists+0x68>)
 8011348:	601a      	str	r2, [r3, #0]
}
 801134a:	bf00      	nop
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	20000d30 	.word	0x20000d30
 8011358:	20000dbc 	.word	0x20000dbc
 801135c:	20000dd0 	.word	0x20000dd0
 8011360:	20000dec 	.word	0x20000dec
 8011364:	20000e00 	.word	0x20000e00
 8011368:	20000e18 	.word	0x20000e18
 801136c:	20000de4 	.word	0x20000de4
 8011370:	20000de8 	.word	0x20000de8

08011374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801137a:	e019      	b.n	80113b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801137c:	f000 fab2 	bl	80118e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011380:	4b10      	ldr	r3, [pc, #64]	; (80113c4 <prvCheckTasksWaitingTermination+0x50>)
 8011382:	68db      	ldr	r3, [r3, #12]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	3304      	adds	r3, #4
 801138c:	4618      	mov	r0, r3
 801138e:	f7fe ff7e 	bl	801028e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011392:	4b0d      	ldr	r3, [pc, #52]	; (80113c8 <prvCheckTasksWaitingTermination+0x54>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	3b01      	subs	r3, #1
 8011398:	4a0b      	ldr	r2, [pc, #44]	; (80113c8 <prvCheckTasksWaitingTermination+0x54>)
 801139a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801139c:	4b0b      	ldr	r3, [pc, #44]	; (80113cc <prvCheckTasksWaitingTermination+0x58>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	3b01      	subs	r3, #1
 80113a2:	4a0a      	ldr	r2, [pc, #40]	; (80113cc <prvCheckTasksWaitingTermination+0x58>)
 80113a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80113a6:	f000 facd 	bl	8011944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f000 f810 	bl	80113d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113b0:	4b06      	ldr	r3, [pc, #24]	; (80113cc <prvCheckTasksWaitingTermination+0x58>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d1e1      	bne.n	801137c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80113b8:	bf00      	nop
 80113ba:	bf00      	nop
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20000e00 	.word	0x20000e00
 80113c8:	20000e2c 	.word	0x20000e2c
 80113cc:	20000e14 	.word	0x20000e14

080113d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d108      	bne.n	80113f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113e6:	4618      	mov	r0, r3
 80113e8:	f000 fc6a 	bl	8011cc0 <vPortFree>
				vPortFree( pxTCB );
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 fc67 	bl	8011cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80113f2:	e018      	b.n	8011426 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d103      	bne.n	8011406 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f000 fc5e 	bl	8011cc0 <vPortFree>
	}
 8011404:	e00f      	b.n	8011426 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801140c:	2b02      	cmp	r3, #2
 801140e:	d00a      	beq.n	8011426 <prvDeleteTCB+0x56>
	__asm volatile
 8011410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011414:	f383 8811 	msr	BASEPRI, r3
 8011418:	f3bf 8f6f 	isb	sy
 801141c:	f3bf 8f4f 	dsb	sy
 8011420:	60fb      	str	r3, [r7, #12]
}
 8011422:	bf00      	nop
 8011424:	e7fe      	b.n	8011424 <prvDeleteTCB+0x54>
	}
 8011426:	bf00      	nop
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
	...

08011430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011436:	4b0c      	ldr	r3, [pc, #48]	; (8011468 <prvResetNextTaskUnblockTime+0x38>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d104      	bne.n	801144a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011440:	4b0a      	ldr	r3, [pc, #40]	; (801146c <prvResetNextTaskUnblockTime+0x3c>)
 8011442:	f04f 32ff 	mov.w	r2, #4294967295
 8011446:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011448:	e008      	b.n	801145c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801144a:	4b07      	ldr	r3, [pc, #28]	; (8011468 <prvResetNextTaskUnblockTime+0x38>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	4a04      	ldr	r2, [pc, #16]	; (801146c <prvResetNextTaskUnblockTime+0x3c>)
 801145a:	6013      	str	r3, [r2, #0]
}
 801145c:	bf00      	nop
 801145e:	370c      	adds	r7, #12
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr
 8011468:	20000de4 	.word	0x20000de4
 801146c:	20000e4c 	.word	0x20000e4c

08011470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011476:	4b0b      	ldr	r3, [pc, #44]	; (80114a4 <xTaskGetSchedulerState+0x34>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d102      	bne.n	8011484 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801147e:	2301      	movs	r3, #1
 8011480:	607b      	str	r3, [r7, #4]
 8011482:	e008      	b.n	8011496 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011484:	4b08      	ldr	r3, [pc, #32]	; (80114a8 <xTaskGetSchedulerState+0x38>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d102      	bne.n	8011492 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801148c:	2302      	movs	r3, #2
 801148e:	607b      	str	r3, [r7, #4]
 8011490:	e001      	b.n	8011496 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011492:	2300      	movs	r3, #0
 8011494:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011496:	687b      	ldr	r3, [r7, #4]
	}
 8011498:	4618      	mov	r0, r3
 801149a:	370c      	adds	r7, #12
 801149c:	46bd      	mov	sp, r7
 801149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a2:	4770      	bx	lr
 80114a4:	20000e38 	.word	0x20000e38
 80114a8:	20000e54 	.word	0x20000e54

080114ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b086      	sub	sp, #24
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80114b8:	2300      	movs	r3, #0
 80114ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d06e      	beq.n	80115a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80114c2:	4b3a      	ldr	r3, [pc, #232]	; (80115ac <xTaskPriorityDisinherit+0x100>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	693a      	ldr	r2, [r7, #16]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d00a      	beq.n	80114e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80114cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d0:	f383 8811 	msr	BASEPRI, r3
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	f3bf 8f4f 	dsb	sy
 80114dc:	60fb      	str	r3, [r7, #12]
}
 80114de:	bf00      	nop
 80114e0:	e7fe      	b.n	80114e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d10a      	bne.n	8011500 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80114ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ee:	f383 8811 	msr	BASEPRI, r3
 80114f2:	f3bf 8f6f 	isb	sy
 80114f6:	f3bf 8f4f 	dsb	sy
 80114fa:	60bb      	str	r3, [r7, #8]
}
 80114fc:	bf00      	nop
 80114fe:	e7fe      	b.n	80114fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011504:	1e5a      	subs	r2, r3, #1
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011512:	429a      	cmp	r2, r3
 8011514:	d044      	beq.n	80115a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801151a:	2b00      	cmp	r3, #0
 801151c:	d140      	bne.n	80115a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	3304      	adds	r3, #4
 8011522:	4618      	mov	r0, r3
 8011524:	f7fe feb3 	bl	801028e <uxListRemove>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d115      	bne.n	801155a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011532:	491f      	ldr	r1, [pc, #124]	; (80115b0 <xTaskPriorityDisinherit+0x104>)
 8011534:	4613      	mov	r3, r2
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4413      	add	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	440b      	add	r3, r1
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d10a      	bne.n	801155a <xTaskPriorityDisinherit+0xae>
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011548:	2201      	movs	r2, #1
 801154a:	fa02 f303 	lsl.w	r3, r2, r3
 801154e:	43da      	mvns	r2, r3
 8011550:	4b18      	ldr	r3, [pc, #96]	; (80115b4 <xTaskPriorityDisinherit+0x108>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	4013      	ands	r3, r2
 8011556:	4a17      	ldr	r2, [pc, #92]	; (80115b4 <xTaskPriorityDisinherit+0x108>)
 8011558:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011566:	f1c3 0207 	rsb	r2, r3, #7
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011572:	2201      	movs	r2, #1
 8011574:	409a      	lsls	r2, r3
 8011576:	4b0f      	ldr	r3, [pc, #60]	; (80115b4 <xTaskPriorityDisinherit+0x108>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4313      	orrs	r3, r2
 801157c:	4a0d      	ldr	r2, [pc, #52]	; (80115b4 <xTaskPriorityDisinherit+0x108>)
 801157e:	6013      	str	r3, [r2, #0]
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011584:	4613      	mov	r3, r2
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	4413      	add	r3, r2
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	4a08      	ldr	r2, [pc, #32]	; (80115b0 <xTaskPriorityDisinherit+0x104>)
 801158e:	441a      	add	r2, r3
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	3304      	adds	r3, #4
 8011594:	4619      	mov	r1, r3
 8011596:	4610      	mov	r0, r2
 8011598:	f7fe fe1c 	bl	80101d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801159c:	2301      	movs	r3, #1
 801159e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80115a0:	697b      	ldr	r3, [r7, #20]
	}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3718      	adds	r7, #24
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	20000d2c 	.word	0x20000d2c
 80115b0:	20000d30 	.word	0x20000d30
 80115b4:	20000e34 	.word	0x20000e34

080115b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80115c2:	4b29      	ldr	r3, [pc, #164]	; (8011668 <prvAddCurrentTaskToDelayedList+0xb0>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115c8:	4b28      	ldr	r3, [pc, #160]	; (801166c <prvAddCurrentTaskToDelayedList+0xb4>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	3304      	adds	r3, #4
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7fe fe5d 	bl	801028e <uxListRemove>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d10b      	bne.n	80115f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80115da:	4b24      	ldr	r3, [pc, #144]	; (801166c <prvAddCurrentTaskToDelayedList+0xb4>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e0:	2201      	movs	r2, #1
 80115e2:	fa02 f303 	lsl.w	r3, r2, r3
 80115e6:	43da      	mvns	r2, r3
 80115e8:	4b21      	ldr	r3, [pc, #132]	; (8011670 <prvAddCurrentTaskToDelayedList+0xb8>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	4013      	ands	r3, r2
 80115ee:	4a20      	ldr	r2, [pc, #128]	; (8011670 <prvAddCurrentTaskToDelayedList+0xb8>)
 80115f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f8:	d10a      	bne.n	8011610 <prvAddCurrentTaskToDelayedList+0x58>
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d007      	beq.n	8011610 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011600:	4b1a      	ldr	r3, [pc, #104]	; (801166c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	3304      	adds	r3, #4
 8011606:	4619      	mov	r1, r3
 8011608:	481a      	ldr	r0, [pc, #104]	; (8011674 <prvAddCurrentTaskToDelayedList+0xbc>)
 801160a:	f7fe fde3 	bl	80101d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801160e:	e026      	b.n	801165e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	4413      	add	r3, r2
 8011616:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011618:	4b14      	ldr	r3, [pc, #80]	; (801166c <prvAddCurrentTaskToDelayedList+0xb4>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	68ba      	ldr	r2, [r7, #8]
 801161e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	429a      	cmp	r2, r3
 8011626:	d209      	bcs.n	801163c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011628:	4b13      	ldr	r3, [pc, #76]	; (8011678 <prvAddCurrentTaskToDelayedList+0xc0>)
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	4b0f      	ldr	r3, [pc, #60]	; (801166c <prvAddCurrentTaskToDelayedList+0xb4>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	3304      	adds	r3, #4
 8011632:	4619      	mov	r1, r3
 8011634:	4610      	mov	r0, r2
 8011636:	f7fe fdf1 	bl	801021c <vListInsert>
}
 801163a:	e010      	b.n	801165e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801163c:	4b0f      	ldr	r3, [pc, #60]	; (801167c <prvAddCurrentTaskToDelayedList+0xc4>)
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	4b0a      	ldr	r3, [pc, #40]	; (801166c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	3304      	adds	r3, #4
 8011646:	4619      	mov	r1, r3
 8011648:	4610      	mov	r0, r2
 801164a:	f7fe fde7 	bl	801021c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801164e:	4b0c      	ldr	r3, [pc, #48]	; (8011680 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	68ba      	ldr	r2, [r7, #8]
 8011654:	429a      	cmp	r2, r3
 8011656:	d202      	bcs.n	801165e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011658:	4a09      	ldr	r2, [pc, #36]	; (8011680 <prvAddCurrentTaskToDelayedList+0xc8>)
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	6013      	str	r3, [r2, #0]
}
 801165e:	bf00      	nop
 8011660:	3710      	adds	r7, #16
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop
 8011668:	20000e30 	.word	0x20000e30
 801166c:	20000d2c 	.word	0x20000d2c
 8011670:	20000e34 	.word	0x20000e34
 8011674:	20000e18 	.word	0x20000e18
 8011678:	20000de8 	.word	0x20000de8
 801167c:	20000de4 	.word	0x20000de4
 8011680:	20000e4c 	.word	0x20000e4c

08011684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011684:	b480      	push	{r7}
 8011686:	b085      	sub	sp, #20
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	3b04      	subs	r3, #4
 8011694:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801169c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	3b04      	subs	r3, #4
 80116a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	f023 0201 	bic.w	r2, r3, #1
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	3b04      	subs	r3, #4
 80116b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80116b4:	4a0c      	ldr	r2, [pc, #48]	; (80116e8 <pxPortInitialiseStack+0x64>)
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	3b14      	subs	r3, #20
 80116be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	3b04      	subs	r3, #4
 80116ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f06f 0202 	mvn.w	r2, #2
 80116d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	3b20      	subs	r3, #32
 80116d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80116da:	68fb      	ldr	r3, [r7, #12]
}
 80116dc:	4618      	mov	r0, r3
 80116de:	3714      	adds	r7, #20
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr
 80116e8:	080116ed 	.word	0x080116ed

080116ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80116ec:	b480      	push	{r7}
 80116ee:	b085      	sub	sp, #20
 80116f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80116f2:	2300      	movs	r3, #0
 80116f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80116f6:	4b12      	ldr	r3, [pc, #72]	; (8011740 <prvTaskExitError+0x54>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116fe:	d00a      	beq.n	8011716 <prvTaskExitError+0x2a>
	__asm volatile
 8011700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011704:	f383 8811 	msr	BASEPRI, r3
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	60fb      	str	r3, [r7, #12]
}
 8011712:	bf00      	nop
 8011714:	e7fe      	b.n	8011714 <prvTaskExitError+0x28>
	__asm volatile
 8011716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801171a:	f383 8811 	msr	BASEPRI, r3
 801171e:	f3bf 8f6f 	isb	sy
 8011722:	f3bf 8f4f 	dsb	sy
 8011726:	60bb      	str	r3, [r7, #8]
}
 8011728:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801172a:	bf00      	nop
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d0fc      	beq.n	801172c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011732:	bf00      	nop
 8011734:	bf00      	nop
 8011736:	3714      	adds	r7, #20
 8011738:	46bd      	mov	sp, r7
 801173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173e:	4770      	bx	lr
 8011740:	2000000c 	.word	0x2000000c
	...

08011750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011750:	4b07      	ldr	r3, [pc, #28]	; (8011770 <pxCurrentTCBConst2>)
 8011752:	6819      	ldr	r1, [r3, #0]
 8011754:	6808      	ldr	r0, [r1, #0]
 8011756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175a:	f380 8809 	msr	PSP, r0
 801175e:	f3bf 8f6f 	isb	sy
 8011762:	f04f 0000 	mov.w	r0, #0
 8011766:	f380 8811 	msr	BASEPRI, r0
 801176a:	4770      	bx	lr
 801176c:	f3af 8000 	nop.w

08011770 <pxCurrentTCBConst2>:
 8011770:	20000d2c 	.word	0x20000d2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011774:	bf00      	nop
 8011776:	bf00      	nop

08011778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011778:	4808      	ldr	r0, [pc, #32]	; (801179c <prvPortStartFirstTask+0x24>)
 801177a:	6800      	ldr	r0, [r0, #0]
 801177c:	6800      	ldr	r0, [r0, #0]
 801177e:	f380 8808 	msr	MSP, r0
 8011782:	f04f 0000 	mov.w	r0, #0
 8011786:	f380 8814 	msr	CONTROL, r0
 801178a:	b662      	cpsie	i
 801178c:	b661      	cpsie	f
 801178e:	f3bf 8f4f 	dsb	sy
 8011792:	f3bf 8f6f 	isb	sy
 8011796:	df00      	svc	0
 8011798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801179a:	bf00      	nop
 801179c:	e000ed08 	.word	0xe000ed08

080117a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b086      	sub	sp, #24
 80117a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80117a6:	4b46      	ldr	r3, [pc, #280]	; (80118c0 <xPortStartScheduler+0x120>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4a46      	ldr	r2, [pc, #280]	; (80118c4 <xPortStartScheduler+0x124>)
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d10a      	bne.n	80117c6 <xPortStartScheduler+0x26>
	__asm volatile
 80117b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b4:	f383 8811 	msr	BASEPRI, r3
 80117b8:	f3bf 8f6f 	isb	sy
 80117bc:	f3bf 8f4f 	dsb	sy
 80117c0:	613b      	str	r3, [r7, #16]
}
 80117c2:	bf00      	nop
 80117c4:	e7fe      	b.n	80117c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80117c6:	4b3e      	ldr	r3, [pc, #248]	; (80118c0 <xPortStartScheduler+0x120>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	4a3f      	ldr	r2, [pc, #252]	; (80118c8 <xPortStartScheduler+0x128>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d10a      	bne.n	80117e6 <xPortStartScheduler+0x46>
	__asm volatile
 80117d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d4:	f383 8811 	msr	BASEPRI, r3
 80117d8:	f3bf 8f6f 	isb	sy
 80117dc:	f3bf 8f4f 	dsb	sy
 80117e0:	60fb      	str	r3, [r7, #12]
}
 80117e2:	bf00      	nop
 80117e4:	e7fe      	b.n	80117e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80117e6:	4b39      	ldr	r3, [pc, #228]	; (80118cc <xPortStartScheduler+0x12c>)
 80117e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	22ff      	movs	r2, #255	; 0xff
 80117f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	b2db      	uxtb	r3, r3
 80117fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011800:	78fb      	ldrb	r3, [r7, #3]
 8011802:	b2db      	uxtb	r3, r3
 8011804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011808:	b2da      	uxtb	r2, r3
 801180a:	4b31      	ldr	r3, [pc, #196]	; (80118d0 <xPortStartScheduler+0x130>)
 801180c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801180e:	4b31      	ldr	r3, [pc, #196]	; (80118d4 <xPortStartScheduler+0x134>)
 8011810:	2207      	movs	r2, #7
 8011812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011814:	e009      	b.n	801182a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011816:	4b2f      	ldr	r3, [pc, #188]	; (80118d4 <xPortStartScheduler+0x134>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	3b01      	subs	r3, #1
 801181c:	4a2d      	ldr	r2, [pc, #180]	; (80118d4 <xPortStartScheduler+0x134>)
 801181e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011820:	78fb      	ldrb	r3, [r7, #3]
 8011822:	b2db      	uxtb	r3, r3
 8011824:	005b      	lsls	r3, r3, #1
 8011826:	b2db      	uxtb	r3, r3
 8011828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801182a:	78fb      	ldrb	r3, [r7, #3]
 801182c:	b2db      	uxtb	r3, r3
 801182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011832:	2b80      	cmp	r3, #128	; 0x80
 8011834:	d0ef      	beq.n	8011816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011836:	4b27      	ldr	r3, [pc, #156]	; (80118d4 <xPortStartScheduler+0x134>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f1c3 0307 	rsb	r3, r3, #7
 801183e:	2b04      	cmp	r3, #4
 8011840:	d00a      	beq.n	8011858 <xPortStartScheduler+0xb8>
	__asm volatile
 8011842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011846:	f383 8811 	msr	BASEPRI, r3
 801184a:	f3bf 8f6f 	isb	sy
 801184e:	f3bf 8f4f 	dsb	sy
 8011852:	60bb      	str	r3, [r7, #8]
}
 8011854:	bf00      	nop
 8011856:	e7fe      	b.n	8011856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011858:	4b1e      	ldr	r3, [pc, #120]	; (80118d4 <xPortStartScheduler+0x134>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	021b      	lsls	r3, r3, #8
 801185e:	4a1d      	ldr	r2, [pc, #116]	; (80118d4 <xPortStartScheduler+0x134>)
 8011860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011862:	4b1c      	ldr	r3, [pc, #112]	; (80118d4 <xPortStartScheduler+0x134>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801186a:	4a1a      	ldr	r2, [pc, #104]	; (80118d4 <xPortStartScheduler+0x134>)
 801186c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	b2da      	uxtb	r2, r3
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011876:	4b18      	ldr	r3, [pc, #96]	; (80118d8 <xPortStartScheduler+0x138>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4a17      	ldr	r2, [pc, #92]	; (80118d8 <xPortStartScheduler+0x138>)
 801187c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011882:	4b15      	ldr	r3, [pc, #84]	; (80118d8 <xPortStartScheduler+0x138>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	4a14      	ldr	r2, [pc, #80]	; (80118d8 <xPortStartScheduler+0x138>)
 8011888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801188c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801188e:	f000 f8dd 	bl	8011a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011892:	4b12      	ldr	r3, [pc, #72]	; (80118dc <xPortStartScheduler+0x13c>)
 8011894:	2200      	movs	r2, #0
 8011896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011898:	f000 f8fc 	bl	8011a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801189c:	4b10      	ldr	r3, [pc, #64]	; (80118e0 <xPortStartScheduler+0x140>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	4a0f      	ldr	r2, [pc, #60]	; (80118e0 <xPortStartScheduler+0x140>)
 80118a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80118a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80118a8:	f7ff ff66 	bl	8011778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80118ac:	f7ff fba4 	bl	8010ff8 <vTaskSwitchContext>
	prvTaskExitError();
 80118b0:	f7ff ff1c 	bl	80116ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80118b4:	2300      	movs	r3, #0
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3718      	adds	r7, #24
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	e000ed00 	.word	0xe000ed00
 80118c4:	410fc271 	.word	0x410fc271
 80118c8:	410fc270 	.word	0x410fc270
 80118cc:	e000e400 	.word	0xe000e400
 80118d0:	20000e58 	.word	0x20000e58
 80118d4:	20000e5c 	.word	0x20000e5c
 80118d8:	e000ed20 	.word	0xe000ed20
 80118dc:	2000000c 	.word	0x2000000c
 80118e0:	e000ef34 	.word	0xe000ef34

080118e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
	__asm volatile
 80118ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ee:	f383 8811 	msr	BASEPRI, r3
 80118f2:	f3bf 8f6f 	isb	sy
 80118f6:	f3bf 8f4f 	dsb	sy
 80118fa:	607b      	str	r3, [r7, #4]
}
 80118fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80118fe:	4b0f      	ldr	r3, [pc, #60]	; (801193c <vPortEnterCritical+0x58>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	3301      	adds	r3, #1
 8011904:	4a0d      	ldr	r2, [pc, #52]	; (801193c <vPortEnterCritical+0x58>)
 8011906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011908:	4b0c      	ldr	r3, [pc, #48]	; (801193c <vPortEnterCritical+0x58>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	2b01      	cmp	r3, #1
 801190e:	d10f      	bne.n	8011930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011910:	4b0b      	ldr	r3, [pc, #44]	; (8011940 <vPortEnterCritical+0x5c>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	b2db      	uxtb	r3, r3
 8011916:	2b00      	cmp	r3, #0
 8011918:	d00a      	beq.n	8011930 <vPortEnterCritical+0x4c>
	__asm volatile
 801191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191e:	f383 8811 	msr	BASEPRI, r3
 8011922:	f3bf 8f6f 	isb	sy
 8011926:	f3bf 8f4f 	dsb	sy
 801192a:	603b      	str	r3, [r7, #0]
}
 801192c:	bf00      	nop
 801192e:	e7fe      	b.n	801192e <vPortEnterCritical+0x4a>
	}
}
 8011930:	bf00      	nop
 8011932:	370c      	adds	r7, #12
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr
 801193c:	2000000c 	.word	0x2000000c
 8011940:	e000ed04 	.word	0xe000ed04

08011944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011944:	b480      	push	{r7}
 8011946:	b083      	sub	sp, #12
 8011948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801194a:	4b12      	ldr	r3, [pc, #72]	; (8011994 <vPortExitCritical+0x50>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d10a      	bne.n	8011968 <vPortExitCritical+0x24>
	__asm volatile
 8011952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011956:	f383 8811 	msr	BASEPRI, r3
 801195a:	f3bf 8f6f 	isb	sy
 801195e:	f3bf 8f4f 	dsb	sy
 8011962:	607b      	str	r3, [r7, #4]
}
 8011964:	bf00      	nop
 8011966:	e7fe      	b.n	8011966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011968:	4b0a      	ldr	r3, [pc, #40]	; (8011994 <vPortExitCritical+0x50>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	3b01      	subs	r3, #1
 801196e:	4a09      	ldr	r2, [pc, #36]	; (8011994 <vPortExitCritical+0x50>)
 8011970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011972:	4b08      	ldr	r3, [pc, #32]	; (8011994 <vPortExitCritical+0x50>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d105      	bne.n	8011986 <vPortExitCritical+0x42>
 801197a:	2300      	movs	r3, #0
 801197c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	f383 8811 	msr	BASEPRI, r3
}
 8011984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011986:	bf00      	nop
 8011988:	370c      	adds	r7, #12
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr
 8011992:	bf00      	nop
 8011994:	2000000c 	.word	0x2000000c
	...

080119a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80119a0:	f3ef 8009 	mrs	r0, PSP
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	4b15      	ldr	r3, [pc, #84]	; (8011a00 <pxCurrentTCBConst>)
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	f01e 0f10 	tst.w	lr, #16
 80119b0:	bf08      	it	eq
 80119b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80119b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ba:	6010      	str	r0, [r2, #0]
 80119bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80119c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80119c4:	f380 8811 	msr	BASEPRI, r0
 80119c8:	f3bf 8f4f 	dsb	sy
 80119cc:	f3bf 8f6f 	isb	sy
 80119d0:	f7ff fb12 	bl	8010ff8 <vTaskSwitchContext>
 80119d4:	f04f 0000 	mov.w	r0, #0
 80119d8:	f380 8811 	msr	BASEPRI, r0
 80119dc:	bc09      	pop	{r0, r3}
 80119de:	6819      	ldr	r1, [r3, #0]
 80119e0:	6808      	ldr	r0, [r1, #0]
 80119e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e6:	f01e 0f10 	tst.w	lr, #16
 80119ea:	bf08      	it	eq
 80119ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80119f0:	f380 8809 	msr	PSP, r0
 80119f4:	f3bf 8f6f 	isb	sy
 80119f8:	4770      	bx	lr
 80119fa:	bf00      	nop
 80119fc:	f3af 8000 	nop.w

08011a00 <pxCurrentTCBConst>:
 8011a00:	20000d2c 	.word	0x20000d2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011a04:	bf00      	nop
 8011a06:	bf00      	nop

08011a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8011a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a12:	f383 8811 	msr	BASEPRI, r3
 8011a16:	f3bf 8f6f 	isb	sy
 8011a1a:	f3bf 8f4f 	dsb	sy
 8011a1e:	607b      	str	r3, [r7, #4]
}
 8011a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011a22:	f7ff fa31 	bl	8010e88 <xTaskIncrementTick>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d003      	beq.n	8011a34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011a2c:	4b06      	ldr	r3, [pc, #24]	; (8011a48 <SysTick_Handler+0x40>)
 8011a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a32:	601a      	str	r2, [r3, #0]
 8011a34:	2300      	movs	r3, #0
 8011a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	f383 8811 	msr	BASEPRI, r3
}
 8011a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011a40:	bf00      	nop
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	e000ed04 	.word	0xe000ed04

08011a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a50:	4b0b      	ldr	r3, [pc, #44]	; (8011a80 <vPortSetupTimerInterrupt+0x34>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a56:	4b0b      	ldr	r3, [pc, #44]	; (8011a84 <vPortSetupTimerInterrupt+0x38>)
 8011a58:	2200      	movs	r2, #0
 8011a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a5c:	4b0a      	ldr	r3, [pc, #40]	; (8011a88 <vPortSetupTimerInterrupt+0x3c>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4a0a      	ldr	r2, [pc, #40]	; (8011a8c <vPortSetupTimerInterrupt+0x40>)
 8011a62:	fba2 2303 	umull	r2, r3, r2, r3
 8011a66:	099b      	lsrs	r3, r3, #6
 8011a68:	4a09      	ldr	r2, [pc, #36]	; (8011a90 <vPortSetupTimerInterrupt+0x44>)
 8011a6a:	3b01      	subs	r3, #1
 8011a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011a6e:	4b04      	ldr	r3, [pc, #16]	; (8011a80 <vPortSetupTimerInterrupt+0x34>)
 8011a70:	2207      	movs	r2, #7
 8011a72:	601a      	str	r2, [r3, #0]
}
 8011a74:	bf00      	nop
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	e000e010 	.word	0xe000e010
 8011a84:	e000e018 	.word	0xe000e018
 8011a88:	20000000 	.word	0x20000000
 8011a8c:	10624dd3 	.word	0x10624dd3
 8011a90:	e000e014 	.word	0xe000e014

08011a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011a94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011aa4 <vPortEnableVFP+0x10>
 8011a98:	6801      	ldr	r1, [r0, #0]
 8011a9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011a9e:	6001      	str	r1, [r0, #0]
 8011aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011aa2:	bf00      	nop
 8011aa4:	e000ed88 	.word	0xe000ed88

08011aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b085      	sub	sp, #20
 8011aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011aae:	f3ef 8305 	mrs	r3, IPSR
 8011ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2b0f      	cmp	r3, #15
 8011ab8:	d914      	bls.n	8011ae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011aba:	4a17      	ldr	r2, [pc, #92]	; (8011b18 <vPortValidateInterruptPriority+0x70>)
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	4413      	add	r3, r2
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011ac4:	4b15      	ldr	r3, [pc, #84]	; (8011b1c <vPortValidateInterruptPriority+0x74>)
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	7afa      	ldrb	r2, [r7, #11]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d20a      	bcs.n	8011ae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad2:	f383 8811 	msr	BASEPRI, r3
 8011ad6:	f3bf 8f6f 	isb	sy
 8011ada:	f3bf 8f4f 	dsb	sy
 8011ade:	607b      	str	r3, [r7, #4]
}
 8011ae0:	bf00      	nop
 8011ae2:	e7fe      	b.n	8011ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011ae4:	4b0e      	ldr	r3, [pc, #56]	; (8011b20 <vPortValidateInterruptPriority+0x78>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011aec:	4b0d      	ldr	r3, [pc, #52]	; (8011b24 <vPortValidateInterruptPriority+0x7c>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d90a      	bls.n	8011b0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af8:	f383 8811 	msr	BASEPRI, r3
 8011afc:	f3bf 8f6f 	isb	sy
 8011b00:	f3bf 8f4f 	dsb	sy
 8011b04:	603b      	str	r3, [r7, #0]
}
 8011b06:	bf00      	nop
 8011b08:	e7fe      	b.n	8011b08 <vPortValidateInterruptPriority+0x60>
	}
 8011b0a:	bf00      	nop
 8011b0c:	3714      	adds	r7, #20
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	e000e3f0 	.word	0xe000e3f0
 8011b1c:	20000e58 	.word	0x20000e58
 8011b20:	e000ed0c 	.word	0xe000ed0c
 8011b24:	20000e5c 	.word	0x20000e5c

08011b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b08a      	sub	sp, #40	; 0x28
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011b30:	2300      	movs	r3, #0
 8011b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011b34:	f7ff f8fe 	bl	8010d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011b38:	4b5b      	ldr	r3, [pc, #364]	; (8011ca8 <pvPortMalloc+0x180>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d101      	bne.n	8011b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011b40:	f000 f920 	bl	8011d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011b44:	4b59      	ldr	r3, [pc, #356]	; (8011cac <pvPortMalloc+0x184>)
 8011b46:	681a      	ldr	r2, [r3, #0]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	4013      	ands	r3, r2
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	f040 8093 	bne.w	8011c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d01d      	beq.n	8011b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011b58:	2208      	movs	r2, #8
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f003 0307 	and.w	r3, r3, #7
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d014      	beq.n	8011b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f023 0307 	bic.w	r3, r3, #7
 8011b70:	3308      	adds	r3, #8
 8011b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f003 0307 	and.w	r3, r3, #7
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d00a      	beq.n	8011b94 <pvPortMalloc+0x6c>
	__asm volatile
 8011b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b82:	f383 8811 	msr	BASEPRI, r3
 8011b86:	f3bf 8f6f 	isb	sy
 8011b8a:	f3bf 8f4f 	dsb	sy
 8011b8e:	617b      	str	r3, [r7, #20]
}
 8011b90:	bf00      	nop
 8011b92:	e7fe      	b.n	8011b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d06e      	beq.n	8011c78 <pvPortMalloc+0x150>
 8011b9a:	4b45      	ldr	r3, [pc, #276]	; (8011cb0 <pvPortMalloc+0x188>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d869      	bhi.n	8011c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ba4:	4b43      	ldr	r3, [pc, #268]	; (8011cb4 <pvPortMalloc+0x18c>)
 8011ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011ba8:	4b42      	ldr	r3, [pc, #264]	; (8011cb4 <pvPortMalloc+0x18c>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bae:	e004      	b.n	8011bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d903      	bls.n	8011bcc <pvPortMalloc+0xa4>
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1f1      	bne.n	8011bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011bcc:	4b36      	ldr	r3, [pc, #216]	; (8011ca8 <pvPortMalloc+0x180>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d050      	beq.n	8011c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011bd6:	6a3b      	ldr	r3, [r7, #32]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2208      	movs	r2, #8
 8011bdc:	4413      	add	r3, r2
 8011bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	6a3b      	ldr	r3, [r7, #32]
 8011be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bea:	685a      	ldr	r2, [r3, #4]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	1ad2      	subs	r2, r2, r3
 8011bf0:	2308      	movs	r3, #8
 8011bf2:	005b      	lsls	r3, r3, #1
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d91f      	bls.n	8011c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	f003 0307 	and.w	r3, r3, #7
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d00a      	beq.n	8011c20 <pvPortMalloc+0xf8>
	__asm volatile
 8011c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0e:	f383 8811 	msr	BASEPRI, r3
 8011c12:	f3bf 8f6f 	isb	sy
 8011c16:	f3bf 8f4f 	dsb	sy
 8011c1a:	613b      	str	r3, [r7, #16]
}
 8011c1c:	bf00      	nop
 8011c1e:	e7fe      	b.n	8011c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c22:	685a      	ldr	r2, [r3, #4]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	1ad2      	subs	r2, r2, r3
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011c32:	69b8      	ldr	r0, [r7, #24]
 8011c34:	f000 f908 	bl	8011e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011c38:	4b1d      	ldr	r3, [pc, #116]	; (8011cb0 <pvPortMalloc+0x188>)
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	1ad3      	subs	r3, r2, r3
 8011c42:	4a1b      	ldr	r2, [pc, #108]	; (8011cb0 <pvPortMalloc+0x188>)
 8011c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011c46:	4b1a      	ldr	r3, [pc, #104]	; (8011cb0 <pvPortMalloc+0x188>)
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	4b1b      	ldr	r3, [pc, #108]	; (8011cb8 <pvPortMalloc+0x190>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d203      	bcs.n	8011c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011c52:	4b17      	ldr	r3, [pc, #92]	; (8011cb0 <pvPortMalloc+0x188>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	4a18      	ldr	r2, [pc, #96]	; (8011cb8 <pvPortMalloc+0x190>)
 8011c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5c:	685a      	ldr	r2, [r3, #4]
 8011c5e:	4b13      	ldr	r3, [pc, #76]	; (8011cac <pvPortMalloc+0x184>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	431a      	orrs	r2, r3
 8011c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011c6e:	4b13      	ldr	r3, [pc, #76]	; (8011cbc <pvPortMalloc+0x194>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3301      	adds	r3, #1
 8011c74:	4a11      	ldr	r2, [pc, #68]	; (8011cbc <pvPortMalloc+0x194>)
 8011c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011c78:	f7ff f86a 	bl	8010d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c7c:	69fb      	ldr	r3, [r7, #28]
 8011c7e:	f003 0307 	and.w	r3, r3, #7
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d00a      	beq.n	8011c9c <pvPortMalloc+0x174>
	__asm volatile
 8011c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c8a:	f383 8811 	msr	BASEPRI, r3
 8011c8e:	f3bf 8f6f 	isb	sy
 8011c92:	f3bf 8f4f 	dsb	sy
 8011c96:	60fb      	str	r3, [r7, #12]
}
 8011c98:	bf00      	nop
 8011c9a:	e7fe      	b.n	8011c9a <pvPortMalloc+0x172>
	return pvReturn;
 8011c9c:	69fb      	ldr	r3, [r7, #28]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3728      	adds	r7, #40	; 0x28
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	20004a68 	.word	0x20004a68
 8011cac:	20004a7c 	.word	0x20004a7c
 8011cb0:	20004a6c 	.word	0x20004a6c
 8011cb4:	20004a60 	.word	0x20004a60
 8011cb8:	20004a70 	.word	0x20004a70
 8011cbc:	20004a74 	.word	0x20004a74

08011cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b086      	sub	sp, #24
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d04d      	beq.n	8011d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011cd2:	2308      	movs	r3, #8
 8011cd4:	425b      	negs	r3, r3
 8011cd6:	697a      	ldr	r2, [r7, #20]
 8011cd8:	4413      	add	r3, r2
 8011cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	685a      	ldr	r2, [r3, #4]
 8011ce4:	4b24      	ldr	r3, [pc, #144]	; (8011d78 <vPortFree+0xb8>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4013      	ands	r3, r2
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d10a      	bne.n	8011d04 <vPortFree+0x44>
	__asm volatile
 8011cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf2:	f383 8811 	msr	BASEPRI, r3
 8011cf6:	f3bf 8f6f 	isb	sy
 8011cfa:	f3bf 8f4f 	dsb	sy
 8011cfe:	60fb      	str	r3, [r7, #12]
}
 8011d00:	bf00      	nop
 8011d02:	e7fe      	b.n	8011d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d00a      	beq.n	8011d22 <vPortFree+0x62>
	__asm volatile
 8011d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d10:	f383 8811 	msr	BASEPRI, r3
 8011d14:	f3bf 8f6f 	isb	sy
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	60bb      	str	r3, [r7, #8]
}
 8011d1e:	bf00      	nop
 8011d20:	e7fe      	b.n	8011d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	685a      	ldr	r2, [r3, #4]
 8011d26:	4b14      	ldr	r3, [pc, #80]	; (8011d78 <vPortFree+0xb8>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	4013      	ands	r3, r2
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d01e      	beq.n	8011d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d11a      	bne.n	8011d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	685a      	ldr	r2, [r3, #4]
 8011d3c:	4b0e      	ldr	r3, [pc, #56]	; (8011d78 <vPortFree+0xb8>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	43db      	mvns	r3, r3
 8011d42:	401a      	ands	r2, r3
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011d48:	f7fe fff4 	bl	8010d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	685a      	ldr	r2, [r3, #4]
 8011d50:	4b0a      	ldr	r3, [pc, #40]	; (8011d7c <vPortFree+0xbc>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	4413      	add	r3, r2
 8011d56:	4a09      	ldr	r2, [pc, #36]	; (8011d7c <vPortFree+0xbc>)
 8011d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011d5a:	6938      	ldr	r0, [r7, #16]
 8011d5c:	f000 f874 	bl	8011e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011d60:	4b07      	ldr	r3, [pc, #28]	; (8011d80 <vPortFree+0xc0>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	3301      	adds	r3, #1
 8011d66:	4a06      	ldr	r2, [pc, #24]	; (8011d80 <vPortFree+0xc0>)
 8011d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011d6a:	f7fe fff1 	bl	8010d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011d6e:	bf00      	nop
 8011d70:	3718      	adds	r7, #24
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	20004a7c 	.word	0x20004a7c
 8011d7c:	20004a6c 	.word	0x20004a6c
 8011d80:	20004a78 	.word	0x20004a78

08011d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011d84:	b480      	push	{r7}
 8011d86:	b085      	sub	sp, #20
 8011d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011d90:	4b27      	ldr	r3, [pc, #156]	; (8011e30 <prvHeapInit+0xac>)
 8011d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f003 0307 	and.w	r3, r3, #7
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d00c      	beq.n	8011db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	3307      	adds	r3, #7
 8011da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f023 0307 	bic.w	r3, r3, #7
 8011daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	1ad3      	subs	r3, r2, r3
 8011db2:	4a1f      	ldr	r2, [pc, #124]	; (8011e30 <prvHeapInit+0xac>)
 8011db4:	4413      	add	r3, r2
 8011db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011dbc:	4a1d      	ldr	r2, [pc, #116]	; (8011e34 <prvHeapInit+0xb0>)
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011dc2:	4b1c      	ldr	r3, [pc, #112]	; (8011e34 <prvHeapInit+0xb0>)
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	68ba      	ldr	r2, [r7, #8]
 8011dcc:	4413      	add	r3, r2
 8011dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011dd0:	2208      	movs	r2, #8
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	1a9b      	subs	r3, r3, r2
 8011dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	f023 0307 	bic.w	r3, r3, #7
 8011dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	4a15      	ldr	r2, [pc, #84]	; (8011e38 <prvHeapInit+0xb4>)
 8011de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011de6:	4b14      	ldr	r3, [pc, #80]	; (8011e38 <prvHeapInit+0xb4>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	2200      	movs	r2, #0
 8011dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011dee:	4b12      	ldr	r3, [pc, #72]	; (8011e38 <prvHeapInit+0xb4>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	2200      	movs	r2, #0
 8011df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	1ad2      	subs	r2, r2, r3
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011e04:	4b0c      	ldr	r3, [pc, #48]	; (8011e38 <prvHeapInit+0xb4>)
 8011e06:	681a      	ldr	r2, [r3, #0]
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	4a0a      	ldr	r2, [pc, #40]	; (8011e3c <prvHeapInit+0xb8>)
 8011e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	4a09      	ldr	r2, [pc, #36]	; (8011e40 <prvHeapInit+0xbc>)
 8011e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011e1c:	4b09      	ldr	r3, [pc, #36]	; (8011e44 <prvHeapInit+0xc0>)
 8011e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011e22:	601a      	str	r2, [r3, #0]
}
 8011e24:	bf00      	nop
 8011e26:	3714      	adds	r7, #20
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr
 8011e30:	20000e60 	.word	0x20000e60
 8011e34:	20004a60 	.word	0x20004a60
 8011e38:	20004a68 	.word	0x20004a68
 8011e3c:	20004a70 	.word	0x20004a70
 8011e40:	20004a6c 	.word	0x20004a6c
 8011e44:	20004a7c 	.word	0x20004a7c

08011e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011e48:	b480      	push	{r7}
 8011e4a:	b085      	sub	sp, #20
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011e50:	4b28      	ldr	r3, [pc, #160]	; (8011ef4 <prvInsertBlockIntoFreeList+0xac>)
 8011e52:	60fb      	str	r3, [r7, #12]
 8011e54:	e002      	b.n	8011e5c <prvInsertBlockIntoFreeList+0x14>
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	60fb      	str	r3, [r7, #12]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d8f7      	bhi.n	8011e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	68ba      	ldr	r2, [r7, #8]
 8011e70:	4413      	add	r3, r2
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d108      	bne.n	8011e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	685a      	ldr	r2, [r3, #4]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	441a      	add	r2, r3
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	68ba      	ldr	r2, [r7, #8]
 8011e94:	441a      	add	r2, r3
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d118      	bne.n	8011ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	681a      	ldr	r2, [r3, #0]
 8011ea2:	4b15      	ldr	r3, [pc, #84]	; (8011ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d00d      	beq.n	8011ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	685a      	ldr	r2, [r3, #4]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	441a      	add	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	601a      	str	r2, [r3, #0]
 8011ec4:	e008      	b.n	8011ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ec6:	4b0c      	ldr	r3, [pc, #48]	; (8011ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	601a      	str	r2, [r3, #0]
 8011ece:	e003      	b.n	8011ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681a      	ldr	r2, [r3, #0]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d002      	beq.n	8011ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ee6:	bf00      	nop
 8011ee8:	3714      	adds	r7, #20
 8011eea:	46bd      	mov	sp, r7
 8011eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef0:	4770      	bx	lr
 8011ef2:	bf00      	nop
 8011ef4:	20004a60 	.word	0x20004a60
 8011ef8:	20004a68 	.word	0x20004a68

08011efc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011f10:	4619      	mov	r1, r3
 8011f12:	4610      	mov	r0, r2
 8011f14:	f7fc ffc5 	bl	800eea2 <USBD_LL_SetupStage>
}
 8011f18:	bf00      	nop
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}

08011f20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011f32:	78fa      	ldrb	r2, [r7, #3]
 8011f34:	6879      	ldr	r1, [r7, #4]
 8011f36:	4613      	mov	r3, r2
 8011f38:	00db      	lsls	r3, r3, #3
 8011f3a:	4413      	add	r3, r2
 8011f3c:	009b      	lsls	r3, r3, #2
 8011f3e:	440b      	add	r3, r1
 8011f40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011f44:	681a      	ldr	r2, [r3, #0]
 8011f46:	78fb      	ldrb	r3, [r7, #3]
 8011f48:	4619      	mov	r1, r3
 8011f4a:	f7fc ffff 	bl	800ef4c <USBD_LL_DataOutStage>
}
 8011f4e:	bf00      	nop
 8011f50:	3708      	adds	r7, #8
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}

08011f56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f56:	b580      	push	{r7, lr}
 8011f58:	b082      	sub	sp, #8
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
 8011f5e:	460b      	mov	r3, r1
 8011f60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011f68:	78fa      	ldrb	r2, [r7, #3]
 8011f6a:	6879      	ldr	r1, [r7, #4]
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	00db      	lsls	r3, r3, #3
 8011f70:	4413      	add	r3, r2
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	440b      	add	r3, r1
 8011f76:	334c      	adds	r3, #76	; 0x4c
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	78fb      	ldrb	r3, [r7, #3]
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	f7fd f898 	bl	800f0b2 <USBD_LL_DataInStage>
}
 8011f82:	bf00      	nop
 8011f84:	3708      	adds	r7, #8
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b082      	sub	sp, #8
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7fd f9cc 	bl	800f336 <USBD_LL_SOF>
}
 8011f9e:	bf00      	nop
 8011fa0:	3708      	adds	r7, #8
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}

08011fa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fa6:	b580      	push	{r7, lr}
 8011fa8:	b084      	sub	sp, #16
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d102      	bne.n	8011fc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	73fb      	strb	r3, [r7, #15]
 8011fbe:	e008      	b.n	8011fd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	2b02      	cmp	r3, #2
 8011fc6:	d102      	bne.n	8011fce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011fc8:	2301      	movs	r3, #1
 8011fca:	73fb      	strb	r3, [r7, #15]
 8011fcc:	e001      	b.n	8011fd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011fce:	f7ef ff5d 	bl	8001e8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011fd8:	7bfa      	ldrb	r2, [r7, #15]
 8011fda:	4611      	mov	r1, r2
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fd f96c 	bl	800f2ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fd f914 	bl	800f216 <USBD_LL_Reset>
}
 8011fee:	bf00      	nop
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
	...

08011ff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012006:	4618      	mov	r0, r3
 8012008:	f7fd f967 	bl	800f2da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	6812      	ldr	r2, [r2, #0]
 801201a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801201e:	f043 0301 	orr.w	r3, r3, #1
 8012022:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6a1b      	ldr	r3, [r3, #32]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d005      	beq.n	8012038 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801202c:	4b04      	ldr	r3, [pc, #16]	; (8012040 <HAL_PCD_SuspendCallback+0x48>)
 801202e:	691b      	ldr	r3, [r3, #16]
 8012030:	4a03      	ldr	r2, [pc, #12]	; (8012040 <HAL_PCD_SuspendCallback+0x48>)
 8012032:	f043 0306 	orr.w	r3, r3, #6
 8012036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012038:	bf00      	nop
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	e000ed00 	.word	0xe000ed00

08012044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012052:	4618      	mov	r0, r3
 8012054:	f7fd f957 	bl	800f306 <USBD_LL_Resume>
}
 8012058:	bf00      	nop
 801205a:	3708      	adds	r7, #8
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	460b      	mov	r3, r1
 801206a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012072:	78fa      	ldrb	r2, [r7, #3]
 8012074:	4611      	mov	r1, r2
 8012076:	4618      	mov	r0, r3
 8012078:	f7fd f9af 	bl	800f3da <USBD_LL_IsoOUTIncomplete>
}
 801207c:	bf00      	nop
 801207e:	3708      	adds	r7, #8
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	460b      	mov	r3, r1
 801208e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012096:	78fa      	ldrb	r2, [r7, #3]
 8012098:	4611      	mov	r1, r2
 801209a:	4618      	mov	r0, r3
 801209c:	f7fd f96b 	bl	800f376 <USBD_LL_IsoINIncomplete>
}
 80120a0:	bf00      	nop
 80120a2:	3708      	adds	r7, #8
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7fd f9c1 	bl	800f43e <USBD_LL_DevConnected>
}
 80120bc:	bf00      	nop
 80120be:	3708      	adds	r7, #8
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fd f9be 	bl	800f454 <USBD_LL_DevDisconnected>
}
 80120d8:	bf00      	nop
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}

080120e0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	4608      	mov	r0, r1
 80120ea:	4611      	mov	r1, r2
 80120ec:	461a      	mov	r2, r3
 80120ee:	4603      	mov	r3, r0
 80120f0:	70fb      	strb	r3, [r7, #3]
 80120f2:	460b      	mov	r3, r1
 80120f4:	70bb      	strb	r3, [r7, #2]
 80120f6:	4613      	mov	r3, r2
 80120f8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120fa:	2300      	movs	r3, #0
 80120fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120fe:	2300      	movs	r3, #0
 8012100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012108:	78bb      	ldrb	r3, [r7, #2]
 801210a:	883a      	ldrh	r2, [r7, #0]
 801210c:	78f9      	ldrb	r1, [r7, #3]
 801210e:	f7f6 fb43 	bl	8008798 <HAL_PCD_EP_Open>
 8012112:	4603      	mov	r3, r0
 8012114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012116:	7bfb      	ldrb	r3, [r7, #15]
 8012118:	4618      	mov	r0, r3
 801211a:	f000 f8d3 	bl	80122c4 <USBD_Get_USB_Status>
 801211e:	4603      	mov	r3, r0
 8012120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012122:	7bbb      	ldrb	r3, [r7, #14]
}
 8012124:	4618      	mov	r0, r3
 8012126:	3710      	adds	r7, #16
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	460b      	mov	r3, r1
 8012136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012138:	2300      	movs	r3, #0
 801213a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801213c:	2300      	movs	r3, #0
 801213e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012146:	78fa      	ldrb	r2, [r7, #3]
 8012148:	4611      	mov	r1, r2
 801214a:	4618      	mov	r0, r3
 801214c:	f7f6 fc21 	bl	8008992 <HAL_PCD_EP_SetStall>
 8012150:	4603      	mov	r3, r0
 8012152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012154:	7bfb      	ldrb	r3, [r7, #15]
 8012156:	4618      	mov	r0, r3
 8012158:	f000 f8b4 	bl	80122c4 <USBD_Get_USB_Status>
 801215c:	4603      	mov	r3, r0
 801215e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012160:	7bbb      	ldrb	r3, [r7, #14]
}
 8012162:	4618      	mov	r0, r3
 8012164:	3710      	adds	r7, #16
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}

0801216a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801216a:	b580      	push	{r7, lr}
 801216c:	b084      	sub	sp, #16
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
 8012172:	460b      	mov	r3, r1
 8012174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012176:	2300      	movs	r3, #0
 8012178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801217a:	2300      	movs	r3, #0
 801217c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012184:	78fa      	ldrb	r2, [r7, #3]
 8012186:	4611      	mov	r1, r2
 8012188:	4618      	mov	r0, r3
 801218a:	f7f6 fc66 	bl	8008a5a <HAL_PCD_EP_ClrStall>
 801218e:	4603      	mov	r3, r0
 8012190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012192:	7bfb      	ldrb	r3, [r7, #15]
 8012194:	4618      	mov	r0, r3
 8012196:	f000 f895 	bl	80122c4 <USBD_Get_USB_Status>
 801219a:	4603      	mov	r3, r0
 801219c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801219e:	7bbb      	ldrb	r3, [r7, #14]
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3710      	adds	r7, #16
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80121a8:	b480      	push	{r7}
 80121aa:	b085      	sub	sp, #20
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	460b      	mov	r3, r1
 80121b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80121ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80121bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	da0b      	bge.n	80121dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80121c4:	78fb      	ldrb	r3, [r7, #3]
 80121c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121ca:	68f9      	ldr	r1, [r7, #12]
 80121cc:	4613      	mov	r3, r2
 80121ce:	00db      	lsls	r3, r3, #3
 80121d0:	4413      	add	r3, r2
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	440b      	add	r3, r1
 80121d6:	333e      	adds	r3, #62	; 0x3e
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	e00b      	b.n	80121f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80121dc:	78fb      	ldrb	r3, [r7, #3]
 80121de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121e2:	68f9      	ldr	r1, [r7, #12]
 80121e4:	4613      	mov	r3, r2
 80121e6:	00db      	lsls	r3, r3, #3
 80121e8:	4413      	add	r3, r2
 80121ea:	009b      	lsls	r3, r3, #2
 80121ec:	440b      	add	r3, r1
 80121ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80121f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3714      	adds	r7, #20
 80121f8:	46bd      	mov	sp, r7
 80121fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fe:	4770      	bx	lr

08012200 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	460b      	mov	r3, r1
 801220a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801220c:	2300      	movs	r3, #0
 801220e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012210:	2300      	movs	r3, #0
 8012212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801221a:	78fa      	ldrb	r2, [r7, #3]
 801221c:	4611      	mov	r1, r2
 801221e:	4618      	mov	r0, r3
 8012220:	f7f6 fa95 	bl	800874e <HAL_PCD_SetAddress>
 8012224:	4603      	mov	r3, r0
 8012226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012228:	7bfb      	ldrb	r3, [r7, #15]
 801222a:	4618      	mov	r0, r3
 801222c:	f000 f84a 	bl	80122c4 <USBD_Get_USB_Status>
 8012230:	4603      	mov	r3, r0
 8012232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012234:	7bbb      	ldrb	r3, [r7, #14]
}
 8012236:	4618      	mov	r0, r3
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}

0801223e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801223e:	b580      	push	{r7, lr}
 8012240:	b086      	sub	sp, #24
 8012242:	af00      	add	r7, sp, #0
 8012244:	60f8      	str	r0, [r7, #12]
 8012246:	607a      	str	r2, [r7, #4]
 8012248:	603b      	str	r3, [r7, #0]
 801224a:	460b      	mov	r3, r1
 801224c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801224e:	2300      	movs	r3, #0
 8012250:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012252:	2300      	movs	r3, #0
 8012254:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801225c:	7af9      	ldrb	r1, [r7, #11]
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	f7f6 fb4c 	bl	80088fe <HAL_PCD_EP_Transmit>
 8012266:	4603      	mov	r3, r0
 8012268:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801226a:	7dfb      	ldrb	r3, [r7, #23]
 801226c:	4618      	mov	r0, r3
 801226e:	f000 f829 	bl	80122c4 <USBD_Get_USB_Status>
 8012272:	4603      	mov	r3, r0
 8012274:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012276:	7dbb      	ldrb	r3, [r7, #22]
}
 8012278:	4618      	mov	r0, r3
 801227a:	3718      	adds	r7, #24
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b086      	sub	sp, #24
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	607a      	str	r2, [r7, #4]
 801228a:	603b      	str	r3, [r7, #0]
 801228c:	460b      	mov	r3, r1
 801228e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012290:	2300      	movs	r3, #0
 8012292:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012294:	2300      	movs	r3, #0
 8012296:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801229e:	7af9      	ldrb	r1, [r7, #11]
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	687a      	ldr	r2, [r7, #4]
 80122a4:	f7f6 fae0 	bl	8008868 <HAL_PCD_EP_Receive>
 80122a8:	4603      	mov	r3, r0
 80122aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122ac:	7dfb      	ldrb	r3, [r7, #23]
 80122ae:	4618      	mov	r0, r3
 80122b0:	f000 f808 	bl	80122c4 <USBD_Get_USB_Status>
 80122b4:	4603      	mov	r3, r0
 80122b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80122b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3718      	adds	r7, #24
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
	...

080122c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80122c4:	b480      	push	{r7}
 80122c6:	b085      	sub	sp, #20
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	4603      	mov	r3, r0
 80122cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122ce:	2300      	movs	r3, #0
 80122d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80122d2:	79fb      	ldrb	r3, [r7, #7]
 80122d4:	2b03      	cmp	r3, #3
 80122d6:	d817      	bhi.n	8012308 <USBD_Get_USB_Status+0x44>
 80122d8:	a201      	add	r2, pc, #4	; (adr r2, 80122e0 <USBD_Get_USB_Status+0x1c>)
 80122da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122de:	bf00      	nop
 80122e0:	080122f1 	.word	0x080122f1
 80122e4:	080122f7 	.word	0x080122f7
 80122e8:	080122fd 	.word	0x080122fd
 80122ec:	08012303 	.word	0x08012303
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80122f0:	2300      	movs	r3, #0
 80122f2:	73fb      	strb	r3, [r7, #15]
    break;
 80122f4:	e00b      	b.n	801230e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80122f6:	2303      	movs	r3, #3
 80122f8:	73fb      	strb	r3, [r7, #15]
    break;
 80122fa:	e008      	b.n	801230e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80122fc:	2301      	movs	r3, #1
 80122fe:	73fb      	strb	r3, [r7, #15]
    break;
 8012300:	e005      	b.n	801230e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012302:	2303      	movs	r3, #3
 8012304:	73fb      	strb	r3, [r7, #15]
    break;
 8012306:	e002      	b.n	801230e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012308:	2303      	movs	r3, #3
 801230a:	73fb      	strb	r3, [r7, #15]
    break;
 801230c:	bf00      	nop
  }
  return usb_status;
 801230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012310:	4618      	mov	r0, r3
 8012312:	3714      	adds	r7, #20
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr

0801231c <_ZdlPvj>:
 801231c:	f000 b8b8 	b.w	8012490 <_ZdlPv>

08012320 <_Znwj>:
 8012320:	2801      	cmp	r0, #1
 8012322:	bf38      	it	cc
 8012324:	2001      	movcc	r0, #1
 8012326:	b510      	push	{r4, lr}
 8012328:	4604      	mov	r4, r0
 801232a:	4620      	mov	r0, r4
 801232c:	f001 f9ba 	bl	80136a4 <malloc>
 8012330:	b930      	cbnz	r0, 8012340 <_Znwj+0x20>
 8012332:	f000 f8c1 	bl	80124b8 <_ZSt15get_new_handlerv>
 8012336:	b908      	cbnz	r0, 801233c <_Znwj+0x1c>
 8012338:	f001 f97f 	bl	801363a <abort>
 801233c:	4780      	blx	r0
 801233e:	e7f4      	b.n	801232a <_Znwj+0xa>
 8012340:	bd10      	pop	{r4, pc}

08012342 <__cxa_pure_virtual>:
 8012342:	b508      	push	{r3, lr}
 8012344:	f000 f8b2 	bl	80124ac <_ZSt9terminatev>

08012348 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8012348:	68c3      	ldr	r3, [r0, #12]
 801234a:	689a      	ldr	r2, [r3, #8]
 801234c:	60c2      	str	r2, [r0, #12]
 801234e:	b510      	push	{r4, lr}
 8012350:	b102      	cbz	r2, 8012354 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8012352:	6050      	str	r0, [r2, #4]
 8012354:	6842      	ldr	r2, [r0, #4]
 8012356:	605a      	str	r2, [r3, #4]
 8012358:	680c      	ldr	r4, [r1, #0]
 801235a:	4284      	cmp	r4, r0
 801235c:	d103      	bne.n	8012366 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 801235e:	600b      	str	r3, [r1, #0]
 8012360:	6098      	str	r0, [r3, #8]
 8012362:	6043      	str	r3, [r0, #4]
 8012364:	bd10      	pop	{r4, pc}
 8012366:	6891      	ldr	r1, [r2, #8]
 8012368:	4281      	cmp	r1, r0
 801236a:	bf0c      	ite	eq
 801236c:	6093      	streq	r3, [r2, #8]
 801236e:	60d3      	strne	r3, [r2, #12]
 8012370:	e7f6      	b.n	8012360 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08012372 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8012372:	6883      	ldr	r3, [r0, #8]
 8012374:	68da      	ldr	r2, [r3, #12]
 8012376:	6082      	str	r2, [r0, #8]
 8012378:	b510      	push	{r4, lr}
 801237a:	b102      	cbz	r2, 801237e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 801237c:	6050      	str	r0, [r2, #4]
 801237e:	6842      	ldr	r2, [r0, #4]
 8012380:	605a      	str	r2, [r3, #4]
 8012382:	680c      	ldr	r4, [r1, #0]
 8012384:	4284      	cmp	r4, r0
 8012386:	d103      	bne.n	8012390 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8012388:	600b      	str	r3, [r1, #0]
 801238a:	60d8      	str	r0, [r3, #12]
 801238c:	6043      	str	r3, [r0, #4]
 801238e:	bd10      	pop	{r4, pc}
 8012390:	68d1      	ldr	r1, [r2, #12]
 8012392:	4281      	cmp	r1, r0
 8012394:	bf0c      	ite	eq
 8012396:	60d3      	streq	r3, [r2, #12]
 8012398:	6093      	strne	r3, [r2, #8]
 801239a:	e7f6      	b.n	801238a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0801239c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801239c:	7803      	ldrb	r3, [r0, #0]
 801239e:	b933      	cbnz	r3, 80123ae <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80123a0:	6843      	ldr	r3, [r0, #4]
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	4283      	cmp	r3, r0
 80123a6:	d102      	bne.n	80123ae <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80123a8:	68db      	ldr	r3, [r3, #12]
 80123aa:	4618      	mov	r0, r3
 80123ac:	4770      	bx	lr
 80123ae:	6882      	ldr	r2, [r0, #8]
 80123b0:	b122      	cbz	r2, 80123bc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80123b2:	4613      	mov	r3, r2
 80123b4:	68d2      	ldr	r2, [r2, #12]
 80123b6:	2a00      	cmp	r2, #0
 80123b8:	d1fb      	bne.n	80123b2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80123ba:	e7f6      	b.n	80123aa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80123bc:	6843      	ldr	r3, [r0, #4]
 80123be:	689a      	ldr	r2, [r3, #8]
 80123c0:	4282      	cmp	r2, r0
 80123c2:	d1f2      	bne.n	80123aa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80123c4:	4618      	mov	r0, r3
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	e7f9      	b.n	80123be <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

080123ca <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80123ca:	f7ff bfe7 	b.w	801239c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080123ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80123ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123d2:	461e      	mov	r6, r3
 80123d4:	f103 0804 	add.w	r8, r3, #4
 80123d8:	2300      	movs	r3, #0
 80123da:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80123de:	460c      	mov	r4, r1
 80123e0:	604a      	str	r2, [r1, #4]
 80123e2:	700b      	strb	r3, [r1, #0]
 80123e4:	b300      	cbz	r0, 8012428 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80123e6:	4296      	cmp	r6, r2
 80123e8:	6091      	str	r1, [r2, #8]
 80123ea:	d118      	bne.n	801241e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80123ec:	6071      	str	r1, [r6, #4]
 80123ee:	60f4      	str	r4, [r6, #12]
 80123f0:	2701      	movs	r7, #1
 80123f2:	f04f 0900 	mov.w	r9, #0
 80123f6:	6873      	ldr	r3, [r6, #4]
 80123f8:	42a3      	cmp	r3, r4
 80123fa:	d03f      	beq.n	801247c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80123fc:	6860      	ldr	r0, [r4, #4]
 80123fe:	7802      	ldrb	r2, [r0, #0]
 8012400:	2a00      	cmp	r2, #0
 8012402:	d13b      	bne.n	801247c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8012404:	6845      	ldr	r5, [r0, #4]
 8012406:	68ab      	ldr	r3, [r5, #8]
 8012408:	4298      	cmp	r0, r3
 801240a:	d123      	bne.n	8012454 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 801240c:	68eb      	ldr	r3, [r5, #12]
 801240e:	b183      	cbz	r3, 8012432 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8012410:	781a      	ldrb	r2, [r3, #0]
 8012412:	b972      	cbnz	r2, 8012432 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8012414:	7007      	strb	r7, [r0, #0]
 8012416:	701f      	strb	r7, [r3, #0]
 8012418:	702a      	strb	r2, [r5, #0]
 801241a:	462c      	mov	r4, r5
 801241c:	e7eb      	b.n	80123f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 801241e:	68b3      	ldr	r3, [r6, #8]
 8012420:	4293      	cmp	r3, r2
 8012422:	d1e5      	bne.n	80123f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012424:	60b1      	str	r1, [r6, #8]
 8012426:	e7e3      	b.n	80123f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012428:	60d1      	str	r1, [r2, #12]
 801242a:	68f3      	ldr	r3, [r6, #12]
 801242c:	4293      	cmp	r3, r2
 801242e:	d1df      	bne.n	80123f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012430:	e7dd      	b.n	80123ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8012432:	68c3      	ldr	r3, [r0, #12]
 8012434:	42a3      	cmp	r3, r4
 8012436:	d103      	bne.n	8012440 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8012438:	4641      	mov	r1, r8
 801243a:	f7ff ff85 	bl	8012348 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801243e:	4604      	mov	r4, r0
 8012440:	6863      	ldr	r3, [r4, #4]
 8012442:	4641      	mov	r1, r8
 8012444:	701f      	strb	r7, [r3, #0]
 8012446:	4628      	mov	r0, r5
 8012448:	f885 9000 	strb.w	r9, [r5]
 801244c:	f7ff ff91 	bl	8012372 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8012450:	4625      	mov	r5, r4
 8012452:	e7e2      	b.n	801241a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8012454:	b113      	cbz	r3, 801245c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8012456:	781a      	ldrb	r2, [r3, #0]
 8012458:	2a00      	cmp	r2, #0
 801245a:	d0db      	beq.n	8012414 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 801245c:	6883      	ldr	r3, [r0, #8]
 801245e:	42a3      	cmp	r3, r4
 8012460:	d103      	bne.n	801246a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8012462:	4641      	mov	r1, r8
 8012464:	f7ff ff85 	bl	8012372 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8012468:	4604      	mov	r4, r0
 801246a:	6863      	ldr	r3, [r4, #4]
 801246c:	4641      	mov	r1, r8
 801246e:	701f      	strb	r7, [r3, #0]
 8012470:	4628      	mov	r0, r5
 8012472:	f885 9000 	strb.w	r9, [r5]
 8012476:	f7ff ff67 	bl	8012348 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801247a:	e7e9      	b.n	8012450 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 801247c:	2201      	movs	r2, #1
 801247e:	701a      	strb	r2, [r3, #0]
 8012480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012484 <_ZSt17__throw_bad_allocv>:
 8012484:	b508      	push	{r3, lr}
 8012486:	f001 f8d8 	bl	801363a <abort>

0801248a <_ZSt20__throw_length_errorPKc>:
 801248a:	b508      	push	{r3, lr}
 801248c:	f001 f8d5 	bl	801363a <abort>

08012490 <_ZdlPv>:
 8012490:	f001 b910 	b.w	80136b4 <free>

08012494 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012494:	b508      	push	{r3, lr}
 8012496:	4780      	blx	r0
 8012498:	f001 f8cf 	bl	801363a <abort>

0801249c <_ZSt13get_terminatev>:
 801249c:	4b02      	ldr	r3, [pc, #8]	; (80124a8 <_ZSt13get_terminatev+0xc>)
 801249e:	6818      	ldr	r0, [r3, #0]
 80124a0:	f3bf 8f5b 	dmb	ish
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop
 80124a8:	20000010 	.word	0x20000010

080124ac <_ZSt9terminatev>:
 80124ac:	b508      	push	{r3, lr}
 80124ae:	f7ff fff5 	bl	801249c <_ZSt13get_terminatev>
 80124b2:	f7ff ffef 	bl	8012494 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080124b8 <_ZSt15get_new_handlerv>:
 80124b8:	4b02      	ldr	r3, [pc, #8]	; (80124c4 <_ZSt15get_new_handlerv+0xc>)
 80124ba:	6818      	ldr	r0, [r3, #0]
 80124bc:	f3bf 8f5b 	dmb	ish
 80124c0:	4770      	bx	lr
 80124c2:	bf00      	nop
 80124c4:	20004f8c 	.word	0x20004f8c

080124c8 <pow>:
 80124c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ca:	ed2d 8b02 	vpush	{d8}
 80124ce:	eeb0 8a40 	vmov.f32	s16, s0
 80124d2:	eef0 8a60 	vmov.f32	s17, s1
 80124d6:	ec55 4b11 	vmov	r4, r5, d1
 80124da:	f000 f885 	bl	80125e8 <__ieee754_pow>
 80124de:	4622      	mov	r2, r4
 80124e0:	462b      	mov	r3, r5
 80124e2:	4620      	mov	r0, r4
 80124e4:	4629      	mov	r1, r5
 80124e6:	ec57 6b10 	vmov	r6, r7, d0
 80124ea:	f7ee facf 	bl	8000a8c <__aeabi_dcmpun>
 80124ee:	2800      	cmp	r0, #0
 80124f0:	d13b      	bne.n	801256a <pow+0xa2>
 80124f2:	ec51 0b18 	vmov	r0, r1, d8
 80124f6:	2200      	movs	r2, #0
 80124f8:	2300      	movs	r3, #0
 80124fa:	f7ee fa95 	bl	8000a28 <__aeabi_dcmpeq>
 80124fe:	b1b8      	cbz	r0, 8012530 <pow+0x68>
 8012500:	2200      	movs	r2, #0
 8012502:	2300      	movs	r3, #0
 8012504:	4620      	mov	r0, r4
 8012506:	4629      	mov	r1, r5
 8012508:	f7ee fa8e 	bl	8000a28 <__aeabi_dcmpeq>
 801250c:	2800      	cmp	r0, #0
 801250e:	d146      	bne.n	801259e <pow+0xd6>
 8012510:	ec45 4b10 	vmov	d0, r4, r5
 8012514:	f000 ff24 	bl	8013360 <finite>
 8012518:	b338      	cbz	r0, 801256a <pow+0xa2>
 801251a:	2200      	movs	r2, #0
 801251c:	2300      	movs	r3, #0
 801251e:	4620      	mov	r0, r4
 8012520:	4629      	mov	r1, r5
 8012522:	f7ee fa8b 	bl	8000a3c <__aeabi_dcmplt>
 8012526:	b300      	cbz	r0, 801256a <pow+0xa2>
 8012528:	f001 f892 	bl	8013650 <__errno>
 801252c:	2322      	movs	r3, #34	; 0x22
 801252e:	e01b      	b.n	8012568 <pow+0xa0>
 8012530:	ec47 6b10 	vmov	d0, r6, r7
 8012534:	f000 ff14 	bl	8013360 <finite>
 8012538:	b9e0      	cbnz	r0, 8012574 <pow+0xac>
 801253a:	eeb0 0a48 	vmov.f32	s0, s16
 801253e:	eef0 0a68 	vmov.f32	s1, s17
 8012542:	f000 ff0d 	bl	8013360 <finite>
 8012546:	b1a8      	cbz	r0, 8012574 <pow+0xac>
 8012548:	ec45 4b10 	vmov	d0, r4, r5
 801254c:	f000 ff08 	bl	8013360 <finite>
 8012550:	b180      	cbz	r0, 8012574 <pow+0xac>
 8012552:	4632      	mov	r2, r6
 8012554:	463b      	mov	r3, r7
 8012556:	4630      	mov	r0, r6
 8012558:	4639      	mov	r1, r7
 801255a:	f7ee fa97 	bl	8000a8c <__aeabi_dcmpun>
 801255e:	2800      	cmp	r0, #0
 8012560:	d0e2      	beq.n	8012528 <pow+0x60>
 8012562:	f001 f875 	bl	8013650 <__errno>
 8012566:	2321      	movs	r3, #33	; 0x21
 8012568:	6003      	str	r3, [r0, #0]
 801256a:	ecbd 8b02 	vpop	{d8}
 801256e:	ec47 6b10 	vmov	d0, r6, r7
 8012572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012574:	2200      	movs	r2, #0
 8012576:	2300      	movs	r3, #0
 8012578:	4630      	mov	r0, r6
 801257a:	4639      	mov	r1, r7
 801257c:	f7ee fa54 	bl	8000a28 <__aeabi_dcmpeq>
 8012580:	2800      	cmp	r0, #0
 8012582:	d0f2      	beq.n	801256a <pow+0xa2>
 8012584:	eeb0 0a48 	vmov.f32	s0, s16
 8012588:	eef0 0a68 	vmov.f32	s1, s17
 801258c:	f000 fee8 	bl	8013360 <finite>
 8012590:	2800      	cmp	r0, #0
 8012592:	d0ea      	beq.n	801256a <pow+0xa2>
 8012594:	ec45 4b10 	vmov	d0, r4, r5
 8012598:	f000 fee2 	bl	8013360 <finite>
 801259c:	e7c3      	b.n	8012526 <pow+0x5e>
 801259e:	4f01      	ldr	r7, [pc, #4]	; (80125a4 <pow+0xdc>)
 80125a0:	2600      	movs	r6, #0
 80125a2:	e7e2      	b.n	801256a <pow+0xa2>
 80125a4:	3ff00000 	.word	0x3ff00000

080125a8 <atan2f>:
 80125a8:	f000 bdfe 	b.w	80131a8 <__ieee754_atan2f>

080125ac <sqrtf>:
 80125ac:	b508      	push	{r3, lr}
 80125ae:	ed2d 8b02 	vpush	{d8}
 80125b2:	eeb0 8a40 	vmov.f32	s16, s0
 80125b6:	f000 fe97 	bl	80132e8 <__ieee754_sqrtf>
 80125ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80125be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c2:	d60c      	bvs.n	80125de <sqrtf+0x32>
 80125c4:	eddf 8a07 	vldr	s17, [pc, #28]	; 80125e4 <sqrtf+0x38>
 80125c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80125cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d0:	d505      	bpl.n	80125de <sqrtf+0x32>
 80125d2:	f001 f83d 	bl	8013650 <__errno>
 80125d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80125da:	2321      	movs	r3, #33	; 0x21
 80125dc:	6003      	str	r3, [r0, #0]
 80125de:	ecbd 8b02 	vpop	{d8}
 80125e2:	bd08      	pop	{r3, pc}
 80125e4:	00000000 	.word	0x00000000

080125e8 <__ieee754_pow>:
 80125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	ed2d 8b06 	vpush	{d8-d10}
 80125f0:	b089      	sub	sp, #36	; 0x24
 80125f2:	ed8d 1b00 	vstr	d1, [sp]
 80125f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80125fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80125fe:	ea58 0102 	orrs.w	r1, r8, r2
 8012602:	ec57 6b10 	vmov	r6, r7, d0
 8012606:	d115      	bne.n	8012634 <__ieee754_pow+0x4c>
 8012608:	19b3      	adds	r3, r6, r6
 801260a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801260e:	4152      	adcs	r2, r2
 8012610:	4299      	cmp	r1, r3
 8012612:	4b89      	ldr	r3, [pc, #548]	; (8012838 <__ieee754_pow+0x250>)
 8012614:	4193      	sbcs	r3, r2
 8012616:	f080 84d2 	bcs.w	8012fbe <__ieee754_pow+0x9d6>
 801261a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801261e:	4630      	mov	r0, r6
 8012620:	4639      	mov	r1, r7
 8012622:	f7ed fde3 	bl	80001ec <__adddf3>
 8012626:	ec41 0b10 	vmov	d0, r0, r1
 801262a:	b009      	add	sp, #36	; 0x24
 801262c:	ecbd 8b06 	vpop	{d8-d10}
 8012630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012634:	4b81      	ldr	r3, [pc, #516]	; (801283c <__ieee754_pow+0x254>)
 8012636:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801263a:	429c      	cmp	r4, r3
 801263c:	ee10 aa10 	vmov	sl, s0
 8012640:	463d      	mov	r5, r7
 8012642:	dc06      	bgt.n	8012652 <__ieee754_pow+0x6a>
 8012644:	d101      	bne.n	801264a <__ieee754_pow+0x62>
 8012646:	2e00      	cmp	r6, #0
 8012648:	d1e7      	bne.n	801261a <__ieee754_pow+0x32>
 801264a:	4598      	cmp	r8, r3
 801264c:	dc01      	bgt.n	8012652 <__ieee754_pow+0x6a>
 801264e:	d10f      	bne.n	8012670 <__ieee754_pow+0x88>
 8012650:	b172      	cbz	r2, 8012670 <__ieee754_pow+0x88>
 8012652:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012656:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801265a:	ea55 050a 	orrs.w	r5, r5, sl
 801265e:	d1dc      	bne.n	801261a <__ieee754_pow+0x32>
 8012660:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012664:	18db      	adds	r3, r3, r3
 8012666:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801266a:	4152      	adcs	r2, r2
 801266c:	429d      	cmp	r5, r3
 801266e:	e7d0      	b.n	8012612 <__ieee754_pow+0x2a>
 8012670:	2d00      	cmp	r5, #0
 8012672:	da3b      	bge.n	80126ec <__ieee754_pow+0x104>
 8012674:	4b72      	ldr	r3, [pc, #456]	; (8012840 <__ieee754_pow+0x258>)
 8012676:	4598      	cmp	r8, r3
 8012678:	dc51      	bgt.n	801271e <__ieee754_pow+0x136>
 801267a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801267e:	4598      	cmp	r8, r3
 8012680:	f340 84ac 	ble.w	8012fdc <__ieee754_pow+0x9f4>
 8012684:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012688:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801268c:	2b14      	cmp	r3, #20
 801268e:	dd0f      	ble.n	80126b0 <__ieee754_pow+0xc8>
 8012690:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012694:	fa22 f103 	lsr.w	r1, r2, r3
 8012698:	fa01 f303 	lsl.w	r3, r1, r3
 801269c:	4293      	cmp	r3, r2
 801269e:	f040 849d 	bne.w	8012fdc <__ieee754_pow+0x9f4>
 80126a2:	f001 0101 	and.w	r1, r1, #1
 80126a6:	f1c1 0302 	rsb	r3, r1, #2
 80126aa:	9304      	str	r3, [sp, #16]
 80126ac:	b182      	cbz	r2, 80126d0 <__ieee754_pow+0xe8>
 80126ae:	e05f      	b.n	8012770 <__ieee754_pow+0x188>
 80126b0:	2a00      	cmp	r2, #0
 80126b2:	d15b      	bne.n	801276c <__ieee754_pow+0x184>
 80126b4:	f1c3 0314 	rsb	r3, r3, #20
 80126b8:	fa48 f103 	asr.w	r1, r8, r3
 80126bc:	fa01 f303 	lsl.w	r3, r1, r3
 80126c0:	4543      	cmp	r3, r8
 80126c2:	f040 8488 	bne.w	8012fd6 <__ieee754_pow+0x9ee>
 80126c6:	f001 0101 	and.w	r1, r1, #1
 80126ca:	f1c1 0302 	rsb	r3, r1, #2
 80126ce:	9304      	str	r3, [sp, #16]
 80126d0:	4b5c      	ldr	r3, [pc, #368]	; (8012844 <__ieee754_pow+0x25c>)
 80126d2:	4598      	cmp	r8, r3
 80126d4:	d132      	bne.n	801273c <__ieee754_pow+0x154>
 80126d6:	f1b9 0f00 	cmp.w	r9, #0
 80126da:	f280 8478 	bge.w	8012fce <__ieee754_pow+0x9e6>
 80126de:	4959      	ldr	r1, [pc, #356]	; (8012844 <__ieee754_pow+0x25c>)
 80126e0:	4632      	mov	r2, r6
 80126e2:	463b      	mov	r3, r7
 80126e4:	2000      	movs	r0, #0
 80126e6:	f7ee f861 	bl	80007ac <__aeabi_ddiv>
 80126ea:	e79c      	b.n	8012626 <__ieee754_pow+0x3e>
 80126ec:	2300      	movs	r3, #0
 80126ee:	9304      	str	r3, [sp, #16]
 80126f0:	2a00      	cmp	r2, #0
 80126f2:	d13d      	bne.n	8012770 <__ieee754_pow+0x188>
 80126f4:	4b51      	ldr	r3, [pc, #324]	; (801283c <__ieee754_pow+0x254>)
 80126f6:	4598      	cmp	r8, r3
 80126f8:	d1ea      	bne.n	80126d0 <__ieee754_pow+0xe8>
 80126fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80126fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012702:	ea53 030a 	orrs.w	r3, r3, sl
 8012706:	f000 845a 	beq.w	8012fbe <__ieee754_pow+0x9d6>
 801270a:	4b4f      	ldr	r3, [pc, #316]	; (8012848 <__ieee754_pow+0x260>)
 801270c:	429c      	cmp	r4, r3
 801270e:	dd08      	ble.n	8012722 <__ieee754_pow+0x13a>
 8012710:	f1b9 0f00 	cmp.w	r9, #0
 8012714:	f2c0 8457 	blt.w	8012fc6 <__ieee754_pow+0x9de>
 8012718:	e9dd 0100 	ldrd	r0, r1, [sp]
 801271c:	e783      	b.n	8012626 <__ieee754_pow+0x3e>
 801271e:	2302      	movs	r3, #2
 8012720:	e7e5      	b.n	80126ee <__ieee754_pow+0x106>
 8012722:	f1b9 0f00 	cmp.w	r9, #0
 8012726:	f04f 0000 	mov.w	r0, #0
 801272a:	f04f 0100 	mov.w	r1, #0
 801272e:	f6bf af7a 	bge.w	8012626 <__ieee754_pow+0x3e>
 8012732:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012736:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801273a:	e774      	b.n	8012626 <__ieee754_pow+0x3e>
 801273c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012740:	d106      	bne.n	8012750 <__ieee754_pow+0x168>
 8012742:	4632      	mov	r2, r6
 8012744:	463b      	mov	r3, r7
 8012746:	4630      	mov	r0, r6
 8012748:	4639      	mov	r1, r7
 801274a:	f7ed ff05 	bl	8000558 <__aeabi_dmul>
 801274e:	e76a      	b.n	8012626 <__ieee754_pow+0x3e>
 8012750:	4b3e      	ldr	r3, [pc, #248]	; (801284c <__ieee754_pow+0x264>)
 8012752:	4599      	cmp	r9, r3
 8012754:	d10c      	bne.n	8012770 <__ieee754_pow+0x188>
 8012756:	2d00      	cmp	r5, #0
 8012758:	db0a      	blt.n	8012770 <__ieee754_pow+0x188>
 801275a:	ec47 6b10 	vmov	d0, r6, r7
 801275e:	b009      	add	sp, #36	; 0x24
 8012760:	ecbd 8b06 	vpop	{d8-d10}
 8012764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012768:	f000 bc6c 	b.w	8013044 <__ieee754_sqrt>
 801276c:	2300      	movs	r3, #0
 801276e:	9304      	str	r3, [sp, #16]
 8012770:	ec47 6b10 	vmov	d0, r6, r7
 8012774:	f000 fdeb 	bl	801334e <fabs>
 8012778:	ec51 0b10 	vmov	r0, r1, d0
 801277c:	f1ba 0f00 	cmp.w	sl, #0
 8012780:	d129      	bne.n	80127d6 <__ieee754_pow+0x1ee>
 8012782:	b124      	cbz	r4, 801278e <__ieee754_pow+0x1a6>
 8012784:	4b2f      	ldr	r3, [pc, #188]	; (8012844 <__ieee754_pow+0x25c>)
 8012786:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801278a:	429a      	cmp	r2, r3
 801278c:	d123      	bne.n	80127d6 <__ieee754_pow+0x1ee>
 801278e:	f1b9 0f00 	cmp.w	r9, #0
 8012792:	da05      	bge.n	80127a0 <__ieee754_pow+0x1b8>
 8012794:	4602      	mov	r2, r0
 8012796:	460b      	mov	r3, r1
 8012798:	2000      	movs	r0, #0
 801279a:	492a      	ldr	r1, [pc, #168]	; (8012844 <__ieee754_pow+0x25c>)
 801279c:	f7ee f806 	bl	80007ac <__aeabi_ddiv>
 80127a0:	2d00      	cmp	r5, #0
 80127a2:	f6bf af40 	bge.w	8012626 <__ieee754_pow+0x3e>
 80127a6:	9b04      	ldr	r3, [sp, #16]
 80127a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80127ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80127b0:	4323      	orrs	r3, r4
 80127b2:	d108      	bne.n	80127c6 <__ieee754_pow+0x1de>
 80127b4:	4602      	mov	r2, r0
 80127b6:	460b      	mov	r3, r1
 80127b8:	4610      	mov	r0, r2
 80127ba:	4619      	mov	r1, r3
 80127bc:	f7ed fd14 	bl	80001e8 <__aeabi_dsub>
 80127c0:	4602      	mov	r2, r0
 80127c2:	460b      	mov	r3, r1
 80127c4:	e78f      	b.n	80126e6 <__ieee754_pow+0xfe>
 80127c6:	9b04      	ldr	r3, [sp, #16]
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	f47f af2c 	bne.w	8012626 <__ieee754_pow+0x3e>
 80127ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127d2:	4619      	mov	r1, r3
 80127d4:	e727      	b.n	8012626 <__ieee754_pow+0x3e>
 80127d6:	0feb      	lsrs	r3, r5, #31
 80127d8:	3b01      	subs	r3, #1
 80127da:	9306      	str	r3, [sp, #24]
 80127dc:	9a06      	ldr	r2, [sp, #24]
 80127de:	9b04      	ldr	r3, [sp, #16]
 80127e0:	4313      	orrs	r3, r2
 80127e2:	d102      	bne.n	80127ea <__ieee754_pow+0x202>
 80127e4:	4632      	mov	r2, r6
 80127e6:	463b      	mov	r3, r7
 80127e8:	e7e6      	b.n	80127b8 <__ieee754_pow+0x1d0>
 80127ea:	4b19      	ldr	r3, [pc, #100]	; (8012850 <__ieee754_pow+0x268>)
 80127ec:	4598      	cmp	r8, r3
 80127ee:	f340 80fb 	ble.w	80129e8 <__ieee754_pow+0x400>
 80127f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80127f6:	4598      	cmp	r8, r3
 80127f8:	4b13      	ldr	r3, [pc, #76]	; (8012848 <__ieee754_pow+0x260>)
 80127fa:	dd0c      	ble.n	8012816 <__ieee754_pow+0x22e>
 80127fc:	429c      	cmp	r4, r3
 80127fe:	dc0f      	bgt.n	8012820 <__ieee754_pow+0x238>
 8012800:	f1b9 0f00 	cmp.w	r9, #0
 8012804:	da0f      	bge.n	8012826 <__ieee754_pow+0x23e>
 8012806:	2000      	movs	r0, #0
 8012808:	b009      	add	sp, #36	; 0x24
 801280a:	ecbd 8b06 	vpop	{d8-d10}
 801280e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012812:	f000 bd93 	b.w	801333c <__math_oflow>
 8012816:	429c      	cmp	r4, r3
 8012818:	dbf2      	blt.n	8012800 <__ieee754_pow+0x218>
 801281a:	4b0a      	ldr	r3, [pc, #40]	; (8012844 <__ieee754_pow+0x25c>)
 801281c:	429c      	cmp	r4, r3
 801281e:	dd19      	ble.n	8012854 <__ieee754_pow+0x26c>
 8012820:	f1b9 0f00 	cmp.w	r9, #0
 8012824:	dcef      	bgt.n	8012806 <__ieee754_pow+0x21e>
 8012826:	2000      	movs	r0, #0
 8012828:	b009      	add	sp, #36	; 0x24
 801282a:	ecbd 8b06 	vpop	{d8-d10}
 801282e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012832:	f000 bd7a 	b.w	801332a <__math_uflow>
 8012836:	bf00      	nop
 8012838:	fff00000 	.word	0xfff00000
 801283c:	7ff00000 	.word	0x7ff00000
 8012840:	433fffff 	.word	0x433fffff
 8012844:	3ff00000 	.word	0x3ff00000
 8012848:	3fefffff 	.word	0x3fefffff
 801284c:	3fe00000 	.word	0x3fe00000
 8012850:	41e00000 	.word	0x41e00000
 8012854:	4b60      	ldr	r3, [pc, #384]	; (80129d8 <__ieee754_pow+0x3f0>)
 8012856:	2200      	movs	r2, #0
 8012858:	f7ed fcc6 	bl	80001e8 <__aeabi_dsub>
 801285c:	a354      	add	r3, pc, #336	; (adr r3, 80129b0 <__ieee754_pow+0x3c8>)
 801285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012862:	4604      	mov	r4, r0
 8012864:	460d      	mov	r5, r1
 8012866:	f7ed fe77 	bl	8000558 <__aeabi_dmul>
 801286a:	a353      	add	r3, pc, #332	; (adr r3, 80129b8 <__ieee754_pow+0x3d0>)
 801286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012870:	4606      	mov	r6, r0
 8012872:	460f      	mov	r7, r1
 8012874:	4620      	mov	r0, r4
 8012876:	4629      	mov	r1, r5
 8012878:	f7ed fe6e 	bl	8000558 <__aeabi_dmul>
 801287c:	4b57      	ldr	r3, [pc, #348]	; (80129dc <__ieee754_pow+0x3f4>)
 801287e:	4682      	mov	sl, r0
 8012880:	468b      	mov	fp, r1
 8012882:	2200      	movs	r2, #0
 8012884:	4620      	mov	r0, r4
 8012886:	4629      	mov	r1, r5
 8012888:	f7ed fe66 	bl	8000558 <__aeabi_dmul>
 801288c:	4602      	mov	r2, r0
 801288e:	460b      	mov	r3, r1
 8012890:	a14b      	add	r1, pc, #300	; (adr r1, 80129c0 <__ieee754_pow+0x3d8>)
 8012892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012896:	f7ed fca7 	bl	80001e8 <__aeabi_dsub>
 801289a:	4622      	mov	r2, r4
 801289c:	462b      	mov	r3, r5
 801289e:	f7ed fe5b 	bl	8000558 <__aeabi_dmul>
 80128a2:	4602      	mov	r2, r0
 80128a4:	460b      	mov	r3, r1
 80128a6:	2000      	movs	r0, #0
 80128a8:	494d      	ldr	r1, [pc, #308]	; (80129e0 <__ieee754_pow+0x3f8>)
 80128aa:	f7ed fc9d 	bl	80001e8 <__aeabi_dsub>
 80128ae:	4622      	mov	r2, r4
 80128b0:	4680      	mov	r8, r0
 80128b2:	4689      	mov	r9, r1
 80128b4:	462b      	mov	r3, r5
 80128b6:	4620      	mov	r0, r4
 80128b8:	4629      	mov	r1, r5
 80128ba:	f7ed fe4d 	bl	8000558 <__aeabi_dmul>
 80128be:	4602      	mov	r2, r0
 80128c0:	460b      	mov	r3, r1
 80128c2:	4640      	mov	r0, r8
 80128c4:	4649      	mov	r1, r9
 80128c6:	f7ed fe47 	bl	8000558 <__aeabi_dmul>
 80128ca:	a33f      	add	r3, pc, #252	; (adr r3, 80129c8 <__ieee754_pow+0x3e0>)
 80128cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d0:	f7ed fe42 	bl	8000558 <__aeabi_dmul>
 80128d4:	4602      	mov	r2, r0
 80128d6:	460b      	mov	r3, r1
 80128d8:	4650      	mov	r0, sl
 80128da:	4659      	mov	r1, fp
 80128dc:	f7ed fc84 	bl	80001e8 <__aeabi_dsub>
 80128e0:	4602      	mov	r2, r0
 80128e2:	460b      	mov	r3, r1
 80128e4:	4680      	mov	r8, r0
 80128e6:	4689      	mov	r9, r1
 80128e8:	4630      	mov	r0, r6
 80128ea:	4639      	mov	r1, r7
 80128ec:	f7ed fc7e 	bl	80001ec <__adddf3>
 80128f0:	2000      	movs	r0, #0
 80128f2:	4632      	mov	r2, r6
 80128f4:	463b      	mov	r3, r7
 80128f6:	4604      	mov	r4, r0
 80128f8:	460d      	mov	r5, r1
 80128fa:	f7ed fc75 	bl	80001e8 <__aeabi_dsub>
 80128fe:	4602      	mov	r2, r0
 8012900:	460b      	mov	r3, r1
 8012902:	4640      	mov	r0, r8
 8012904:	4649      	mov	r1, r9
 8012906:	f7ed fc6f 	bl	80001e8 <__aeabi_dsub>
 801290a:	9b04      	ldr	r3, [sp, #16]
 801290c:	9a06      	ldr	r2, [sp, #24]
 801290e:	3b01      	subs	r3, #1
 8012910:	4313      	orrs	r3, r2
 8012912:	4682      	mov	sl, r0
 8012914:	468b      	mov	fp, r1
 8012916:	f040 81e7 	bne.w	8012ce8 <__ieee754_pow+0x700>
 801291a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80129d0 <__ieee754_pow+0x3e8>
 801291e:	eeb0 8a47 	vmov.f32	s16, s14
 8012922:	eef0 8a67 	vmov.f32	s17, s15
 8012926:	e9dd 6700 	ldrd	r6, r7, [sp]
 801292a:	2600      	movs	r6, #0
 801292c:	4632      	mov	r2, r6
 801292e:	463b      	mov	r3, r7
 8012930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012934:	f7ed fc58 	bl	80001e8 <__aeabi_dsub>
 8012938:	4622      	mov	r2, r4
 801293a:	462b      	mov	r3, r5
 801293c:	f7ed fe0c 	bl	8000558 <__aeabi_dmul>
 8012940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012944:	4680      	mov	r8, r0
 8012946:	4689      	mov	r9, r1
 8012948:	4650      	mov	r0, sl
 801294a:	4659      	mov	r1, fp
 801294c:	f7ed fe04 	bl	8000558 <__aeabi_dmul>
 8012950:	4602      	mov	r2, r0
 8012952:	460b      	mov	r3, r1
 8012954:	4640      	mov	r0, r8
 8012956:	4649      	mov	r1, r9
 8012958:	f7ed fc48 	bl	80001ec <__adddf3>
 801295c:	4632      	mov	r2, r6
 801295e:	463b      	mov	r3, r7
 8012960:	4680      	mov	r8, r0
 8012962:	4689      	mov	r9, r1
 8012964:	4620      	mov	r0, r4
 8012966:	4629      	mov	r1, r5
 8012968:	f7ed fdf6 	bl	8000558 <__aeabi_dmul>
 801296c:	460b      	mov	r3, r1
 801296e:	4604      	mov	r4, r0
 8012970:	460d      	mov	r5, r1
 8012972:	4602      	mov	r2, r0
 8012974:	4649      	mov	r1, r9
 8012976:	4640      	mov	r0, r8
 8012978:	f7ed fc38 	bl	80001ec <__adddf3>
 801297c:	4b19      	ldr	r3, [pc, #100]	; (80129e4 <__ieee754_pow+0x3fc>)
 801297e:	4299      	cmp	r1, r3
 8012980:	ec45 4b19 	vmov	d9, r4, r5
 8012984:	4606      	mov	r6, r0
 8012986:	460f      	mov	r7, r1
 8012988:	468b      	mov	fp, r1
 801298a:	f340 82f1 	ble.w	8012f70 <__ieee754_pow+0x988>
 801298e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012992:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012996:	4303      	orrs	r3, r0
 8012998:	f000 81e4 	beq.w	8012d64 <__ieee754_pow+0x77c>
 801299c:	ec51 0b18 	vmov	r0, r1, d8
 80129a0:	2200      	movs	r2, #0
 80129a2:	2300      	movs	r3, #0
 80129a4:	f7ee f84a 	bl	8000a3c <__aeabi_dcmplt>
 80129a8:	3800      	subs	r0, #0
 80129aa:	bf18      	it	ne
 80129ac:	2001      	movne	r0, #1
 80129ae:	e72b      	b.n	8012808 <__ieee754_pow+0x220>
 80129b0:	60000000 	.word	0x60000000
 80129b4:	3ff71547 	.word	0x3ff71547
 80129b8:	f85ddf44 	.word	0xf85ddf44
 80129bc:	3e54ae0b 	.word	0x3e54ae0b
 80129c0:	55555555 	.word	0x55555555
 80129c4:	3fd55555 	.word	0x3fd55555
 80129c8:	652b82fe 	.word	0x652b82fe
 80129cc:	3ff71547 	.word	0x3ff71547
 80129d0:	00000000 	.word	0x00000000
 80129d4:	bff00000 	.word	0xbff00000
 80129d8:	3ff00000 	.word	0x3ff00000
 80129dc:	3fd00000 	.word	0x3fd00000
 80129e0:	3fe00000 	.word	0x3fe00000
 80129e4:	408fffff 	.word	0x408fffff
 80129e8:	4bd5      	ldr	r3, [pc, #852]	; (8012d40 <__ieee754_pow+0x758>)
 80129ea:	402b      	ands	r3, r5
 80129ec:	2200      	movs	r2, #0
 80129ee:	b92b      	cbnz	r3, 80129fc <__ieee754_pow+0x414>
 80129f0:	4bd4      	ldr	r3, [pc, #848]	; (8012d44 <__ieee754_pow+0x75c>)
 80129f2:	f7ed fdb1 	bl	8000558 <__aeabi_dmul>
 80129f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80129fa:	460c      	mov	r4, r1
 80129fc:	1523      	asrs	r3, r4, #20
 80129fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012a02:	4413      	add	r3, r2
 8012a04:	9305      	str	r3, [sp, #20]
 8012a06:	4bd0      	ldr	r3, [pc, #832]	; (8012d48 <__ieee754_pow+0x760>)
 8012a08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012a0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012a10:	429c      	cmp	r4, r3
 8012a12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012a16:	dd08      	ble.n	8012a2a <__ieee754_pow+0x442>
 8012a18:	4bcc      	ldr	r3, [pc, #816]	; (8012d4c <__ieee754_pow+0x764>)
 8012a1a:	429c      	cmp	r4, r3
 8012a1c:	f340 8162 	ble.w	8012ce4 <__ieee754_pow+0x6fc>
 8012a20:	9b05      	ldr	r3, [sp, #20]
 8012a22:	3301      	adds	r3, #1
 8012a24:	9305      	str	r3, [sp, #20]
 8012a26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012a2a:	2400      	movs	r4, #0
 8012a2c:	00e3      	lsls	r3, r4, #3
 8012a2e:	9307      	str	r3, [sp, #28]
 8012a30:	4bc7      	ldr	r3, [pc, #796]	; (8012d50 <__ieee754_pow+0x768>)
 8012a32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012a36:	ed93 7b00 	vldr	d7, [r3]
 8012a3a:	4629      	mov	r1, r5
 8012a3c:	ec53 2b17 	vmov	r2, r3, d7
 8012a40:	eeb0 9a47 	vmov.f32	s18, s14
 8012a44:	eef0 9a67 	vmov.f32	s19, s15
 8012a48:	4682      	mov	sl, r0
 8012a4a:	f7ed fbcd 	bl	80001e8 <__aeabi_dsub>
 8012a4e:	4652      	mov	r2, sl
 8012a50:	4606      	mov	r6, r0
 8012a52:	460f      	mov	r7, r1
 8012a54:	462b      	mov	r3, r5
 8012a56:	ec51 0b19 	vmov	r0, r1, d9
 8012a5a:	f7ed fbc7 	bl	80001ec <__adddf3>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	460b      	mov	r3, r1
 8012a62:	2000      	movs	r0, #0
 8012a64:	49bb      	ldr	r1, [pc, #748]	; (8012d54 <__ieee754_pow+0x76c>)
 8012a66:	f7ed fea1 	bl	80007ac <__aeabi_ddiv>
 8012a6a:	ec41 0b1a 	vmov	d10, r0, r1
 8012a6e:	4602      	mov	r2, r0
 8012a70:	460b      	mov	r3, r1
 8012a72:	4630      	mov	r0, r6
 8012a74:	4639      	mov	r1, r7
 8012a76:	f7ed fd6f 	bl	8000558 <__aeabi_dmul>
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a80:	9302      	str	r3, [sp, #8]
 8012a82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012a86:	46ab      	mov	fp, r5
 8012a88:	106d      	asrs	r5, r5, #1
 8012a8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012a8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012a92:	ec41 0b18 	vmov	d8, r0, r1
 8012a96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	4640      	mov	r0, r8
 8012a9e:	4649      	mov	r1, r9
 8012aa0:	4614      	mov	r4, r2
 8012aa2:	461d      	mov	r5, r3
 8012aa4:	f7ed fd58 	bl	8000558 <__aeabi_dmul>
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	460b      	mov	r3, r1
 8012aac:	4630      	mov	r0, r6
 8012aae:	4639      	mov	r1, r7
 8012ab0:	f7ed fb9a 	bl	80001e8 <__aeabi_dsub>
 8012ab4:	ec53 2b19 	vmov	r2, r3, d9
 8012ab8:	4606      	mov	r6, r0
 8012aba:	460f      	mov	r7, r1
 8012abc:	4620      	mov	r0, r4
 8012abe:	4629      	mov	r1, r5
 8012ac0:	f7ed fb92 	bl	80001e8 <__aeabi_dsub>
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	460b      	mov	r3, r1
 8012ac8:	4650      	mov	r0, sl
 8012aca:	4659      	mov	r1, fp
 8012acc:	f7ed fb8c 	bl	80001e8 <__aeabi_dsub>
 8012ad0:	4642      	mov	r2, r8
 8012ad2:	464b      	mov	r3, r9
 8012ad4:	f7ed fd40 	bl	8000558 <__aeabi_dmul>
 8012ad8:	4602      	mov	r2, r0
 8012ada:	460b      	mov	r3, r1
 8012adc:	4630      	mov	r0, r6
 8012ade:	4639      	mov	r1, r7
 8012ae0:	f7ed fb82 	bl	80001e8 <__aeabi_dsub>
 8012ae4:	ec53 2b1a 	vmov	r2, r3, d10
 8012ae8:	f7ed fd36 	bl	8000558 <__aeabi_dmul>
 8012aec:	ec53 2b18 	vmov	r2, r3, d8
 8012af0:	ec41 0b19 	vmov	d9, r0, r1
 8012af4:	ec51 0b18 	vmov	r0, r1, d8
 8012af8:	f7ed fd2e 	bl	8000558 <__aeabi_dmul>
 8012afc:	a37c      	add	r3, pc, #496	; (adr r3, 8012cf0 <__ieee754_pow+0x708>)
 8012afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b02:	4604      	mov	r4, r0
 8012b04:	460d      	mov	r5, r1
 8012b06:	f7ed fd27 	bl	8000558 <__aeabi_dmul>
 8012b0a:	a37b      	add	r3, pc, #492	; (adr r3, 8012cf8 <__ieee754_pow+0x710>)
 8012b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b10:	f7ed fb6c 	bl	80001ec <__adddf3>
 8012b14:	4622      	mov	r2, r4
 8012b16:	462b      	mov	r3, r5
 8012b18:	f7ed fd1e 	bl	8000558 <__aeabi_dmul>
 8012b1c:	a378      	add	r3, pc, #480	; (adr r3, 8012d00 <__ieee754_pow+0x718>)
 8012b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b22:	f7ed fb63 	bl	80001ec <__adddf3>
 8012b26:	4622      	mov	r2, r4
 8012b28:	462b      	mov	r3, r5
 8012b2a:	f7ed fd15 	bl	8000558 <__aeabi_dmul>
 8012b2e:	a376      	add	r3, pc, #472	; (adr r3, 8012d08 <__ieee754_pow+0x720>)
 8012b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b34:	f7ed fb5a 	bl	80001ec <__adddf3>
 8012b38:	4622      	mov	r2, r4
 8012b3a:	462b      	mov	r3, r5
 8012b3c:	f7ed fd0c 	bl	8000558 <__aeabi_dmul>
 8012b40:	a373      	add	r3, pc, #460	; (adr r3, 8012d10 <__ieee754_pow+0x728>)
 8012b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b46:	f7ed fb51 	bl	80001ec <__adddf3>
 8012b4a:	4622      	mov	r2, r4
 8012b4c:	462b      	mov	r3, r5
 8012b4e:	f7ed fd03 	bl	8000558 <__aeabi_dmul>
 8012b52:	a371      	add	r3, pc, #452	; (adr r3, 8012d18 <__ieee754_pow+0x730>)
 8012b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b58:	f7ed fb48 	bl	80001ec <__adddf3>
 8012b5c:	4622      	mov	r2, r4
 8012b5e:	4606      	mov	r6, r0
 8012b60:	460f      	mov	r7, r1
 8012b62:	462b      	mov	r3, r5
 8012b64:	4620      	mov	r0, r4
 8012b66:	4629      	mov	r1, r5
 8012b68:	f7ed fcf6 	bl	8000558 <__aeabi_dmul>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	460b      	mov	r3, r1
 8012b70:	4630      	mov	r0, r6
 8012b72:	4639      	mov	r1, r7
 8012b74:	f7ed fcf0 	bl	8000558 <__aeabi_dmul>
 8012b78:	4642      	mov	r2, r8
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	460d      	mov	r5, r1
 8012b7e:	464b      	mov	r3, r9
 8012b80:	ec51 0b18 	vmov	r0, r1, d8
 8012b84:	f7ed fb32 	bl	80001ec <__adddf3>
 8012b88:	ec53 2b19 	vmov	r2, r3, d9
 8012b8c:	f7ed fce4 	bl	8000558 <__aeabi_dmul>
 8012b90:	4622      	mov	r2, r4
 8012b92:	462b      	mov	r3, r5
 8012b94:	f7ed fb2a 	bl	80001ec <__adddf3>
 8012b98:	4642      	mov	r2, r8
 8012b9a:	4682      	mov	sl, r0
 8012b9c:	468b      	mov	fp, r1
 8012b9e:	464b      	mov	r3, r9
 8012ba0:	4640      	mov	r0, r8
 8012ba2:	4649      	mov	r1, r9
 8012ba4:	f7ed fcd8 	bl	8000558 <__aeabi_dmul>
 8012ba8:	4b6b      	ldr	r3, [pc, #428]	; (8012d58 <__ieee754_pow+0x770>)
 8012baa:	2200      	movs	r2, #0
 8012bac:	4606      	mov	r6, r0
 8012bae:	460f      	mov	r7, r1
 8012bb0:	f7ed fb1c 	bl	80001ec <__adddf3>
 8012bb4:	4652      	mov	r2, sl
 8012bb6:	465b      	mov	r3, fp
 8012bb8:	f7ed fb18 	bl	80001ec <__adddf3>
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	460d      	mov	r5, r1
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	4640      	mov	r0, r8
 8012bc8:	4649      	mov	r1, r9
 8012bca:	f7ed fcc5 	bl	8000558 <__aeabi_dmul>
 8012bce:	4b62      	ldr	r3, [pc, #392]	; (8012d58 <__ieee754_pow+0x770>)
 8012bd0:	4680      	mov	r8, r0
 8012bd2:	4689      	mov	r9, r1
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	4629      	mov	r1, r5
 8012bda:	f7ed fb05 	bl	80001e8 <__aeabi_dsub>
 8012bde:	4632      	mov	r2, r6
 8012be0:	463b      	mov	r3, r7
 8012be2:	f7ed fb01 	bl	80001e8 <__aeabi_dsub>
 8012be6:	4602      	mov	r2, r0
 8012be8:	460b      	mov	r3, r1
 8012bea:	4650      	mov	r0, sl
 8012bec:	4659      	mov	r1, fp
 8012bee:	f7ed fafb 	bl	80001e8 <__aeabi_dsub>
 8012bf2:	ec53 2b18 	vmov	r2, r3, d8
 8012bf6:	f7ed fcaf 	bl	8000558 <__aeabi_dmul>
 8012bfa:	4622      	mov	r2, r4
 8012bfc:	4606      	mov	r6, r0
 8012bfe:	460f      	mov	r7, r1
 8012c00:	462b      	mov	r3, r5
 8012c02:	ec51 0b19 	vmov	r0, r1, d9
 8012c06:	f7ed fca7 	bl	8000558 <__aeabi_dmul>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	4630      	mov	r0, r6
 8012c10:	4639      	mov	r1, r7
 8012c12:	f7ed faeb 	bl	80001ec <__adddf3>
 8012c16:	4606      	mov	r6, r0
 8012c18:	460f      	mov	r7, r1
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	460b      	mov	r3, r1
 8012c1e:	4640      	mov	r0, r8
 8012c20:	4649      	mov	r1, r9
 8012c22:	f7ed fae3 	bl	80001ec <__adddf3>
 8012c26:	a33e      	add	r3, pc, #248	; (adr r3, 8012d20 <__ieee754_pow+0x738>)
 8012c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2c:	2000      	movs	r0, #0
 8012c2e:	4604      	mov	r4, r0
 8012c30:	460d      	mov	r5, r1
 8012c32:	f7ed fc91 	bl	8000558 <__aeabi_dmul>
 8012c36:	4642      	mov	r2, r8
 8012c38:	ec41 0b18 	vmov	d8, r0, r1
 8012c3c:	464b      	mov	r3, r9
 8012c3e:	4620      	mov	r0, r4
 8012c40:	4629      	mov	r1, r5
 8012c42:	f7ed fad1 	bl	80001e8 <__aeabi_dsub>
 8012c46:	4602      	mov	r2, r0
 8012c48:	460b      	mov	r3, r1
 8012c4a:	4630      	mov	r0, r6
 8012c4c:	4639      	mov	r1, r7
 8012c4e:	f7ed facb 	bl	80001e8 <__aeabi_dsub>
 8012c52:	a335      	add	r3, pc, #212	; (adr r3, 8012d28 <__ieee754_pow+0x740>)
 8012c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c58:	f7ed fc7e 	bl	8000558 <__aeabi_dmul>
 8012c5c:	a334      	add	r3, pc, #208	; (adr r3, 8012d30 <__ieee754_pow+0x748>)
 8012c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c62:	4606      	mov	r6, r0
 8012c64:	460f      	mov	r7, r1
 8012c66:	4620      	mov	r0, r4
 8012c68:	4629      	mov	r1, r5
 8012c6a:	f7ed fc75 	bl	8000558 <__aeabi_dmul>
 8012c6e:	4602      	mov	r2, r0
 8012c70:	460b      	mov	r3, r1
 8012c72:	4630      	mov	r0, r6
 8012c74:	4639      	mov	r1, r7
 8012c76:	f7ed fab9 	bl	80001ec <__adddf3>
 8012c7a:	9a07      	ldr	r2, [sp, #28]
 8012c7c:	4b37      	ldr	r3, [pc, #220]	; (8012d5c <__ieee754_pow+0x774>)
 8012c7e:	4413      	add	r3, r2
 8012c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c84:	f7ed fab2 	bl	80001ec <__adddf3>
 8012c88:	4682      	mov	sl, r0
 8012c8a:	9805      	ldr	r0, [sp, #20]
 8012c8c:	468b      	mov	fp, r1
 8012c8e:	f7ed fbf9 	bl	8000484 <__aeabi_i2d>
 8012c92:	9a07      	ldr	r2, [sp, #28]
 8012c94:	4b32      	ldr	r3, [pc, #200]	; (8012d60 <__ieee754_pow+0x778>)
 8012c96:	4413      	add	r3, r2
 8012c98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012c9c:	4606      	mov	r6, r0
 8012c9e:	460f      	mov	r7, r1
 8012ca0:	4652      	mov	r2, sl
 8012ca2:	465b      	mov	r3, fp
 8012ca4:	ec51 0b18 	vmov	r0, r1, d8
 8012ca8:	f7ed faa0 	bl	80001ec <__adddf3>
 8012cac:	4642      	mov	r2, r8
 8012cae:	464b      	mov	r3, r9
 8012cb0:	f7ed fa9c 	bl	80001ec <__adddf3>
 8012cb4:	4632      	mov	r2, r6
 8012cb6:	463b      	mov	r3, r7
 8012cb8:	f7ed fa98 	bl	80001ec <__adddf3>
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	4632      	mov	r2, r6
 8012cc0:	463b      	mov	r3, r7
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	460d      	mov	r5, r1
 8012cc6:	f7ed fa8f 	bl	80001e8 <__aeabi_dsub>
 8012cca:	4642      	mov	r2, r8
 8012ccc:	464b      	mov	r3, r9
 8012cce:	f7ed fa8b 	bl	80001e8 <__aeabi_dsub>
 8012cd2:	ec53 2b18 	vmov	r2, r3, d8
 8012cd6:	f7ed fa87 	bl	80001e8 <__aeabi_dsub>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	460b      	mov	r3, r1
 8012cde:	4650      	mov	r0, sl
 8012ce0:	4659      	mov	r1, fp
 8012ce2:	e610      	b.n	8012906 <__ieee754_pow+0x31e>
 8012ce4:	2401      	movs	r4, #1
 8012ce6:	e6a1      	b.n	8012a2c <__ieee754_pow+0x444>
 8012ce8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012d38 <__ieee754_pow+0x750>
 8012cec:	e617      	b.n	801291e <__ieee754_pow+0x336>
 8012cee:	bf00      	nop
 8012cf0:	4a454eef 	.word	0x4a454eef
 8012cf4:	3fca7e28 	.word	0x3fca7e28
 8012cf8:	93c9db65 	.word	0x93c9db65
 8012cfc:	3fcd864a 	.word	0x3fcd864a
 8012d00:	a91d4101 	.word	0xa91d4101
 8012d04:	3fd17460 	.word	0x3fd17460
 8012d08:	518f264d 	.word	0x518f264d
 8012d0c:	3fd55555 	.word	0x3fd55555
 8012d10:	db6fabff 	.word	0xdb6fabff
 8012d14:	3fdb6db6 	.word	0x3fdb6db6
 8012d18:	33333303 	.word	0x33333303
 8012d1c:	3fe33333 	.word	0x3fe33333
 8012d20:	e0000000 	.word	0xe0000000
 8012d24:	3feec709 	.word	0x3feec709
 8012d28:	dc3a03fd 	.word	0xdc3a03fd
 8012d2c:	3feec709 	.word	0x3feec709
 8012d30:	145b01f5 	.word	0x145b01f5
 8012d34:	be3e2fe0 	.word	0xbe3e2fe0
 8012d38:	00000000 	.word	0x00000000
 8012d3c:	3ff00000 	.word	0x3ff00000
 8012d40:	7ff00000 	.word	0x7ff00000
 8012d44:	43400000 	.word	0x43400000
 8012d48:	0003988e 	.word	0x0003988e
 8012d4c:	000bb679 	.word	0x000bb679
 8012d50:	08013c10 	.word	0x08013c10
 8012d54:	3ff00000 	.word	0x3ff00000
 8012d58:	40080000 	.word	0x40080000
 8012d5c:	08013c30 	.word	0x08013c30
 8012d60:	08013c20 	.word	0x08013c20
 8012d64:	a3b5      	add	r3, pc, #724	; (adr r3, 801303c <__ieee754_pow+0xa54>)
 8012d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6a:	4640      	mov	r0, r8
 8012d6c:	4649      	mov	r1, r9
 8012d6e:	f7ed fa3d 	bl	80001ec <__adddf3>
 8012d72:	4622      	mov	r2, r4
 8012d74:	ec41 0b1a 	vmov	d10, r0, r1
 8012d78:	462b      	mov	r3, r5
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	4639      	mov	r1, r7
 8012d7e:	f7ed fa33 	bl	80001e8 <__aeabi_dsub>
 8012d82:	4602      	mov	r2, r0
 8012d84:	460b      	mov	r3, r1
 8012d86:	ec51 0b1a 	vmov	r0, r1, d10
 8012d8a:	f7ed fe75 	bl	8000a78 <__aeabi_dcmpgt>
 8012d8e:	2800      	cmp	r0, #0
 8012d90:	f47f ae04 	bne.w	801299c <__ieee754_pow+0x3b4>
 8012d94:	4aa4      	ldr	r2, [pc, #656]	; (8013028 <__ieee754_pow+0xa40>)
 8012d96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	f340 8108 	ble.w	8012fb0 <__ieee754_pow+0x9c8>
 8012da0:	151b      	asrs	r3, r3, #20
 8012da2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012da6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012daa:	fa4a f303 	asr.w	r3, sl, r3
 8012dae:	445b      	add	r3, fp
 8012db0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012db4:	4e9d      	ldr	r6, [pc, #628]	; (801302c <__ieee754_pow+0xa44>)
 8012db6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012dba:	4116      	asrs	r6, r2
 8012dbc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012dc0:	2000      	movs	r0, #0
 8012dc2:	ea23 0106 	bic.w	r1, r3, r6
 8012dc6:	f1c2 0214 	rsb	r2, r2, #20
 8012dca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012dce:	fa4a fa02 	asr.w	sl, sl, r2
 8012dd2:	f1bb 0f00 	cmp.w	fp, #0
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	460b      	mov	r3, r1
 8012dda:	4620      	mov	r0, r4
 8012ddc:	4629      	mov	r1, r5
 8012dde:	bfb8      	it	lt
 8012de0:	f1ca 0a00 	rsblt	sl, sl, #0
 8012de4:	f7ed fa00 	bl	80001e8 <__aeabi_dsub>
 8012de8:	ec41 0b19 	vmov	d9, r0, r1
 8012dec:	4642      	mov	r2, r8
 8012dee:	464b      	mov	r3, r9
 8012df0:	ec51 0b19 	vmov	r0, r1, d9
 8012df4:	f7ed f9fa 	bl	80001ec <__adddf3>
 8012df8:	a37b      	add	r3, pc, #492	; (adr r3, 8012fe8 <__ieee754_pow+0xa00>)
 8012dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dfe:	2000      	movs	r0, #0
 8012e00:	4604      	mov	r4, r0
 8012e02:	460d      	mov	r5, r1
 8012e04:	f7ed fba8 	bl	8000558 <__aeabi_dmul>
 8012e08:	ec53 2b19 	vmov	r2, r3, d9
 8012e0c:	4606      	mov	r6, r0
 8012e0e:	460f      	mov	r7, r1
 8012e10:	4620      	mov	r0, r4
 8012e12:	4629      	mov	r1, r5
 8012e14:	f7ed f9e8 	bl	80001e8 <__aeabi_dsub>
 8012e18:	4602      	mov	r2, r0
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	4640      	mov	r0, r8
 8012e1e:	4649      	mov	r1, r9
 8012e20:	f7ed f9e2 	bl	80001e8 <__aeabi_dsub>
 8012e24:	a372      	add	r3, pc, #456	; (adr r3, 8012ff0 <__ieee754_pow+0xa08>)
 8012e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2a:	f7ed fb95 	bl	8000558 <__aeabi_dmul>
 8012e2e:	a372      	add	r3, pc, #456	; (adr r3, 8012ff8 <__ieee754_pow+0xa10>)
 8012e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e34:	4680      	mov	r8, r0
 8012e36:	4689      	mov	r9, r1
 8012e38:	4620      	mov	r0, r4
 8012e3a:	4629      	mov	r1, r5
 8012e3c:	f7ed fb8c 	bl	8000558 <__aeabi_dmul>
 8012e40:	4602      	mov	r2, r0
 8012e42:	460b      	mov	r3, r1
 8012e44:	4640      	mov	r0, r8
 8012e46:	4649      	mov	r1, r9
 8012e48:	f7ed f9d0 	bl	80001ec <__adddf3>
 8012e4c:	4604      	mov	r4, r0
 8012e4e:	460d      	mov	r5, r1
 8012e50:	4602      	mov	r2, r0
 8012e52:	460b      	mov	r3, r1
 8012e54:	4630      	mov	r0, r6
 8012e56:	4639      	mov	r1, r7
 8012e58:	f7ed f9c8 	bl	80001ec <__adddf3>
 8012e5c:	4632      	mov	r2, r6
 8012e5e:	463b      	mov	r3, r7
 8012e60:	4680      	mov	r8, r0
 8012e62:	4689      	mov	r9, r1
 8012e64:	f7ed f9c0 	bl	80001e8 <__aeabi_dsub>
 8012e68:	4602      	mov	r2, r0
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	4629      	mov	r1, r5
 8012e70:	f7ed f9ba 	bl	80001e8 <__aeabi_dsub>
 8012e74:	4642      	mov	r2, r8
 8012e76:	4606      	mov	r6, r0
 8012e78:	460f      	mov	r7, r1
 8012e7a:	464b      	mov	r3, r9
 8012e7c:	4640      	mov	r0, r8
 8012e7e:	4649      	mov	r1, r9
 8012e80:	f7ed fb6a 	bl	8000558 <__aeabi_dmul>
 8012e84:	a35e      	add	r3, pc, #376	; (adr r3, 8013000 <__ieee754_pow+0xa18>)
 8012e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	460d      	mov	r5, r1
 8012e8e:	f7ed fb63 	bl	8000558 <__aeabi_dmul>
 8012e92:	a35d      	add	r3, pc, #372	; (adr r3, 8013008 <__ieee754_pow+0xa20>)
 8012e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e98:	f7ed f9a6 	bl	80001e8 <__aeabi_dsub>
 8012e9c:	4622      	mov	r2, r4
 8012e9e:	462b      	mov	r3, r5
 8012ea0:	f7ed fb5a 	bl	8000558 <__aeabi_dmul>
 8012ea4:	a35a      	add	r3, pc, #360	; (adr r3, 8013010 <__ieee754_pow+0xa28>)
 8012ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eaa:	f7ed f99f 	bl	80001ec <__adddf3>
 8012eae:	4622      	mov	r2, r4
 8012eb0:	462b      	mov	r3, r5
 8012eb2:	f7ed fb51 	bl	8000558 <__aeabi_dmul>
 8012eb6:	a358      	add	r3, pc, #352	; (adr r3, 8013018 <__ieee754_pow+0xa30>)
 8012eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ebc:	f7ed f994 	bl	80001e8 <__aeabi_dsub>
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	462b      	mov	r3, r5
 8012ec4:	f7ed fb48 	bl	8000558 <__aeabi_dmul>
 8012ec8:	a355      	add	r3, pc, #340	; (adr r3, 8013020 <__ieee754_pow+0xa38>)
 8012eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ece:	f7ed f98d 	bl	80001ec <__adddf3>
 8012ed2:	4622      	mov	r2, r4
 8012ed4:	462b      	mov	r3, r5
 8012ed6:	f7ed fb3f 	bl	8000558 <__aeabi_dmul>
 8012eda:	4602      	mov	r2, r0
 8012edc:	460b      	mov	r3, r1
 8012ede:	4640      	mov	r0, r8
 8012ee0:	4649      	mov	r1, r9
 8012ee2:	f7ed f981 	bl	80001e8 <__aeabi_dsub>
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	460d      	mov	r5, r1
 8012eea:	4602      	mov	r2, r0
 8012eec:	460b      	mov	r3, r1
 8012eee:	4640      	mov	r0, r8
 8012ef0:	4649      	mov	r1, r9
 8012ef2:	f7ed fb31 	bl	8000558 <__aeabi_dmul>
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	ec41 0b19 	vmov	d9, r0, r1
 8012efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012f00:	4620      	mov	r0, r4
 8012f02:	4629      	mov	r1, r5
 8012f04:	f7ed f970 	bl	80001e8 <__aeabi_dsub>
 8012f08:	4602      	mov	r2, r0
 8012f0a:	460b      	mov	r3, r1
 8012f0c:	ec51 0b19 	vmov	r0, r1, d9
 8012f10:	f7ed fc4c 	bl	80007ac <__aeabi_ddiv>
 8012f14:	4632      	mov	r2, r6
 8012f16:	4604      	mov	r4, r0
 8012f18:	460d      	mov	r5, r1
 8012f1a:	463b      	mov	r3, r7
 8012f1c:	4640      	mov	r0, r8
 8012f1e:	4649      	mov	r1, r9
 8012f20:	f7ed fb1a 	bl	8000558 <__aeabi_dmul>
 8012f24:	4632      	mov	r2, r6
 8012f26:	463b      	mov	r3, r7
 8012f28:	f7ed f960 	bl	80001ec <__adddf3>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	460b      	mov	r3, r1
 8012f30:	4620      	mov	r0, r4
 8012f32:	4629      	mov	r1, r5
 8012f34:	f7ed f958 	bl	80001e8 <__aeabi_dsub>
 8012f38:	4642      	mov	r2, r8
 8012f3a:	464b      	mov	r3, r9
 8012f3c:	f7ed f954 	bl	80001e8 <__aeabi_dsub>
 8012f40:	460b      	mov	r3, r1
 8012f42:	4602      	mov	r2, r0
 8012f44:	493a      	ldr	r1, [pc, #232]	; (8013030 <__ieee754_pow+0xa48>)
 8012f46:	2000      	movs	r0, #0
 8012f48:	f7ed f94e 	bl	80001e8 <__aeabi_dsub>
 8012f4c:	ec41 0b10 	vmov	d0, r0, r1
 8012f50:	ee10 3a90 	vmov	r3, s1
 8012f54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012f5c:	da2b      	bge.n	8012fb6 <__ieee754_pow+0x9ce>
 8012f5e:	4650      	mov	r0, sl
 8012f60:	f000 fa0a 	bl	8013378 <scalbn>
 8012f64:	ec51 0b10 	vmov	r0, r1, d0
 8012f68:	ec53 2b18 	vmov	r2, r3, d8
 8012f6c:	f7ff bbed 	b.w	801274a <__ieee754_pow+0x162>
 8012f70:	4b30      	ldr	r3, [pc, #192]	; (8013034 <__ieee754_pow+0xa4c>)
 8012f72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012f76:	429e      	cmp	r6, r3
 8012f78:	f77f af0c 	ble.w	8012d94 <__ieee754_pow+0x7ac>
 8012f7c:	4b2e      	ldr	r3, [pc, #184]	; (8013038 <__ieee754_pow+0xa50>)
 8012f7e:	440b      	add	r3, r1
 8012f80:	4303      	orrs	r3, r0
 8012f82:	d009      	beq.n	8012f98 <__ieee754_pow+0x9b0>
 8012f84:	ec51 0b18 	vmov	r0, r1, d8
 8012f88:	2200      	movs	r2, #0
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	f7ed fd56 	bl	8000a3c <__aeabi_dcmplt>
 8012f90:	3800      	subs	r0, #0
 8012f92:	bf18      	it	ne
 8012f94:	2001      	movne	r0, #1
 8012f96:	e447      	b.n	8012828 <__ieee754_pow+0x240>
 8012f98:	4622      	mov	r2, r4
 8012f9a:	462b      	mov	r3, r5
 8012f9c:	f7ed f924 	bl	80001e8 <__aeabi_dsub>
 8012fa0:	4642      	mov	r2, r8
 8012fa2:	464b      	mov	r3, r9
 8012fa4:	f7ed fd5e 	bl	8000a64 <__aeabi_dcmpge>
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	f43f aef3 	beq.w	8012d94 <__ieee754_pow+0x7ac>
 8012fae:	e7e9      	b.n	8012f84 <__ieee754_pow+0x99c>
 8012fb0:	f04f 0a00 	mov.w	sl, #0
 8012fb4:	e71a      	b.n	8012dec <__ieee754_pow+0x804>
 8012fb6:	ec51 0b10 	vmov	r0, r1, d0
 8012fba:	4619      	mov	r1, r3
 8012fbc:	e7d4      	b.n	8012f68 <__ieee754_pow+0x980>
 8012fbe:	491c      	ldr	r1, [pc, #112]	; (8013030 <__ieee754_pow+0xa48>)
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	f7ff bb30 	b.w	8012626 <__ieee754_pow+0x3e>
 8012fc6:	2000      	movs	r0, #0
 8012fc8:	2100      	movs	r1, #0
 8012fca:	f7ff bb2c 	b.w	8012626 <__ieee754_pow+0x3e>
 8012fce:	4630      	mov	r0, r6
 8012fd0:	4639      	mov	r1, r7
 8012fd2:	f7ff bb28 	b.w	8012626 <__ieee754_pow+0x3e>
 8012fd6:	9204      	str	r2, [sp, #16]
 8012fd8:	f7ff bb7a 	b.w	80126d0 <__ieee754_pow+0xe8>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	f7ff bb64 	b.w	80126aa <__ieee754_pow+0xc2>
 8012fe2:	bf00      	nop
 8012fe4:	f3af 8000 	nop.w
 8012fe8:	00000000 	.word	0x00000000
 8012fec:	3fe62e43 	.word	0x3fe62e43
 8012ff0:	fefa39ef 	.word	0xfefa39ef
 8012ff4:	3fe62e42 	.word	0x3fe62e42
 8012ff8:	0ca86c39 	.word	0x0ca86c39
 8012ffc:	be205c61 	.word	0xbe205c61
 8013000:	72bea4d0 	.word	0x72bea4d0
 8013004:	3e663769 	.word	0x3e663769
 8013008:	c5d26bf1 	.word	0xc5d26bf1
 801300c:	3ebbbd41 	.word	0x3ebbbd41
 8013010:	af25de2c 	.word	0xaf25de2c
 8013014:	3f11566a 	.word	0x3f11566a
 8013018:	16bebd93 	.word	0x16bebd93
 801301c:	3f66c16c 	.word	0x3f66c16c
 8013020:	5555553e 	.word	0x5555553e
 8013024:	3fc55555 	.word	0x3fc55555
 8013028:	3fe00000 	.word	0x3fe00000
 801302c:	000fffff 	.word	0x000fffff
 8013030:	3ff00000 	.word	0x3ff00000
 8013034:	4090cbff 	.word	0x4090cbff
 8013038:	3f6f3400 	.word	0x3f6f3400
 801303c:	652b82fe 	.word	0x652b82fe
 8013040:	3c971547 	.word	0x3c971547

08013044 <__ieee754_sqrt>:
 8013044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013048:	ec55 4b10 	vmov	r4, r5, d0
 801304c:	4e55      	ldr	r6, [pc, #340]	; (80131a4 <__ieee754_sqrt+0x160>)
 801304e:	43ae      	bics	r6, r5
 8013050:	ee10 0a10 	vmov	r0, s0
 8013054:	ee10 3a10 	vmov	r3, s0
 8013058:	462a      	mov	r2, r5
 801305a:	4629      	mov	r1, r5
 801305c:	d110      	bne.n	8013080 <__ieee754_sqrt+0x3c>
 801305e:	ee10 2a10 	vmov	r2, s0
 8013062:	462b      	mov	r3, r5
 8013064:	f7ed fa78 	bl	8000558 <__aeabi_dmul>
 8013068:	4602      	mov	r2, r0
 801306a:	460b      	mov	r3, r1
 801306c:	4620      	mov	r0, r4
 801306e:	4629      	mov	r1, r5
 8013070:	f7ed f8bc 	bl	80001ec <__adddf3>
 8013074:	4604      	mov	r4, r0
 8013076:	460d      	mov	r5, r1
 8013078:	ec45 4b10 	vmov	d0, r4, r5
 801307c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013080:	2d00      	cmp	r5, #0
 8013082:	dc10      	bgt.n	80130a6 <__ieee754_sqrt+0x62>
 8013084:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013088:	4330      	orrs	r0, r6
 801308a:	d0f5      	beq.n	8013078 <__ieee754_sqrt+0x34>
 801308c:	b15d      	cbz	r5, 80130a6 <__ieee754_sqrt+0x62>
 801308e:	ee10 2a10 	vmov	r2, s0
 8013092:	462b      	mov	r3, r5
 8013094:	ee10 0a10 	vmov	r0, s0
 8013098:	f7ed f8a6 	bl	80001e8 <__aeabi_dsub>
 801309c:	4602      	mov	r2, r0
 801309e:	460b      	mov	r3, r1
 80130a0:	f7ed fb84 	bl	80007ac <__aeabi_ddiv>
 80130a4:	e7e6      	b.n	8013074 <__ieee754_sqrt+0x30>
 80130a6:	1512      	asrs	r2, r2, #20
 80130a8:	d074      	beq.n	8013194 <__ieee754_sqrt+0x150>
 80130aa:	07d4      	lsls	r4, r2, #31
 80130ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80130b0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80130b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80130b8:	bf5e      	ittt	pl
 80130ba:	0fda      	lsrpl	r2, r3, #31
 80130bc:	005b      	lslpl	r3, r3, #1
 80130be:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80130c2:	2400      	movs	r4, #0
 80130c4:	0fda      	lsrs	r2, r3, #31
 80130c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80130ca:	107f      	asrs	r7, r7, #1
 80130cc:	005b      	lsls	r3, r3, #1
 80130ce:	2516      	movs	r5, #22
 80130d0:	4620      	mov	r0, r4
 80130d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80130d6:	1886      	adds	r6, r0, r2
 80130d8:	428e      	cmp	r6, r1
 80130da:	bfde      	ittt	le
 80130dc:	1b89      	suble	r1, r1, r6
 80130de:	18b0      	addle	r0, r6, r2
 80130e0:	18a4      	addle	r4, r4, r2
 80130e2:	0049      	lsls	r1, r1, #1
 80130e4:	3d01      	subs	r5, #1
 80130e6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80130ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80130ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80130f2:	d1f0      	bne.n	80130d6 <__ieee754_sqrt+0x92>
 80130f4:	462a      	mov	r2, r5
 80130f6:	f04f 0e20 	mov.w	lr, #32
 80130fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80130fe:	4281      	cmp	r1, r0
 8013100:	eb06 0c05 	add.w	ip, r6, r5
 8013104:	dc02      	bgt.n	801310c <__ieee754_sqrt+0xc8>
 8013106:	d113      	bne.n	8013130 <__ieee754_sqrt+0xec>
 8013108:	459c      	cmp	ip, r3
 801310a:	d811      	bhi.n	8013130 <__ieee754_sqrt+0xec>
 801310c:	f1bc 0f00 	cmp.w	ip, #0
 8013110:	eb0c 0506 	add.w	r5, ip, r6
 8013114:	da43      	bge.n	801319e <__ieee754_sqrt+0x15a>
 8013116:	2d00      	cmp	r5, #0
 8013118:	db41      	blt.n	801319e <__ieee754_sqrt+0x15a>
 801311a:	f100 0801 	add.w	r8, r0, #1
 801311e:	1a09      	subs	r1, r1, r0
 8013120:	459c      	cmp	ip, r3
 8013122:	bf88      	it	hi
 8013124:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013128:	eba3 030c 	sub.w	r3, r3, ip
 801312c:	4432      	add	r2, r6
 801312e:	4640      	mov	r0, r8
 8013130:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013134:	f1be 0e01 	subs.w	lr, lr, #1
 8013138:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801313c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013140:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013144:	d1db      	bne.n	80130fe <__ieee754_sqrt+0xba>
 8013146:	430b      	orrs	r3, r1
 8013148:	d006      	beq.n	8013158 <__ieee754_sqrt+0x114>
 801314a:	1c50      	adds	r0, r2, #1
 801314c:	bf13      	iteet	ne
 801314e:	3201      	addne	r2, #1
 8013150:	3401      	addeq	r4, #1
 8013152:	4672      	moveq	r2, lr
 8013154:	f022 0201 	bicne.w	r2, r2, #1
 8013158:	1063      	asrs	r3, r4, #1
 801315a:	0852      	lsrs	r2, r2, #1
 801315c:	07e1      	lsls	r1, r4, #31
 801315e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013162:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013166:	bf48      	it	mi
 8013168:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801316c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013170:	4614      	mov	r4, r2
 8013172:	e781      	b.n	8013078 <__ieee754_sqrt+0x34>
 8013174:	0ad9      	lsrs	r1, r3, #11
 8013176:	3815      	subs	r0, #21
 8013178:	055b      	lsls	r3, r3, #21
 801317a:	2900      	cmp	r1, #0
 801317c:	d0fa      	beq.n	8013174 <__ieee754_sqrt+0x130>
 801317e:	02cd      	lsls	r5, r1, #11
 8013180:	d50a      	bpl.n	8013198 <__ieee754_sqrt+0x154>
 8013182:	f1c2 0420 	rsb	r4, r2, #32
 8013186:	fa23 f404 	lsr.w	r4, r3, r4
 801318a:	1e55      	subs	r5, r2, #1
 801318c:	4093      	lsls	r3, r2
 801318e:	4321      	orrs	r1, r4
 8013190:	1b42      	subs	r2, r0, r5
 8013192:	e78a      	b.n	80130aa <__ieee754_sqrt+0x66>
 8013194:	4610      	mov	r0, r2
 8013196:	e7f0      	b.n	801317a <__ieee754_sqrt+0x136>
 8013198:	0049      	lsls	r1, r1, #1
 801319a:	3201      	adds	r2, #1
 801319c:	e7ef      	b.n	801317e <__ieee754_sqrt+0x13a>
 801319e:	4680      	mov	r8, r0
 80131a0:	e7bd      	b.n	801311e <__ieee754_sqrt+0xda>
 80131a2:	bf00      	nop
 80131a4:	7ff00000 	.word	0x7ff00000

080131a8 <__ieee754_atan2f>:
 80131a8:	ee10 2a90 	vmov	r2, s1
 80131ac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80131b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80131b4:	b510      	push	{r4, lr}
 80131b6:	eef0 7a40 	vmov.f32	s15, s0
 80131ba:	dc06      	bgt.n	80131ca <__ieee754_atan2f+0x22>
 80131bc:	ee10 0a10 	vmov	r0, s0
 80131c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80131c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80131c8:	dd04      	ble.n	80131d4 <__ieee754_atan2f+0x2c>
 80131ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80131ce:	eeb0 0a67 	vmov.f32	s0, s15
 80131d2:	bd10      	pop	{r4, pc}
 80131d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80131d8:	d103      	bne.n	80131e2 <__ieee754_atan2f+0x3a>
 80131da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131de:	f000 b951 	b.w	8013484 <atanf>
 80131e2:	1794      	asrs	r4, r2, #30
 80131e4:	f004 0402 	and.w	r4, r4, #2
 80131e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80131ec:	b943      	cbnz	r3, 8013200 <__ieee754_atan2f+0x58>
 80131ee:	2c02      	cmp	r4, #2
 80131f0:	d05e      	beq.n	80132b0 <__ieee754_atan2f+0x108>
 80131f2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80132c4 <__ieee754_atan2f+0x11c>
 80131f6:	2c03      	cmp	r4, #3
 80131f8:	bf08      	it	eq
 80131fa:	eef0 7a47 	vmoveq.f32	s15, s14
 80131fe:	e7e6      	b.n	80131ce <__ieee754_atan2f+0x26>
 8013200:	b941      	cbnz	r1, 8013214 <__ieee754_atan2f+0x6c>
 8013202:	eddf 7a31 	vldr	s15, [pc, #196]	; 80132c8 <__ieee754_atan2f+0x120>
 8013206:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80132cc <__ieee754_atan2f+0x124>
 801320a:	2800      	cmp	r0, #0
 801320c:	bfb8      	it	lt
 801320e:	eef0 7a40 	vmovlt.f32	s15, s0
 8013212:	e7dc      	b.n	80131ce <__ieee754_atan2f+0x26>
 8013214:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013218:	d110      	bne.n	801323c <__ieee754_atan2f+0x94>
 801321a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801321e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013222:	d107      	bne.n	8013234 <__ieee754_atan2f+0x8c>
 8013224:	2c02      	cmp	r4, #2
 8013226:	d846      	bhi.n	80132b6 <__ieee754_atan2f+0x10e>
 8013228:	4b29      	ldr	r3, [pc, #164]	; (80132d0 <__ieee754_atan2f+0x128>)
 801322a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801322e:	edd4 7a00 	vldr	s15, [r4]
 8013232:	e7cc      	b.n	80131ce <__ieee754_atan2f+0x26>
 8013234:	2c02      	cmp	r4, #2
 8013236:	d841      	bhi.n	80132bc <__ieee754_atan2f+0x114>
 8013238:	4b26      	ldr	r3, [pc, #152]	; (80132d4 <__ieee754_atan2f+0x12c>)
 801323a:	e7f6      	b.n	801322a <__ieee754_atan2f+0x82>
 801323c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013240:	d0df      	beq.n	8013202 <__ieee754_atan2f+0x5a>
 8013242:	1a5b      	subs	r3, r3, r1
 8013244:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013248:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801324c:	da1a      	bge.n	8013284 <__ieee754_atan2f+0xdc>
 801324e:	2a00      	cmp	r2, #0
 8013250:	da01      	bge.n	8013256 <__ieee754_atan2f+0xae>
 8013252:	313c      	adds	r1, #60	; 0x3c
 8013254:	db19      	blt.n	801328a <__ieee754_atan2f+0xe2>
 8013256:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801325a:	f000 f9e7 	bl	801362c <fabsf>
 801325e:	f000 f911 	bl	8013484 <atanf>
 8013262:	eef0 7a40 	vmov.f32	s15, s0
 8013266:	2c01      	cmp	r4, #1
 8013268:	d012      	beq.n	8013290 <__ieee754_atan2f+0xe8>
 801326a:	2c02      	cmp	r4, #2
 801326c:	d017      	beq.n	801329e <__ieee754_atan2f+0xf6>
 801326e:	2c00      	cmp	r4, #0
 8013270:	d0ad      	beq.n	80131ce <__ieee754_atan2f+0x26>
 8013272:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80132d8 <__ieee754_atan2f+0x130>
 8013276:	ee77 7a80 	vadd.f32	s15, s15, s0
 801327a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80132dc <__ieee754_atan2f+0x134>
 801327e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013282:	e7a4      	b.n	80131ce <__ieee754_atan2f+0x26>
 8013284:	eddf 7a10 	vldr	s15, [pc, #64]	; 80132c8 <__ieee754_atan2f+0x120>
 8013288:	e7ed      	b.n	8013266 <__ieee754_atan2f+0xbe>
 801328a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80132e0 <__ieee754_atan2f+0x138>
 801328e:	e7ea      	b.n	8013266 <__ieee754_atan2f+0xbe>
 8013290:	ee17 3a90 	vmov	r3, s15
 8013294:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013298:	ee07 3a90 	vmov	s15, r3
 801329c:	e797      	b.n	80131ce <__ieee754_atan2f+0x26>
 801329e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80132d8 <__ieee754_atan2f+0x130>
 80132a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80132a6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80132dc <__ieee754_atan2f+0x134>
 80132aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80132ae:	e78e      	b.n	80131ce <__ieee754_atan2f+0x26>
 80132b0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80132dc <__ieee754_atan2f+0x134>
 80132b4:	e78b      	b.n	80131ce <__ieee754_atan2f+0x26>
 80132b6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80132e4 <__ieee754_atan2f+0x13c>
 80132ba:	e788      	b.n	80131ce <__ieee754_atan2f+0x26>
 80132bc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80132e0 <__ieee754_atan2f+0x138>
 80132c0:	e785      	b.n	80131ce <__ieee754_atan2f+0x26>
 80132c2:	bf00      	nop
 80132c4:	c0490fdb 	.word	0xc0490fdb
 80132c8:	3fc90fdb 	.word	0x3fc90fdb
 80132cc:	bfc90fdb 	.word	0xbfc90fdb
 80132d0:	08013c40 	.word	0x08013c40
 80132d4:	08013c4c 	.word	0x08013c4c
 80132d8:	33bbbd2e 	.word	0x33bbbd2e
 80132dc:	40490fdb 	.word	0x40490fdb
 80132e0:	00000000 	.word	0x00000000
 80132e4:	3f490fdb 	.word	0x3f490fdb

080132e8 <__ieee754_sqrtf>:
 80132e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80132ec:	4770      	bx	lr

080132ee <with_errno>:
 80132ee:	b570      	push	{r4, r5, r6, lr}
 80132f0:	4604      	mov	r4, r0
 80132f2:	460d      	mov	r5, r1
 80132f4:	4616      	mov	r6, r2
 80132f6:	f000 f9ab 	bl	8013650 <__errno>
 80132fa:	4629      	mov	r1, r5
 80132fc:	6006      	str	r6, [r0, #0]
 80132fe:	4620      	mov	r0, r4
 8013300:	bd70      	pop	{r4, r5, r6, pc}

08013302 <xflow>:
 8013302:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013304:	4614      	mov	r4, r2
 8013306:	461d      	mov	r5, r3
 8013308:	b108      	cbz	r0, 801330e <xflow+0xc>
 801330a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801330e:	e9cd 2300 	strd	r2, r3, [sp]
 8013312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013316:	4620      	mov	r0, r4
 8013318:	4629      	mov	r1, r5
 801331a:	f7ed f91d 	bl	8000558 <__aeabi_dmul>
 801331e:	2222      	movs	r2, #34	; 0x22
 8013320:	b003      	add	sp, #12
 8013322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013326:	f7ff bfe2 	b.w	80132ee <with_errno>

0801332a <__math_uflow>:
 801332a:	b508      	push	{r3, lr}
 801332c:	2200      	movs	r2, #0
 801332e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013332:	f7ff ffe6 	bl	8013302 <xflow>
 8013336:	ec41 0b10 	vmov	d0, r0, r1
 801333a:	bd08      	pop	{r3, pc}

0801333c <__math_oflow>:
 801333c:	b508      	push	{r3, lr}
 801333e:	2200      	movs	r2, #0
 8013340:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013344:	f7ff ffdd 	bl	8013302 <xflow>
 8013348:	ec41 0b10 	vmov	d0, r0, r1
 801334c:	bd08      	pop	{r3, pc}

0801334e <fabs>:
 801334e:	ec51 0b10 	vmov	r0, r1, d0
 8013352:	ee10 2a10 	vmov	r2, s0
 8013356:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801335a:	ec43 2b10 	vmov	d0, r2, r3
 801335e:	4770      	bx	lr

08013360 <finite>:
 8013360:	b082      	sub	sp, #8
 8013362:	ed8d 0b00 	vstr	d0, [sp]
 8013366:	9801      	ldr	r0, [sp, #4]
 8013368:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801336c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013370:	0fc0      	lsrs	r0, r0, #31
 8013372:	b002      	add	sp, #8
 8013374:	4770      	bx	lr
	...

08013378 <scalbn>:
 8013378:	b570      	push	{r4, r5, r6, lr}
 801337a:	ec55 4b10 	vmov	r4, r5, d0
 801337e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013382:	4606      	mov	r6, r0
 8013384:	462b      	mov	r3, r5
 8013386:	b99a      	cbnz	r2, 80133b0 <scalbn+0x38>
 8013388:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801338c:	4323      	orrs	r3, r4
 801338e:	d036      	beq.n	80133fe <scalbn+0x86>
 8013390:	4b39      	ldr	r3, [pc, #228]	; (8013478 <scalbn+0x100>)
 8013392:	4629      	mov	r1, r5
 8013394:	ee10 0a10 	vmov	r0, s0
 8013398:	2200      	movs	r2, #0
 801339a:	f7ed f8dd 	bl	8000558 <__aeabi_dmul>
 801339e:	4b37      	ldr	r3, [pc, #220]	; (801347c <scalbn+0x104>)
 80133a0:	429e      	cmp	r6, r3
 80133a2:	4604      	mov	r4, r0
 80133a4:	460d      	mov	r5, r1
 80133a6:	da10      	bge.n	80133ca <scalbn+0x52>
 80133a8:	a32b      	add	r3, pc, #172	; (adr r3, 8013458 <scalbn+0xe0>)
 80133aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ae:	e03a      	b.n	8013426 <scalbn+0xae>
 80133b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80133b4:	428a      	cmp	r2, r1
 80133b6:	d10c      	bne.n	80133d2 <scalbn+0x5a>
 80133b8:	ee10 2a10 	vmov	r2, s0
 80133bc:	4620      	mov	r0, r4
 80133be:	4629      	mov	r1, r5
 80133c0:	f7ec ff14 	bl	80001ec <__adddf3>
 80133c4:	4604      	mov	r4, r0
 80133c6:	460d      	mov	r5, r1
 80133c8:	e019      	b.n	80133fe <scalbn+0x86>
 80133ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80133ce:	460b      	mov	r3, r1
 80133d0:	3a36      	subs	r2, #54	; 0x36
 80133d2:	4432      	add	r2, r6
 80133d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80133d8:	428a      	cmp	r2, r1
 80133da:	dd08      	ble.n	80133ee <scalbn+0x76>
 80133dc:	2d00      	cmp	r5, #0
 80133de:	a120      	add	r1, pc, #128	; (adr r1, 8013460 <scalbn+0xe8>)
 80133e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133e4:	da1c      	bge.n	8013420 <scalbn+0xa8>
 80133e6:	a120      	add	r1, pc, #128	; (adr r1, 8013468 <scalbn+0xf0>)
 80133e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133ec:	e018      	b.n	8013420 <scalbn+0xa8>
 80133ee:	2a00      	cmp	r2, #0
 80133f0:	dd08      	ble.n	8013404 <scalbn+0x8c>
 80133f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80133f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80133fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80133fe:	ec45 4b10 	vmov	d0, r4, r5
 8013402:	bd70      	pop	{r4, r5, r6, pc}
 8013404:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013408:	da19      	bge.n	801343e <scalbn+0xc6>
 801340a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801340e:	429e      	cmp	r6, r3
 8013410:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013414:	dd0a      	ble.n	801342c <scalbn+0xb4>
 8013416:	a112      	add	r1, pc, #72	; (adr r1, 8013460 <scalbn+0xe8>)
 8013418:	e9d1 0100 	ldrd	r0, r1, [r1]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d1e2      	bne.n	80133e6 <scalbn+0x6e>
 8013420:	a30f      	add	r3, pc, #60	; (adr r3, 8013460 <scalbn+0xe8>)
 8013422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013426:	f7ed f897 	bl	8000558 <__aeabi_dmul>
 801342a:	e7cb      	b.n	80133c4 <scalbn+0x4c>
 801342c:	a10a      	add	r1, pc, #40	; (adr r1, 8013458 <scalbn+0xe0>)
 801342e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d0b8      	beq.n	80133a8 <scalbn+0x30>
 8013436:	a10e      	add	r1, pc, #56	; (adr r1, 8013470 <scalbn+0xf8>)
 8013438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801343c:	e7b4      	b.n	80133a8 <scalbn+0x30>
 801343e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013442:	3236      	adds	r2, #54	; 0x36
 8013444:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013448:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801344c:	4620      	mov	r0, r4
 801344e:	4b0c      	ldr	r3, [pc, #48]	; (8013480 <scalbn+0x108>)
 8013450:	2200      	movs	r2, #0
 8013452:	e7e8      	b.n	8013426 <scalbn+0xae>
 8013454:	f3af 8000 	nop.w
 8013458:	c2f8f359 	.word	0xc2f8f359
 801345c:	01a56e1f 	.word	0x01a56e1f
 8013460:	8800759c 	.word	0x8800759c
 8013464:	7e37e43c 	.word	0x7e37e43c
 8013468:	8800759c 	.word	0x8800759c
 801346c:	fe37e43c 	.word	0xfe37e43c
 8013470:	c2f8f359 	.word	0xc2f8f359
 8013474:	81a56e1f 	.word	0x81a56e1f
 8013478:	43500000 	.word	0x43500000
 801347c:	ffff3cb0 	.word	0xffff3cb0
 8013480:	3c900000 	.word	0x3c900000

08013484 <atanf>:
 8013484:	b538      	push	{r3, r4, r5, lr}
 8013486:	ee10 5a10 	vmov	r5, s0
 801348a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801348e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013492:	eef0 7a40 	vmov.f32	s15, s0
 8013496:	db10      	blt.n	80134ba <atanf+0x36>
 8013498:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801349c:	dd04      	ble.n	80134a8 <atanf+0x24>
 801349e:	ee70 7a00 	vadd.f32	s15, s0, s0
 80134a2:	eeb0 0a67 	vmov.f32	s0, s15
 80134a6:	bd38      	pop	{r3, r4, r5, pc}
 80134a8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80135e0 <atanf+0x15c>
 80134ac:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80135e4 <atanf+0x160>
 80134b0:	2d00      	cmp	r5, #0
 80134b2:	bfd8      	it	le
 80134b4:	eef0 7a40 	vmovle.f32	s15, s0
 80134b8:	e7f3      	b.n	80134a2 <atanf+0x1e>
 80134ba:	4b4b      	ldr	r3, [pc, #300]	; (80135e8 <atanf+0x164>)
 80134bc:	429c      	cmp	r4, r3
 80134be:	dc10      	bgt.n	80134e2 <atanf+0x5e>
 80134c0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80134c4:	da0a      	bge.n	80134dc <atanf+0x58>
 80134c6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80135ec <atanf+0x168>
 80134ca:	ee30 7a07 	vadd.f32	s14, s0, s14
 80134ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80134d2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80134d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134da:	dce2      	bgt.n	80134a2 <atanf+0x1e>
 80134dc:	f04f 33ff 	mov.w	r3, #4294967295
 80134e0:	e013      	b.n	801350a <atanf+0x86>
 80134e2:	f000 f8a3 	bl	801362c <fabsf>
 80134e6:	4b42      	ldr	r3, [pc, #264]	; (80135f0 <atanf+0x16c>)
 80134e8:	429c      	cmp	r4, r3
 80134ea:	dc4f      	bgt.n	801358c <atanf+0x108>
 80134ec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80134f0:	429c      	cmp	r4, r3
 80134f2:	dc41      	bgt.n	8013578 <atanf+0xf4>
 80134f4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80134f8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80134fc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013500:	2300      	movs	r3, #0
 8013502:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013506:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801350a:	1c5a      	adds	r2, r3, #1
 801350c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013510:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80135f4 <atanf+0x170>
 8013514:	eddf 5a38 	vldr	s11, [pc, #224]	; 80135f8 <atanf+0x174>
 8013518:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80135fc <atanf+0x178>
 801351c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013520:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013524:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013600 <atanf+0x17c>
 8013528:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801352c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013604 <atanf+0x180>
 8013530:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013534:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013608 <atanf+0x184>
 8013538:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801353c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801360c <atanf+0x188>
 8013540:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013544:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013610 <atanf+0x18c>
 8013548:	eea6 5a87 	vfma.f32	s10, s13, s14
 801354c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013614 <atanf+0x190>
 8013550:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013554:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013618 <atanf+0x194>
 8013558:	eea7 5a26 	vfma.f32	s10, s14, s13
 801355c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801361c <atanf+0x198>
 8013560:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013564:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013568:	eea5 7a86 	vfma.f32	s14, s11, s12
 801356c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013570:	d121      	bne.n	80135b6 <atanf+0x132>
 8013572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013576:	e794      	b.n	80134a2 <atanf+0x1e>
 8013578:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801357c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013580:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013584:	2301      	movs	r3, #1
 8013586:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801358a:	e7be      	b.n	801350a <atanf+0x86>
 801358c:	4b24      	ldr	r3, [pc, #144]	; (8013620 <atanf+0x19c>)
 801358e:	429c      	cmp	r4, r3
 8013590:	dc0b      	bgt.n	80135aa <atanf+0x126>
 8013592:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801359a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801359e:	2302      	movs	r3, #2
 80135a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80135a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135a8:	e7af      	b.n	801350a <atanf+0x86>
 80135aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80135ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80135b2:	2303      	movs	r3, #3
 80135b4:	e7a9      	b.n	801350a <atanf+0x86>
 80135b6:	4a1b      	ldr	r2, [pc, #108]	; (8013624 <atanf+0x1a0>)
 80135b8:	491b      	ldr	r1, [pc, #108]	; (8013628 <atanf+0x1a4>)
 80135ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80135be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80135c2:	ed93 0a00 	vldr	s0, [r3]
 80135c6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80135ca:	ed92 0a00 	vldr	s0, [r2]
 80135ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135d2:	2d00      	cmp	r5, #0
 80135d4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80135d8:	bfb8      	it	lt
 80135da:	eef1 7a67 	vneglt.f32	s15, s15
 80135de:	e760      	b.n	80134a2 <atanf+0x1e>
 80135e0:	3fc90fdb 	.word	0x3fc90fdb
 80135e4:	bfc90fdb 	.word	0xbfc90fdb
 80135e8:	3edfffff 	.word	0x3edfffff
 80135ec:	7149f2ca 	.word	0x7149f2ca
 80135f0:	3f97ffff 	.word	0x3f97ffff
 80135f4:	3c8569d7 	.word	0x3c8569d7
 80135f8:	3d4bda59 	.word	0x3d4bda59
 80135fc:	bd6ef16b 	.word	0xbd6ef16b
 8013600:	3d886b35 	.word	0x3d886b35
 8013604:	3dba2e6e 	.word	0x3dba2e6e
 8013608:	3e124925 	.word	0x3e124925
 801360c:	3eaaaaab 	.word	0x3eaaaaab
 8013610:	bd15a221 	.word	0xbd15a221
 8013614:	bd9d8795 	.word	0xbd9d8795
 8013618:	bde38e38 	.word	0xbde38e38
 801361c:	be4ccccd 	.word	0xbe4ccccd
 8013620:	401bffff 	.word	0x401bffff
 8013624:	08013c58 	.word	0x08013c58
 8013628:	08013c68 	.word	0x08013c68

0801362c <fabsf>:
 801362c:	ee10 3a10 	vmov	r3, s0
 8013630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013634:	ee00 3a10 	vmov	s0, r3
 8013638:	4770      	bx	lr

0801363a <abort>:
 801363a:	b508      	push	{r3, lr}
 801363c:	2006      	movs	r0, #6
 801363e:	f000 f989 	bl	8013954 <raise>
 8013642:	2001      	movs	r0, #1
 8013644:	f7ef fc72 	bl	8002f2c <_exit>

08013648 <atoi>:
 8013648:	220a      	movs	r2, #10
 801364a:	2100      	movs	r1, #0
 801364c:	f000 ba30 	b.w	8013ab0 <strtol>

08013650 <__errno>:
 8013650:	4b01      	ldr	r3, [pc, #4]	; (8013658 <__errno+0x8>)
 8013652:	6818      	ldr	r0, [r3, #0]
 8013654:	4770      	bx	lr
 8013656:	bf00      	nop
 8013658:	20000014 	.word	0x20000014

0801365c <__libc_init_array>:
 801365c:	b570      	push	{r4, r5, r6, lr}
 801365e:	4d0d      	ldr	r5, [pc, #52]	; (8013694 <__libc_init_array+0x38>)
 8013660:	4c0d      	ldr	r4, [pc, #52]	; (8013698 <__libc_init_array+0x3c>)
 8013662:	1b64      	subs	r4, r4, r5
 8013664:	10a4      	asrs	r4, r4, #2
 8013666:	2600      	movs	r6, #0
 8013668:	42a6      	cmp	r6, r4
 801366a:	d109      	bne.n	8013680 <__libc_init_array+0x24>
 801366c:	4d0b      	ldr	r5, [pc, #44]	; (801369c <__libc_init_array+0x40>)
 801366e:	4c0c      	ldr	r4, [pc, #48]	; (80136a0 <__libc_init_array+0x44>)
 8013670:	f000 fa36 	bl	8013ae0 <_init>
 8013674:	1b64      	subs	r4, r4, r5
 8013676:	10a4      	asrs	r4, r4, #2
 8013678:	2600      	movs	r6, #0
 801367a:	42a6      	cmp	r6, r4
 801367c:	d105      	bne.n	801368a <__libc_init_array+0x2e>
 801367e:	bd70      	pop	{r4, r5, r6, pc}
 8013680:	f855 3b04 	ldr.w	r3, [r5], #4
 8013684:	4798      	blx	r3
 8013686:	3601      	adds	r6, #1
 8013688:	e7ee      	b.n	8013668 <__libc_init_array+0xc>
 801368a:	f855 3b04 	ldr.w	r3, [r5], #4
 801368e:	4798      	blx	r3
 8013690:	3601      	adds	r6, #1
 8013692:	e7f2      	b.n	801367a <__libc_init_array+0x1e>
 8013694:	08013d84 	.word	0x08013d84
 8013698:	08013d84 	.word	0x08013d84
 801369c:	08013d84 	.word	0x08013d84
 80136a0:	08013d8c 	.word	0x08013d8c

080136a4 <malloc>:
 80136a4:	4b02      	ldr	r3, [pc, #8]	; (80136b0 <malloc+0xc>)
 80136a6:	4601      	mov	r1, r0
 80136a8:	6818      	ldr	r0, [r3, #0]
 80136aa:	f000 b8a7 	b.w	80137fc <_malloc_r>
 80136ae:	bf00      	nop
 80136b0:	20000014 	.word	0x20000014

080136b4 <free>:
 80136b4:	4b02      	ldr	r3, [pc, #8]	; (80136c0 <free+0xc>)
 80136b6:	4601      	mov	r1, r0
 80136b8:	6818      	ldr	r0, [r3, #0]
 80136ba:	f000 b833 	b.w	8013724 <_free_r>
 80136be:	bf00      	nop
 80136c0:	20000014 	.word	0x20000014

080136c4 <memcpy>:
 80136c4:	440a      	add	r2, r1
 80136c6:	4291      	cmp	r1, r2
 80136c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80136cc:	d100      	bne.n	80136d0 <memcpy+0xc>
 80136ce:	4770      	bx	lr
 80136d0:	b510      	push	{r4, lr}
 80136d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136da:	4291      	cmp	r1, r2
 80136dc:	d1f9      	bne.n	80136d2 <memcpy+0xe>
 80136de:	bd10      	pop	{r4, pc}

080136e0 <memmove>:
 80136e0:	4288      	cmp	r0, r1
 80136e2:	b510      	push	{r4, lr}
 80136e4:	eb01 0402 	add.w	r4, r1, r2
 80136e8:	d902      	bls.n	80136f0 <memmove+0x10>
 80136ea:	4284      	cmp	r4, r0
 80136ec:	4623      	mov	r3, r4
 80136ee:	d807      	bhi.n	8013700 <memmove+0x20>
 80136f0:	1e43      	subs	r3, r0, #1
 80136f2:	42a1      	cmp	r1, r4
 80136f4:	d008      	beq.n	8013708 <memmove+0x28>
 80136f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80136fe:	e7f8      	b.n	80136f2 <memmove+0x12>
 8013700:	4402      	add	r2, r0
 8013702:	4601      	mov	r1, r0
 8013704:	428a      	cmp	r2, r1
 8013706:	d100      	bne.n	801370a <memmove+0x2a>
 8013708:	bd10      	pop	{r4, pc}
 801370a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801370e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013712:	e7f7      	b.n	8013704 <memmove+0x24>

08013714 <memset>:
 8013714:	4402      	add	r2, r0
 8013716:	4603      	mov	r3, r0
 8013718:	4293      	cmp	r3, r2
 801371a:	d100      	bne.n	801371e <memset+0xa>
 801371c:	4770      	bx	lr
 801371e:	f803 1b01 	strb.w	r1, [r3], #1
 8013722:	e7f9      	b.n	8013718 <memset+0x4>

08013724 <_free_r>:
 8013724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013726:	2900      	cmp	r1, #0
 8013728:	d044      	beq.n	80137b4 <_free_r+0x90>
 801372a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801372e:	9001      	str	r0, [sp, #4]
 8013730:	2b00      	cmp	r3, #0
 8013732:	f1a1 0404 	sub.w	r4, r1, #4
 8013736:	bfb8      	it	lt
 8013738:	18e4      	addlt	r4, r4, r3
 801373a:	f000 f9c3 	bl	8013ac4 <__malloc_lock>
 801373e:	4a1e      	ldr	r2, [pc, #120]	; (80137b8 <_free_r+0x94>)
 8013740:	9801      	ldr	r0, [sp, #4]
 8013742:	6813      	ldr	r3, [r2, #0]
 8013744:	b933      	cbnz	r3, 8013754 <_free_r+0x30>
 8013746:	6063      	str	r3, [r4, #4]
 8013748:	6014      	str	r4, [r2, #0]
 801374a:	b003      	add	sp, #12
 801374c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013750:	f000 b9be 	b.w	8013ad0 <__malloc_unlock>
 8013754:	42a3      	cmp	r3, r4
 8013756:	d908      	bls.n	801376a <_free_r+0x46>
 8013758:	6825      	ldr	r5, [r4, #0]
 801375a:	1961      	adds	r1, r4, r5
 801375c:	428b      	cmp	r3, r1
 801375e:	bf01      	itttt	eq
 8013760:	6819      	ldreq	r1, [r3, #0]
 8013762:	685b      	ldreq	r3, [r3, #4]
 8013764:	1949      	addeq	r1, r1, r5
 8013766:	6021      	streq	r1, [r4, #0]
 8013768:	e7ed      	b.n	8013746 <_free_r+0x22>
 801376a:	461a      	mov	r2, r3
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	b10b      	cbz	r3, 8013774 <_free_r+0x50>
 8013770:	42a3      	cmp	r3, r4
 8013772:	d9fa      	bls.n	801376a <_free_r+0x46>
 8013774:	6811      	ldr	r1, [r2, #0]
 8013776:	1855      	adds	r5, r2, r1
 8013778:	42a5      	cmp	r5, r4
 801377a:	d10b      	bne.n	8013794 <_free_r+0x70>
 801377c:	6824      	ldr	r4, [r4, #0]
 801377e:	4421      	add	r1, r4
 8013780:	1854      	adds	r4, r2, r1
 8013782:	42a3      	cmp	r3, r4
 8013784:	6011      	str	r1, [r2, #0]
 8013786:	d1e0      	bne.n	801374a <_free_r+0x26>
 8013788:	681c      	ldr	r4, [r3, #0]
 801378a:	685b      	ldr	r3, [r3, #4]
 801378c:	6053      	str	r3, [r2, #4]
 801378e:	4421      	add	r1, r4
 8013790:	6011      	str	r1, [r2, #0]
 8013792:	e7da      	b.n	801374a <_free_r+0x26>
 8013794:	d902      	bls.n	801379c <_free_r+0x78>
 8013796:	230c      	movs	r3, #12
 8013798:	6003      	str	r3, [r0, #0]
 801379a:	e7d6      	b.n	801374a <_free_r+0x26>
 801379c:	6825      	ldr	r5, [r4, #0]
 801379e:	1961      	adds	r1, r4, r5
 80137a0:	428b      	cmp	r3, r1
 80137a2:	bf04      	itt	eq
 80137a4:	6819      	ldreq	r1, [r3, #0]
 80137a6:	685b      	ldreq	r3, [r3, #4]
 80137a8:	6063      	str	r3, [r4, #4]
 80137aa:	bf04      	itt	eq
 80137ac:	1949      	addeq	r1, r1, r5
 80137ae:	6021      	streq	r1, [r4, #0]
 80137b0:	6054      	str	r4, [r2, #4]
 80137b2:	e7ca      	b.n	801374a <_free_r+0x26>
 80137b4:	b003      	add	sp, #12
 80137b6:	bd30      	pop	{r4, r5, pc}
 80137b8:	20004f90 	.word	0x20004f90

080137bc <sbrk_aligned>:
 80137bc:	b570      	push	{r4, r5, r6, lr}
 80137be:	4e0e      	ldr	r6, [pc, #56]	; (80137f8 <sbrk_aligned+0x3c>)
 80137c0:	460c      	mov	r4, r1
 80137c2:	6831      	ldr	r1, [r6, #0]
 80137c4:	4605      	mov	r5, r0
 80137c6:	b911      	cbnz	r1, 80137ce <sbrk_aligned+0x12>
 80137c8:	f000 f88c 	bl	80138e4 <_sbrk_r>
 80137cc:	6030      	str	r0, [r6, #0]
 80137ce:	4621      	mov	r1, r4
 80137d0:	4628      	mov	r0, r5
 80137d2:	f000 f887 	bl	80138e4 <_sbrk_r>
 80137d6:	1c43      	adds	r3, r0, #1
 80137d8:	d00a      	beq.n	80137f0 <sbrk_aligned+0x34>
 80137da:	1cc4      	adds	r4, r0, #3
 80137dc:	f024 0403 	bic.w	r4, r4, #3
 80137e0:	42a0      	cmp	r0, r4
 80137e2:	d007      	beq.n	80137f4 <sbrk_aligned+0x38>
 80137e4:	1a21      	subs	r1, r4, r0
 80137e6:	4628      	mov	r0, r5
 80137e8:	f000 f87c 	bl	80138e4 <_sbrk_r>
 80137ec:	3001      	adds	r0, #1
 80137ee:	d101      	bne.n	80137f4 <sbrk_aligned+0x38>
 80137f0:	f04f 34ff 	mov.w	r4, #4294967295
 80137f4:	4620      	mov	r0, r4
 80137f6:	bd70      	pop	{r4, r5, r6, pc}
 80137f8:	20004f94 	.word	0x20004f94

080137fc <_malloc_r>:
 80137fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013800:	1ccd      	adds	r5, r1, #3
 8013802:	f025 0503 	bic.w	r5, r5, #3
 8013806:	3508      	adds	r5, #8
 8013808:	2d0c      	cmp	r5, #12
 801380a:	bf38      	it	cc
 801380c:	250c      	movcc	r5, #12
 801380e:	2d00      	cmp	r5, #0
 8013810:	4607      	mov	r7, r0
 8013812:	db01      	blt.n	8013818 <_malloc_r+0x1c>
 8013814:	42a9      	cmp	r1, r5
 8013816:	d905      	bls.n	8013824 <_malloc_r+0x28>
 8013818:	230c      	movs	r3, #12
 801381a:	603b      	str	r3, [r7, #0]
 801381c:	2600      	movs	r6, #0
 801381e:	4630      	mov	r0, r6
 8013820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013824:	4e2e      	ldr	r6, [pc, #184]	; (80138e0 <_malloc_r+0xe4>)
 8013826:	f000 f94d 	bl	8013ac4 <__malloc_lock>
 801382a:	6833      	ldr	r3, [r6, #0]
 801382c:	461c      	mov	r4, r3
 801382e:	bb34      	cbnz	r4, 801387e <_malloc_r+0x82>
 8013830:	4629      	mov	r1, r5
 8013832:	4638      	mov	r0, r7
 8013834:	f7ff ffc2 	bl	80137bc <sbrk_aligned>
 8013838:	1c43      	adds	r3, r0, #1
 801383a:	4604      	mov	r4, r0
 801383c:	d14d      	bne.n	80138da <_malloc_r+0xde>
 801383e:	6834      	ldr	r4, [r6, #0]
 8013840:	4626      	mov	r6, r4
 8013842:	2e00      	cmp	r6, #0
 8013844:	d140      	bne.n	80138c8 <_malloc_r+0xcc>
 8013846:	6823      	ldr	r3, [r4, #0]
 8013848:	4631      	mov	r1, r6
 801384a:	4638      	mov	r0, r7
 801384c:	eb04 0803 	add.w	r8, r4, r3
 8013850:	f000 f848 	bl	80138e4 <_sbrk_r>
 8013854:	4580      	cmp	r8, r0
 8013856:	d13a      	bne.n	80138ce <_malloc_r+0xd2>
 8013858:	6821      	ldr	r1, [r4, #0]
 801385a:	3503      	adds	r5, #3
 801385c:	1a6d      	subs	r5, r5, r1
 801385e:	f025 0503 	bic.w	r5, r5, #3
 8013862:	3508      	adds	r5, #8
 8013864:	2d0c      	cmp	r5, #12
 8013866:	bf38      	it	cc
 8013868:	250c      	movcc	r5, #12
 801386a:	4629      	mov	r1, r5
 801386c:	4638      	mov	r0, r7
 801386e:	f7ff ffa5 	bl	80137bc <sbrk_aligned>
 8013872:	3001      	adds	r0, #1
 8013874:	d02b      	beq.n	80138ce <_malloc_r+0xd2>
 8013876:	6823      	ldr	r3, [r4, #0]
 8013878:	442b      	add	r3, r5
 801387a:	6023      	str	r3, [r4, #0]
 801387c:	e00e      	b.n	801389c <_malloc_r+0xa0>
 801387e:	6822      	ldr	r2, [r4, #0]
 8013880:	1b52      	subs	r2, r2, r5
 8013882:	d41e      	bmi.n	80138c2 <_malloc_r+0xc6>
 8013884:	2a0b      	cmp	r2, #11
 8013886:	d916      	bls.n	80138b6 <_malloc_r+0xba>
 8013888:	1961      	adds	r1, r4, r5
 801388a:	42a3      	cmp	r3, r4
 801388c:	6025      	str	r5, [r4, #0]
 801388e:	bf18      	it	ne
 8013890:	6059      	strne	r1, [r3, #4]
 8013892:	6863      	ldr	r3, [r4, #4]
 8013894:	bf08      	it	eq
 8013896:	6031      	streq	r1, [r6, #0]
 8013898:	5162      	str	r2, [r4, r5]
 801389a:	604b      	str	r3, [r1, #4]
 801389c:	4638      	mov	r0, r7
 801389e:	f104 060b 	add.w	r6, r4, #11
 80138a2:	f000 f915 	bl	8013ad0 <__malloc_unlock>
 80138a6:	f026 0607 	bic.w	r6, r6, #7
 80138aa:	1d23      	adds	r3, r4, #4
 80138ac:	1af2      	subs	r2, r6, r3
 80138ae:	d0b6      	beq.n	801381e <_malloc_r+0x22>
 80138b0:	1b9b      	subs	r3, r3, r6
 80138b2:	50a3      	str	r3, [r4, r2]
 80138b4:	e7b3      	b.n	801381e <_malloc_r+0x22>
 80138b6:	6862      	ldr	r2, [r4, #4]
 80138b8:	42a3      	cmp	r3, r4
 80138ba:	bf0c      	ite	eq
 80138bc:	6032      	streq	r2, [r6, #0]
 80138be:	605a      	strne	r2, [r3, #4]
 80138c0:	e7ec      	b.n	801389c <_malloc_r+0xa0>
 80138c2:	4623      	mov	r3, r4
 80138c4:	6864      	ldr	r4, [r4, #4]
 80138c6:	e7b2      	b.n	801382e <_malloc_r+0x32>
 80138c8:	4634      	mov	r4, r6
 80138ca:	6876      	ldr	r6, [r6, #4]
 80138cc:	e7b9      	b.n	8013842 <_malloc_r+0x46>
 80138ce:	230c      	movs	r3, #12
 80138d0:	603b      	str	r3, [r7, #0]
 80138d2:	4638      	mov	r0, r7
 80138d4:	f000 f8fc 	bl	8013ad0 <__malloc_unlock>
 80138d8:	e7a1      	b.n	801381e <_malloc_r+0x22>
 80138da:	6025      	str	r5, [r4, #0]
 80138dc:	e7de      	b.n	801389c <_malloc_r+0xa0>
 80138de:	bf00      	nop
 80138e0:	20004f90 	.word	0x20004f90

080138e4 <_sbrk_r>:
 80138e4:	b538      	push	{r3, r4, r5, lr}
 80138e6:	4d06      	ldr	r5, [pc, #24]	; (8013900 <_sbrk_r+0x1c>)
 80138e8:	2300      	movs	r3, #0
 80138ea:	4604      	mov	r4, r0
 80138ec:	4608      	mov	r0, r1
 80138ee:	602b      	str	r3, [r5, #0]
 80138f0:	f7ef fb26 	bl	8002f40 <_sbrk>
 80138f4:	1c43      	adds	r3, r0, #1
 80138f6:	d102      	bne.n	80138fe <_sbrk_r+0x1a>
 80138f8:	682b      	ldr	r3, [r5, #0]
 80138fa:	b103      	cbz	r3, 80138fe <_sbrk_r+0x1a>
 80138fc:	6023      	str	r3, [r4, #0]
 80138fe:	bd38      	pop	{r3, r4, r5, pc}
 8013900:	20004f98 	.word	0x20004f98

08013904 <_raise_r>:
 8013904:	291f      	cmp	r1, #31
 8013906:	b538      	push	{r3, r4, r5, lr}
 8013908:	4604      	mov	r4, r0
 801390a:	460d      	mov	r5, r1
 801390c:	d904      	bls.n	8013918 <_raise_r+0x14>
 801390e:	2316      	movs	r3, #22
 8013910:	6003      	str	r3, [r0, #0]
 8013912:	f04f 30ff 	mov.w	r0, #4294967295
 8013916:	bd38      	pop	{r3, r4, r5, pc}
 8013918:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801391a:	b112      	cbz	r2, 8013922 <_raise_r+0x1e>
 801391c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013920:	b94b      	cbnz	r3, 8013936 <_raise_r+0x32>
 8013922:	4620      	mov	r0, r4
 8013924:	f000 f830 	bl	8013988 <_getpid_r>
 8013928:	462a      	mov	r2, r5
 801392a:	4601      	mov	r1, r0
 801392c:	4620      	mov	r0, r4
 801392e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013932:	f000 b817 	b.w	8013964 <_kill_r>
 8013936:	2b01      	cmp	r3, #1
 8013938:	d00a      	beq.n	8013950 <_raise_r+0x4c>
 801393a:	1c59      	adds	r1, r3, #1
 801393c:	d103      	bne.n	8013946 <_raise_r+0x42>
 801393e:	2316      	movs	r3, #22
 8013940:	6003      	str	r3, [r0, #0]
 8013942:	2001      	movs	r0, #1
 8013944:	e7e7      	b.n	8013916 <_raise_r+0x12>
 8013946:	2400      	movs	r4, #0
 8013948:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801394c:	4628      	mov	r0, r5
 801394e:	4798      	blx	r3
 8013950:	2000      	movs	r0, #0
 8013952:	e7e0      	b.n	8013916 <_raise_r+0x12>

08013954 <raise>:
 8013954:	4b02      	ldr	r3, [pc, #8]	; (8013960 <raise+0xc>)
 8013956:	4601      	mov	r1, r0
 8013958:	6818      	ldr	r0, [r3, #0]
 801395a:	f7ff bfd3 	b.w	8013904 <_raise_r>
 801395e:	bf00      	nop
 8013960:	20000014 	.word	0x20000014

08013964 <_kill_r>:
 8013964:	b538      	push	{r3, r4, r5, lr}
 8013966:	4d07      	ldr	r5, [pc, #28]	; (8013984 <_kill_r+0x20>)
 8013968:	2300      	movs	r3, #0
 801396a:	4604      	mov	r4, r0
 801396c:	4608      	mov	r0, r1
 801396e:	4611      	mov	r1, r2
 8013970:	602b      	str	r3, [r5, #0]
 8013972:	f7ef facb 	bl	8002f0c <_kill>
 8013976:	1c43      	adds	r3, r0, #1
 8013978:	d102      	bne.n	8013980 <_kill_r+0x1c>
 801397a:	682b      	ldr	r3, [r5, #0]
 801397c:	b103      	cbz	r3, 8013980 <_kill_r+0x1c>
 801397e:	6023      	str	r3, [r4, #0]
 8013980:	bd38      	pop	{r3, r4, r5, pc}
 8013982:	bf00      	nop
 8013984:	20004f98 	.word	0x20004f98

08013988 <_getpid_r>:
 8013988:	f7ef bab8 	b.w	8002efc <_getpid>

0801398c <strcat>:
 801398c:	b510      	push	{r4, lr}
 801398e:	4602      	mov	r2, r0
 8013990:	7814      	ldrb	r4, [r2, #0]
 8013992:	4613      	mov	r3, r2
 8013994:	3201      	adds	r2, #1
 8013996:	2c00      	cmp	r4, #0
 8013998:	d1fa      	bne.n	8013990 <strcat+0x4>
 801399a:	3b01      	subs	r3, #1
 801399c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80139a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80139a4:	2a00      	cmp	r2, #0
 80139a6:	d1f9      	bne.n	801399c <strcat+0x10>
 80139a8:	bd10      	pop	{r4, pc}
	...

080139ac <_strtol_l.constprop.0>:
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139b2:	d001      	beq.n	80139b8 <_strtol_l.constprop.0+0xc>
 80139b4:	2b24      	cmp	r3, #36	; 0x24
 80139b6:	d906      	bls.n	80139c6 <_strtol_l.constprop.0+0x1a>
 80139b8:	f7ff fe4a 	bl	8013650 <__errno>
 80139bc:	2316      	movs	r3, #22
 80139be:	6003      	str	r3, [r0, #0]
 80139c0:	2000      	movs	r0, #0
 80139c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013aac <_strtol_l.constprop.0+0x100>
 80139ca:	460d      	mov	r5, r1
 80139cc:	462e      	mov	r6, r5
 80139ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80139d2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80139d6:	f017 0708 	ands.w	r7, r7, #8
 80139da:	d1f7      	bne.n	80139cc <_strtol_l.constprop.0+0x20>
 80139dc:	2c2d      	cmp	r4, #45	; 0x2d
 80139de:	d132      	bne.n	8013a46 <_strtol_l.constprop.0+0x9a>
 80139e0:	782c      	ldrb	r4, [r5, #0]
 80139e2:	2701      	movs	r7, #1
 80139e4:	1cb5      	adds	r5, r6, #2
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d05b      	beq.n	8013aa2 <_strtol_l.constprop.0+0xf6>
 80139ea:	2b10      	cmp	r3, #16
 80139ec:	d109      	bne.n	8013a02 <_strtol_l.constprop.0+0x56>
 80139ee:	2c30      	cmp	r4, #48	; 0x30
 80139f0:	d107      	bne.n	8013a02 <_strtol_l.constprop.0+0x56>
 80139f2:	782c      	ldrb	r4, [r5, #0]
 80139f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80139f8:	2c58      	cmp	r4, #88	; 0x58
 80139fa:	d14d      	bne.n	8013a98 <_strtol_l.constprop.0+0xec>
 80139fc:	786c      	ldrb	r4, [r5, #1]
 80139fe:	2310      	movs	r3, #16
 8013a00:	3502      	adds	r5, #2
 8013a02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013a06:	f108 38ff 	add.w	r8, r8, #4294967295
 8013a0a:	f04f 0c00 	mov.w	ip, #0
 8013a0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8013a12:	4666      	mov	r6, ip
 8013a14:	fb03 8a19 	mls	sl, r3, r9, r8
 8013a18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013a1c:	f1be 0f09 	cmp.w	lr, #9
 8013a20:	d816      	bhi.n	8013a50 <_strtol_l.constprop.0+0xa4>
 8013a22:	4674      	mov	r4, lr
 8013a24:	42a3      	cmp	r3, r4
 8013a26:	dd24      	ble.n	8013a72 <_strtol_l.constprop.0+0xc6>
 8013a28:	f1bc 0f00 	cmp.w	ip, #0
 8013a2c:	db1e      	blt.n	8013a6c <_strtol_l.constprop.0+0xc0>
 8013a2e:	45b1      	cmp	r9, r6
 8013a30:	d31c      	bcc.n	8013a6c <_strtol_l.constprop.0+0xc0>
 8013a32:	d101      	bne.n	8013a38 <_strtol_l.constprop.0+0x8c>
 8013a34:	45a2      	cmp	sl, r4
 8013a36:	db19      	blt.n	8013a6c <_strtol_l.constprop.0+0xc0>
 8013a38:	fb06 4603 	mla	r6, r6, r3, r4
 8013a3c:	f04f 0c01 	mov.w	ip, #1
 8013a40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a44:	e7e8      	b.n	8013a18 <_strtol_l.constprop.0+0x6c>
 8013a46:	2c2b      	cmp	r4, #43	; 0x2b
 8013a48:	bf04      	itt	eq
 8013a4a:	782c      	ldrbeq	r4, [r5, #0]
 8013a4c:	1cb5      	addeq	r5, r6, #2
 8013a4e:	e7ca      	b.n	80139e6 <_strtol_l.constprop.0+0x3a>
 8013a50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8013a54:	f1be 0f19 	cmp.w	lr, #25
 8013a58:	d801      	bhi.n	8013a5e <_strtol_l.constprop.0+0xb2>
 8013a5a:	3c37      	subs	r4, #55	; 0x37
 8013a5c:	e7e2      	b.n	8013a24 <_strtol_l.constprop.0+0x78>
 8013a5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8013a62:	f1be 0f19 	cmp.w	lr, #25
 8013a66:	d804      	bhi.n	8013a72 <_strtol_l.constprop.0+0xc6>
 8013a68:	3c57      	subs	r4, #87	; 0x57
 8013a6a:	e7db      	b.n	8013a24 <_strtol_l.constprop.0+0x78>
 8013a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8013a70:	e7e6      	b.n	8013a40 <_strtol_l.constprop.0+0x94>
 8013a72:	f1bc 0f00 	cmp.w	ip, #0
 8013a76:	da05      	bge.n	8013a84 <_strtol_l.constprop.0+0xd8>
 8013a78:	2322      	movs	r3, #34	; 0x22
 8013a7a:	6003      	str	r3, [r0, #0]
 8013a7c:	4646      	mov	r6, r8
 8013a7e:	b942      	cbnz	r2, 8013a92 <_strtol_l.constprop.0+0xe6>
 8013a80:	4630      	mov	r0, r6
 8013a82:	e79e      	b.n	80139c2 <_strtol_l.constprop.0+0x16>
 8013a84:	b107      	cbz	r7, 8013a88 <_strtol_l.constprop.0+0xdc>
 8013a86:	4276      	negs	r6, r6
 8013a88:	2a00      	cmp	r2, #0
 8013a8a:	d0f9      	beq.n	8013a80 <_strtol_l.constprop.0+0xd4>
 8013a8c:	f1bc 0f00 	cmp.w	ip, #0
 8013a90:	d000      	beq.n	8013a94 <_strtol_l.constprop.0+0xe8>
 8013a92:	1e69      	subs	r1, r5, #1
 8013a94:	6011      	str	r1, [r2, #0]
 8013a96:	e7f3      	b.n	8013a80 <_strtol_l.constprop.0+0xd4>
 8013a98:	2430      	movs	r4, #48	; 0x30
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d1b1      	bne.n	8013a02 <_strtol_l.constprop.0+0x56>
 8013a9e:	2308      	movs	r3, #8
 8013aa0:	e7af      	b.n	8013a02 <_strtol_l.constprop.0+0x56>
 8013aa2:	2c30      	cmp	r4, #48	; 0x30
 8013aa4:	d0a5      	beq.n	80139f2 <_strtol_l.constprop.0+0x46>
 8013aa6:	230a      	movs	r3, #10
 8013aa8:	e7ab      	b.n	8013a02 <_strtol_l.constprop.0+0x56>
 8013aaa:	bf00      	nop
 8013aac:	08013c79 	.word	0x08013c79

08013ab0 <strtol>:
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	460a      	mov	r2, r1
 8013ab4:	4601      	mov	r1, r0
 8013ab6:	4802      	ldr	r0, [pc, #8]	; (8013ac0 <strtol+0x10>)
 8013ab8:	6800      	ldr	r0, [r0, #0]
 8013aba:	f7ff bf77 	b.w	80139ac <_strtol_l.constprop.0>
 8013abe:	bf00      	nop
 8013ac0:	20000014 	.word	0x20000014

08013ac4 <__malloc_lock>:
 8013ac4:	4801      	ldr	r0, [pc, #4]	; (8013acc <__malloc_lock+0x8>)
 8013ac6:	f000 b809 	b.w	8013adc <__retarget_lock_acquire_recursive>
 8013aca:	bf00      	nop
 8013acc:	20004f9c 	.word	0x20004f9c

08013ad0 <__malloc_unlock>:
 8013ad0:	4801      	ldr	r0, [pc, #4]	; (8013ad8 <__malloc_unlock+0x8>)
 8013ad2:	f000 b804 	b.w	8013ade <__retarget_lock_release_recursive>
 8013ad6:	bf00      	nop
 8013ad8:	20004f9c 	.word	0x20004f9c

08013adc <__retarget_lock_acquire_recursive>:
 8013adc:	4770      	bx	lr

08013ade <__retarget_lock_release_recursive>:
 8013ade:	4770      	bx	lr

08013ae0 <_init>:
 8013ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ae2:	bf00      	nop
 8013ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ae6:	bc08      	pop	{r3}
 8013ae8:	469e      	mov	lr, r3
 8013aea:	4770      	bx	lr

08013aec <_fini>:
 8013aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aee:	bf00      	nop
 8013af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013af2:	bc08      	pop	{r3}
 8013af4:	469e      	mov	lr, r3
 8013af6:	4770      	bx	lr
